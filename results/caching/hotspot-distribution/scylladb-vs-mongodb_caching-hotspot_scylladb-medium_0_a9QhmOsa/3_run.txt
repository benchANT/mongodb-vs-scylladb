bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-05 07:49:25:503 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-05 07:49:35:487 10 sec: 1147782 operations; 114778.2 current ops/sec; est completion in 2 hours 25 minutes [READ: Count=574479, Max=151423, Min=544, Avg=2633.87, 90=3317, 99=16767, 99.9=42079, 99.99=115775] [UPDATE: Count=579336, Max=149503, Min=450, Avg=2189.79, 90=2791, 99=9439, 99.9=38751, 99.99=115199] 
2023-05-05 07:49:45:487 20 sec: 2588351 operations; 144056.9 current ops/sec; est completion in 2 hours 8 minutes [READ: Count=719961, Max=55839, Min=559, Avg=2291.7, 90=2959, 99=13759, 99.9=19647, 99.99=39103] [UPDATE: Count=718269, Max=44543, Min=465, Avg=1868.56, 90=2519, 99=4663, 99.9=8663, 99.99=38463] 
2023-05-05 07:49:55:487 30 sec: 4026865 operations; 143851.4 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=719038, Max=51135, Min=549, Avg=2290.51, 90=2975, 99=13207, 99.9=19231, 99.99=26767] [UPDATE: Count=719817, Max=29791, Min=486, Avg=1875.68, 90=2529, 99=4943, 99.9=9183, 99.99=17935] 
2023-05-05 07:50:05:487 40 sec: 5458547 operations; 143168.2 current ops/sec; est completion in 2 hours 1 minute [READ: Count=716546, Max=26159, Min=554, Avg=2298.17, 90=2995, 99=13047, 99.9=19055, 99.99=21615] [UPDATE: Count=713933, Max=17935, Min=483, Avg=1886.08, 90=2545, 99=5403, 99.9=8959, 99.99=12511] 
2023-05-05 07:50:15:487 50 sec: 6875026 operations; 141647.9 current ops/sec; est completion in 2 hours [READ: Count=707658, Max=47487, Min=549, Avg=2320.34, 90=3031, 99=13447, 99.9=19391, 99.99=24399] [UPDATE: Count=708898, Max=28623, Min=443, Avg=1899.04, 90=2555, 99=5935, 99.9=10935, 99.99=20639] 
2023-05-05 07:50:25:487 60 sec: 8291411 operations; 141638.5 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=707607, Max=27647, Min=550, Avg=2301.78, 90=3029, 99=13087, 99.9=18831, 99.99=21455] [UPDATE: Count=709961, Max=19711, Min=482, Avg=1885.15, 90=2549, 99=5471, 99.9=8855, 99.99=12823] 
2023-05-05 07:50:35:487 70 sec: 9693996 operations; 140258.5 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=701093, Max=50367, Min=558, Avg=2321.03, 90=3083, 99=13295, 99.9=19247, 99.99=25823] [UPDATE: Count=701122, Max=28319, Min=495, Avg=1895.71, 90=2599, 99=5615, 99.9=9031, 99.99=19583] 
2023-05-05 07:50:45:487 80 sec: 11093975 operations; 139997.9 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=699619, Max=25663, Min=595, Avg=2328.66, 90=3111, 99=13031, 99.9=18911, 99.99=21231] [UPDATE: Count=699651, Max=15839, Min=488, Avg=1906.61, 90=2625, 99=5507, 99.9=8687, 99.99=11095] 
2023-05-05 07:50:55:487 90 sec: 12487343 operations; 139336.8 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=696615, Max=43679, Min=546, Avg=2360.62, 90=3177, 99=13247, 99.9=19263, 99.99=27487] [UPDATE: Count=696307, Max=37951, Min=487, Avg=1921.83, 90=2655, 99=5611, 99.9=8991, 99.99=19487] 
2023-05-05 07:51:05:487 100 sec: 13878460 operations; 139111.7 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=694979, Max=28383, Min=564, Avg=2372.55, 90=3197, 99=13367, 99.9=18927, 99.99=21743] [UPDATE: Count=696808, Max=18479, Min=482, Avg=1932.95, 90=2663, 99=5423, 99.9=8967, 99.99=15047] 
2023-05-05 07:51:15:487 110 sec: 15261487 operations; 138302.7 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=691318, Max=40447, Min=528, Avg=2390.54, 90=3229, 99=13191, 99.9=18975, 99.99=26607] [UPDATE: Count=691832, Max=31199, Min=451, Avg=1943.03, 90=2691, 99=5515, 99.9=9503, 99.99=21695] 
2023-05-05 07:51:25:487 120 sec: 16642947 operations; 138146 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=690828, Max=55615, Min=542, Avg=2389.57, 90=3241, 99=13167, 99.9=19135, 99.99=27503] [UPDATE: Count=690613, Max=46463, Min=475, Avg=1949.37, 90=2717, 99=5295, 99.9=9103, 99.99=22719] 
2023-05-05 07:51:35:487 130 sec: 18030107 operations; 138716 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=695423, Max=25407, Min=568, Avg=2379.25, 90=3241, 99=13103, 99.9=18879, 99.99=21551] [UPDATE: Count=691014, Max=14815, Min=495, Avg=1940.88, 90=2747, 99=5175, 99.9=8319, 99.99=10087] 
2023-05-05 07:51:45:487 140 sec: 19395786 operations; 136567.9 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=683342, Max=49119, Min=512, Avg=2419.23, 90=3339, 99=13255, 99.9=19103, 99.99=26031] [UPDATE: Count=682522, Max=40447, Min=477, Avg=1969.49, 90=2833, 99=5423, 99.9=9255, 99.99=20943] 
2023-05-05 07:51:55:487 150 sec: 20774943 operations; 137915.7 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=689815, Max=25727, Min=550, Avg=2394.16, 90=3317, 99=12935, 99.9=18543, 99.99=21023] [UPDATE: Count=690162, Max=14487, Min=481, Avg=1952.39, 90=2835, 99=5279, 99.9=8535, 99.99=10463] 
2023-05-05 07:52:05:487 160 sec: 22126574 operations; 135163.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=675542, Max=47839, Min=532, Avg=2443.11, 90=3397, 99=13135, 99.9=18975, 99.99=27007] [UPDATE: Count=675189, Max=50623, Min=440, Avg=1992.39, 90=2919, 99=5435, 99.9=8839, 99.99=20975] 
2023-05-05 07:52:15:487 170 sec: 23476362 operations; 134978.8 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=674647, Max=37535, Min=537, Avg=2443.42, 90=3363, 99=13135, 99.9=18751, 99.99=22399] [UPDATE: Count=674936, Max=25919, Min=478, Avg=1998.15, 90=2915, 99=5243, 99.9=9311, 99.99=16655] 
2023-05-05 07:52:25:487 180 sec: 24813445 operations; 133708.3 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=666668, Max=55519, Min=532, Avg=2474.27, 90=3461, 99=13247, 99.9=18895, 99.99=25263] [UPDATE: Count=670727, Max=28559, Min=455, Avg=2010.38, 90=2945, 99=5427, 99.9=8575, 99.99=20479] 
2023-05-05 07:52:35:489 190 sec: 26163268 operations; 134955.31 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=674723, Max=25983, Min=530, Avg=2443.5, 90=3383, 99=12847, 99.9=18463, 99.99=21119] [UPDATE: Count=674786, Max=16591, Min=475, Avg=1997.36, 90=2921, 99=5375, 99.9=8447, 99.99=10543] 
2023-05-05 07:52:45:487 200 sec: 27521697 operations; 135870.07 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=678755, Max=57023, Min=532, Avg=2433.77, 90=3315, 99=13239, 99.9=19023, 99.99=29631] [UPDATE: Count=679845, Max=43103, Min=456, Avg=1979.82, 90=2887, 99=5307, 99.9=9015, 99.99=22223] 
2023-05-05 07:52:55:487 210 sec: 28877837 operations; 135614 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=679070, Max=24655, Min=519, Avg=2435.01, 90=3383, 99=12967, 99.9=18639, 99.99=20863] [UPDATE: Count=677710, Max=12919, Min=466, Avg=1985.08, 90=2931, 99=5203, 99.9=8943, 99.99=10863] 
2023-05-05 07:53:05:487 220 sec: 30260737 operations; 138290 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=691555, Max=51103, Min=503, Avg=2389.36, 90=3297, 99=13175, 99.9=18991, 99.99=27343] [UPDATE: Count=691639, Max=45695, Min=451, Avg=1945.16, 90=2853, 99=5511, 99.9=9391, 99.99=20655] 
2023-05-05 07:53:15:487 230 sec: 31664678 operations; 140394.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=702597, Max=30671, Min=544, Avg=2350.08, 90=3199, 99=13127, 99.9=19103, 99.99=21983] [UPDATE: Count=701258, Max=17439, Min=486, Avg=1919.19, 90=2759, 99=5435, 99.9=8647, 99.99=11143] 
2023-05-05 07:53:25:487 240 sec: 33075577 operations; 141089.9 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=705698, Max=48479, Min=554, Avg=2337.92, 90=3123, 99=13559, 99.9=19871, 99.99=29999] [UPDATE: Count=704326, Max=45343, Min=462, Avg=1910.3, 90=2691, 99=5567, 99.9=10415, 99.99=21087] 
2023-05-05 07:53:35:487 250 sec: 34511855 operations; 143627.8 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=717983, Max=30015, Min=552, Avg=2293.16, 90=3019, 99=13079, 99.9=19327, 99.99=22079] [UPDATE: Count=718271, Max=15847, Min=457, Avg=1880.09, 90=2585, 99=5299, 99.9=9103, 99.99=11287] 
2023-05-05 07:53:45:487 260 sec: 35947114 operations; 143525.9 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=718748, Max=54719, Min=531, Avg=2296.7, 90=2985, 99=13479, 99.9=19695, 99.99=26527] [UPDATE: Count=715118, Max=50079, Min=468, Avg=1882.82, 90=2557, 99=5699, 99.9=9559, 99.99=24623] 
2023-05-05 07:53:55:487 270 sec: 37388343 operations; 144122.9 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=721477, Max=36447, Min=566, Avg=2284.9, 90=2973, 99=13311, 99.9=19503, 99.99=23791] [UPDATE: Count=721105, Max=29055, Min=468, Avg=1870.06, 90=2539, 99=5279, 99.9=8991, 99.99=11759] 
2023-05-05 07:54:05:487 280 sec: 38823833 operations; 143549 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=716291, Max=51423, Min=508, Avg=2297.58, 90=2989, 99=13447, 99.9=19439, 99.99=28047] [UPDATE: Count=719118, Max=48863, Min=468, Avg=1879.66, 90=2551, 99=5359, 99.9=9639, 99.99=22095] 
2023-05-05 07:54:15:487 290 sec: 40260659 operations; 143682.6 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=719323, Max=26639, Min=564, Avg=2291.67, 90=2993, 99=13079, 99.9=19263, 99.99=21807] [UPDATE: Count=717477, Max=15423, Min=492, Avg=1879.29, 90=2561, 99=5555, 99.9=8975, 99.99=11743] 
2023-05-05 07:54:25:487 300 sec: 41696516 operations; 143585.7 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=717130, Max=50495, Min=543, Avg=2296.61, 90=2983, 99=13375, 99.9=19407, 99.99=26911] [UPDATE: Count=719851, Max=43615, Min=482, Avg=1878.38, 90=2549, 99=5447, 99.9=8903, 99.99=19871] 
2023-05-05 07:54:35:487 310 sec: 43132451 operations; 143593.5 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=717997, Max=53631, Min=526, Avg=2299.68, 90=2987, 99=13423, 99.9=19583, 99.99=27055] [UPDATE: Count=718002, Max=28143, Min=476, Avg=1874.51, 90=2551, 99=5291, 99.9=9383, 99.99=21887] 
2023-05-05 07:54:45:487 320 sec: 44557875 operations; 142542.4 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=713042, Max=32895, Min=525, Avg=2317.73, 90=3051, 99=13223, 99.9=18959, 99.99=22239] [UPDATE: Count=712235, Max=21615, Min=487, Avg=1887.54, 90=2575, 99=5415, 99.9=9231, 99.99=14455] 
2023-05-05 07:54:55:487 330 sec: 45985835 operations; 142796 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=714236, Max=56607, Min=522, Avg=2314.87, 90=3045, 99=13335, 99.9=19295, 99.99=29423] [UPDATE: Count=712886, Max=46207, Min=472, Avg=1879.94, 90=2589, 99=5371, 99.9=9023, 99.99=21967] 
2023-05-05 07:55:05:487 340 sec: 47414280 operations; 142844.5 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=714451, Max=28047, Min=526, Avg=2302.74, 90=3015, 99=13223, 99.9=19759, 99.99=23807] [UPDATE: Count=714569, Max=18959, Min=466, Avg=1886.47, 90=2589, 99=5619, 99.9=9639, 99.99=13471] 
2023-05-05 07:55:15:487 350 sec: 48833998 operations; 141971.8 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=710569, Max=51935, Min=537, Avg=2322.24, 90=2993, 99=15303, 99.9=23087, 99.99=28943] [UPDATE: Count=708599, Max=36511, Min=480, Avg=1883.82, 90=2569, 99=6023, 99.9=11639, 99.99=21823] 
2023-05-05 07:55:25:487 360 sec: 50253522 operations; 141952.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=709228, Max=31087, Min=542, Avg=2314.59, 90=3021, 99=14287, 99.9=21551, 99.99=25279] [UPDATE: Count=710238, Max=15903, Min=488, Avg=1885.49, 90=2579, 99=5943, 99.9=9855, 99.99=12407] 
2023-05-05 07:55:35:487 370 sec: 51672757 operations; 141923.5 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=709934, Max=58687, Min=571, Avg=2309.11, 90=2987, 99=14575, 99.9=21327, 99.99=30431] [UPDATE: Count=710374, Max=35871, Min=448, Avg=1872.86, 90=2563, 99=5587, 99.9=9679, 99.99=22367] 
2023-05-05 07:55:45:487 380 sec: 53089282 operations; 141652.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=708839, Max=27167, Min=543, Avg=2277.38, 90=2963, 99=13431, 99.9=20207, 99.99=23055] [UPDATE: Count=707594, Max=16151, Min=469, Avg=1864.45, 90=2543, 99=5443, 99.9=9407, 99.99=11695] 
2023-05-05 07:55:55:487 390 sec: 54493784 operations; 140450.2 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=701680, Max=57439, Min=523, Avg=2298.7, 90=2983, 99=13687, 99.9=20703, 99.99=33311] [UPDATE: Count=701928, Max=40575, Min=460, Avg=1876.32, 90=2567, 99=5851, 99.9=9935, 99.99=23135] 
2023-05-05 07:56:05:487 400 sec: 55893244 operations; 139946 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=699625, Max=29583, Min=554, Avg=2324.55, 90=3095, 99=13519, 99.9=20191, 99.99=23055] [UPDATE: Count=699639, Max=21695, Min=449, Avg=1895.84, 90=2673, 99=5707, 99.9=9647, 99.99=15727] 
2023-05-05 07:56:15:487 410 sec: 57293674 operations; 140043 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=699523, Max=52159, Min=553, Avg=2335.56, 90=3081, 99=13911, 99.9=20799, 99.99=29967] [UPDATE: Count=701006, Max=32991, Min=477, Avg=1898.03, 90=2659, 99=5855, 99.9=9807, 99.99=25311] 
2023-05-05 07:56:25:487 420 sec: 58693749 operations; 140007.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=699384, Max=27983, Min=549, Avg=2332.88, 90=3103, 99=14311, 99.9=21103, 99.99=23903] [UPDATE: Count=701721, Max=17007, Min=488, Avg=1886.1, 90=2657, 99=5519, 99.9=9367, 99.99=11087] 
2023-05-05 07:56:35:487 430 sec: 60084381 operations; 139063.2 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=695727, Max=57535, Min=537, Avg=2377.79, 90=3215, 99=14623, 99.9=21279, 99.99=27423] [UPDATE: Count=693886, Max=36031, Min=488, Avg=1914.74, 90=2745, 99=5799, 99.9=9823, 99.99=21199] 
2023-05-05 07:56:45:487 440 sec: 61475899 operations; 139151.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=696357, Max=35967, Min=531, Avg=2387.56, 90=3203, 99=14799, 99.9=21679, 99.99=25535] [UPDATE: Count=695141, Max=17615, Min=493, Avg=1910.96, 90=2745, 99=5595, 99.9=9567, 99.99=14343] 
2023-05-05 07:56:55:487 450 sec: 62856169 operations; 138027 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=690623, Max=57919, Min=517, Avg=2427.15, 90=3241, 99=16639, 99.9=23439, 99.99=35615] [UPDATE: Count=690638, Max=28575, Min=465, Avg=1914.82, 90=2775, 99=5619, 99.9=10047, 99.99=23231] 
2023-05-05 07:57:05:487 460 sec: 64234876 operations; 137870.7 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=688664, Max=32367, Min=555, Avg=2418.67, 90=3311, 99=14847, 99.9=21343, 99.99=24831] [UPDATE: Count=687129, Max=32895, Min=472, Avg=1933.48, 90=2797, 99=5619, 99.9=9895, 99.99=18543] 
2023-05-05 07:57:15:487 470 sec: 65608426 operations; 137355 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=687275, Max=45727, Min=563, Avg=2418.87, 90=3259, 99=14847, 99.9=21855, 99.99=29087] [UPDATE: Count=688318, Max=44063, Min=468, Avg=1940.56, 90=2791, 99=5727, 99.9=9999, 99.99=26959] 
2023-05-05 07:57:25:487 480 sec: 66991550 operations; 138312.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=691005, Max=29679, Min=572, Avg=2392.42, 90=3221, 99=14271, 99.9=20815, 99.99=23951] [UPDATE: Count=692321, Max=15863, Min=476, Avg=1942.83, 90=2787, 99=5747, 99.9=9527, 99.99=12495] 
2023-05-05 07:57:35:487 490 sec: 68368519 operations; 137696.9 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=688819, Max=52447, Min=537, Avg=2404.79, 90=3227, 99=14631, 99.9=21503, 99.99=28415] [UPDATE: Count=687757, Max=32191, Min=475, Avg=1948.02, 90=2793, 99=5943, 99.9=9807, 99.99=21327] 
2023-05-05 07:57:45:487 500 sec: 69744559 operations; 137604 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=688414, Max=52831, Min=524, Avg=2408.49, 90=3229, 99=14759, 99.9=21727, 99.99=27567] [UPDATE: Count=687659, Max=28287, Min=485, Avg=1947.94, 90=2789, 99=5959, 99.9=9847, 99.99=20271] 
2023-05-05 07:57:55:488 510 sec: 71118831 operations; 137413.46 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=686612, Max=29711, Min=563, Avg=2410.25, 90=3269, 99=14463, 99.9=21071, 99.99=24127] [UPDATE: Count=687664, Max=17775, Min=494, Avg=1951.33, 90=2811, 99=5695, 99.9=9375, 99.99=11439] 
2023-05-05 07:58:05:487 520 sec: 72489590 operations; 137089.61 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=683868, Max=50783, Min=562, Avg=2423.03, 90=3305, 99=14455, 99.9=20543, 99.99=28959] [UPDATE: Count=686924, Max=30095, Min=482, Avg=1952.04, 90=2821, 99=5475, 99.9=9607, 99.99=19551] 
2023-05-05 07:58:15:487 530 sec: 73852502 operations; 136291.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=682137, Max=27359, Min=539, Avg=2431.11, 90=3347, 99=13631, 99.9=19919, 99.99=23071] [UPDATE: Count=681297, Max=18143, Min=480, Avg=1966.99, 90=2853, 99=5363, 99.9=9615, 99.99=11719] 
2023-05-05 07:58:25:487 540 sec: 75208432 operations; 135593 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=677443, Max=54815, Min=522, Avg=2446.19, 90=3367, 99=13903, 99.9=20287, 99.99=28767] [UPDATE: Count=677992, Max=29999, Min=487, Avg=1975.13, 90=2857, 99=5875, 99.9=9839, 99.99=20127] 
2023-05-05 07:58:35:487 550 sec: 76553013 operations; 134458.1 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=672479, Max=30639, Min=550, Avg=2474.53, 90=3425, 99=14759, 99.9=21375, 99.99=24591] [UPDATE: Count=672760, Max=16911, Min=488, Avg=1983.82, 90=2863, 99=5779, 99.9=9911, 99.99=12847] 
2023-05-05 07:58:45:487 560 sec: 77907117 operations; 135410.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=676870, Max=40767, Min=557, Avg=2458.01, 90=3425, 99=14255, 99.9=20575, 99.99=26127] [UPDATE: Count=676497, Max=34719, Min=474, Avg=1969.19, 90=2873, 99=5671, 99.9=9367, 99.99=20063] 
2023-05-05 07:58:55:487 570 sec: 79258779 operations; 135166.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=675542, Max=40799, Min=551, Avg=2458.52, 90=3333, 99=15839, 99.9=23471, 99.99=27327] [UPDATE: Count=676959, Max=28543, Min=478, Avg=1976.69, 90=2845, 99=6355, 99.9=11519, 99.99=18975] 
2023-05-05 07:59:05:487 580 sec: 80610320 operations; 135154.1 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=675354, Max=42527, Min=543, Avg=2457.55, 90=3367, 99=14775, 99.9=21631, 99.99=28991] [UPDATE: Count=675325, Max=31311, Min=483, Avg=1978.14, 90=2855, 99=6011, 99.9=10351, 99.99=25487] 
2023-05-05 07:59:15:487 590 sec: 81968388 operations; 135806.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=679291, Max=27247, Min=554, Avg=2446.95, 90=3365, 99=14399, 99.9=20911, 99.99=23583] [UPDATE: Count=678742, Max=15959, Min=483, Avg=1966.98, 90=2853, 99=5583, 99.9=9543, 99.99=11471] 
2023-05-05 07:59:25:487 600 sec: 83327041 operations; 135865.3 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=679198, Max=50175, Min=534, Avg=2445.83, 90=3353, 99=14575, 99.9=21247, 99.99=27679] [UPDATE: Count=679463, Max=30607, Min=471, Avg=1966.45, 90=2835, 99=5727, 99.9=9719, 99.99=19743] 
2023-05-05 07:59:35:487 610 sec: 84686176 operations; 135913.5 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=679028, Max=31631, Min=540, Avg=2442.59, 90=3337, 99=14431, 99.9=21103, 99.99=24559] [UPDATE: Count=680097, Max=21423, Min=475, Avg=1968.34, 90=2831, 99=5679, 99.9=9631, 99.99=12047] 
2023-05-05 07:59:45:487 620 sec: 86039862 operations; 135368.6 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677053, Max=46239, Min=553, Avg=2450.79, 90=3315, 99=14671, 99.9=21423, 99.99=26463] [UPDATE: Count=677573, Max=31663, Min=469, Avg=1977.85, 90=2805, 99=5811, 99.9=10159, 99.99=21295] 
2023-05-05 07:59:55:489 630 sec: 87389951 operations; 134981.9 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=675776, Max=32031, Min=551, Avg=2457.95, 90=3319, 99=14791, 99.9=21215, 99.99=24383] [UPDATE: Count=673229, Max=19231, Min=467, Avg=1981.44, 90=2805, 99=6047, 99.9=9959, 99.99=15407] 
2023-05-05 08:00:05:487 640 sec: 88737986 operations; 134830.47 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=673741, Max=50943, Min=558, Avg=2468.73, 90=3357, 99=14991, 99.9=22015, 99.99=27631] [UPDATE: Count=675628, Max=46431, Min=461, Avg=1979.82, 90=2807, 99=5927, 99.9=10431, 99.99=21311] 
2023-05-05 08:00:15:487 650 sec: 90090815 operations; 135282.9 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677667, Max=29695, Min=539, Avg=2453.3, 90=3339, 99=14639, 99.9=21359, 99.99=24399] [UPDATE: Count=675010, Max=21663, Min=474, Avg=1976.66, 90=2791, 99=5703, 99.9=10175, 99.99=14743] 
2023-05-05 08:00:25:487 660 sec: 91449705 operations; 135889 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=680399, Max=47775, Min=553, Avg=2443.52, 90=3293, 99=14935, 99.9=22127, 99.99=27743] [UPDATE: Count=678084, Max=36159, Min=486, Avg=1967.05, 90=2743, 99=6027, 99.9=10127, 99.99=21151] 
2023-05-05 08:00:35:487 670 sec: 92825308 operations; 137560.3 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=687280, Max=28415, Min=530, Avg=2409.31, 90=3227, 99=14583, 99.9=21279, 99.99=24079] [UPDATE: Count=688150, Max=15935, Min=486, Avg=1948.42, 90=2705, 99=5535, 99.9=9663, 99.99=11743] 
2023-05-05 08:00:45:487 680 sec: 94193313 operations; 136800.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=684120, Max=54047, Min=552, Avg=2425.13, 90=3245, 99=14831, 99.9=21759, 99.99=27919] [UPDATE: Count=684039, Max=31583, Min=485, Avg=1957.21, 90=2711, 99=5935, 99.9=10071, 99.99=21199] 
2023-05-05 08:00:55:487 690 sec: 95559734 operations; 136642.1 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=683800, Max=61439, Min=540, Avg=2426.3, 90=3245, 99=14831, 99.9=22287, 99.99=48895] [UPDATE: Count=683003, Max=52831, Min=478, Avg=1960.14, 90=2709, 99=5759, 99.9=10199, 99.99=48607] 
2023-05-05 08:01:05:487 700 sec: 96934397 operations; 137466.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=686097, Max=33663, Min=544, Avg=2410.32, 90=3233, 99=14791, 99.9=21807, 99.99=25759] [UPDATE: Count=688123, Max=18927, Min=480, Avg=1951.67, 90=2703, 99=5903, 99.9=10423, 99.99=15895] 
2023-05-05 08:01:15:487 710 sec: 98311223 operations; 137682.6 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=687670, Max=57023, Min=560, Avg=2407.82, 90=3235, 99=14607, 99.9=21439, 99.99=28111] [UPDATE: Count=689370, Max=28847, Min=439, Avg=1946.72, 90=2705, 99=5627, 99.9=9991, 99.99=19535] 
2023-05-05 08:01:25:487 720 sec: 99675769 operations; 136454.6 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=682734, Max=28031, Min=529, Avg=2423.92, 90=3255, 99=14199, 99.9=21343, 99.99=24815] [UPDATE: Count=680940, Max=20879, Min=475, Avg=1968.2, 90=2731, 99=5971, 99.9=10431, 99.99=15039] 
2023-05-05 08:01:35:487 730 sec: 101041921 operations; 136615.2 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=683242, Max=60415, Min=522, Avg=2425.89, 90=3189, 99=16359, 99.9=24671, 99.99=30735] [UPDATE: Count=682990, Max=50975, Min=451, Avg=1962.17, 90=2695, 99=6655, 99.9=12279, 99.99=21503] 
2023-05-05 08:01:45:487 740 sec: 102407001 operations; 136508 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=681900, Max=32751, Min=526, Avg=2431.21, 90=3221, 99=15631, 99.9=23759, 99.99=27871] [UPDATE: Count=683488, Max=15991, Min=468, Avg=1960.59, 90=2713, 99=6135, 99.9=10375, 99.99=13919] 
2023-05-05 08:01:55:487 750 sec: 103776931 operations; 136993 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=685996, Max=56127, Min=548, Avg=2419.21, 90=3193, 99=14871, 99.9=22207, 99.99=28911] [UPDATE: Count=683796, Max=28975, Min=467, Avg=1955.56, 90=2689, 99=5883, 99.9=10231, 99.99=19487] 
2023-05-05 08:02:05:487 760 sec: 105154776 operations; 137784.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=688865, Max=31487, Min=552, Avg=2400.91, 90=3149, 99=14887, 99.9=22079, 99.99=25647] [UPDATE: Count=688813, Max=18911, Min=487, Avg=1949.96, 90=2661, 99=6127, 99.9=11215, 99.99=15175] 
2023-05-05 08:02:15:487 770 sec: 106522986 operations; 136821 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=684403, Max=52895, Min=549, Avg=2414.85, 90=3205, 99=14751, 99.9=22143, 99.99=29087] [UPDATE: Count=683916, Max=28047, Min=469, Avg=1966.25, 90=2713, 99=5559, 99.9=10967, 99.99=19663] 
2023-05-05 08:02:25:487 780 sec: 107893633 operations; 137064.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=684711, Max=31951, Min=564, Avg=2403.87, 90=3201, 99=14559, 99.9=21695, 99.99=25151] [UPDATE: Count=685830, Max=18543, Min=482, Avg=1970.31, 90=2723, 99=5659, 99.9=10055, 99.99=12431] 
2023-05-05 08:02:35:487 790 sec: 109260403 operations; 136677 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=684287, Max=53535, Min=530, Avg=2411.55, 90=3225, 99=14727, 99.9=21839, 99.99=28447] [UPDATE: Count=682631, Max=29087, Min=476, Avg=1973.57, 90=2743, 99=5967, 99.9=10383, 99.99=21791] 
2023-05-05 08:02:45:487 800 sec: 110621535 operations; 136113.2 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=679918, Max=30383, Min=541, Avg=2426.52, 90=3245, 99=14663, 99.9=21567, 99.99=24767] [UPDATE: Count=681038, Max=17535, Min=462, Avg=1978.21, 90=2771, 99=5939, 99.9=9663, 99.99=12263] 
2023-05-05 08:02:55:487 810 sec: 111955432 operations; 133389.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=666773, Max=52831, Min=533, Avg=2482.94, 90=3291, 99=14775, 99.9=22143, 99.99=34527] [UPDATE: Count=667246, Max=38527, Min=455, Avg=2011.51, 90=2791, 99=5923, 99.9=10327, 99.99=33887] 
2023-05-05 08:03:05:487 820 sec: 113286597 operations; 133116.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=664270, Max=25807, Min=521, Avg=2486.1, 90=3337, 99=13823, 99.9=19919, 99.99=22575] [UPDATE: Count=666685, Max=18079, Min=472, Avg=2018.34, 90=2817, 99=5655, 99.9=9007, 99.99=12479] 
2023-05-05 08:03:15:487 830 sec: 114615515 operations; 132891.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=664107, Max=57567, Min=550, Avg=2495.24, 90=3361, 99=14095, 99.9=20463, 99.99=30303] [UPDATE: Count=665895, Max=49279, Min=472, Avg=2016.04, 90=2809, 99=5743, 99.9=9223, 99.99=21599] 
2023-05-05 08:03:25:487 840 sec: 115942992 operations; 132747.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=664528, Max=85247, Min=503, Avg=2498.28, 90=3315, 99=14591, 99.9=21183, 99.99=73535] [UPDATE: Count=662053, Max=77503, Min=496, Avg=2016.72, 90=2775, 99=5699, 99.9=9815, 99.99=72639] 
2023-05-05 08:03:35:487 850 sec: 117287624 operations; 134463.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=673596, Max=56479, Min=538, Avg=2464.26, 90=3249, 99=14447, 99.9=21039, 99.99=27855] [UPDATE: Count=670989, Max=30287, Min=490, Avg=1993.37, 90=2735, 99=5627, 99.9=9559, 99.99=20655] 
2023-05-05 08:03:45:487 860 sec: 118628428 operations; 134080.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=670319, Max=36575, Min=550, Avg=2462.42, 90=3251, 99=13687, 99.9=20111, 99.99=23055] [UPDATE: Count=671141, Max=23167, Min=473, Avg=2008.46, 90=2741, 99=5975, 99.9=9935, 99.99=16959] 
2023-05-05 08:03:55:487 870 sec: 119975482 operations; 134705.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=673263, Max=56767, Min=523, Avg=2450.55, 90=3231, 99=13711, 99.9=20399, 99.99=27471] [UPDATE: Count=673146, Max=48543, Min=477, Avg=1999.98, 90=2735, 99=5759, 99.9=9743, 99.99=20095] 
2023-05-05 08:04:05:491 880 sec: 121332630 operations; 135660.54 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=680075, Max=51775, Min=530, Avg=2433.62, 90=3221, 99=14039, 99.9=20527, 99.99=27855] [UPDATE: Count=678272, Max=49759, Min=468, Avg=1982.8, 90=2735, 99=5867, 99.9=9519, 99.99=20943] 
2023-05-05 08:04:15:487 890 sec: 122705538 operations; 137345.74 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=686737, Max=30927, Min=534, Avg=2403.74, 90=3185, 99=13519, 99.9=20159, 99.99=22815] [UPDATE: Count=685036, Max=17039, Min=481, Avg=1961.7, 90=2701, 99=5531, 99.9=9471, 99.99=11279] 
2023-05-05 08:04:25:487 900 sec: 124082810 operations; 137727.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=689839, Max=53695, Min=535, Avg=2394.84, 90=3175, 99=13599, 99.9=20287, 99.99=28559] [UPDATE: Count=687972, Max=29071, Min=471, Avg=1957.45, 90=2697, 99=5767, 99.9=9559, 99.99=21311] 
2023-05-05 08:04:35:487 910 sec: 125451899 operations; 136908.9 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=684885, Max=26367, Min=543, Avg=2406.9, 90=3223, 99=13567, 99.9=20047, 99.99=23087] [UPDATE: Count=684122, Max=17615, Min=482, Avg=1971.59, 90=2735, 99=5587, 99.9=9455, 99.99=11951] 
2023-05-05 08:04:45:487 920 sec: 126818354 operations; 136645.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=683341, Max=54175, Min=544, Avg=2412.72, 90=3231, 99=13511, 99.9=20095, 99.99=25839] [UPDATE: Count=683136, Max=43647, Min=475, Avg=1974.39, 90=2741, 99=5723, 99.9=9335, 99.99=21535] 
2023-05-05 08:04:55:487 930 sec: 128177349 operations; 135899.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=680351, Max=33439, Min=548, Avg=2433.02, 90=3225, 99=15439, 99.9=23967, 99.99=27615] [UPDATE: Count=678777, Max=20559, Min=496, Avg=1977.34, 90=2755, 99=6371, 99.9=11503, 99.99=14543] 
2023-05-05 08:05:05:487 940 sec: 129517509 operations; 134016 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=670382, Max=57567, Min=533, Avg=2477.3, 90=3255, 99=16591, 99.9=25023, 99.99=33151] [UPDATE: Count=669213, Max=29663, Min=470, Avg=1995.18, 90=2791, 99=6307, 99.9=11775, 99.99=19215] 
2023-05-05 08:05:15:487 950 sec: 130852939 operations; 133543 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=667123, Max=29919, Min=559, Avg=2478.97, 90=3309, 99=14839, 99.9=22175, 99.99=25599] [UPDATE: Count=667902, Max=19343, Min=488, Avg=2012.05, 90=2819, 99=6187, 99.9=10119, 99.99=13527] 
2023-05-05 08:05:25:487 960 sec: 132175302 operations; 132236.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=661096, Max=43647, Min=550, Avg=2502.68, 90=3325, 99=14799, 99.9=21999, 99.99=27951] [UPDATE: Count=662252, Max=30911, Min=495, Avg=2029.19, 90=2807, 99=6195, 99.9=10143, 99.99=21567] 
2023-05-05 08:05:35:487 970 sec: 133502905 operations; 132760.3 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=664082, Max=29983, Min=575, Avg=2494.67, 90=3327, 99=14743, 99.9=21919, 99.99=25263] [UPDATE: Count=663290, Max=17583, Min=482, Avg=2020.97, 90=2813, 99=5979, 99.9=9903, 99.99=12687] 
2023-05-05 08:05:45:487 980 sec: 134824675 operations; 132177 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=660182, Max=46111, Min=561, Avg=2505.08, 90=3349, 99=14735, 99.9=22095, 99.99=28255] [UPDATE: Count=661464, Max=44255, Min=494, Avg=2030.74, 90=2835, 99=6179, 99.9=9903, 99.99=22975] 
2023-05-05 08:05:55:487 990 sec: 136158671 operations; 133399.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=666427, Max=33951, Min=554, Avg=2482.22, 90=3307, 99=14631, 99.9=22047, 99.99=25503] [UPDATE: Count=667115, Max=21151, Min=477, Avg=2011.93, 90=2819, 99=5663, 99.9=9991, 99.99=12295] 
2023-05-05 08:06:05:487 1000 sec: 137482827 operations; 132415.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=661561, Max=40511, Min=556, Avg=2505.45, 90=3337, 99=15047, 99.9=22479, 99.99=27295] [UPDATE: Count=662695, Max=28639, Min=474, Avg=2022.15, 90=2815, 99=6251, 99.9=10383, 99.99=20511] 
2023-05-05 08:06:15:487 1010 sec: 138825553 operations; 134272.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=671318, Max=28463, Min=541, Avg=2468.85, 90=3377, 99=14647, 99.9=21823, 99.99=25103] [UPDATE: Count=671569, Max=17343, Min=494, Avg=1995.75, 90=2821, 99=5915, 99.9=9951, 99.99=12455] 
2023-05-05 08:06:25:487 1020 sec: 140172055 operations; 134650.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=673012, Max=49503, Min=530, Avg=2463.28, 90=3393, 99=14943, 99.9=22575, 99.99=28063] [UPDATE: Count=673323, Max=28703, Min=484, Avg=1989.28, 90=2845, 99=6111, 99.9=10247, 99.99=20559] 
2023-05-05 08:06:35:487 1030 sec: 141507751 operations; 133569.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=667382, Max=30959, Min=552, Avg=2480.13, 90=3423, 99=14615, 99.9=22063, 99.99=25711] [UPDATE: Count=668364, Max=18015, Min=502, Avg=2008.16, 90=2883, 99=5835, 99.9=10071, 99.99=12791] 
2023-05-05 08:06:45:487 1040 sec: 142823736 operations; 131598.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=657986, Max=44511, Min=521, Avg=2519.05, 90=3477, 99=14951, 99.9=22335, 99.99=27327] [UPDATE: Count=657980, Max=29711, Min=478, Avg=2036.52, 90=2931, 99=5927, 99.9=10255, 99.99=20623] 
2023-05-05 08:06:55:487 1050 sec: 144124452 operations; 130071.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=650989, Max=29343, Min=540, Avg=2547.1, 90=3539, 99=14671, 99.9=21839, 99.99=24879] [UPDATE: Count=649618, Max=18975, Min=486, Avg=2061.61, 90=2969, 99=5915, 99.9=9695, 99.99=11783] 
2023-05-05 08:07:05:487 1060 sec: 145433629 operations; 130917.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=654433, Max=52191, Min=535, Avg=2532.7, 90=3499, 99=15167, 99.9=22895, 99.99=29535] [UPDATE: Count=654984, Max=30895, Min=473, Avg=2046.38, 90=2971, 99=6139, 99.9=10623, 99.99=20335] 
2023-05-05 08:07:15:487 1070 sec: 146759898 operations; 132626.9 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=662385, Max=54335, Min=532, Avg=2495.52, 90=3427, 99=15047, 99.9=22559, 99.99=27967] [UPDATE: Count=663808, Max=51839, Min=469, Avg=2025.07, 90=2963, 99=5975, 99.9=10399, 99.99=21727] 
2023-05-05 08:07:25:487 1080 sec: 148080284 operations; 132038.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=660366, Max=29279, Min=532, Avg=2507.33, 90=3453, 99=14823, 99.9=22175, 99.99=25423] [UPDATE: Count=659968, Max=16463, Min=479, Avg=2032.42, 90=2977, 99=6031, 99.9=9815, 99.99=12391] 
2023-05-05 08:07:35:487 1090 sec: 149398527 operations; 131824.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=659316, Max=53599, Min=548, Avg=2510.72, 90=3437, 99=15095, 99.9=22463, 99.99=28111] [UPDATE: Count=659961, Max=28287, Min=479, Avg=2037.23, 90=2963, 99=6255, 99.9=10855, 99.99=19983] 
2023-05-05 08:07:45:487 1100 sec: 150724332 operations; 132580.5 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=662462, Max=31279, Min=546, Avg=2499.48, 90=3497, 99=15007, 99.9=23311, 99.99=26911] [UPDATE: Count=661858, Max=16591, Min=451, Avg=2023.33, 90=2983, 99=6255, 99.9=10759, 99.99=13855] 
2023-05-05 08:07:55:487 1110 sec: 152044369 operations; 132003.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=659328, Max=40223, Min=531, Avg=2518.76, 90=3469, 99=16975, 99.9=26047, 99.99=31935] [UPDATE: Count=662129, Max=33759, Min=463, Avg=2021.88, 90=2991, 99=6719, 99.9=12815, 99.99=20911] 
2023-05-05 08:08:05:487 1120 sec: 153390185 operations; 134581.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=672420, Max=32223, Min=539, Avg=2468.1, 90=3379, 99=16591, 99.9=24463, 99.99=28351] [UPDATE: Count=672955, Max=19535, Min=486, Avg=1986.55, 90=2917, 99=6187, 99.9=10879, 99.99=14559] 
2023-05-05 08:08:15:487 1130 sec: 154746265 operations; 135608 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=677771, Max=55711, Min=543, Avg=2445.21, 90=3311, 99=15159, 99.9=22991, 99.99=29471] [UPDATE: Count=678587, Max=35935, Min=477, Avg=1975.77, 90=2837, 99=6263, 99.9=10567, 99.99=23775] 
2023-05-05 08:08:25:487 1140 sec: 156118305 operations; 137204 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=685722, Max=32511, Min=568, Avg=2412.24, 90=3283, 99=14775, 99.9=22287, 99.99=25983] [UPDATE: Count=685441, Max=18991, Min=469, Avg=1956.87, 90=2819, 99=5939, 99.9=10103, 99.99=13007] 
2023-05-05 08:08:35:487 1150 sec: 157489788 operations; 137148.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=684975, Max=56127, Min=519, Avg=2416.29, 90=3245, 99=15543, 99.9=24335, 99.99=33695] [UPDATE: Count=687452, Max=29775, Min=484, Avg=1955.09, 90=2787, 99=6319, 99.9=11407, 99.99=27535] 
2023-05-05 08:08:45:487 1160 sec: 158889050 operations; 139926.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=700088, Max=33631, Min=547, Avg=2364.03, 90=3173, 99=14703, 99.9=22351, 99.99=26415] [UPDATE: Count=698360, Max=17599, Min=495, Avg=1919.27, 90=2717, 99=5827, 99.9=10111, 99.99=13111] 
2023-05-05 08:08:55:487 1170 sec: 160292449 operations; 140339.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=702309, Max=58111, Min=519, Avg=2361.54, 90=3159, 99=14351, 99.9=20399, 99.99=31903] [UPDATE: Count=701183, Max=45023, Min=474, Avg=1909.28, 90=2687, 99=5303, 99.9=9511, 99.99=21807] 
2023-05-05 08:09:05:487 1180 sec: 161692087 operations; 139963.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=699380, Max=26047, Min=553, Avg=2366.14, 90=3197, 99=13615, 99.9=19727, 99.99=22463] [UPDATE: Count=700123, Max=19215, Min=475, Avg=1917.12, 90=2715, 99=5451, 99.9=9127, 99.99=12479] 
2023-05-05 08:09:15:487 1190 sec: 163083636 operations; 139154.9 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=696254, Max=60287, Min=528, Avg=2376.18, 90=3245, 99=13319, 99.9=19567, 99.99=30927] [UPDATE: Count=695369, Max=34623, Min=483, Avg=1931.47, 90=2771, 99=5615, 99.9=9199, 99.99=21935] 
2023-05-05 08:09:25:487 1200 sec: 164459285 operations; 137564.9 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=688347, Max=63519, Min=540, Avg=2405.17, 90=3307, 99=13511, 99.9=19919, 99.99=50335] [UPDATE: Count=687351, Max=55615, Min=479, Avg=1951.85, 90=2797, 99=5491, 99.9=9599, 99.99=49983] 
2023-05-05 08:09:35:487 1210 sec: 165830025 operations; 137074 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=685828, Max=55487, Min=553, Avg=2431.59, 90=3363, 99=14535, 99.9=20687, 99.99=28559] [UPDATE: Count=684970, Max=34527, Min=469, Avg=1941.1, 90=2815, 99=5471, 99.9=9567, 99.99=22047] 
2023-05-05 08:09:45:487 1220 sec: 167221243 operations; 139121.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=695434, Max=27375, Min=568, Avg=2389.28, 90=3255, 99=14239, 99.9=20399, 99.99=23119] [UPDATE: Count=695550, Max=17631, Min=451, Avg=1919.92, 90=2745, 99=5423, 99.9=9071, 99.99=11007] 
2023-05-05 08:09:55:487 1230 sec: 168615898 operations; 139465.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=697753, Max=43999, Min=561, Avg=2372.84, 90=3211, 99=13567, 99.9=19935, 99.99=25311] [UPDATE: Count=698224, Max=46303, Min=472, Avg=1924.71, 90=2723, 99=5711, 99.9=9191, 99.99=20479] 
2023-05-05 08:10:05:487 1240 sec: 170027777 operations; 141187.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=706089, Max=28383, Min=546, Avg=2340.27, 90=3137, 99=13399, 99.9=19455, 99.99=22367] [UPDATE: Count=705905, Max=17871, Min=458, Avg=1905.94, 90=2661, 99=5623, 99.9=9135, 99.99=13591] 
2023-05-05 08:10:15:487 1250 sec: 171443027 operations; 141525 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=706494, Max=51519, Min=539, Avg=2332.96, 90=3107, 99=13463, 99.9=19727, 99.99=26799] [UPDATE: Count=707674, Max=28927, Min=493, Avg=1902.71, 90=2641, 99=5575, 99.9=9359, 99.99=23183] 
2023-05-05 08:10:25:487 1260 sec: 172864212 operations; 142118.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=711051, Max=54559, Min=525, Avg=2321.64, 90=3079, 99=13519, 99.9=19999, 99.99=26975] [UPDATE: Count=710390, Max=48511, Min=449, Avg=1896.28, 90=2611, 99=5711, 99.9=9231, 99.99=20271] 
2023-05-05 08:10:35:487 1270 sec: 174282477 operations; 141826.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=709459, Max=32511, Min=547, Avg=2325.92, 90=3071, 99=13551, 99.9=19647, 99.99=22495] [UPDATE: Count=708813, Max=25199, Min=497, Avg=1900.64, 90=2605, 99=5687, 99.9=9175, 99.99=17119] 
2023-05-05 08:10:45:487 1280 sec: 175702534 operations; 142005.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=710368, Max=51295, Min=547, Avg=2323.57, 90=3053, 99=13687, 99.9=20047, 99.99=28735] [UPDATE: Count=710456, Max=45951, Min=478, Avg=1897.05, 90=2597, 99=5547, 99.9=9407, 99.99=21391] 
2023-05-05 08:10:55:487 1290 sec: 177117890 operations; 141535.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=709131, Max=30959, Min=541, Avg=2332.16, 90=3061, 99=14151, 99.9=21695, 99.99=25999] [UPDATE: Count=705118, Max=19167, Min=504, Avg=1902.62, 90=2607, 99=5995, 99.9=10223, 99.99=13895] 
2023-05-05 08:11:05:487 1300 sec: 178529293 operations; 141140.3 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=705736, Max=54399, Min=529, Avg=2343.88, 90=3043, 99=15695, 99.9=24047, 99.99=29615] [UPDATE: Count=706275, Max=32079, Min=464, Avg=1902.6, 90=2595, 99=6559, 99.9=11879, 99.99=23567] 
2023-05-05 08:11:15:487 1310 sec: 179939440 operations; 141014.7 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=704421, Max=30191, Min=554, Avg=2344.93, 90=3095, 99=14775, 99.9=22095, 99.99=25695] [UPDATE: Count=705571, Max=18079, Min=508, Avg=1906.71, 90=2635, 99=5819, 99.9=9999, 99.99=13175] 
2023-05-05 08:11:25:487 1320 sec: 181348914 operations; 140947.4 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=704913, Max=50911, Min=565, Avg=2351.35, 90=3097, 99=14895, 99.9=22111, 99.99=27327] [UPDATE: Count=704887, Max=43071, Min=474, Avg=1901.08, 90=2637, 99=5847, 99.9=10119, 99.99=22255] 
2023-05-05 08:11:35:487 1330 sec: 182769871 operations; 142095.7 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=709035, Max=28207, Min=530, Avg=2327.15, 90=3055, 99=14519, 99.9=21711, 99.99=24863] [UPDATE: Count=711814, Max=17407, Min=471, Avg=1892.24, 90=2611, 99=5699, 99.9=9919, 99.99=12175] 
2023-05-05 08:11:45:487 1340 sec: 184180285 operations; 141041.4 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=704238, Max=59455, Min=519, Avg=2352.5, 90=3097, 99=14823, 99.9=22175, 99.99=33151] [UPDATE: Count=705331, Max=30527, Min=470, Avg=1898.28, 90=2615, 99=5779, 99.9=10215, 99.99=20047] 
2023-05-05 08:11:55:487 1350 sec: 185594130 operations; 141384.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=706596, Max=30847, Min=543, Avg=2338.86, 90=3069, 99=14551, 99.9=21551, 99.99=24623] [UPDATE: Count=707366, Max=21007, Min=471, Avg=1900.55, 90=2605, 99=5647, 99.9=10343, 99.99=14831] 
2023-05-05 08:12:05:487 1360 sec: 187008185 operations; 141405.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=707465, Max=44895, Min=547, Avg=2338.22, 90=3025, 99=14823, 99.9=22015, 99.99=26735] [UPDATE: Count=706493, Max=29023, Min=457, Avg=1901.07, 90=2559, 99=6063, 99.9=10287, 99.99=20927] 
2023-05-05 08:12:15:487 1370 sec: 188422397 operations; 141421.2 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=708016, Max=34527, Min=539, Avg=2335.85, 90=3025, 99=14919, 99.9=21759, 99.99=24975] [UPDATE: Count=706171, Max=19263, Min=475, Avg=1901.91, 90=2561, 99=5943, 99.9=10167, 99.99=17535] 
2023-05-05 08:12:25:487 1380 sec: 189836445 operations; 141404.8 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=706287, Max=53823, Min=548, Avg=2340.61, 90=3023, 99=14871, 99.9=22239, 99.99=27887] [UPDATE: Count=707573, Max=47711, Min=464, Avg=1899.75, 90=2557, 99=5883, 99.9=10311, 99.99=21071] 
2023-05-05 08:12:35:487 1390 sec: 191251166 operations; 141472.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=708361, Max=43071, Min=560, Avg=2336.83, 90=3023, 99=14935, 99.9=22111, 99.99=27023] [UPDATE: Count=706533, Max=29103, Min=469, Avg=1899.23, 90=2557, 99=5575, 99.9=10015, 99.99=26127] 
2023-05-05 08:12:45:487 1400 sec: 192662184 operations; 141101.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=705734, Max=52735, Min=520, Avg=2344, 90=3017, 99=15191, 99.9=22767, 99.99=29615] [UPDATE: Count=706428, Max=51327, Min=473, Avg=1903.85, 90=2555, 99=6247, 99.9=10671, 99.99=22367] 
2023-05-05 08:12:55:487 1410 sec: 194073421 operations; 141123.7 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=705693, Max=30031, Min=568, Avg=2343.11, 90=3047, 99=14783, 99.9=22159, 99.99=25167] [UPDATE: Count=704666, Max=18511, Min=476, Avg=1904.39, 90=2569, 99=5747, 99.9=10007, 99.99=12647] 
2023-05-05 08:13:05:487 1420 sec: 195481086 operations; 140766.5 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=704351, Max=56575, Min=565, Avg=2347.85, 90=3029, 99=15071, 99.9=22671, 99.99=29743] [UPDATE: Count=702955, Max=53215, Min=446, Avg=1910.43, 90=2561, 99=6271, 99.9=10767, 99.99=21119] 
2023-05-05 08:13:15:487 1430 sec: 196898594 operations; 141750.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=709080, Max=33215, Min=534, Avg=2333.15, 90=3015, 99=15023, 99.9=22303, 99.99=26095] [UPDATE: Count=709289, Max=18927, Min=471, Avg=1895.43, 90=2549, 99=5879, 99.9=10495, 99.99=13111] 
2023-05-05 08:13:25:487 1440 sec: 198298808 operations; 140021.4 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=699762, Max=53343, Min=551, Avg=2364.91, 90=3057, 99=15199, 99.9=22607, 99.99=29743] [UPDATE: Count=699751, Max=47711, Min=485, Avg=1916.43, 90=2581, 99=6031, 99.9=10719, 99.99=19007] 
2023-05-05 08:13:35:487 1450 sec: 199698571 operations; 139976.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=699276, Max=58239, Min=495, Avg=2366.8, 90=3071, 99=14879, 99.9=21679, 99.99=37151] [UPDATE: Count=700495, Max=38591, Min=469, Avg=1915.9, 90=2583, 99=5731, 99.9=10279, 99.99=20511] 
2023-05-05 08:13:45:487 1460 sec: 201103068 operations; 140449.7 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=702504, Max=31807, Min=548, Avg=2354.69, 90=3055, 99=14727, 99.9=21999, 99.99=26495] [UPDATE: Count=701992, Max=17919, Min=478, Avg=1913.38, 90=2577, 99=5767, 99.9=10127, 99.99=14439] 
2023-05-05 08:13:55:487 1470 sec: 202500305 operations; 139723.7 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=698786, Max=51967, Min=529, Avg=2370.54, 90=3043, 99=16479, 99.9=25071, 99.99=31359] [UPDATE: Count=699340, Max=39551, Min=466, Avg=1919.21, 90=2567, 99=6599, 99.9=12239, 99.99=21567] 
2023-05-05 08:14:05:487 1480 sec: 203906471 operations; 140616.6 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=702551, Max=37183, Min=560, Avg=2357.49, 90=3033, 99=16079, 99.9=24159, 99.99=29071] [UPDATE: Count=702762, Max=20911, Min=471, Avg=1905.91, 90=2563, 99=5947, 99.9=10751, 99.99=15079] 
2023-05-05 08:14:15:487 1490 sec: 205315657 operations; 140918.6 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=704501, Max=53023, Min=548, Avg=2348.64, 90=3035, 99=15063, 99.9=22191, 99.99=28895] [UPDATE: Count=704532, Max=31263, Min=489, Avg=1906.73, 90=2567, 99=5767, 99.9=10447, 99.99=22111] 
2023-05-05 08:14:25:487 1500 sec: 206724347 operations; 140869 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=704863, Max=30319, Min=552, Avg=2346.39, 90=3035, 99=14719, 99.9=21551, 99.99=24527] [UPDATE: Count=703895, Max=20367, Min=490, Avg=1907.11, 90=2585, 99=5979, 99.9=10047, 99.99=13495] 
2023-05-05 08:14:35:487 1510 sec: 208141166 operations; 141681.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=708520, Max=35263, Min=565, Avg=2335.84, 90=3011, 99=14719, 99.9=22015, 99.99=27599] [UPDATE: Count=708303, Max=30191, Min=464, Avg=1894.95, 90=2577, 99=5555, 99.9=10223, 99.99=20767] 
2023-05-05 08:14:45:487 1520 sec: 209556106 operations; 141494 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=706937, Max=36287, Min=572, Avg=2340.15, 90=3025, 99=14631, 99.9=21727, 99.99=25487] [UPDATE: Count=708953, Max=29791, Min=466, Avg=1896.95, 90=2581, 99=5715, 99.9=9719, 99.99=24271] 
2023-05-05 08:14:55:487 1530 sec: 210959474 operations; 140336.8 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=701356, Max=50079, Min=517, Avg=2359.88, 90=3059, 99=14751, 99.9=21775, 99.99=27471] [UPDATE: Count=701176, Max=27839, Min=468, Avg=1911.65, 90=2611, 99=6035, 99.9=10447, 99.99=21359] 
2023-05-05 08:15:05:487 1540 sec: 212358589 operations; 139911.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=699903, Max=35231, Min=559, Avg=2365.47, 90=3059, 99=14871, 99.9=21423, 99.99=24847] [UPDATE: Count=698988, Max=24015, Min=451, Avg=1918.62, 90=2611, 99=5815, 99.9=10967, 99.99=16031] 
2023-05-05 08:15:15:487 1550 sec: 213756236 operations; 139764.7 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=698409, Max=50047, Min=557, Avg=2368.01, 90=3057, 99=14855, 99.9=22111, 99.99=28287] [UPDATE: Count=698243, Max=68479, Min=483, Avg=1925.79, 90=2625, 99=5671, 99.9=10535, 99.99=24959] 
2023-05-05 08:15:25:487 1560 sec: 215139133 operations; 138289.7 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=692281, Max=68927, Min=568, Avg=2389.61, 90=3091, 99=14863, 99.9=21951, 99.99=58655] [UPDATE: Count=691667, Max=67135, Min=487, Avg=1939.4, 90=2635, 99=6027, 99.9=9879, 99.99=54335] 
2023-05-05 08:15:35:487 1570 sec: 216531889 operations; 139275.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=697092, Max=54367, Min=566, Avg=2376.94, 90=3087, 99=14983, 99.9=21999, 99.99=28399] [UPDATE: Count=695714, Max=33855, Min=481, Avg=1926.68, 90=2639, 99=5815, 99.9=10135, 99.99=21695] 
2023-05-05 08:15:45:487 1580 sec: 217914746 operations; 138285.7 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=692172, Max=113919, Min=538, Avg=2390.23, 90=3095, 99=14967, 99.9=22207, 99.99=94591] [UPDATE: Count=690551, Max=100031, Min=495, Avg=1944.01, 90=2657, 99=5763, 99.9=9967, 99.99=94143] 
2023-05-05 08:15:55:487 1590 sec: 219297527 operations; 138278.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=692463, Max=48159, Min=543, Avg=2392.44, 90=3127, 99=14903, 99.9=22015, 99.99=28031] [UPDATE: Count=690513, Max=30191, Min=486, Avg=1941.81, 90=2703, 99=6023, 99.9=10383, 99.99=21775] 
2023-05-05 08:16:05:487 1600 sec: 220685569 operations; 138804.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=693561, Max=31887, Min=541, Avg=2382.11, 90=3115, 99=14759, 99.9=22223, 99.99=25999] [UPDATE: Count=694361, Max=19327, Min=465, Avg=1936.74, 90=2689, 99=6071, 99.9=9959, 99.99=14351] 
2023-05-05 08:16:15:487 1610 sec: 222073315 operations; 138774.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=693832, Max=50943, Min=528, Avg=2388.29, 90=3147, 99=14927, 99.9=22063, 99.99=28511] [UPDATE: Count=693882, Max=47679, Min=463, Avg=1931.44, 90=2681, 99=6003, 99.9=10551, 99.99=22175] 
2023-05-05 08:16:25:487 1620 sec: 223470918 operations; 139760.3 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=698856, Max=30079, Min=561, Avg=2370.22, 90=3121, 99=14895, 99.9=22079, 99.99=25295] [UPDATE: Count=698800, Max=18591, Min=480, Avg=1918.99, 90=2661, 99=5783, 99.9=10127, 99.99=13151] 
2023-05-05 08:16:35:487 1630 sec: 224861015 operations; 139009.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=694745, Max=53343, Min=536, Avg=2382.13, 90=3111, 99=15095, 99.9=22239, 99.99=28575] [UPDATE: Count=695425, Max=45375, Min=453, Avg=1930.19, 90=2673, 99=6139, 99.9=10623, 99.99=21999] 
2023-05-05 08:16:45:487 1640 sec: 226239257 operations; 137824.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=688136, Max=54943, Min=502, Avg=2400.63, 90=3147, 99=14951, 99.9=22255, 99.99=28703] [UPDATE: Count=690829, Max=28047, Min=460, Avg=1949.62, 90=2705, 99=5871, 99.9=10111, 99.99=20319] 
2023-05-05 08:16:55:487 1650 sec: 227597502 operations; 135824.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=679244, Max=32895, Min=541, Avg=2439.13, 90=3189, 99=15439, 99.9=23375, 99.99=27727] [UPDATE: Count=678933, Max=24703, Min=495, Avg=1974.61, 90=2731, 99=6299, 99.9=10951, 99.99=14247] 
2023-05-05 08:17:05:487 1660 sec: 228939576 operations; 134207.4 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=671419, Max=49151, Min=517, Avg=2479.77, 90=3235, 99=17151, 99.9=26143, 99.99=31599] [UPDATE: Count=669884, Max=34719, Min=484, Avg=1986.5, 90=2743, 99=6611, 99.9=12191, 99.99=20015] 
2023-05-05 08:17:15:487 1670 sec: 230314071 operations; 137449.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=687915, Max=30735, Min=544, Avg=2418.21, 90=3191, 99=15639, 99.9=23199, 99.99=26703] [UPDATE: Count=686647, Max=16719, Min=490, Avg=1942.48, 90=2679, 99=6039, 99.9=10151, 99.99=12839] 
2023-05-05 08:17:25:487 1680 sec: 231689623 operations; 137555.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=687971, Max=58815, Min=527, Avg=2425.68, 90=3213, 99=15823, 99.9=23727, 99.99=30991] [UPDATE: Count=687697, Max=40255, Min=433, Avg=1932.25, 90=2663, 99=5987, 99.9=10527, 99.99=22079] 
2023-05-05 08:17:35:487 1690 sec: 233077014 operations; 138739.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=693634, Max=30703, Min=544, Avg=2401.59, 90=3145, 99=16343, 99.9=23887, 99.99=27071] [UPDATE: Count=693663, Max=17855, Min=493, Avg=1919.14, 90=2627, 99=5803, 99.9=10167, 99.99=13007] 
2023-05-05 08:17:45:487 1700 sec: 234468594 operations; 139158 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=695170, Max=52031, Min=533, Avg=2375.36, 90=3103, 99=15143, 99.9=22719, 99.99=29439] [UPDATE: Count=696481, Max=46111, Min=472, Avg=1932.68, 90=2625, 99=5955, 99.9=10471, 99.99=27551] 
2023-05-05 08:17:55:487 1710 sec: 235866653 operations; 139805.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=698783, Max=44639, Min=538, Avg=2359.07, 90=3079, 99=14895, 99.9=22175, 99.99=27055] [UPDATE: Count=700418, Max=30943, Min=464, Avg=1928.44, 90=2617, 99=5899, 99.9=9959, 99.99=26511] 
2023-05-05 08:18:05:487 1720 sec: 237265663 operations; 139901 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=699417, Max=38751, Min=524, Avg=2361.45, 90=3075, 99=15215, 99.9=22479, 99.99=29023] [UPDATE: Count=698363, Max=38015, Min=480, Avg=1923.48, 90=2595, 99=6195, 99.9=10519, 99.99=21295] 
2023-05-05 08:18:15:487 1730 sec: 238676893 operations; 141123 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=705076, Max=33375, Min=559, Avg=2340.59, 90=3037, 99=15231, 99.9=22591, 99.99=25967] [UPDATE: Count=707047, Max=22607, Min=484, Avg=1907.27, 90=2581, 99=6131, 99.9=10463, 99.99=14055] 
2023-05-05 08:18:25:487 1740 sec: 240080667 operations; 140377.4 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=702945, Max=57087, Min=527, Avg=2353.42, 90=3041, 99=15487, 99.9=23743, 99.99=39135] [UPDATE: Count=699825, Max=43519, Min=474, Avg=1917, 90=2593, 99=6195, 99.9=11111, 99.99=37695] 
2023-05-05 08:18:35:487 1750 sec: 241496662 operations; 141599.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=707843, Max=32735, Min=553, Avg=2334.99, 90=3011, 99=15327, 99.9=23007, 99.99=26367] [UPDATE: Count=708186, Max=17599, Min=497, Avg=1897.57, 90=2557, 99=6047, 99.9=10287, 99.99=13151] 
2023-05-05 08:18:45:487 1760 sec: 242915371 operations; 141870.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=709635, Max=57087, Min=570, Avg=2337.36, 90=2973, 99=15383, 99.9=23039, 99.99=32543] [UPDATE: Count=709236, Max=45215, Min=478, Avg=1887.47, 90=2519, 99=6079, 99.9=10855, 99.99=28767] 
2023-05-05 08:18:55:488 1770 sec: 244335352 operations; 141983.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=710356, Max=29807, Min=541, Avg=2332.45, 90=3041, 99=14711, 99.9=21919, 99.99=24671] [UPDATE: Count=709525, Max=16623, Min=486, Avg=1887.85, 90=2559, 99=5735, 99.9=9815, 99.99=12151] 
2023-05-05 08:19:05:487 1780 sec: 245738665 operations; 140345.33 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=701494, Max=50687, Min=556, Avg=2363.92, 90=3067, 99=15271, 99.9=22351, 99.99=27855] [UPDATE: Count=702334, Max=27791, Min=462, Avg=1909.71, 90=2581, 99=5967, 99.9=10695, 99.99=21327] 
2023-05-05 08:19:15:487 1790 sec: 247133634 operations; 139496.9 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=697243, Max=41663, Min=559, Avg=2374.14, 90=3127, 99=14927, 99.9=22543, 99.99=31263] [UPDATE: Count=698182, Max=36767, Min=479, Avg=1922.22, 90=2627, 99=6127, 99.9=10191, 99.99=30431] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-05 08:19:25:487 1800 sec: 248572892 operations; 143925.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=719927, Max=53791, Min=513, Avg=2306.99, 90=3107, 99=14831, 99.9=22031, 99.99=28159] [UPDATE: Count=717934, Max=35103, Min=461, Avg=1856.5, 90=2613, 99=6075, 99.9=10007, 99.99=21503] 
Still waiting for thread Thread-185 to complete. Workload status: true
2023-05-05 08:19:27:743 1802 sec: 248577171 operations; 1896.72 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=2104, Max=21007, Min=549, Avg=2110.35, 90=3163, 99=14655, 99.9=19631, 99.99=21007] [CLEANUP: Count=300, Max=2217983, Min=0, Avg=7391.49, 90=2, 99=19, 99.9=2217983, 99.99=2217983] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802255
[OVERALL], Throughput(ops/sec), 137925.6381588621
[TOTAL_GCS_PS_Scavenge], Count, 4022
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18602
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0321513881221025
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 141
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.007823532186066899
[TOTAL_GCs], Count, 4025
[TOTAL_GC_TIME], Time(ms), 18743
[TOTAL_GC_TIME_%], Time(%), 1.0399749203081696
[READ], Operations, 124292796
[READ], AverageLatency(us), 2393.4989020843977
[READ], MinLatency(us), 495
[READ], MaxLatency(us), 151423
[READ], 95thPercentileLatency(us), 3781
[READ], 99thPercentileLatency(us), 14359
[READ], Return=OK, 124292796
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7391.493333333333
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2217983
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 19
[UPDATE], Operations, 124284375
[UPDATE], AverageLatency(us), 1941.7123821880264
[UPDATE], MinLatency(us), 433
[UPDATE], MaxLatency(us), 149503
[UPDATE], 95thPercentileLatency(us), 3053
[UPDATE], 99thPercentileLatency(us), 5811
[UPDATE], Return=OK, 124284375
