bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-05 07:49:24:230 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-05 07:49:34:214 10 sec: 1172059 operations; 117205.9 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=586051, Max=109119, Min=542, Avg=2582.02, 90=3291, 99=17039, 99.9=35807, 99.99=91519] [UPDATE: Count=592154, Max=108223, Min=504, Avg=2151.32, 90=2761, 99=10391, 99.9=33503, 99.99=91775] 
2023-05-05 07:49:44:214 20 sec: 2611895 operations; 143983.6 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=720500, Max=25967, Min=554, Avg=2291.93, 90=2963, 99=13775, 99.9=19503, 99.99=21807] [UPDATE: Count=717028, Max=23263, Min=510, Avg=1870.09, 90=2519, 99=4651, 99.9=8751, 99.99=13351] 
2023-05-05 07:49:54:214 30 sec: 4041640 operations; 142974.5 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=714366, Max=54431, Min=544, Avg=2304.48, 90=2979, 99=13391, 99.9=19391, 99.99=28287] [UPDATE: Count=714949, Max=50783, Min=501, Avg=1888.17, 90=2535, 99=4863, 99.9=9639, 99.99=21007] 
2023-05-05 07:50:04:214 40 sec: 5468964 operations; 142732.4 current ops/sec; est completion in 2 hours 1 minute [READ: Count=713913, Max=26095, Min=590, Avg=2301.47, 90=2993, 99=13111, 99.9=19167, 99.99=21727] [UPDATE: Count=713433, Max=19023, Min=500, Avg=1891.9, 90=2545, 99=5175, 99.9=9079, 99.99=13527] 
2023-05-05 07:50:14:213 50 sec: 6876353 operations; 140738.9 current ops/sec; est completion in 2 hours [READ: Count=703330, Max=37311, Min=554, Avg=2334.51, 90=3045, 99=13455, 99.9=19487, 99.99=26751] [UPDATE: Count=704318, Max=28095, Min=481, Avg=1911.37, 90=2563, 99=5943, 99.9=10975, 99.99=21855] 
2023-05-05 07:50:24:214 60 sec: 8293701 operations; 141734.8 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=708832, Max=29455, Min=588, Avg=2302.98, 90=3019, 99=13119, 99.9=18847, 99.99=21535] [UPDATE: Count=708433, Max=17791, Min=494, Avg=1887.11, 90=2545, 99=5111, 99.9=9303, 99.99=11951] 
2023-05-05 07:50:34:214 70 sec: 9695276 operations; 140157.5 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=700821, Max=51935, Min=553, Avg=2323.24, 90=3085, 99=13215, 99.9=19103, 99.99=26255] [UPDATE: Count=701051, Max=28639, Min=485, Avg=1901.08, 90=2597, 99=5463, 99.9=9127, 99.99=19295] 
2023-05-05 07:50:44:213 80 sec: 11094796 operations; 139952 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=699102, Max=27599, Min=582, Avg=2339.17, 90=3115, 99=13199, 99.9=18911, 99.99=21183] [UPDATE: Count=699207, Max=13727, Min=531, Avg=1911.5, 90=2623, 99=5387, 99.9=8767, 99.99=10263] 
2023-05-05 07:50:54:213 90 sec: 12486923 operations; 139212.7 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=695759, Max=40799, Min=573, Avg=2364.61, 90=3163, 99=13351, 99.9=19199, 99.99=26559] [UPDATE: Count=696182, Max=37119, Min=523, Avg=1928.38, 90=2649, 99=5643, 99.9=9239, 99.99=20623] 
2023-05-05 07:51:04:214 100 sec: 13870717 operations; 138379.4 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=691920, Max=28847, Min=575, Avg=2384.79, 90=3195, 99=13271, 99.9=18991, 99.99=22015] [UPDATE: Count=693045, Max=18383, Min=520, Avg=1945.55, 90=2669, 99=5663, 99.9=9687, 99.99=14575] 
2023-05-05 07:51:14:214 110 sec: 15250199 operations; 137948.2 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=689413, Max=43551, Min=565, Avg=2394.31, 90=3221, 99=13135, 99.9=19023, 99.99=26271] [UPDATE: Count=689744, Max=28607, Min=517, Avg=1951.74, 90=2681, 99=5615, 99.9=9111, 99.99=21887] 
2023-05-05 07:51:24:213 120 sec: 16625444 operations; 137524.5 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=687762, Max=28735, Min=533, Avg=2401.6, 90=3235, 99=13231, 99.9=18783, 99.99=21439] [UPDATE: Count=686693, Max=18159, Min=510, Avg=1956.73, 90=2703, 99=5459, 99.9=8895, 99.99=15119] 
2023-05-05 07:51:34:213 130 sec: 18005303 operations; 137985.9 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=689068, Max=47071, Min=545, Avg=2392.19, 90=3221, 99=13151, 99.9=19087, 99.99=25775] [UPDATE: Count=690910, Max=33663, Min=490, Avg=1952.73, 90=2717, 99=5319, 99.9=8999, 99.99=21999] 
2023-05-05 07:51:44:213 140 sec: 19368533 operations; 136323 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=681643, Max=52095, Min=556, Avg=2422.3, 90=3319, 99=13239, 99.9=19103, 99.99=25119] [UPDATE: Count=681534, Max=27839, Min=497, Avg=1975.25, 90=2805, 99=5451, 99.9=8959, 99.99=21327] 
2023-05-05 07:51:54:213 150 sec: 20742233 operations; 137370 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=687768, Max=28655, Min=584, Avg=2404.67, 90=3297, 99=13031, 99.9=18799, 99.99=21343] [UPDATE: Count=685773, Max=20559, Min=509, Avg=1958.64, 90=2809, 99=5123, 99.9=8679, 99.99=11007] 
2023-05-05 07:52:04:213 160 sec: 22087228 operations; 134499.5 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=671771, Max=43231, Min=568, Avg=2458.39, 90=3399, 99=13271, 99.9=18911, 99.99=26863] [UPDATE: Count=673288, Max=31471, Min=492, Avg=1998.98, 90=2899, 99=5483, 99.9=8767, 99.99=20671] 
2023-05-05 07:52:14:214 170 sec: 23431754 operations; 134452.6 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=672394, Max=27039, Min=567, Avg=2454.65, 90=3369, 99=13055, 99.9=18735, 99.99=21663] [UPDATE: Count=673135, Max=17631, Min=500, Avg=2003.86, 90=2905, 99=5303, 99.9=8703, 99.99=10943] 
2023-05-05 07:52:24:213 180 sec: 24764288 operations; 133253.4 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=667427, Max=50591, Min=533, Avg=2480.13, 90=3453, 99=13215, 99.9=18767, 99.99=26975] [UPDATE: Count=664203, Max=43967, Min=478, Avg=2017.87, 90=2935, 99=5475, 99.9=9063, 99.99=21535] 
2023-05-05 07:52:34:213 190 sec: 26104026 operations; 133973.8 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=668683, Max=25807, Min=589, Avg=2465.7, 90=3435, 99=12911, 99.9=18607, 99.99=21295] [UPDATE: Count=671010, Max=14719, Min=503, Avg=2009.92, 90=2941, 99=5347, 99.9=8471, 99.99=10279] 
2023-05-05 07:52:44:213 200 sec: 27458682 operations; 135465.6 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=676904, Max=57887, Min=544, Avg=2437.76, 90=3327, 99=13103, 99.9=19023, 99.99=28591] [UPDATE: Count=676565, Max=46303, Min=495, Avg=1989.55, 90=2907, 99=5447, 99.9=8991, 99.99=21103] 
2023-05-05 07:52:54:213 210 sec: 28807529 operations; 134884.7 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=675064, Max=43679, Min=552, Avg=2446.91, 90=3401, 99=13167, 99.9=18751, 99.99=23023] [UPDATE: Count=676040, Max=40959, Min=489, Avg=1995.37, 90=2943, 99=5351, 99.9=8879, 99.99=13999] 
2023-05-05 07:53:04:214 220 sec: 30178530 operations; 137100.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=685281, Max=52063, Min=556, Avg=2410.76, 90=3349, 99=13223, 99.9=19039, 99.99=27167] [UPDATE: Count=685795, Max=36031, Min=484, Avg=1962.04, 90=2895, 99=5555, 99.9=8967, 99.99=20207] 
2023-05-05 07:53:14:213 230 sec: 31574371 operations; 139584.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=697884, Max=26543, Min=575, Avg=2364.92, 90=3231, 99=13151, 99.9=19023, 99.99=21759] [UPDATE: Count=697079, Max=19967, Min=496, Avg=1928.81, 90=2785, 99=5471, 99.9=9055, 99.99=12479] 
2023-05-05 07:53:24:214 240 sec: 32983921 operations; 140955 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=704646, Max=45631, Min=565, Avg=2341.09, 90=3143, 99=13407, 99.9=19743, 99.99=28559] [UPDATE: Count=705641, Max=38431, Min=468, Avg=1912.25, 90=2713, 99=5543, 99.9=9319, 99.99=21247] 
2023-05-05 07:53:34:213 250 sec: 34409627 operations; 142570.6 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=712512, Max=25503, Min=571, Avg=2310.36, 90=3035, 99=13207, 99.9=19247, 99.99=21775] [UPDATE: Count=712201, Max=16207, Min=522, Avg=1893.67, 90=2597, 99=5531, 99.9=8911, 99.99=11983] 
2023-05-05 07:53:44:213 260 sec: 35843353 operations; 143372.6 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=716492, Max=53375, Min=561, Avg=2298.57, 90=2993, 99=13463, 99.9=19743, 99.99=27023] [UPDATE: Count=717339, Max=48543, Min=461, Avg=1882.51, 90=2561, 99=5275, 99.9=9375, 99.99=22159] 
2023-05-05 07:53:54:214 270 sec: 37278787 operations; 143543.4 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=718732, Max=26847, Min=567, Avg=2293.85, 90=2979, 99=13343, 99.9=19359, 99.99=22223] [UPDATE: Count=717436, Max=16623, Min=514, Avg=1882.36, 90=2545, 99=5495, 99.9=9039, 99.99=11119] 
2023-05-05 07:54:04:213 280 sec: 38709672 operations; 143088.5 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=715954, Max=56415, Min=559, Avg=2302.25, 90=2993, 99=13415, 99.9=19391, 99.99=26703] [UPDATE: Count=712601, Max=50431, Min=471, Avg=1889.25, 90=2549, 99=5491, 99.9=9807, 99.99=24111] 
2023-05-05 07:54:14:214 290 sec: 40134569 operations; 142489.7 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=713875, Max=35967, Min=577, Avg=2310.67, 90=3007, 99=13343, 99.9=19519, 99.99=23599] [UPDATE: Count=712493, Max=28703, Min=514, Avg=1892.02, 90=2569, 99=5559, 99.9=9175, 99.99=13831] 
2023-05-05 07:54:24:214 300 sec: 41563448 operations; 142887.9 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=714923, Max=54751, Min=539, Avg=2306.34, 90=2985, 99=13391, 99.9=19487, 99.99=25791] [UPDATE: Count=714756, Max=47615, Min=501, Avg=1888.34, 90=2545, 99=5491, 99.9=9463, 99.99=20751] 
2023-05-05 07:54:34:213 310 sec: 42996937 operations; 143348.9 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=716781, Max=25727, Min=541, Avg=2298.76, 90=2989, 99=13159, 99.9=19119, 99.99=21759] [UPDATE: Count=715838, Max=14063, Min=513, Avg=1882.9, 90=2555, 99=5351, 99.9=8983, 99.99=11311] 
2023-05-05 07:54:44:213 320 sec: 44418049 operations; 142111.2 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=709851, Max=49823, Min=584, Avg=2325.65, 90=3043, 99=13343, 99.9=19439, 99.99=28943] [UPDATE: Count=711399, Max=36287, Min=487, Avg=1893.02, 90=2569, 99=5267, 99.9=9519, 99.99=21711] 
2023-05-05 07:54:54:213 330 sec: 45840628 operations; 142257.9 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=709906, Max=55807, Min=570, Avg=2323.98, 90=3049, 99=13359, 99.9=19391, 99.99=29039] [UPDATE: Count=712607, Max=42687, Min=498, Avg=1890.35, 90=2591, 99=5375, 99.9=9247, 99.99=20751] 
2023-05-05 07:55:04:214 340 sec: 47268243 operations; 142761.5 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=712632, Max=29759, Min=578, Avg=2309.79, 90=3017, 99=13215, 99.9=19295, 99.99=22335] [UPDATE: Count=715559, Max=28063, Min=506, Avg=1889.97, 90=2589, 99=5431, 99.9=9279, 99.99=14511] 
2023-05-05 07:55:14:213 350 sec: 48686652 operations; 141840.9 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=708542, Max=54015, Min=533, Avg=2333.86, 90=2999, 99=15239, 99.9=22943, 99.99=27551] [UPDATE: Count=709372, Max=42623, Min=478, Avg=1892.42, 90=2569, 99=6327, 99.9=10911, 99.99=22015] 
2023-05-05 07:55:24:213 360 sec: 50109622 operations; 142297 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=711895, Max=31039, Min=561, Avg=2323.63, 90=3015, 99=14575, 99.9=21871, 99.99=25807] [UPDATE: Count=711070, Max=15783, Min=476, Avg=1888.52, 90=2569, 99=5875, 99.9=10047, 99.99=12535] 
2023-05-05 07:55:34:213 370 sec: 51533838 operations; 142421.6 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=711369, Max=52639, Min=576, Avg=2321.9, 90=3005, 99=14503, 99.9=21295, 99.99=28495] [UPDATE: Count=712833, Max=42335, Min=501, Avg=1886.86, 90=2569, 99=5707, 99.9=9743, 99.99=21055] 
2023-05-05 07:55:44:214 380 sec: 52973942 operations; 144010.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=721149, Max=29359, Min=562, Avg=2288.75, 90=2961, 99=13711, 99.9=20319, 99.99=22959] [UPDATE: Count=719697, Max=16927, Min=505, Avg=1869.79, 90=2541, 99=5551, 99.9=9127, 99.99=11255] 
2023-05-05 07:55:54:213 390 sec: 54404729 operations; 143078.7 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=716423, Max=57247, Min=552, Avg=2305.58, 90=2979, 99=13743, 99.9=20559, 99.99=32527] [UPDATE: Count=713687, Max=45599, Min=493, Avg=1877.44, 90=2553, 99=5691, 99.9=9655, 99.99=20879] 
2023-05-05 07:56:04:214 400 sec: 55820044 operations; 141531.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=707512, Max=27487, Min=570, Avg=2329.3, 90=3079, 99=13575, 99.9=20175, 99.99=22863] [UPDATE: Count=708425, Max=17839, Min=489, Avg=1899.2, 90=2655, 99=5803, 99.9=9479, 99.99=12343] 
2023-05-05 07:56:14:213 410 sec: 57228692 operations; 140864.8 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=704949, Max=52479, Min=549, Avg=2344.36, 90=3079, 99=13959, 99.9=20687, 99.99=29247] [UPDATE: Count=703690, Max=28735, Min=456, Avg=1903.38, 90=2647, 99=5823, 99.9=9807, 99.99=20751] 
2023-05-05 07:56:24:213 420 sec: 58642562 operations; 141387 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=707848, Max=28367, Min=565, Avg=2334.84, 90=3083, 99=14135, 99.9=20895, 99.99=23775] [UPDATE: Count=705346, Max=16495, Min=496, Avg=1891.75, 90=2637, 99=5627, 99.9=9375, 99.99=11367] 
2023-05-05 07:56:34:213 430 sec: 60034050 operations; 139148.8 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=695985, Max=50719, Min=527, Avg=2383.85, 90=3225, 99=14543, 99.9=21327, 99.99=27567] [UPDATE: Count=695997, Max=37151, Min=473, Avg=1919.45, 90=2745, 99=5751, 99.9=9807, 99.99=21743] 
2023-05-05 07:56:44:213 440 sec: 61430495 operations; 139644.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=698189, Max=33951, Min=559, Avg=2379.31, 90=3199, 99=14503, 99.9=21407, 99.99=25615] [UPDATE: Count=698180, Max=16735, Min=502, Avg=1912.1, 90=2745, 99=5255, 99.9=9439, 99.99=11367] 
2023-05-05 07:56:54:213 450 sec: 62809467 operations; 137897.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=689264, Max=57663, Min=535, Avg=2427.94, 90=3233, 99=16591, 99.9=23343, 99.99=33279] [UPDATE: Count=690056, Max=28431, Min=482, Avg=1918.47, 90=2769, 99=5687, 99.9=9551, 99.99=21343] 
2023-05-05 07:57:04:213 460 sec: 64181769 operations; 137230.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=685761, Max=29103, Min=586, Avg=2430.69, 90=3319, 99=15015, 99.9=21551, 99.99=24367] [UPDATE: Count=686132, Max=18991, Min=470, Avg=1937.95, 90=2789, 99=5787, 99.9=9663, 99.99=14559] 
2023-05-05 07:57:14:213 470 sec: 65564201 operations; 138243.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=690638, Max=42303, Min=556, Avg=2403.55, 90=3247, 99=14503, 99.9=21135, 99.99=26079] [UPDATE: Count=692003, Max=40607, Min=492, Avg=1933.36, 90=2777, 99=5899, 99.9=9567, 99.99=21759] 
2023-05-05 07:57:24:213 480 sec: 66950128 operations; 138592.7 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=692643, Max=29583, Min=579, Avg=2391.41, 90=3213, 99=14535, 99.9=20831, 99.99=23727] [UPDATE: Count=692721, Max=22815, Min=490, Avg=1933.81, 90=2769, 99=5651, 99.9=9895, 99.99=16447] 
2023-05-05 07:57:34:213 490 sec: 68327461 operations; 137733.3 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=688196, Max=52767, Min=554, Avg=2406.81, 90=3225, 99=14815, 99.9=21919, 99.99=28479] [UPDATE: Count=689199, Max=29135, Min=492, Avg=1945.49, 90=2783, 99=5811, 99.9=10055, 99.99=24911] 
2023-05-05 07:57:44:213 500 sec: 69710039 operations; 138257.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=691592, Max=32463, Min=549, Avg=2398.05, 90=3215, 99=14607, 99.9=21439, 99.99=25327] [UPDATE: Count=690937, Max=20319, Min=505, Avg=1938.16, 90=2773, 99=5479, 99.9=9863, 99.99=12495] 
2023-05-05 07:57:54:214 510 sec: 71078813 operations; 136877.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=684883, Max=52159, Min=530, Avg=2422.58, 90=3263, 99=14839, 99.9=21599, 99.99=27951] [UPDATE: Count=684031, Max=31903, Min=504, Avg=1956.44, 90=2805, 99=5999, 99.9=10023, 99.99=21055] 
2023-05-05 07:58:04:213 520 sec: 72449705 operations; 137089.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=685199, Max=49375, Min=568, Avg=2418.4, 90=3305, 99=14375, 99.9=20575, 99.99=28655] [UPDATE: Count=685903, Max=30031, Min=507, Avg=1954.6, 90=2821, 99=5547, 99.9=9519, 99.99=19759] 
2023-05-05 07:58:14:213 530 sec: 73813117 operations; 136341.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=680671, Max=27423, Min=572, Avg=2430.7, 90=3345, 99=13967, 99.9=20015, 99.99=22543] [UPDATE: Count=682243, Max=17663, Min=504, Avg=1966.86, 90=2853, 99=5567, 99.9=9519, 99.99=15631] 
2023-05-05 07:58:24:213 540 sec: 75163035 operations; 134991.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=676047, Max=52351, Min=565, Avg=2457.91, 90=3387, 99=13959, 99.9=20415, 99.99=28239] [UPDATE: Count=674053, Max=29759, Min=515, Avg=1982.16, 90=2873, 99=5895, 99.9=9623, 99.99=21151] 
2023-05-05 07:58:34:213 550 sec: 76505990 operations; 134295.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=671104, Max=29215, Min=564, Avg=2477.14, 90=3433, 99=14511, 99.9=21279, 99.99=24687] [UPDATE: Count=671691, Max=17055, Min=488, Avg=1987.01, 90=2875, 99=5703, 99.9=9735, 99.99=12671] 
2023-05-05 07:58:44:213 560 sec: 77857093 operations; 135110.3 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=675304, Max=41055, Min=556, Avg=2461.45, 90=3439, 99=14047, 99.9=20655, 99.99=26207] [UPDATE: Count=675783, Max=28943, Min=505, Avg=1975.54, 90=2883, 99=5571, 99.9=9527, 99.99=19999] 
2023-05-05 07:58:54:213 570 sec: 79205032 operations; 134793.9 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=674479, Max=34079, Min=562, Avg=2465.1, 90=3373, 99=15447, 99.9=23119, 99.99=26927] [UPDATE: Count=674624, Max=22239, Min=507, Avg=1982.2, 90=2863, 99=6283, 99.9=10951, 99.99=14319] 
2023-05-05 07:59:04:214 580 sec: 80548390 operations; 134335.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=672134, Max=55519, Min=558, Avg=2472.09, 90=3383, 99=14959, 99.9=22255, 99.99=28351] [UPDATE: Count=671178, Max=30367, Min=496, Avg=1990.64, 90=2873, 99=6307, 99.9=11351, 99.99=22271] 
2023-05-05 07:59:14:214 590 sec: 81900457 operations; 135206.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=676384, Max=28495, Min=574, Avg=2455.91, 90=3385, 99=14439, 99.9=20991, 99.99=23711] [UPDATE: Count=674663, Max=16591, Min=493, Avg=1977.18, 90=2869, 99=5811, 99.9=9263, 99.99=11623] 
2023-05-05 07:59:24:213 600 sec: 83252442 operations; 135198.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=675325, Max=52543, Min=544, Avg=2456.34, 90=3371, 99=14535, 99.9=21119, 99.99=27407] [UPDATE: Count=676761, Max=29087, Min=476, Avg=1977.61, 90=2857, 99=5823, 99.9=9559, 99.99=21615] 
2023-05-05 07:59:34:214 610 sec: 84604669 operations; 135222.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=676055, Max=30943, Min=585, Avg=2454.27, 90=3361, 99=14495, 99.9=21135, 99.99=24303] [UPDATE: Count=676789, Max=19263, Min=515, Avg=1979.47, 90=2851, 99=5771, 99.9=9479, 99.99=11671] 
2023-05-05 07:59:44:214 620 sec: 85951650 operations; 134698.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=673922, Max=44223, Min=595, Avg=2465.67, 90=3347, 99=14807, 99.9=21583, 99.99=26879] [UPDATE: Count=672847, Max=39487, Min=501, Avg=1984.37, 90=2835, 99=5915, 99.9=9951, 99.99=20399] 
2023-05-05 07:59:54:214 630 sec: 87304200 operations; 135255 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=675726, Max=30399, Min=563, Avg=2453.44, 90=3325, 99=14559, 99.9=21183, 99.99=23967] [UPDATE: Count=676725, Max=19727, Min=504, Avg=1979.01, 90=2821, 99=5531, 99.9=9535, 99.99=11503] 
2023-05-05 08:00:04:214 640 sec: 88643686 operations; 133948.6 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=670132, Max=54463, Min=575, Avg=2479.68, 90=3387, 99=15143, 99.9=22207, 99.99=29167] [UPDATE: Count=669426, Max=43807, Min=485, Avg=1995.38, 90=2837, 99=6111, 99.9=10735, 99.99=25583] 
2023-05-05 08:00:14:213 650 sec: 89990633 operations; 134694.7 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=673347, Max=30239, Min=593, Avg=2462.96, 90=3375, 99=14543, 99.9=21423, 99.99=24335] [UPDATE: Count=673362, Max=20047, Min=523, Avg=1987.44, 90=2823, 99=5719, 99.9=9759, 99.99=12407] 
2023-05-05 08:00:24:213 660 sec: 91342786 operations; 135215.3 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677808, Max=48511, Min=552, Avg=2454.28, 90=3315, 99=15087, 99.9=22207, 99.99=26895] [UPDATE: Count=674623, Max=37247, Min=510, Avg=1978.19, 90=2767, 99=5871, 99.9=10255, 99.99=23151] 
2023-05-05 08:00:34:213 670 sec: 92707327 operations; 136454.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=683403, Max=28671, Min=568, Avg=2426.37, 90=3249, 99=14631, 99.9=21567, 99.99=24175] [UPDATE: Count=680519, Max=15631, Min=511, Avg=1965.85, 90=2731, 99=5927, 99.9=9743, 99.99=12319] 
2023-05-05 08:00:44:214 680 sec: 94068671 operations; 136134.4 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=681180, Max=52095, Min=574, Avg=2436.49, 90=3261, 99=14863, 99.9=21967, 99.99=28287] [UPDATE: Count=678825, Max=44991, Min=491, Avg=1970.77, 90=2735, 99=5931, 99.9=10223, 99.99=23759] 
2023-05-05 08:00:54:213 690 sec: 95437609 operations; 136893.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=683609, Max=33631, Min=560, Avg=2422.02, 90=3253, 99=14663, 99.9=21583, 99.99=25919] [UPDATE: Count=686650, Max=31439, Min=503, Avg=1953.32, 90=2719, 99=5631, 99.9=9695, 99.99=13007] 
2023-05-05 08:01:04:213 700 sec: 96802218 operations; 136460.9 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=682755, Max=52255, Min=585, Avg=2430.71, 90=3265, 99=15039, 99.9=22239, 99.99=29007] [UPDATE: Count=681966, Max=32639, Min=496, Avg=1962.11, 90=2725, 99=6119, 99.9=10375, 99.99=21327] 
2023-05-05 08:01:14:213 710 sec: 98174250 operations; 137203.2 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=685470, Max=48511, Min=554, Avg=2414.15, 90=3249, 99=14655, 99.9=21535, 99.99=28687] [UPDATE: Count=686564, Max=30239, Min=518, Avg=1955.48, 90=2727, 99=5687, 99.9=9863, 99.99=20863] 
2023-05-05 08:01:24:213 720 sec: 99533378 operations; 135912.8 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=678946, Max=30687, Min=604, Avg=2432.97, 90=3281, 99=13991, 99.9=20895, 99.99=24527] [UPDATE: Count=680528, Max=18879, Min=494, Avg=1978.05, 90=2755, 99=6079, 99.9=10047, 99.99=13047] 
2023-05-05 08:01:34:213 730 sec: 100890503 operations; 135712.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=678493, Max=54239, Min=562, Avg=2441.84, 90=3223, 99=16319, 99.9=24639, 99.99=31375] [UPDATE: Count=678982, Max=35615, Min=483, Avg=1975.94, 90=2721, 99=6363, 99.9=12559, 99.99=20271] 
2023-05-05 08:01:44:213 740 sec: 102251877 operations; 136137.4 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=680452, Max=35103, Min=583, Avg=2437.59, 90=3227, 99=15807, 99.9=24175, 99.99=28383] [UPDATE: Count=680115, Max=19967, Min=510, Avg=1965.49, 90=2719, 99=5779, 99.9=10959, 99.99=14503] 
2023-05-05 08:01:54:213 750 sec: 103613752 operations; 136187.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=681928, Max=56063, Min=576, Avg=2433.6, 90=3209, 99=14975, 99.9=22175, 99.99=29087] [UPDATE: Count=680716, Max=28111, Min=494, Avg=1967.21, 90=2705, 99=5999, 99.9=10167, 99.99=21391] 
2023-05-05 08:02:04:213 760 sec: 104988599 operations; 137484.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=687842, Max=33695, Min=577, Avg=2407.65, 90=3151, 99=14919, 99.9=22047, 99.99=25567] [UPDATE: Count=686831, Max=22927, Min=491, Avg=1952.27, 90=2661, 99=5887, 99.9=10271, 99.99=13735] 
2023-05-05 08:02:14:213 770 sec: 106349392 operations; 136079.3 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=681210, Max=51519, Min=586, Avg=2429.69, 90=3207, 99=14895, 99.9=22399, 99.99=28831] [UPDATE: Count=679001, Max=28079, Min=486, Avg=1975.35, 90=2715, 99=5975, 99.9=10471, 99.99=19199] 
2023-05-05 08:02:24:213 780 sec: 107711459 operations; 136206.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=680233, Max=31439, Min=566, Avg=2419.03, 90=3209, 99=14703, 99.9=21567, 99.99=25007] [UPDATE: Count=682411, Max=18303, Min=520, Avg=1982.5, 90=2731, 99=5807, 99.9=9879, 99.99=15223] 
2023-05-05 08:02:34:213 790 sec: 109073323 operations; 136186.4 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=681118, Max=52127, Min=518, Avg=2424.52, 90=3227, 99=14871, 99.9=21823, 99.99=28319] [UPDATE: Count=681644, Max=29567, Min=502, Avg=1977.45, 90=2739, 99=5727, 99.9=9879, 99.99=19055] 
2023-05-05 08:02:44:213 800 sec: 110431451 operations; 135812.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=678631, Max=29391, Min=568, Avg=2430.89, 90=3247, 99=14631, 99.9=21471, 99.99=24767] [UPDATE: Count=677965, Max=16767, Min=521, Avg=1983.26, 90=2767, 99=5851, 99.9=9807, 99.99=12439] 
2023-05-05 08:02:54:214 810 sec: 111765542 operations; 133409.1 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=667126, Max=50399, Min=573, Avg=2485.29, 90=3287, 99=14871, 99.9=21839, 99.99=28159] [UPDATE: Count=667145, Max=27887, Min=514, Avg=2008.84, 90=2785, 99=5863, 99.9=9863, 99.99=20687] 
2023-05-05 08:03:04:213 820 sec: 113094130 operations; 132858.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=663001, Max=26543, Min=587, Avg=2491.97, 90=3331, 99=14039, 99.9=20047, 99.99=22943] [UPDATE: Count=665085, Max=18879, Min=513, Avg=2023, 90=2813, 99=5495, 99.9=9151, 99.99=14495] 
2023-05-05 08:03:14:213 830 sec: 114414823 operations; 132069.3 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=660456, Max=52991, Min=564, Avg=2506.35, 90=3369, 99=13975, 99.9=20319, 99.99=27887] [UPDATE: Count=661139, Max=43007, Min=508, Avg=2030.35, 90=2817, 99=5855, 99.9=9143, 99.99=22095] 
2023-05-05 08:03:24:214 840 sec: 115749391 operations; 133456.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=667052, Max=31135, Min=580, Avg=2484.5, 90=3329, 99=14311, 99.9=20639, 99.99=23967] [UPDATE: Count=667091, Max=23183, Min=491, Avg=2007.84, 90=2781, 99=5579, 99.9=9183, 99.99=11351] 
2023-05-05 08:03:34:213 850 sec: 117087193 operations; 133780.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=668466, Max=56447, Min=554, Avg=2477.73, 90=3259, 99=14591, 99.9=21183, 99.99=28223] [UPDATE: Count=669235, Max=32623, Min=513, Avg=2003.56, 90=2745, 99=5991, 99.9=9479, 99.99=19903] 
2023-05-05 08:03:44:213 860 sec: 118432762 operations; 134556.9 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=673306, Max=27327, Min=557, Avg=2452.06, 90=3245, 99=13391, 99.9=20127, 99.99=22799] [UPDATE: Count=672204, Max=16831, Min=512, Avg=2002.76, 90=2743, 99=5411, 99.9=9407, 99.99=11143] 
2023-05-05 08:03:54:213 870 sec: 119771694 operations; 133893.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=669415, Max=54911, Min=562, Avg=2465.34, 90=3243, 99=13671, 99.9=20559, 99.99=28927] [UPDATE: Count=669703, Max=51807, Min=492, Avg=2011.87, 90=2741, 99=5847, 99.9=9919, 99.99=22063] 
2023-05-05 08:04:04:214 880 sec: 121124425 operations; 135273.1 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=676369, Max=29247, Min=568, Avg=2441.28, 90=3229, 99=13975, 99.9=20511, 99.99=23599] [UPDATE: Count=677215, Max=17535, Min=511, Avg=1990.55, 90=2743, 99=5803, 99.9=9199, 99.99=13095] 
2023-05-05 08:04:14:214 890 sec: 122483434 operations; 135900.9 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=680015, Max=50335, Min=554, Avg=2425.91, 90=3211, 99=13687, 99.9=20207, 99.99=24543] [UPDATE: Count=678166, Max=28655, Min=483, Avg=1984.57, 90=2721, 99=5939, 99.9=9903, 99.99=22271] 
2023-05-05 08:04:24:213 900 sec: 123855555 operations; 137212.1 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=685773, Max=52511, Min=551, Avg=2404.29, 90=3173, 99=13663, 99.9=20575, 99.99=27919] [UPDATE: Count=686309, Max=29471, Min=497, Avg=1964.6, 90=2695, 99=5815, 99.9=9527, 99.99=21023] 
2023-05-05 08:04:34:213 910 sec: 125221297 operations; 136574.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=683325, Max=27615, Min=559, Avg=2410.61, 90=3217, 99=13511, 99.9=19887, 99.99=22831] [UPDATE: Count=682049, Max=16719, Min=512, Avg=1978.55, 90=2731, 99=5759, 99.9=9239, 99.99=11351] 
2023-05-05 08:04:44:213 920 sec: 126580100 operations; 135880.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=679548, Max=55999, Min=567, Avg=2426.84, 90=3235, 99=13751, 99.9=20271, 99.99=27023] [UPDATE: Count=680286, Max=29551, Min=495, Avg=1984.69, 90=2741, 99=5763, 99.9=9447, 99.99=20287] 
2023-05-05 08:04:54:214 930 sec: 127927259 operations; 134715.9 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=672596, Max=83391, Min=594, Avg=2453.28, 90=3229, 99=15127, 99.9=24287, 99.99=69567] [UPDATE: Count=673912, Max=72191, Min=498, Avg=1997.17, 90=2755, 99=6135, 99.9=11479, 99.99=69055] 
2023-05-05 08:05:04:214 940 sec: 129263796 operations; 133653.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=668635, Max=56575, Min=574, Avg=2485.15, 90=3255, 99=16735, 99.9=25327, 99.99=31999] [UPDATE: Count=668808, Max=28367, Min=498, Avg=2000.12, 90=2789, 99=6227, 99.9=11711, 99.99=19951] 
2023-05-05 08:05:14:213 950 sec: 130588734 operations; 132493.8 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=661756, Max=43231, Min=589, Avg=2495.98, 90=3315, 99=15055, 99.9=22911, 99.99=28111] [UPDATE: Count=662054, Max=31903, Min=521, Avg=2029.06, 90=2823, 99=6335, 99.9=10887, 99.99=25007] 
2023-05-05 08:05:24:213 960 sec: 131906887 operations; 131815.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=659205, Max=55775, Min=558, Avg=2509.25, 90=3323, 99=14695, 99.9=21919, 99.99=27887] [UPDATE: Count=659434, Max=32095, Min=531, Avg=2038.72, 90=2807, 99=6075, 99.9=10087, 99.99=22047] 
2023-05-05 08:05:34:213 970 sec: 133178784 operations; 127189.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=636263, Max=390655, Min=578, Avg=2599.81, 90=3337, 99=14975, 99.9=22751, 99.99=375039] [UPDATE: Count=635266, Max=385023, Min=509, Avg=2109.91, 90=2815, 99=5951, 99.9=10495, 99.99=373503] 
2023-05-05 08:05:44:213 980 sec: 134495820 operations; 131703.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=658019, Max=42911, Min=586, Avg=2513.91, 90=3349, 99=14863, 99.9=22159, 99.99=27087] [UPDATE: Count=659136, Max=52223, Min=501, Avg=2038.11, 90=2829, 99=6071, 99.9=10207, 99.99=23087] 
2023-05-05 08:05:54:213 990 sec: 135821798 operations; 132597.8 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=663186, Max=46431, Min=588, Avg=2493.88, 90=3309, 99=14647, 99.9=22239, 99.99=26831] [UPDATE: Count=662574, Max=34015, Min=508, Avg=2026.43, 90=2823, 99=6007, 99.9=10071, 99.99=17727] 
2023-05-05 08:06:04:213 1000 sec: 137141261 operations; 131946.3 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=661010, Max=42303, Min=595, Avg=2511.17, 90=3337, 99=14839, 99.9=22239, 99.99=27151] [UPDATE: Count=658401, Max=28863, Min=509, Avg=2031.34, 90=2817, 99=6015, 99.9=10335, 99.99=20111] 
2023-05-05 08:06:14:213 1010 sec: 138476086 operations; 133482.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=667549, Max=30783, Min=568, Avg=2483.07, 90=3367, 99=14663, 99.9=22047, 99.99=25519] [UPDATE: Count=667161, Max=19359, Min=518, Avg=2008.55, 90=2809, 99=5991, 99.9=10079, 99.99=12815] 
2023-05-05 08:06:24:213 1020 sec: 139817914 operations; 134182.8 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=671448, Max=54655, Min=552, Avg=2474.19, 90=3381, 99=15167, 99.9=22511, 99.99=27743] [UPDATE: Count=670657, Max=27951, Min=495, Avg=1992.2, 90=2829, 99=6011, 99.9=10383, 99.99=22079] 
2023-05-05 08:06:34:213 1030 sec: 141149745 operations; 133183.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=666525, Max=32223, Min=557, Avg=2487.1, 90=3421, 99=14743, 99.9=22143, 99.99=25327] [UPDATE: Count=665237, Max=18655, Min=511, Avg=2013.74, 90=2867, 99=5839, 99.9=10207, 99.99=12807] 
2023-05-05 08:06:44:213 1040 sec: 142465032 operations; 131528.7 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=657317, Max=47679, Min=557, Avg=2518.94, 90=3451, 99=15103, 99.9=22367, 99.99=27631] [UPDATE: Count=657981, Max=38175, Min=491, Avg=2039.13, 90=2907, 99=5583, 99.9=11055, 99.99=21903] 
2023-05-05 08:06:54:213 1050 sec: 143774004 operations; 130897.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=654671, Max=28111, Min=569, Avg=2530, 90=3497, 99=14647, 99.9=21759, 99.99=24591] [UPDATE: Count=655594, Max=18863, Min=495, Avg=2049.49, 90=2937, 99=4879, 99.9=9655, 99.99=11655] 
2023-05-05 08:07:04:214 1060 sec: 145085430 operations; 131142.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=656256, Max=52255, Min=550, Avg=2526.68, 90=3483, 99=15263, 99.9=22879, 99.99=29087] [UPDATE: Count=653955, Max=28863, Min=463, Avg=2044.78, 90=2957, 99=5699, 99.9=11063, 99.99=21231] 
2023-05-05 08:07:14:213 1070 sec: 146410723 operations; 132529.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=662163, Max=30719, Min=571, Avg=2495.31, 90=3425, 99=14935, 99.9=22255, 99.99=25471] [UPDATE: Count=663840, Max=16623, Min=505, Avg=2028.49, 90=2961, 99=5895, 99.9=10135, 99.99=12759] 
2023-05-05 08:07:24:213 1080 sec: 147724318 operations; 131359.5 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=656540, Max=57471, Min=566, Avg=2519.68, 90=3457, 99=15015, 99.9=22383, 99.99=28559] [UPDATE: Count=656656, Max=42847, Min=478, Avg=2044.86, 90=2989, 99=6151, 99.9=10279, 99.99=22415] 
2023-05-05 08:07:34:213 1090 sec: 149035855 operations; 131153.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=656936, Max=51071, Min=575, Avg=2522.84, 90=3451, 99=15047, 99.9=22671, 99.99=28239] [UPDATE: Count=654150, Max=28143, Min=500, Avg=2046.05, 90=2977, 99=6183, 99.9=10375, 99.99=19231] 
2023-05-05 08:07:44:213 1100 sec: 150356883 operations; 132102.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=660207, Max=31791, Min=561, Avg=2508.95, 90=3511, 99=14895, 99.9=22847, 99.99=26511] [UPDATE: Count=661492, Max=18191, Min=489, Avg=2028.74, 90=2981, 99=6171, 99.9=10495, 99.99=13695] 
2023-05-05 08:07:54:213 1110 sec: 151675007 operations; 131812.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=659129, Max=41311, Min=543, Avg=2520.7, 90=3475, 99=16783, 99.9=26079, 99.99=31135] [UPDATE: Count=659453, Max=33567, Min=497, Avg=2027.24, 90=3003, 99=6535, 99.9=12359, 99.99=21279] 
2023-05-05 08:08:04:213 1120 sec: 153011937 operations; 133693 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=668305, Max=35231, Min=573, Avg=2488.56, 90=3407, 99=16975, 99.9=24991, 99.99=28911] [UPDATE: Count=668712, Max=19199, Min=466, Avg=1995.97, 90=2933, 99=6231, 99.9=10831, 99.99=15143] 
2023-05-05 08:08:14:213 1130 sec: 154359020 operations; 134708.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=674339, Max=53791, Min=560, Avg=2460.84, 90=3333, 99=15319, 99.9=23087, 99.99=31455] [UPDATE: Count=671927, Max=34591, Min=485, Avg=1988.85, 90=2855, 99=6315, 99.9=10647, 99.99=22431] 
2023-05-05 08:08:24:213 1140 sec: 155727306 operations; 136828.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=684561, Max=34111, Min=556, Avg=2420.4, 90=3285, 99=14927, 99.9=22319, 99.99=25551] [UPDATE: Count=683673, Max=17343, Min=516, Avg=1959.68, 90=2817, 99=5711, 99.9=10119, 99.99=12671] 
2023-05-05 08:08:34:213 1150 sec: 157097139 operations; 136983.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=685418, Max=52127, Min=559, Avg=2416.78, 90=3261, 99=15191, 99.9=23023, 99.99=29167] [UPDATE: Count=684334, Max=29455, Min=488, Avg=1958.76, 90=2797, 99=6335, 99.9=10855, 99.99=21023] 
2023-05-05 08:08:44:213 1160 sec: 158485666 operations; 138852.7 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=695381, Max=31855, Min=574, Avg=2381.91, 90=3177, 99=14903, 99.9=22703, 99.99=26383] [UPDATE: Count=694099, Max=22687, Min=474, Avg=1934.83, 90=2719, 99=6083, 99.9=10687, 99.99=13655] 
2023-05-05 08:08:54:213 1170 sec: 159880299 operations; 139463.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=697253, Max=57023, Min=518, Avg=2376.19, 90=3173, 99=14479, 99.9=20591, 99.99=34239] [UPDATE: Count=696461, Max=43455, Min=458, Avg=1921.6, 90=2701, 99=5547, 99.9=9231, 99.99=21887] 
2023-05-05 08:09:04:213 1180 sec: 161274948 operations; 139464.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=697330, Max=28223, Min=556, Avg=2372.17, 90=3191, 99=13671, 99.9=19807, 99.99=22703] [UPDATE: Count=697679, Max=18911, Min=514, Avg=1926.23, 90=2709, 99=5643, 99.9=9391, 99.99=13439] 
2023-05-05 08:09:14:213 1190 sec: 162659616 operations; 138466.8 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=692428, Max=58143, Min=555, Avg=2389.65, 90=3239, 99=13471, 99.9=19647, 99.99=29471] [UPDATE: Count=691760, Max=29359, Min=485, Avg=1939.58, 90=2765, 99=5683, 99.9=9087, 99.99=20831] 
2023-05-05 08:09:24:213 1200 sec: 164039122 operations; 137950.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=691780, Max=29231, Min=549, Avg=2398.06, 90=3295, 99=13479, 99.9=19423, 99.99=21839] [UPDATE: Count=687577, Max=18127, Min=505, Avg=1945.75, 90=2793, 99=5467, 99.9=9303, 99.99=14775] 
2023-05-05 08:09:34:213 1210 sec: 165407060 operations; 136793.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=683412, Max=53951, Min=559, Avg=2431.4, 90=3365, 99=14199, 99.9=20591, 99.99=28703] [UPDATE: Count=685379, Max=45983, Min=482, Avg=1951.1, 90=2823, 99=5627, 99.9=9271, 99.99=21775] 
2023-05-05 08:09:44:213 1220 sec: 166789942 operations; 138288.2 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=690993, Max=27007, Min=562, Avg=2403.52, 90=3293, 99=14287, 99.9=20271, 99.99=23071] [UPDATE: Count=691302, Max=17199, Min=498, Avg=1931.45, 90=2775, 99=5375, 99.9=8959, 99.99=10919] 
2023-05-05 08:09:54:213 1230 sec: 168178407 operations; 138846.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=694359, Max=40319, Min=578, Avg=2384, 90=3223, 99=13655, 99.9=20031, 99.99=24799] [UPDATE: Count=694086, Max=46079, Min=500, Avg=1933.09, 90=2739, 99=5547, 99.9=9399, 99.99=21295] 
2023-05-05 08:10:04:213 1240 sec: 169583393 operations; 140498.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=702520, Max=28335, Min=577, Avg=2349.67, 90=3145, 99=13287, 99.9=19439, 99.99=22623] [UPDATE: Count=703286, Max=18511, Min=508, Avg=1917.4, 90=2671, 99=5799, 99.9=9311, 99.99=14135] 
2023-05-05 08:10:14:213 1250 sec: 170990825 operations; 140743.2 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=703660, Max=54303, Min=582, Avg=2343.18, 90=3111, 99=13471, 99.9=19711, 99.99=28079] [UPDATE: Count=702972, Max=28399, Min=514, Avg=1915.31, 90=2647, 99=5579, 99.9=9623, 99.99=21039] 
2023-05-05 08:10:24:213 1260 sec: 172403278 operations; 141245.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=706639, Max=31055, Min=583, Avg=2333.93, 90=3079, 99=13583, 99.9=19823, 99.99=23023] [UPDATE: Count=705566, Max=20191, Min=471, Avg=1909.93, 90=2615, 99=5959, 99.9=9575, 99.99=15479] 
2023-05-05 08:10:34:213 1270 sec: 173819196 operations; 141591.8 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=708052, Max=54559, Min=558, Avg=2331.25, 90=3063, 99=13599, 99.9=20015, 99.99=29375] [UPDATE: Count=708213, Max=46527, Min=512, Avg=1902.24, 90=2601, 99=5503, 99.9=10151, 99.99=21439] 
2023-05-05 08:10:44:213 1280 sec: 175233517 operations; 141432.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=706592, Max=47615, Min=559, Avg=2331.28, 90=3059, 99=13543, 99.9=19919, 99.99=28543] [UPDATE: Count=706762, Max=43647, Min=506, Avg=1909.33, 90=2605, 99=5647, 99.9=9527, 99.99=20367] 
2023-05-05 08:10:54:213 1290 sec: 176649825 operations; 141630.8 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=708209, Max=28975, Min=568, Avg=2329.02, 90=3061, 99=13991, 99.9=21055, 99.99=25039] [UPDATE: Count=708709, Max=20175, Min=512, Avg=1900.86, 90=2605, 99=5287, 99.9=10071, 99.99=13375] 
2023-05-05 08:11:04:213 1300 sec: 178063948 operations; 141412.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=707351, Max=51007, Min=527, Avg=2342.03, 90=3033, 99=15999, 99.9=24943, 99.99=31951] [UPDATE: Count=707059, Max=50431, Min=476, Avg=1896.75, 90=2585, 99=5959, 99.9=11951, 99.99=29679] 
2023-05-05 08:11:14:213 1310 sec: 179468326 operations; 140437.8 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=701526, Max=31919, Min=570, Avg=2353.31, 90=3097, 99=14639, 99.9=22047, 99.99=25391] [UPDATE: Count=702791, Max=18367, Min=503, Avg=1915.2, 90=2639, 99=5995, 99.9=10103, 99.99=12799] 
2023-05-05 08:11:24:213 1320 sec: 180870358 operations; 140203.2 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=700182, Max=48831, Min=555, Avg=2362.15, 90=3115, 99=14951, 99.9=22207, 99.99=27599] [UPDATE: Count=701835, Max=28799, Min=505, Avg=1913.9, 90=2651, 99=5999, 99.9=10023, 99.99=21215] 
2023-05-05 08:11:34:213 1330 sec: 182283739 operations; 141338.1 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=705720, Max=28415, Min=574, Avg=2339.83, 90=3069, 99=14623, 99.9=21695, 99.99=24431] [UPDATE: Count=707546, Max=17567, Min=500, Avg=1901.93, 90=2625, 99=5827, 99.9=9807, 99.99=11911] 
2023-05-05 08:11:44:213 1340 sec: 183685089 operations; 140135 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=700999, Max=60703, Min=567, Avg=2361.96, 90=3117, 99=14775, 99.9=22303, 99.99=33151] [UPDATE: Count=700514, Max=45663, Min=474, Avg=1915.3, 90=2637, 99=6083, 99.9=10263, 99.99=22831] 
2023-05-05 08:11:54:213 1350 sec: 185092520 operations; 140743.1 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=703259, Max=28271, Min=579, Avg=2349.28, 90=3103, 99=14471, 99.9=21583, 99.99=24543] [UPDATE: Count=704674, Max=17727, Min=480, Avg=1909.93, 90=2629, 99=5699, 99.9=9703, 99.99=11935] 
2023-05-05 08:12:04:213 1360 sec: 186501607 operations; 140908.7 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=704801, Max=54271, Min=554, Avg=2348.21, 90=3029, 99=14871, 99.9=22015, 99.99=26543] [UPDATE: Count=704419, Max=44127, Min=492, Avg=1906.25, 90=2571, 99=5859, 99.9=10127, 99.99=21423] 
2023-05-05 08:12:14:213 1370 sec: 187913273 operations; 141166.6 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=707536, Max=30207, Min=585, Avg=2340.88, 90=3035, 99=14703, 99.9=21759, 99.99=24799] [UPDATE: Count=703805, Max=17023, Min=505, Avg=1903.74, 90=2565, 99=5915, 99.9=9711, 99.99=12023] 
2023-05-05 08:12:24:213 1380 sec: 189327138 operations; 141386.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=707592, Max=51487, Min=541, Avg=2339.13, 90=3019, 99=14927, 99.9=22159, 99.99=29615] [UPDATE: Count=706418, Max=41727, Min=500, Avg=1899.86, 90=2559, 99=5427, 99.9=10279, 99.99=24479] 
2023-05-05 08:12:34:213 1390 sec: 190744305 operations; 141716.7 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=708941, Max=29631, Min=552, Avg=2332.25, 90=3023, 99=14759, 99.9=22063, 99.99=25103] [UPDATE: Count=708252, Max=19535, Min=515, Avg=1897.27, 90=2557, 99=5255, 99.9=10151, 99.99=12695] 
2023-05-05 08:12:44:213 1400 sec: 192151976 operations; 140767.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=703361, Max=52191, Min=569, Avg=2349.95, 90=3021, 99=15167, 99.9=22671, 99.99=27855] [UPDATE: Count=703896, Max=28223, Min=503, Avg=1908.66, 90=2559, 99=6159, 99.9=10615, 99.99=19423] 
2023-05-05 08:12:54:220 1410 sec: 193554580 operations; 140176.29 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=701693, Max=33471, Min=574, Avg=2357.96, 90=3061, 99=15047, 99.9=22095, 99.99=25423] [UPDATE: Count=700836, Max=17903, Min=477, Avg=1916.77, 90=2581, 99=5979, 99.9=10015, 99.99=12695] 
2023-05-05 08:13:04:213 1420 sec: 194957235 operations; 140349.71 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=700315, Max=53855, Min=561, Avg=2353.6, 90=3039, 99=14999, 99.9=22703, 99.99=29263] [UPDATE: Count=702188, Max=47007, Min=504, Avg=1919.45, 90=2567, 99=6239, 99.9=10695, 99.99=21055] 
2023-05-05 08:13:14:213 1430 sec: 196368885 operations; 141165 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=706027, Max=30239, Min=557, Avg=2339.98, 90=3023, 99=14903, 99.9=22431, 99.99=25967] [UPDATE: Count=705558, Max=18751, Min=508, Avg=1906.16, 90=2563, 99=5839, 99.9=10143, 99.99=13271] 
2023-05-05 08:13:24:213 1440 sec: 197772066 operations; 140318.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=700674, Max=65791, Min=559, Avg=2355.75, 90=3057, 99=14991, 99.9=22383, 99.99=29087] [UPDATE: Count=703400, Max=42943, Min=514, Avg=1916.82, 90=2579, 99=6035, 99.9=10487, 99.99=20991] 
2023-05-05 08:13:34:213 1450 sec: 199179172 operations; 140710.6 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=703862, Max=31199, Min=557, Avg=2348.45, 90=3057, 99=14567, 99.9=21231, 99.99=24703] [UPDATE: Count=702398, Max=20335, Min=523, Avg=1911.13, 90=2581, 99=5615, 99.9=9863, 99.99=13447] 
2023-05-05 08:13:44:213 1460 sec: 200573574 operations; 139440.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=697951, Max=61375, Min=562, Avg=2374.1, 90=3073, 99=14991, 99.9=22031, 99.99=35551] [UPDATE: Count=696182, Max=37183, Min=494, Avg=1925.55, 90=2591, 99=5915, 99.9=10071, 99.99=22207] 
2023-05-05 08:13:54:213 1470 sec: 201958378 operations; 138480.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=691719, Max=47455, Min=579, Avg=2388.5, 90=3065, 99=16367, 99.9=25183, 99.99=31583] [UPDATE: Count=693428, Max=33215, Min=494, Avg=1939.28, 90=2579, 99=6779, 99.9=12607, 99.99=26095] 
2023-05-05 08:14:04:213 1480 sec: 203355916 operations; 139753.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=698257, Max=34367, Min=590, Avg=2375.09, 90=3041, 99=16703, 99.9=24831, 99.99=29279] [UPDATE: Count=700051, Max=21807, Min=490, Avg=1914.42, 90=2569, 99=5891, 99.9=11015, 99.99=15527] 
2023-05-05 08:14:14:213 1490 sec: 204754607 operations; 139869.1 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=699948, Max=51615, Min=562, Avg=2365.41, 90=3047, 99=15175, 99.9=22543, 99.99=29727] [UPDATE: Count=698226, Max=31471, Min=542, Avg=1919.93, 90=2573, 99=6051, 99.9=10567, 99.99=24383] 
2023-05-05 08:14:24:213 1500 sec: 206162761 operations; 140815.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=705204, Max=28207, Min=546, Avg=2346.58, 90=3039, 99=14727, 99.9=21551, 99.99=24639] [UPDATE: Count=703551, Max=17951, Min=495, Avg=1909.61, 90=2589, 99=5775, 99.9=9903, 99.99=12015] 
2023-05-05 08:14:34:214 1510 sec: 207568849 operations; 140608.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=703425, Max=40895, Min=574, Avg=2354.24, 90=3037, 99=14951, 99.9=22047, 99.99=26127] [UPDATE: Count=701651, Max=28287, Min=501, Avg=1910.7, 90=2591, 99=5899, 99.9=10311, 99.99=21023] 
2023-05-05 08:14:44:213 1520 sec: 208973865 operations; 140501.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=702635, Max=43967, Min=564, Avg=2355.13, 90=3047, 99=14775, 99.9=21839, 99.99=26495] [UPDATE: Count=702477, Max=30719, Min=506, Avg=1908.73, 90=2593, 99=5695, 99.9=9927, 99.99=25599] 
2023-05-05 08:14:54:213 1530 sec: 210377814 operations; 140394.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=702149, Max=51583, Min=560, Avg=2358.8, 90=3061, 99=14751, 99.9=21615, 99.99=27167] [UPDATE: Count=702450, Max=48095, Min=497, Avg=1911.63, 90=2615, 99=5975, 99.9=10031, 99.99=20287] 
2023-05-05 08:15:04:213 1540 sec: 211781142 operations; 140332.8 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=702844, Max=29455, Min=577, Avg=2357.12, 90=3061, 99=14511, 99.9=21407, 99.99=25071] [UPDATE: Count=699871, Max=19183, Min=507, Avg=1912.96, 90=2615, 99=5747, 99.9=9831, 99.99=14215] 
2023-05-05 08:15:14:213 1550 sec: 213178804 operations; 139766.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=699319, Max=51871, Min=542, Avg=2369.61, 90=3063, 99=14991, 99.9=22063, 99.99=28735] [UPDATE: Count=698358, Max=42015, Min=501, Avg=1918.84, 90=2621, 99=5895, 99.9=10439, 99.99=22303] 
2023-05-05 08:15:24:213 1560 sec: 214583039 operations; 140423.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=701471, Max=31199, Min=568, Avg=2355.88, 90=3069, 99=14583, 99.9=21615, 99.99=24591] [UPDATE: Count=702634, Max=18687, Min=525, Avg=1913.35, 90=2615, 99=5811, 99.9=9823, 99.99=12319] 
2023-05-05 08:15:34:213 1570 sec: 215977267 operations; 139422.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=697542, Max=53311, Min=559, Avg=2376.41, 90=3083, 99=14999, 99.9=21999, 99.99=29455] [UPDATE: Count=697744, Max=45535, Min=505, Avg=1923.07, 90=2631, 99=6019, 99.9=10095, 99.99=22895] 
2023-05-05 08:15:44:213 1580 sec: 217373934 operations; 139666.7 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=698609, Max=29023, Min=590, Avg=2368.08, 90=3077, 99=14751, 99.9=21871, 99.99=25215] [UPDATE: Count=697881, Max=17343, Min=497, Avg=1923.56, 90=2643, 99=5831, 99.9=9983, 99.99=13135] 
2023-05-05 08:15:54:213 1590 sec: 218752486 operations; 137855.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=689932, Max=48639, Min=570, Avg=2398.61, 90=3131, 99=14895, 99.9=22207, 99.99=28175] [UPDATE: Count=687872, Max=29167, Min=490, Avg=1949.22, 90=2705, 99=5999, 99.9=10215, 99.99=20207] 
2023-05-05 08:16:04:213 1600 sec: 220136458 operations; 138397.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=692545, Max=32991, Min=528, Avg=2386.97, 90=3117, 99=14743, 99.9=21935, 99.99=25167] [UPDATE: Count=692501, Max=20255, Min=484, Avg=1943.93, 90=2693, 99=5979, 99.9=10103, 99.99=14335] 
2023-05-05 08:16:14:213 1610 sec: 221522638 operations; 138618 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=692490, Max=56319, Min=563, Avg=2391.98, 90=3149, 99=14895, 99.9=22287, 99.99=28319] [UPDATE: Count=692670, Max=40415, Min=482, Avg=1932.75, 90=2685, 99=5659, 99.9=10103, 99.99=20879] 
2023-05-05 08:16:24:213 1620 sec: 222915729 operations; 139309.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=695775, Max=31647, Min=571, Avg=2376.63, 90=3121, 99=14783, 99.9=22047, 99.99=25551] [UPDATE: Count=697673, Max=18079, Min=482, Avg=1926.8, 90=2663, 99=5863, 99.9=9943, 99.99=13199] 
2023-05-05 08:16:34:213 1630 sec: 224303546 operations; 138781.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=693664, Max=54783, Min=548, Avg=2383.19, 90=3121, 99=14887, 99.9=22479, 99.99=30015] [UPDATE: Count=693707, Max=34239, Min=498, Avg=1936.27, 90=2681, 99=5975, 99.9=10287, 99.99=22319] 
2023-05-05 08:16:44:213 1640 sec: 225682330 operations; 137878.4 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=689328, Max=35583, Min=572, Avg=2399.58, 90=3151, 99=14863, 99.9=21967, 99.99=25359] [UPDATE: Count=689772, Max=18943, Min=501, Avg=1948.29, 90=2701, 99=5575, 99.9=10143, 99.99=12663] 
2023-05-05 08:16:54:213 1650 sec: 227039021 operations; 135669.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=678223, Max=52959, Min=579, Avg=2443.54, 90=3183, 99=15639, 99.9=23519, 99.99=30287] [UPDATE: Count=678477, Max=28607, Min=492, Avg=1975.07, 90=2733, 99=6427, 99.9=11031, 99.99=20559] 
2023-05-05 08:17:04:213 1660 sec: 228379826 operations; 134080.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=670655, Max=47647, Min=556, Avg=2479.36, 90=3237, 99=17103, 99.9=26399, 99.99=31823] [UPDATE: Count=669917, Max=50783, Min=501, Avg=1992.29, 90=2755, 99=6691, 99.9=12487, 99.99=19999] 
2023-05-05 08:17:14:213 1670 sec: 229747098 operations; 136727.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=684184, Max=31327, Min=576, Avg=2430.37, 90=3203, 99=15767, 99.9=23439, 99.99=27023] [UPDATE: Count=683402, Max=17103, Min=504, Avg=1952.76, 90=2699, 99=5979, 99.9=10127, 99.99=13119] 
2023-05-05 08:17:24:213 1680 sec: 231116803 operations; 136970.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=684819, Max=56639, Min=575, Avg=2432.03, 90=3219, 99=15567, 99.9=23343, 99.99=29967] [UPDATE: Count=684523, Max=29535, Min=493, Avg=1944.06, 90=2677, 99=6123, 99.9=10543, 99.99=22543] 
2023-05-05 08:17:34:213 1690 sec: 232496912 operations; 138010.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=690407, Max=33183, Min=573, Avg=2418.24, 90=3165, 99=16623, 99.9=24239, 99.99=27935] [UPDATE: Count=690276, Max=17599, Min=512, Avg=1925.17, 90=2639, 99=5851, 99.9=10295, 99.99=13351] 
2023-05-05 08:17:44:213 1700 sec: 233881782 operations; 138487 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=691458, Max=54015, Min=554, Avg=2386.6, 90=3121, 99=15247, 99.9=22431, 99.99=28751] [UPDATE: Count=694113, Max=28319, Min=507, Avg=1942.39, 90=2639, 99=6011, 99.9=10535, 99.99=23903] 
2023-05-05 08:17:54:213 1710 sec: 235274788 operations; 139300.6 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=696019, Max=30639, Min=575, Avg=2368.23, 90=3093, 99=14863, 99.9=22079, 99.99=25183] [UPDATE: Count=695740, Max=16231, Min=520, Avg=1935.12, 90=2629, 99=6071, 99.9=9999, 99.99=12311] 
2023-05-05 08:18:04:213 1720 sec: 236670681 operations; 139589.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=698202, Max=42111, Min=570, Avg=2367.16, 90=3073, 99=15303, 99.9=22623, 99.99=28799] [UPDATE: Count=697679, Max=28399, Min=477, Avg=1927.24, 90=2601, 99=6175, 99.9=10471, 99.99=20399] 
2023-05-05 08:18:14:213 1730 sec: 238072153 operations; 140147.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=700638, Max=41119, Min=580, Avg=2358.13, 90=3051, 99=15375, 99.9=22959, 99.99=26079] [UPDATE: Count=700764, Max=30351, Min=510, Avg=1918.95, 90=2591, 99=6103, 99.9=10367, 99.99=24607] 
2023-05-05 08:18:24:213 1740 sec: 239479878 operations; 140772.5 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=703874, Max=54527, Min=568, Avg=2347.91, 90=3041, 99=15327, 99.9=22975, 99.99=29775] [UPDATE: Count=704091, Max=28783, Min=473, Avg=1909.63, 90=2587, 99=5987, 99.9=10767, 99.99=22639] 
2023-05-05 08:18:34:213 1750 sec: 240886236 operations; 140635.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=702738, Max=75711, Min=581, Avg=2347.7, 90=3011, 99=15455, 99.9=23407, 99.99=62399] [UPDATE: Count=703574, Max=64639, Min=495, Avg=1914.68, 90=2565, 99=6247, 99.9=11071, 99.99=61887] 
2023-05-05 08:18:44:213 1760 sec: 242306706 operations; 142047 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=711310, Max=54207, Min=526, Avg=2334.07, 90=2973, 99=15175, 99.9=22671, 99.99=29999] [UPDATE: Count=709819, Max=32271, Min=509, Avg=1885.47, 90=2513, 99=5995, 99.9=10511, 99.99=20399] 
2023-05-05 08:18:54:213 1770 sec: 243724193 operations; 141748.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=708733, Max=32079, Min=585, Avg=2336.43, 90=3033, 99=14783, 99.9=22127, 99.99=25183] [UPDATE: Count=708434, Max=17599, Min=515, Avg=1892.07, 90=2555, 99=5815, 99.9=10103, 99.99=12967] 
2023-05-05 08:19:04:213 1780 sec: 245127331 operations; 140313.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=701556, Max=54463, Min=570, Avg=2362.47, 90=3051, 99=15215, 99.9=23487, 99.99=38111] [UPDATE: Count=701026, Max=40639, Min=464, Avg=1909.87, 90=2563, 99=6195, 99.9=11087, 99.99=37439] 
2023-05-05 08:19:14:213 1790 sec: 246536676 operations; 140934.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=704903, Max=32207, Min=580, Avg=2351.83, 90=3095, 99=14855, 99.9=22095, 99.99=25183] [UPDATE: Count=705306, Max=18575, Min=504, Avg=1901.63, 90=2599, 99=5747, 99.9=10167, 99.99=12671] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-05 08:19:24:214 1800 sec: 247934937 operations; 139826.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=699000, Max=49279, Min=593, Avg=2372.81, 90=3141, 99=14991, 99.9=22303, 99.99=28911] [UPDATE: Count=697883, Max=29599, Min=496, Avg=1913.94, 90=2631, 99=6223, 99.9=10687, 99.99=23055] 
Still waiting for thread Thread-285 to complete. Workload status: true
2023-05-05 08:19:26:470 1802 sec: 247938925 operations; 1766.95 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1961, Max=21407, Min=690, Avg=2431.86, 90=3227, 99=16943, 99.9=20223, 99.99=21407] [CLEANUP: Count=300, Max=2220031, Min=0, Avg=7397.81, 90=2, 99=11, 99.9=2220031, 99.99=2220031] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802255
[OVERALL], Throughput(ops/sec), 137571.5007032856
[TOTAL_GCS_PS_Scavenge], Count, 4088
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18244
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0122873844156348
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 125
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.006935755484101861
[TOTAL_GCs], Count, 4091
[TOTAL_GC_TIME], Time(ms), 18369
[TOTAL_GC_TIME_%], Time(%), 1.0192231398997367
[READ], Operations, 123979525
[READ], AverageLatency(us), 2400.6699892341094
[READ], MinLatency(us), 518
[READ], MaxLatency(us), 390655
[READ], 95thPercentileLatency(us), 3791
[READ], 99thPercentileLatency(us), 14375
[READ], Return=OK, 123979525
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7397.81
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2220031
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 11
[UPDATE], Operations, 123959400
[UPDATE], AverageLatency(us), 1948.3198306461632
[UPDATE], MinLatency(us), 456
[UPDATE], MaxLatency(us), 385023
[UPDATE], 95thPercentileLatency(us), 3057
[UPDATE], 99thPercentileLatency(us), 5811
[UPDATE], Return=OK, 123959400
