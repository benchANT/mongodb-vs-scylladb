bin/ycsb load scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 200 -p recordcount=750000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -p insertcount=250000000
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 200 -p recordcount=750000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -p insertcount=250000000 -load
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 200 -p recordcount=750000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -p insertcount=250000000 -load
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 11:10:38:816 0 sec: 0 operations; est completion in 0 second 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: ONE

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
2023-05-04 11:10:48:800 10 sec: 1331705 operations; 133170.5 current ops/sec; est completion in 31 minutes [INSERT: Count=1331947, Max=253951, Min=209, Avg=1386.89, 90=1861, 99=7951, 99.9=25631, 99.99=84159] 
2023-05-04 11:10:58:799 20 sec: 3060803 operations; 172909.8 current ops/sec; est completion in 26 minutes [INSERT: Count=1728919, Max=32959, Min=191, Avg=1154.22, 90=1634, 99=2573, 99.9=8279, 99.99=22847] 
2023-05-04 11:11:08:799 30 sec: 4557959 operations; 149715.6 current ops/sec; est completion in 26 minutes [INSERT: Count=1497144, Max=30639, Min=196, Avg=1333.44, 90=1880, 99=2655, 99.9=9679, 99.99=20223] 
2023-05-04 11:11:18:799 40 sec: 5939339 operations; 138138 current ops/sec; est completion in 27 minutes [INSERT: Count=1381383, Max=18719, Min=210, Avg=1445.51, 90=1953, 99=2827, 99.9=8775, 99.99=12335] 
2023-05-04 11:11:28:800 50 sec: 7431756 operations; 149241.7 current ops/sec; est completion in 27 minutes [INSERT: Count=1492451, Max=38655, Min=211, Avg=1337.71, 90=1878, 99=2913, 99.9=10407, 99.99=20767] 
2023-05-04 11:11:38:800 60 sec: 8732080 operations; 130032.4 current ops/sec; est completion in 27 minutes [INSERT: Count=1300322, Max=38335, Min=213, Avg=1535.77, 90=1953, 99=2967, 99.9=9271, 99.99=24223] 
2023-05-04 11:11:48:799 70 sec: 10071116 operations; 133903.6 current ops/sec; est completion in 27 minutes [INSERT: Count=1339011, Max=13927, Min=249, Avg=1491.27, 90=1912, 99=2703, 99.9=8759, 99.99=12143] 
2023-05-04 11:11:58:799 80 sec: 11399040 operations; 132792.4 current ops/sec; est completion in 27 minutes [INSERT: Count=1327915, Max=32703, Min=360, Avg=1503.77, 90=1920, 99=2823, 99.9=8375, 99.99=22975] 
2023-05-04 11:12:08:799 90 sec: 12726778 operations; 132773.8 current ops/sec; est completion in 27 minutes [INSERT: Count=1327738, Max=38751, Min=218, Avg=1504.01, 90=1936, 99=2923, 99.9=10063, 99.99=22383] 
2023-05-04 11:12:18:800 100 sec: 14043512 operations; 131673.4 current ops/sec; est completion in 28 minutes [INSERT: Count=1316760, Max=30623, Min=259, Avg=1516.61, 90=1977, 99=3889, 99.9=13679, 99.99=21471] 
2023-05-04 11:12:28:799 110 sec: 14883437 operations; 83992.5 current ops/sec; est completion in 28 minutes [INSERT: Count=839849, Max=490239, Min=206, Avg=2367.08, 90=2145, 99=21679, 99.9=117695, 99.99=373503] 
2023-05-04 11:12:38:799 120 sec: 15962039 operations; 107860.2 current ops/sec; est completion in 29 minutes [INSERT: Count=1078648, Max=763391, Min=238, Avg=1861.22, 90=1917, 99=4991, 99.9=87615, 99.99=681983] 
2023-05-04 11:12:48:799 130 sec: 17289518 operations; 132747.9 current ops/sec; est completion in 29 minutes [INSERT: Count=1327481, Max=11959, Min=370, Avg=1504.28, 90=1913, 99=2531, 99.9=7959, 99.99=10207] 
2023-05-04 11:12:58:799 140 sec: 18599611 operations; 131009.3 current ops/sec; est completion in 29 minutes [INSERT: Count=1310096, Max=75519, Min=357, Avg=1524.26, 90=1919, 99=2701, 99.9=10663, 99.99=31727] 
2023-05-04 11:13:08:799 150 sec: 19897990 operations; 129837.9 current ops/sec; est completion in 28 minutes [INSERT: Count=1298376, Max=88063, Min=357, Avg=1538, 90=1941, 99=3105, 99.9=10175, 99.99=33951] 
2023-05-04 11:13:18:799 160 sec: 21212750 operations; 131476 current ops/sec; est completion in 28 minutes [INSERT: Count=1314770, Max=13599, Min=356, Avg=1518.87, 90=1965, 99=3275, 99.9=8055, 99.99=10495] 
2023-05-04 11:13:28:804 170 sec: 22489377 operations; 127598.9 current ops/sec; est completion in 28 minutes [INSERT: Count=1276650, Max=105023, Min=384, Avg=1564.48, 90=1989, 99=3337, 99.9=9247, 99.99=59903] 
2023-05-04 11:13:38:799 180 sec: 23672606 operations; 118382.09 current ops/sec; est completion in 28 minutes [INSERT: Count=1183196, Max=76671, Min=351, Avg=1687.86, 90=2335, 99=4655, 99.9=9239, 99.99=41887] 
2023-05-04 11:13:48:799 190 sec: 24839864 operations; 116725.8 current ops/sec; est completion in 28 minutes [INSERT: Count=1167277, Max=14031, Min=384, Avg=1711.17, 90=2389, 99=4703, 99.9=8187, 99.99=12191] 
2023-05-04 11:13:58:800 200 sec: 26060477 operations; 122061.3 current ops/sec; est completion in 28 minutes [INSERT: Count=1220622, Max=60447, Min=380, Avg=1636.2, 90=2131, 99=4183, 99.9=9967, 99.99=32447] 
2023-05-04 11:14:08:799 210 sec: 27246519 operations; 118604.2 current ops/sec; est completion in 28 minutes [INSERT: Count=1186006, Max=47871, Min=359, Avg=1684.02, 90=2407, 99=4411, 99.9=10079, 99.99=29423] 
2023-05-04 11:14:18:799 220 sec: 28466520 operations; 122000.1 current ops/sec; est completion in 28 minutes [INSERT: Count=1220005, Max=14791, Min=386, Avg=1637.06, 90=2109, 99=4127, 99.9=8655, 99.99=10111] 
2023-05-04 11:14:28:799 230 sec: 29681635 operations; 121511.5 current ops/sec; est completion in 28 minutes [INSERT: Count=1215118, Max=49887, Min=353, Avg=1643.64, 90=2155, 99=4339, 99.9=10615, 99.99=27903] 
2023-05-04 11:14:38:800 240 sec: 30871781 operations; 119014.6 current ops/sec; est completion in 28 minutes [INSERT: Count=1190166, Max=48991, Min=395, Avg=1678.18, 90=2295, 99=4479, 99.9=9639, 99.99=27199] 
2023-05-04 11:14:48:800 250 sec: 32072456 operations; 120067.5 current ops/sec; est completion in 28 minutes [INSERT: Count=1200681, Max=18175, Min=423, Avg=1663.46, 90=2137, 99=4779, 99.9=8935, 99.99=11871] 
2023-05-04 11:14:58:800 260 sec: 33268986 operations; 119653 current ops/sec; est completion in 28 minutes [INSERT: Count=1196507, Max=47391, Min=407, Avg=1669.16, 90=2335, 99=4459, 99.9=9279, 99.99=26095] 
2023-05-04 11:15:08:800 270 sec: 34416399 operations; 114741.3 current ops/sec; est completion in 28 minutes [INSERT: Count=1147425, Max=146303, Min=389, Avg=1740.84, 90=2435, 99=5123, 99.9=9911, 99.99=57375] 
2023-05-04 11:15:18:800 280 sec: 35607945 operations; 119154.6 current ops/sec; est completion in 28 minutes [INSERT: Count=1191558, Max=18799, Min=395, Avg=1676.18, 90=2179, 99=4947, 99.9=9383, 99.99=12079] 
2023-05-04 11:15:28:799 290 sec: 36766034 operations; 115808.9 current ops/sec; est completion in 28 minutes [INSERT: Count=1158077, Max=52191, Min=402, Avg=1724.71, 90=2505, 99=4811, 99.9=9919, 99.99=35967] 
2023-05-04 11:15:38:799 300 sec: 37930056 operations; 116402.2 current ops/sec; est completion in 27 minutes [INSERT: Count=1164002, Max=51935, Min=384, Avg=1715.96, 90=2375, 99=4767, 99.9=11239, 99.99=27935] 
2023-05-04 11:15:48:800 310 sec: 39121856 operations; 119180 current ops/sec; est completion in 27 minutes [INSERT: Count=1191823, Max=22063, Min=378, Avg=1675.88, 90=2261, 99=4719, 99.9=8375, 99.99=13599] 
2023-05-04 11:15:58:800 320 sec: 40278309 operations; 115645.3 current ops/sec; est completion in 27 minutes [INSERT: Count=1156508, Max=50719, Min=362, Avg=1727.16, 90=2539, 99=4735, 99.9=9247, 99.99=32175] 
2023-05-04 11:16:08:800 330 sec: 41434577 operations; 115626.8 current ops/sec; est completion in 27 minutes [INSERT: Count=1156209, Max=48223, Min=418, Avg=1727.5, 90=2369, 99=5099, 99.9=9311, 99.99=27663] 
2023-05-04 11:16:18:799 340 sec: 42613905 operations; 117932.8 current ops/sec; est completion in 27 minutes [INSERT: Count=1179295, Max=23183, Min=441, Avg=1693.54, 90=2333, 99=4807, 99.9=9183, 99.99=14079] 
2023-05-04 11:16:28:799 350 sec: 43774464 operations; 116055.9 current ops/sec; est completion in 27 minutes [INSERT: Count=1160556, Max=48447, Min=393, Avg=1721.07, 90=2499, 99=4787, 99.9=8783, 99.99=29455] 
2023-05-04 11:16:38:799 360 sec: 44944132 operations; 116966.8 current ops/sec; est completion in 27 minutes [INSERT: Count=1169660, Max=71807, Min=421, Avg=1707.68, 90=2313, 99=4851, 99.9=9047, 99.99=34143] 
2023-05-04 11:16:48:799 370 sec: 46116199 operations; 117206.7 current ops/sec; est completion in 27 minutes [INSERT: Count=1172084, Max=18847, Min=382, Avg=1704.14, 90=2403, 99=4843, 99.9=8823, 99.99=11743] 
2023-05-04 11:16:58:799 380 sec: 47263066 operations; 114686.7 current ops/sec; est completion in 27 minutes [INSERT: Count=1146859, Max=49535, Min=383, Avg=1741.61, 90=2553, 99=4975, 99.9=8655, 99.99=28431] 
2023-05-04 11:17:08:799 390 sec: 48429681 operations; 116661.5 current ops/sec; est completion in 27 minutes [INSERT: Count=1166613, Max=44991, Min=374, Avg=1712.07, 90=2331, 99=4815, 99.9=10575, 99.99=29055] 
2023-05-04 11:17:18:799 400 sec: 49599418 operations; 116973.7 current ops/sec; est completion in 26 minutes [INSERT: Count=1169733, Max=14911, Min=408, Avg=1707.53, 90=2431, 99=4751, 99.9=8247, 99.99=10175] 
2023-05-04 11:17:28:799 410 sec: 50745990 operations; 114657.2 current ops/sec; est completion in 26 minutes [INSERT: Count=1146583, Max=75199, Min=397, Avg=1742.08, 90=2521, 99=4939, 99.9=10415, 99.99=39519] 
2023-05-04 11:17:38:799 420 sec: 51917785 operations; 117179.5 current ops/sec; est completion in 26 minutes [INSERT: Count=1171795, Max=45247, Min=375, Avg=1704.51, 90=2319, 99=4791, 99.9=10167, 99.99=30047] 
2023-05-04 11:17:48:799 430 sec: 53072139 operations; 115435.4 current ops/sec; est completion in 26 minutes [INSERT: Count=1154355, Max=17231, Min=438, Avg=1730.28, 90=2497, 99=4879, 99.9=9815, 99.99=11911] 
2023-05-04 11:17:58:799 440 sec: 54212209 operations; 114007 current ops/sec; est completion in 26 minutes [INSERT: Count=1140061, Max=49791, Min=388, Avg=1751.98, 90=2561, 99=5023, 99.9=9679, 99.99=32543] 
2023-05-04 11:18:08:800 450 sec: 55375712 operations; 116350.3 current ops/sec; est completion in 26 minutes [INSERT: Count=1163497, Max=78783, Min=430, Avg=1716.63, 90=2357, 99=4919, 99.9=10023, 99.99=36127] 
2023-05-04 11:18:18:799 460 sec: 56530438 operations; 115472.6 current ops/sec; est completion in 26 minutes [INSERT: Count=1154733, Max=14287, Min=398, Avg=1729.66, 90=2525, 99=4739, 99.9=9047, 99.99=11567] 
2023-05-04 11:18:28:799 470 sec: 57672918 operations; 114248 current ops/sec; est completion in 26 minutes [INSERT: Count=1142488, Max=54207, Min=438, Avg=1748.29, 90=2553, 99=4955, 99.9=9807, 99.99=33887] 
2023-05-04 11:18:38:800 480 sec: 58830579 operations; 115766.1 current ops/sec; est completion in 26 minutes [INSERT: Count=1157668, Max=48735, Min=407, Avg=1725.33, 90=2393, 99=5119, 99.9=10375, 99.99=27247] 
2023-05-04 11:18:48:799 490 sec: 59965995 operations; 113541.6 current ops/sec; est completion in 25 minutes [INSERT: Count=1135397, Max=73599, Min=370, Avg=1759.18, 90=2617, 99=4987, 99.9=9415, 99.99=14999] 
2023-05-04 11:18:58:800 500 sec: 61111668 operations; 114567.3 current ops/sec; est completion in 25 minutes [INSERT: Count=1145710, Max=52639, Min=459, Avg=1743.45, 90=2549, 99=5023, 99.9=8519, 99.99=32527] 
2023-05-04 11:19:08:799 510 sec: 62273937 operations; 116226.9 current ops/sec; est completion in 25 minutes [INSERT: Count=1162235, Max=81663, Min=415, Avg=1718.52, 90=2369, 99=5151, 99.9=9335, 99.99=37631] 
2023-05-04 11:19:18:800 520 sec: 63406767 operations; 113283 current ops/sec; est completion in 25 minutes [INSERT: Count=1132851, Max=18687, Min=384, Avg=1763.28, 90=2669, 99=5043, 99.9=8759, 99.99=11287] 
2023-05-04 11:19:28:800 530 sec: 64544382 operations; 113761.5 current ops/sec; est completion in 25 minutes [INSERT: Count=1137611, Max=53631, Min=433, Avg=1755.78, 90=2555, 99=5223, 99.9=9759, 99.99=34079] 
2023-05-04 11:19:38:799 540 sec: 65694129 operations; 114974.7 current ops/sec; est completion in 25 minutes [INSERT: Count=1149763, Max=46527, Min=411, Avg=1737.25, 90=2425, 99=5395, 99.9=10239, 99.99=26239] 
2023-05-04 11:19:48:799 550 sec: 66831047 operations; 113691.8 current ops/sec; est completion in 25 minutes [INSERT: Count=1136882, Max=45183, Min=381, Avg=1756.93, 90=2681, 99=4899, 99.9=8671, 99.99=11759] 
2023-05-04 11:19:58:799 560 sec: 67964172 operations; 113312.5 current ops/sec; est completion in 25 minutes [INSERT: Count=1133137, Max=49055, Min=352, Avg=1762.81, 90=2587, 99=5263, 99.9=9455, 99.99=30127] 
2023-05-04 11:20:08:799 570 sec: 69115839 operations; 115166.7 current ops/sec; est completion in 24 minutes [INSERT: Count=1151658, Max=49439, Min=358, Avg=1734.38, 90=2465, 99=5167, 99.9=9127, 99.99=27183] 
2023-05-04 11:20:18:799 580 sec: 70234894 operations; 111905.5 current ops/sec; est completion in 24 minutes [INSERT: Count=1119065, Max=20895, Min=423, Avg=1784.97, 90=2753, 99=5223, 99.9=8391, 99.99=11079] 
2023-05-04 11:20:28:800 590 sec: 71353091 operations; 111819.7 current ops/sec; est completion in 24 minutes [INSERT: Count=1118187, Max=54815, Min=426, Avg=1786.42, 90=2615, 99=5755, 99.9=10087, 99.99=35871] 
2023-05-04 11:20:38:799 600 sec: 72483429 operations; 113033.8 current ops/sec; est completion in 24 minutes [INSERT: Count=1130338, Max=117247, Min=424, Avg=1767.07, 90=2519, 99=5335, 99.9=11127, 99.99=47647] 
2023-05-04 11:20:48:799 610 sec: 73612754 operations; 112932.5 current ops/sec; est completion in 24 minutes [INSERT: Count=1129329, Max=20127, Min=376, Avg=1768.81, 90=2729, 99=5035, 99.9=8215, 99.99=11815] 
2023-05-04 11:20:58:799 620 sec: 74744487 operations; 113173.3 current ops/sec; est completion in 24 minutes [INSERT: Count=1131725, Max=50463, Min=324, Avg=1764.95, 90=2579, 99=5275, 99.9=9823, 99.99=29567] 
2023-05-04 11:21:08:799 630 sec: 75861949 operations; 111746.2 current ops/sec; est completion in 24 minutes [INSERT: Count=1117460, Max=93439, Min=334, Avg=1787.55, 90=2619, 99=5643, 99.9=9927, 99.99=40383] 
2023-05-04 11:21:18:799 640 sec: 76991721 operations; 112977.2 current ops/sec; est completion in 23 minutes [INSERT: Count=1129770, Max=26959, Min=385, Avg=1768.07, 90=2717, 99=5187, 99.9=9103, 99.99=22975] 
2023-05-04 11:21:28:799 650 sec: 78134750 operations; 114302.9 current ops/sec; est completion in 23 minutes [INSERT: Count=1143037, Max=60703, Min=363, Avg=1747.46, 90=2511, 99=5163, 99.9=9367, 99.99=34591] 
2023-05-04 11:21:38:799 660 sec: 79257333 operations; 112258.3 current ops/sec; est completion in 23 minutes [INSERT: Count=1122575, Max=54079, Min=441, Avg=1779.38, 90=2623, 99=5575, 99.9=10935, 99.99=28511] 
2023-05-04 11:21:48:799 670 sec: 80374137 operations; 111680.4 current ops/sec; est completion in 23 minutes [INSERT: Count=1116812, Max=19631, Min=386, Avg=1788.66, 90=2759, 99=5463, 99.9=9799, 99.99=14511] 
2023-05-04 11:21:58:799 680 sec: 81506259 operations; 113212.2 current ops/sec; est completion in 23 minutes [INSERT: Count=1132117, Max=52703, Min=405, Avg=1764.34, 90=2587, 99=5199, 99.9=9535, 99.99=28879] 
2023-05-04 11:22:08:799 690 sec: 82606918 operations; 110065.9 current ops/sec; est completion in 23 minutes [INSERT: Count=1100656, Max=59263, Min=378, Avg=1814.89, 90=2727, 99=5779, 99.9=11279, 99.99=37343] 
2023-05-04 11:22:18:799 700 sec: 83723822 operations; 111690.4 current ops/sec; est completion in 23 minutes [INSERT: Count=1116914, Max=89471, Min=398, Avg=1788.51, 90=2721, 99=5211, 99.9=10119, 99.99=86271] 
2023-05-04 11:22:28:800 710 sec: 84844670 operations; 112084.8 current ops/sec; est completion in 23 minutes [INSERT: Count=1120836, Max=48447, Min=377, Avg=1782.17, 90=2611, 99=5623, 99.9=10335, 99.99=29855] 
2023-05-04 11:22:38:801 720 sec: 85939781 operations; 109489.2 current ops/sec; est completion in 22 minutes [INSERT: Count=1095136, Max=56799, Min=444, Avg=1823.69, 90=2751, 99=5987, 99.9=11943, 99.99=33119] 
2023-05-04 11:22:48:799 730 sec: 87066475 operations; 112691.94 current ops/sec; est completion in 22 minutes [INSERT: Count=1126678, Max=18223, Min=374, Avg=1773.4, 90=2733, 99=5203, 99.9=8279, 99.99=11335] 
2023-05-04 11:22:58:799 740 sec: 88178173 operations; 111169.8 current ops/sec; est completion in 22 minutes [INSERT: Count=1111698, Max=52703, Min=432, Avg=1796.85, 90=2665, 99=5747, 99.9=10567, 99.99=31439] 
2023-05-04 11:23:08:799 750 sec: 89281647 operations; 110347.4 current ops/sec; est completion in 22 minutes [INSERT: Count=1103457, Max=55359, Min=446, Avg=1810.36, 90=2721, 99=5935, 99.9=10791, 99.99=31087] 
2023-05-04 11:23:18:799 760 sec: 90393973 operations; 111232.6 current ops/sec; est completion in 22 minutes [INSERT: Count=1112341, Max=26751, Min=441, Avg=1795.88, 90=2777, 99=5571, 99.9=8519, 99.99=12487] 
2023-05-04 11:23:28:799 770 sec: 91487148 operations; 109317.5 current ops/sec; est completion in 22 minutes [INSERT: Count=1093175, Max=84415, Min=407, Avg=1827.41, 90=2695, 99=6327, 99.9=13359, 99.99=40735] 
2023-05-04 11:23:38:799 780 sec: 92598626 operations; 111147.8 current ops/sec; est completion in 22 minutes [INSERT: Count=1111474, Max=128191, Min=359, Avg=1797.26, 90=2667, 99=5495, 99.9=10391, 99.99=52063] 
2023-05-04 11:23:48:799 790 sec: 93691875 operations; 109324.9 current ops/sec; est completion in 21 minutes [INSERT: Count=1093248, Max=28351, Min=395, Avg=1827.25, 90=2767, 99=6335, 99.9=12263, 99.99=19247] 
2023-05-04 11:23:58:799 800 sec: 94800419 operations; 110854.4 current ops/sec; est completion in 21 minutes [INSERT: Count=1108550, Max=50527, Min=454, Avg=1802.05, 90=2685, 99=5827, 99.9=11039, 99.99=29711] 
2023-05-04 11:24:08:799 810 sec: 95906926 operations; 110650.7 current ops/sec; est completion in 21 minutes [INSERT: Count=1106498, Max=55871, Min=378, Avg=1805.28, 90=2729, 99=5767, 99.9=9559, 99.99=31279] 
2023-05-04 11:24:18:799 820 sec: 96988818 operations; 108189.2 current ops/sec; est completion in 21 minutes [INSERT: Count=1081904, Max=27967, Min=405, Avg=1846.49, 90=2845, 99=6539, 99.9=11591, 99.99=17087] 
2023-05-04 11:24:28:799 830 sec: 98091323 operations; 110250.5 current ops/sec; est completion in 21 minutes [INSERT: Count=1102510, Max=54079, Min=462, Avg=1811.92, 90=2705, 99=6079, 99.9=11311, 99.99=33855] 
2023-05-04 11:24:38:799 840 sec: 99202052 operations; 111072.9 current ops/sec; est completion in 21 minutes [INSERT: Count=1110723, Max=52031, Min=389, Avg=1798.41, 90=2675, 99=5831, 99.9=10823, 99.99=31663] 
2023-05-04 11:24:48:800 850 sec: 100298413 operations; 109636.1 current ops/sec; est completion in 21 minutes [INSERT: Count=1096394, Max=21119, Min=381, Avg=1822.08, 90=2827, 99=5955, 99.9=9743, 99.99=14423] 
2023-05-04 11:24:58:799 860 sec: 101396044 operations; 109763.1 current ops/sec; est completion in 21 minutes [INSERT: Count=1097587, Max=55551, Min=347, Avg=1819.89, 90=2791, 99=5847, 99.9=10407, 99.99=32095] 
2023-05-04 11:25:08:799 870 sec: 102455494 operations; 105945 current ops/sec; est completion in 20 minutes [INSERT: Count=1059453, Max=71551, Min=392, Avg=1885.69, 90=2663, 99=7035, 99.9=31215, 99.99=64639] 
2023-05-04 11:25:18:799 880 sec: 103571550 operations; 111605.6 current ops/sec; est completion in 20 minutes [INSERT: Count=1116079, Max=16783, Min=375, Avg=1789.88, 90=2737, 99=5543, 99.9=8503, 99.99=11823] 
2023-05-04 11:25:28:803 890 sec: 104659035 operations; 108715.89 current ops/sec; est completion in 20 minutes [INSERT: Count=1087484, Max=51327, Min=438, Avg=1836.47, 90=2839, 99=6051, 99.9=10943, 99.99=33663] 
2023-05-04 11:25:38:799 900 sec: 105753676 operations; 109496.95 current ops/sec; est completion in 20 minutes [INSERT: Count=1094623, Max=108607, Min=355, Avg=1825.46, 90=2707, 99=6323, 99.9=12815, 99.99=49759] 
2023-05-04 11:25:48:799 910 sec: 106851763 operations; 109808.7 current ops/sec; est completion in 20 minutes [INSERT: Count=1098087, Max=140799, Min=372, Avg=1819.11, 90=2751, 99=5847, 99.9=10343, 99.99=82751] 
2023-05-04 11:25:58:799 920 sec: 107930005 operations; 107824.2 current ops/sec; est completion in 20 minutes [INSERT: Count=1078235, Max=56735, Min=399, Avg=1852.78, 90=2869, 99=6247, 99.9=12071, 99.99=38143] 
2023-05-04 11:26:08:799 930 sec: 109032176 operations; 110217.1 current ops/sec; est completion in 20 minutes [INSERT: Count=1102189, Max=54719, Min=414, Avg=1812.41, 90=2693, 99=6031, 99.9=14087, 99.99=34719] 
2023-05-04 11:26:18:799 940 sec: 110111941 operations; 107976.5 current ops/sec; est completion in 19 minutes [INSERT: Count=1079742, Max=33567, Min=409, Avg=1850.12, 90=2819, 99=6751, 99.9=12415, 99.99=19183] 
2023-05-04 11:26:28:799 950 sec: 111198668 operations; 108672.7 current ops/sec; est completion in 19 minutes [INSERT: Count=1086740, Max=156671, Min=370, Avg=1838.24, 90=2851, 99=5595, 99.9=10119, 99.99=73855] 
2023-05-04 11:26:38:799 960 sec: 112286115 operations; 108744.7 current ops/sec; est completion in 19 minutes [INSERT: Count=1087451, Max=76031, Min=380, Avg=1837.08, 90=2757, 99=6447, 99.9=13607, 99.99=42911] 
2023-05-04 11:26:48:799 970 sec: 113359198 operations; 107308.3 current ops/sec; est completion in 19 minutes [INSERT: Count=1073063, Max=88255, Min=349, Avg=1861.64, 90=2755, 99=6419, 99.9=25743, 99.99=66879] 
2023-05-04 11:26:58:799 980 sec: 114445697 operations; 108649.9 current ops/sec; est completion in 19 minutes [INSERT: Count=1086509, Max=70463, Min=372, Avg=1838.66, 90=2911, 99=5699, 99.9=9215, 99.99=36895] 
2023-05-04 11:27:08:799 990 sec: 115533591 operations; 108789.4 current ops/sec; est completion in 19 minutes [INSERT: Count=1087906, Max=56287, Min=396, Avg=1836.23, 90=2843, 99=6111, 99.9=11231, 99.99=32559] 
2023-05-04 11:27:18:799 1000 sec: 116627288 operations; 109369.7 current ops/sec; est completion in 19 minutes [INSERT: Count=1093703, Max=28671, Min=414, Avg=1826.6, 90=2837, 99=6043, 99.9=10031, 99.99=16847] 
2023-05-04 11:27:28:799 1010 sec: 117686883 operations; 105959.5 current ops/sec; est completion in 18 minutes [INSERT: Count=1059582, Max=85951, Min=418, Avg=1885.41, 90=2929, 99=6439, 99.9=21727, 99.99=50719] 
2023-05-04 11:27:38:799 1020 sec: 118777149 operations; 109026.6 current ops/sec; est completion in 18 minutes [INSERT: Count=1090263, Max=89855, Min=350, Avg=1832.22, 90=2831, 99=5991, 99.9=11183, 99.99=43071] 
2023-05-04 11:27:48:799 1030 sec: 119879059 operations; 110191 current ops/sec; est completion in 18 minutes [INSERT: Count=1101912, Max=21839, Min=384, Avg=1812.91, 90=2797, 99=5903, 99.9=9887, 99.99=14303] 
2023-05-04 11:27:58:799 1040 sec: 120966339 operations; 108728 current ops/sec; est completion in 18 minutes [INSERT: Count=1087273, Max=73215, Min=440, Avg=1837.31, 90=2909, 99=5695, 99.9=9751, 99.99=43199] 
2023-05-04 11:28:08:799 1050 sec: 122032732 operations; 106639.3 current ops/sec; est completion in 18 minutes [INSERT: Count=1066410, Max=67391, Min=412, Avg=1873.34, 90=2847, 99=6759, 99.9=20735, 99.99=47167] 
2023-05-04 11:28:18:799 1060 sec: 123142314 operations; 110958.2 current ops/sec; est completion in 18 minutes [INSERT: Count=1109573, Max=25567, Min=395, Avg=1800.37, 90=2761, 99=5671, 99.9=9343, 99.99=15735] 
2023-05-04 11:28:28:799 1070 sec: 124226075 operations; 108376.1 current ops/sec; est completion in 18 minutes [INSERT: Count=1083769, Max=57695, Min=391, Avg=1843.32, 90=2925, 99=5727, 99.9=11039, 99.99=32383] 
2023-05-04 11:28:38:799 1080 sec: 125302790 operations; 107671.5 current ops/sec; est completion in 17 minutes [INSERT: Count=1076697, Max=59167, Min=440, Avg=1855.32, 90=2909, 99=6331, 99.9=12407, 99.99=38335] 
2023-05-04 11:28:48:799 1090 sec: 126410099 operations; 110730.9 current ops/sec; est completion in 17 minutes [INSERT: Count=1107315, Max=75583, Min=402, Avg=1804.1, 90=2755, 99=5747, 99.9=9759, 99.99=27967] 
2023-05-04 11:28:58:799 1100 sec: 127491922 operations; 108182.3 current ops/sec; est completion in 17 minutes [INSERT: Count=1081819, Max=50303, Min=405, Avg=1846.63, 90=2937, 99=5683, 99.9=10047, 99.99=32159] 
2023-05-04 11:29:08:799 1110 sec: 128550228 operations; 105830.6 current ops/sec; est completion in 17 minutes [INSERT: Count=1058323, Max=85887, Min=404, Avg=1887.55, 90=2945, 99=6767, 99.9=20303, 99.99=39423] 
2023-05-04 11:29:18:799 1120 sec: 129659557 operations; 110932.9 current ops/sec; est completion in 17 minutes [INSERT: Count=1109312, Max=24495, Min=407, Avg=1800.87, 90=2747, 99=5839, 99.9=9607, 99.99=13399] 
2023-05-04 11:29:28:799 1130 sec: 130739150 operations; 107959.3 current ops/sec; est completion in 17 minutes [INSERT: Count=1079593, Max=70655, Min=426, Avg=1850.45, 90=2889, 99=5879, 99.9=13423, 99.99=38303] 
2023-05-04 11:29:38:799 1140 sec: 131825075 operations; 108592.5 current ops/sec; est completion in 17 minutes [INSERT: Count=1085928, Max=52991, Min=428, Avg=1839.62, 90=2917, 99=5923, 99.9=10167, 99.99=32655] 
2023-05-04 11:29:48:799 1150 sec: 132923649 operations; 109857.4 current ops/sec; est completion in 16 minutes [INSERT: Count=1098566, Max=75775, Min=408, Avg=1818.36, 90=2773, 99=5871, 99.9=11087, 99.99=33855] 
2023-05-04 11:29:58:799 1160 sec: 133997081 operations; 107343.2 current ops/sec; est completion in 16 minutes [INSERT: Count=1073431, Max=54111, Min=405, Avg=1861.07, 90=2941, 99=6147, 99.9=11087, 99.99=31343] 
2023-05-04 11:30:08:799 1170 sec: 135058744 operations; 106166.3 current ops/sec; est completion in 16 minutes [INSERT: Count=1061671, Max=80447, Min=448, Avg=1881.7, 90=3011, 99=6451, 99.9=14199, 99.99=41919] 
2023-05-04 11:30:18:799 1180 sec: 136161950 operations; 110320.6 current ops/sec; est completion in 16 minutes [INSERT: Count=1103200, Max=20751, Min=417, Avg=1810.8, 90=2841, 99=5631, 99.9=8623, 99.99=11247] 
2023-05-04 11:30:28:799 1190 sec: 137247477 operations; 108552.7 current ops/sec; est completion in 16 minutes [INSERT: Count=1085544, Max=61727, Min=379, Avg=1840.3, 90=2887, 99=5743, 99.9=11047, 99.99=38495] 
2023-05-04 11:30:38:799 1200 sec: 138310163 operations; 106268.6 current ops/sec; est completion in 16 minutes [INSERT: Count=1062675, Max=61599, Min=359, Avg=1879.82, 90=3019, 99=6383, 99.9=14111, 99.99=34655] 
2023-05-04 11:30:48:799 1210 sec: 139397227 operations; 108706.4 current ops/sec; est completion in 16 minutes [INSERT: Count=1087069, Max=21807, Min=390, Avg=1837.74, 90=2913, 99=5983, 99.9=9943, 99.99=14327] 
2023-05-04 11:30:58:799 1220 sec: 140477447 operations; 108022 current ops/sec; est completion in 15 minutes [INSERT: Count=1080224, Max=59263, Min=418, Avg=1849.29, 90=2897, 99=5891, 99.9=10503, 99.99=33791] 
2023-05-04 11:31:08:799 1230 sec: 141560472 operations; 108302.5 current ops/sec; est completion in 15 minutes [INSERT: Count=1083032, Max=63359, Min=374, Avg=1844.61, 90=2917, 99=5731, 99.9=11079, 99.99=41983] 
2023-05-04 11:31:18:799 1240 sec: 142636557 operations; 107608.5 current ops/sec; est completion in 15 minutes [INSERT: Count=1076081, Max=28367, Min=406, Avg=1856.47, 90=2969, 99=6223, 99.9=10151, 99.99=14287] 
2023-05-04 11:31:28:799 1250 sec: 143676400 operations; 103984.3 current ops/sec; est completion in 15 minutes [INSERT: Count=1039830, Max=99519, Min=397, Avg=1921.24, 90=2837, 99=7011, 99.9=31871, 99.99=57663] 
2023-05-04 11:31:38:806 1260 sec: 144764272 operations; 108787.2 current ops/sec; est completion in 15 minutes [INSERT: Count=1087893, Max=53727, Min=407, Avg=1836.97, 90=2909, 99=5775, 99.9=9895, 99.99=32479] 
2023-05-04 11:31:48:800 1270 sec: 145842136 operations; 107786.4 current ops/sec; est completion in 15 minutes [INSERT: Count=1077850, Max=19263, Min=404, Avg=1852.82, 90=2983, 99=6103, 99.9=9527, 99.99=12895] 
2023-05-04 11:31:58:799 1280 sec: 146909169 operations; 106703.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1067032, Max=61471, Min=238, Avg=1872.18, 90=2935, 99=6391, 99.9=12071, 99.99=36479] 
2023-05-04 11:32:08:799 1290 sec: 147955326 operations; 104615.7 current ops/sec; est completion in 14 minutes [INSERT: Count=1046163, Max=128575, Min=397, Avg=1909.65, 90=2751, 99=6575, 99.9=37215, 99.99=57183] 
2023-05-04 11:32:18:799 1300 sec: 149038382 operations; 108305.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1083047, Max=26559, Min=365, Avg=1844.46, 90=2929, 99=6091, 99.9=9527, 99.99=15159] 
2023-05-04 11:32:28:799 1310 sec: 150121495 operations; 108311.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1083120, Max=55295, Min=397, Avg=1844.38, 90=2873, 99=5955, 99.9=10959, 99.99=30207] 
2023-05-04 11:32:38:799 1320 sec: 151182896 operations; 106140.1 current ops/sec; est completion in 14 minutes [INSERT: Count=1061386, Max=47775, Min=392, Avg=1882.12, 90=2935, 99=6335, 99.9=20927, 99.99=33695] 
2023-05-04 11:32:48:799 1330 sec: 152266842 operations; 108394.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1083947, Max=25471, Min=394, Avg=1843.06, 90=2957, 99=5995, 99.9=9319, 99.99=14511] 
2023-05-04 11:32:58:799 1340 sec: 153343692 operations; 107685 current ops/sec; est completion in 14 minutes [INSERT: Count=1076848, Max=55391, Min=439, Avg=1855.07, 90=2919, 99=6151, 99.9=10327, 99.99=31183] 
2023-05-04 11:33:08:799 1350 sec: 154412275 operations; 106858.3 current ops/sec; est completion in 13 minutes [INSERT: Count=1068589, Max=115071, Min=428, Avg=1869.49, 90=2915, 99=6147, 99.9=12839, 99.99=73791] 
2023-05-04 11:33:18:799 1360 sec: 155485628 operations; 107335.3 current ops/sec; est completion in 13 minutes [INSERT: Count=1073362, Max=25743, Min=419, Avg=1861.23, 90=2967, 99=6427, 99.9=10975, 99.99=17535] 
2023-05-04 11:33:28:799 1370 sec: 156563863 operations; 107823.5 current ops/sec; est completion in 13 minutes [INSERT: Count=1078227, Max=52703, Min=362, Avg=1852.72, 90=2885, 99=6179, 99.9=11623, 99.99=32639] 
2023-05-04 11:33:38:805 1380 sec: 157643268 operations; 107875.77 current ops/sec; est completion in 13 minutes [INSERT: Count=1079418, Max=59999, Min=340, Avg=1850.91, 90=2923, 99=5827, 99.9=9759, 99.99=33983] 
2023-05-04 11:33:48:799 1390 sec: 158691802 operations; 104916.35 current ops/sec; est completion in 13 minutes [INSERT: Count=1048516, Max=68799, Min=428, Avg=1905.1, 90=2961, 99=6751, 99.9=23151, 99.99=61183] 
2023-05-04 11:33:58:799 1400 sec: 159777304 operations; 108550.2 current ops/sec; est completion in 13 minutes [INSERT: Count=1085511, Max=56447, Min=394, Avg=1840.34, 90=2867, 99=5963, 99.9=10087, 99.99=35455] 
2023-05-04 11:34:08:799 1410 sec: 160833487 operations; 105618.3 current ops/sec; est completion in 13 minutes [INSERT: Count=1056177, Max=166015, Min=385, Avg=1891.47, 90=2889, 99=6443, 99.9=20895, 99.99=92479] 
2023-05-04 11:34:18:799 1420 sec: 161919787 operations; 108630 current ops/sec; est completion in 12 minutes [INSERT: Count=1086311, Max=22511, Min=377, Avg=1838.97, 90=2923, 99=5871, 99.9=9695, 99.99=13759] 
2023-05-04 11:34:28:799 1430 sec: 162984778 operations; 106499.1 current ops/sec; est completion in 12 minutes [INSERT: Count=1064974, Max=55647, Min=366, Avg=1875.82, 90=2993, 99=6423, 99.9=11191, 99.99=32191] 
2023-05-04 11:34:38:799 1440 sec: 164058702 operations; 107392.4 current ops/sec; est completion in 12 minutes [INSERT: Count=1073930, Max=69119, Min=421, Avg=1860.16, 90=2865, 99=6403, 99.9=12815, 99.99=37151] 
2023-05-04 11:34:48:799 1450 sec: 165146172 operations; 108747 current ops/sec; est completion in 12 minutes [INSERT: Count=1087469, Max=27487, Min=419, Avg=1837.02, 90=2867, 99=6051, 99.9=10527, 99.99=20015] 
2023-05-04 11:34:58:802 1460 sec: 166208863 operations; 106237.23 current ops/sec; est completion in 12 minutes [INSERT: Count=1062713, Max=59679, Min=388, Avg=1879.57, 90=2981, 99=6407, 99.9=13207, 99.99=40479] 
2023-05-04 11:35:08:799 1470 sec: 167283389 operations; 107484.85 current ops/sec; est completion in 12 minutes [INSERT: Count=1074503, Max=49151, Min=440, Avg=1859.46, 90=2917, 99=6179, 99.9=10959, 99.99=32799] 
2023-05-04 11:35:18:799 1480 sec: 168360961 operations; 107757.2 current ops/sec; est completion in 11 minutes [INSERT: Count=1077572, Max=25215, Min=418, Avg=1853.87, 90=2925, 99=6223, 99.9=10575, 99.99=15551] 
2023-05-04 11:35:28:799 1490 sec: 169429197 operations; 106823.6 current ops/sec; est completion in 11 minutes [INSERT: Count=1068236, Max=59583, Min=387, Avg=1870.15, 90=2859, 99=6251, 99.9=24175, 99.99=39615] 
2023-05-04 11:35:38:799 1500 sec: 170478983 operations; 104978.6 current ops/sec; est completion in 11 minutes [INSERT: Count=1049791, Max=103807, Min=402, Avg=1902.94, 90=2939, 99=6867, 99.9=15655, 99.99=47551] 
2023-05-04 11:35:48:799 1510 sec: 171566960 operations; 108797.7 current ops/sec; est completion in 11 minutes [INSERT: Count=1087972, Max=36031, Min=406, Avg=1836.16, 90=2847, 99=6015, 99.9=10463, 99.99=25327] 
2023-05-04 11:35:58:799 1520 sec: 172630419 operations; 106345.9 current ops/sec; est completion in 11 minutes [INSERT: Count=1063470, Max=51263, Min=395, Avg=1878.57, 90=2919, 99=6587, 99.9=19743, 99.99=39775] 
2023-05-04 11:36:08:799 1530 sec: 173656723 operations; 102630.4 current ops/sec; est completion in 11 minutes [INSERT: Count=1026303, Max=69887, Min=363, Avg=1946.56, 90=2637, 99=7719, 99.9=46111, 99.99=60159] 
2023-05-04 11:36:18:799 1540 sec: 174720701 operations; 106397.8 current ops/sec; est completion in 11 minutes [INSERT: Count=1063964, Max=31919, Min=397, Avg=1877.55, 90=2939, 99=6647, 99.9=14015, 99.99=24095] 
2023-05-04 11:36:28:799 1550 sec: 175730869 operations; 101016.8 current ops/sec; est completion in 10 minutes [INSERT: Count=1010176, Max=123647, Min=364, Avg=1977.86, 90=2579, 99=7327, 99.9=60095, 99.99=86271] 
2023-05-04 11:36:38:799 1560 sec: 176777587 operations; 104671.8 current ops/sec; est completion in 10 minutes [INSERT: Count=1046716, Max=73279, Min=399, Avg=1908.49, 90=2757, 99=6583, 99.9=44031, 99.99=56127] 
2023-05-04 11:36:48:799 1570 sec: 177810087 operations; 103250 current ops/sec; est completion in 10 minutes [INSERT: Count=1032504, Max=69503, Min=334, Avg=1934.92, 90=2547, 99=7627, 99.9=48415, 99.99=59935] 
2023-05-04 11:36:58:799 1580 sec: 178883607 operations; 107352 current ops/sec; est completion in 10 minutes [INSERT: Count=1073517, Max=72895, Min=354, Avg=1860.68, 90=2863, 99=6211, 99.9=18847, 99.99=42303] 
2023-05-04 11:37:08:799 1590 sec: 179902329 operations; 101872.2 current ops/sec; est completion in 10 minutes [INSERT: Count=1018726, Max=122495, Min=355, Avg=1961.35, 90=2613, 99=7035, 99.9=58655, 99.99=84415] 
2023-05-04 11:37:18:799 1600 sec: 180955125 operations; 105279.6 current ops/sec; est completion in 10 minutes [INSERT: Count=1052788, Max=56255, Min=447, Avg=1896.92, 90=2709, 99=6691, 99.9=36831, 99.99=48415] 
2023-05-04 11:37:28:799 1610 sec: 182011316 operations; 105619.1 current ops/sec; est completion in 10 minutes [INSERT: Count=1056204, Max=121343, Min=407, Avg=1892.11, 90=2777, 99=5967, 99.9=46463, 99.99=65023] 
2023-05-04 11:37:38:799 1620 sec: 183045064 operations; 103374.8 current ops/sec; est completion in 9 minutes [INSERT: Count=1033738, Max=98879, Min=407, Avg=1932.05, 90=2769, 99=7379, 99.9=37343, 99.99=70975] 
2023-05-04 11:37:48:799 1630 sec: 184117150 operations; 107208.6 current ops/sec; est completion in 9 minutes [INSERT: Count=1072096, Max=74815, Min=369, Avg=1863.88, 90=2857, 99=6419, 99.9=21119, 99.99=37855] 
2023-05-04 11:37:58:799 1640 sec: 185185111 operations; 106796.1 current ops/sec; est completion in 9 minutes [INSERT: Count=1067953, Max=53663, Min=380, Avg=1870.53, 90=2829, 99=5847, 99.9=27167, 99.99=39135] 
2023-05-04 11:38:08:799 1650 sec: 186226160 operations; 104104.9 current ops/sec; est completion in 9 minutes [INSERT: Count=1041044, Max=137599, Min=415, Avg=1918.87, 90=2879, 99=6687, 99.9=32447, 99.99=83135] 
2023-05-04 11:38:18:799 1660 sec: 187270851 operations; 104469.1 current ops/sec; est completion in 9 minutes [INSERT: Count=1044691, Max=62367, Min=387, Avg=1912.45, 90=2813, 99=6415, 99.9=36703, 99.99=55455] 
2023-05-04 11:38:28:799 1670 sec: 188337483 operations; 106663.2 current ops/sec; est completion in 9 minutes [INSERT: Count=1066647, Max=50975, Min=395, Avg=1872.99, 90=2695, 99=6799, 99.9=30335, 99.99=40671] 
2023-05-04 11:38:38:799 1680 sec: 189397396 operations; 105991.3 current ops/sec; est completion in 8 minutes [INSERT: Count=1059892, Max=79551, Min=371, Avg=1884.45, 90=2939, 99=6275, 99.9=21727, 99.99=57631] 
2023-05-04 11:38:48:799 1690 sec: 190409867 operations; 101247.1 current ops/sec; est completion in 8 minutes [INSERT: Count=1012481, Max=106751, Min=397, Avg=1973.56, 90=2673, 99=7527, 99.9=55551, 99.99=90943] 
2023-05-04 11:38:58:799 1700 sec: 191443071 operations; 103320.4 current ops/sec; est completion in 8 minutes [INSERT: Count=1033202, Max=86527, Min=435, Avg=1932.62, 90=2575, 99=7095, 99.9=50623, 99.99=61215] 
2023-05-04 11:39:08:799 1710 sec: 192514910 operations; 107183.9 current ops/sec; est completion in 8 minutes [INSERT: Count=1071841, Max=66367, Min=354, Avg=1864.78, 90=2873, 99=6251, 99.9=17135, 99.99=51999] 
2023-05-04 11:39:18:799 1720 sec: 193575984 operations; 106107.4 current ops/sec; est completion in 8 minutes [INSERT: Count=1061069, Max=43839, Min=377, Avg=1882.69, 90=2823, 99=6635, 99.9=28543, 99.99=36831] 
2023-05-04 11:39:28:799 1730 sec: 194634207 operations; 105822.3 current ops/sec; est completion in 8 minutes [INSERT: Count=1058222, Max=46143, Min=401, Avg=1887.45, 90=2825, 99=7083, 99.9=24367, 99.99=36703] 
2023-05-04 11:39:38:799 1740 sec: 195688200 operations; 105399.3 current ops/sec; est completion in 8 minutes [INSERT: Count=1053997, Max=66687, Min=364, Avg=1895.8, 90=2695, 99=6043, 99.9=41599, 99.99=52415] 
2023-05-04 11:39:48:799 1750 sec: 196756170 operations; 106797 current ops/sec; est completion in 7 minutes [INSERT: Count=1067966, Max=40735, Min=389, Avg=1870.44, 90=2929, 99=6287, 99.9=21519, 99.99=31951] 
2023-05-04 11:39:58:799 1760 sec: 197794204 operations; 103803.4 current ops/sec; est completion in 7 minutes [INSERT: Count=1038038, Max=54783, Min=420, Avg=1924.72, 90=2813, 99=7207, 99.9=35647, 99.99=47487] 
2023-05-04 11:40:08:799 1770 sec: 198830810 operations; 103660.6 current ops/sec; est completion in 7 minutes [INSERT: Count=1036600, Max=125183, Min=382, Avg=1927.32, 90=2683, 99=7235, 99.9=39519, 99.99=61503] 
2023-05-04 11:40:18:799 1780 sec: 199910735 operations; 107992.5 current ops/sec; est completion in 7 minutes [INSERT: Count=1079928, Max=36127, Min=394, Avg=1849.68, 90=2943, 99=5691, 99.9=14415, 99.99=29279] 
2023-05-04 11:40:28:799 1790 sec: 200937746 operations; 102701.1 current ops/sec; est completion in 7 minutes [INSERT: Count=1027008, Max=85631, Min=401, Avg=1945.35, 90=2807, 99=7379, 99.9=38079, 99.99=48735] 
2023-05-04 11:40:38:799 1800 sec: 201972032 operations; 103428.6 current ops/sec; est completion in 7 minutes [INSERT: Count=1034292, Max=60639, Min=371, Avg=1931.54, 90=2769, 99=7583, 99.9=40991, 99.99=51487] 
2023-05-04 11:40:48:799 1810 sec: 203048908 operations; 107687.6 current ops/sec; est completion in 6 minutes [INSERT: Count=1076887, Max=38655, Min=349, Avg=1855.15, 90=2923, 99=5939, 99.9=19375, 99.99=29791] 
2023-05-04 11:40:58:799 1820 sec: 204083083 operations; 103417.5 current ops/sec; est completion in 6 minutes [INSERT: Count=1034166, Max=65663, Min=400, Avg=1931.56, 90=2891, 99=7039, 99.9=31919, 99.99=44191] 
2023-05-04 11:41:08:799 1830 sec: 205109151 operations; 102606.8 current ops/sec; est completion in 6 minutes [INSERT: Count=1026066, Max=150783, Min=379, Avg=1947.25, 90=2879, 99=7515, 99.9=32527, 99.99=77375] 
2023-05-04 11:41:18:799 1840 sec: 206163937 operations; 105478.6 current ops/sec; est completion in 6 minutes [INSERT: Count=1054785, Max=45375, Min=400, Avg=1894.05, 90=2825, 99=6423, 99.9=29871, 99.99=36927] 
2023-05-04 11:41:28:799 1850 sec: 207180058 operations; 101612.1 current ops/sec; est completion in 6 minutes [INSERT: Count=1016118, Max=86015, Min=390, Avg=1965.71, 90=2775, 99=6919, 99.9=51935, 99.99=75839] 
2023-05-04 11:41:38:799 1860 sec: 208213601 operations; 103354.3 current ops/sec; est completion in 6 minutes [INSERT: Count=1033552, Max=58495, Min=358, Avg=1933.19, 90=2887, 99=7403, 99.9=28303, 99.99=48095] 
2023-05-04 11:41:48:799 1870 sec: 209260870 operations; 104726.9 current ops/sec; est completion in 6 minutes [INSERT: Count=1047271, Max=45727, Min=388, Avg=1907.77, 90=2859, 99=7031, 99.9=26159, 99.99=37919] 
2023-05-04 11:41:58:799 1880 sec: 210310051 operations; 104918.1 current ops/sec; est completion in 5 minutes [INSERT: Count=1049177, Max=120255, Min=364, Avg=1904.12, 90=2757, 99=6939, 99.9=34975, 99.99=63007] 
2023-05-04 11:42:08:799 1890 sec: 211362750 operations; 105269.9 current ops/sec; est completion in 5 minutes [INSERT: Count=1052694, Max=67007, Min=408, Avg=1897.48, 90=2917, 99=6543, 99.9=25135, 99.99=41279] 
2023-05-04 11:42:18:799 1900 sec: 212380850 operations; 101810 current ops/sec; est completion in 5 minutes [INSERT: Count=1018101, Max=56479, Min=373, Avg=1962.56, 90=2833, 99=8163, 99.9=33759, 99.99=44415] 
2023-05-04 11:42:28:799 1910 sec: 213438099 operations; 105724.9 current ops/sec; est completion in 5 minutes [INSERT: Count=1057254, Max=76799, Min=448, Avg=1889.45, 90=2763, 99=6339, 99.9=35071, 99.99=65151] 
2023-05-04 11:42:38:799 1920 sec: 214507184 operations; 106908.5 current ops/sec; est completion in 5 minutes [INSERT: Count=1069091, Max=52159, Min=396, Avg=1868.68, 90=2919, 99=6263, 99.9=19567, 99.99=34047] 
2023-05-04 11:42:48:799 1930 sec: 215526311 operations; 101912.7 current ops/sec; est completion in 5 minutes [INSERT: Count=1019118, Max=51615, Min=303, Avg=1959.97, 90=2875, 99=7787, 99.9=34175, 99.99=43615] 
2023-05-04 11:42:58:799 1940 sec: 216583745 operations; 105743.4 current ops/sec; est completion in 5 minutes [INSERT: Count=1057428, Max=56543, Min=357, Avg=1889.58, 90=2815, 99=6839, 99.9=25439, 99.99=36031] 
2023-05-04 11:43:08:799 1950 sec: 217663084 operations; 107933.9 current ops/sec; est completion in 4 minutes [INSERT: Count=1079346, Max=76543, Min=402, Avg=1850.8, 90=2929, 99=5787, 99.9=15223, 99.99=36095] 
2023-05-04 11:43:18:799 1960 sec: 218687086 operations; 102400.2 current ops/sec; est completion in 4 minutes [INSERT: Count=1024005, Max=82303, Min=388, Avg=1950.69, 90=2881, 99=7059, 99.9=34655, 99.99=50335] 
2023-05-04 11:43:28:799 1970 sec: 219720996 operations; 103391 current ops/sec; est completion in 4 minutes [INSERT: Count=1033902, Max=56543, Min=387, Avg=1932.45, 90=2783, 99=8743, 99.9=29327, 99.99=40991] 
2023-05-04 11:43:38:799 1980 sec: 220791362 operations; 107036.6 current ops/sec; est completion in 4 minutes [INSERT: Count=1070369, Max=139263, Min=375, Avg=1866.5, 90=2929, 99=5899, 99.9=18991, 99.99=50207] 
2023-05-04 11:43:48:799 1990 sec: 221801579 operations; 101021.7 current ops/sec; est completion in 4 minutes [INSERT: Count=1010221, Max=53215, Min=385, Avg=1977.72, 90=2843, 99=8679, 99.9=38847, 99.99=48351] 
2023-05-04 11:43:58:799 2000 sec: 222841811 operations; 104023.2 current ops/sec; est completion in 4 minutes [INSERT: Count=1040224, Max=51071, Min=417, Avg=1920.29, 90=2879, 99=7267, 99.9=28143, 99.99=40063] 
2023-05-04 11:44:08:799 2010 sec: 223898344 operations; 105653.3 current ops/sec; est completion in 3 minutes [INSERT: Count=1056535, Max=100415, Min=408, Avg=1891.06, 90=2771, 99=6283, 99.9=36287, 99.99=50111] 
2023-05-04 11:44:18:799 2020 sec: 224940374 operations; 104203 current ops/sec; est completion in 3 minutes [INSERT: Count=1042030, Max=46623, Min=373, Avg=1917.16, 90=2935, 99=7451, 99.9=25599, 99.99=36799] 
2023-05-04 11:44:28:799 2030 sec: 225992288 operations; 105191.4 current ops/sec; est completion in 3 minutes [INSERT: Count=1051916, Max=58271, Min=360, Avg=1898.83, 90=2979, 99=6291, 99.9=23679, 99.99=37855] 
2023-05-04 11:44:38:799 2040 sec: 227047777 operations; 105548.9 current ops/sec; est completion in 3 minutes [INSERT: Count=1055484, Max=55295, Min=385, Avg=1893.14, 90=2851, 99=6355, 99.9=28863, 99.99=44159] 
2023-05-04 11:44:48:799 2050 sec: 228096361 operations; 104858.4 current ops/sec; est completion in 3 minutes [INSERT: Count=1048594, Max=38687, Min=435, Avg=1905.15, 90=2957, 99=7055, 99.9=22303, 99.99=30351] 
2023-05-04 11:44:58:799 2060 sec: 229151842 operations; 105548.1 current ops/sec; est completion in 3 minutes [INSERT: Count=1055478, Max=56447, Min=389, Avg=1892.5, 90=2973, 99=6031, 99.9=22991, 99.99=37983] 
2023-05-04 11:45:08:799 2070 sec: 230201375 operations; 104953.3 current ops/sec; est completion in 2 minutes [INSERT: Count=1049526, Max=95935, Min=331, Avg=1903.74, 90=2845, 99=6391, 99.9=30767, 99.99=53183] 
2023-05-04 11:45:18:799 2080 sec: 231259048 operations; 105767.3 current ops/sec; est completion in 2 minutes [INSERT: Count=1057670, Max=35391, Min=399, Avg=1888.56, 90=2935, 99=6299, 99.9=21439, 99.99=28831] 
2023-05-04 11:45:28:799 2090 sec: 232322180 operations; 106313.2 current ops/sec; est completion in 2 minutes [INSERT: Count=1063149, Max=53791, Min=342, Avg=1879.37, 90=2957, 99=5983, 99.9=21279, 99.99=32735] 
2023-05-04 11:45:38:799 2100 sec: 233356974 operations; 103479.4 current ops/sec; est completion in 2 minutes [INSERT: Count=1034799, Max=65247, Min=362, Avg=1930.64, 90=2795, 99=6579, 99.9=45791, 99.99=53087] 
2023-05-04 11:45:48:799 2110 sec: 234417165 operations; 106019.1 current ops/sec; est completion in 2 minutes [INSERT: Count=1060184, Max=36959, Min=404, Avg=1884.03, 90=2961, 99=6119, 99.9=21679, 99.99=29743] 
2023-05-04 11:45:58:799 2120 sec: 235464779 operations; 104761.4 current ops/sec; est completion in 2 minutes [INSERT: Count=1047604, Max=55455, Min=363, Avg=1907.3, 90=2871, 99=6771, 99.9=25871, 99.99=40031] 
2023-05-04 11:46:08:799 2130 sec: 236486326 operations; 102154.7 current ops/sec; est completion in 2 minutes [INSERT: Count=1021547, Max=90303, Min=329, Avg=1955.67, 90=2697, 99=6835, 99.9=51519, 99.99=76735] 
2023-05-04 11:46:18:799 2140 sec: 237550740 operations; 106441.4 current ops/sec; est completion in 1 minute [INSERT: Count=1064413, Max=41151, Min=394, Avg=1876.77, 90=2907, 99=6239, 99.9=21343, 99.99=33311] 
2023-05-04 11:46:28:799 2150 sec: 238589591 operations; 103885.1 current ops/sec; est completion in 1 minute [INSERT: Count=1038855, Max=55647, Min=434, Avg=1923.1, 90=2813, 99=8047, 99.9=26447, 99.99=35167] 
2023-05-04 11:46:38:799 2160 sec: 239653630 operations; 106403.9 current ops/sec; est completion in 1 minute [INSERT: Count=1064038, Max=92287, Min=389, Avg=1877.31, 90=2963, 99=6295, 99.9=18303, 99.99=48159] 
2023-05-04 11:46:48:799 2170 sec: 240717814 operations; 106418.4 current ops/sec; est completion in 1 minute [INSERT: Count=1064189, Max=39039, Min=452, Avg=1877.42, 90=2863, 99=6347, 99.9=22767, 99.99=30927] 
2023-05-04 11:46:58:799 2180 sec: 241762362 operations; 104454.8 current ops/sec; est completion in 1 minute [INSERT: Count=1044546, Max=66879, Min=419, Avg=1912.56, 90=2831, 99=7303, 99.9=26303, 99.99=37343] 
2023-05-04 11:47:08:799 2190 sec: 242834786 operations; 107242.4 current ops/sec; est completion in 1 minute [INSERT: Count=1072426, Max=107839, Min=433, Avg=1862.81, 90=2961, 99=5751, 99.9=12415, 99.99=62879] 
2023-05-04 11:47:18:799 2200 sec: 243889396 operations; 105461 current ops/sec; est completion in 56 seconds [INSERT: Count=1054613, Max=50975, Min=390, Avg=1893.96, 90=2839, 99=6907, 99.9=24271, 99.99=44703] 
2023-05-04 11:47:28:799 2210 sec: 244948495 operations; 105909.9 current ops/sec; est completion in 46 seconds [INSERT: Count=1059092, Max=61919, Min=363, Avg=1886.58, 90=2831, 99=6499, 99.9=24719, 99.99=40575] 
2023-05-04 11:47:38:799 2220 sec: 246022266 operations; 107377.1 current ops/sec; est completion in 36 seconds [INSERT: Count=1073768, Max=52671, Min=435, Avg=1860.44, 90=3031, 99=5731, 99.9=10215, 99.99=33759] 
2023-05-04 11:47:48:799 2230 sec: 247071673 operations; 104940.7 current ops/sec; est completion in 27 seconds [INSERT: Count=1049418, Max=52063, Min=318, Avg=1903.65, 90=2879, 99=7091, 99.9=24287, 99.99=41503] 
2023-05-04 11:47:58:799 2240 sec: 248115616 operations; 104394.3 current ops/sec; est completion in 18 seconds [INSERT: Count=1043930, Max=47871, Min=409, Avg=1913.74, 90=2809, 99=7591, 99.9=30927, 99.99=39455] 
2023-05-04 11:48:08:799 2250 sec: 249188571 operations; 107295.5 current ops/sec; est completion in 8 second [INSERT: Count=1072963, Max=211839, Min=364, Avg=1861.9, 90=2963, 99=5479, 99.9=9855, 99.99=158975] 
2023-05-04 11:48:18:799 2260 sec: 249998152 operations; 80958.1 current ops/sec; est completion in 1 second [CLEANUP: Count=196, Max=19, Min=1, Avg=2.32, 90=3, 99=13, 99.9=19, 99.99=19] [INSERT: Count=809566, Max=43103, Min=406, Avg=1840.89, 90=2417, 99=8155, 99.9=28127, 99.99=36255] 
2023-05-04 11:48:22:745 2263 sec: 250000000 operations; 468.32 current ops/sec; [CLEANUP: Count=4, Max=2220031, Min=2, Avg=554753.5, 90=2220031, 99=2220031, 99.9=2220031, 99.99=2220031] [INSERT: Count=1848, Max=4159, Min=536, Avg=1426.66, 90=1818, 99=2435, 99.9=3641, 99.99=4159] 
[OVERALL], RunTime(ms), 2263945
[OVERALL], Throughput(ops/sec), 110426.71089624528
[TOTAL_GCS_PS_Scavenge], Count, 4755
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 23872
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0544425770060668
[TOTAL_GCS_PS_MarkSweep], Count, 6
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 223
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.009850062611945078
[TOTAL_GCs], Count, 4761
[TOTAL_GC_TIME], Time(ms), 24095
[TOTAL_GC_TIME_%], Time(%), 1.064292639618012
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11097.345
[CLEANUP], MinLatency(us), 1
[CLEANUP], MaxLatency(us), 2220031
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 15
[INSERT], Operations, 250000000
[INSERT], AverageLatency(us), 1803.1945312
[INSERT], MinLatency(us), 191
[INSERT], MaxLatency(us), 763391
[INSERT], 95thPercentileLatency(us), 3545
[INSERT], 99thPercentileLatency(us), 5835
[INSERT], Return=OK, 250000000
