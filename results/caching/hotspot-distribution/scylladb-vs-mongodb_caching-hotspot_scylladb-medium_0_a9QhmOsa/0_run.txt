bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-05 07:49:23:570 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
2023-05-05 07:49:33:554 10 sec: 1199516 operations; 119951.6 current ops/sec; est completion in 2 hours 18 minutes [READ: Count=599882, Max=173439, Min=559, Avg=2531.34, 90=3203, 99=16671, 99.9=43487, 99.99=113151] [UPDATE: Count=605766, Max=180863, Min=493, Avg=2116.03, 90=2699, 99=10495, 99.9=41375, 99.99=108543] 
2023-05-05 07:49:43:553 20 sec: 2625822 operations; 142630.6 current ops/sec; est completion in 2 hours 6 minutes [READ: Count=712909, Max=53983, Min=553, Avg=2312.29, 90=2979, 99=13935, 99.9=19839, 99.99=42047] [UPDATE: Count=710564, Max=46655, Min=502, Avg=1886.53, 90=2533, 99=4683, 99.9=9039, 99.99=41599] 
2023-05-05 07:49:53:554 30 sec: 4048424 operations; 142260.2 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=711456, Max=49887, Min=562, Avg=2317.25, 90=2997, 99=13367, 99.9=19279, 99.99=27199] [UPDATE: Count=711998, Max=44031, Min=505, Avg=1896.48, 90=2551, 99=5047, 99.9=9151, 99.99=19487] 
2023-05-05 07:50:03:554 40 sec: 5465392 operations; 141696.8 current ops/sec; est completion in 2 hours 1 minute [READ: Count=708223, Max=31407, Min=557, Avg=2319.14, 90=3013, 99=13215, 99.9=19119, 99.99=22063] [UPDATE: Count=708781, Max=19855, Min=487, Avg=1908.36, 90=2563, 99=5615, 99.9=9167, 99.99=15023] 
2023-05-05 07:50:13:553 50 sec: 6864477 operations; 139908.5 current ops/sec; est completion in 2 hours [READ: Count=699490, Max=57855, Min=561, Avg=2354.06, 90=3053, 99=13663, 99.9=20543, 99.99=29199] [UPDATE: Count=697017, Max=41983, Min=487, Avg=1928.39, 90=2575, 99=6219, 99.9=13695, 99.99=27519] 
2023-05-05 07:50:23:553 60 sec: 8277552 operations; 141307.5 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=706348, Max=37535, Min=545, Avg=2326.05, 90=3049, 99=13159, 99.9=19263, 99.99=24431] [UPDATE: Count=708760, Max=31823, Min=519, Avg=1905.43, 90=2569, 99=5419, 99.9=9095, 99.99=11575] 
2023-05-05 07:50:33:553 70 sec: 9682993 operations; 140544.1 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=703539, Max=48767, Min=567, Avg=2335.3, 90=3091, 99=13319, 99.9=19215, 99.99=26623] [UPDATE: Count=699982, Max=34047, Min=489, Avg=1916.88, 90=2607, 99=5763, 99.9=9767, 99.99=23583] 
2023-05-05 07:50:43:554 80 sec: 11080334 operations; 139734.1 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=698602, Max=37695, Min=561, Avg=2353.89, 90=3127, 99=13263, 99.9=19119, 99.99=23455] [UPDATE: Count=700404, Max=25423, Min=504, Avg=1921.72, 90=2633, 99=5407, 99.9=8967, 99.99=11167] 
2023-05-05 07:50:53:553 90 sec: 12472253 operations; 139191.9 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=696624, Max=41535, Min=550, Avg=2367.28, 90=3169, 99=13207, 99.9=19135, 99.99=25455] [UPDATE: Count=694410, Max=37727, Min=499, Avg=1934.62, 90=2661, 99=5603, 99.9=9159, 99.99=20399] 
2023-05-05 07:51:03:553 100 sec: 13856458 operations; 138420.5 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=691944, Max=27631, Min=587, Avg=2383.58, 90=3201, 99=13231, 99.9=18959, 99.99=21983] [UPDATE: Count=692750, Max=18703, Min=518, Avg=1945.07, 90=2675, 99=5403, 99.9=8951, 99.99=13551] 
2023-05-05 07:51:13:553 110 sec: 15238897 operations; 138243.9 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=691347, Max=48767, Min=525, Avg=2388.85, 90=3215, 99=13327, 99.9=18991, 99.99=26783] [UPDATE: Count=691003, Max=31471, Min=496, Avg=1947.25, 90=2677, 99=4783, 99.9=10103, 99.99=21951] 
2023-05-05 07:51:23:553 120 sec: 16622847 operations; 138395 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=693181, Max=26783, Min=553, Avg=2384.9, 90=3229, 99=13119, 99.9=18815, 99.99=21327] [UPDATE: Count=690938, Max=15039, Min=512, Avg=1946.02, 90=2705, 99=4523, 99.9=8575, 99.99=10663] 
2023-05-05 07:51:33:553 130 sec: 18008521 operations; 138567.4 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=693157, Max=52127, Min=564, Avg=2383.88, 90=3217, 99=13199, 99.9=19119, 99.99=27551] [UPDATE: Count=692320, Max=31599, Min=502, Avg=1941.8, 90=2711, 99=4711, 99.9=8791, 99.99=21103] 
2023-05-05 07:51:43:553 140 sec: 19378881 operations; 137036 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=684778, Max=26815, Min=554, Avg=2410.36, 90=3313, 99=13111, 99.9=18911, 99.99=21455] [UPDATE: Count=685857, Max=14759, Min=509, Avg=1964.52, 90=2801, 99=5043, 99.9=8551, 99.99=10247] 
2023-05-05 07:51:53:553 150 sec: 20743954 operations; 136507.3 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=682282, Max=49983, Min=582, Avg=2419.87, 90=3317, 99=13239, 99.9=19023, 99.99=26239] [UPDATE: Count=682449, Max=27615, Min=491, Avg=1971.47, 90=2819, 99=5531, 99.9=8895, 99.99=20655] 
2023-05-05 07:52:03:554 160 sec: 22090134 operations; 134618 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=673541, Max=50751, Min=539, Avg=2453.76, 90=3387, 99=13167, 99.9=18895, 99.99=26639] [UPDATE: Count=671780, Max=48575, Min=484, Avg=2001.7, 90=2907, 99=5511, 99.9=9079, 99.99=21055] 
2023-05-05 07:52:13:553 170 sec: 23432403 operations; 134226.9 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=670777, Max=34175, Min=554, Avg=2456.89, 90=3377, 99=13119, 99.9=18895, 99.99=22159] [UPDATE: Count=673353, Max=21375, Min=501, Avg=2006.6, 90=2915, 99=5355, 99.9=8943, 99.99=13743] 
2023-05-05 07:52:23:555 180 sec: 24759636 operations; 132696.76 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=663983, Max=47999, Min=524, Avg=2488.12, 90=3459, 99=13303, 99.9=18879, 99.99=27311] [UPDATE: Count=662361, Max=28127, Min=483, Avg=2028.37, 90=2955, 99=5695, 99.9=9519, 99.99=20543] 
2023-05-05 07:52:33:553 190 sec: 26097406 operations; 133803.76 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=669447, Max=26223, Min=559, Avg=2467.92, 90=3435, 99=12887, 99.9=18543, 99.99=21215] [UPDATE: Count=667335, Max=17039, Min=479, Avg=2015.57, 90=2947, 99=5355, 99.9=9167, 99.99=13951] 
2023-05-05 07:52:43:553 200 sec: 27443636 operations; 134623 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=674193, Max=56095, Min=556, Avg=2451.28, 90=3347, 99=13199, 99.9=19167, 99.99=29151] [UPDATE: Count=672801, Max=42175, Min=477, Avg=1998.6, 90=2915, 99=5599, 99.9=8919, 99.99=20943] 
2023-05-05 07:52:53:553 210 sec: 28793366 operations; 134973 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=675215, Max=26655, Min=566, Avg=2445.73, 90=3409, 99=12983, 99.9=18767, 99.99=21183] [UPDATE: Count=674674, Max=13599, Min=495, Avg=1994.71, 90=2945, 99=5267, 99.9=8847, 99.99=10663] 
2023-05-05 07:53:03:553 220 sec: 30159170 operations; 136580.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=681946, Max=48735, Min=547, Avg=2421.58, 90=3367, 99=13183, 99.9=18959, 99.99=28623] [UPDATE: Count=685549, Max=41087, Min=478, Avg=1968.07, 90=2901, 99=5555, 99.9=9327, 99.99=20703] 
2023-05-05 07:53:13:554 230 sec: 31549561 operations; 139039.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=694340, Max=30671, Min=541, Avg=2370.55, 90=3237, 99=13127, 99.9=19039, 99.99=22063] [UPDATE: Count=693136, Max=31135, Min=496, Avg=1944.91, 90=2807, 99=5531, 99.9=9423, 99.99=17919] 
2023-05-05 07:53:23:553 240 sec: 32943406 operations; 139384.5 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=697034, Max=51263, Min=573, Avg=2367.36, 90=3177, 99=13727, 99.9=20511, 99.99=29631] [UPDATE: Count=698067, Max=30959, Min=492, Avg=1929.14, 90=2729, 99=5679, 99.9=9775, 99.99=25615] 
2023-05-05 07:53:33:553 250 sec: 34363823 operations; 142041.7 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=710441, Max=30015, Min=568, Avg=2318.91, 90=3049, 99=13359, 99.9=19263, 99.99=22143] [UPDATE: Count=709954, Max=15751, Min=521, Avg=1900.91, 90=2617, 99=5535, 99.9=8911, 99.99=11639] 
2023-05-05 07:53:43:553 260 sec: 35783525 operations; 141970.2 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=709657, Max=53599, Min=533, Avg=2321.02, 90=3019, 99=13455, 99.9=19839, 99.99=28175] [UPDATE: Count=710496, Max=44351, Min=484, Avg=1901.35, 90=2585, 99=5647, 99.9=10031, 99.99=22287] 
2023-05-05 07:53:53:553 270 sec: 37212166 operations; 142864.1 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=713945, Max=27791, Min=558, Avg=2303.25, 90=2989, 99=13471, 99.9=19455, 99.99=22143] [UPDATE: Count=715035, Max=18351, Min=499, Avg=1893.08, 90=2563, 99=5491, 99.9=9183, 99.99=11983] 
2023-05-05 07:54:03:553 280 sec: 38635378 operations; 142321.2 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=711577, Max=51071, Min=515, Avg=2314.53, 90=3007, 99=13511, 99.9=19455, 99.99=27695] [UPDATE: Count=711165, Max=46655, Min=478, Avg=1897.05, 90=2563, 99=5555, 99.9=9423, 99.99=19519] 
2023-05-05 07:54:13:554 290 sec: 40057996 operations; 142261.8 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=710787, Max=33151, Min=549, Avg=2314.6, 90=3021, 99=13335, 99.9=19343, 99.99=22591] [UPDATE: Count=712287, Max=21327, Min=516, Avg=1899.21, 90=2587, 99=5627, 99.9=9303, 99.99=16271] 
2023-05-05 07:54:23:554 300 sec: 41482466 operations; 142447 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=711949, Max=51295, Min=543, Avg=2312.43, 90=3003, 99=13327, 99.9=19391, 99.99=26991] [UPDATE: Count=713048, Max=51007, Min=467, Avg=1895.72, 90=2567, 99=5443, 99.9=9279, 99.99=21359] 
2023-05-05 07:54:33:553 310 sec: 42902471 operations; 142000.5 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=710525, Max=41471, Min=559, Avg=2319.04, 90=3007, 99=13295, 99.9=19599, 99.99=25583] [UPDATE: Count=709336, Max=29055, Min=494, Avg=1901.99, 90=2573, 99=5643, 99.9=9655, 99.99=24959] 
2023-05-05 07:54:43:553 320 sec: 44311595 operations; 140912.4 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=704772, Max=55167, Min=556, Avg=2345.78, 90=3077, 99=13519, 99.9=19487, 99.99=29903] [UPDATE: Count=703289, Max=39999, Min=506, Avg=1907.54, 90=2595, 99=5559, 99.9=9367, 99.99=21615] 
2023-05-05 07:54:53:553 330 sec: 45731826 operations; 142023.1 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=709701, Max=28719, Min=575, Avg=2324.58, 90=3067, 99=13071, 99.9=19007, 99.99=21551] [UPDATE: Count=710402, Max=14415, Min=492, Avg=1896.45, 90=2611, 99=5159, 99.9=9087, 99.99=10647] 
2023-05-05 07:55:03:553 340 sec: 47152274 operations; 142044.8 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=709760, Max=53727, Min=557, Avg=2322.04, 90=3039, 99=13279, 99.9=19343, 99.99=28463] [UPDATE: Count=710932, Max=51679, Min=467, Avg=1898.06, 90=2607, 99=5367, 99.9=9455, 99.99=21855] 
2023-05-05 07:55:13:554 350 sec: 48568528 operations; 141625.4 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=708036, Max=60191, Min=577, Avg=2332.88, 90=3011, 99=15007, 99.9=22719, 99.99=27679] [UPDATE: Count=708888, Max=45119, Min=471, Avg=1900.12, 90=2585, 99=6235, 99.9=11223, 99.99=22127] 
2023-05-05 07:55:23:553 360 sec: 49983782 operations; 141525.4 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=708031, Max=30959, Min=580, Avg=2337.41, 90=3039, 99=14767, 99.9=22287, 99.99=25967] [UPDATE: Count=706184, Max=17391, Min=499, Avg=1897.69, 90=2589, 99=5911, 99.9=10359, 99.99=12927] 
2023-05-05 07:55:33:554 370 sec: 51399629 operations; 141584.7 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=707922, Max=53887, Min=533, Avg=2335.09, 90=3031, 99=14455, 99.9=21391, 99.99=30543] [UPDATE: Count=709383, Max=41375, Min=471, Avg=1897.87, 90=2591, 99=5707, 99.9=9815, 99.99=21983] 
2023-05-05 07:55:43:553 380 sec: 52826903 operations; 142727.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=713991, Max=32799, Min=583, Avg=2310.55, 90=2987, 99=13951, 99.9=20623, 99.99=23615] [UPDATE: Count=711910, Max=20063, Min=499, Avg=1889.51, 90=2563, 99=5835, 99.9=9919, 99.99=16767] 
2023-05-05 07:55:53:553 390 sec: 54248999 operations; 142209.6 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=710060, Max=58399, Min=563, Avg=2321.04, 90=2991, 99=13967, 99.9=21775, 99.99=35007] [UPDATE: Count=712271, Max=29263, Min=486, Avg=1894.52, 90=2567, 99=5751, 99.9=9911, 99.99=27215] 
2023-05-05 07:56:03:553 400 sec: 55661982 operations; 141298.3 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=707274, Max=26271, Min=561, Avg=2334.3, 90=3093, 99=13335, 99.9=20047, 99.99=22719] [UPDATE: Count=706267, Max=18639, Min=493, Avg=1907.7, 90=2669, 99=5887, 99.9=9455, 99.99=12679] 
2023-05-05 07:56:13:553 410 sec: 57070936 operations; 140895.4 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=704125, Max=45407, Min=549, Avg=2344.72, 90=3099, 99=13775, 99.9=20559, 99.99=25647] [UPDATE: Count=704032, Max=37791, Min=475, Avg=1909.79, 90=2673, 99=5647, 99.9=9759, 99.99=17231] 
2023-05-05 07:56:23:553 420 sec: 58480975 operations; 141003.9 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=705524, Max=30335, Min=561, Avg=2346.64, 90=3101, 99=14167, 99.9=20847, 99.99=23407] [UPDATE: Count=704702, Max=16495, Min=503, Avg=1903.83, 90=2659, 99=5747, 99.9=9535, 99.99=11663] 
2023-05-05 07:56:33:554 430 sec: 59866475 operations; 138550 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=692892, Max=58079, Min=521, Avg=2396.09, 90=3231, 99=14663, 99.9=21455, 99.99=28095] [UPDATE: Count=692844, Max=37247, Min=469, Avg=1930.49, 90=2747, 99=5847, 99.9=10199, 99.99=21183] 
2023-05-05 07:56:43:554 440 sec: 61255781 operations; 138930.6 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=694061, Max=31919, Min=564, Avg=2389.42, 90=3205, 99=14447, 99.9=21007, 99.99=24767] [UPDATE: Count=695998, Max=16815, Min=509, Avg=1925.73, 90=2753, 99=5631, 99.9=9487, 99.99=12239] 
2023-05-05 07:56:53:553 450 sec: 62630700 operations; 137491.9 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=687999, Max=55807, Min=557, Avg=2433.33, 90=3233, 99=16623, 99.9=23471, 99.99=32687] [UPDATE: Count=684122, Max=36959, Min=484, Avg=1931.6, 90=2773, 99=5859, 99.9=10031, 99.99=25551] 
2023-05-05 07:57:03:553 460 sec: 64004001 operations; 137330.1 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=686428, Max=42687, Min=580, Avg=2428.53, 90=3303, 99=15279, 99.9=22079, 99.99=27231] [UPDATE: Count=688953, Max=25695, Min=499, Avg=1930.41, 90=2787, 99=5183, 99.9=9367, 99.99=13727] 
2023-05-05 07:57:13:553 470 sec: 65380867 operations; 137686.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=689059, Max=62495, Min=567, Avg=2414.64, 90=3237, 99=14831, 99.9=21807, 99.99=48991] [UPDATE: Count=687815, Max=51263, Min=501, Avg=1938.81, 90=2775, 99=5279, 99.9=10191, 99.99=48703] 
2023-05-05 07:57:23:554 480 sec: 66763409 operations; 138254.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=691955, Max=27967, Min=585, Avg=2396.1, 90=3227, 99=14359, 99.9=20703, 99.99=23615] [UPDATE: Count=690873, Max=21295, Min=495, Avg=1941.07, 90=2771, 99=5839, 99.9=9463, 99.99=12527] 
2023-05-05 07:57:33:553 490 sec: 68135072 operations; 137166.3 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=685512, Max=49023, Min=545, Avg=2418.08, 90=3227, 99=14863, 99.9=21551, 99.99=28063] [UPDATE: Count=685562, Max=35327, Min=495, Avg=1950.41, 90=2779, 99=6039, 99.9=10191, 99.99=20751] 
2023-05-05 07:57:43:553 500 sec: 69514394 operations; 137932.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=689961, Max=30799, Min=574, Avg=2402.38, 90=3215, 99=14591, 99.9=21423, 99.99=25039] [UPDATE: Count=688522, Max=19919, Min=513, Avg=1945.72, 90=2775, 99=5655, 99.9=9767, 99.99=14119] 
2023-05-05 07:57:53:553 510 sec: 70877426 operations; 136303.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=681818, Max=54079, Min=582, Avg=2432.1, 90=3269, 99=14919, 99.9=21583, 99.99=28367] [UPDATE: Count=682913, Max=42847, Min=472, Avg=1963.62, 90=2803, 99=6059, 99.9=10255, 99.99=20015] 
2023-05-05 07:58:03:553 520 sec: 72247935 operations; 137050.9 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=685886, Max=27519, Min=578, Avg=2419.63, 90=3301, 99=14311, 99.9=20239, 99.99=23407] [UPDATE: Count=684372, Max=17679, Min=496, Avg=1954.28, 90=2813, 99=5635, 99.9=9335, 99.99=12743] 
2023-05-05 07:58:13:553 530 sec: 73606955 operations; 135902 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=679846, Max=47455, Min=551, Avg=2437.84, 90=3351, 99=13887, 99.9=20223, 99.99=27487] [UPDATE: Count=677154, Max=30079, Min=483, Avg=1974.88, 90=2849, 99=5691, 99.9=9647, 99.99=23183] 
2023-05-05 07:58:23:553 540 sec: 74954649 operations; 134769.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=674221, Max=52799, Min=557, Avg=2459.05, 90=3375, 99=13911, 99.9=20559, 99.99=28495] [UPDATE: Count=674782, Max=29631, Min=491, Avg=1985.71, 90=2867, 99=5763, 99.9=9759, 99.99=21359] 
2023-05-05 07:58:33:553 550 sec: 76291575 operations; 133692.6 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=667895, Max=30095, Min=578, Avg=2486.66, 90=3441, 99=14503, 99.9=21151, 99.99=24783] [UPDATE: Count=668949, Max=19055, Min=498, Avg=1998.02, 90=2869, 99=5931, 99.9=9887, 99.99=12823] 
2023-05-05 07:58:43:554 560 sec: 77637034 operations; 134545.9 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=671392, Max=48031, Min=588, Avg=2473.23, 90=3439, 99=14207, 99.9=20623, 99.99=26127] [UPDATE: Count=675204, Max=29375, Min=490, Avg=1983.25, 90=2877, 99=5735, 99.9=9911, 99.99=19231] 
2023-05-05 07:58:53:554 570 sec: 78982567 operations; 134553.3 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=672969, Max=35743, Min=581, Avg=2468.12, 90=3367, 99=15383, 99.9=23087, 99.99=26879] [UPDATE: Count=672318, Max=20287, Min=510, Avg=1986.6, 90=2859, 99=6255, 99.9=11103, 99.99=14255] 
2023-05-05 07:59:03:559 580 sec: 80331021 operations; 134764.54 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=673670, Max=49471, Min=505, Avg=2462.12, 90=3365, 99=14807, 99.9=22383, 99.99=28447] [UPDATE: Count=674596, Max=29231, Min=487, Avg=1985.74, 90=2861, 99=6167, 99.9=10903, 99.99=23215] 
2023-05-05 07:59:13:553 590 sec: 81682592 operations; 135238.24 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=676622, Max=27823, Min=565, Avg=2456.85, 90=3377, 99=14383, 99.9=20895, 99.99=23663] [UPDATE: Count=674258, Max=14655, Min=504, Avg=1976.06, 90=2863, 99=5611, 99.9=9343, 99.99=11423] 
2023-05-05 07:59:23:553 600 sec: 83029182 operations; 134659 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=673493, Max=52991, Min=570, Avg=2467.44, 90=3379, 99=14703, 99.9=21295, 99.99=28527] [UPDATE: Count=674213, Max=29455, Min=459, Avg=1984.41, 90=2855, 99=6003, 99.9=9631, 99.99=22175] 
2023-05-05 07:59:33:553 610 sec: 84375317 operations; 134613.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=672754, Max=34015, Min=561, Avg=2465.66, 90=3367, 99=14535, 99.9=21263, 99.99=24959] [UPDATE: Count=672215, Max=26751, Min=512, Avg=1987.46, 90=2851, 99=5843, 99.9=9935, 99.99=17487] 
2023-05-05 07:59:43:553 620 sec: 85721045 operations; 134572.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=672131, Max=44223, Min=552, Avg=2463.94, 90=3347, 99=14639, 99.9=21503, 99.99=26239] [UPDATE: Count=671926, Max=36927, Min=478, Avg=1995.45, 90=2835, 99=5927, 99.9=10047, 99.99=25439] 
2023-05-05 07:59:53:553 630 sec: 87072417 operations; 135137.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=675107, Max=35647, Min=590, Avg=2455.27, 90=3323, 99=14671, 99.9=21391, 99.99=25999] [UPDATE: Count=677870, Max=35903, Min=509, Avg=1976.9, 90=2817, 99=4983, 99.9=9415, 99.99=12119] 
2023-05-05 08:00:03:554 640 sec: 88423958 operations; 135154.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=675788, Max=52639, Min=561, Avg=2458.21, 90=3353, 99=14887, 99.9=21935, 99.99=26959] [UPDATE: Count=677132, Max=49247, Min=493, Avg=1977.1, 90=2815, 99=5231, 99.9=10119, 99.99=22703] 
2023-05-05 08:00:13:553 650 sec: 89774186 operations; 135022.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=675256, Max=29455, Min=582, Avg=2455.9, 90=3361, 99=14527, 99.9=21327, 99.99=24671] [UPDATE: Count=673787, Max=18223, Min=481, Avg=1983.46, 90=2819, 99=5367, 99.9=9791, 99.99=12263] 
2023-05-05 08:00:23:553 660 sec: 91126384 operations; 135219.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=675268, Max=44639, Min=538, Avg=2453.47, 90=3327, 99=14839, 99.9=21919, 99.99=27711] [UPDATE: Count=677367, Max=37695, Min=493, Avg=1980.11, 90=2779, 99=5931, 99.9=10279, 99.99=19871] 
2023-05-05 08:00:33:553 670 sec: 92489624 operations; 136324 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=683496, Max=27423, Min=591, Avg=2429.36, 90=3263, 99=14679, 99.9=21439, 99.99=24479] [UPDATE: Count=679008, Max=15807, Min=496, Avg=1966.67, 90=2741, 99=5859, 99.9=9743, 99.99=12039] 
2023-05-05 08:00:43:553 680 sec: 93843946 operations; 135432.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677759, Max=50271, Min=526, Avg=2448.53, 90=3279, 99=14935, 99.9=21967, 99.99=28271] [UPDATE: Count=676523, Max=41439, Min=500, Avg=1978.16, 90=2745, 99=6155, 99.9=10703, 99.99=21663] 
2023-05-05 08:00:53:553 690 sec: 95205534 operations; 136158.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=681425, Max=31487, Min=583, Avg=2433.18, 90=3269, 99=14655, 99.9=21375, 99.99=24879] [UPDATE: Count=680331, Max=21759, Min=526, Avg=1968.08, 90=2739, 99=5967, 99.9=10039, 99.99=15431] 
2023-05-05 08:01:03:553 700 sec: 96568517 operations; 136298.3 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=681403, Max=46815, Min=549, Avg=2431.85, 90=3265, 99=14927, 99.9=22223, 99.99=28591] [UPDATE: Count=681751, Max=29311, Min=481, Avg=1966.2, 90=2733, 99=6015, 99.9=10471, 99.99=20463] 
2023-05-05 08:01:13:553 710 sec: 97941676 operations; 137315.9 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=686877, Max=30287, Min=593, Avg=2408.88, 90=3251, 99=14399, 99.9=21279, 99.99=24335] [UPDATE: Count=686219, Max=18751, Min=503, Avg=1956.72, 90=2727, 99=5755, 99.9=9823, 99.99=12239] 
2023-05-05 08:01:23:553 720 sec: 99296153 operations; 135447.7 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=676360, Max=57023, Min=564, Avg=2442.02, 90=3289, 99=14303, 99.9=21311, 99.99=29247] [UPDATE: Count=678175, Max=43871, Min=505, Avg=1984.11, 90=2763, 99=6091, 99.9=10351, 99.99=20815] 
2023-05-05 08:01:33:553 730 sec: 100645901 operations; 134974.8 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=674667, Max=52479, Min=574, Avg=2455.2, 90=3225, 99=16687, 99.9=25183, 99.99=30815] [UPDATE: Count=675073, Max=46559, Min=467, Avg=1986.11, 90=2729, 99=6759, 99.9=13959, 99.99=27711] 
2023-05-05 08:01:43:553 740 sec: 101999764 operations; 135386.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=677266, Max=39135, Min=579, Avg=2450.61, 90=3241, 99=16055, 99.9=24303, 99.99=28415] [UPDATE: Count=676466, Max=27711, Min=519, Avg=1976.73, 90=2735, 99=6395, 99.9=11335, 99.99=18111] 
2023-05-05 08:01:53:553 750 sec: 103359269 operations; 135950.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=678621, Max=53055, Min=537, Avg=2436.92, 90=3225, 99=14879, 99.9=22303, 99.99=28879] [UPDATE: Count=681047, Max=28191, Min=503, Avg=1973.21, 90=2717, 99=6059, 99.9=10239, 99.99=20431] 
2023-05-05 08:02:03:553 760 sec: 104732142 operations; 137287.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=686579, Max=31007, Min=571, Avg=2409.37, 90=3159, 99=14855, 99.9=22095, 99.99=25247] [UPDATE: Count=686144, Max=20223, Min=509, Avg=1957.21, 90=2669, 99=6027, 99.9=10319, 99.99=16639] 
2023-05-05 08:02:13:553 770 sec: 106090738 operations; 135859.6 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=679150, Max=50399, Min=561, Avg=2435.54, 90=3223, 99=14919, 99.9=22319, 99.99=29327] [UPDATE: Count=679624, Max=27759, Min=492, Avg=1976.63, 90=2721, 99=6107, 99.9=10087, 99.99=21727] 
2023-05-05 08:02:23:553 780 sec: 107452907 operations; 136216.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=680625, Max=31215, Min=559, Avg=2418.15, 90=3211, 99=14639, 99.9=21631, 99.99=24927] [UPDATE: Count=681485, Max=17791, Min=507, Avg=1983.08, 90=2735, 99=5659, 99.9=9791, 99.99=12095] 
2023-05-05 08:02:33:553 790 sec: 108810112 operations; 135720.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=678295, Max=52511, Min=529, Avg=2428, 90=3233, 99=14791, 99.9=21791, 99.99=27119] [UPDATE: Count=678445, Max=29663, Min=516, Avg=1989.68, 90=2751, 99=6195, 99.9=9943, 99.99=21743] 
2023-05-05 08:02:43:553 800 sec: 110169588 operations; 135947.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=679666, Max=28479, Min=565, Avg=2427.5, 90=3239, 99=14711, 99.9=21471, 99.99=24367] [UPDATE: Count=680103, Max=22927, Min=483, Avg=1981.35, 90=2769, 99=5655, 99.9=9879, 99.99=11935] 
2023-05-05 08:02:53:553 810 sec: 111489574 operations; 131998.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=659296, Max=121151, Min=565, Avg=2505.11, 90=3289, 99=14783, 99.9=22495, 99.99=108351] [UPDATE: Count=659297, Max=110463, Min=479, Avg=2041.28, 90=2795, 99=6043, 99.9=11679, 99.99=108095] 
2023-05-05 08:03:03:553 820 sec: 112812340 operations; 132276.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=661875, Max=40575, Min=586, Avg=2500.11, 90=3341, 99=14167, 99.9=20351, 99.99=24735] [UPDATE: Count=662336, Max=31647, Min=500, Avg=2027.13, 90=2819, 99=5619, 99.9=9783, 99.99=13191] 
2023-05-05 08:03:13:553 830 sec: 114135725 operations; 132338.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=661537, Max=55327, Min=565, Avg=2503.42, 90=3375, 99=13959, 99.9=20303, 99.99=28239] [UPDATE: Count=661800, Max=41087, Min=508, Avg=2026.63, 90=2825, 99=5711, 99.9=9183, 99.99=23151] 
2023-05-05 08:03:23:553 840 sec: 115467864 operations; 133213.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=666116, Max=31951, Min=554, Avg=2490.02, 90=3337, 99=14359, 99.9=20687, 99.99=23855] [UPDATE: Count=666121, Max=18895, Min=513, Avg=2009.66, 90=2785, 99=5651, 99.9=9767, 99.99=11711] 
2023-05-05 08:03:33:553 850 sec: 116800810 operations; 133294.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=667005, Max=54143, Min=564, Avg=2484.79, 90=3277, 99=14559, 99.9=21135, 99.99=27871] [UPDATE: Count=667077, Max=32191, Min=508, Avg=2012.38, 90=2761, 99=6071, 99.9=9759, 99.99=21231] 
2023-05-05 08:03:43:553 860 sec: 118136492 operations; 133568.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=668914, Max=26703, Min=564, Avg=2471.35, 90=3271, 99=13615, 99.9=20287, 99.99=23087] [UPDATE: Count=665389, Max=16655, Min=503, Avg=2016.12, 90=2763, 99=5907, 99.9=9591, 99.99=14095] 
2023-05-05 08:03:53:553 870 sec: 119472454 operations; 133596.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=668850, Max=52511, Min=562, Avg=2471.18, 90=3253, 99=13855, 99.9=20543, 99.99=31135] [UPDATE: Count=668547, Max=48927, Min=497, Avg=2016.66, 90=2749, 99=5967, 99.9=10199, 99.99=22047] 
2023-05-05 08:04:03:553 880 sec: 120822172 operations; 134971.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=674552, Max=27455, Min=578, Avg=2446.2, 90=3235, 99=14015, 99.9=20575, 99.99=23407] [UPDATE: Count=673805, Max=18239, Min=498, Avg=1993.94, 90=2751, 99=5739, 99.9=9471, 99.99=12663] 
2023-05-05 08:04:13:553 890 sec: 122180454 operations; 135828.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=678892, Max=50623, Min=554, Avg=2428.66, 90=3213, 99=13583, 99.9=20303, 99.99=27215] [UPDATE: Count=681427, Max=42367, Min=480, Avg=1984.84, 90=2727, 99=5863, 99.9=9799, 99.99=22863] 
2023-05-05 08:04:23:553 900 sec: 123541069 operations; 136061.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=680582, Max=100799, Min=596, Avg=2420.66, 90=3185, 99=13551, 99.9=20559, 99.99=91263] [UPDATE: Count=678152, Max=99455, Min=492, Avg=1984.76, 90=2705, 99=5727, 99.9=9615, 99.99=88575] 
2023-05-05 08:04:33:553 910 sec: 124890215 operations; 134914.6 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=675055, Max=56351, Min=547, Avg=2444.28, 90=3239, 99=14015, 99.9=21071, 99.99=44735] [UPDATE: Count=674164, Max=49439, Min=482, Avg=1998.18, 90=2751, 99=6063, 99.9=10247, 99.99=44063] 
2023-05-05 08:04:43:553 920 sec: 126243622 operations; 135340.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=676297, Max=46975, Min=543, Avg=2435.25, 90=3243, 99=13751, 99.9=20879, 99.99=26863] [UPDATE: Count=677018, Max=42015, Min=499, Avg=1994.3, 90=2749, 99=5823, 99.9=9887, 99.99=24815] 
2023-05-05 08:04:53:554 930 sec: 127599349 operations; 135572.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=678696, Max=33727, Min=561, Avg=2436.11, 90=3233, 99=14767, 99.9=23311, 99.99=27519] [UPDATE: Count=677227, Max=19599, Min=493, Avg=1985, 90=2765, 99=6155, 99.9=10951, 99.99=14327] 
2023-05-05 08:05:03:553 940 sec: 128936176 operations; 133682.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=668688, Max=56351, Min=540, Avg=2481.51, 90=3259, 99=16751, 99.9=25167, 99.99=32447] [UPDATE: Count=668838, Max=29855, Min=478, Avg=2002.48, 90=2797, 99=6439, 99.9=11839, 99.99=19743] 
2023-05-05 08:05:13:553 950 sec: 130267179 operations; 133100.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=665684, Max=30799, Min=591, Avg=2485.41, 90=3317, 99=14775, 99.9=22095, 99.99=25695] [UPDATE: Count=664960, Max=16687, Min=494, Avg=2018.89, 90=2831, 99=6059, 99.9=10199, 99.99=12863] 
2023-05-05 08:05:23:553 960 sec: 131585481 operations; 131830.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=658734, Max=38911, Min=562, Avg=2508.11, 90=3327, 99=14679, 99.9=21935, 99.99=27503] [UPDATE: Count=658959, Max=30751, Min=499, Avg=2039.49, 90=2821, 99=6111, 99.9=9975, 99.99=19807] 
2023-05-05 08:05:33:553 970 sec: 132910944 operations; 132546.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=662631, Max=30815, Min=515, Avg=2497.23, 90=3333, 99=14623, 99.9=21855, 99.99=25039] [UPDATE: Count=661045, Max=33855, Min=529, Avg=2030.59, 90=2817, 99=6135, 99.9=10647, 99.99=20719] 
2023-05-05 08:05:43:553 980 sec: 134223200 operations; 131225.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=655287, Max=52959, Min=574, Avg=2523.01, 90=3357, 99=15047, 99.9=22335, 99.99=30383] [UPDATE: Count=659489, Max=49631, Min=515, Avg=2040.82, 90=2837, 99=6171, 99.9=10495, 99.99=21807] 
2023-05-05 08:05:53:553 990 sec: 135543213 operations; 132001.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=660033, Max=33727, Min=578, Avg=2505.91, 90=3333, 99=14767, 99.9=21839, 99.99=25199] [UPDATE: Count=659307, Max=20991, Min=500, Avg=2035.34, 90=2845, 99=6159, 99.9=10295, 99.99=17279] 
2023-05-05 08:06:03:553 1000 sec: 136862667 operations; 131945.4 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=659436, Max=44191, Min=542, Avg=2511.27, 90=3341, 99=14887, 99.9=22479, 99.99=27695] [UPDATE: Count=660054, Max=29311, Min=510, Avg=2032.37, 90=2827, 99=6091, 99.9=10511, 99.99=18927] 
2023-05-05 08:06:13:553 1010 sec: 138195875 operations; 133320.8 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=666846, Max=29743, Min=555, Avg=2489.28, 90=3369, 99=14927, 99.9=22143, 99.99=25567] [UPDATE: Count=666499, Max=18511, Min=502, Avg=2006.85, 90=2813, 99=5831, 99.9=10023, 99.99=12247] 
2023-05-05 08:06:23:553 1020 sec: 139534936 operations; 133906.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=669709, Max=53023, Min=560, Avg=2474.02, 90=3397, 99=14903, 99.9=22399, 99.99=27439] [UPDATE: Count=669568, Max=27999, Min=499, Avg=2002.93, 90=2845, 99=6291, 99.9=10511, 99.99=20335] 
2023-05-05 08:06:33:553 1030 sec: 140867125 operations; 133218.9 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=665551, Max=31999, Min=543, Avg=2489.77, 90=3425, 99=14799, 99.9=22351, 99.99=25951] [UPDATE: Count=667219, Max=16767, Min=499, Avg=2010.61, 90=2871, 99=5803, 99.9=9911, 99.99=12551] 
2023-05-05 08:06:43:553 1040 sec: 142173728 operations; 130660.3 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=653030, Max=52255, Min=574, Avg=2536.09, 90=3481, 99=15007, 99.9=22767, 99.99=29935] [UPDATE: Count=651239, Max=34559, Min=497, Avg=2056.3, 90=2923, 99=6411, 99.9=11519, 99.99=26911] 
2023-05-05 08:06:53:553 1050 sec: 143468688 operations; 129496 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=648163, Max=30655, Min=569, Avg=2554.62, 90=3533, 99=14791, 99.9=22047, 99.99=25615] [UPDATE: Count=649291, Max=23103, Min=492, Avg=2070.77, 90=2957, 99=6023, 99.9=9983, 99.99=12487] 
2023-05-05 08:07:03:553 1060 sec: 144771239 operations; 130255.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=651386, Max=51071, Min=535, Avg=2545.65, 90=3519, 99=15135, 99.9=22863, 99.99=29391] [UPDATE: Count=651051, Max=29423, Min=476, Avg=2056.54, 90=2965, 99=6227, 99.9=10575, 99.99=23551] 
2023-05-05 08:07:13:553 1070 sec: 146095495 operations; 132425.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=661535, Max=30575, Min=565, Avg=2497.69, 90=3423, 99=14831, 99.9=22271, 99.99=25631] [UPDATE: Count=661648, Max=20159, Min=503, Avg=2029.1, 90=2945, 99=5763, 99.9=10239, 99.99=12359] 
2023-05-05 08:07:23:553 1080 sec: 147409343 operations; 131384.8 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=656353, Max=51167, Min=560, Avg=2521.47, 90=3461, 99=15055, 99.9=22623, 99.99=28751] [UPDATE: Count=657495, Max=41183, Min=466, Avg=2044.82, 90=2985, 99=6123, 99.9=10935, 99.99=21023] 
2023-05-05 08:07:33:553 1090 sec: 148720874 operations; 131153.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=655836, Max=38367, Min=557, Avg=2524.61, 90=3461, 99=15079, 99.9=22303, 99.99=25599] [UPDATE: Count=655801, Max=22383, Min=508, Avg=2043.03, 90=2973, 99=6067, 99.9=10263, 99.99=13375] 
2023-05-05 08:07:43:553 1100 sec: 150037579 operations; 131670.5 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=657904, Max=52351, Min=568, Avg=2517.58, 90=3509, 99=15183, 99.9=23215, 99.99=27791] [UPDATE: Count=657536, Max=27567, Min=498, Avg=2038.74, 90=2981, 99=6327, 99.9=10967, 99.99=21663] 
2023-05-05 08:07:53:553 1110 sec: 151350188 operations; 131260.9 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=655970, Max=47935, Min=555, Avg=2529.81, 90=3485, 99=16719, 99.9=25791, 99.99=31023] [UPDATE: Count=657031, Max=35839, Min=502, Avg=2036.4, 90=3009, 99=6675, 99.9=12447, 99.99=21055] 
2023-05-05 08:08:03:553 1120 sec: 152674848 operations; 132466 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=662004, Max=49087, Min=577, Avg=2511.21, 90=3425, 99=17423, 99.9=26191, 99.99=31375] [UPDATE: Count=663588, Max=34847, Min=487, Avg=2012.39, 90=2953, 99=6459, 99.9=11783, 99.99=29103] 
2023-05-05 08:08:13:553 1130 sec: 154019502 operations; 134465.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=673079, Max=55711, Min=564, Avg=2465.16, 90=3341, 99=15495, 99.9=23167, 99.99=30959] [UPDATE: Count=672356, Max=34015, Min=502, Avg=1992.45, 90=2867, 99=6235, 99.9=11031, 99.99=23183] 
2023-05-05 08:08:23:553 1140 sec: 155378628 operations; 135912.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=680775, Max=31727, Min=568, Avg=2436.02, 90=3309, 99=15055, 99.9=22367, 99.99=25599] [UPDATE: Count=677398, Max=17727, Min=497, Avg=1973.78, 90=2841, 99=6187, 99.9=10639, 99.99=15247] 
2023-05-05 08:08:33:553 1150 sec: 156748625 operations; 136999.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=685265, Max=53567, Min=552, Avg=2416.88, 90=3273, 99=15159, 99.9=22847, 99.99=29999] [UPDATE: Count=685221, Max=27919, Min=503, Avg=1958.3, 90=2807, 99=6075, 99.9=10567, 99.99=19919] 
2023-05-05 08:08:43:553 1160 sec: 158128129 operations; 137950.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=690032, Max=37727, Min=506, Avg=2396.76, 90=3193, 99=15287, 99.9=23103, 99.99=26463] [UPDATE: Count=688482, Max=26687, Min=520, Avg=1950.18, 90=2729, 99=6403, 99.9=11287, 99.99=23407] 
2023-05-05 08:08:53:553 1170 sec: 159518598 operations; 139046.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=695546, Max=61343, Min=564, Avg=2380.93, 90=3181, 99=14407, 99.9=20399, 99.99=32399] [UPDATE: Count=695685, Max=52191, Min=483, Avg=1927.94, 90=2707, 99=5619, 99.9=9599, 99.99=22159] 
2023-05-05 08:09:03:553 1180 sec: 160911172 operations; 139257.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=697290, Max=28751, Min=555, Avg=2376.91, 90=3197, 99=13743, 99.9=19919, 99.99=22735] [UPDATE: Count=695184, Max=18239, Min=507, Avg=1927.26, 90=2715, 99=5447, 99.9=9447, 99.99=13031] 
2023-05-05 08:09:13:553 1190 sec: 162295475 operations; 138430.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=691946, Max=56543, Min=564, Avg=2389.41, 90=3239, 99=13423, 99.9=19679, 99.99=29999] [UPDATE: Count=691146, Max=29055, Min=495, Avg=1943, 90=2771, 99=5587, 99.9=9639, 99.99=22447] 
2023-05-05 08:09:23:553 1200 sec: 163671742 operations; 137626.7 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=687823, Max=33535, Min=566, Avg=2402.62, 90=3295, 99=13407, 99.9=19343, 99.99=22223] [UPDATE: Count=690593, Max=23119, Min=497, Avg=1950.92, 90=2799, 99=5467, 99.9=9367, 99.99=12663] 
2023-05-05 08:09:33:553 1210 sec: 165033864 operations; 136212.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=681260, Max=54687, Min=567, Avg=2441.07, 90=3369, 99=14263, 99.9=20543, 99.99=27807] [UPDATE: Count=679986, Max=34911, Min=481, Avg=1959.74, 90=2821, 99=5675, 99.9=10407, 99.99=23567] 
2023-05-05 08:09:43:553 1220 sec: 166412126 operations; 137826.2 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=688826, Max=26095, Min=573, Avg=2411.3, 90=3285, 99=14271, 99.9=20351, 99.99=23231] [UPDATE: Count=689179, Max=18575, Min=515, Avg=1939.05, 90=2773, 99=5511, 99.9=9495, 99.99=12327] 
2023-05-05 08:09:53:553 1230 sec: 167798509 operations; 138638.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=693122, Max=48543, Min=569, Avg=2388.18, 90=3221, 99=13711, 99.9=20015, 99.99=26367] [UPDATE: Count=693420, Max=44895, Min=505, Avg=1935.11, 90=2727, 99=5351, 99.9=9767, 99.99=20015] 
2023-05-05 08:10:03:553 1240 sec: 169195806 operations; 139729.7 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=698375, Max=30511, Min=568, Avg=2362.93, 90=3153, 99=13519, 99.9=19567, 99.99=22927] [UPDATE: Count=698936, Max=19759, Min=494, Avg=1927.35, 90=2679, 99=5847, 99.9=9775, 99.99=16863] 
2023-05-05 08:10:13:553 1250 sec: 170600924 operations; 140511.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=702941, Max=41855, Min=554, Avg=2347.46, 90=3123, 99=13503, 99.9=19759, 99.99=27359] [UPDATE: Count=702048, Max=35039, Min=473, Avg=1918.59, 90=2651, 99=5395, 99.9=9991, 99.99=22751] 
2023-05-05 08:10:23:553 1260 sec: 172002141 operations; 140121.7 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=699799, Max=81663, Min=581, Avg=2353.07, 90=3087, 99=13743, 99.9=20671, 99.99=71295] [UPDATE: Count=701630, Max=75199, Min=516, Avg=1925.24, 90=2621, 99=5563, 99.9=9847, 99.99=70719] 
2023-05-05 08:10:33:553 1270 sec: 173412230 operations; 141008.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=704939, Max=54911, Min=566, Avg=2337.35, 90=3081, 99=13375, 99.9=20127, 99.99=27839] [UPDATE: Count=705119, Max=41119, Min=482, Avg=1913.97, 90=2623, 99=5883, 99.9=9383, 99.99=19343] 
2023-05-05 08:10:43:553 1280 sec: 174825087 operations; 141285.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=706207, Max=29599, Min=591, Avg=2330.83, 90=3053, 99=13375, 99.9=19583, 99.99=23247] [UPDATE: Count=706565, Max=18879, Min=519, Avg=1912.05, 90=2605, 99=5559, 99.9=9631, 99.99=12039] 
2023-05-05 08:10:53:553 1290 sec: 176230996 operations; 140590.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=702598, Max=46175, Min=556, Avg=2346.74, 90=3079, 99=13967, 99.9=21071, 99.99=27567] [UPDATE: Count=704748, Max=42655, Min=503, Avg=1917.15, 90=2625, 99=5631, 99.9=10287, 99.99=20351] 
2023-05-05 08:11:03:553 1300 sec: 177637166 operations; 140617 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=703018, Max=50687, Min=560, Avg=2353.82, 90=3053, 99=16183, 99.9=24655, 99.99=32671] [UPDATE: Count=700158, Max=43999, Min=477, Avg=1913.69, 90=2603, 99=5991, 99.9=12807, 99.99=31103] 
2023-05-05 08:11:13:553 1310 sec: 179042029 operations; 140486.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=701920, Max=37663, Min=549, Avg=2356.58, 90=3087, 99=15175, 99.9=22287, 99.99=27775] [UPDATE: Count=704459, Max=24335, Min=485, Avg=1905.67, 90=2627, 99=5223, 99.9=10343, 99.99=17887] 
2023-05-05 08:11:23:553 1320 sec: 180442098 operations; 140006.9 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=699910, Max=49791, Min=551, Avg=2365.02, 90=3113, 99=14999, 99.9=22207, 99.99=27871] [UPDATE: Count=700314, Max=28383, Min=477, Avg=1916.38, 90=2655, 99=5771, 99.9=10343, 99.99=20527] 
2023-05-05 08:11:33:553 1330 sec: 181846571 operations; 140447.3 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=702460, Max=39967, Min=557, Avg=2353.09, 90=3085, 99=14671, 99.9=22127, 99.99=25519] [UPDATE: Count=702074, Max=26527, Min=496, Avg=1914.6, 90=2639, 99=5927, 99.9=9903, 99.99=24415] 
2023-05-05 08:11:43:553 1340 sec: 183240517 operations; 139394.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=697628, Max=56703, Min=548, Avg=2379.67, 90=3111, 99=15159, 99.9=22959, 99.99=35135] [UPDATE: Count=696352, Max=35935, Min=467, Avg=1920.78, 90=2633, 99=6123, 99.9=10463, 99.99=32383] 
2023-05-05 08:11:53:553 1350 sec: 184644537 operations; 140402 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=702040, Max=29119, Min=555, Avg=2355.65, 90=3105, 99=14543, 99.9=21615, 99.99=24607] [UPDATE: Count=701036, Max=24239, Min=492, Avg=1916.32, 90=2635, 99=5759, 99.9=10087, 99.99=16991] 
2023-05-05 08:12:03:553 1360 sec: 186047212 operations; 140267.5 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=702265, Max=55647, Min=549, Avg=2356.06, 90=3035, 99=15039, 99.9=22127, 99.99=28127] [UPDATE: Count=702518, Max=62815, Min=506, Avg=1914.12, 90=2577, 99=6071, 99.9=10455, 99.99=21551] 
2023-05-05 08:12:13:553 1370 sec: 187450268 operations; 140305.6 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=701418, Max=41503, Min=544, Avg=2354.47, 90=3041, 99=14887, 99.9=22335, 99.99=25679] [UPDATE: Count=700311, Max=30783, Min=493, Avg=1918.23, 90=2573, 99=6007, 99.9=10623, 99.99=23871] 
2023-05-05 08:12:23:553 1380 sec: 188851031 operations; 140076.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=699703, Max=53023, Min=577, Avg=2358.39, 90=3027, 99=15055, 99.9=22671, 99.99=37887] [UPDATE: Count=701178, Max=42367, Min=492, Avg=1921.47, 90=2569, 99=5791, 99.9=10895, 99.99=37311] 
2023-05-05 08:12:33:553 1390 sec: 190253705 operations; 140267.4 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=701959, Max=34975, Min=596, Avg=2355.35, 90=3055, 99=14671, 99.9=21935, 99.99=24927] [UPDATE: Count=702312, Max=25631, Min=509, Avg=1918.11, 90=2579, 99=5935, 99.9=10015, 99.99=12191] 
2023-05-05 08:12:43:553 1400 sec: 191656334 operations; 140262.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=701901, Max=53727, Min=572, Avg=2356.67, 90=3035, 99=15207, 99.9=22671, 99.99=28735] [UPDATE: Count=698996, Max=45791, Min=492, Avg=1916.29, 90=2571, 99=5919, 99.9=10983, 99.99=21487] 
2023-05-05 08:12:53:553 1410 sec: 193054556 operations; 139822.2 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=698944, Max=30031, Min=566, Avg=2363.2, 90=3067, 99=14895, 99.9=22255, 99.99=25167] [UPDATE: Count=700360, Max=18591, Min=502, Avg=1924.86, 90=2587, 99=6115, 99.9=10319, 99.99=13311] 
2023-05-05 08:13:03:553 1420 sec: 194449920 operations; 139536.4 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=699306, Max=53919, Min=543, Avg=2368.44, 90=3057, 99=15111, 99.9=22783, 99.99=28639] [UPDATE: Count=695296, Max=39647, Min=489, Avg=1926.31, 90=2579, 99=6295, 99.9=10631, 99.99=20143] 
2023-05-05 08:13:13:553 1430 sec: 195860863 operations; 141094.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=704755, Max=30031, Min=587, Avg=2341.63, 90=3019, 99=14959, 99.9=22463, 99.99=26271] [UPDATE: Count=706471, Max=17359, Min=522, Avg=1907.25, 90=2563, 99=5671, 99.9=10447, 99.99=13479] 
2023-05-05 08:13:23:553 1440 sec: 197259123 operations; 139826 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=699718, Max=60831, Min=565, Avg=2366, 90=3055, 99=15207, 99.9=22591, 99.99=29039] [UPDATE: Count=698744, Max=49951, Min=501, Avg=1921.02, 90=2585, 99=5983, 99.9=10431, 99.99=21247] 
2023-05-05 08:13:33:553 1450 sec: 198658776 operations; 139965.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=700331, Max=40511, Min=542, Avg=2359.81, 90=3073, 99=14687, 99.9=21743, 99.99=25375] [UPDATE: Count=699112, Max=28591, Min=501, Avg=1922.85, 90=2591, 99=5863, 99.9=9967, 99.99=21503] 
2023-05-05 08:13:43:558 1460 sec: 200050108 operations; 139063.67 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=696540, Max=59871, Min=553, Avg=2378.49, 90=3081, 99=14951, 99.9=21903, 99.99=35295] [UPDATE: Count=694342, Max=33247, Min=479, Avg=1929, 90=2595, 99=5803, 99.9=10295, 99.99=21647] 
2023-05-05 08:13:53:553 1470 sec: 201440151 operations; 139073.84 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=694847, Max=33759, Min=565, Avg=2378.11, 90=3061, 99=15959, 99.9=24031, 99.99=28287] [UPDATE: Count=695029, Max=18783, Min=496, Avg=1934.2, 90=2585, 99=6563, 99.9=11711, 99.99=14999] 
2023-05-05 08:14:03:553 1480 sec: 202828116 operations; 138796.5 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=694936, Max=53439, Min=558, Avg=2389.58, 90=3059, 99=16863, 99.9=25023, 99.99=31135] [UPDATE: Count=693315, Max=28415, Min=503, Avg=1928.93, 90=2575, 99=6331, 99.9=12415, 99.99=21039] 
2023-05-05 08:14:13:553 1490 sec: 204224205 operations; 139608.9 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=697909, Max=57823, Min=551, Avg=2369.66, 90=3057, 99=15023, 99.9=22127, 99.99=29183] [UPDATE: Count=697945, Max=31711, Min=516, Avg=1923.97, 90=2581, 99=6127, 99.9=10391, 99.99=21983] 
2023-05-05 08:14:23:553 1500 sec: 205623384 operations; 139917.9 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=699784, Max=41663, Min=582, Avg=2363.35, 90=3047, 99=15095, 99.9=22303, 99.99=25935] [UPDATE: Count=699221, Max=29551, Min=514, Avg=1921.27, 90=2595, 99=5799, 99.9=10671, 99.99=24431] 
2023-05-05 08:14:33:553 1510 sec: 207023949 operations; 140056.5 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=700803, Max=58495, Min=562, Avg=2361.46, 90=3045, 99=14911, 99.9=21967, 99.99=27279] [UPDATE: Count=701243, Max=29151, Min=485, Avg=1917.8, 90=2599, 99=6003, 99.9=10383, 99.99=21167] 
2023-05-05 08:14:43:553 1520 sec: 208430525 operations; 140657.6 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=703314, Max=29455, Min=568, Avg=2352.62, 90=3035, 99=14687, 99.9=21311, 99.99=24415] [UPDATE: Count=703184, Max=15943, Min=497, Avg=1909.82, 90=2597, 99=5635, 99.9=10079, 99.99=13023] 
2023-05-05 08:14:53:553 1530 sec: 209826275 operations; 139575 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=697565, Max=55295, Min=543, Avg=2372.74, 90=3077, 99=14975, 99.9=21695, 99.99=27407] [UPDATE: Count=694825, Max=51103, Min=479, Avg=1925.58, 90=2625, 99=6171, 99.9=10503, 99.99=24767] 
2023-05-05 08:15:03:553 1540 sec: 211213520 operations; 138724.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=693990, Max=82495, Min=565, Avg=2384.46, 90=3071, 99=14767, 99.9=22063, 99.99=65663] [UPDATE: Count=695456, Max=68735, Min=497, Avg=1931.78, 90=2621, 99=5715, 99.9=10367, 99.99=65343] 
2023-05-05 08:15:13:553 1550 sec: 212608744 operations; 139522.4 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=697318, Max=55263, Min=540, Avg=2372.67, 90=3067, 99=14887, 99.9=22191, 99.99=27919] [UPDATE: Count=698616, Max=39455, Min=475, Avg=1924.91, 90=2627, 99=6091, 99.9=10431, 99.99=21903] 
2023-05-05 08:15:23:553 1560 sec: 214008714 operations; 139997 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=700157, Max=29039, Min=582, Avg=2364.15, 90=3067, 99=14823, 99.9=21663, 99.99=24623] [UPDATE: Count=699000, Max=19071, Min=487, Avg=1916.62, 90=2619, 99=5687, 99.9=10335, 99.99=13695] 
2023-05-05 08:15:33:553 1570 sec: 215390830 operations; 138211.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=691123, Max=54175, Min=523, Avg=2394.7, 90=3097, 99=15215, 99.9=22687, 99.99=32479] [UPDATE: Count=692775, Max=47167, Min=484, Avg=1942.84, 90=2649, 99=6283, 99.9=11431, 99.99=31071] 
2023-05-05 08:15:43:553 1580 sec: 216785961 operations; 139513.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=698792, Max=32239, Min=558, Avg=2370.21, 90=3085, 99=14831, 99.9=21759, 99.99=25007] [UPDATE: Count=694595, Max=18959, Min=509, Avg=1925.14, 90=2641, 99=5867, 99.9=10111, 99.99=16375] 
2023-05-05 08:15:53:553 1590 sec: 218162785 operations; 137682.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=688073, Max=52223, Min=563, Avg=2402.88, 90=3135, 99=14895, 99.9=22127, 99.99=28831] [UPDATE: Count=689453, Max=29087, Min=517, Avg=1951.82, 90=2709, 99=5979, 99.9=10135, 99.99=20975] 
2023-05-05 08:16:03:553 1600 sec: 219542807 operations; 138002.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=689852, Max=31663, Min=534, Avg=2395.38, 90=3123, 99=14815, 99.9=22111, 99.99=25375] [UPDATE: Count=690877, Max=20447, Min=511, Avg=1948.05, 90=2697, 99=6091, 99.9=10103, 99.99=13879] 
2023-05-05 08:16:13:553 1610 sec: 220922013 operations; 137920.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=689274, Max=50239, Min=550, Avg=2401.2, 90=3155, 99=14847, 99.9=22063, 99.99=27423] [UPDATE: Count=688242, Max=30879, Min=478, Avg=1947.83, 90=2697, 99=6087, 99.9=10391, 99.99=23311] 
2023-05-05 08:16:23:553 1620 sec: 222307470 operations; 138545.7 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=693425, Max=30399, Min=572, Avg=2389.84, 90=3133, 99=14863, 99.9=22079, 99.99=26095] [UPDATE: Count=692751, Max=20543, Min=505, Avg=1933.93, 90=2669, 99=6067, 99.9=10039, 99.99=13519] 
2023-05-05 08:16:33:553 1630 sec: 223689159 operations; 138168.9 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=689744, Max=55647, Min=552, Avg=2395.78, 90=3123, 99=15143, 99.9=22447, 99.99=28319] [UPDATE: Count=692135, Max=28639, Min=479, Avg=1943.69, 90=2681, 99=6175, 99.9=10815, 99.99=22415] 
2023-05-05 08:16:43:553 1640 sec: 225059437 operations; 137027.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=684741, Max=29551, Min=582, Avg=2415.07, 90=3157, 99=14991, 99.9=22015, 99.99=25471] [UPDATE: Count=684737, Max=16959, Min=511, Avg=1959.43, 90=2707, 99=6215, 99.9=10087, 99.99=12623] 
2023-05-05 08:16:53:553 1650 sec: 226416426 operations; 135698.9 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=678094, Max=52863, Min=575, Avg=2439.85, 90=3185, 99=15311, 99.9=23279, 99.99=29743] [UPDATE: Count=679934, Max=50751, Min=504, Avg=1977.83, 90=2733, 99=6247, 99.9=10999, 99.99=20015] 
2023-05-05 08:17:03:553 1660 sec: 227760705 operations; 134427.9 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=671915, Max=34591, Min=546, Avg=2470.95, 90=3231, 99=16735, 99.9=25999, 99.99=30207] [UPDATE: Count=671265, Max=23119, Min=504, Avg=1989.24, 90=2749, 99=6655, 99.9=12031, 99.99=15807] 
2023-05-05 08:17:13:553 1670 sec: 229121436 operations; 136073.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=679341, Max=49151, Min=547, Avg=2443.98, 90=3219, 99=16095, 99.9=23839, 99.99=28959] [UPDATE: Count=682711, Max=35359, Min=486, Avg=1961.62, 90=2713, 99=6019, 99.9=10407, 99.99=19439] 
2023-05-05 08:17:23:553 1680 sec: 230483251 operations; 136181.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=680417, Max=50495, Min=577, Avg=2441.17, 90=3225, 99=15527, 99.9=23327, 99.99=30367] [UPDATE: Count=680346, Max=35743, Min=486, Avg=1960.51, 90=2691, 99=6571, 99.9=11287, 99.99=24863] 
2023-05-05 08:17:33:553 1690 sec: 231858548 operations; 137529.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=686993, Max=33983, Min=557, Avg=2425.11, 90=3179, 99=16735, 99.9=24255, 99.99=28447] [UPDATE: Count=688209, Max=19087, Min=496, Avg=1933.99, 90=2651, 99=5931, 99.9=10247, 99.99=13671] 
2023-05-05 08:17:43:553 1700 sec: 233242518 operations; 138397 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=692356, Max=53663, Min=533, Avg=2388.56, 90=3127, 99=15079, 99.9=22383, 99.99=28991] [UPDATE: Count=691753, Max=35871, Min=505, Avg=1942.42, 90=2645, 99=6067, 99.9=9967, 99.99=21455] 
2023-05-05 08:17:53:553 1710 sec: 234632159 operations; 138964.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=695793, Max=30847, Min=546, Avg=2375.07, 90=3099, 99=15023, 99.9=22015, 99.99=25615] [UPDATE: Count=693750, Max=18271, Min=451, Avg=1938.38, 90=2637, 99=5923, 99.9=10151, 99.99=12855] 
2023-05-05 08:18:03:553 1720 sec: 236022457 operations; 139029.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=694940, Max=38527, Min=540, Avg=2375.35, 90=3085, 99=15255, 99.9=22543, 99.99=28303] [UPDATE: Count=695319, Max=44671, Min=498, Avg=1936.21, 90=2617, 99=6191, 99.9=10815, 99.99=20063] 
2023-05-05 08:18:13:553 1730 sec: 237426026 operations; 140356.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=702910, Max=29087, Min=571, Avg=2351.31, 90=3053, 99=15167, 99.9=22495, 99.99=25279] [UPDATE: Count=700858, Max=16007, Min=521, Avg=1918.34, 90=2597, 99=5879, 99.9=10223, 99.99=12463] 
2023-05-05 08:18:23:553 1740 sec: 238824584 operations; 139855.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=698810, Max=50431, Min=556, Avg=2364.32, 90=3061, 99=15447, 99.9=23215, 99.99=30159] [UPDATE: Count=699640, Max=28367, Min=486, Avg=1921.99, 90=2603, 99=6279, 99.9=10639, 99.99=21711] 
2023-05-05 08:18:33:553 1750 sec: 240234040 operations; 140945.6 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=704419, Max=35167, Min=576, Avg=2343.24, 90=3031, 99=15247, 99.9=23071, 99.99=26575] [UPDATE: Count=704963, Max=19807, Min=535, Avg=1909.75, 90=2579, 99=6131, 99.9=10495, 99.99=13519] 
2023-05-05 08:18:43:553 1760 sec: 241649959 operations; 141591.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=708266, Max=49631, Min=545, Avg=2339.65, 90=2985, 99=15103, 99.9=22767, 99.99=29135] [UPDATE: Count=707827, Max=31791, Min=488, Avg=1893.88, 90=2527, 99=6155, 99.9=10407, 99.99=19247] 
2023-05-05 08:18:53:553 1770 sec: 243058754 operations; 140879.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=704479, Max=32479, Min=574, Avg=2351.5, 90=3045, 99=14847, 99.9=22143, 99.99=25423] [UPDATE: Count=704066, Max=19583, Min=492, Avg=1903.09, 90=2567, 99=6047, 99.9=10415, 99.99=13503] 
2023-05-05 08:19:03:553 1780 sec: 244464461 operations; 140570.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=702107, Max=50335, Min=548, Avg=2359.11, 90=3047, 99=15247, 99.9=22879, 99.99=27887] [UPDATE: Count=703729, Max=31631, Min=466, Avg=1905.92, 90=2571, 99=6111, 99.9=10711, 99.99=24975] 
2023-05-05 08:19:13:553 1790 sec: 245865679 operations; 140121.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=700918, Max=31215, Min=571, Avg=2364.68, 90=3105, 99=14951, 99.9=22159, 99.99=25103] [UPDATE: Count=700202, Max=19679, Min=510, Avg=1912.91, 90=2613, 99=6095, 99.9=10311, 99.99=12343] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-05 08:19:23:553 1800 sec: 247256241 operations; 139056.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=696045, Max=49727, Min=543, Avg=2386.29, 90=3151, 99=15151, 99.9=22271, 99.99=28319] [UPDATE: Count=693151, Max=31039, Min=495, Avg=1926.65, 90=2643, 99=5919, 99.9=10415, 99.99=24095] 
Still waiting for thread Thread-250 to complete. Workload status: true
2023-05-05 08:19:25:839 1802 sec: 247259039 operations; 1224.51 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1389, Max=36639, Min=827, Avg=4480.25, 90=10599, 99=29839, 99.9=33631, 99.99=36639] [CLEANUP: Count=300, Max=2226175, Min=0, Avg=7417.95, 90=1, 99=2, 99.9=2226175, 99.99=2226175] [UPDATE: Count=23, Max=31199, Min=21920, Avg=27288.7, 90=30975, 99=31199, 99.9=31199, 99.99=31199] 
[OVERALL], RunTime(ms), 1802285
[OVERALL], Throughput(ops/sec), 137191.97518705422
[TOTAL_GCS_PS_Scavenge], Count, 3864
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18084
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0033929151049918
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 187
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.010375717491961593
[TOTAL_GCs], Count, 3867
[TOTAL_GC_TIME], Time(ms), 18271
[TOTAL_GC_TIME_%], Time(%), 1.0137686325969533
[READ], Operations, 123637412
[READ], AverageLatency(us), 2407.243450776857
[READ], MinLatency(us), 505
[READ], MaxLatency(us), 173439
[READ], 95thPercentileLatency(us), 3799
[READ], 99thPercentileLatency(us), 14399
[READ], Return=OK, 123637412
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7417.95
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 2
[UPDATE], Operations, 123621627
[UPDATE], AverageLatency(us), 1954.6939380194374
[UPDATE], MinLatency(us), 451
[UPDATE], MaxLatency(us), 180863
[UPDATE], 95thPercentileLatency(us), 3067
[UPDATE], 99thPercentileLatency(us), 5859
[UPDATE], Return=OK, 123621627
