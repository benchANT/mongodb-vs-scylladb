bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 140000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-05 07:49:24:900 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-05 07:49:34:882 10 sec: 1177855 operations; 117785.5 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=588719, Max=123583, Min=526, Avg=2574.56, 90=3171, 99=17023, 99.9=48799, 99.99=113343] [UPDATE: Count=594909, Max=125055, Min=489, Avg=2123.03, 90=2653, 99=9711, 99.9=42303, 99.99=111743] 
2023-05-05 07:49:44:881 20 sec: 2622186 operations; 144433.1 current ops/sec; est completion in 2 hours 6 minutes [READ: Count=721407, Max=39007, Min=535, Avg=2287.3, 90=2959, 99=13839, 99.9=19727, 99.99=23183] [UPDATE: Count=720143, Max=29071, Min=497, Avg=1860.73, 90=2513, 99=4435, 99.9=8527, 99.99=22639] 
2023-05-05 07:49:54:881 30 sec: 4059654 operations; 143746.8 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=719440, Max=53791, Min=540, Avg=2293.52, 90=2969, 99=13287, 99.9=19343, 99.99=27711] [UPDATE: Count=718491, Max=46847, Min=484, Avg=1876.4, 90=2525, 99=4947, 99.9=9039, 99.99=21919] 
2023-05-05 07:50:04:881 40 sec: 5485450 operations; 142579.6 current ops/sec; est completion in 2 hours [READ: Count=713444, Max=28975, Min=527, Avg=2302.02, 90=2993, 99=13199, 99.9=19279, 99.99=23583] [UPDATE: Count=712035, Max=29359, Min=488, Avg=1885.41, 90=2533, 99=5407, 99.9=9031, 99.99=18143] 
2023-05-05 07:50:14:881 50 sec: 6894519 operations; 140906.9 current ops/sec; est completion in 2 hours [READ: Count=705876, Max=55423, Min=544, Avg=2317.81, 90=3027, 99=13423, 99.9=19343, 99.99=25855] [UPDATE: Count=702798, Max=39519, Min=446, Avg=1898.66, 90=2551, 99=5875, 99.9=10943, 99.99=21167] 
2023-05-05 07:50:24:881 60 sec: 8302364 operations; 140784.5 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=703495, Max=28943, Min=575, Avg=2293.11, 90=3015, 99=13015, 99.9=18863, 99.99=21311] [UPDATE: Count=704562, Max=19087, Min=481, Avg=1880.79, 90=2541, 99=5235, 99.9=8815, 99.99=12231] 
2023-05-05 07:50:34:881 70 sec: 9701414 operations; 139905 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=698615, Max=48159, Min=530, Avg=2318.87, 90=3077, 99=13311, 99.9=19135, 99.99=26559] [UPDATE: Count=700556, Max=28543, Min=475, Avg=1895.81, 90=2595, 99=5603, 99.9=8991, 99.99=21119] 
2023-05-05 07:50:44:881 80 sec: 11099634 operations; 139822 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=699111, Max=26047, Min=568, Avg=2336.09, 90=3115, 99=13135, 99.9=18863, 99.99=21263] [UPDATE: Count=698565, Max=19023, Min=491, Avg=1909.99, 90=2621, 99=5635, 99.9=8983, 99.99=11919] 
2023-05-05 07:50:54:881 90 sec: 12495715 operations; 139608.1 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=696890, Max=38911, Min=568, Avg=2350.62, 90=3165, 99=13215, 99.9=19039, 99.99=27103] [UPDATE: Count=699305, Max=37791, Min=489, Avg=1917.14, 90=2651, 99=5439, 99.9=8887, 99.99=19759] 
2023-05-05 07:51:04:881 100 sec: 13881605 operations; 138589 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=692913, Max=37951, Min=552, Avg=2379.69, 90=3197, 99=13375, 99.9=19295, 99.99=27503] [UPDATE: Count=692701, Max=29439, Min=494, Avg=1943.56, 90=2669, 99=5719, 99.9=9519, 99.99=27231] 
2023-05-05 07:51:14:881 110 sec: 15260798 operations; 137919.3 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=689561, Max=60447, Min=564, Avg=2396.66, 90=3225, 99=13343, 99.9=19439, 99.99=49631] [UPDATE: Count=689982, Max=51359, Min=500, Avg=1948.45, 90=2685, 99=5403, 99.9=8863, 99.99=49407] 
2023-05-05 07:51:24:881 120 sec: 16644209 operations; 138341.1 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=691287, Max=28223, Min=575, Avg=2387.24, 90=3235, 99=13143, 99.9=18847, 99.99=21791] [UPDATE: Count=691946, Max=15991, Min=489, Avg=1946.04, 90=2703, 99=5303, 99.9=8623, 99.99=11527] 
2023-05-05 07:51:34:881 130 sec: 18029234 operations; 138502.5 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=692051, Max=43007, Min=523, Avg=2386.13, 90=3223, 99=13255, 99.9=19055, 99.99=27663] [UPDATE: Count=693152, Max=46111, Min=482, Avg=1942.64, 90=2715, 99=5267, 99.9=9151, 99.99=21935] 
2023-05-05 07:51:44:881 140 sec: 19398912 operations; 136967.8 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=684711, Max=51583, Min=518, Avg=2412.62, 90=3319, 99=13063, 99.9=19023, 99.99=26047] [UPDATE: Count=685019, Max=38623, Min=471, Avg=1964.11, 90=2809, 99=5491, 99.9=8887, 99.99=22223] 
2023-05-05 07:51:54:881 150 sec: 20778093 operations; 137918.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=689978, Max=25487, Min=537, Avg=2394.83, 90=3293, 99=12983, 99.9=18735, 99.99=21375] [UPDATE: Count=689019, Max=14207, Min=471, Avg=1951.82, 90=2813, 99=5371, 99.9=8687, 99.99=10311] 
2023-05-05 07:52:04:881 160 sec: 22132472 operations; 135437.9 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=677662, Max=49279, Min=514, Avg=2440.66, 90=3369, 99=13119, 99.9=18911, 99.99=26831] [UPDATE: Count=677589, Max=31807, Min=462, Avg=1985.31, 90=2881, 99=5303, 99.9=8927, 99.99=21199] 
2023-05-05 07:52:14:881 170 sec: 23484163 operations; 135169.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=676212, Max=28239, Min=555, Avg=2440.75, 90=3349, 99=12999, 99.9=18591, 99.99=21439] [UPDATE: Count=674561, Max=16399, Min=484, Avg=1994.15, 90=2897, 99=5407, 99.9=8415, 99.99=10335] 
2023-05-05 07:52:24:881 180 sec: 24821287 operations; 133712.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=668050, Max=53215, Min=520, Avg=2473.76, 90=3447, 99=13159, 99.9=18863, 99.99=27599] [UPDATE: Count=668033, Max=27103, Min=448, Avg=2012.98, 90=2941, 99=5483, 99.9=9191, 99.99=22063] 
2023-05-05 07:52:34:881 190 sec: 26167778 operations; 134649.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=672645, Max=31951, Min=503, Avg=2452.07, 90=3411, 99=12927, 99.9=18623, 99.99=21631] [UPDATE: Count=674860, Max=24543, Min=486, Avg=1997.59, 90=2931, 99=5275, 99.9=8447, 99.99=12095] 
2023-05-05 07:52:44:881 200 sec: 27527467 operations; 135968.9 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=679551, Max=54655, Min=491, Avg=2429.58, 90=3313, 99=13063, 99.9=19055, 99.99=30831] [UPDATE: Count=680161, Max=37663, Min=454, Avg=1979.69, 90=2887, 99=5263, 99.9=9471, 99.99=21087] 
2023-05-05 07:52:54:881 210 sec: 28884088 operations; 135662.1 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=677712, Max=30383, Min=553, Avg=2434.35, 90=3391, 99=12911, 99.9=18575, 99.99=21071] [UPDATE: Count=679973, Max=17535, Min=475, Avg=1985.11, 90=2931, 99=5323, 99.9=8847, 99.99=11567] 
2023-05-05 07:53:04:881 220 sec: 30263902 operations; 137981.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=690298, Max=52639, Min=504, Avg=2395.81, 90=3321, 99=13231, 99.9=19119, 99.99=26943] [UPDATE: Count=688088, Max=36319, Min=466, Avg=1950.9, 90=2869, 99=5607, 99.9=9287, 99.99=22431] 
2023-05-05 07:53:14:881 230 sec: 31667052 operations; 140315 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=700585, Max=31679, Min=527, Avg=2352.57, 90=3209, 99=13191, 99.9=19071, 99.99=22111] [UPDATE: Count=704192, Max=20271, Min=473, Avg=1917.83, 90=2773, 99=5335, 99.9=8951, 99.99=11951] 
2023-05-05 07:53:24:881 240 sec: 33078394 operations; 141134.2 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=706389, Max=48031, Min=544, Avg=2337.2, 90=3133, 99=13423, 99.9=20191, 99.99=32383] [UPDATE: Count=703929, Max=42559, Min=440, Avg=1909.27, 90=2691, 99=5615, 99.9=9527, 99.99=31055] 
2023-05-05 07:53:34:881 250 sec: 34515315 operations; 143692.1 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=718518, Max=28191, Min=540, Avg=2293.36, 90=3019, 99=13239, 99.9=19215, 99.99=22367] [UPDATE: Count=718300, Max=18479, Min=484, Avg=1878.48, 90=2583, 99=5303, 99.9=8983, 99.99=11047] 
2023-05-05 07:53:44:881 260 sec: 35953312 operations; 143799.7 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=718464, Max=53279, Min=555, Avg=2290.86, 90=2977, 99=13383, 99.9=19743, 99.99=27695] [UPDATE: Count=719641, Max=44063, Min=480, Avg=1877.75, 90=2551, 99=5543, 99.9=9551, 99.99=20607] 
2023-05-05 07:53:54:881 270 sec: 37391428 operations; 143811.6 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=720304, Max=39743, Min=544, Avg=2290.29, 90=2975, 99=13383, 99.9=19663, 99.99=29247] [UPDATE: Count=716104, Max=31487, Min=496, Avg=1880.85, 90=2539, 99=5667, 99.9=9415, 99.99=28783] 
2023-05-05 07:54:04:881 280 sec: 38820534 operations; 142910.6 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=714213, Max=52607, Min=557, Avg=2308.36, 90=2995, 99=13615, 99.9=19727, 99.99=28207] [UPDATE: Count=717213, Max=51423, Min=480, Avg=1883.12, 90=2545, 99=5711, 99.9=9671, 99.99=21791] 
2023-05-05 07:54:14:881 290 sec: 40260002 operations; 143946.8 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=720049, Max=27823, Min=565, Avg=2288.13, 90=2989, 99=13119, 99.9=19199, 99.99=22175] [UPDATE: Count=719870, Max=17471, Min=493, Avg=1876.07, 90=2561, 99=5231, 99.9=9127, 99.99=11423] 
2023-05-05 07:54:24:881 300 sec: 41696207 operations; 143620.5 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=718354, Max=51839, Min=541, Avg=2294.36, 90=2979, 99=13319, 99.9=19487, 99.99=26527] [UPDATE: Count=716997, Max=50783, Min=471, Avg=1879.24, 90=2545, 99=5587, 99.9=9207, 99.99=21663] 
2023-05-05 07:54:34:881 310 sec: 43134856 operations; 143864.9 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=718814, Max=26959, Min=571, Avg=2292.45, 90=2987, 99=13119, 99.9=19135, 99.99=21807] [UPDATE: Count=719397, Max=18031, Min=477, Avg=1874.24, 90=2549, 99=5423, 99.9=8911, 99.99=10911] 
2023-05-05 07:54:44:881 320 sec: 44560852 operations; 142599.6 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=713414, Max=42495, Min=517, Avg=2319.77, 90=3045, 99=13423, 99.9=19375, 99.99=28111] [UPDATE: Count=712623, Max=39871, Min=468, Avg=1884.12, 90=2565, 99=5351, 99.9=9111, 99.99=21791] 
2023-05-05 07:54:54:881 330 sec: 45987491 operations; 142663.9 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=713564, Max=60543, Min=518, Avg=2316.25, 90=3045, 99=13239, 99.9=19279, 99.99=26783] [UPDATE: Count=714376, Max=51295, Min=474, Avg=1884.57, 90=2589, 99=5379, 99.9=9447, 99.99=21807] 
2023-05-05 07:55:04:881 340 sec: 47420024 operations; 143253.3 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=716155, Max=28495, Min=546, Avg=2298.05, 90=3003, 99=13175, 99.9=19359, 99.99=22783] [UPDATE: Count=715746, Max=18319, Min=469, Avg=1879.77, 90=2579, 99=5431, 99.9=9959, 99.99=12607] 
2023-05-05 07:55:14:881 350 sec: 48841151 operations; 142112.7 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=712607, Max=50335, Min=519, Avg=2322.06, 90=2993, 99=15279, 99.9=23055, 99.99=28639] [UPDATE: Count=709082, Max=36511, Min=437, Avg=1882.54, 90=2567, 99=6015, 99.9=11111, 99.99=21919] 
2023-05-05 07:55:24:888 360 sec: 50263158 operations; 142101.23 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=710401, Max=31807, Min=545, Avg=2313.18, 90=3011, 99=14567, 99.9=21887, 99.99=25823] [UPDATE: Count=711324, Max=19135, Min=472, Avg=1877.25, 90=2565, 99=5595, 99.9=10127, 99.99=15087] 
2023-05-05 07:55:34:881 370 sec: 51673690 operations; 141152.01 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=705791, Max=59039, Min=565, Avg=2330.04, 90=3003, 99=14919, 99.9=21439, 99.99=29855] [UPDATE: Count=704276, Max=32927, Min=487, Avg=1890.93, 90=2571, 99=5907, 99.9=13551, 99.99=22847] 
2023-05-05 07:55:44:881 380 sec: 53090520 operations; 141683 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=708593, Max=28895, Min=543, Avg=2283.14, 90=2953, 99=13631, 99.9=20479, 99.99=23407] [UPDATE: Count=708787, Max=25503, Min=487, Avg=1863.04, 90=2533, 99=5395, 99.9=9719, 99.99=12407] 
2023-05-05 07:55:54:881 390 sec: 54496504 operations; 140598.4 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=702408, Max=57727, Min=546, Avg=2301.51, 90=2983, 99=13607, 99.9=20639, 99.99=31647] [UPDATE: Count=702591, Max=27791, Min=469, Avg=1876, 90=2555, 99=5871, 99.9=9879, 99.99=21263] 
2023-05-05 07:56:04:881 400 sec: 55898249 operations; 140174.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=701398, Max=44703, Min=535, Avg=2322.4, 90=3077, 99=13591, 99.9=20591, 99.99=29823] [UPDATE: Count=701318, Max=33407, Min=475, Avg=1895, 90=2655, 99=5795, 99.9=9503, 99.99=29375] 
2023-05-05 07:56:14:881 410 sec: 57299384 operations; 140113.5 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=699723, Max=54079, Min=543, Avg=2328.64, 90=3075, 99=13743, 99.9=20543, 99.99=28015] [UPDATE: Count=700575, Max=42943, Min=448, Avg=1892.46, 90=2653, 99=5623, 99.9=9743, 99.99=21727] 
2023-05-05 07:56:24:881 420 sec: 58698351 operations; 139896.7 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=698622, Max=29743, Min=550, Avg=2329.61, 90=3089, 99=14343, 99.9=20927, 99.99=23791] [UPDATE: Count=701160, Max=17103, Min=495, Avg=1884.34, 90=2645, 99=5587, 99.9=9367, 99.99=11511] 
2023-05-05 07:56:34:881 430 sec: 60089447 operations; 139109.6 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=696018, Max=58623, Min=540, Avg=2377.56, 90=3223, 99=14567, 99.9=21359, 99.99=28143] [UPDATE: Count=694660, Max=43359, Min=451, Avg=1911.79, 90=2747, 99=5783, 99.9=9639, 99.99=21487] 
2023-05-05 07:56:44:881 440 sec: 61485588 operations; 139614.1 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=698919, Max=34559, Min=556, Avg=2376.06, 90=3195, 99=14599, 99.9=21407, 99.99=25263] [UPDATE: Count=696681, Max=18911, Min=476, Avg=1907.14, 90=2745, 99=5331, 99.9=9783, 99.99=11839] 
2023-05-05 07:56:54:881 450 sec: 62863710 operations; 137812.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=689336, Max=58719, Min=531, Avg=2430.51, 90=3239, 99=16751, 99.9=23455, 99.99=33759] [UPDATE: Count=688828, Max=28767, Min=460, Avg=1917.6, 90=2775, 99=5783, 99.9=10047, 99.99=22287] 
2023-05-05 07:57:04:881 460 sec: 64244329 operations; 138061.9 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=690150, Max=27695, Min=570, Avg=2419.75, 90=3309, 99=15055, 99.9=21391, 99.99=24511] [UPDATE: Count=690269, Max=18015, Min=485, Avg=1922.4, 90=2783, 99=5515, 99.9=9367, 99.99=12487] 
2023-05-05 07:57:14:881 470 sec: 65636520 operations; 139219.1 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=696635, Max=40127, Min=546, Avg=2386.23, 90=3231, 99=14503, 99.9=21103, 99.99=26735] [UPDATE: Count=695724, Max=28527, Min=463, Avg=1919.19, 90=2775, 99=5651, 99.9=9415, 99.99=21407] 
2023-05-05 07:57:24:881 480 sec: 67028574 operations; 139205.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=695862, Max=28511, Min=541, Avg=2382.45, 90=3211, 99=14391, 99.9=20687, 99.99=23375] [UPDATE: Count=696063, Max=15767, Min=482, Avg=1923.99, 90=2765, 99=5755, 99.9=9207, 99.99=11431] 
2023-05-05 07:57:34:881 490 sec: 68415774 operations; 138720 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=693380, Max=52319, Min=537, Avg=2389.19, 90=3207, 99=14535, 99.9=21423, 99.99=28447] [UPDATE: Count=694902, Max=29999, Min=475, Avg=1931.97, 90=2773, 99=5791, 99.9=9711, 99.99=20063] 
2023-05-05 07:57:44:881 500 sec: 69803224 operations; 138745 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=693072, Max=31551, Min=526, Avg=2389.31, 90=3205, 99=14487, 99.9=21439, 99.99=24991] [UPDATE: Count=693399, Max=18639, Min=464, Avg=1931.92, 90=2771, 99=5547, 99.9=9863, 99.99=12151] 
2023-05-05 07:57:54:881 510 sec: 71178284 operations; 137506 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=687720, Max=53855, Min=536, Avg=2413.58, 90=3259, 99=14831, 99.9=21487, 99.99=27983] [UPDATE: Count=688250, Max=42207, Min=468, Avg=1946.31, 90=2801, 99=5911, 99.9=9687, 99.99=20863] 
2023-05-05 07:58:04:881 520 sec: 72555538 operations; 137725.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=687611, Max=51103, Min=510, Avg=2411.12, 90=3291, 99=14559, 99.9=20575, 99.99=28319] [UPDATE: Count=689322, Max=29775, Min=471, Avg=1942.37, 90=2805, 99=5503, 99.9=9719, 99.99=21087] 
2023-05-05 07:58:14:881 530 sec: 73922765 operations; 136722.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=683101, Max=26095, Min=566, Avg=2425.78, 90=3343, 99=13775, 99.9=20015, 99.99=22671] [UPDATE: Count=683439, Max=15879, Min=475, Avg=1958.73, 90=2839, 99=5583, 99.9=9207, 99.99=11191] 
2023-05-05 07:58:24:881 540 sec: 75270952 operations; 134818.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=674257, Max=94207, Min=569, Avg=2460.04, 90=3355, 99=13903, 99.9=20879, 99.99=78655] [UPDATE: Count=674173, Max=84863, Min=493, Avg=1986.68, 90=2845, 99=5739, 99.9=10039, 99.99=77951] 
2023-05-05 07:58:34:881 550 sec: 76614848 operations; 134389.6 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=671993, Max=30255, Min=568, Avg=2478.11, 90=3419, 99=14727, 99.9=21407, 99.99=24847] [UPDATE: Count=671629, Max=16991, Min=500, Avg=1982.51, 90=2851, 99=5911, 99.9=9727, 99.99=12623] 
2023-05-05 07:58:44:881 560 sec: 77972480 operations; 135763.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=677963, Max=38239, Min=554, Avg=2451.95, 90=3411, 99=14055, 99.9=20495, 99.99=26431] [UPDATE: Count=679906, Max=28015, Min=497, Avg=1964.32, 90=2851, 99=5547, 99.9=9615, 99.99=18111] 
2023-05-05 07:58:54:881 570 sec: 79329104 operations; 135662.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=677921, Max=36863, Min=569, Avg=2449.04, 90=3335, 99=15367, 99.9=23327, 99.99=27199] [UPDATE: Count=679514, Max=22511, Min=493, Avg=1970.2, 90=2835, 99=6111, 99.9=10879, 99.99=13759] 
2023-05-05 07:59:04:881 580 sec: 80685296 operations; 135619.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=677869, Max=50527, Min=543, Avg=2448.96, 90=3351, 99=14615, 99.9=21711, 99.99=28399] [UPDATE: Count=678270, Max=30111, Min=469, Avg=1971.65, 90=2839, 99=5951, 99.9=10127, 99.99=22191] 
2023-05-05 07:59:14:881 590 sec: 82045366 operations; 136007 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=679474, Max=27295, Min=547, Avg=2441.44, 90=3355, 99=14319, 99.9=20911, 99.99=23903] [UPDATE: Count=679621, Max=16143, Min=487, Avg=1966.75, 90=2845, 99=5671, 99.9=9191, 99.99=11743] 
2023-05-05 07:59:24:881 600 sec: 83401038 operations; 135567.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=678121, Max=52671, Min=546, Avg=2452.16, 90=3355, 99=14671, 99.9=21167, 99.99=28207] [UPDATE: Count=678533, Max=29263, Min=483, Avg=1970.42, 90=2829, 99=5831, 99.9=9559, 99.99=22255] 
2023-05-05 07:59:34:881 610 sec: 84761242 operations; 136020.4 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=679712, Max=31167, Min=559, Avg=2442.53, 90=3319, 99=14503, 99.9=21071, 99.99=24607] [UPDATE: Count=679600, Max=21743, Min=487, Avg=1964.55, 90=2811, 99=5487, 99.9=9935, 99.99=12039] 
2023-05-05 07:59:44:881 620 sec: 86119010 operations; 135776.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677965, Max=36255, Min=548, Avg=2445.83, 90=3309, 99=14823, 99.9=21567, 99.99=26703] [UPDATE: Count=679858, Max=36255, Min=460, Avg=1969.85, 90=2791, 99=5355, 99.9=10335, 99.99=20543] 
2023-05-05 07:59:54:881 630 sec: 87481868 operations; 136285.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=682130, Max=30207, Min=537, Avg=2435.44, 90=3289, 99=14703, 99.9=21231, 99.99=24175] [UPDATE: Count=680475, Max=21087, Min=455, Avg=1962.96, 90=2785, 99=4875, 99.9=9751, 99.99=16071] 
2023-05-05 08:00:04:881 640 sec: 88838983 operations; 135711.5 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=679221, Max=50847, Min=511, Avg=2449.05, 90=3329, 99=14863, 99.9=21839, 99.99=27631] [UPDATE: Count=678236, Max=48639, Min=455, Avg=1967.81, 90=2791, 99=5275, 99.9=10239, 99.99=20335] 
2023-05-05 08:00:14:881 650 sec: 90192299 operations; 135331.6 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=677073, Max=31967, Min=534, Avg=2453.45, 90=3339, 99=14591, 99.9=21231, 99.99=24159] [UPDATE: Count=675967, Max=17679, Min=485, Avg=1975.77, 90=2789, 99=5647, 99.9=9607, 99.99=11943] 
2023-05-05 08:00:24:881 660 sec: 91551777 operations; 135947.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=680241, Max=43391, Min=516, Avg=2440.89, 90=3291, 99=14919, 99.9=21935, 99.99=27407] [UPDATE: Count=680177, Max=34783, Min=485, Avg=1968.6, 90=2743, 99=6011, 99.9=9839, 99.99=20527] 
2023-05-05 08:00:34:881 670 sec: 92923724 operations; 137194.7 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=685093, Max=28351, Min=553, Avg=2416.83, 90=3227, 99=14583, 99.9=21407, 99.99=24255] [UPDATE: Count=686040, Max=21631, Min=501, Avg=1953.18, 90=2699, 99=5755, 99.9=9759, 99.99=11967] 
2023-05-05 08:00:44:881 680 sec: 94289075 operations; 136535.1 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=681915, Max=47871, Min=531, Avg=2430.82, 90=3249, 99=14823, 99.9=21695, 99.99=28431] [UPDATE: Count=683449, Max=30015, Min=475, Avg=1960.24, 90=2709, 99=5975, 99.9=9943, 99.99=19903] 
2023-05-05 08:00:54:881 690 sec: 95663118 operations; 137404.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=686968, Max=32399, Min=565, Avg=2413.31, 90=3237, 99=14559, 99.9=21311, 99.99=24159] [UPDATE: Count=687060, Max=20223, Min=488, Avg=1949.41, 90=2701, 99=5691, 99.9=9663, 99.99=12343] 
2023-05-05 08:01:04:881 700 sec: 97035844 operations; 137272.6 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=686415, Max=53823, Min=554, Avg=2415.38, 90=3235, 99=14911, 99.9=22127, 99.99=27807] [UPDATE: Count=686341, Max=29103, Min=471, Avg=1951.69, 90=2697, 99=5867, 99.9=10495, 99.99=20319] 
2023-05-05 08:01:14:881 710 sec: 98408732 operations; 137288.8 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=687335, Max=52127, Min=566, Avg=2414.59, 90=3245, 99=14663, 99.9=21519, 99.99=27855] [UPDATE: Count=686299, Max=45887, Min=482, Avg=1951.55, 90=2705, 99=5899, 99.9=9687, 99.99=21119] 
2023-05-05 08:01:24:881 720 sec: 99774265 operations; 136553.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=682111, Max=29247, Min=546, Avg=2422.57, 90=3257, 99=14095, 99.9=21199, 99.99=24687] [UPDATE: Count=682501, Max=17903, Min=480, Avg=1967.63, 90=2731, 99=5911, 99.9=9919, 99.99=12879] 
2023-05-05 08:01:34:881 730 sec: 101139658 operations; 136539.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=683049, Max=54079, Min=547, Avg=2430.5, 90=3191, 99=16415, 99.9=24703, 99.99=30015] [UPDATE: Count=681008, Max=53119, Min=479, Avg=1963.42, 90=2697, 99=6451, 99.9=12455, 99.99=24239] 
2023-05-05 08:01:44:881 740 sec: 102507524 operations; 136786.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=684175, Max=36511, Min=555, Avg=2428.2, 90=3211, 99=15855, 99.9=24239, 99.99=28623] [UPDATE: Count=685109, Max=29279, Min=469, Avg=1950.52, 90=2699, 99=5367, 99.9=10615, 99.99=14255] 
2023-05-05 08:01:54:881 750 sec: 103882882 operations; 137535.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=687869, Max=54687, Min=538, Avg=2412.73, 90=3187, 99=15071, 99.9=21999, 99.99=28543] [UPDATE: Count=688136, Max=28591, Min=480, Avg=1945.82, 90=2685, 99=5039, 99.9=10407, 99.99=21583] 
2023-05-05 08:02:04:881 760 sec: 105270553 operations; 138767.1 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=693734, Max=31423, Min=563, Avg=2386.08, 90=3135, 99=14847, 99.9=21967, 99.99=25455] [UPDATE: Count=693479, Max=18783, Min=463, Avg=1934.2, 90=2653, 99=5331, 99.9=9975, 99.99=14183] 
2023-05-05 08:02:14:881 770 sec: 106634477 operations; 136392.4 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=682002, Max=52447, Min=538, Avg=2425.2, 90=3219, 99=14855, 99.9=22143, 99.99=27807] [UPDATE: Count=681800, Max=28383, Min=473, Avg=1969.96, 90=2721, 99=6019, 99.9=10127, 99.99=21679] 
2023-05-05 08:02:24:881 780 sec: 108002726 operations; 136824.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=684656, Max=40255, Min=554, Avg=2407.69, 90=3201, 99=14615, 99.9=21999, 99.99=25487] [UPDATE: Count=683717, Max=25311, Min=491, Avg=1973.17, 90=2723, 99=5747, 99.9=9911, 99.99=22719] 
2023-05-05 08:02:34:881 790 sec: 109361405 operations; 135867.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=678612, Max=52735, Min=506, Avg=2430.12, 90=3229, 99=15087, 99.9=22239, 99.99=40575] [UPDATE: Count=680095, Max=43519, Min=477, Avg=1982.62, 90=2737, 99=6111, 99.9=10495, 99.99=39743] 
2023-05-05 08:02:44:881 800 sec: 110719440 operations; 135803.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=678993, Max=31567, Min=526, Avg=2434.47, 90=3249, 99=14927, 99.9=21727, 99.99=25071] [UPDATE: Count=678955, Max=20319, Min=480, Avg=1980.14, 90=2765, 99=5843, 99.9=10039, 99.99=16991] 
2023-05-05 08:02:54:881 810 sec: 112056376 operations; 133693.6 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=669325, Max=42751, Min=522, Avg=2475.46, 90=3281, 99=14519, 99.9=21727, 99.99=27407] [UPDATE: Count=668781, Max=29631, Min=471, Avg=2007.98, 90=2787, 99=5955, 99.9=9855, 99.99=21087] 
2023-05-05 08:03:04:881 820 sec: 113385236 operations; 132886 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=664779, Max=26079, Min=566, Avg=2489.14, 90=3335, 99=13903, 99.9=19935, 99.99=22783] [UPDATE: Count=663131, Max=18255, Min=464, Avg=2022.22, 90=2815, 99=5739, 99.9=9023, 99.99=12087] 
2023-05-05 08:03:14:881 830 sec: 114712813 operations; 132757.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=663441, Max=52223, Min=553, Avg=2498.03, 90=3373, 99=14023, 99.9=20383, 99.99=29935] [UPDATE: Count=665035, Max=51263, Min=476, Avg=2017.51, 90=2809, 99=5683, 99.9=9375, 99.99=21999] 
2023-05-05 08:03:24:881 840 sec: 116052470 operations; 133965.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=670261, Max=33407, Min=519, Avg=2478.01, 90=3319, 99=14327, 99.9=20575, 99.99=23407] [UPDATE: Count=669130, Max=23967, Min=478, Avg=1997.05, 90=2771, 99=5511, 99.9=9319, 99.99=11551] 
2023-05-05 08:03:34:881 850 sec: 117395044 operations; 134257.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=670800, Max=55135, Min=545, Avg=2467.26, 90=3251, 99=14447, 99.9=21103, 99.99=27775] [UPDATE: Count=670905, Max=32655, Min=476, Avg=1998.06, 90=2741, 99=5823, 99.9=9615, 99.99=21695] 
2023-05-05 08:03:44:881 860 sec: 118742475 operations; 134743.1 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=674732, Max=30127, Min=538, Avg=2449.23, 90=3241, 99=13263, 99.9=20111, 99.99=22735] [UPDATE: Count=672627, Max=16623, Min=496, Avg=1999.18, 90=2739, 99=5687, 99.9=9335, 99.99=11375] 
2023-05-05 08:03:54:881 870 sec: 120086015 operations; 134354 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=671389, Max=52255, Min=531, Avg=2459.76, 90=3239, 99=13743, 99.9=20399, 99.99=29535] [UPDATE: Count=672226, Max=51327, Min=470, Avg=2002.72, 90=2735, 99=5799, 99.9=9695, 99.99=20431] 
2023-05-05 08:04:04:881 880 sec: 121443612 operations; 135759.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=679073, Max=27311, Min=534, Avg=2432.66, 90=3221, 99=13879, 99.9=20463, 99.99=23567] [UPDATE: Count=678985, Max=17679, Min=463, Avg=1982.71, 90=2735, 99=5707, 99.9=9639, 99.99=12487] 
2023-05-05 08:04:14:881 890 sec: 122811259 operations; 136764.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=684073, Max=47935, Min=533, Avg=2413.36, 90=3191, 99=13615, 99.9=20447, 99.99=26831] [UPDATE: Count=684133, Max=31967, Min=462, Avg=1969.5, 90=2705, 99=5783, 99.9=9567, 99.99=20975] 
2023-05-05 08:04:24:881 900 sec: 124186886 operations; 137562.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=687852, Max=54271, Min=548, Avg=2396.96, 90=3167, 99=13511, 99.9=20383, 99.99=30399] [UPDATE: Count=687236, Max=33087, Min=466, Avg=1962.02, 90=2695, 99=5811, 99.9=9671, 99.99=21295] 
2023-05-05 08:04:34:881 910 sec: 125547214 operations; 136032.8 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=679364, Max=74111, Min=567, Avg=2421.74, 90=3221, 99=13607, 99.9=20303, 99.99=60127] [UPDATE: Count=680335, Max=65311, Min=480, Avg=1984.48, 90=2731, 99=5791, 99.9=9455, 99.99=59391] 
2023-05-05 08:04:44:881 920 sec: 126913876 operations; 136666.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=682579, Max=51807, Min=524, Avg=2413.63, 90=3227, 99=13583, 99.9=20303, 99.99=27359] [UPDATE: Count=685365, Max=29439, Min=456, Avg=1973.48, 90=2735, 99=5567, 99.9=9439, 99.99=21519] 
2023-05-05 08:04:54:881 930 sec: 128272221 operations; 135834.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=679725, Max=33919, Min=532, Avg=2431.19, 90=3225, 99=15127, 99.9=23679, 99.99=27327] [UPDATE: Count=677301, Max=18399, Min=488, Avg=1981.47, 90=2753, 99=6399, 99.9=11663, 99.99=15655] 
2023-05-05 08:05:04:881 940 sec: 129610828 operations; 133860.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=669628, Max=58943, Min=557, Avg=2482.19, 90=3253, 99=16767, 99.9=25215, 99.99=32991] [UPDATE: Count=669108, Max=45631, Min=474, Avg=1996.46, 90=2783, 99=6383, 99.9=12031, 99.99=23391] 
2023-05-05 08:05:14:881 950 sec: 130943255 operations; 133242.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=666128, Max=30911, Min=546, Avg=2485.48, 90=3315, 99=14919, 99.9=22255, 99.99=26015] [UPDATE: Count=666197, Max=18831, Min=469, Avg=2013.89, 90=2821, 99=5891, 99.9=10191, 99.99=14023] 
2023-05-05 08:05:24:881 960 sec: 132269319 operations; 132606.4 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=662287, Max=47263, Min=551, Avg=2497.93, 90=3319, 99=14815, 99.9=21999, 99.99=27663] [UPDATE: Count=663724, Max=29823, Min=469, Avg=2023.56, 90=2807, 99=5911, 99.9=9935, 99.99=21855] 
2023-05-05 08:05:34:881 970 sec: 133596429 operations; 132711 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=664164, Max=30239, Min=564, Avg=2497.82, 90=3333, 99=14791, 99.9=21951, 99.99=25471] [UPDATE: Count=663140, Max=15847, Min=503, Avg=2018.84, 90=2811, 99=5791, 99.9=9767, 99.99=12687] 
2023-05-05 08:05:44:881 980 sec: 134919294 operations; 132286.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=661079, Max=44735, Min=529, Avg=2503.6, 90=3347, 99=14695, 99.9=22047, 99.99=28335] [UPDATE: Count=661597, Max=48991, Min=474, Avg=2028.97, 90=2831, 99=6067, 99.9=10007, 99.99=21759] 
2023-05-05 08:05:54:881 990 sec: 136250733 operations; 133143.9 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=665554, Max=34495, Min=531, Avg=2485.81, 90=3311, 99=14583, 99.9=21919, 99.99=24639] [UPDATE: Count=665954, Max=18191, Min=478, Avg=2016.91, 90=2819, 99=5951, 99.9=9807, 99.99=11999] 
2023-05-05 08:06:04:881 1000 sec: 137575953 operations; 132522 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=662360, Max=52639, Min=570, Avg=2504.05, 90=3339, 99=14983, 99.9=22367, 99.99=27199] [UPDATE: Count=662885, Max=28703, Min=445, Avg=2019.94, 90=2809, 99=5891, 99.9=10287, 99.99=18399] 
2023-05-05 08:06:14:885 1010 sec: 138916396 operations; 134004.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=669932, Max=29215, Min=539, Avg=2475.34, 90=3367, 99=14855, 99.9=22127, 99.99=25503] [UPDATE: Count=671217, Max=16575, Min=486, Avg=1997.44, 90=2815, 99=5891, 99.9=9879, 99.99=12455] 
2023-05-05 08:06:24:881 1020 sec: 140264197 operations; 134820.55 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=673499, Max=54591, Min=541, Avg=2460.42, 90=3377, 99=14943, 99.9=22271, 99.99=28575] [UPDATE: Count=673776, Max=36959, Min=480, Avg=1987.86, 90=2831, 99=6075, 99.9=10231, 99.99=20143] 
2023-05-05 08:06:34:881 1030 sec: 141600852 operations; 133665.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=668233, Max=29903, Min=537, Avg=2479.25, 90=3413, 99=14671, 99.9=22015, 99.99=25439] [UPDATE: Count=668633, Max=17135, Min=485, Avg=2006.16, 90=2865, 99=5855, 99.9=9983, 99.99=12791] 
2023-05-05 08:06:44:881 1040 sec: 142915355 operations; 131450.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=657540, Max=50623, Min=488, Avg=2523.03, 90=3473, 99=14855, 99.9=22383, 99.99=27391] [UPDATE: Count=656442, Max=31663, Min=481, Avg=2037.54, 90=2909, 99=6115, 99.9=10263, 99.99=20735] 
2023-05-05 08:06:54:881 1050 sec: 144217415 operations; 130206 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=651504, Max=30783, Min=511, Avg=2545.7, 90=3531, 99=14711, 99.9=21839, 99.99=24687] [UPDATE: Count=651336, Max=17647, Min=476, Avg=2058.76, 90=2951, 99=5815, 99.9=9751, 99.99=11887] 
2023-05-05 08:07:04:881 1060 sec: 145528078 operations; 131066.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=656343, Max=49215, Min=525, Avg=2528.58, 90=3501, 99=15055, 99.9=22879, 99.99=30255] [UPDATE: Count=654608, Max=29695, Min=466, Avg=2044.79, 90=2963, 99=6099, 99.9=10471, 99.99=20047] 
2023-05-05 08:07:14:881 1070 sec: 146855764 operations; 132768.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=664305, Max=30511, Min=525, Avg=2493.18, 90=3435, 99=14943, 99.9=22447, 99.99=25743] [UPDATE: Count=660594, Max=32671, Min=472, Avg=2026.22, 90=2953, 99=6039, 99.9=10383, 99.99=17631] 
2023-05-05 08:07:24:881 1080 sec: 148168926 operations; 131316.2 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=656886, Max=53695, Min=527, Avg=2522.45, 90=3471, 99=15071, 99.9=22495, 99.99=30495] [UPDATE: Count=658158, Max=49151, Min=466, Avg=2037.95, 90=2985, 99=6071, 99.9=10247, 99.99=22015] 
2023-05-05 08:07:34:881 1090 sec: 149488073 operations; 131914.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=659871, Max=52895, Min=516, Avg=2509.31, 90=3449, 99=15015, 99.9=22623, 99.99=28479] [UPDATE: Count=659241, Max=29327, Min=480, Avg=2035.08, 90=2973, 99=5983, 99.9=10279, 99.99=20159] 
2023-05-05 08:07:44:881 1100 sec: 150813201 operations; 132512.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=661657, Max=32191, Min=548, Avg=2502.94, 90=3509, 99=15031, 99.9=23119, 99.99=27247] [UPDATE: Count=663529, Max=16591, Min=465, Avg=2021.68, 90=2983, 99=6227, 99.9=10695, 99.99=13823] 
2023-05-05 08:07:54:881 1110 sec: 152135971 operations; 132277 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=660836, Max=41151, Min=524, Avg=2508.97, 90=3467, 99=16751, 99.9=25967, 99.99=31279] [UPDATE: Count=662311, Max=35231, Min=461, Avg=2025.64, 90=3009, 99=6411, 99.9=12503, 99.99=21311] 
2023-05-05 08:08:04:881 1120 sec: 153474669 operations; 133869.8 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=667842, Max=37503, Min=547, Avg=2486.74, 90=3393, 99=16895, 99.9=24751, 99.99=29407] [UPDATE: Count=670404, Max=19455, Min=473, Avg=1990.74, 90=2927, 99=6467, 99.9=11039, 99.99=16399] 
2023-05-05 08:08:14:881 1130 sec: 154827578 operations; 135290.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=677001, Max=54399, Min=539, Avg=2452.59, 90=3327, 99=15247, 99.9=22991, 99.99=29743] [UPDATE: Count=676942, Max=36575, Min=468, Avg=1978.01, 90=2849, 99=5999, 99.9=10559, 99.99=22927] 
2023-05-05 08:08:24:881 1140 sec: 156195882 operations; 136830.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=684347, Max=34111, Min=549, Avg=2418.85, 90=3283, 99=14863, 99.9=22511, 99.99=25999] [UPDATE: Count=681604, Max=28415, Min=485, Avg=1965.69, 90=2825, 99=6359, 99.9=10367, 99.99=16463] 
2023-05-05 08:08:34:881 1150 sec: 157573314 operations; 137743.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=687484, Max=56991, Min=520, Avg=2402.03, 90=3249, 99=15031, 99.9=22975, 99.99=29055] [UPDATE: Count=692591, Max=28943, Min=476, Avg=1947.51, 90=2795, 99=6043, 99.9=10775, 99.99=22143] 
2023-05-05 08:08:44:881 1160 sec: 158966269 operations; 139295.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=696424, Max=34623, Min=554, Avg=2375.25, 90=3173, 99=14943, 99.9=22463, 99.99=26239] [UPDATE: Count=696083, Max=23823, Min=494, Avg=1928.49, 90=2717, 99=6019, 99.9=10759, 99.99=14919] 
2023-05-05 08:08:54:881 1170 sec: 160365922 operations; 139965.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=698697, Max=60671, Min=502, Avg=2368.04, 90=3163, 99=14383, 99.9=20543, 99.99=37183] [UPDATE: Count=700044, Max=51999, Min=468, Avg=1917.18, 90=2697, 99=5687, 99.9=9375, 99.99=21567] 
2023-05-05 08:09:04:881 1180 sec: 161775053 operations; 140913.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=704507, Max=25967, Min=554, Avg=2348.5, 90=3173, 99=13503, 99.9=19631, 99.99=22367] [UPDATE: Count=704723, Max=19167, Min=471, Avg=1904.09, 90=2703, 99=4763, 99.9=8759, 99.99=13071] 
2023-05-05 08:09:14:881 1190 sec: 163170066 operations; 139501.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=697450, Max=56319, Min=543, Avg=2370.87, 90=3237, 99=13319, 99.9=19535, 99.99=30255] [UPDATE: Count=697715, Max=29519, Min=459, Avg=1926.1, 90=2773, 99=4907, 99.9=9231, 99.99=20799] 
2023-05-05 08:09:24:881 1200 sec: 164566310 operations; 139624.4 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=698263, Max=25311, Min=567, Avg=2369.75, 90=3283, 99=13271, 99.9=19199, 99.99=21423] [UPDATE: Count=698644, Max=16327, Min=488, Avg=1924.09, 90=2787, 99=4811, 99.9=8583, 99.99=10183] 
2023-05-05 08:09:34:881 1210 sec: 165944011 operations; 137770.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=688657, Max=58943, Min=520, Avg=2417.64, 90=3357, 99=14279, 99.9=20607, 99.99=29391] [UPDATE: Count=688350, Max=42431, Min=469, Avg=1933.8, 90=2813, 99=5187, 99.9=9199, 99.99=23951] 
2023-05-05 08:09:44:881 1220 sec: 167331156 operations; 138714.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=692640, Max=29807, Min=550, Avg=2399.39, 90=3279, 99=14319, 99.9=20383, 99.99=23183] [UPDATE: Count=694421, Max=16575, Min=470, Avg=1922.86, 90=2757, 99=5551, 99.9=9255, 99.99=11143] 
2023-05-05 08:09:54:881 1230 sec: 168726638 operations; 139548.2 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=697686, Max=45567, Min=547, Avg=2371.88, 90=3209, 99=13695, 99.9=19983, 99.99=26159] [UPDATE: Count=697887, Max=47167, Min=466, Avg=1923.94, 90=2723, 99=5467, 99.9=9207, 99.99=20111] 
2023-05-05 08:10:04:881 1240 sec: 170132234 operations; 140559.6 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=702718, Max=68415, Min=570, Avg=2351.24, 90=3133, 99=13415, 99.9=19823, 99.99=56511] [UPDATE: Count=702853, Max=58271, Min=471, Avg=1913.55, 90=2653, 99=5487, 99.9=9399, 99.99=56063] 
2023-05-05 08:10:14:881 1250 sec: 171543407 operations; 141117.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=704773, Max=42719, Min=536, Avg=2338.61, 90=3105, 99=13655, 99.9=19791, 99.99=26863] [UPDATE: Count=706320, Max=41119, Min=469, Avg=1910.92, 90=2635, 99=5695, 99.9=9895, 99.99=22943] 
2023-05-05 08:10:24:881 1260 sec: 172965867 operations; 142246 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=710907, Max=27887, Min=547, Avg=2319.08, 90=3073, 99=13263, 99.9=19887, 99.99=23023] [UPDATE: Count=711687, Max=20575, Min=495, Avg=1894.41, 90=2605, 99=5631, 99.9=9111, 99.99=11687] 
2023-05-05 08:10:34:881 1270 sec: 174387446 operations; 142157.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=710481, Max=54271, Min=515, Avg=2321.21, 90=3057, 99=13447, 99.9=19919, 99.99=30335] [UPDATE: Count=711903, Max=50175, Min=485, Avg=1896.21, 90=2595, 99=5611, 99.9=9879, 99.99=22303] 
2023-05-05 08:10:44:881 1280 sec: 175808305 operations; 142085.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=710280, Max=43743, Min=555, Avg=2321.72, 90=3049, 99=13471, 99.9=19743, 99.99=27311] [UPDATE: Count=709663, Max=45087, Min=466, Avg=1897.2, 90=2591, 99=5579, 99.9=9471, 99.99=23519] 
2023-05-05 08:10:54:881 1290 sec: 177219272 operations; 141096.7 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=707336, Max=31119, Min=532, Avg=2338.49, 90=3065, 99=14327, 99.9=21487, 99.99=25263] [UPDATE: Count=703558, Max=23983, Min=487, Avg=1908.67, 90=2609, 99=5947, 99.9=10687, 99.99=17215] 
2023-05-05 08:11:04:881 1300 sec: 178634738 operations; 141546.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=708293, Max=53503, Min=526, Avg=2340.61, 90=3037, 99=15831, 99.9=24079, 99.99=28655] [UPDATE: Count=707067, Max=27311, Min=464, Avg=1894.8, 90=2585, 99=6263, 99.9=11919, 99.99=21791] 
2023-05-05 08:11:14:881 1310 sec: 180041775 operations; 140703.7 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=703669, Max=31951, Min=550, Avg=2350.4, 90=3101, 99=14639, 99.9=21999, 99.99=25359] [UPDATE: Count=703284, Max=18383, Min=480, Avg=1910.4, 90=2633, 99=5959, 99.9=9999, 99.99=12871] 
2023-05-05 08:11:24:881 1320 sec: 181455531 operations; 141375.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=707122, Max=48927, Min=531, Avg=2343.22, 90=3079, 99=14783, 99.9=22111, 99.99=27743] [UPDATE: Count=707605, Max=28191, Min=478, Avg=1895.59, 90=2623, 99=5347, 99.9=10119, 99.99=20127] 
2023-05-05 08:11:34:881 1330 sec: 182880980 operations; 142544.9 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=712865, Max=28959, Min=535, Avg=2320.04, 90=3037, 99=14551, 99.9=21711, 99.99=24991] [UPDATE: Count=712321, Max=16559, Min=475, Avg=1885.62, 90=2599, 99=5431, 99.9=9735, 99.99=11727] 
2023-05-05 08:11:44:881 1340 sec: 184284529 operations; 140354.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=701954, Max=57951, Min=519, Avg=2362.66, 90=3097, 99=14967, 99.9=22831, 99.99=33951] [UPDATE: Count=702406, Max=33759, Min=455, Avg=1908.28, 90=2613, 99=5939, 99.9=10807, 99.99=25263] 
2023-05-05 08:11:54:881 1350 sec: 185696186 operations; 141165.7 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=706034, Max=29775, Min=558, Avg=2341.98, 90=3079, 99=14455, 99.9=21551, 99.99=24751] [UPDATE: Count=704722, Max=16319, Min=484, Avg=1904.81, 90=2613, 99=5815, 99.9=9887, 99.99=11887] 
2023-05-05 08:12:04:881 1360 sec: 187108785 operations; 141259.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=706013, Max=50911, Min=525, Avg=2341.03, 90=3019, 99=14895, 99.9=22095, 99.99=27183] [UPDATE: Count=706236, Max=54079, Min=450, Avg=1902.39, 90=2557, 99=5987, 99.9=10607, 99.99=21599] 
2023-05-05 08:12:14:881 1370 sec: 188524712 operations; 141592.7 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=707376, Max=35199, Min=562, Avg=2335.29, 90=3023, 99=14735, 99.9=21935, 99.99=25231] [UPDATE: Count=708416, Max=23551, Min=487, Avg=1898.94, 90=2561, 99=5851, 99.9=10015, 99.99=15095] 
2023-05-05 08:12:24:881 1380 sec: 189941542 operations; 141683 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=708387, Max=52991, Min=524, Avg=2333.2, 90=3017, 99=14583, 99.9=21887, 99.99=26895] [UPDATE: Count=709060, Max=51551, Min=487, Avg=1898.51, 90=2557, 99=5863, 99.9=10071, 99.99=18879] 
2023-05-05 08:12:34:881 1390 sec: 191354715 operations; 141317.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=707432, Max=34047, Min=543, Avg=2338.03, 90=3027, 99=14759, 99.9=21935, 99.99=25327] [UPDATE: Count=705210, Max=18943, Min=485, Avg=1902.6, 90=2555, 99=5883, 99.9=10287, 99.99=12951] 
2023-05-05 08:12:44:881 1400 sec: 192766972 operations; 141225.7 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=705513, Max=50271, Min=529, Avg=2343.34, 90=3017, 99=15135, 99.9=22607, 99.99=28559] [UPDATE: Count=707420, Max=27903, Min=472, Avg=1901.81, 90=2553, 99=6103, 99.9=10711, 99.99=19311] 
2023-05-05 08:12:54:881 1410 sec: 194172664 operations; 140569.2 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=703574, Max=46207, Min=569, Avg=2351.09, 90=3053, 99=14847, 99.9=22255, 99.99=26111] [UPDATE: Count=702310, Max=33247, Min=481, Avg=1913.89, 90=2573, 99=6075, 99.9=10287, 99.99=18447] 
2023-05-05 08:13:04:881 1420 sec: 195579117 operations; 140645.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=703450, Max=52991, Min=534, Avg=2353.23, 90=3037, 99=15215, 99.9=22703, 99.99=28447] [UPDATE: Count=702245, Max=51007, Min=471, Avg=1908.43, 90=2559, 99=5947, 99.9=10751, 99.99=21535] 
2023-05-05 08:13:14:881 1430 sec: 196997035 operations; 141791.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=708219, Max=29727, Min=572, Avg=2331.7, 90=3015, 99=14911, 99.9=22319, 99.99=25855] [UPDATE: Count=709647, Max=18271, Min=483, Avg=1896.04, 90=2555, 99=5755, 99.9=10175, 99.99=13287] 
2023-05-05 08:13:24:881 1440 sec: 198403539 operations; 140650.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=703052, Max=54431, Min=550, Avg=2352.81, 90=3041, 99=15175, 99.9=22767, 99.99=28399] [UPDATE: Count=704330, Max=50719, Min=483, Avg=1910.27, 90=2565, 99=6023, 99.9=10975, 99.99=23343] 
2023-05-05 08:13:34:881 1450 sec: 199811892 operations; 140835.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=704569, Max=30975, Min=557, Avg=2348.56, 90=3063, 99=14543, 99.9=21215, 99.99=24575] [UPDATE: Count=703125, Max=17647, Min=494, Avg=1907.27, 90=2577, 99=5779, 99.9=9447, 99.99=12591] 
2023-05-05 08:13:44:881 1460 sec: 201210020 operations; 139812.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=698072, Max=61791, Min=548, Avg=2367.45, 90=3053, 99=15047, 99.9=22751, 99.99=35391] [UPDATE: Count=700248, Max=35295, Min=473, Avg=1920.29, 90=2573, 99=5947, 99.9=10455, 99.99=30799] 
2023-05-05 08:13:54:881 1470 sec: 202609502 operations; 139948.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=699520, Max=47487, Min=544, Avg=2369.25, 90=3033, 99=16431, 99.9=24895, 99.99=30575] [UPDATE: Count=697824, Max=30015, Min=485, Avg=1918.46, 90=2563, 99=6427, 99.9=12327, 99.99=21119] 
2023-05-05 08:14:04:881 1480 sec: 204004165 operations; 139466.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=697170, Max=43935, Min=547, Avg=2375.66, 90=3039, 99=16527, 99.9=24767, 99.99=29695] [UPDATE: Count=699264, Max=29199, Min=503, Avg=1918.73, 90=2567, 99=6299, 99.9=11703, 99.99=22895] 
2023-05-05 08:14:14:881 1490 sec: 205413063 operations; 140889.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=704075, Max=57311, Min=578, Avg=2350.24, 90=3033, 99=15039, 99.9=22463, 99.99=29071] [UPDATE: Count=704731, Max=31551, Min=489, Avg=1904.97, 90=2561, 99=5791, 99.9=10183, 99.99=22623] 
2023-05-05 08:14:24:881 1500 sec: 206827455 operations; 141439.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=707722, Max=31871, Min=559, Avg=2337.86, 90=3035, 99=14599, 99.9=21711, 99.99=24751] [UPDATE: Count=707321, Max=19791, Min=478, Avg=1900.02, 90=2585, 99=5619, 99.9=9735, 99.99=12079] 
2023-05-05 08:14:34:881 1510 sec: 208239313 operations; 141185.8 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=705452, Max=36223, Min=558, Avg=2344.23, 90=3033, 99=14767, 99.9=21967, 99.99=26911] [UPDATE: Count=705732, Max=29935, Min=469, Avg=1902.03, 90=2587, 99=5979, 99.9=9951, 99.99=22335] 
2023-05-05 08:14:44:881 1520 sec: 209655204 operations; 141589.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=707897, Max=29647, Min=582, Avg=2339.85, 90=3035, 99=14591, 99.9=21423, 99.99=24335] [UPDATE: Count=706717, Max=30863, Min=487, Avg=1896.56, 90=2585, 99=5659, 99.9=9743, 99.99=14303] 
2023-05-05 08:14:54:881 1530 sec: 211058590 operations; 140338.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=700941, Max=51039, Min=530, Avg=2361.63, 90=3063, 99=14911, 99.9=21967, 99.99=28159] [UPDATE: Count=703819, Max=47263, Min=458, Avg=1907.78, 90=2611, 99=5747, 99.9=10823, 99.99=21999] 
2023-05-05 08:15:04:881 1540 sec: 212467284 operations; 140869.4 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=703872, Max=31247, Min=564, Avg=2348.16, 90=3051, 99=14471, 99.9=21279, 99.99=24687] [UPDATE: Count=704814, Max=18287, Min=465, Avg=1907.55, 90=2611, 99=5675, 99.9=9887, 99.99=14375] 
2023-05-05 08:15:14:881 1550 sec: 213870820 operations; 140353.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=701902, Max=52255, Min=546, Avg=2359.48, 90=3057, 99=14895, 99.9=22127, 99.99=29375] [UPDATE: Count=703159, Max=40863, Min=457, Avg=1911.47, 90=2621, 99=5967, 99.9=10071, 99.99=21135] 
2023-05-05 08:15:24:881 1560 sec: 215280338 operations; 140951.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=705658, Max=29199, Min=567, Avg=2350.46, 90=3067, 99=14599, 99.9=21663, 99.99=24655] [UPDATE: Count=702264, Max=15991, Min=499, Avg=1901.86, 90=2615, 99=5631, 99.9=9967, 99.99=12367] 
2023-05-05 08:15:34:881 1570 sec: 216679097 operations; 139875.9 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=698726, Max=55455, Min=516, Avg=2369.43, 90=3085, 99=14855, 99.9=22111, 99.99=28111] [UPDATE: Count=700495, Max=43711, Min=458, Avg=1917.3, 90=2635, 99=6011, 99.9=10327, 99.99=22239] 
2023-05-05 08:15:44:881 1580 sec: 218083791 operations; 140469.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=702027, Max=30447, Min=554, Avg=2354.05, 90=3073, 99=14607, 99.9=21775, 99.99=24719] [UPDATE: Count=702824, Max=19135, Min=474, Avg=1913.35, 90=2643, 99=5719, 99.9=10199, 99.99=12983] 
2023-05-05 08:15:54:881 1590 sec: 219467210 operations; 138341.9 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=691455, Max=50175, Min=562, Avg=2393.2, 90=3129, 99=14855, 99.9=22095, 99.99=28047] [UPDATE: Count=691334, Max=28575, Min=479, Avg=1940.57, 90=2701, 99=6123, 99.9=10583, 99.99=21023] 
2023-05-05 08:16:04:881 1600 sec: 220862455 operations; 139524.5 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=697076, Max=32239, Min=544, Avg=2370.69, 90=3107, 99=14735, 99.9=21935, 99.99=25039] [UPDATE: Count=698206, Max=20047, Min=482, Avg=1926.22, 90=2685, 99=5559, 99.9=9991, 99.99=13359] 
2023-05-05 08:16:14:881 1610 sec: 222249980 operations; 138752.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=693174, Max=51167, Min=521, Avg=2389.91, 90=3153, 99=14927, 99.9=22143, 99.99=28735] [UPDATE: Count=695805, Max=44319, Min=469, Avg=1931.25, 90=2689, 99=6099, 99.9=10079, 99.99=21199] 
2023-05-05 08:16:24:881 1620 sec: 223647502 operations; 139752.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=698615, Max=31727, Min=563, Avg=2368.9, 90=3119, 99=14695, 99.9=22063, 99.99=25503] [UPDATE: Count=697349, Max=18527, Min=488, Avg=1920.74, 90=2661, 99=5999, 99.9=9999, 99.99=13119] 
2023-05-05 08:16:34:881 1630 sec: 225026733 operations; 137923.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=688610, Max=98367, Min=550, Avg=2402.32, 90=3129, 99=15119, 99.9=22687, 99.99=82303] [UPDATE: Count=690783, Max=89919, Min=482, Avg=1944.67, 90=2687, 99=6043, 99.9=10591, 99.99=81407] 
2023-05-05 08:16:44:881 1640 sec: 226408591 operations; 138185.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=690814, Max=30847, Min=567, Avg=2391.76, 90=3151, 99=14655, 99.9=21791, 99.99=25519] [UPDATE: Count=691128, Max=19951, Min=466, Avg=1946.51, 90=2705, 99=5735, 99.9=10071, 99.99=12415] 
2023-05-05 08:16:54:881 1650 sec: 227765306 operations; 135671.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=677547, Max=54207, Min=522, Avg=2442.18, 90=3193, 99=15567, 99.9=23791, 99.99=30623] [UPDATE: Count=678677, Max=28159, Min=475, Avg=1979, 90=2739, 99=6395, 99.9=11903, 99.99=21903] 
2023-05-05 08:17:04:881 1660 sec: 229110858 operations; 134555.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=671994, Max=62975, Min=549, Avg=2473.58, 90=3233, 99=17199, 99.9=26287, 99.99=31535] [UPDATE: Count=673841, Max=46879, Min=443, Avg=1980.29, 90=2743, 99=6467, 99.9=12415, 99.99=20991] 
2023-05-05 08:17:14:881 1670 sec: 230481904 operations; 137104.6 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=685542, Max=30863, Min=585, Avg=2423.94, 90=3197, 99=15743, 99.9=23279, 99.99=26671] [UPDATE: Count=685476, Max=16495, Min=489, Avg=1948.51, 90=2695, 99=6135, 99.9=10263, 99.99=12879] 
2023-05-05 08:17:24:881 1680 sec: 231858489 operations; 137658.5 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=688714, Max=54943, Min=533, Avg=2422.56, 90=3205, 99=15695, 99.9=23583, 99.99=30991] [UPDATE: Count=688447, Max=36255, Min=472, Avg=1932.43, 90=2669, 99=5919, 99.9=10559, 99.99=20127] 
2023-05-05 08:17:34:881 1690 sec: 233246401 operations; 138791.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=694802, Max=31935, Min=549, Avg=2404.78, 90=3147, 99=16543, 99.9=24063, 99.99=27679] [UPDATE: Count=692624, Max=17583, Min=484, Avg=1913.61, 90=2625, 99=5711, 99.9=10351, 99.99=13023] 
2023-05-05 08:17:44:881 1700 sec: 234635711 operations; 138931 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=695541, Max=52671, Min=540, Avg=2381.61, 90=3115, 99=15287, 99.9=22287, 99.99=29055] [UPDATE: Count=693883, Max=30223, Min=498, Avg=1932.46, 90=2627, 99=6091, 99.9=10567, 99.99=19567] 
2023-05-05 08:17:54:881 1710 sec: 236036450 operations; 140073.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=700659, Max=32479, Min=541, Avg=2357.98, 90=3081, 99=14871, 99.9=21871, 99.99=24959] [UPDATE: Count=699948, Max=19135, Min=469, Avg=1921.9, 90=2615, 99=5715, 99.9=9847, 99.99=12023] 
2023-05-05 08:18:04:881 1720 sec: 237437304 operations; 140085.4 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=699996, Max=49215, Min=533, Avg=2360.68, 90=3071, 99=15271, 99.9=22591, 99.99=28895] [UPDATE: Count=701783, Max=29023, Min=468, Avg=1919.02, 90=2593, 99=5943, 99.9=10519, 99.99=20815] 
2023-05-05 08:18:14:881 1730 sec: 238847486 operations; 141018.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=704321, Max=35007, Min=554, Avg=2342.48, 90=3037, 99=15135, 99.9=22399, 99.99=25519] [UPDATE: Count=705085, Max=19551, Min=483, Avg=1908.39, 90=2581, 99=6031, 99.9=10231, 99.99=12783] 
2023-05-05 08:18:24:881 1740 sec: 240258323 operations; 141083.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=705675, Max=54751, Min=527, Avg=2350.05, 90=3035, 99=15639, 99.9=23295, 99.99=30335] [UPDATE: Count=706134, Max=30463, Min=483, Avg=1899.39, 90=2579, 99=5947, 99.9=10519, 99.99=20335] 
2023-05-05 08:18:34:881 1750 sec: 241680761 operations; 142243.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=711232, Max=31279, Min=552, Avg=2323.79, 90=2999, 99=15119, 99.9=22815, 99.99=26383] [UPDATE: Count=710405, Max=17599, Min=474, Avg=1890.26, 90=2551, 99=6087, 99.9=10415, 99.99=13127] 
2023-05-05 08:18:44:881 1760 sec: 243109202 operations; 142844.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=714737, Max=60511, Min=556, Avg=2320.18, 90=2961, 99=15015, 99.9=22431, 99.99=28767] [UPDATE: Count=713383, Max=48255, Min=482, Avg=1876, 90=2507, 99=6091, 99.9=10351, 99.99=21327] 
2023-05-05 08:18:54:881 1770 sec: 244530067 operations; 142086.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=710742, Max=29055, Min=539, Avg=2332.03, 90=3045, 99=14679, 99.9=22063, 99.99=25071] [UPDATE: Count=710062, Max=16431, Min=491, Avg=1886.86, 90=2561, 99=5719, 99.9=9903, 99.99=12055] 
2023-05-05 08:19:04:881 1780 sec: 245951300 operations; 142123.3 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=709531, Max=55423, Min=549, Avg=2334.15, 90=3043, 99=14847, 99.9=22111, 99.99=28287] [UPDATE: Count=711964, Max=27935, Min=455, Avg=1884.26, 90=2557, 99=5895, 99.9=10175, 99.99=18767] 
2023-05-05 08:19:14:881 1790 sec: 247359368 operations; 140806.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=703271, Max=32015, Min=547, Avg=2354.42, 90=3107, 99=14807, 99.9=22095, 99.99=24959] [UPDATE: Count=705770, Max=19359, Min=487, Avg=1903.79, 90=2613, 99=6175, 99.9=9919, 99.99=11887] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-05 08:19:24:881 1800 sec: 248789132 operations; 142976.4 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=715108, Max=50815, Min=517, Avg=2321.19, 90=3103, 99=14831, 99.9=22271, 99.99=28831] [UPDATE: Count=712849, Max=38207, Min=453, Avg=1871.21, 90=2605, 99=6015, 99.9=10399, 99.99=22319] 
Still waiting for thread Thread-48 to complete. Workload status: true
2023-05-05 08:19:27:140 1802 sec: 248793091 operations; 1752.55 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=2004, Max=22959, Min=538, Avg=2345.82, 90=3121, 99=18319, 99.9=22847, 99.99=22959] [CLEANUP: Count=300, Max=2222079, Min=0, Avg=7404.86, 90=2, 99=18, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802258
[OVERALL], Throughput(ops/sec), 138045.21383730852
[TOTAL_GCS_PS_Scavenge], Count, 3984
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17870
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9915339535183088
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 161
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008933238193421808
[TOTAL_GCs], Count, 3987
[TOTAL_GC_TIME], Time(ms), 18031
[TOTAL_GC_TIME_%], Time(%), 1.0004671917117305
[READ], Operations, 124385073
[READ], AverageLatency(us), 2391.812450389445
[READ], MinLatency(us), 488
[READ], MaxLatency(us), 123583
[READ], 95thPercentileLatency(us), 3777
[READ], 99thPercentileLatency(us), 14343
[READ], Return=OK, 124385073
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7404.86
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 18
[UPDATE], Operations, 124408018
[UPDATE], AverageLatency(us), 1939.3833405737562
[UPDATE], MinLatency(us), 437
[UPDATE], MaxLatency(us), 125055
[UPDATE], 95thPercentileLatency(us), 3047
[UPDATE], 99thPercentileLatency(us), 5763
[UPDATE], Return=OK, 124408018
