bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.52.96.146,54.193.164.37,54.151.68.127 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3rQkLaAN8Jn6ePI -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.52.96.146,54.193.164.37,54.151.68.127 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3rQkLaAN8Jn6ePI -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.52.96.146,54.193.164.37,54.151.68.127 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3rQkLaAN8Jn6ePI -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-08 15:34:39:684 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.219.182.146:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.219.104.150:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.52.96.146:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.151.68.127:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.193.164.37:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.9.21.173:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 4e0c2639-6369-4de2-bc5d-5bd2e916a9d7

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.52.96.146; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.219.104.150; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.151.68.127; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.193.164.37; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.9.21.173; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.219.182.146; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: ONE, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-03-08 15:34:49:666 10 sec: 1416026 operations; 141602.6 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=707850, Max=399359, Min=238, Avg=3058.83, 90=5203, 99=13119, 99.9=45663, 99.99=176511] [UPDATE: Count=710478, Max=413439, Min=300, Avg=2146.11, 90=3465, 99=10327, 99.9=40191, 99.99=174975] 
2023-03-08 15:34:59:666 20 sec: 3195210 operations; 177918.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=889017, Max=57311, Min=217, Avg=2702.17, 90=4907, 99=8035, 99.9=17343, 99.99=28895] [UPDATE: Count=888610, Max=47679, Min=294, Avg=1790.06, 90=3233, 99=4187, 99.9=15303, 99.99=26879] 
2023-03-08 15:35:09:666 30 sec: 4966011 operations; 177080.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=885598, Max=71807, Min=241, Avg=2734.9, 90=4943, 99=8471, 99.9=16175, 99.99=35551] [UPDATE: Count=884949, Max=43647, Min=300, Avg=1778.51, 90=3175, 99=4119, 99.9=11463, 99.99=31087] 
2023-03-08 15:35:19:666 40 sec: 6746970 operations; 178095.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=890218, Max=28143, Min=237, Avg=2734.83, 90=4919, 99=9767, 99.9=15471, 99.99=21551] [UPDATE: Count=890722, Max=23263, Min=284, Avg=1753.41, 90=3101, 99=4039, 99.9=11271, 99.99=19903] 
2023-03-08 15:35:29:666 50 sec: 8553881 operations; 180691.1 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=904127, Max=63839, Min=234, Avg=2672.41, 90=4819, 99=7987, 99.9=15311, 99.99=28655] [UPDATE: Count=902631, Max=29807, Min=300, Avg=1750.5, 90=3069, 99=4089, 99.9=12879, 99.99=18911] 
2023-03-08 15:35:39:666 60 sec: 10371742 operations; 181786.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=908503, Max=48191, Min=230, Avg=2630.92, 90=4739, 99=7583, 99.9=14159, 99.99=34943] [UPDATE: Count=909337, Max=39743, Min=293, Avg=1766.36, 90=3091, 99=4159, 99.9=10663, 99.99=32399] 
2023-03-08 15:35:49:666 70 sec: 12195106 operations; 182336.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=912707, Max=37407, Min=236, Avg=2631.07, 90=4747, 99=7743, 99.9=13631, 99.99=30671] [UPDATE: Count=910618, Max=31983, Min=277, Avg=1751.64, 90=3077, 99=4045, 99.9=10287, 99.99=29631] 
2023-03-08 15:35:59:666 80 sec: 13991709 operations; 179660.3 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=897737, Max=53215, Min=235, Avg=2676.2, 90=4815, 99=7891, 99.9=16687, 99.99=28255] [UPDATE: Count=898893, Max=40895, Min=291, Avg=1773.35, 90=3085, 99=4195, 99.9=12207, 99.99=20847] 
2023-03-08 15:36:09:666 90 sec: 15786762 operations; 179505.3 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=897465, Max=81919, Min=228, Avg=2705.81, 90=4847, 99=8167, 99.9=16767, 99.99=32863] [UPDATE: Count=897574, Max=52063, Min=285, Avg=1748.11, 90=3071, 99=4151, 99.9=12199, 99.99=19551] 
2023-03-08 15:36:19:666 100 sec: 17605817 operations; 181905.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=910219, Max=22767, Min=229, Avg=2677.54, 90=4847, 99=8023, 99.9=12951, 99.99=18799] [UPDATE: Count=908835, Max=21039, Min=278, Avg=1714.81, 90=3075, 99=4091, 99.9=10231, 99.99=17407] 
2023-03-08 15:36:29:666 110 sec: 19410448 operations; 180463.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=903881, Max=71807, Min=229, Avg=2714.16, 90=4867, 99=10055, 99.9=16047, 99.99=33599] [UPDATE: Count=900766, Max=45791, Min=280, Avg=1713.26, 90=3083, 99=4099, 99.9=10327, 99.99=19471] 
2023-03-08 15:36:39:666 120 sec: 21226796 operations; 181634.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=908853, Max=75839, Min=231, Avg=2681.56, 90=4847, 99=8407, 99.9=14415, 99.99=32959] [UPDATE: Count=907444, Max=49247, Min=283, Avg=1718.15, 90=3073, 99=4111, 99.9=10551, 99.99=18735] 
2023-03-08 15:36:49:666 130 sec: 22981419 operations; 175462.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=877540, Max=132735, Min=227, Avg=2832.1, 90=4963, 99=11911, 99.9=28367, 99.99=80383] [UPDATE: Count=877064, Max=32335, Min=288, Avg=1723.11, 90=3077, 99=4047, 99.9=11047, 99.99=28511] 
2023-03-08 15:36:59:666 140 sec: 24732083 operations; 175066.4 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=874706, Max=70783, Min=234, Avg=2832.66, 90=4963, 99=12351, 99.9=17791, 99.99=34367] [UPDATE: Count=876049, Max=46271, Min=285, Avg=1734.13, 90=3091, 99=4043, 99.9=11503, 99.99=22543] 
2023-03-08 15:37:09:666 150 sec: 26473654 operations; 174157.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=870381, Max=94335, Min=234, Avg=2847.26, 90=4943, 99=12663, 99.9=23231, 99.99=50751] [UPDATE: Count=871282, Max=51807, Min=285, Avg=1742.94, 90=3041, 99=4033, 99.9=12495, 99.99=28319] 
2023-03-08 15:37:19:666 160 sec: 28231809 operations; 175815.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=879124, Max=50143, Min=224, Avg=2816.7, 90=4971, 99=11807, 99.9=16879, 99.99=35007] [UPDATE: Count=878913, Max=36351, Min=289, Avg=1729.36, 90=3031, 99=3999, 99.9=10375, 99.99=33791] 
2023-03-08 15:37:29:666 170 sec: 29974991 operations; 174318.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=872660, Max=75839, Min=234, Avg=2815.67, 90=4895, 99=10991, 99.9=16319, 99.99=35551] [UPDATE: Count=870440, Max=52543, Min=291, Avg=1768.6, 90=3037, 99=4047, 99.9=9727, 99.99=29263] 
2023-03-08 15:37:39:666 180 sec: 31686908 operations; 171191.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=855985, Max=55903, Min=233, Avg=2909.01, 90=4999, 99=13255, 99.9=17423, 99.99=31983] [UPDATE: Count=855954, Max=51903, Min=271, Avg=1760.23, 90=3047, 99=3999, 99.9=11375, 99.99=20287] 
2023-03-08 15:37:49:666 190 sec: 33443325 operations; 175641.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=878064, Max=29375, Min=229, Avg=2807.96, 90=4911, 99=11911, 99.9=16767, 99.99=20575] [UPDATE: Count=878326, Max=18815, Min=285, Avg=1742.91, 90=3051, 99=4031, 99.9=10343, 99.99=16479] 
2023-03-08 15:37:59:666 200 sec: 35172048 operations; 172872.3 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=864818, Max=64383, Min=226, Avg=2885.73, 90=5019, 99=12231, 99.9=17151, 99.99=31103] [UPDATE: Count=863894, Max=49375, Min=291, Avg=1737.62, 90=3019, 99=3969, 99.9=11447, 99.99=18591] 
2023-03-08 15:38:09:666 210 sec: 36913969 operations; 174192.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=871556, Max=72255, Min=232, Avg=2833.16, 90=4939, 99=10743, 99.9=17407, 99.99=32479] [UPDATE: Count=870492, Max=51807, Min=286, Avg=1754.85, 90=3035, 99=4035, 99.9=12543, 99.99=19743] 
2023-03-08 15:38:19:666 220 sec: 38637700 operations; 172373.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=862005, Max=39647, Min=231, Avg=2884.14, 90=4987, 99=12423, 99.9=16207, 99.99=30911] [UPDATE: Count=861774, Max=31679, Min=291, Avg=1752.89, 90=3041, 99=4013, 99.9=8943, 99.99=29151] 
2023-03-08 15:38:29:666 230 sec: 40382627 operations; 174492.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=871863, Max=69695, Min=231, Avg=2841.66, 90=4963, 99=10791, 99.9=16575, 99.99=32047] [UPDATE: Count=873043, Max=52223, Min=277, Avg=1740.14, 90=3073, 99=4023, 99.9=11167, 99.99=19983] 
2023-03-08 15:38:39:666 240 sec: 42149590 operations; 176696.3 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=884139, Max=65471, Min=224, Avg=2764.42, 90=4839, 99=7863, 99.9=13767, 99.99=26975] [UPDATE: Count=882787, Max=45535, Min=285, Avg=1758.4, 90=3053, 99=4067, 99.9=10391, 99.99=19567] 
2023-03-08 15:38:49:666 250 sec: 43716695 operations; 156710.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=784122, Max=419327, Min=227, Avg=3372.34, 90=4815, 99=11167, 99.9=146559, 99.99=276223] [UPDATE: Count=783027, Max=23551, Min=274, Avg=1727.58, 90=3015, 99=3991, 99.9=9007, 99.99=11303] 
2023-03-08 15:38:59:666 260 sec: 45451203 operations; 173450.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=866716, Max=60639, Min=231, Avg=2813.08, 90=4843, 99=7827, 99.9=12599, 99.99=36255] [UPDATE: Count=867690, Max=50143, Min=283, Avg=1795.99, 90=3055, 99=4093, 99.9=9567, 99.99=20895] 
2023-03-08 15:39:09:666 270 sec: 47120664 operations; 166946.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=834466, Max=73919, Min=220, Avg=2916.33, 90=4759, 99=10367, 99.9=15511, 99.99=32687] [UPDATE: Count=835026, Max=53535, Min=294, Avg=1872.01, 90=3069, 99=4059, 99.9=10239, 99.99=20111] 
2023-03-08 15:39:19:666 280 sec: 48762939 operations; 164227.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=820599, Max=33503, Min=232, Avg=2951.74, 90=4699, 99=11215, 99.9=16415, 99.99=23279] [UPDATE: Count=821663, Max=25407, Min=278, Avg=1916.56, 90=3101, 99=4155, 99.9=9919, 99.99=22047] 
2023-03-08 15:39:29:674 290 sec: 50403847 operations; 163943.25 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=820666, Max=79999, Min=228, Avg=3003.19, 90=4843, 99=12311, 99.9=17519, 99.99=46495] [UPDATE: Count=819981, Max=50847, Min=275, Avg=1867.3, 90=3071, 99=4067, 99.9=9935, 99.99=19295] 
2023-03-08 15:39:39:666 300 sec: 51843411 operations; 144086.08 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=720541, Max=74879, Min=231, Avg=3355.1, 90=5087, 99=13591, 99.9=27407, 99.99=52223] [UPDATE: Count=719235, Max=69439, Min=280, Avg=2197.67, 90=3395, 99=4491, 99.9=22607, 99.99=41471] 
2023-03-08 15:39:49:666 310 sec: 53256943 operations; 141353.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=706079, Max=86975, Min=234, Avg=3389.74, 90=5191, 99=13535, 99.9=22719, 99.99=54815] [UPDATE: Count=707466, Max=19215, Min=270, Avg=2266.39, 90=3401, 99=4463, 99.9=9351, 99.99=16911] 
2023-03-08 15:39:59:666 320 sec: 54757884 operations; 150094.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=750370, Max=204415, Min=218, Avg=3522.12, 90=4975, 99=19951, 99.9=110207, 99.99=161023] [UPDATE: Count=750687, Max=51519, Min=289, Avg=1804.92, 90=2975, 99=3939, 99.9=9471, 99.99=19119] 
2023-03-08 15:40:09:666 330 sec: 56465947 operations; 170806.3 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=854560, Max=55135, Min=232, Avg=2906.18, 90=4831, 99=7783, 99.9=14727, 99.99=26191] [UPDATE: Count=853358, Max=47199, Min=287, Avg=1769.15, 90=2983, 99=4033, 99.9=10807, 99.99=24943] 
2023-03-08 15:40:19:666 340 sec: 58174468 operations; 170852.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=853178, Max=78271, Min=229, Avg=2927.77, 90=4879, 99=7675, 99.9=12807, 99.99=35839] [UPDATE: Count=855440, Max=34975, Min=289, Avg=1755.97, 90=2983, 99=3981, 99.9=9799, 99.99=31871] 
2023-03-08 15:40:29:666 350 sec: 59884777 operations; 171030.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=855633, Max=74431, Min=241, Avg=2912.91, 90=4863, 99=7715, 99.9=12975, 99.99=35263] [UPDATE: Count=854679, Max=47935, Min=286, Avg=1760.21, 90=2981, 99=3989, 99.9=9799, 99.99=28815] 
2023-03-08 15:40:39:666 360 sec: 61605263 operations; 172048.6 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=861028, Max=24943, Min=229, Avg=2894.51, 90=4859, 99=7679, 99.9=12367, 99.99=19887] [UPDATE: Count=859435, Max=24703, Min=292, Avg=1750.48, 90=2981, 99=3975, 99.9=9935, 99.99=17103] 
2023-03-08 15:40:49:666 370 sec: 63321353 operations; 171609 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=857753, Max=55327, Min=224, Avg=2902.11, 90=4843, 99=7679, 99.9=14511, 99.99=30879] [UPDATE: Count=858261, Max=29615, Min=292, Avg=1756.1, 90=2973, 99=3947, 99.9=10727, 99.99=19279] 
2023-03-08 15:40:59:666 380 sec: 65040024 operations; 171867.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=859002, Max=53311, Min=242, Avg=2874.04, 90=4779, 99=7643, 99.9=13999, 99.99=29327] [UPDATE: Count=859674, Max=44383, Min=281, Avg=1777.3, 90=2995, 99=4015, 99.9=10767, 99.99=20319] 
2023-03-08 15:41:09:666 390 sec: 66762415 operations; 172239.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=862064, Max=21983, Min=224, Avg=2868.75, 90=4783, 99=7415, 99.9=12623, 99.99=16783] [UPDATE: Count=860282, Max=17903, Min=282, Avg=1771.15, 90=2995, 99=3979, 99.9=10503, 99.99=15327] 
2023-03-08 15:41:19:666 400 sec: 68482986 operations; 172057.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=860464, Max=55935, Min=234, Avg=2866.88, 90=4767, 99=7523, 99.9=12463, 99.99=29871] [UPDATE: Count=860129, Max=51935, Min=287, Avg=1778.45, 90=3003, 99=3989, 99.9=9831, 99.99=19855] 
2023-03-08 15:41:29:666 410 sec: 70187917 operations; 170493.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=852359, Max=66943, Min=240, Avg=2936, 90=4919, 99=7883, 99.9=13207, 99.99=40607] [UPDATE: Count=852578, Max=52447, Min=284, Avg=1752.58, 90=2981, 99=3935, 99.9=10303, 99.99=18559] 
2023-03-08 15:41:39:666 420 sec: 71895499 operations; 170758.2 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=853349, Max=19135, Min=230, Avg=2934.34, 90=4951, 99=7839, 99.9=11775, 99.99=14639] [UPDATE: Count=854312, Max=14271, Min=290, Avg=1747.48, 90=2989, 99=3919, 99.9=10023, 99.99=12159] 
2023-03-08 15:41:49:666 430 sec: 73588989 operations; 169349 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=845480, Max=77631, Min=237, Avg=2941.05, 90=4907, 99=8119, 99.9=16623, 99.99=43135] [UPDATE: Count=847937, Max=53215, Min=288, Avg=1780.74, 90=2995, 99=3979, 99.9=10879, 99.99=28831] 
2023-03-08 15:41:59:666 440 sec: 75279159 operations; 169017 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=844409, Max=75711, Min=232, Avg=2928.03, 90=4859, 99=7783, 99.9=12951, 99.99=44383] [UPDATE: Count=845747, Max=47199, Min=293, Avg=1802.27, 90=3009, 99=4025, 99.9=9423, 99.99=29743] 
2023-03-08 15:42:09:666 450 sec: 76964897 operations; 168573.8 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=843792, Max=20927, Min=227, Avg=2941.57, 90=4915, 99=7835, 99.9=12855, 99.99=17471] [UPDATE: Count=842031, Max=19215, Min=284, Avg=1798.98, 90=3001, 99=3983, 99.9=10399, 99.99=16263] 
2023-03-08 15:42:19:666 460 sec: 78629981 operations; 166508.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=831651, Max=212735, Min=230, Avg=2975.15, 90=4947, 99=7955, 99.9=12655, 99.99=122303] [UPDATE: Count=833588, Max=210815, Min=297, Avg=1826.89, 90=3001, 99=3985, 99.9=9511, 99.99=128191] 
2023-03-08 15:42:29:666 470 sec: 80326631 operations; 169665 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=847403, Max=65983, Min=228, Avg=2899.03, 90=4799, 99=7603, 99.9=16183, 99.99=39423] [UPDATE: Count=849016, Max=46687, Min=297, Avg=1813.42, 90=3013, 99=3983, 99.9=10999, 99.99=22991] 
2023-03-08 15:42:39:666 480 sec: 82010542 operations; 168391.1 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=841222, Max=35039, Min=236, Avg=2939.6, 90=4927, 99=7907, 99.9=12263, 99.99=31343] [UPDATE: Count=842782, Max=33183, Min=289, Avg=1808.3, 90=3003, 99=3991, 99.9=10031, 99.99=29791] 
2023-03-08 15:42:49:666 490 sec: 83693311 operations; 168276.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=841367, Max=59679, Min=233, Avg=2930.92, 90=4875, 99=7843, 99.9=12511, 99.99=28191] [UPDATE: Count=841281, Max=32447, Min=308, Avg=1819.32, 90=3009, 99=3973, 99.9=10111, 99.99=18559] 
2023-03-08 15:42:59:666 500 sec: 85382438 operations; 168912.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=844851, Max=69567, Min=237, Avg=2931.15, 90=4895, 99=7851, 99.9=12807, 99.99=43999] [UPDATE: Count=844316, Max=52191, Min=295, Avg=1800.76, 90=2999, 99=3933, 99.9=10399, 99.99=20287] 
2023-03-08 15:43:09:666 510 sec: 87064177 operations; 168173.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=840346, Max=34655, Min=246, Avg=2927.18, 90=4855, 99=7667, 99.9=12287, 99.99=26783] [UPDATE: Count=841356, Max=28159, Min=280, Avg=1826.63, 90=3007, 99=3943, 99.9=10231, 99.99=25535] 
2023-03-08 15:43:19:666 520 sec: 88736935 operations; 167275.8 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=836249, Max=67327, Min=237, Avg=3001.63, 90=5047, 99=8075, 99.9=13311, 99.99=43039] [UPDATE: Count=836524, Max=46271, Min=298, Avg=1777.3, 90=2985, 99=3901, 99.9=9567, 99.99=19967] 
2023-03-08 15:43:29:666 530 sec: 90426905 operations; 168997 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=845923, Max=71807, Min=236, Avg=2907.4, 90=4815, 99=7603, 99.9=12311, 99.99=34655] [UPDATE: Count=843871, Max=51935, Min=298, Avg=1817.9, 90=3007, 99=3981, 99.9=9975, 99.99=17887] 
2023-03-08 15:43:39:666 540 sec: 92127366 operations; 170046.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=850041, Max=21983, Min=234, Avg=2890.22, 90=4827, 99=7623, 99.9=12895, 99.99=18287] [UPDATE: Count=850575, Max=20015, Min=297, Avg=1814.16, 90=3011, 99=3953, 99.9=10327, 99.99=16831] 
2023-03-08 15:43:49:666 550 sec: 93794271 operations; 166690.5 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=832369, Max=56607, Min=239, Avg=2978.34, 90=4979, 99=8087, 99.9=16047, 99.99=34015] [UPDATE: Count=834550, Max=51231, Min=294, Avg=1818.64, 90=3003, 99=3997, 99.9=10391, 99.99=25615] 
2023-03-08 15:43:59:666 560 sec: 95495304 operations; 170103.3 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=849987, Max=42911, Min=251, Avg=2850.63, 90=4763, 99=7699, 99.9=13415, 99.99=28767] [UPDATE: Count=851148, Max=42015, Min=285, Avg=1849.27, 90=3031, 99=4093, 99.9=10495, 99.99=26879] 
2023-03-08 15:44:09:666 570 sec: 97272124 operations; 177664.23 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=888303, Max=33023, Min=233, Avg=2678.35, 90=4507, 99=6995, 99.9=14855, 99.99=30271] [UPDATE: Count=888587, Max=32687, Min=299, Avg=1820.53, 90=3045, 99=4027, 99.9=11711, 99.99=29247] 
2023-03-08 15:44:19:666 580 sec: 99054023 operations; 178207.72 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=889674, Max=57791, Min=235, Avg=2669.79, 90=4535, 99=7067, 99.9=13303, 99.99=27887] [UPDATE: Count=892240, Max=28927, Min=285, Avg=1817.11, 90=3053, 99=4027, 99.9=11535, 99.99=19743] 
2023-03-08 15:44:29:666 590 sec: 100844728 operations; 179070.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=895598, Max=60031, Min=242, Avg=2645.37, 90=4531, 99=7043, 99.9=12671, 99.99=31279] [UPDATE: Count=895021, Max=38399, Min=284, Avg=1818.12, 90=3055, 99=4025, 99.9=11023, 99.99=20127] 
2023-03-08 15:44:39:666 600 sec: 102635354 operations; 179062.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=894353, Max=28271, Min=235, Avg=2649.64, 90=4559, 99=7199, 99.9=15087, 99.99=26079] [UPDATE: Count=896175, Max=26991, Min=288, Avg=1815.05, 90=3065, 99=4115, 99.9=11087, 99.99=24815] 
2023-03-08 15:44:49:666 610 sec: 104433277 operations; 179792.3 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=898349, Max=63199, Min=236, Avg=2653.51, 90=4595, 99=7471, 99.9=17743, 99.99=35999] [UPDATE: Count=899682, Max=50495, Min=293, Avg=1792.82, 90=3071, 99=4183, 99.9=14423, 99.99=33151] 
2023-03-08 15:44:59:666 620 sec: 106257332 operations; 182405.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=913016, Max=27695, Min=245, Avg=2612.38, 90=4607, 99=7251, 99.9=13287, 99.99=23471] [UPDATE: Count=910911, Max=24799, Min=302, Avg=1768.68, 90=3065, 99=4135, 99.9=10607, 99.99=21807] 
2023-03-08 15:45:09:666 630 sec: 108076290 operations; 181895.8 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=910413, Max=79231, Min=221, Avg=2613.46, 90=4603, 99=7327, 99.9=13647, 99.99=33599] [UPDATE: Count=908573, Max=44287, Min=302, Avg=1780.01, 90=3065, 99=4183, 99.9=11519, 99.99=20143] 
2023-03-08 15:45:19:666 640 sec: 109899945 operations; 182365.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=911056, Max=74495, Min=233, Avg=2614, 90=4603, 99=7359, 99.9=13615, 99.99=41119] [UPDATE: Count=912731, Max=51679, Min=301, Avg=1769.78, 90=3063, 99=4147, 99.9=10695, 99.99=20815] 
2023-03-08 15:45:29:666 650 sec: 111716044 operations; 181609.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=907996, Max=64127, Min=240, Avg=2620.68, 90=4595, 99=7335, 99.9=15327, 99.99=35839] [UPDATE: Count=908101, Max=45247, Min=290, Avg=1780.63, 90=3073, 99=4163, 99.9=12927, 99.99=34495] 
2023-03-08 15:45:39:666 660 sec: 113530516 operations; 181447.2 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=907606, Max=25407, Min=233, Avg=2623.92, 90=4631, 99=7371, 99.9=16463, 99.99=19887] [UPDATE: Count=906697, Max=21967, Min=266, Avg=1780.75, 90=3071, 99=4159, 99.9=14759, 99.99=18735] 
2023-03-08 15:45:49:666 670 sec: 115346227 operations; 181571.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=908040, Max=60831, Min=236, Avg=2611.25, 90=4583, 99=7459, 99.9=16895, 99.99=29439] [UPDATE: Count=907745, Max=50911, Min=300, Avg=1790.89, 90=3095, 99=4275, 99.9=13159, 99.99=25999] 
2023-03-08 15:45:59:666 680 sec: 117175520 operations; 182929.3 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=915041, Max=40639, Min=237, Avg=2563.2, 90=4535, 99=6995, 99.9=13479, 99.99=27215] [UPDATE: Count=914364, Max=36287, Min=294, Avg=1805.89, 90=3235, 99=4251, 99.9=11527, 99.99=25871] 
2023-03-08 15:46:09:666 690 sec: 118994715 operations; 181919.5 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=910266, Max=65791, Min=229, Avg=2568.95, 90=4507, 99=7171, 99.9=15727, 99.99=27503] [UPDATE: Count=908756, Max=42591, Min=305, Avg=1824.17, 90=3235, 99=4299, 99.9=12791, 99.99=23839] 
2023-03-08 15:46:19:666 700 sec: 120815736 operations; 182102.1 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=910547, Max=46623, Min=244, Avg=2571.86, 90=4523, 99=7119, 99.9=12343, 99.99=24783] [UPDATE: Count=910506, Max=32399, Min=286, Avg=1817.43, 90=3221, 99=4215, 99.9=10311, 99.99=18447] 
2023-03-08 15:46:29:666 710 sec: 122648193 operations; 183245.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=915138, Max=24047, Min=247, Avg=2543.14, 90=4483, 99=7175, 99.9=13743, 99.99=18703] [UPDATE: Count=917313, Max=20447, Min=296, Avg=1819.69, 90=3233, 99=4255, 99.9=11375, 99.99=17743] 
2023-03-08 15:46:39:666 720 sec: 124481723 operations; 183353 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=916404, Max=67263, Min=230, Avg=2537.62, 90=4471, 99=7115, 99.9=13279, 99.99=30271] [UPDATE: Count=917126, Max=37823, Min=291, Avg=1821.91, 90=3239, 99=4307, 99.9=11015, 99.99=26719] 
2023-03-08 15:46:49:666 730 sec: 126317980 operations; 183625.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=918609, Max=52191, Min=230, Avg=2538.88, 90=4467, 99=7123, 99.9=11975, 99.99=27407] [UPDATE: Count=917654, Max=32591, Min=291, Avg=1813.63, 90=3241, 99=4295, 99.9=10415, 99.99=19727] 
2023-03-08 15:46:59:666 740 sec: 128149501 operations; 183152.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=916388, Max=39327, Min=231, Avg=2553.22, 90=4495, 99=7199, 99.9=15839, 99.99=34623] [UPDATE: Count=915101, Max=36223, Min=296, Avg=1810.32, 90=3241, 99=4319, 99.9=13895, 99.99=33503] 
2023-03-08 15:47:09:666 750 sec: 129985099 operations; 183559.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=918240, Max=39871, Min=230, Avg=2535.39, 90=4467, 99=7079, 99.9=13215, 99.99=26271] [UPDATE: Count=917402, Max=32655, Min=306, Avg=1818.72, 90=3241, 99=4339, 99.9=11311, 99.99=20031] 
2023-03-08 15:47:19:666 760 sec: 131812906 operations; 182780.7 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=914316, Max=59135, Min=237, Avg=2548.11, 90=4471, 99=7187, 99.9=15007, 99.99=27167] [UPDATE: Count=913478, Max=47871, Min=298, Avg=1824.57, 90=3237, 99=4331, 99.9=11823, 99.99=24719] 
2023-03-08 15:47:29:666 770 sec: 133642327 operations; 182942.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=914677, Max=38463, Min=245, Avg=2543.59, 90=4459, 99=6967, 99.9=16751, 99.99=33855] [UPDATE: Count=914744, Max=35551, Min=305, Avg=1825.52, 90=3231, 99=4255, 99.9=13039, 99.99=32623] 
2023-03-08 15:47:39:666 780 sec: 135479562 operations; 183723.5 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=918422, Max=58463, Min=224, Avg=2544.35, 90=4495, 99=7191, 99.9=13007, 99.99=25535] [UPDATE: Count=918910, Max=52767, Min=276, Avg=1806.31, 90=3239, 99=4315, 99.9=11255, 99.99=23903] 
2023-03-08 15:47:49:666 790 sec: 137317912 operations; 183835 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=919570, Max=59775, Min=243, Avg=2536.61, 90=4475, 99=7063, 99.9=14735, 99.99=40639] [UPDATE: Count=918779, Max=49663, Min=290, Avg=1810.99, 90=3235, 99=4303, 99.9=11343, 99.99=39167] 
2023-03-08 15:47:59:666 800 sec: 139165187 operations; 184727.5 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=923638, Max=28175, Min=237, Avg=2524.08, 90=4483, 99=6935, 99.9=13415, 99.99=23711] [UPDATE: Count=923504, Max=26703, Min=295, Avg=1802.87, 90=3233, 99=4231, 99.9=11935, 99.99=22527] 
2023-03-08 15:48:09:666 810 sec: 141012591 operations; 184740.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=922809, Max=67967, Min=235, Avg=2523.38, 90=4455, 99=6971, 99.9=12527, 99.99=28239] [UPDATE: Count=924633, Max=51647, Min=290, Avg=1803.81, 90=3225, 99=4199, 99.9=11327, 99.99=22383] 
2023-03-08 15:48:19:666 820 sec: 142851855 operations; 183926.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=919074, Max=60671, Min=226, Avg=2532.68, 90=4467, 99=7163, 99.9=15127, 99.99=26527] [UPDATE: Count=920196, Max=42847, Min=279, Avg=1813.57, 90=3229, 99=4291, 99.9=11543, 99.99=23663] 
2023-03-08 15:48:29:666 830 sec: 144699242 operations; 184738.7 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=923991, Max=20975, Min=237, Avg=2539.57, 90=4491, 99=7251, 99.9=11359, 99.99=14255] [UPDATE: Count=923355, Max=15991, Min=293, Avg=1786.8, 90=3211, 99=4211, 99.9=9663, 99.99=12431] 
2023-03-08 15:48:39:666 840 sec: 146413126 operations; 171388.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=856538, Max=40543, Min=238, Avg=2783.41, 90=4647, 99=10351, 99.9=22383, 99.99=31535] [UPDATE: Count=857387, Max=32079, Min=279, Avg=1880.75, 90=3225, 99=4351, 99.9=11191, 99.99=29407] 
2023-03-08 15:48:49:666 850 sec: 147990992 operations; 157786.6 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=788581, Max=31327, Min=237, Avg=3059.81, 90=4671, 99=18079, 99.9=22847, 99.99=25999] [UPDATE: Count=789338, Max=14311, Min=290, Avg=2006.98, 90=3293, 99=4347, 99.9=9631, 99.99=12431] 
2023-03-08 15:48:59:666 860 sec: 149562501 operations; 157150.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=784976, Max=64479, Min=237, Avg=2977.03, 90=4623, 99=9167, 99.9=29087, 99.99=31679] [UPDATE: Count=786488, Max=53663, Min=288, Avg=2110.79, 90=3363, 99=4411, 99.9=10727, 99.99=22127] 
2023-03-08 15:49:09:666 870 sec: 151164319 operations; 160181.8 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=800540, Max=65663, Min=234, Avg=2904.11, 90=4743, 99=8503, 99.9=14551, 99.99=29503] [UPDATE: Count=801237, Max=50911, Min=286, Avg=2086.67, 90=3453, 99=4451, 99.9=11063, 99.99=20223] 
2023-03-08 15:49:19:666 880 sec: 152803389 operations; 163907 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=818815, Max=25199, Min=233, Avg=2854.35, 90=4803, 99=8911, 99.9=14911, 99.99=17391] [UPDATE: Count=820317, Max=12927, Min=293, Avg=2023.4, 90=3453, 99=4423, 99.9=9287, 99.99=11151] 
2023-03-08 15:49:29:666 890 sec: 154418968 operations; 161557.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=806542, Max=52607, Min=237, Avg=2903.28, 90=4991, 99=11951, 99.9=17567, 99.99=30783] [UPDATE: Count=809082, Max=45887, Min=276, Avg=2045.76, 90=3449, 99=4395, 99.9=11703, 99.99=27775] 
2023-03-08 15:49:39:666 900 sec: 156077953 operations; 165898.5 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=829510, Max=115775, Min=228, Avg=2852.06, 90=4847, 99=12887, 99.9=20831, 99.99=55839] [UPDATE: Count=829483, Max=43903, Min=273, Avg=1966.54, 90=3277, 99=4299, 99.9=10919, 99.99=20383] 
2023-03-08 15:49:49:666 910 sec: 157802630 operations; 172467.7 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=861275, Max=24399, Min=230, Avg=2709.92, 90=4787, 99=8967, 99.9=14663, 99.99=19247] [UPDATE: Count=863261, Max=19871, Min=287, Avg=1925.38, 90=3223, 99=4199, 99.9=9751, 99.99=17535] 
2023-03-08 15:49:59:666 920 sec: 159509601 operations; 170697.1 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=852938, Max=64319, Min=230, Avg=2780.02, 90=4751, 99=13639, 99.9=18127, 99.99=30143] [UPDATE: Count=854170, Max=33151, Min=293, Avg=1903.6, 90=3231, 99=4175, 99.9=11879, 99.99=25247] 
2023-03-08 15:50:09:666 930 sec: 161219234 operations; 170963.3 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=855495, Max=52223, Min=240, Avg=2713.59, 90=4651, 99=9799, 99.9=16847, 99.99=31759] [UPDATE: Count=854161, Max=32895, Min=298, Avg=1961.27, 90=3195, 99=4215, 99.9=12359, 99.99=28799] 
2023-03-08 15:50:19:666 940 sec: 162976222 operations; 175698.8 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=877919, Max=27503, Min=244, Avg=2745.66, 90=4695, 99=13199, 99.9=18767, 99.99=21087] [UPDATE: Count=878958, Max=14927, Min=294, Avg=1804.28, 90=3169, 99=4095, 99.9=10383, 99.99=12431] 
2023-03-08 15:50:29:666 950 sec: 164787811 operations; 181158.9 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=905447, Max=55039, Min=234, Avg=2636.27, 90=4583, 99=11359, 99.9=19903, 99.99=27119] [UPDATE: Count=906203, Max=37439, Min=261, Avg=1776.19, 90=3191, 99=4147, 99.9=10711, 99.99=20431] 
2023-03-08 15:50:39:666 960 sec: 166655197 operations; 186738.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=933717, Max=57823, Min=232, Avg=2475.99, 90=4411, 99=8083, 99.9=14783, 99.99=27103] [UPDATE: Count=933731, Max=33151, Min=292, Avg=1804.42, 90=3257, 99=4323, 99.9=11455, 99.99=22175] 
2023-03-08 15:50:49:666 970 sec: 168600875 operations; 194567.8 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=972163, Max=29855, Min=247, Avg=2313.23, 90=4207, 99=6559, 99.9=16071, 99.99=25631] [UPDATE: Count=973524, Max=28671, Min=283, Avg=1794.99, 90=3205, 99=4567, 99.9=13183, 99.99=24655] 
2023-03-08 15:50:59:666 980 sec: 170574794 operations; 197391.9 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=988148, Max=53375, Min=245, Avg=2274.54, 90=4195, 99=6639, 99.9=12863, 99.99=28479] [UPDATE: Count=985762, Max=54207, Min=290, Avg=1774, 90=3057, 99=4495, 99.9=11503, 99.99=27503] 
2023-03-08 15:51:09:666 990 sec: 172538566 operations; 196377.2 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=980863, Max=36223, Min=240, Avg=2287.91, 90=4211, 99=6639, 99.9=15871, 99.99=24015] [UPDATE: Count=982836, Max=43167, Min=294, Avg=1782.61, 90=3035, 99=4475, 99.9=13855, 99.99=20815] 
2023-03-08 15:51:19:666 1000 sec: 174497922 operations; 195935.6 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=980874, Max=33055, Min=245, Avg=2292.54, 90=4211, 99=6731, 99.9=17055, 99.99=29071] [UPDATE: Count=978535, Max=31535, Min=298, Avg=1786.05, 90=3035, 99=4571, 99.9=15519, 99.99=28559] 
2023-03-08 15:51:29:666 1010 sec: 176455450 operations; 195752.8 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=978944, Max=39455, Min=244, Avg=2302.33, 90=4235, 99=6727, 99.9=16031, 99.99=29935] [UPDATE: Count=978608, Max=37247, Min=287, Avg=1780.64, 90=3029, 99=4511, 99.9=14175, 99.99=28847] 
2023-03-08 15:51:39:666 1020 sec: 178403783 operations; 194833.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=973795, Max=99071, Min=237, Avg=2305.1, 90=4187, 99=6687, 99.9=17423, 99.99=95487] [UPDATE: Count=974585, Max=98623, Min=296, Avg=1797.33, 90=3057, 99=4571, 99.9=15719, 99.99=94783] 
2023-03-08 15:51:49:666 1030 sec: 180394028 operations; 199024.5 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=994711, Max=48927, Min=234, Avg=2252.14, 90=4207, 99=6627, 99.9=13743, 99.99=40127] [UPDATE: Count=995636, Max=43967, Min=285, Avg=1763.82, 90=3047, 99=4539, 99.9=12223, 99.99=39071] 
2023-03-08 15:51:59:666 1040 sec: 182377995 operations; 198396.7 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=991605, Max=57439, Min=241, Avg=2264.76, 90=4187, 99=6679, 99.9=16039, 99.99=28847] [UPDATE: Count=992149, Max=34335, Min=277, Avg=1763.95, 90=3053, 99=4647, 99.9=14359, 99.99=27167] 
2023-03-08 15:52:09:666 1050 sec: 184355024 operations; 197702.9 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=988936, Max=25695, Min=230, Avg=2272.06, 90=4199, 99=6883, 99.9=15863, 99.99=22591] [UPDATE: Count=988123, Max=25167, Min=295, Avg=1770.42, 90=3053, 99=4703, 99.9=13575, 99.99=21919] 
2023-03-08 15:52:19:666 1060 sec: 186340900 operations; 198587.6 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=993785, Max=51135, Min=234, Avg=2257.8, 90=4179, 99=6559, 99.9=14471, 99.99=31935] [UPDATE: Count=992206, Max=33567, Min=306, Avg=1766.5, 90=3035, 99=4539, 99.9=12751, 99.99=31151] 
2023-03-08 15:52:29:666 1070 sec: 188343427 operations; 200252.7 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1001710, Max=37855, Min=240, Avg=2239.02, 90=4191, 99=6475, 99.9=13639, 99.99=26111] [UPDATE: Count=1000729, Max=34271, Min=291, Avg=1751.89, 90=3043, 99=4447, 99.9=12751, 99.99=24799] 
2023-03-08 15:52:39:666 1080 sec: 190348449 operations; 200502.2 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1001850, Max=21791, Min=229, Avg=2242.08, 90=4195, 99=6579, 99.9=13407, 99.99=16815] [UPDATE: Count=1003025, Max=21567, Min=280, Avg=1744.35, 90=3073, 99=4623, 99.9=12327, 99.99=16007] 
2023-03-08 15:52:49:666 1090 sec: 192342569 operations; 199412 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=997134, Max=41919, Min=232, Avg=2252.11, 90=4207, 99=6643, 99.9=13167, 99.99=29455] [UPDATE: Count=997029, Max=33919, Min=282, Avg=1755.96, 90=3061, 99=4595, 99.9=11695, 99.99=28143] 
2023-03-08 15:52:59:666 1100 sec: 194340221 operations; 199765.2 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=999012, Max=43583, Min=225, Avg=2222.86, 90=4147, 99=6527, 99.9=14567, 99.99=37919] [UPDATE: Count=998634, Max=39711, Min=276, Avg=1777.98, 90=3099, 99=4735, 99.9=13415, 99.99=37183] 
2023-03-08 15:53:09:666 1110 sec: 196418230 operations; 207800.9 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1039880, Max=36031, Min=209, Avg=2088.02, 90=4059, 99=6603, 99.9=15423, 99.99=31471] [UPDATE: Count=1038142, Max=35359, Min=268, Avg=1757.79, 90=3197, 99=5327, 99.9=14343, 99.99=31087] 
2023-03-08 15:53:19:666 1120 sec: 198518744 operations; 210051.4 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1050113, Max=59039, Min=222, Avg=2064.73, 90=4057, 99=6619, 99.9=15679, 99.99=32559] [UPDATE: Count=1050413, Max=59167, Min=284, Avg=1740.16, 90=3211, 99=5335, 99.9=14247, 99.99=31151] 
2023-03-08 15:53:29:666 1130 sec: 200635717 operations; 211697.3 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1059640, Max=37503, Min=232, Avg=2052.51, 90=4057, 99=6587, 99.9=14375, 99.99=26271] [UPDATE: Count=1057295, Max=36831, Min=280, Avg=1722.41, 90=3191, 99=5243, 99.9=13519, 99.99=25455] 
2023-03-08 15:53:39:666 1140 sec: 202729516 operations; 209379.9 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1046130, Max=35807, Min=233, Avg=2069.76, 90=4083, 99=7051, 99.9=16415, 99.99=30607] [UPDATE: Count=1047694, Max=33183, Min=269, Avg=1747.46, 90=3239, 99=5699, 99.9=15407, 99.99=29791] 
2023-03-08 15:53:49:666 1150 sec: 204821539 operations; 209202.3 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1046315, Max=46335, Min=226, Avg=2074.53, 90=4107, 99=7063, 99.9=15919, 99.99=25311] [UPDATE: Count=1045682, Max=41695, Min=264, Avg=1745.61, 90=3233, 99=5639, 99.9=14351, 99.99=24095] 
2023-03-08 15:53:59:666 1160 sec: 206923324 operations; 210178.5 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1051477, Max=50111, Min=206, Avg=2064.01, 90=4079, 99=6751, 99.9=15735, 99.99=23071] [UPDATE: Count=1050330, Max=41087, Min=276, Avg=1738.33, 90=3225, 99=5367, 99.9=14935, 99.99=20767] 
2023-03-08 15:54:09:666 1170 sec: 209025033 operations; 210170.9 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1050563, Max=25983, Min=234, Avg=2059.4, 90=4083, 99=6907, 99.9=15271, 99.99=21743] [UPDATE: Count=1051127, Max=25439, Min=276, Avg=1743.36, 90=3227, 99=5527, 99.9=14679, 99.99=21551] 
2023-03-08 15:54:19:666 1180 sec: 211127608 operations; 210257.5 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1051411, Max=57855, Min=228, Avg=2053.81, 90=4033, 99=7207, 99.9=15679, 99.99=27279] [UPDATE: Count=1051166, Max=55807, Min=260, Avg=1747.27, 90=3201, 99=5839, 99.9=15055, 99.99=21919] 
2023-03-08 15:54:29:666 1190 sec: 213220554 operations; 209294.6 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1047251, Max=37567, Min=230, Avg=2067.73, 90=4045, 99=7099, 99.9=17311, 99.99=32127] [UPDATE: Count=1045717, Max=36511, Min=270, Avg=1750.6, 90=3193, 99=5699, 99.9=15983, 99.99=31711] 
2023-03-08 15:54:39:666 1200 sec: 215310295 operations; 208974.1 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1042351, Max=56319, Min=220, Avg=2067.15, 90=4045, 99=7079, 99.9=17919, 99.99=29839] [UPDATE: Count=1047353, Max=38431, Min=287, Avg=1757.82, 90=3221, 99=5899, 99.9=16655, 99.99=27631] 
2023-03-08 15:54:49:666 1210 sec: 217369647 operations; 205935.2 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1029043, Max=112575, Min=232, Avg=2101.04, 90=4075, 99=7103, 99.9=17967, 99.99=107903] [UPDATE: Count=1030354, Max=112703, Min=274, Avg=1780.32, 90=3219, 99=5823, 99.9=16479, 99.99=96959] 
2023-03-08 15:54:59:666 1220 sec: 219482813 operations; 211316.6 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1056868, Max=40863, Min=213, Avg=2044.11, 90=4025, 99=6751, 99.9=15263, 99.99=37215] [UPDATE: Count=1056292, Max=41055, Min=279, Avg=1739.24, 90=3203, 99=5575, 99.9=14575, 99.99=36671] 
2023-03-08 15:55:09:666 1230 sec: 221603322 operations; 212050.9 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1060612, Max=55455, Min=224, Avg=2035.79, 90=4003, 99=6839, 99.9=13879, 99.99=22655] [UPDATE: Count=1059889, Max=42367, Min=284, Avg=1731.65, 90=3185, 99=5507, 99.9=13055, 99.99=18847] 
2023-03-08 15:55:19:666 1240 sec: 223737811 operations; 213448.9 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1067065, Max=56063, Min=236, Avg=2015.77, 90=3937, 99=7131, 99.9=14775, 99.99=22831] [UPDATE: Count=1067404, Max=48223, Min=270, Avg=1728.49, 90=3117, 99=5907, 99.9=13895, 99.99=20447] 
2023-03-08 15:55:29:666 1250 sec: 225860655 operations; 212284.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1062542, Max=42783, Min=236, Avg=2024.96, 90=3931, 99=7315, 99.9=15927, 99.99=28079] [UPDATE: Count=1060325, Max=41631, Min=278, Avg=1739.56, 90=3111, 99=6119, 99.9=15503, 99.99=27791] 
2023-03-08 15:55:39:666 1260 sec: 228002269 operations; 214161.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1070285, Max=43167, Min=234, Avg=2004.58, 90=3883, 99=7135, 99.9=14815, 99.99=23791] [UPDATE: Count=1071333, Max=39007, Min=280, Avg=1727.28, 90=3075, 99=5983, 99.9=13991, 99.99=21727] 
2023-03-08 15:55:49:666 1270 sec: 230127986 operations; 212571.7 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1062190, Max=51295, Min=226, Avg=2016.77, 90=3879, 99=7275, 99.9=17551, 99.99=38111] [UPDATE: Count=1063501, Max=49183, Min=283, Avg=1743.02, 90=3087, 99=6107, 99.9=16655, 99.99=37759] 
2023-03-08 15:55:59:666 1280 sec: 232265902 operations; 213791.6 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1070069, Max=31103, Min=225, Avg=2010.1, 90=3885, 99=7179, 99.9=15759, 99.99=26527] [UPDATE: Count=1067875, Max=28911, Min=283, Avg=1727.81, 90=3067, 99=5979, 99.9=14831, 99.99=26127] 
2023-03-08 15:56:09:666 1290 sec: 234376768 operations; 211086.6 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1055234, Max=50015, Min=228, Avg=2039.47, 90=3909, 99=7547, 99.9=21903, 99.99=36063] [UPDATE: Count=1055678, Max=43071, Min=277, Avg=1746.48, 90=3069, 99=6339, 99.9=17695, 99.99=35103] 
2023-03-08 15:56:19:666 1300 sec: 236512554 operations; 213578.6 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1069063, Max=27487, Min=231, Avg=2012.39, 90=3881, 99=7319, 99.9=15343, 99.99=22703] [UPDATE: Count=1066674, Max=27599, Min=284, Avg=1729.23, 90=3053, 99=6015, 99.9=14767, 99.99=22671] 
2023-03-08 15:56:29:666 1310 sec: 238623020 operations; 211046.6 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1055550, Max=41951, Min=232, Avg=2030.82, 90=3729, 99=6607, 99.9=15407, 99.99=29343] [UPDATE: Count=1054918, Max=42911, Min=276, Avg=1756.02, 90=2933, 99=5335, 99.9=14463, 99.99=28383] 
2023-03-08 15:56:39:666 1320 sec: 240657160 operations; 203414 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1016439, Max=49727, Min=229, Avg=2105.71, 90=3971, 99=6179, 99.9=14943, 99.99=30943] [UPDATE: Count=1017676, Max=40063, Min=279, Avg=1823.49, 90=3143, 99=4931, 99.9=13807, 99.99=30431] 
2023-03-08 15:56:49:666 1330 sec: 242635760 operations; 197860 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=988704, Max=28191, Min=218, Avg=2180.29, 90=4093, 99=6059, 99.9=12943, 99.99=23391] [UPDATE: Count=989887, Max=26735, Min=276, Avg=1859.45, 90=3263, 99=4683, 99.9=11903, 99.99=22799] 
2023-03-08 15:56:59:666 1340 sec: 244584431 operations; 194867.1 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=974425, Max=57183, Min=224, Avg=2224.79, 90=4131, 99=6171, 99.9=12135, 99.99=19743] [UPDATE: Count=974230, Max=47903, Min=281, Avg=1876.67, 90=3323, 99=4511, 99.9=11423, 99.99=21423] 
2023-03-08 15:57:09:666 1350 sec: 246471065 operations; 188663.4 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=944935, Max=38815, Min=233, Avg=2351.9, 90=4339, 99=8855, 99.9=17311, 99.99=22095] [UPDATE: Count=941711, Max=27983, Min=285, Avg=1883.51, 90=3377, 99=4419, 99.9=9935, 99.99=18671] 
2023-03-08 15:57:19:666 1360 sec: 248260239 operations; 178917.4 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=894219, Max=41599, Min=230, Avg=2558.98, 90=4575, 99=14855, 99.9=20751, 99.99=28639] [UPDATE: Count=894950, Max=30415, Min=280, Avg=1908.72, 90=3429, 99=4359, 99.9=10783, 99.99=27151] 
2023-03-08 15:57:29:666 1370 sec: 249994010 operations; 173377.1 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=867725, Max=38719, Min=227, Avg=2605.39, 90=4587, 99=12791, 99.9=20479, 99.99=25295] [UPDATE: Count=866051, Max=35071, Min=272, Avg=2004.79, 90=3459, 99=4483, 99.9=11391, 99.99=23647] 
2023-03-08 15:57:39:666 1380 sec: 251636459 operations; 164244.9 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=821157, Max=44671, Min=234, Avg=2703.56, 90=4631, 99=8155, 99.9=14023, 99.99=28239] [UPDATE: Count=821282, Max=46207, Min=261, Avg=2163.44, 90=3491, 99=4539, 99.9=11879, 99.99=26735] 
2023-03-08 15:57:49:666 1390 sec: 253220357 operations; 158389.8 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=792383, Max=18751, Min=227, Avg=2817.5, 90=4727, 99=8327, 99.9=12063, 99.99=14815] [UPDATE: Count=791509, Max=14991, Min=259, Avg=2229.16, 90=3481, 99=4515, 99.9=9879, 99.99=12023] 
2023-03-08 15:57:59:666 1400 sec: 254694975 operations; 147461.8 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=737876, Max=41407, Min=223, Avg=3054.65, 90=4911, 99=9095, 99.9=16207, 99.99=29183] [UPDATE: Count=736805, Max=33951, Min=288, Avg=2366.23, 90=3501, 99=4519, 99.9=9927, 99.99=27327] 
2023-03-08 15:58:09:666 1410 sec: 256209653 operations; 151467.8 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=757328, Max=57183, Min=226, Avg=2988.2, 90=4963, 99=9159, 99.9=18751, 99.99=50943] [UPDATE: Count=757309, Max=53119, Min=282, Avg=2289.63, 90=3379, 99=4463, 99.9=10807, 99.99=50207] 
2023-03-08 15:58:19:666 1420 sec: 257823071 operations; 161341.8 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=806404, Max=22655, Min=234, Avg=2757.54, 90=4543, 99=8079, 99.9=12247, 99.99=17679] [UPDATE: Count=807038, Max=14359, Min=289, Avg=2197.32, 90=3323, 99=4451, 99.9=9807, 99.99=11903] 
2023-03-08 15:58:29:666 1430 sec: 259680798 operations; 185772.7 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=928083, Max=40351, Min=229, Avg=2352.58, 90=4163, 99=8111, 99.9=13935, 99.99=23119] [UPDATE: Count=929750, Max=32735, Min=274, Avg=1950.35, 90=3031, 99=4479, 99.9=11327, 99.99=18783] 
2023-03-08 15:58:39:666 1440 sec: 261662011 operations; 198121.3 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=990889, Max=37695, Min=212, Avg=2139.53, 90=3989, 99=5975, 99.9=16479, 99.99=28159] [UPDATE: Count=990254, Max=37023, Min=270, Avg=1894.58, 90=2969, 99=4771, 99.9=16031, 99.99=27423] 
2023-03-08 15:58:49:666 1450 sec: 263730508 operations; 206849.7 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=1035440, Max=19039, Min=223, Avg=2051.43, 90=3957, 99=6027, 99.9=12271, 99.99=15663] [UPDATE: Count=1033033, Max=17551, Min=284, Avg=1812.1, 90=2923, 99=4739, 99.9=11791, 99.99=15287] 
2023-03-08 15:58:59:666 1460 sec: 265823382 operations; 209287.4 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=1045429, Max=41759, Min=224, Avg=2010.55, 90=3791, 99=6827, 99.9=17135, 99.99=37855] [UPDATE: Count=1047476, Max=50303, Min=284, Avg=1808.29, 90=2917, 99=5939, 99.9=16175, 99.99=37247] 
2023-03-08 15:59:09:666 1470 sec: 267951890 operations; 212850.8 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1063765, Max=45951, Min=235, Avg=1954.8, 90=3559, 99=6627, 99.9=16639, 99.99=28719] [UPDATE: Count=1064681, Max=35263, Min=280, Avg=1800.17, 90=2897, 99=6175, 99.9=15975, 99.99=28351] 
2023-03-08 15:59:19:666 1480 sec: 270100738 operations; 214884.8 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1074437, Max=32303, Min=222, Avg=1949.73, 90=3661, 99=6767, 99.9=16063, 99.99=27711] [UPDATE: Count=1074420, Max=32959, Min=256, Avg=1769.38, 90=2901, 99=6067, 99.9=15535, 99.99=27679] 
2023-03-08 15:59:29:666 1490 sec: 272237160 operations; 213642.2 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1069082, Max=42015, Min=224, Avg=1974.97, 90=3717, 99=7159, 99.9=16191, 99.99=33855] [UPDATE: Count=1067332, Max=37279, Min=268, Avg=1765.7, 90=2893, 99=6219, 99.9=15583, 99.99=33471] 
2023-03-08 15:59:39:666 1500 sec: 274399253 operations; 216209.3 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1081556, Max=32463, Min=231, Avg=1925.84, 90=3523, 99=7595, 99.9=16799, 99.99=27663] [UPDATE: Count=1080537, Max=32831, Min=280, Avg=1770.38, 90=2937, 99=7127, 99.9=16343, 99.99=27503] 
2023-03-08 15:59:49:666 1510 sec: 276599147 operations; 219989.4 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=1098821, Max=46847, Min=224, Avg=1883.37, 90=3399, 99=7347, 99.9=16239, 99.99=27711] [UPDATE: Count=1101086, Max=50143, Min=275, Avg=1749.62, 90=2959, 99=6923, 99.9=15391, 99.99=26735] 
2023-03-08 15:59:59:666 1520 sec: 278807508 operations; 220836.1 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=1103804, Max=40095, Min=228, Avg=1872.09, 90=3355, 99=7275, 99.9=16199, 99.99=31919] [UPDATE: Count=1104552, Max=48703, Min=253, Avg=1746.8, 90=3007, 99=6871, 99.9=15367, 99.99=31615] 
2023-03-08 16:00:09:666 1530 sec: 281028436 operations; 222092.8 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=1108884, Max=30143, Min=213, Avg=1862.12, 90=3337, 99=7407, 99.9=16175, 99.99=23423] [UPDATE: Count=1112073, Max=26479, Min=269, Avg=1736.37, 90=2987, 99=7003, 99.9=15807, 99.99=23295] 
2023-03-08 16:00:19:666 1540 sec: 283231226 operations; 220279 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=1100928, Max=43551, Min=227, Avg=1869.24, 90=3291, 99=8099, 99.9=17647, 99.99=35071] [UPDATE: Count=1101836, Max=43487, Min=279, Avg=1758.79, 90=3055, 99=7731, 99.9=17359, 99.99=34623] 
2023-03-08 16:00:29:666 1550 sec: 285442879 operations; 221165.3 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=1106353, Max=45759, Min=228, Avg=1863.34, 90=3267, 99=8263, 99.9=16975, 99.99=29727] [UPDATE: Count=1105304, Max=40255, Min=269, Avg=1750.09, 90=3025, 99=7843, 99.9=16247, 99.99=27871] 
2023-03-08 16:00:39:666 1560 sec: 287654730 operations; 221185.1 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=1106602, Max=33247, Min=233, Avg=1859.23, 90=3261, 99=8099, 99.9=16575, 99.99=27775] [UPDATE: Count=1105238, Max=33343, Min=279, Avg=1753.79, 90=3033, 99=7695, 99.9=16215, 99.99=27247] 
2023-03-08 16:00:49:666 1570 sec: 289876607 operations; 222187.7 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=1110342, Max=45599, Min=232, Avg=1850.4, 90=3241, 99=7427, 99.9=17071, 99.99=40607] [UPDATE: Count=1111661, Max=45599, Min=271, Avg=1746.43, 90=3031, 99=7071, 99.9=16927, 99.99=40831] 
2023-03-08 16:00:59:665 1580 sec: 292097639 operations; 222103.2 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=1110470, Max=48095, Min=219, Avg=1855.09, 90=3241, 99=7543, 99.9=18959, 99.99=29615] [UPDATE: Count=1110441, Max=44127, Min=283, Avg=1743.1, 90=3017, 99=7139, 99.9=17999, 99.99=27999] 
2023-03-08 16:01:09:666 1590 sec: 294319736 operations; 222209.7 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=1110111, Max=34239, Min=236, Avg=1851.33, 90=3253, 99=7511, 99.9=15799, 99.99=28735] [UPDATE: Count=1111984, Max=35327, Min=285, Avg=1745.34, 90=3041, 99=7143, 99.9=15695, 99.99=28799] 
2023-03-08 16:01:19:666 1600 sec: 296528022 operations; 220828.6 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=1103819, Max=44287, Min=220, Avg=1863.08, 90=3255, 99=7711, 99.9=17279, 99.99=26095] [UPDATE: Count=1104482, Max=38911, Min=280, Avg=1756.01, 90=3043, 99=7327, 99.9=17087, 99.99=25279] 
2023-03-08 16:01:29:666 1610 sec: 298749378 operations; 222135.6 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=1111478, Max=28911, Min=223, Avg=1850.93, 90=3267, 99=7355, 99.9=14215, 99.99=18991] [UPDATE: Count=1109848, Max=23599, Min=280, Avg=1746.5, 90=3055, 99=7003, 99.9=13775, 99.99=18383] 
2023-03-08 16:01:39:666 1620 sec: 300950012 operations; 220063.4 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=1099687, Max=39519, Min=226, Avg=1870.92, 90=3275, 99=7495, 99.9=16751, 99.99=31967] [UPDATE: Count=1100960, Max=39295, Min=276, Avg=1760.84, 90=3055, 99=7079, 99.9=16175, 99.99=31647] 
2023-03-08 16:01:49:666 1630 sec: 303163545 operations; 221353.3 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=1105614, Max=34623, Min=237, Avg=1857.6, 90=3257, 99=7295, 99.9=16119, 99.99=27647] [UPDATE: Count=1107945, Max=32655, Min=270, Avg=1752.82, 90=3051, 99=6975, 99.9=16087, 99.99=27599] 
2023-03-08 16:01:59:666 1640 sec: 305359285 operations; 219574 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=1097932, Max=47583, Min=222, Avg=1874.58, 90=3277, 99=7711, 99.9=17311, 99.99=28815] [UPDATE: Count=1097812, Max=38175, Min=271, Avg=1765.05, 90=3059, 99=7255, 99.9=16895, 99.99=28111] 
2023-03-08 16:02:09:666 1650 sec: 307561523 operations; 220223.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=1102310, Max=41087, Min=218, Avg=1869.27, 90=3257, 99=7331, 99.9=16959, 99.99=37183] [UPDATE: Count=1099894, Max=40607, Min=268, Avg=1759.57, 90=3045, 99=6923, 99.9=16447, 99.99=37343] 
2023-03-08 16:02:19:666 1660 sec: 309766205 operations; 220468.2 current ops/sec; est completion in 1 hour 1 minute [READ: Count=1103705, Max=39423, Min=222, Avg=1864.75, 90=3271, 99=7599, 99.9=16495, 99.99=26479] [UPDATE: Count=1101013, Max=40447, Min=273, Avg=1759.95, 90=3055, 99=7263, 99.9=16263, 99.99=26495] 
2023-03-08 16:02:29:666 1670 sec: 311976443 operations; 221023.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=1104789, Max=30943, Min=233, Avg=1863.94, 90=3269, 99=7563, 99.9=14671, 99.99=19071] [UPDATE: Count=1105442, Max=22447, Min=274, Avg=1751.88, 90=3053, 99=7155, 99.9=14295, 99.99=18095] 
2023-03-08 16:02:39:666 1680 sec: 314194134 operations; 221769.1 current ops/sec; est completion in 1 hour 1 minute [READ: Count=1109179, Max=33215, Min=232, Avg=1855.39, 90=3261, 99=7463, 99.9=14823, 99.99=21903] [UPDATE: Count=1108630, Max=30607, Min=274, Avg=1748.12, 90=3049, 99=7091, 99.9=14431, 99.99=20511] 
2023-03-08 16:02:49:666 1690 sec: 316392672 operations; 219853.8 current ops/sec; est completion in 1 hour [READ: Count=1100305, Max=52927, Min=230, Avg=1872.13, 90=3243, 99=8055, 99.9=17919, 99.99=29983] [UPDATE: Count=1098099, Max=48447, Min=286, Avg=1762.44, 90=3003, 99=7591, 99.9=17279, 99.99=29583] 
2023-03-08 16:02:59:666 1700 sec: 318591413 operations; 219874.1 current ops/sec; est completion in 1 hour [READ: Count=1100744, Max=34175, Min=234, Avg=1870.79, 90=3281, 99=7751, 99.9=16079, 99.99=25583] [UPDATE: Count=1097993, Max=33983, Min=276, Avg=1764.25, 90=3053, 99=7411, 99.9=15767, 99.99=25519] 
2023-03-08 16:03:09:666 1710 sec: 320794925 operations; 220351.2 current ops/sec; est completion in 1 hour [READ: Count=1102056, Max=40351, Min=230, Avg=1869.38, 90=3249, 99=7763, 99.9=17647, 99.99=29423] [UPDATE: Count=1101470, Max=40607, Min=269, Avg=1757.42, 90=3013, 99=7351, 99.9=16991, 99.99=28399] 
2023-03-08 16:03:19:666 1720 sec: 323015040 operations; 222011.5 current ops/sec; est completion in 1 hour [READ: Count=1109703, Max=46079, Min=229, Avg=1856.94, 90=3261, 99=7335, 99.9=16223, 99.99=34751] [UPDATE: Count=1110391, Max=42335, Min=276, Avg=1742.6, 90=3015, 99=6963, 99.9=15671, 99.99=34335] 
2023-03-08 16:03:29:666 1730 sec: 325209036 operations; 219399.6 current ops/sec; est completion in 59 minutes [READ: Count=1096589, Max=37535, Min=240, Avg=1875.17, 90=3271, 99=7791, 99.9=16719, 99.99=28223] [UPDATE: Count=1097423, Max=37087, Min=273, Avg=1767.6, 90=3061, 99=7411, 99.9=16623, 99.99=27983] 
2023-03-08 16:03:39:666 1740 sec: 327408223 operations; 219918.7 current ops/sec; est completion in 59 minutes [READ: Count=1098321, Max=36703, Min=234, Avg=1873.82, 90=3289, 99=7583, 99.9=15607, 99.99=26255] [UPDATE: Count=1100850, Max=50207, Min=279, Avg=1760.25, 90=3017, 99=7187, 99.9=15191, 99.99=25727] 
2023-03-08 16:03:49:666 1750 sec: 329551912 operations; 214368.9 current ops/sec; est completion in 59 minutes [READ: Count=1070788, Max=38815, Min=232, Avg=1924.01, 90=3385, 99=6955, 99.9=16895, 99.99=27439] [UPDATE: Count=1072917, Max=41183, Min=279, Avg=1804.25, 90=3027, 99=6631, 99.9=16151, 99.99=27279] 
2023-03-08 16:03:59:666 1760 sec: 331626636 operations; 207472.4 current ops/sec; est completion in 59 minutes [READ: Count=1037689, Max=46943, Min=231, Avg=2012.63, 90=3899, 99=6423, 99.9=14327, 99.99=29935] [UPDATE: Count=1037003, Max=41663, Min=270, Avg=1839.44, 90=3277, 99=5787, 99.9=13783, 99.99=29343] 
2023-03-08 16:04:09:666 1770 sec: 333706772 operations; 208013.6 current ops/sec; est completion in 58 minutes [READ: Count=1039866, Max=44959, Min=229, Avg=2004.5, 90=3837, 99=6215, 99.9=16343, 99.99=23263] [UPDATE: Count=1040309, Max=32799, Min=274, Avg=1837.73, 90=3235, 99=5639, 99.9=15967, 99.99=21519] 
2023-03-08 16:04:19:666 1780 sec: 335832236 operations; 212546.4 current ops/sec; est completion in 58 minutes [READ: Count=1061922, Max=27151, Min=239, Avg=1951.65, 90=3429, 99=6127, 99.9=15231, 99.99=19631] [UPDATE: Count=1063497, Max=26623, Min=281, Avg=1808.63, 90=2971, 99=5791, 99.9=14743, 99.99=18463] 
2023-03-08 16:04:29:666 1790 sec: 337956725 operations; 212448.9 current ops/sec; est completion in 58 minutes [READ: Count=1062392, Max=39039, Min=228, Avg=1957.82, 90=3581, 99=6163, 99.9=16927, 99.99=31759] [UPDATE: Count=1062129, Max=38047, Min=277, Avg=1804.03, 90=3057, 99=5691, 99.9=16447, 99.99=31503] 
2023-03-08 16:04:39:666 1800 sec: 340084949 operations; 212822.4 current ops/sec; est completion in 58 minutes [READ: Count=1063772, Max=36095, Min=239, Avg=1946.31, 90=3525, 99=6515, 99.9=17631, 99.99=31967] [UPDATE: Count=1064545, Max=35807, Min=280, Avg=1808.99, 90=3105, 99=6171, 99.9=17183, 99.99=31999] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-92 to complete. Workload status: true
2023-03-08 16:04:41:946 1802 sec: 340092220 operations; 3187.64 current ops/sec; est completion in 58 minutes [READ: Count=3650, Max=20431, Min=264, Avg=2614.94, 90=4711, 99=16207, 99.9=18735, 99.99=20431] [CLEANUP: Count=400, Max=2222079, Min=0, Avg=5553.8, 90=2, 99=8, 99.9=2222079, 99.99=2222079] [UPDATE: Count=3334, Max=19167, Min=318, Avg=2623.76, 90=4863, 99=16591, 99.9=18255, 99.99=19167] 
[OVERALL], RunTime(ms), 1802279
[OVERALL], Throughput(ops/sec), 188701.20552922162
[TOTAL_GCS_PS_Scavenge], Count, 3300
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18574
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0305840549659626
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 104
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.005770471719417471
[TOTAL_GCs], Count, 3302
[TOTAL_GC_TIME], Time(ms), 18678
[TOTAL_GC_TIME_%], Time(%), 1.03635452668538
[READ], Operations, 170040965
[READ], AverageLatency(us), 2422.3299802138854
[READ], MinLatency(us), 206
[READ], MaxLatency(us), 419327
[READ], 95thPercentileLatency(us), 5163
[READ], 99thPercentileLatency(us), 8003
[READ], Return=OK, 170040965
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5553.8
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 8
[UPDATE], Operations, 170051255
[UPDATE], AverageLatency(us), 1806.2994061055297
[UPDATE], MinLatency(us), 253
[UPDATE], MaxLatency(us), 413439
[UPDATE], 95thPercentileLatency(us), 3529
[UPDATE], 99thPercentileLatency(us), 5151
[UPDATE], Return=OK, 170051255
