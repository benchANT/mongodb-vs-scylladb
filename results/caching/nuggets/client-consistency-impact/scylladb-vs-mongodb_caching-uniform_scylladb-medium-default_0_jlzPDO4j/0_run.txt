bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.52.203.254,52.8.171.202,54.193.90.214 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=1S6yKvFf7BeGPqU -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.52.203.254,52.8.171.202,54.193.90.214 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=1S6yKvFf7BeGPqU -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.52.203.254,52.8.171.202,54.193.90.214 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=1S6yKvFf7BeGPqU -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-01 13:32:34:195 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.52.203.254:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.177.99.41:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.193.90.214:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.8.171.202:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /50.18.41.90:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.193.75.65:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 551557a9-1137-481e-a061-8f5be89906d2

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.193.75.65; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.52.203.254; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.8.171.202; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.193.90.214; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.177.99.41; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /50.18.41.90; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
2023-03-01 13:32:44:179 10 sec: 1287825 operations; 128782.5 current ops/sec; est completion in 2 hours 9 minutes [READ: Count=643333, Max=217855, Min=359, Avg=3897.04, 90=6315, 99=14807, 99.9=39007, 99.99=181887] [UPDATE: Count=646546, Max=205183, Min=294, Avg=1847.4, 90=2819, 99=10343, 99.9=32927, 99.99=181119] 
2023-03-01 13:32:54:179 20 sec: 2905578 operations; 161775.3 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=810390, Max=30463, Min=350, Avg=3471.53, 90=5879, 99=9263, 99.9=14199, 99.99=23007] [UPDATE: Count=805975, Max=25599, Min=280, Avg=1462.94, 90=2487, 99=3459, 99.9=8863, 99.99=14967] 
2023-03-01 13:33:04:179 30 sec: 4526699 operations; 162112.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=810143, Max=72831, Min=349, Avg=3471.17, 90=5871, 99=9095, 99.9=13295, 99.99=37215] [UPDATE: Count=810740, Max=47647, Min=279, Avg=1461.26, 90=2481, 99=3443, 99.9=8655, 99.99=18175] 
2023-03-01 13:33:14:179 40 sec: 6144951 operations; 161825.2 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=809857, Max=77375, Min=357, Avg=3474.29, 90=5823, 99=9255, 99.9=13639, 99.99=36959] [UPDATE: Count=808357, Max=37791, Min=290, Avg=1462.92, 90=2487, 99=3465, 99.9=9151, 99.99=16975] 
2023-03-01 13:33:24:179 50 sec: 7752765 operations; 160781.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=804804, Max=22287, Min=363, Avg=3501.37, 90=5867, 99=9247, 99.9=13223, 99.99=16671] [UPDATE: Count=802998, Max=13959, Min=289, Avg=1468.4, 90=2491, 99=3457, 99.9=9151, 99.99=12039] 
2023-03-01 13:33:34:179 60 sec: 9367062 operations; 161429.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=806798, Max=71359, Min=360, Avg=3494.49, 90=5883, 99=9455, 99.9=14863, 99.99=33855] [UPDATE: Count=807382, Max=41375, Min=276, Avg=1458.32, 90=2477, 99=3469, 99.9=10167, 99.99=18879] 
2023-03-01 13:33:44:179 70 sec: 10977862 operations; 161080 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=806184, Max=73151, Min=350, Avg=3494.09, 90=5887, 99=9231, 99.9=13807, 99.99=33631] [UPDATE: Count=804680, Max=52095, Min=269, Avg=1466.87, 90=2485, 99=3445, 99.9=9103, 99.99=20463] 
2023-03-01 13:33:54:179 80 sec: 12598651 operations; 162078.9 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=809717, Max=20847, Min=355, Avg=3476.22, 90=5863, 99=9495, 99.9=13503, 99.99=16527] [UPDATE: Count=810946, Max=14231, Min=286, Avg=1457.61, 90=2477, 99=3463, 99.9=10047, 99.99=12487] 
2023-03-01 13:34:04:179 90 sec: 14199012 operations; 160036.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=800436, Max=82559, Min=321, Avg=3524.92, 90=5931, 99=9631, 99.9=18271, 99.99=43935] [UPDATE: Count=800028, Max=52927, Min=282, Avg=1469.97, 90=2485, 99=3473, 99.9=10295, 99.99=25663] 
2023-03-01 13:34:14:179 100 sec: 15812432 operations; 161342 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=807223, Max=77567, Min=337, Avg=3496.19, 90=5899, 99=9199, 99.9=13583, 99.99=39359] [UPDATE: Count=806143, Max=30287, Min=273, Avg=1457.19, 90=2475, 99=3449, 99.9=9079, 99.99=17871] 
2023-03-01 13:34:24:179 110 sec: 17418359 operations; 160592.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=801885, Max=31423, Min=348, Avg=3516.66, 90=5955, 99=9463, 99.9=14703, 99.99=27215] [UPDATE: Count=804008, Max=27807, Min=282, Avg=1464.28, 90=2483, 99=3477, 99.9=9935, 99.99=24815] 
2023-03-01 13:34:34:179 120 sec: 19013909 operations; 159555 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=799327, Max=58239, Min=351, Avg=3534.04, 90=5991, 99=9735, 99.9=15151, 99.99=28975] [UPDATE: Count=796296, Max=40383, Min=287, Avg=1472.23, 90=2489, 99=3483, 99.9=9639, 99.99=18111] 
2023-03-01 13:34:44:179 130 sec: 20589055 operations; 157514.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=788317, Max=49215, Min=361, Avg=3568.13, 90=5967, 99=9535, 99.9=14519, 99.99=30847] [UPDATE: Count=786828, Max=43007, Min=262, Avg=1505.29, 90=2517, 99=3493, 99.9=9759, 99.99=19471] 
2023-03-01 13:34:54:179 140 sec: 22203896 operations; 161484.1 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=807159, Max=19135, Min=352, Avg=3482.61, 90=5879, 99=9119, 99.9=12183, 99.99=14807] [UPDATE: Count=807557, Max=13383, Min=295, Avg=1468.62, 90=2501, 99=3469, 99.9=8711, 99.99=11383] 
2023-03-01 13:35:04:179 150 sec: 23798922 operations; 159502.6 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=796711, Max=70271, Min=361, Avg=3548.06, 90=6003, 99=10847, 99.9=15695, 99.99=34271] [UPDATE: Count=798363, Max=43455, Min=295, Avg=1466.02, 90=2483, 99=3457, 99.9=9991, 99.99=16671] 
2023-03-01 13:35:14:179 160 sec: 25379701 operations; 158077.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=790883, Max=48927, Min=334, Avg=3602.32, 90=6123, 99=11719, 99.9=16399, 99.99=30831] [UPDATE: Count=789925, Max=27119, Min=288, Avg=1453.51, 90=2467, 99=3445, 99.9=8999, 99.99=16815] 
2023-03-01 13:35:24:179 170 sec: 26951240 operations; 157153.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=786396, Max=24639, Min=355, Avg=3614.62, 90=6147, 99=11807, 99.9=16431, 99.99=20559] [UPDATE: Count=785348, Max=19183, Min=290, Avg=1470.9, 90=2481, 99=3469, 99.9=9335, 99.99=16895] 
2023-03-01 13:35:34:179 180 sec: 28534236 operations; 158299.6 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=791526, Max=73791, Min=334, Avg=3585.74, 90=6079, 99=11159, 99.9=16943, 99.99=33119] [UPDATE: Count=791207, Max=48191, Min=277, Avg=1464.16, 90=2481, 99=3463, 99.9=9431, 99.99=25423] 
2023-03-01 13:35:44:179 190 sec: 30101378 operations; 156714.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=784346, Max=68351, Min=350, Avg=3631.78, 90=6155, 99=12015, 99.9=16719, 99.99=34239] [UPDATE: Count=782996, Max=29999, Min=290, Avg=1467.54, 90=2473, 99=3455, 99.9=9071, 99.99=18239] 
2023-03-01 13:35:54:179 200 sec: 31727042 operations; 162566.4 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=813112, Max=25247, Min=355, Avg=3457.46, 90=5839, 99=9303, 99.9=13311, 99.99=19471] [UPDATE: Count=812344, Max=19999, Min=288, Avg=1459.24, 90=2481, 99=3447, 99.9=8943, 99.99=16623] 
2023-03-01 13:36:04:179 210 sec: 33329538 operations; 160249.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=801305, Max=49087, Min=358, Avg=3522.99, 90=5935, 99=9943, 99.9=14447, 99.99=31343] [UPDATE: Count=801198, Max=44063, Min=287, Avg=1465.61, 90=2479, 99=3485, 99.9=9463, 99.99=17951] 
2023-03-01 13:36:14:179 220 sec: 34892626 operations; 156308.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=781443, Max=50111, Min=347, Avg=3653.53, 90=6159, 99=12167, 99.9=17247, 99.99=33183] [UPDATE: Count=781631, Max=31007, Min=267, Avg=1461.19, 90=2467, 99=3449, 99.9=9495, 99.99=16751] 
2023-03-01 13:36:24:179 230 sec: 36426123 operations; 153349.7 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=767284, Max=25023, Min=352, Avg=3723.41, 90=6307, 99=11983, 99.9=15927, 99.99=19055] [UPDATE: Count=766179, Max=14199, Min=282, Avg=1488.11, 90=2491, 99=3447, 99.9=8639, 99.99=10959] 
2023-03-01 13:36:34:179 240 sec: 38012014 operations; 158589.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=792455, Max=77567, Min=354, Avg=3569.87, 90=5967, 99=10423, 99.9=15415, 99.99=35903] [UPDATE: Count=793498, Max=45631, Min=274, Avg=1472.74, 90=2487, 99=3459, 99.9=9327, 99.99=23055] 
2023-03-01 13:36:44:179 250 sec: 39568870 operations; 155685.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=778425, Max=25631, Min=331, Avg=3646.12, 90=6099, 99=11479, 99.9=15599, 99.99=19551] [UPDATE: Count=778487, Max=14223, Min=287, Avg=1488.71, 90=2503, 99=3445, 99.9=8391, 99.99=11511] 
2023-03-01 13:36:54:179 260 sec: 41086270 operations; 151740 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=756990, Max=63007, Min=346, Avg=3796.49, 90=6635, 99=12607, 99.9=17199, 99.99=32287] [UPDATE: Count=760393, Max=46495, Min=266, Avg=1477.35, 90=2479, 99=3449, 99.9=8423, 99.99=17711] 
2023-03-01 13:37:04:179 270 sec: 42636413 operations; 155014.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=775246, Max=30079, Min=347, Avg=3696, 90=6355, 99=12215, 99.9=16959, 99.99=20975] [UPDATE: Count=774858, Max=19535, Min=265, Avg=1460.77, 90=2471, 99=3471, 99.9=8991, 99.99=16751] 
2023-03-01 13:37:14:179 280 sec: 44252239 operations; 161582.6 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=808571, Max=67967, Min=348, Avg=3489.65, 90=5887, 99=9711, 99.9=14567, 99.99=35455] [UPDATE: Count=807243, Max=51775, Min=278, Avg=1456.21, 90=2489, 99=3499, 99.9=8951, 99.99=18287] 
2023-03-01 13:37:24:179 290 sec: 45853016 operations; 160077.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=799776, Max=78719, Min=360, Avg=3513.07, 90=5899, 99=9367, 99.9=14135, 99.99=51231] [UPDATE: Count=801011, Max=42207, Min=281, Avg=1482.64, 90=2611, 99=3615, 99.9=9975, 99.99=18047] 
2023-03-01 13:37:34:184 300 sec: 47453841 operations; 160002.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=800211, Max=26095, Min=362, Avg=3525.92, 90=5963, 99=10103, 99.9=14015, 99.99=18319] [UPDATE: Count=800758, Max=17631, Min=276, Avg=1469.49, 90=2557, 99=3583, 99.9=8991, 99.99=11607] 
2023-03-01 13:37:44:179 310 sec: 48955319 operations; 150222.91 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=749651, Max=150399, Min=338, Avg=3896.45, 90=5979, 99=15655, 99.9=76223, 99.99=115647] [UPDATE: Count=751758, Max=62751, Min=268, Avg=1430.35, 90=2431, 99=3419, 99.9=8543, 99.99=20671] 
2023-03-01 13:37:54:179 320 sec: 50542736 operations; 158741.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=793015, Max=27743, Min=351, Avg=3588.35, 90=6087, 99=11559, 99.9=15511, 99.99=21407] [UPDATE: Count=794360, Max=13159, Min=283, Avg=1449.73, 90=2513, 99=3501, 99.9=8879, 99.99=11567] 
2023-03-01 13:38:04:179 330 sec: 52134882 operations; 159214.6 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=796921, Max=74495, Min=345, Avg=3537.04, 90=5975, 99=9623, 99.9=15287, 99.99=35551] [UPDATE: Count=795285, Max=45407, Min=283, Avg=1481.84, 90=2543, 99=3565, 99.9=9207, 99.99=19103] 
2023-03-01 13:38:14:179 340 sec: 53445413 operations; 131053.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=655880, Max=86207, Min=336, Avg=4211.51, 90=6355, 99=12159, 99.9=28751, 99.99=58623] [UPDATE: Count=654599, Max=70591, Min=263, Avg=1887.36, 90=2971, 99=4347, 99.9=16183, 99.99=45343] 
2023-03-01 13:38:24:179 350 sec: 54578859 operations; 113344.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=565863, Max=445183, Min=324, Avg=4928.38, 90=6455, 99=13071, 99.9=281087, 99.99=374015] [UPDATE: Count=567453, Max=13511, Min=253, Avg=2076.78, 90=3389, 99=4415, 99.9=8743, 99.99=10879] 
2023-03-01 13:38:34:179 360 sec: 55968457 operations; 138959.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=695491, Max=405759, Min=321, Avg=4113.63, 90=5979, 99=11415, 99.9=159103, 99.99=322047] [UPDATE: Count=694340, Max=41119, Min=263, Avg=1681.8, 90=2895, 99=3923, 99.9=9199, 99.99=23791] 
2023-03-01 13:38:44:179 370 sec: 57501491 operations; 153303.4 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=766735, Max=71679, Min=347, Avg=3672.13, 90=6035, 99=11847, 99.9=17887, 99.99=40927] [UPDATE: Count=766189, Max=42111, Min=279, Avg=1541.76, 90=2483, 99=3429, 99.9=10135, 99.99=24815] 
2023-03-01 13:38:54:179 380 sec: 59118221 operations; 161673 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=809408, Max=25839, Min=364, Avg=3517.69, 90=5967, 99=10695, 99.9=14527, 99.99=18111] [UPDATE: Count=807274, Max=14391, Min=281, Avg=1424.48, 90=2407, 99=3449, 99.9=9639, 99.99=11879] 
2023-03-01 13:39:04:179 390 sec: 60753914 operations; 163569.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=818481, Max=59519, Min=353, Avg=3452.84, 90=5807, 99=9039, 99.9=15951, 99.99=30751] [UPDATE: Count=817284, Max=29455, Min=284, Avg=1433.03, 90=2435, 99=3475, 99.9=10239, 99.99=17871] 
2023-03-01 13:39:14:179 400 sec: 62388359 operations; 163444.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=817831, Max=75647, Min=352, Avg=3458.85, 90=5799, 99=9143, 99.9=16575, 99.99=40735] [UPDATE: Count=816556, Max=46079, Min=281, Avg=1430.71, 90=2423, 99=3465, 99.9=10327, 99.99=37023] 
2023-03-01 13:39:24:179 410 sec: 64016667 operations; 162830.8 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=814208, Max=44895, Min=353, Avg=3477.8, 90=5839, 99=8903, 99.9=13799, 99.99=21887] [UPDATE: Count=814066, Max=44159, Min=277, Avg=1431.58, 90=2437, 99=3471, 99.9=9959, 99.99=18415] 
2023-03-01 13:39:34:179 420 sec: 65641321 operations; 162465.4 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=811789, Max=80831, Min=326, Avg=3489.49, 90=5867, 99=8999, 99.9=13567, 99.99=42111] [UPDATE: Count=813020, Max=53215, Min=281, Avg=1432.5, 90=2431, 99=3443, 99.9=9743, 99.99=19679] 
2023-03-01 13:39:44:184 430 sec: 67262740 operations; 162077.07 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=810952, Max=53695, Min=336, Avg=3483.04, 90=5887, 99=9207, 99.9=13727, 99.99=32383] [UPDATE: Count=810359, Max=31599, Min=280, Avg=1447.05, 90=2443, 99=3457, 99.9=9767, 99.99=17727] 
2023-03-01 13:39:54:179 440 sec: 68862670 operations; 160057.02 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=799924, Max=227967, Min=322, Avg=3516.1, 90=5887, 99=9303, 99.9=16495, 99.99=187263] [UPDATE: Count=799965, Max=216703, Min=268, Avg=1480.26, 90=2441, 99=3457, 99.9=10727, 99.99=176895] 
2023-03-01 13:40:04:179 450 sec: 70470383 operations; 160771.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=803997, Max=76543, Min=352, Avg=3513.68, 90=5947, 99=9255, 99.9=14863, 99.99=41599] [UPDATE: Count=803713, Max=52703, Min=283, Avg=1458.51, 90=2469, 99=3465, 99.9=9543, 99.99=18703] 
2023-03-01 13:40:14:185 460 sec: 72073739 operations; 160239.46 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=801659, Max=53567, Min=351, Avg=3525.47, 90=5987, 99=9367, 99.9=13815, 99.99=31439] [UPDATE: Count=801718, Max=29295, Min=268, Avg=1461.34, 90=2471, 99=3463, 99.9=9543, 99.99=17311] 
2023-03-01 13:40:24:179 470 sec: 73669262 operations; 159648.09 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=798338, Max=32831, Min=361, Avg=3543.53, 90=6015, 99=9503, 99.9=18287, 99.99=25727] [UPDATE: Count=797162, Max=25535, Min=278, Avg=1464.67, 90=2479, 99=3475, 99.9=11007, 99.99=22815] 
2023-03-01 13:40:34:179 480 sec: 75264615 operations; 159535.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=798444, Max=94719, Min=349, Avg=3545.76, 90=6007, 99=9559, 99.9=16383, 99.99=58495] [UPDATE: Count=796926, Max=29743, Min=268, Avg=1463.33, 90=2479, 99=3471, 99.9=9727, 99.99=18719] 
2023-03-01 13:40:44:179 490 sec: 76862015 operations; 159740 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=798746, Max=25343, Min=342, Avg=3534.07, 90=6019, 99=9391, 99.9=12863, 99.99=16639] [UPDATE: Count=798624, Max=24671, Min=298, Avg=1470.39, 90=2479, 99=3455, 99.9=9143, 99.99=11951] 
2023-03-01 13:40:54:179 500 sec: 78475557 operations; 161354.2 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=806933, Max=68287, Min=341, Avg=3501.81, 90=5947, 99=9311, 99.9=13463, 99.99=34943] [UPDATE: Count=806734, Max=52063, Min=278, Avg=1452.21, 90=2471, 99=3473, 99.9=9231, 99.99=17695] 
2023-03-01 13:41:04:179 510 sec: 80078408 operations; 160285.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=801287, Max=77247, Min=350, Avg=3527.91, 90=5983, 99=9335, 99.9=17455, 99.99=41951] [UPDATE: Count=801432, Max=52415, Min=278, Avg=1459.92, 90=2471, 99=3487, 99.9=9791, 99.99=26223] 
2023-03-01 13:41:14:179 520 sec: 81685061 operations; 160665.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=804040, Max=22703, Min=339, Avg=3518.05, 90=6003, 99=9375, 99.9=13383, 99.99=18879] [UPDATE: Count=802625, Max=18639, Min=283, Avg=1455.97, 90=2471, 99=3469, 99.9=9151, 99.99=16271] 
2023-03-01 13:41:24:179 530 sec: 83291512 operations; 160645.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=803488, Max=44575, Min=351, Avg=3516.78, 90=5979, 99=9399, 99.9=14783, 99.99=27295] [UPDATE: Count=803039, Max=28927, Min=290, Avg=1458.86, 90=2471, 99=3441, 99.9=10399, 99.99=17503] 
2023-03-01 13:41:34:179 540 sec: 84896154 operations; 160464.2 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=802677, Max=69951, Min=357, Avg=3520.22, 90=5987, 99=9583, 99.9=14911, 99.99=31423] [UPDATE: Count=801964, Max=50783, Min=278, Avg=1460.85, 90=2471, 99=3473, 99.9=9375, 99.99=18591] 
2023-03-01 13:41:44:179 550 sec: 86495464 operations; 159931 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=800036, Max=25215, Min=362, Avg=3535.17, 90=6031, 99=9351, 99.9=12959, 99.99=15903] [UPDATE: Count=799300, Max=13751, Min=278, Avg=1462.5, 90=2473, 99=3455, 99.9=9335, 99.99=12007] 
2023-03-01 13:41:54:179 560 sec: 88086128 operations; 159066.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=795168, Max=73279, Min=363, Avg=3560.26, 90=6063, 99=9551, 99.9=13671, 99.99=41023] [UPDATE: Count=795602, Max=44223, Min=289, Avg=1465.97, 90=2475, 99=3463, 99.9=9735, 99.99=17951] 
2023-03-01 13:42:04:179 570 sec: 89678782 operations; 159265.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=795596, Max=70719, Min=355, Avg=3554.45, 90=6035, 99=9487, 99.9=15447, 99.99=32799] [UPDATE: Count=796974, Max=28319, Min=285, Avg=1467.04, 90=2481, 99=3469, 99.9=9287, 99.99=18527] 
2023-03-01 13:42:14:179 580 sec: 91270782 operations; 159200 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=796319, Max=73855, Min=345, Avg=3549.4, 90=5995, 99=9479, 99.9=18623, 99.99=66367] [UPDATE: Count=795622, Max=67007, Min=284, Avg=1471.43, 90=2479, 99=3489, 99.9=9775, 99.99=62687] 
2023-03-01 13:42:24:179 590 sec: 92870342 operations; 159956 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=799364, Max=70911, Min=344, Avg=3534.59, 90=6007, 99=9407, 99.9=13807, 99.99=32351] [UPDATE: Count=800145, Max=49503, Min=277, Avg=1464.1, 90=2471, 99=3471, 99.9=9847, 99.99=18655] 
2023-03-01 13:42:34:179 600 sec: 94468192 operations; 159785 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=799459, Max=78847, Min=340, Avg=3539.1, 90=6019, 99=9415, 99.9=14319, 99.99=38559] [UPDATE: Count=798391, Max=49887, Min=277, Avg=1462.63, 90=2485, 99=3489, 99.9=8983, 99.99=18687] 
2023-03-01 13:42:44:179 610 sec: 96064168 operations; 159597.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=797497, Max=22975, Min=354, Avg=3538, 90=6027, 99=9351, 99.9=13447, 99.99=19231] [UPDATE: Count=798461, Max=19407, Min=265, Avg=1472.43, 90=2481, 99=3459, 99.9=8727, 99.99=16687] 
2023-03-01 13:42:54:179 620 sec: 97667993 operations; 160382.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=801936, Max=64799, Min=336, Avg=3520.52, 90=5979, 99=9431, 99.9=13727, 99.99=29215] [UPDATE: Count=801912, Max=26895, Min=284, Avg=1463.88, 90=2477, 99=3467, 99.9=9239, 99.99=19263] 
2023-03-01 13:43:04:179 630 sec: 99276735 operations; 160874.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=803814, Max=20799, Min=342, Avg=3513.71, 90=5983, 99=9191, 99.9=12655, 99.99=15503] [UPDATE: Count=804956, Max=14463, Min=273, Avg=1457.08, 90=2471, 99=3457, 99.9=9015, 99.99=12007] 
2023-03-01 13:43:14:179 640 sec: 100865084 operations; 158834.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=793062, Max=68479, Min=359, Avg=3562.21, 90=6027, 99=9663, 99.9=22479, 99.99=38175] [UPDATE: Count=795394, Max=48991, Min=279, Avg=1473.78, 90=2479, 99=3479, 99.9=9911, 99.99=34751] 
2023-03-01 13:43:24:179 650 sec: 102463854 operations; 159877 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=797898, Max=60095, Min=343, Avg=3532.49, 90=5987, 99=9487, 99.9=14015, 99.99=31407] [UPDATE: Count=800812, Max=45503, Min=291, Avg=1471.68, 90=2487, 99=3495, 99.9=9775, 99.99=19551] 
2023-03-01 13:43:34:179 660 sec: 104061437 operations; 159758.3 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=798811, Max=31407, Min=356, Avg=3539.51, 90=6011, 99=9415, 99.9=13879, 99.99=25711] [UPDATE: Count=798820, Max=26255, Min=288, Avg=1464.59, 90=2475, 99=3459, 99.9=9791, 99.99=22943] 
2023-03-01 13:43:44:179 670 sec: 105652101 operations; 159066.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=795811, Max=70143, Min=318, Avg=3555.59, 90=6031, 99=9599, 99.9=14815, 99.99=29743] [UPDATE: Count=794815, Max=48319, Min=284, Avg=1468.84, 90=2471, 99=3467, 99.9=9927, 99.99=18991] 
2023-03-01 13:43:54:179 680 sec: 107262682 operations; 161058.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=805511, Max=49087, Min=318, Avg=3508.25, 90=5959, 99=9407, 99.9=14463, 99.99=30735] [UPDATE: Count=804987, Max=39199, Min=273, Avg=1454.78, 90=2463, 99=3465, 99.9=9383, 99.99=19183] 
2023-03-01 13:44:04:179 690 sec: 108858622 operations; 159594 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=797798, Max=35295, Min=358, Avg=3539.29, 90=5995, 99=9415, 99.9=14799, 99.99=29007] [UPDATE: Count=798255, Max=32927, Min=282, Avg=1470.15, 90=2469, 99=3453, 99.9=9759, 99.99=26559] 
2023-03-01 13:44:14:179 700 sec: 110456009 operations; 159738.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=798202, Max=65119, Min=359, Avg=3538.61, 90=6011, 99=9351, 99.9=13263, 99.99=35679] [UPDATE: Count=799132, Max=30639, Min=269, Avg=1467.4, 90=2475, 99=3459, 99.9=8847, 99.99=17007] 
2023-03-01 13:44:24:179 710 sec: 112038552 operations; 158254.3 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=791552, Max=81279, Min=331, Avg=3571.3, 90=6015, 99=9711, 99.9=25215, 99.99=42911] [UPDATE: Count=790956, Max=51615, Min=287, Avg=1479.49, 90=2479, 99=3473, 99.9=10127, 99.99=25711] 
2023-03-01 13:44:34:179 720 sec: 113646967 operations; 160841.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=804063, Max=20559, Min=342, Avg=3512.16, 90=5963, 99=9447, 99.9=12951, 99.99=16095] [UPDATE: Count=804465, Max=14159, Min=267, Avg=1458.5, 90=2471, 99=3459, 99.9=9399, 99.99=11847] 
2023-03-01 13:44:44:179 730 sec: 115238806 operations; 159183.9 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=795736, Max=44479, Min=352, Avg=3551.4, 90=6035, 99=9423, 99.9=13999, 99.99=28287] [UPDATE: Count=796023, Max=29711, Min=284, Avg=1471.27, 90=2471, 99=3461, 99.9=9839, 99.99=19199] 
2023-03-01 13:44:54:179 740 sec: 116842734 operations; 160392.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=801419, Max=72447, Min=340, Avg=3523.1, 90=5967, 99=9439, 99.9=15343, 99.99=40191] [UPDATE: Count=802423, Max=48607, Min=274, Avg=1462.35, 90=2477, 99=3485, 99.9=9311, 99.99=37087] 
2023-03-01 13:45:04:179 750 sec: 118438013 operations; 159527.9 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=796147, Max=22399, Min=359, Avg=3545.91, 90=6027, 99=9399, 99.9=13015, 99.99=16415] [UPDATE: Count=799216, Max=19359, Min=295, Avg=1469.33, 90=2475, 99=3457, 99.9=9215, 99.99=11991] 
2023-03-01 13:45:14:179 760 sec: 120043663 operations; 160565 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=802393, Max=80447, Min=350, Avg=3523.63, 90=5963, 99=9327, 99.9=13743, 99.99=39903] [UPDATE: Count=803304, Max=30959, Min=290, Avg=1456.35, 90=2477, 99=3471, 99.9=8807, 99.99=19103] 
2023-03-01 13:45:24:179 770 sec: 121639772 operations; 159610.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=798691, Max=65311, Min=360, Avg=3539.85, 90=5999, 99=9415, 99.9=15831, 99.99=40031] [UPDATE: Count=797416, Max=29727, Min=276, Avg=1467.01, 90=2479, 99=3475, 99.9=9599, 99.99=19023] 
2023-03-01 13:45:34:179 780 sec: 123231126 operations; 159135.4 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=795615, Max=21599, Min=345, Avg=3552.94, 90=6047, 99=9399, 99.9=12655, 99.99=16311] [UPDATE: Count=795700, Max=13983, Min=266, Avg=1470.91, 90=2479, 99=3477, 99.9=8751, 99.99=11303] 
2023-03-01 13:45:44:179 790 sec: 124826878 operations; 159575.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=797101, Max=72447, Min=343, Avg=3541.17, 90=5979, 99=9423, 99.9=14799, 99.99=32895] [UPDATE: Count=798627, Max=47167, Min=284, Avg=1470.42, 90=2469, 99=3457, 99.9=9991, 99.99=26383] 
2023-03-01 13:45:54:179 800 sec: 126437553 operations; 161067.5 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=804965, Max=22063, Min=362, Avg=3506.6, 90=5951, 99=9319, 99.9=13287, 99.99=17279] [UPDATE: Count=805693, Max=17151, Min=277, Avg=1457.79, 90=2471, 99=3463, 99.9=9527, 99.99=14063] 
2023-03-01 13:46:04:179 810 sec: 128038592 operations; 160103.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=800476, Max=49023, Min=365, Avg=3531.61, 90=5959, 99=9311, 99.9=15351, 99.99=31183] [UPDATE: Count=800614, Max=32383, Min=268, Avg=1461.81, 90=2471, 99=3447, 99.9=10015, 99.99=24767] 
2023-03-01 13:46:14:179 820 sec: 129629547 operations; 159095.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=794592, Max=63103, Min=347, Avg=3560.62, 90=6067, 99=9479, 99.9=14231, 99.99=31407] [UPDATE: Count=796350, Max=51583, Min=276, Avg=1466.48, 90=2483, 99=3495, 99.9=9439, 99.99=19023] 
2023-03-01 13:46:24:179 830 sec: 131228822 operations; 159927.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=799261, Max=22703, Min=354, Avg=3540.39, 90=6011, 99=9391, 99.9=13303, 99.99=17311] [UPDATE: Count=799950, Max=16959, Min=293, Avg=1459.11, 90=2467, 99=3429, 99.9=9199, 99.99=14399] 
2023-03-01 13:46:34:179 840 sec: 132824830 operations; 159600.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=797358, Max=73279, Min=349, Avg=3539.22, 90=5999, 99=9527, 99.9=13711, 99.99=34495] [UPDATE: Count=798642, Max=49023, Min=273, Avg=1471.61, 90=2479, 99=3467, 99.9=9863, 99.99=20799] 
2023-03-01 13:46:44:179 850 sec: 134410000 operations; 158517 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=793024, Max=57823, Min=357, Avg=3560.37, 90=6023, 99=9407, 99.9=14047, 99.99=32127] [UPDATE: Count=792213, Max=45119, Min=289, Avg=1481.7, 90=2489, 99=3489, 99.9=9927, 99.99=19647] 
2023-03-01 13:46:54:179 860 sec: 136008525 operations; 159852.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=797974, Max=33535, Min=357, Avg=3542.22, 90=6019, 99=9319, 99.9=13231, 99.99=27327] [UPDATE: Count=800649, Max=26831, Min=290, Avg=1462.25, 90=2475, 99=3471, 99.9=8871, 99.99=24351] 
2023-03-01 13:47:04:179 870 sec: 137599242 operations; 159071.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=795662, Max=75519, Min=337, Avg=3551.71, 90=6007, 99=9615, 99.9=14791, 99.99=39647] [UPDATE: Count=795001, Max=36159, Min=267, Avg=1473.16, 90=2481, 99=3465, 99.9=10263, 99.99=19135] 
2023-03-01 13:47:14:179 880 sec: 139199883 operations; 160064.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=801114, Max=54719, Min=341, Avg=3526.42, 90=5959, 99=9327, 99.9=14223, 99.99=32655] [UPDATE: Count=799436, Max=29919, Min=291, Avg=1465.64, 90=2475, 99=3461, 99.9=9431, 99.99=25775] 
2023-03-01 13:47:24:179 890 sec: 140803695 operations; 160381.2 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=801014, Max=21199, Min=347, Avg=3524.92, 90=5987, 99=9199, 99.9=13047, 99.99=16895] [UPDATE: Count=802771, Max=16927, Min=284, Avg=1462.12, 90=2473, 99=3461, 99.9=9007, 99.99=13751] 
2023-03-01 13:47:34:179 900 sec: 142399673 operations; 159597.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=797512, Max=71679, Min=356, Avg=3544.31, 90=5995, 99=9743, 99.9=14319, 99.99=32399] [UPDATE: Count=798537, Max=41791, Min=280, Avg=1465.85, 90=2473, 99=3459, 99.9=10159, 99.99=18047] 
2023-03-01 13:47:44:179 910 sec: 143930100 operations; 153042.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=765428, Max=54303, Min=359, Avg=3684.99, 90=6071, 99=10127, 99.9=16671, 99.99=29263] [UPDATE: Count=765003, Max=29807, Min=273, Avg=1538.25, 90=2551, 99=3501, 99.9=9647, 99.99=19071] 
2023-03-01 13:47:54:179 920 sec: 145128753 operations; 119865.3 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=599685, Max=23487, Min=374, Avg=4580.77, 90=6539, 99=12743, 99.9=15823, 99.99=18351] [UPDATE: Count=598857, Max=12815, Min=283, Avg=2088.65, 90=3305, 99=4359, 99.9=8951, 99.99=10631] 
2023-03-01 13:48:04:179 930 sec: 146290846 operations; 116209.3 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=582100, Max=53663, Min=344, Avg=4689.51, 90=6839, 99=10455, 99.9=15047, 99.99=32959] [UPDATE: Count=580056, Max=29295, Min=286, Avg=2186.78, 90=3399, 99=4423, 99.9=9207, 99.99=20575] 
2023-03-01 13:48:14:179 940 sec: 147547664 operations; 125681.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=627646, Max=44927, Min=361, Avg=4413.24, 90=6591, 99=10911, 99.9=15191, 99.99=29231] [UPDATE: Count=629134, Max=30975, Min=295, Avg=1951.53, 90=2857, 99=4057, 99.9=9583, 99.99=19295] 
2023-03-01 13:48:24:179 950 sec: 148793752 operations; 124608.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=622721, Max=26319, Min=341, Avg=4517.31, 90=6879, 99=14239, 99.9=17439, 99.99=21183] [UPDATE: Count=623351, Max=13319, Min=291, Avg=1900.76, 90=2797, 99=3961, 99.9=9215, 99.99=11143] 
2023-03-01 13:48:34:179 960 sec: 150035839 operations; 124208.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=620540, Max=57759, Min=362, Avg=4500.45, 90=6587, 99=14791, 99.9=20575, 99.99=30095] [UPDATE: Count=621534, Max=31327, Min=274, Avg=1939.08, 90=2989, 99=4239, 99.9=9039, 99.99=19391] 
2023-03-01 13:48:44:179 970 sec: 151242207 operations; 120636.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=602725, Max=61951, Min=352, Avg=4658.55, 90=7379, 99=13095, 99.9=20655, 99.99=36927] [UPDATE: Count=603723, Max=17551, Min=278, Avg=1971.64, 90=2947, 99=4211, 99.9=9535, 99.99=15095] 
2023-03-01 13:48:54:179 980 sec: 152406731 operations; 116452.4 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=582335, Max=101823, Min=359, Avg=4857.13, 90=7951, 99=14367, 99.9=21919, 99.99=64991] [UPDATE: Count=582164, Max=29151, Min=287, Avg=2009.1, 90=2903, 99=4223, 99.9=9031, 99.99=18063] 
2023-03-01 13:49:04:179 990 sec: 153571869 operations; 116513.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=582062, Max=227327, Min=352, Avg=4855.25, 90=7803, 99=15263, 99.9=20223, 99.99=153087] [UPDATE: Count=583097, Max=217471, Min=290, Avg=2009.56, 90=2799, 99=4051, 99.9=9191, 99.99=104959] 
2023-03-01 13:49:14:179 1000 sec: 154757128 operations; 118525.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=592274, Max=99839, Min=344, Avg=4797.9, 90=7531, 99=15167, 99.9=26463, 99.99=59551] [UPDATE: Count=592910, Max=12951, Min=292, Avg=1949.71, 90=2761, 99=3921, 99.9=9223, 99.99=11247] 
2023-03-01 13:49:24:179 1010 sec: 155758463 operations; 100133.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=501207, Max=245759, Min=350, Avg=6019.18, 90=8115, 99=24479, 99.9=185343, 99.99=204159] [UPDATE: Count=500134, Max=30751, Min=271, Avg=1939.75, 90=2747, 99=3931, 99.9=8727, 99.99=20591] 
2023-03-01 13:49:34:179 1020 sec: 156807355 operations; 104889.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=523799, Max=248191, Min=335, Avg=5713.39, 90=6843, 99=16815, 99.9=187135, 99.99=195199] [UPDATE: Count=525122, Max=32959, Min=277, Avg=1937.58, 90=2761, 99=3997, 99.9=8647, 99.99=15479] 
2023-03-01 13:49:44:179 1030 sec: 158072415 operations; 126506 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=633809, Max=22895, Min=365, Avg=4365.01, 90=6547, 99=10183, 99.9=14063, 99.99=18191] [UPDATE: Count=631258, Max=18159, Min=293, Avg=1950.63, 90=2773, 99=3949, 99.9=8999, 99.99=15359] 
2023-03-01 13:49:54:179 1040 sec: 159316875 operations; 124446 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=621132, Max=93439, Min=354, Avg=4558.11, 90=7031, 99=13391, 99.9=18271, 99.99=40671] [UPDATE: Count=623320, Max=29999, Min=284, Avg=1871.35, 90=2729, 99=3833, 99.9=9159, 99.99=17775] 
2023-03-01 13:50:04:179 1050 sec: 160574057 operations; 125718.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=627608, Max=59519, Min=348, Avg=4524.52, 90=7031, 99=13519, 99.9=20463, 99.99=34335] [UPDATE: Count=629573, Max=27455, Min=279, Avg=1840.02, 90=2707, 99=3839, 99.9=8423, 99.99=19631] 
2023-03-01 13:50:14:179 1060 sec: 161886673 operations; 131261.6 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=656345, Max=23903, Min=352, Avg=4286.45, 90=6639, 99=10255, 99.9=13823, 99.99=16879] [UPDATE: Count=656212, Max=13647, Min=283, Avg=1804.69, 90=2705, 99=3769, 99.9=8871, 99.99=10919] 
2023-03-01 13:50:24:179 1070 sec: 163216843 operations; 133017 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=665178, Max=44543, Min=354, Avg=4261.4, 90=6651, 99=10047, 99.9=14191, 99.99=29071] [UPDATE: Count=665016, Max=27295, Min=284, Avg=1749.03, 90=2677, 99=3717, 99.9=9239, 99.99=18719] 
2023-03-01 13:50:34:180 1080 sec: 164536721 operations; 131987.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=659628, Max=47071, Min=364, Avg=4276.05, 90=6639, 99=10183, 99.9=14959, 99.99=31567] [UPDATE: Count=660299, Max=30111, Min=288, Avg=1780.61, 90=2691, 99=3701, 99.9=9831, 99.99=19743] 
2023-03-01 13:50:44:179 1090 sec: 165857497 operations; 132077.6 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=659752, Max=21023, Min=357, Avg=4251.62, 90=6559, 99=9975, 99.9=13423, 99.99=16815] [UPDATE: Count=661023, Max=12895, Min=294, Avg=1806.69, 90=2699, 99=3703, 99.9=9255, 99.99=11007] 
2023-03-01 13:50:54:179 1100 sec: 167192800 operations; 133530.3 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=667104, Max=60415, Min=351, Avg=4227.34, 90=6579, 99=10047, 99.9=14031, 99.99=32751] [UPDATE: Count=668249, Max=26815, Min=284, Avg=1762.4, 90=2685, 99=3741, 99.9=9031, 99.99=17391] 
2023-03-01 13:51:04:179 1110 sec: 168515378 operations; 132257.8 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=660354, Max=125055, Min=342, Avg=4249.56, 90=6543, 99=10047, 99.9=16135, 99.99=118847] [UPDATE: Count=662157, Max=118975, Min=290, Avg=1799.19, 90=2697, 99=3777, 99.9=9719, 99.99=116543] 
2023-03-01 13:51:14:179 1120 sec: 169879153 operations; 136377.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=681633, Max=24063, Min=361, Avg=4114.3, 90=6351, 99=9615, 99.9=13951, 99.99=17551] [UPDATE: Count=682123, Max=14919, Min=297, Avg=1749.27, 90=2695, 99=3731, 99.9=9591, 99.99=12151] 
2023-03-01 13:51:24:179 1130 sec: 171264695 operations; 138554.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=692899, Max=51263, Min=348, Avg=4049.13, 90=6259, 99=9487, 99.9=13975, 99.99=30799] [UPDATE: Count=692652, Max=30767, Min=288, Avg=1720.74, 90=2683, 99=3723, 99.9=9695, 99.99=20783] 
2023-03-01 13:51:34:179 1140 sec: 172643816 operations; 137912.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=689391, Max=95935, Min=351, Avg=4079.26, 90=6267, 99=9431, 99.9=15263, 99.99=91071] [UPDATE: Count=689723, Max=91135, Min=296, Avg=1718.73, 90=2681, 99=3717, 99.9=9343, 99.99=87999] 
2023-03-01 13:51:44:179 1150 sec: 174021241 operations; 137742.5 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=687948, Max=20767, Min=364, Avg=4069.14, 90=6251, 99=9231, 99.9=13079, 99.99=16431] [UPDATE: Count=689469, Max=16399, Min=296, Avg=1737.63, 90=2687, 99=3729, 99.9=8967, 99.99=13319] 
2023-03-01 13:51:54:179 1160 sec: 175393571 operations; 137233 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=685343, Max=63455, Min=367, Avg=4065.63, 90=6239, 99=9439, 99.9=13399, 99.99=31839] [UPDATE: Count=687002, Max=32047, Min=295, Avg=1763.29, 90=2695, 99=3795, 99.9=8767, 99.99=19807] 
2023-03-01 13:52:04:179 1170 sec: 176781762 operations; 138819.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=694696, Max=21215, Min=366, Avg=4015.17, 90=6147, 99=9151, 99.9=12671, 99.99=16135] [UPDATE: Count=693514, Max=17183, Min=291, Avg=1742.28, 90=2681, 99=3715, 99.9=8359, 99.99=12303] 
2023-03-01 13:52:14:179 1180 sec: 178185822 operations; 140406 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=702394, Max=48863, Min=361, Avg=3967.03, 90=6023, 99=9015, 99.9=13311, 99.99=32207] [UPDATE: Count=701660, Max=29423, Min=273, Avg=1725.92, 90=2655, 99=3645, 99.9=8855, 99.99=21247] 
2023-03-01 13:52:24:179 1190 sec: 179590722 operations; 140490 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=702045, Max=68927, Min=357, Avg=3975.51, 90=6039, 99=9015, 99.9=13383, 99.99=33503] [UPDATE: Count=702844, Max=27855, Min=296, Avg=1716.69, 90=2653, 99=3633, 99.9=9271, 99.99=18591] 
2023-03-01 13:52:34:179 1200 sec: 180994378 operations; 140365.6 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=700586, Max=21327, Min=345, Avg=3978.94, 90=6055, 99=8839, 99.9=12263, 99.99=15071] [UPDATE: Count=703102, Max=19567, Min=282, Avg=1720.7, 90=2655, 99=3621, 99.9=8175, 99.99=11031] 
2023-03-01 13:52:44:179 1210 sec: 182391560 operations; 139718.2 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=697999, Max=58367, Min=353, Avg=3977.99, 90=6019, 99=8951, 99.9=13271, 99.99=31359] [UPDATE: Count=699128, Max=44479, Min=290, Avg=1746.37, 90=2663, 99=3597, 99.9=9695, 99.99=21215] 
2023-03-01 13:52:54:179 1220 sec: 183812527 operations; 142096.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=709794, Max=45887, Min=363, Avg=3879.85, 90=5867, 99=8775, 99.9=12871, 99.99=31119] [UPDATE: Count=711202, Max=28319, Min=272, Avg=1748.7, 90=2673, 99=3639, 99.9=9063, 99.99=19087] 
2023-03-01 13:53:04:179 1230 sec: 185235981 operations; 142345.4 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=711768, Max=18575, Min=367, Avg=3847.4, 90=5823, 99=8615, 99.9=12055, 99.99=15015] [UPDATE: Count=711671, Max=13279, Min=293, Avg=1768.98, 90=2691, 99=3659, 99.9=8775, 99.99=10679] 
2023-03-01 13:53:14:179 1240 sec: 186689430 operations; 145344.9 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=727007, Max=45535, Min=357, Avg=3731.76, 90=5739, 99=8583, 99.9=12367, 99.99=28863] [UPDATE: Count=726444, Max=30911, Min=292, Avg=1768.1, 90=2729, 99=3967, 99.9=8759, 99.99=19103] 
2023-03-01 13:53:24:179 1250 sec: 188163899 operations; 147446.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=736461, Max=60927, Min=352, Avg=3654.78, 90=5643, 99=8551, 99.9=12239, 99.99=29359] [UPDATE: Count=738028, Max=28527, Min=297, Avg=1769.39, 90=2765, 99=4093, 99.9=9439, 99.99=20847] 
2023-03-01 13:53:34:179 1260 sec: 189722409 operations; 155851 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=778924, Max=19967, Min=362, Avg=3419.02, 90=5423, 99=8247, 99.9=11991, 99.99=14767] [UPDATE: Count=779587, Max=13487, Min=301, Avg=1711.14, 90=2623, 99=3763, 99.9=9255, 99.99=11703] 
2023-03-01 13:53:44:179 1270 sec: 191319662 operations; 159725.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=798233, Max=49695, Min=367, Avg=3354.55, 90=5427, 99=8447, 99.9=12599, 99.99=29535] [UPDATE: Count=799010, Max=29103, Min=291, Avg=1651.39, 90=2529, 99=3145, 99.9=10023, 99.99=18911] 
2023-03-01 13:53:54:179 1280 sec: 192942087 operations; 162242.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=811363, Max=46559, Min=367, Avg=3317.67, 90=5455, 99=8583, 99.9=13399, 99.99=28527] [UPDATE: Count=811139, Max=27135, Min=295, Avg=1609.48, 90=2473, 99=3157, 99.9=9311, 99.99=19055] 
2023-03-01 13:54:04:179 1290 sec: 194574421 operations; 163233.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=815707, Max=23407, Min=362, Avg=3296.21, 90=5399, 99=8375, 99.9=13007, 99.99=19087] [UPDATE: Count=816641, Max=18783, Min=298, Avg=1601.96, 90=2443, 99=3113, 99.9=10175, 99.99=16607] 
2023-03-01 13:54:14:179 1300 sec: 196227121 operations; 165270 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=826729, Max=48415, Min=365, Avg=3261.89, 90=5415, 99=8439, 99.9=13039, 99.99=29695] [UPDATE: Count=825876, Max=28543, Min=294, Avg=1574.22, 90=2413, 99=3125, 99.9=9983, 99.99=19311] 
2023-03-01 13:54:24:179 1310 sec: 197880509 operations; 165338.8 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=825940, Max=41215, Min=362, Avg=3258.61, 90=5395, 99=8503, 99.9=12735, 99.99=25295] [UPDATE: Count=827441, Max=29631, Min=299, Avg=1577.79, 90=2417, 99=3127, 99.9=9783, 99.99=16063] 
2023-03-01 13:54:34:179 1320 sec: 199528410 operations; 164790.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=823123, Max=22031, Min=363, Avg=3271.34, 90=5435, 99=8463, 99.9=11783, 99.99=18223] [UPDATE: Count=824786, Max=18943, Min=287, Avg=1581.41, 90=2421, 99=3147, 99.9=8439, 99.99=15871] 
2023-03-01 13:54:44:179 1330 sec: 201173423 operations; 164501.3 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=822985, Max=47711, Min=367, Avg=3281.3, 90=5431, 99=8543, 99.9=13431, 99.99=37759] [UPDATE: Count=822039, Max=38399, Min=300, Avg=1577.26, 90=2409, 99=3149, 99.9=9463, 99.99=35743] 
2023-03-01 13:54:54:179 1340 sec: 202847342 operations; 167391.9 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=836799, Max=47679, Min=368, Avg=3186.49, 90=5259, 99=8279, 99.9=12831, 99.99=29439] [UPDATE: Count=837115, Max=27311, Min=298, Avg=1589.47, 90=2425, 99=3133, 99.9=10391, 99.99=19231] 
2023-03-01 13:55:04:179 1350 sec: 204522372 operations; 167503 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=837360, Max=23247, Min=371, Avg=3131.86, 90=5151, 99=8147, 99.9=13031, 99.99=17855] [UPDATE: Count=837754, Max=17695, Min=299, Avg=1640.91, 90=2485, 99=3201, 99.9=9999, 99.99=15775] 
2023-03-01 13:55:14:179 1360 sec: 206235227 operations; 171285.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=856913, Max=44575, Min=372, Avg=3011.9, 90=4967, 99=7775, 99.9=12599, 99.99=25551] [UPDATE: Count=855854, Max=32143, Min=271, Avg=1654.24, 90=2511, 99=3241, 99.9=10487, 99.99=19375] 
2023-03-01 13:55:24:179 1370 sec: 208010111 operations; 177488.4 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=888464, Max=32559, Min=362, Avg=2887.59, 90=4899, 99=7955, 99.9=15831, 99.99=26159] [UPDATE: Count=886427, Max=26607, Min=291, Avg=1614.7, 90=2507, 99=3387, 99.9=10031, 99.99=24271] 
2023-03-01 13:55:34:179 1380 sec: 209833193 operations; 182308.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=911250, Max=47327, Min=365, Avg=2804.57, 90=4807, 99=7659, 99.9=14263, 99.99=28751] [UPDATE: Count=911835, Max=31135, Min=282, Avg=1580.37, 90=2467, 99=3353, 99.9=11039, 99.99=25439] 
2023-03-01 13:55:44:179 1390 sec: 211659985 operations; 182679.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=913367, Max=49887, Min=367, Avg=2757.7, 90=4635, 99=6519, 99.9=12223, 99.99=28495] [UPDATE: Count=913431, Max=33663, Min=288, Avg=1618.05, 90=2493, 99=3359, 99.9=10135, 99.99=20511] 
2023-03-01 13:55:54:179 1400 sec: 213494646 operations; 183466.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=916869, Max=22607, Min=358, Avg=2802.31, 90=4859, 99=7851, 99.9=12335, 99.99=20143] [UPDATE: Count=917810, Max=21023, Min=257, Avg=1553.79, 90=2445, 99=3335, 99.9=10103, 99.99=18559] 
2023-03-01 13:56:04:179 1410 sec: 215320584 operations; 182593.8 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=912558, Max=52191, Min=352, Avg=2814.1, 90=4843, 99=7859, 99.9=12543, 99.99=47711] [UPDATE: Count=913375, Max=49247, Min=287, Avg=1565.53, 90=2445, 99=3305, 99.9=10207, 99.99=46399] 
2023-03-01 13:56:14:179 1420 sec: 217140940 operations; 182035.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=910087, Max=21903, Min=367, Avg=2823.55, 90=4907, 99=7983, 99.9=12871, 99.99=16591] [UPDATE: Count=910227, Max=16719, Min=296, Avg=1567.73, 90=2449, 99=3333, 99.9=9855, 99.99=14983] 
2023-03-01 13:56:24:179 1430 sec: 218971329 operations; 183038.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=914960, Max=46431, Min=320, Avg=2804.42, 90=4847, 99=7919, 99.9=14151, 99.99=25759] [UPDATE: Count=915307, Max=41151, Min=279, Avg=1559.03, 90=2443, 99=3303, 99.9=11623, 99.99=18383] 
2023-03-01 13:56:34:179 1440 sec: 220787066 operations; 181573.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=908241, Max=49343, Min=356, Avg=2828.94, 90=4875, 99=7831, 99.9=17503, 99.99=28223] [UPDATE: Count=907650, Max=42079, Min=291, Avg=1576.85, 90=2453, 99=3367, 99.9=11103, 99.99=20607] 
2023-03-01 13:56:44:179 1450 sec: 222600143 operations; 181307.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=906950, Max=30143, Min=360, Avg=2819.37, 90=4843, 99=7759, 99.9=12327, 99.99=26031] [UPDATE: Count=906135, Max=27055, Min=274, Avg=1588.89, 90=2465, 99=3371, 99.9=9679, 99.99=24991] 
2023-03-01 13:56:54:179 1460 sec: 224422757 operations; 182261.4 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=910463, Max=45247, Min=367, Avg=2827.06, 90=4895, 99=8063, 99.9=14895, 99.99=26527] [UPDATE: Count=912128, Max=30479, Min=289, Avg=1559.8, 90=2443, 99=3331, 99.9=11231, 99.99=19759] 
2023-03-01 13:57:04:179 1470 sec: 226246619 operations; 182386.2 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=911796, Max=53343, Min=329, Avg=2823.73, 90=4891, 99=8011, 99.9=14239, 99.99=32799] [UPDATE: Count=912085, Max=28847, Min=290, Avg=1559.03, 90=2443, 99=3327, 99.9=10391, 99.99=18271] 
2023-03-01 13:57:14:179 1480 sec: 228091089 operations; 184447 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=921932, Max=26271, Min=343, Avg=2782.98, 90=4791, 99=7791, 99.9=12623, 99.99=17663] [UPDATE: Count=922534, Max=18415, Min=292, Avg=1551.2, 90=2447, 99=3345, 99.9=10663, 99.99=15799] 
2023-03-01 13:57:24:179 1490 sec: 229889885 operations; 179879.6 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=899223, Max=56639, Min=341, Avg=2824.29, 90=4755, 99=7311, 99.9=15303, 99.99=28575] [UPDATE: Count=899692, Max=29663, Min=287, Avg=1619.78, 90=2501, 99=3475, 99.9=12279, 99.99=25343] 
2023-03-01 13:57:34:179 1500 sec: 231696443 operations; 180655.8 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=902734, Max=50079, Min=351, Avg=2845.26, 90=4871, 99=7751, 99.9=15055, 99.99=29631] [UPDATE: Count=903732, Max=30767, Min=303, Avg=1580.25, 90=2485, 99=3507, 99.9=11391, 99.99=25631] 
2023-03-01 13:57:44:179 1510 sec: 233412301 operations; 171585.8 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=858128, Max=21967, Min=363, Avg=3033.08, 90=5043, 99=8083, 99.9=13823, 99.99=18127] [UPDATE: Count=857719, Max=18479, Min=288, Avg=1625.23, 90=2729, 99=3867, 99.9=10071, 99.99=15863] 
2023-03-01 13:57:54:179 1520 sec: 234850827 operations; 143852.6 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=719607, Max=50111, Min=337, Avg=3702.21, 90=5867, 99=9247, 99.9=12999, 99.99=27679] [UPDATE: Count=718913, Max=41503, Min=274, Avg=1854.49, 90=3305, 99=4115, 99.9=9887, 99.99=20607] 
2023-03-01 13:58:04:179 1530 sec: 236214618 operations; 136379.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=682920, Max=52735, Min=315, Avg=3953.88, 90=6187, 99=12519, 99.9=17727, 99.99=26831] [UPDATE: Count=680909, Max=30735, Min=272, Avg=1905.46, 90=3319, 99=4131, 99.9=9703, 99.99=19855] 
2023-03-01 13:58:14:179 1540 sec: 237544456 operations; 132983.8 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=664645, Max=33119, Min=336, Avg=4206.61, 90=6207, 99=21327, 99.9=25951, 99.99=27375] [UPDATE: Count=665156, Max=13359, Min=270, Avg=1806.1, 90=3175, 99=4059, 99.9=9103, 99.99=11191] 
2023-03-01 13:58:24:179 1550 sec: 238981617 operations; 143716.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=718327, Max=48223, Min=337, Avg=3727.73, 90=5719, 99=10455, 99.9=22495, 99.99=27663] [UPDATE: Count=718814, Max=28751, Min=262, Avg=1836.46, 90=3133, 99=4051, 99.9=9159, 99.99=20655] 
2023-03-01 13:58:34:179 1560 sec: 240375107 operations; 139349 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=696453, Max=19487, Min=344, Avg=3796.71, 90=5843, 99=8743, 99.9=12247, 99.99=14607] [UPDATE: Count=696992, Max=13375, Min=291, Avg=1941.48, 90=3131, 99=4187, 99.9=9191, 99.99=11247] 
2023-03-01 13:58:44:179 1570 sec: 241722074 operations; 134696.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=673629, Max=55359, Min=355, Avg=3897, 90=5827, 99=8591, 99.9=12583, 99.99=27759] [UPDATE: Count=673356, Max=45791, Min=285, Avg=2038.56, 90=3135, 99=4323, 99.9=9775, 99.99=19439] 
2023-03-01 13:58:54:179 1580 sec: 242951449 operations; 122937.5 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=614957, Max=55327, Min=348, Avg=4333.43, 90=6359, 99=11031, 99.9=15127, 99.99=30863] [UPDATE: Count=614413, Max=36447, Min=282, Avg=2169.56, 90=3103, 99=4427, 99.9=9183, 99.99=20879] 
2023-03-01 13:59:04:179 1590 sec: 244182476 operations; 123102.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=615647, Max=24479, Min=358, Avg=4282.19, 90=6079, 99=9207, 99.9=13055, 99.99=15919] [UPDATE: Count=615357, Max=14831, Min=290, Avg=2212.74, 90=3079, 99=4431, 99.9=9983, 99.99=12623] 
2023-03-01 13:59:14:179 1600 sec: 245428136 operations; 124566 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=622142, Max=51263, Min=368, Avg=4256.12, 90=6047, 99=8671, 99.9=12215, 99.99=27711] [UPDATE: Count=623528, Max=29439, Min=288, Avg=2165.04, 90=3079, 99=4395, 99.9=9255, 99.99=18655] 
2023-03-01 13:59:24:179 1610 sec: 246724870 operations; 129673.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=647158, Max=51647, Min=329, Avg=4086.75, 90=5963, 99=8911, 99.9=13671, 99.99=27055] [UPDATE: Count=649584, Max=48383, Min=281, Avg=2082.95, 90=3017, 99=4411, 99.9=9551, 99.99=20447] 
2023-03-01 13:59:34:179 1620 sec: 248081208 operations; 135633.8 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=678193, Max=19775, Min=342, Avg=3946.71, 90=6047, 99=9023, 99.9=12303, 99.99=15151] [UPDATE: Count=678144, Max=15327, Min=279, Avg=1947.86, 90=2835, 99=4199, 99.9=9311, 99.99=11855] 
2023-03-01 13:59:44:179 1630 sec: 249482319 operations; 140111.1 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=700507, Max=45055, Min=358, Avg=3827.88, 90=5899, 99=8751, 99.9=11967, 99.99=26191] [UPDATE: Count=700625, Max=30399, Min=293, Avg=1878.69, 90=2775, 99=3963, 99.9=8783, 99.99=20255] 
2023-03-01 13:59:54:179 1640 sec: 250947891 operations; 146557.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=731748, Max=57919, Min=347, Avg=3678.69, 90=5819, 99=8743, 99.9=12559, 99.99=29343] [UPDATE: Count=733833, Max=49887, Min=285, Avg=1778.93, 90=2731, 99=3831, 99.9=9607, 99.99=20415] 
2023-03-01 14:00:04:179 1650 sec: 252446391 operations; 149850 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=750289, Max=22543, Min=344, Avg=3606.5, 90=5867, 99=8959, 99.9=13407, 99.99=19055] [UPDATE: Count=748281, Max=20671, Min=293, Avg=1726.09, 90=2719, 99=3831, 99.9=10255, 99.99=17119] 
2023-03-01 14:00:14:179 1660 sec: 253964733 operations; 151834.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=759297, Max=55999, Min=354, Avg=3553.32, 90=5815, 99=8791, 99.9=12751, 99.99=28607] [UPDATE: Count=759041, Max=30543, Min=295, Avg=1711.86, 90=2731, 99=3833, 99.9=9919, 99.99=19599] 
2023-03-01 14:00:24:179 1670 sec: 255490829 operations; 152609.6 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=763993, Max=224767, Min=345, Avg=3524.15, 90=5819, 99=8943, 99.9=14311, 99.99=142847] [UPDATE: Count=762055, Max=217471, Min=277, Avg=1712.04, 90=2727, 99=3855, 99.9=9639, 99.99=115839] 
2023-03-01 14:00:34:179 1680 sec: 257066042 operations; 157521.3 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=788140, Max=19327, Min=357, Avg=3418.1, 90=5779, 99=8823, 99.9=12599, 99.99=15751] [UPDATE: Count=787037, Max=15023, Min=271, Avg=1655.84, 90=2713, 99=3791, 99.9=9863, 99.99=12047] 
2023-03-01 14:00:44:179 1690 sec: 258635634 operations; 156959.2 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=784402, Max=212863, Min=339, Avg=3447.98, 90=5883, 99=8967, 99.9=14543, 99.99=127359] [UPDATE: Count=785232, Max=210687, Min=273, Avg=1645.87, 90=2705, 99=3787, 99.9=10175, 99.99=117311] 
2023-03-01 14:00:54:179 1700 sec: 260226923 operations; 159128.9 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=795176, Max=22607, Min=353, Avg=3454.49, 90=6067, 99=9103, 99.9=12479, 99.99=17247] [UPDATE: Count=796158, Max=17343, Min=297, Avg=1570.47, 90=2675, 99=3767, 99.9=8927, 99.99=14831] 
2023-03-01 14:01:04:179 1710 sec: 261819059 operations; 159213.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=795259, Max=57759, Min=358, Avg=3439.92, 90=5979, 99=9167, 99.9=13519, 99.99=30783] [UPDATE: Count=796811, Max=46015, Min=285, Avg=1583.1, 90=2663, 99=3731, 99.9=10591, 99.99=19615] 
2023-03-01 14:01:14:179 1720 sec: 263443395 operations; 162433.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=812589, Max=59903, Min=347, Avg=3366.18, 90=5831, 99=8895, 99.9=12999, 99.99=31871] [UPDATE: Count=811748, Max=42975, Min=280, Avg=1554.38, 90=2619, 99=3675, 99.9=9935, 99.99=17887] 
2023-03-01 14:01:24:179 1730 sec: 265067345 operations; 162395 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=812018, Max=18463, Min=361, Avg=3369.71, 90=5863, 99=8983, 99.9=12383, 99.99=15111] [UPDATE: Count=811912, Max=13871, Min=283, Avg=1552.76, 90=2613, 99=3691, 99.9=9623, 99.99=11783] 
2023-03-01 14:01:34:179 1740 sec: 266699516 operations; 163217.1 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=815564, Max=69439, Min=348, Avg=3350.93, 90=5807, 99=8871, 99.9=13127, 99.99=41567] [UPDATE: Count=816620, Max=50047, Min=280, Avg=1548.08, 90=2611, 99=3645, 99.9=10239, 99.99=19967] 
2023-03-01 14:01:44:179 1750 sec: 268315865 operations; 161634.9 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=808791, Max=58111, Min=355, Avg=3379.63, 90=5823, 99=9023, 99.9=17999, 99.99=34207] [UPDATE: Count=807669, Max=38239, Min=272, Avg=1564.81, 90=2613, 99=3665, 99.9=10855, 99.99=29727] 
2023-03-01 14:01:54:179 1760 sec: 269951328 operations; 163546.3 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=817354, Max=19935, Min=345, Avg=3344.06, 90=5787, 99=8767, 99.9=12399, 99.99=15727] [UPDATE: Count=817976, Max=15551, Min=299, Avg=1544.7, 90=2605, 99=3619, 99.9=9639, 99.99=12335] 
2023-03-01 14:02:04:179 1770 sec: 271578151 operations; 162682.3 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=813057, Max=70015, Min=366, Avg=3358.93, 90=5787, 99=9007, 99.9=14207, 99.99=35775] [UPDATE: Count=813799, Max=47583, Min=285, Avg=1555.94, 90=2621, 99=3677, 99.9=10423, 99.99=16527] 
2023-03-01 14:02:14:179 1780 sec: 273195994 operations; 161784.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=808155, Max=61471, Min=347, Avg=3379.33, 90=5815, 99=8783, 99.9=13879, 99.99=29871] [UPDATE: Count=809680, Max=50047, Min=290, Avg=1563.53, 90=2627, 99=3695, 99.9=9695, 99.99=19503] 
2023-03-01 14:02:24:179 1790 sec: 274819406 operations; 162341.2 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=812288, Max=25215, Min=355, Avg=3369.24, 90=5831, 99=8903, 99.9=12831, 99.99=18943] [UPDATE: Count=811125, Max=19439, Min=297, Avg=1553.81, 90=2617, 99=3683, 99.9=9439, 99.99=16799] 
2023-03-01 14:02:34:179 1800 sec: 276444260 operations; 162485.4 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=812210, Max=67071, Min=335, Avg=3355.85, 90=5767, 99=8767, 99.9=14599, 99.99=30047] [UPDATE: Count=812729, Max=39423, Min=288, Avg=1564.51, 90=2631, 99=3723, 99.9=9583, 99.99=23263] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-230 to complete. Workload status: true
2023-03-01 14:02:36:448 1802 sec: 276450049 operations; 2551.34 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=2994, Max=11055, Min=480, Avg=3394.71, 90=5791, 99=8131, 99.9=10359, 99.99=11055] [CLEANUP: Count=400, Max=2226175, Min=0, Avg=5563.81, 90=1, 99=4, 99.9=2226175, 99.99=2226175] [UPDATE: Count=2572, Max=5907, Min=331, Avg=1566.72, 90=2667, 99=3749, 99.9=5231, 99.99=5907] 
[OVERALL], RunTime(ms), 1802267
[OVERALL], Throughput(ops/sec), 153390.17415288635
[TOTAL_GCS_PS_Scavenge], Count, 3450
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18633
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.033864571675562
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 93
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.005160167722096671
[TOTAL_GCs], Count, 3452
[TOTAL_GC_TIME], Time(ms), 18726
[TOTAL_GC_TIME_%], Time(%), 1.0390247393976586
[READ], Operations, 138209965
[READ], AverageLatency(us), 3606.64415968125
[READ], MinLatency(us), 315
[READ], MaxLatency(us), 445183
[READ], 95thPercentileLatency(us), 6939
[READ], 99thPercentileLatency(us), 9999
[READ], Return=OK, 138209965
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5563.8075
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 4
[UPDATE], Operations, 138240084
[UPDATE], AverageLatency(us), 1596.845110149094
[UPDATE], MinLatency(us), 253
[UPDATE], MaxLatency(us), 217471
[UPDATE], 95thPercentileLatency(us), 2945
[UPDATE], 99thPercentileLatency(us), 3693
[UPDATE], Return=OK, 138240084
