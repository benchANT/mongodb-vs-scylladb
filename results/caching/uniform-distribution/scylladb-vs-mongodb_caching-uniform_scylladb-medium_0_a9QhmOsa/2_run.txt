bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 21:20:05:213 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-04 21:20:15:198 10 sec: 743632 operations; 74363.2 current ops/sec; est completion in 3 hours 43 minutes [READ: Count=371021, Max=79295, Min=549, Avg=3157.4, 90=4539, 99=9383, 99.9=29023, 99.99=71999] [UPDATE: Count=374905, Max=78399, Min=475, Avg=1961.4, 90=2683, 99=6971, 99.9=25423, 99.99=69631] 
2023-05-04 21:20:25:198 20 sec: 1543633 operations; 80000.1 current ops/sec; est completion in 3 hours 35 minutes [READ: Count=400124, Max=19439, Min=542, Avg=2742.5, 90=3965, 99=5407, 99.9=6943, 99.99=13487] [UPDATE: Count=398951, Max=16911, Min=446, Avg=1652.71, 90=2351, 99=3095, 99.9=4303, 99.99=8831] 
2023-05-04 21:20:35:198 30 sec: 2343627 operations; 79999.4 current ops/sec; est completion in 3 hours 32 minutes [READ: Count=399354, Max=50303, Min=517, Avg=2768.51, 90=3995, 99=5499, 99.9=9807, 99.99=32255] [UPDATE: Count=400636, Max=27663, Min=470, Avg=1666.91, 90=2369, 99=3141, 99.9=5679, 99.99=20511] 
2023-05-04 21:20:45:198 40 sec: 3143632 operations; 80000.5 current ops/sec; est completion in 3 hours 31 minutes [READ: Count=399720, Max=50239, Min=548, Avg=2785.58, 90=4023, 99=5527, 99.9=9711, 99.99=31071] [UPDATE: Count=400250, Max=27311, Min=468, Avg=1675.23, 90=2375, 99=3147, 99.9=5991, 99.99=21151] 
2023-05-04 21:20:55:198 50 sec: 3943609 operations; 79997.7 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=400430, Max=10679, Min=537, Avg=2771.44, 90=4021, 99=5475, 99.9=7223, 99.99=9591] [UPDATE: Count=399395, Max=9351, Min=472, Avg=1669.91, 90=2371, 99=3137, 99.9=5911, 99.99=7675] 
2023-05-04 21:21:05:198 60 sec: 4743601 operations; 79999.2 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=399918, Max=48511, Min=528, Avg=2805.26, 90=4055, 99=5615, 99.9=11839, 99.99=30959] [UPDATE: Count=400342, Max=26975, Min=462, Avg=1683.94, 90=2391, 99=3193, 99.9=6511, 99.99=19199] 
2023-05-04 21:21:15:198 70 sec: 5543662 operations; 80006.1 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=400603, Max=73919, Min=523, Avg=2845.03, 90=4111, 99=5963, 99.9=15319, 99.99=40671] [UPDATE: Count=399676, Max=47039, Min=463, Avg=1706.14, 90=2415, 99=3291, 99.9=7547, 99.99=24175] 
2023-05-04 21:21:25:198 80 sec: 6343584 operations; 79992.2 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399395, Max=20479, Min=517, Avg=2798.28, 90=4061, 99=5775, 99.9=8447, 99.99=12511] [UPDATE: Count=400103, Max=17263, Min=473, Avg=1687.99, 90=2393, 99=3293, 99.9=6719, 99.99=9799] 
2023-05-04 21:21:35:198 90 sec: 7143610 operations; 80002.6 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=400102, Max=52735, Min=509, Avg=2851.96, 90=4131, 99=5987, 99.9=10935, 99.99=33247] [UPDATE: Count=399490, Max=28799, Min=481, Avg=1713.77, 90=2423, 99=3349, 99.9=7343, 99.99=22431] 
2023-05-04 21:21:45:198 100 sec: 7943589 operations; 79997.9 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399033, Max=52063, Min=542, Avg=2818.52, 90=4073, 99=5851, 99.9=11879, 99.99=31839] [UPDATE: Count=401288, Max=28335, Min=471, Avg=1697.03, 90=2401, 99=3333, 99.9=6959, 99.99=21967] 
2023-05-04 21:21:55:198 110 sec: 8743607 operations; 80001.8 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400892, Max=23183, Min=540, Avg=2821.21, 90=4091, 99=5763, 99.9=9015, 99.99=21071] [UPDATE: Count=399461, Max=21647, Min=461, Avg=1697.52, 90=2403, 99=3267, 99.9=6771, 99.99=18847] 
2023-05-04 21:22:05:198 120 sec: 9543639 operations; 80003.2 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399743, Max=70015, Min=513, Avg=2854.01, 90=4127, 99=6087, 99.9=12335, 99.99=30495] [UPDATE: Count=400320, Max=39295, Min=471, Avg=1710.52, 90=2413, 99=3333, 99.9=7439, 99.99=20607] 
2023-05-04 21:22:15:198 130 sec: 10343611 operations; 79997.2 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399158, Max=56063, Min=532, Avg=2828.6, 90=4083, 99=5987, 99.9=11335, 99.99=36447] [UPDATE: Count=400600, Max=28911, Min=454, Avg=1698.52, 90=2409, 99=3319, 99.9=7043, 99.99=21151] 
2023-05-04 21:22:25:198 140 sec: 11143591 operations; 79998 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400532, Max=17487, Min=521, Avg=2851.75, 90=4155, 99=5887, 99.9=8171, 99.99=10847] [UPDATE: Count=399338, Max=16255, Min=452, Avg=1712.69, 90=2433, 99=3337, 99.9=6659, 99.99=8903] 
2023-05-04 21:22:35:198 150 sec: 11943604 operations; 80001.3 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399953, Max=52959, Min=548, Avg=2837.83, 90=4115, 99=6011, 99.9=10471, 99.99=32863] [UPDATE: Count=400164, Max=43999, Min=463, Avg=1704.5, 90=2417, 99=3367, 99.9=7195, 99.99=22223] 
2023-05-04 21:22:45:198 160 sec: 12743595 operations; 79999.1 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400962, Max=51743, Min=537, Avg=2850.47, 90=4147, 99=6019, 99.9=11423, 99.99=31215] [UPDATE: Count=399033, Max=29375, Min=438, Avg=1708.27, 90=2429, 99=3403, 99.9=6779, 99.99=18767] 
2023-05-04 21:22:55:198 170 sec: 13543521 operations; 79992.6 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399003, Max=13407, Min=554, Avg=2928.49, 90=4335, 99=6099, 99.9=8383, 99.99=9919] [UPDATE: Count=401121, Max=9367, Min=457, Avg=1742.07, 90=2483, 99=3343, 99.9=6787, 99.99=8311] 
2023-05-04 21:23:05:198 180 sec: 14343304 operations; 79978.3 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400061, Max=66367, Min=524, Avg=3418.52, 90=5111, 99=6895, 99.9=12167, 99.99=34975] [UPDATE: Count=399869, Max=41311, Min=475, Avg=1947.29, 90=2797, 99=3767, 99.9=7155, 99.99=19007] 
2023-05-04 21:23:15:198 190 sec: 15140347 operations; 79704.3 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=398495, Max=56799, Min=550, Avg=3844.24, 90=5699, 99=7279, 99.9=10159, 99.99=30927] [UPDATE: Count=398177, Max=27791, Min=481, Avg=2101.4, 90=2947, 99=3829, 99.9=7251, 99.99=21951] 
2023-05-04 21:23:25:198 200 sec: 15861750 operations; 72140.3 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=360368, Max=22191, Min=570, Avg=4478.49, 90=6159, 99=7631, 99.9=10023, 99.99=13031] [UPDATE: Count=360642, Max=16071, Min=484, Avg=2450.96, 90=3279, 99=4195, 99.9=7359, 99.99=8895] 
2023-05-04 21:23:35:198 210 sec: 16484207 operations; 62245.7 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=311780, Max=47071, Min=920, Avg=5116.3, 90=6375, 99=7775, 99.9=10879, 99.99=29775] [UPDATE: Count=310520, Max=29695, Min=678, Avg=2911.11, 90=3597, 99=4499, 99.9=8007, 99.99=20191] 
2023-05-04 21:23:45:198 220 sec: 17145869 operations; 66166.2 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=331093, Max=49535, Min=517, Avg=4801.18, 90=6207, 99=7491, 99.9=11343, 99.99=31839] [UPDATE: Count=330885, Max=38335, Min=466, Avg=2749.17, 90=3535, 99=4211, 99.9=7503, 99.99=19439] 
2023-05-04 21:23:55:198 230 sec: 17908359 operations; 76249 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=380831, Max=13159, Min=521, Avg=4175.72, 90=5891, 99=7455, 99.9=9527, 99.99=11143] [UPDATE: Count=381763, Max=9607, Min=452, Avg=2379.84, 90=3311, 99=4199, 99.9=6979, 99.99=8327] 
2023-05-04 21:24:05:198 240 sec: 18718567 operations; 81020.8 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=404565, Max=61599, Min=555, Avg=3946.97, 90=5679, 99=7611, 99.9=11543, 99.99=36479] [UPDATE: Count=405863, Max=43423, Min=478, Avg=2223.07, 90=3137, 99=4167, 99.9=7715, 99.99=23839] 
2023-05-04 21:24:15:198 250 sec: 19545091 operations; 82652.4 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=413075, Max=50271, Min=520, Avg=3873.35, 90=5527, 99=7343, 99.9=10783, 99.99=33151] [UPDATE: Count=412939, Max=27839, Min=450, Avg=2176.31, 90=3039, 99=3969, 99.9=7567, 99.99=19135] 
2023-05-04 21:24:25:198 260 sec: 20377667 operations; 83257.6 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=416887, Max=23711, Min=529, Avg=3842.63, 90=5511, 99=7271, 99.9=10095, 99.99=17727] [UPDATE: Count=416138, Max=20271, Min=470, Avg=2154.52, 90=3019, 99=3913, 99.9=7367, 99.99=11911] 
2023-05-04 21:24:35:198 270 sec: 21209986 operations; 83231.9 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=415818, Max=51167, Min=513, Avg=3844.69, 90=5531, 99=7383, 99.9=11471, 99.99=33183] [UPDATE: Count=416604, Max=30015, Min=473, Avg=2160.57, 90=3031, 99=4009, 99.9=7619, 99.99=23263] 
2023-05-04 21:24:45:198 280 sec: 22044870 operations; 83488.4 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=417684, Max=54975, Min=531, Avg=3831.86, 90=5523, 99=7415, 99.9=11583, 99.99=33759] [UPDATE: Count=417372, Max=29343, Min=479, Avg=2152.93, 90=3025, 99=4023, 99.9=7443, 99.99=21711] 
2023-05-04 21:24:55:198 290 sec: 22874145 operations; 82927.5 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=414730, Max=16639, Min=552, Avg=3866.33, 90=5619, 99=7675, 99.9=10055, 99.99=11695] [UPDATE: Count=414296, Max=10543, Min=470, Avg=2159.36, 90=3047, 99=4005, 99.9=7099, 99.99=8799] 
2023-05-04 21:25:05:198 300 sec: 23705226 operations; 83108.1 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=415914, Max=54367, Min=524, Avg=3858.6, 90=5603, 99=7803, 99.9=14983, 99.99=33727] [UPDATE: Count=414874, Max=28111, Min=481, Avg=2156.27, 90=3043, 99=4073, 99.9=8015, 99.99=20783] 
2023-05-04 21:25:15:198 310 sec: 24544046 operations; 83882 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=419455, Max=56575, Min=537, Avg=3823.1, 90=5575, 99=7671, 99.9=13911, 99.99=35327] [UPDATE: Count=420099, Max=29647, Min=466, Avg=2131.49, 90=3019, 99=3985, 99.9=7591, 99.99=21775] 
2023-05-04 21:25:25:198 320 sec: 25398373 operations; 85432.7 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=427725, Max=20559, Min=559, Avg=3752.24, 90=5503, 99=7475, 99.9=9687, 99.99=13215] [UPDATE: Count=425323, Max=28703, Min=462, Avg=2097.26, 90=2949, 99=3925, 99.9=7151, 99.99=15055] 
2023-05-04 21:25:35:198 330 sec: 26245028 operations; 84665.5 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=422605, Max=51551, Min=525, Avg=3793.22, 90=5563, 99=7791, 99.9=14247, 99.99=32511] [UPDATE: Count=425318, Max=29487, Min=485, Avg=2108.43, 90=2969, 99=4053, 99.9=7351, 99.99=22831] 
2023-05-04 21:25:45:198 340 sec: 27096295 operations; 85126.7 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=425393, Max=61503, Min=547, Avg=3766.72, 90=5507, 99=7611, 99.9=15831, 99.99=35711] [UPDATE: Count=425553, Max=43775, Min=479, Avg=2102.74, 90=2971, 99=3949, 99.9=7659, 99.99=17695] 
2023-05-04 21:25:55:198 350 sec: 27939574 operations; 84327.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=421213, Max=17343, Min=539, Avg=3705.54, 90=5443, 99=7411, 99.9=9711, 99.99=11823] [UPDATE: Count=422002, Max=13647, Min=469, Avg=2080.73, 90=2945, 99=3885, 99.9=7327, 99.99=9119] 
2023-05-04 21:26:05:198 360 sec: 28743495 operations; 80392.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=401949, Max=58655, Min=539, Avg=3499.06, 90=5159, 99=7023, 99.9=11151, 99.99=30703] [UPDATE: Count=401941, Max=42783, Min=471, Avg=1987.99, 90=2847, 99=3799, 99.9=7383, 99.99=19551] 
2023-05-04 21:26:15:198 370 sec: 29543281 operations; 79978.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399622, Max=58495, Min=534, Avg=3424.47, 90=5075, 99=7027, 99.9=11071, 99.99=36415] [UPDATE: Count=400180, Max=45663, Min=463, Avg=1952.48, 90=2815, 99=3793, 99.9=7195, 99.99=19359] 
2023-05-04 21:26:25:198 380 sec: 30343412 operations; 80013.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400879, Max=18783, Min=548, Avg=3386.37, 90=5039, 99=6875, 99.9=9191, 99.99=12271] [UPDATE: Count=399217, Max=17167, Min=468, Avg=1938.59, 90=2807, 99=3739, 99.9=7259, 99.99=9303] 
2023-05-04 21:26:35:198 390 sec: 31143514 operations; 80010.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400316, Max=49407, Min=552, Avg=3420.59, 90=5071, 99=6979, 99.9=10719, 99.99=31023] [UPDATE: Count=399981, Max=26991, Min=478, Avg=1951.54, 90=2815, 99=3781, 99.9=7139, 99.99=16111] 
2023-05-04 21:26:45:198 400 sec: 31943496 operations; 79998.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399959, Max=53183, Min=534, Avg=3403.32, 90=5059, 99=6911, 99.9=10487, 99.99=30671] [UPDATE: Count=399903, Max=28719, Min=469, Avg=1947.6, 90=2817, 99=3799, 99.9=7363, 99.99=20543] 
2023-05-04 21:26:55:198 410 sec: 32743482 operations; 79998.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399733, Max=13951, Min=553, Avg=3416.89, 90=5087, 99=6919, 99.9=9015, 99.99=11087] [UPDATE: Count=400114, Max=9431, Min=462, Avg=1952.26, 90=2817, 99=3759, 99.9=6935, 99.99=8359] 
2023-05-04 21:27:05:198 420 sec: 33543522 operations; 80004 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400176, Max=52223, Min=535, Avg=3432.92, 90=5107, 99=7091, 99.9=12023, 99.99=35167] [UPDATE: Count=399908, Max=28207, Min=470, Avg=1956.42, 90=2833, 99=3851, 99.9=7271, 99.99=22543] 
2023-05-04 21:27:15:198 430 sec: 34343516 operations; 79999.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399860, Max=52575, Min=528, Avg=3400.75, 90=5043, 99=6967, 99.9=11455, 99.99=31503] [UPDATE: Count=400106, Max=30415, Min=470, Avg=1945.97, 90=2815, 99=3779, 99.9=7395, 99.99=19567] 
2023-05-04 21:27:25:198 440 sec: 35143475 operations; 79995.9 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400382, Max=22831, Min=523, Avg=3375.48, 90=5003, 99=6871, 99.9=9143, 99.99=13071] [UPDATE: Count=399686, Max=18063, Min=459, Avg=1935.69, 90=2813, 99=3761, 99.9=6995, 99.99=9279] 
2023-05-04 21:27:35:198 450 sec: 35943505 operations; 80003 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399892, Max=51423, Min=518, Avg=3352.07, 90=4959, 99=6855, 99.9=10359, 99.99=30959] [UPDATE: Count=399993, Max=27471, Min=463, Avg=1924.39, 90=2795, 99=3731, 99.9=7163, 99.99=18607] 
2023-05-04 21:27:45:198 460 sec: 36743500 operations; 79999.5 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399373, Max=54431, Min=528, Avg=3386.23, 90=5011, 99=7067, 99.9=11495, 99.99=33663] [UPDATE: Count=400689, Max=27599, Min=468, Avg=1931.91, 90=2795, 99=3739, 99.9=7435, 99.99=16847] 
2023-05-04 21:27:55:199 470 sec: 37543264 operations; 79960.41 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400631, Max=12543, Min=534, Avg=3292.04, 90=4871, 99=6667, 99.9=9039, 99.99=10719] [UPDATE: Count=399175, Max=10719, Min=465, Avg=1900.93, 90=2767, 99=3645, 99.9=7203, 99.99=8623] 
2023-05-04 21:28:05:198 480 sec: 38343468 operations; 80036.41 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400743, Max=51135, Min=519, Avg=3474.39, 90=5155, 99=7315, 99.9=12311, 99.99=31743] [UPDATE: Count=399812, Max=28783, Min=468, Avg=1973, 90=2857, 99=3805, 99.9=7655, 99.99=20127] 
2023-05-04 21:28:15:198 490 sec: 39143049 operations; 79958.1 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399206, Max=55231, Min=515, Avg=3624.25, 90=5347, 99=7235, 99.9=10855, 99.99=32991] [UPDATE: Count=399961, Max=34815, Min=448, Avg=2028.86, 90=2911, 99=3813, 99.9=7331, 99.99=20975] 
2023-05-04 21:28:25:198 500 sec: 39942291 operations; 79924.2 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400656, Max=19663, Min=575, Avg=3880.16, 90=5755, 99=7535, 99.9=9847, 99.99=12271] [UPDATE: Count=398409, Max=16463, Min=458, Avg=2103.39, 90=2965, 99=3827, 99.9=7411, 99.99=9831] 
2023-05-04 21:28:35:198 510 sec: 40728775 operations; 78648.4 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=393087, Max=48863, Min=569, Avg=4127.09, 90=5999, 99=7963, 99.9=10967, 99.99=31903] [UPDATE: Count=393717, Max=27647, Min=455, Avg=2204.17, 90=3065, 99=4069, 99.9=7263, 99.99=21439] 
2023-05-04 21:28:45:198 520 sec: 41464776 operations; 73600.1 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=368080, Max=54559, Min=570, Avg=4427.7, 90=6203, 99=8279, 99.9=12695, 99.99=30527] [UPDATE: Count=367537, Max=29183, Min=485, Avg=2363.04, 90=3209, 99=4231, 99.9=7491, 99.99=21919] 
2023-05-04 21:28:55:198 530 sec: 42132256 operations; 66748 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=333426, Max=19007, Min=855, Avg=4862.21, 90=6419, 99=8071, 99.9=10335, 99.99=12287] [UPDATE: Count=333887, Max=11215, Min=544, Avg=2629.56, 90=3479, 99=4319, 99.9=7327, 99.99=8879] 
2023-05-04 21:29:05:198 540 sec: 42741003 operations; 60874.7 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=303784, Max=47007, Min=568, Avg=5241.97, 90=6507, 99=8087, 99.9=11479, 99.99=30015] [UPDATE: Count=304934, Max=29519, Min=467, Avg=2972.14, 90=3615, 99=4599, 99.9=7875, 99.99=18927] 
2023-05-04 21:29:15:198 550 sec: 43363686 operations; 62268.3 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=311211, Max=61343, Min=527, Avg=5108.05, 90=6379, 99=7819, 99.9=10879, 99.99=36447] [UPDATE: Count=311503, Max=39647, Min=448, Avg=2919.33, 90=3585, 99=4451, 99.9=7803, 99.99=23855] 
2023-05-04 21:29:25:198 560 sec: 44027794 operations; 66410.8 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=331724, Max=19295, Min=519, Avg=4782.22, 90=6211, 99=7683, 99.9=10319, 99.99=12951] [UPDATE: Count=332446, Max=15167, Min=467, Avg=2744.95, 90=3549, 99=4391, 99.9=7687, 99.99=10199] 
2023-05-04 21:29:35:198 570 sec: 44717374 operations; 68958 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=344401, Max=46847, Min=524, Avg=4619.87, 90=6111, 99=7543, 99.9=10743, 99.99=32623] [UPDATE: Count=345353, Max=31119, Min=460, Avg=2629.99, 90=3481, 99=4251, 99.9=7759, 99.99=20815] 
2023-05-04 21:29:45:198 580 sec: 45431096 operations; 71372.2 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=357588, Max=50143, Min=513, Avg=4468.25, 90=6075, 99=7783, 99.9=11935, 99.99=31855] [UPDATE: Count=356241, Max=45791, Min=446, Avg=2529.97, 90=3415, 99=4339, 99.9=7687, 99.99=22607] 
2023-05-04 21:29:55:198 590 sec: 46178828 operations; 74773.2 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=373568, Max=13887, Min=527, Avg=4275.3, 90=5995, 99=7619, 99.9=9799, 99.99=11815] [UPDATE: Count=374208, Max=10655, Min=466, Avg=2409.75, 90=3315, 99=4195, 99.9=7367, 99.99=8935] 
2023-05-04 21:30:05:198 600 sec: 46937389 operations; 75856.1 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=378840, Max=53439, Min=539, Avg=4219.57, 90=5971, 99=7823, 99.9=10879, 99.99=34399] [UPDATE: Count=379605, Max=35007, Min=447, Avg=2370.66, 90=3293, 99=4307, 99.9=7815, 99.99=21967] 
2023-05-04 21:30:15:198 610 sec: 47715602 operations; 77821.3 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=389586, Max=52703, Min=552, Avg=4126.27, 90=5907, 99=7935, 99.9=11647, 99.99=33055] [UPDATE: Count=388894, Max=37471, Min=474, Avg=2293.03, 90=3225, 99=4143, 99.9=7751, 99.99=22559] 
2023-05-04 21:30:25:198 620 sec: 48502103 operations; 78650.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=393300, Max=22127, Min=521, Avg=4088.37, 90=5907, 99=8231, 99.9=14991, 99.99=19551] [UPDATE: Count=393216, Max=18751, Min=462, Avg=2265.44, 90=3213, 99=4307, 99.9=7763, 99.99=15135] 
2023-05-04 21:30:35:198 630 sec: 49293953 operations; 79185 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=396163, Max=52767, Min=553, Avg=4050.5, 90=5859, 99=7867, 99.9=11111, 99.99=32719] [UPDATE: Count=395871, Max=33503, Min=460, Avg=2259.76, 90=3215, 99=4187, 99.9=7699, 99.99=20607] 
2023-05-04 21:30:45:198 640 sec: 50090658 operations; 79670.5 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=398259, Max=45535, Min=567, Avg=4027.01, 90=5887, 99=7995, 99.9=11495, 99.99=30927] [UPDATE: Count=397273, Max=29823, Min=469, Avg=2250.65, 90=3221, 99=4291, 99.9=7863, 99.99=23071] 
2023-05-04 21:30:55:198 650 sec: 50897509 operations; 80685.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=403420, Max=31327, Min=528, Avg=3979.21, 90=5875, 99=8023, 99.9=10975, 99.99=22831] [UPDATE: Count=404283, Max=29423, Min=475, Avg=2210.71, 90=3155, 99=4199, 99.9=7507, 99.99=12727] 
2023-05-04 21:31:05:198 660 sec: 51713104 operations; 81559.5 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=408133, Max=49663, Min=533, Avg=3943.05, 90=5803, 99=8171, 99.9=12727, 99.99=30703] [UPDATE: Count=407491, Max=26703, Min=468, Avg=2181.7, 90=3081, 99=4199, 99.9=8151, 99.99=20239] 
2023-05-04 21:31:15:198 670 sec: 52534538 operations; 82143.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=410836, Max=62527, Min=569, Avg=3932.67, 90=5807, 99=8303, 99.9=15391, 99.99=41407] [UPDATE: Count=410350, Max=42431, Min=473, Avg=2151.91, 90=3021, 99=4123, 99.9=8059, 99.99=21007] 
2023-05-04 21:31:25:198 680 sec: 53360851 operations; 82631.3 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=412854, Max=22239, Min=527, Avg=3902.33, 90=5783, 99=8059, 99.9=10871, 99.99=16175] [UPDATE: Count=413615, Max=17887, Min=483, Avg=2145.01, 90=3017, 99=4073, 99.9=7399, 99.99=11615] 
2023-05-04 21:31:35:198 690 sec: 54186531 operations; 82568 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=413405, Max=51967, Min=556, Avg=3902.9, 90=5803, 99=8199, 99.9=11887, 99.99=31935] [UPDATE: Count=412437, Max=37855, Min=450, Avg=2147.08, 90=3035, 99=4231, 99.9=7447, 99.99=19295] 
2023-05-04 21:31:45:198 700 sec: 55010754 operations; 82422.3 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=411905, Max=59167, Min=530, Avg=3917.86, 90=5835, 99=8495, 99.9=17007, 99.99=35167] [UPDATE: Count=412216, Max=27887, Min=469, Avg=2146.14, 90=3039, 99=4263, 99.9=7847, 99.99=19455] 
2023-05-04 21:31:55:198 710 sec: 55841921 operations; 83116.7 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=415339, Max=16175, Min=529, Avg=3876.06, 90=5767, 99=8055, 99.9=10367, 99.99=12367] [UPDATE: Count=416054, Max=11191, Min=475, Avg=2137.63, 90=3025, 99=4111, 99.9=7127, 99.99=8735] 
2023-05-04 21:32:05:198 720 sec: 56668753 operations; 82683.2 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413845, Max=54527, Min=521, Avg=3903.06, 90=5799, 99=8583, 99.9=19455, 99.99=37535] [UPDATE: Count=412826, Max=27519, Min=453, Avg=2138.99, 90=3029, 99=4307, 99.9=7943, 99.99=18415] 
2023-05-04 21:32:15:198 730 sec: 57495436 operations; 82668.3 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413447, Max=55615, Min=543, Avg=3905.77, 90=5843, 99=8335, 99.9=12407, 99.99=35039] [UPDATE: Count=413201, Max=27679, Min=476, Avg=2138.87, 90=3037, 99=4199, 99.9=7399, 99.99=17711] 
2023-05-04 21:32:25:198 740 sec: 58326462 operations; 83102.6 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=415512, Max=20671, Min=511, Avg=3877.26, 90=5791, 99=8091, 99.9=10455, 99.99=13623] [UPDATE: Count=415472, Max=15935, Min=487, Avg=2136.1, 90=3031, 99=4143, 99.9=7375, 99.99=10679] 
2023-05-04 21:32:35:198 750 sec: 59157188 operations; 83072.6 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414973, Max=73791, Min=568, Avg=3880.4, 90=5759, 99=8079, 99.9=13839, 99.99=37631] [UPDATE: Count=415810, Max=28079, Min=461, Avg=2136.79, 90=3025, 99=4171, 99.9=7283, 99.99=21087] 
2023-05-04 21:32:45:198 760 sec: 59984896 operations; 82770.8 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=413338, Max=54911, Min=540, Avg=3900.3, 90=5799, 99=8239, 99.9=12535, 99.99=33951] [UPDATE: Count=414411, Max=30607, Min=447, Avg=2139.27, 90=3021, 99=4203, 99.9=7515, 99.99=22335] 
2023-05-04 21:32:55:198 770 sec: 60818193 operations; 83329.7 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=415910, Max=18175, Min=550, Avg=3870.37, 90=5779, 99=8139, 99.9=10535, 99.99=12583] [UPDATE: Count=417240, Max=12927, Min=479, Avg=2130.06, 90=3025, 99=4057, 99.9=7623, 99.99=9183] 
2023-05-04 21:33:05:198 780 sec: 61644359 operations; 82616.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=413691, Max=53151, Min=553, Avg=3905.28, 90=5839, 99=8391, 99.9=15255, 99.99=32479] [UPDATE: Count=412567, Max=30559, Min=469, Avg=2141.04, 90=3039, 99=4291, 99.9=7659, 99.99=21263] 
2023-05-04 21:33:15:198 790 sec: 62469669 operations; 82531 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=412112, Max=53599, Min=569, Avg=3912.75, 90=5811, 99=8239, 99.9=12095, 99.99=31519] [UPDATE: Count=413197, Max=28959, Min=461, Avg=2144.6, 90=3039, 99=4151, 99.9=7827, 99.99=22527] 
2023-05-04 21:33:25:198 800 sec: 63284193 operations; 81452.4 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=407126, Max=19119, Min=522, Avg=3975.1, 90=5867, 99=8007, 99.9=10479, 99.99=13623] [UPDATE: Count=407337, Max=16399, Min=463, Avg=2161.04, 90=3053, 99=4049, 99.9=7527, 99.99=9623] 
2023-05-04 21:33:35:198 810 sec: 64084976 operations; 80078.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=400204, Max=48831, Min=527, Avg=4056.26, 90=5979, 99=8247, 99.9=14871, 99.99=32927] [UPDATE: Count=400668, Max=26703, Min=456, Avg=2185.35, 90=3085, 99=4219, 99.9=7907, 99.99=22463] 
2023-05-04 21:33:45:198 820 sec: 64868429 operations; 78345.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=390602, Max=48191, Min=568, Avg=4180.23, 90=6151, 99=8359, 99.9=12487, 99.99=31615] [UPDATE: Count=392739, Max=27087, Min=479, Avg=2204.07, 90=3085, 99=4077, 99.9=7563, 99.99=20111] 
2023-05-04 21:33:55:198 830 sec: 65632637 operations; 76420.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=382609, Max=22671, Min=577, Avg=4289.47, 90=6275, 99=8551, 99.9=11623, 99.99=17439] [UPDATE: Count=381544, Max=10887, Min=473, Avg=2247.57, 90=3139, 99=4207, 99.9=7391, 99.99=8815] 
2023-05-04 21:34:05:198 840 sec: 66386957 operations; 75432 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=377055, Max=52255, Min=537, Avg=4328.14, 90=6263, 99=8719, 99.9=14255, 99.99=34527] [UPDATE: Count=377221, Max=30319, Min=484, Avg=2298.14, 90=3203, 99=4375, 99.9=7887, 99.99=20815] 
2023-05-04 21:34:15:198 850 sec: 67119694 operations; 73273.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=366226, Max=52831, Min=541, Avg=4437.02, 90=6251, 99=8383, 99.9=11511, 99.99=29071] [UPDATE: Count=366558, Max=26895, Min=463, Avg=2384.46, 90=3275, 99=4351, 99.9=7739, 99.99=19311] 
2023-05-04 21:34:25:198 860 sec: 67820204 operations; 70051 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=351113, Max=22559, Min=741, Avg=4647.5, 90=6307, 99=8247, 99.9=11367, 99.99=17503] [UPDATE: Count=349211, Max=17423, Min=525, Avg=2482.24, 90=3289, 99=4291, 99.9=7583, 99.99=12223] 
2023-05-04 21:34:35:198 870 sec: 68494625 operations; 67442.1 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=336727, Max=49471, Min=911, Avg=4768.99, 90=6331, 99=8147, 99.9=11095, 99.99=31983] [UPDATE: Count=337687, Max=29359, Min=546, Avg=2645.42, 90=3447, 99=4455, 99.9=7743, 99.99=18527] 
2023-05-04 21:34:45:198 880 sec: 69153422 operations; 65879.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=329390, Max=49055, Min=537, Avg=4855.73, 90=6275, 99=7895, 99.9=11615, 99.99=31695] [UPDATE: Count=329530, Max=34431, Min=456, Avg=2731.1, 90=3477, 99=4347, 99.9=7851, 99.99=22159] 
2023-05-04 21:34:55:198 890 sec: 69833027 operations; 67960.5 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=339445, Max=13487, Min=502, Avg=4708.4, 90=6255, 99=7855, 99.9=10119, 99.99=11519] [UPDATE: Count=340026, Max=9975, Min=462, Avg=2647.4, 90=3485, 99=4375, 99.9=7511, 99.99=8919] 
2023-05-04 21:35:05:198 900 sec: 70569054 operations; 73602.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=368310, Max=51743, Min=565, Avg=4360.02, 90=6059, 99=8011, 99.9=12103, 99.99=35039] [UPDATE: Count=368065, Max=32095, Min=475, Avg=2428.27, 90=3309, 99=4371, 99.9=7927, 99.99=20479] 
2023-05-04 21:35:15:198 910 sec: 71328018 operations; 75896.4 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=380356, Max=48191, Min=528, Avg=4242.02, 90=5959, 99=7911, 99.9=12039, 99.99=33951] [UPDATE: Count=378388, Max=33823, Min=475, Avg=2339.44, 90=3195, 99=4139, 99.9=8067, 99.99=21071] 
2023-05-04 21:35:25:198 920 sec: 72103657 operations; 77563.9 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=388375, Max=28159, Min=552, Avg=4166.91, 90=5911, 99=7911, 99.9=11191, 99.99=16415] [UPDATE: Count=387298, Max=16055, Min=460, Avg=2272.23, 90=3133, 99=3953, 99.9=7259, 99.99=11671] 
2023-05-04 21:35:35:198 930 sec: 72890594 operations; 78693.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=392848, Max=47935, Min=533, Avg=4122.19, 90=5963, 99=8415, 99.9=13911, 99.99=32927] [UPDATE: Count=393628, Max=29279, Min=469, Avg=2234.92, 90=3119, 99=4107, 99.9=7783, 99.99=22063] 
2023-05-04 21:35:45:198 940 sec: 73669241 operations; 77864.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=389853, Max=52319, Min=525, Avg=4162.84, 90=6011, 99=9367, 99.9=20303, 99.99=35807] [UPDATE: Count=389472, Max=43903, Min=471, Avg=2248.93, 90=3133, 99=4535, 99.9=8191, 99.99=23087] 
2023-05-04 21:35:55:198 950 sec: 74476699 operations; 80745.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=403241, Max=15999, Min=502, Avg=4003.44, 90=5839, 99=7971, 99.9=10167, 99.99=12015] [UPDATE: Count=404019, Max=10007, Min=475, Avg=2187.98, 90=3061, 99=4067, 99.9=7063, 99.99=8199] 
2023-05-04 21:36:05:198 960 sec: 75278538 operations; 80183.9 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=401502, Max=68415, Min=552, Avg=4035.08, 90=5855, 99=8239, 99.9=17583, 99.99=48671] [UPDATE: Count=400798, Max=29951, Min=480, Avg=2194.41, 90=3053, 99=4163, 99.9=8503, 99.99=24431] 
2023-05-04 21:36:15:198 970 sec: 76079991 operations; 80145.3 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=400453, Max=67711, Min=518, Avg=4038.13, 90=5859, 99=8231, 99.9=15551, 99.99=64607] [UPDATE: Count=401059, Max=64351, Min=483, Avg=2198.42, 90=3047, 99=4095, 99.9=8087, 99.99=62079] 
2023-05-04 21:36:25:198 980 sec: 76890438 operations; 81044.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=405200, Max=20047, Min=532, Avg=3980.22, 90=5795, 99=7895, 99.9=10255, 99.99=12983] [UPDATE: Count=404812, Max=16479, Min=455, Avg=2186.15, 90=3055, 99=4075, 99.9=7391, 99.99=9271] 
2023-05-04 21:36:35:198 990 sec: 77692494 operations; 80205.6 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=400302, Max=51263, Min=533, Avg=4038.78, 90=5903, 99=8263, 99.9=12815, 99.99=32527] [UPDATE: Count=401746, Max=29295, Min=490, Avg=2195.67, 90=3073, 99=4275, 99.9=7235, 99.99=18623] 
2023-05-04 21:36:45:198 1000 sec: 78490400 operations; 79790.6 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=399695, Max=52831, Min=533, Avg=4062.11, 90=5983, 99=8439, 99.9=12703, 99.99=33055] [UPDATE: Count=398210, Max=29327, Min=465, Avg=2197.43, 90=3087, 99=4259, 99.9=7139, 99.99=21343] 
2023-05-04 21:36:55:198 1010 sec: 79294152 operations; 80375.2 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=402268, Max=24479, Min=535, Avg=4022.33, 90=5883, 99=8187, 99.9=11351, 99.99=17199] [UPDATE: Count=401515, Max=11607, Min=455, Avg=2193.78, 90=3079, 99=4219, 99.9=7203, 99.99=8615] 
2023-05-04 21:37:05:198 1020 sec: 80098222 operations; 80407 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=401529, Max=53407, Min=563, Avg=4029.13, 90=5911, 99=8407, 99.9=13551, 99.99=38367] [UPDATE: Count=402755, Max=28223, Min=482, Avg=2188.09, 90=3061, 99=4231, 99.9=7743, 99.99=18447] 
2023-05-04 21:37:15:198 1030 sec: 80899217 operations; 80099.5 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=400723, Max=62847, Min=579, Avg=4050.43, 90=5943, 99=8631, 99.9=18415, 99.99=39327] [UPDATE: Count=399295, Max=32559, Min=472, Avg=2192.12, 90=3063, 99=4375, 99.9=7751, 99.99=23631] 
2023-05-04 21:37:25:198 1040 sec: 81708411 operations; 80919.4 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=404173, Max=37887, Min=544, Avg=3993.52, 90=5863, 99=8167, 99.9=11207, 99.99=24255] [UPDATE: Count=406066, Max=33183, Min=479, Avg=2179.2, 90=3057, 99=4163, 99.9=7387, 99.99=13943] 
2023-05-04 21:37:35:198 1050 sec: 82512601 operations; 80419 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=402435, Max=52895, Min=576, Avg=4021.13, 90=5895, 99=8391, 99.9=14759, 99.99=34399] [UPDATE: Count=401590, Max=33951, Min=476, Avg=2191.45, 90=3075, 99=4287, 99.9=7443, 99.99=20991] 
2023-05-04 21:37:45:198 1060 sec: 83312812 operations; 80021.1 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=400085, Max=49087, Min=516, Avg=4054.37, 90=5931, 99=9335, 99.9=20111, 99.99=32527] [UPDATE: Count=400320, Max=27599, Min=478, Avg=2190.85, 90=3081, 99=4727, 99.9=7719, 99.99=22095] 
2023-05-04 21:37:55:198 1070 sec: 84123391 operations; 81057.9 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=404467, Max=19759, Min=558, Avg=3991.68, 90=5875, 99=8447, 99.9=11439, 99.99=14911] [UPDATE: Count=405741, Max=10263, Min=465, Avg=2177.33, 90=3061, 99=4255, 99.9=7427, 99.99=8903] 
2023-05-04 21:38:05:198 1080 sec: 84931422 operations; 80803.1 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=403782, Max=51775, Min=569, Avg=4010.86, 90=5891, 99=8919, 99.9=16703, 99.99=34527] [UPDATE: Count=404353, Max=28767, Min=472, Avg=2174.84, 90=3043, 99=4383, 99.9=7831, 99.99=19919] 
2023-05-04 21:38:15:198 1090 sec: 85745336 operations; 81391.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=406635, Max=53695, Min=558, Avg=3973.23, 90=5791, 99=8303, 99.9=18511, 99.99=35231] [UPDATE: Count=407526, Max=28015, Min=472, Avg=2168.02, 90=3041, 99=4231, 99.9=7527, 99.99=22079] 
2023-05-04 21:38:25:198 1100 sec: 86556399 operations; 81106.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=405721, Max=19391, Min=515, Avg=3990.68, 90=5859, 99=8335, 99.9=11159, 99.99=14791] [UPDATE: Count=404952, Max=16863, Min=480, Avg=2169.95, 90=3047, 99=4195, 99.9=7175, 99.99=11399] 
2023-05-04 21:38:35:198 1110 sec: 87358119 operations; 80172 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=400533, Max=57151, Min=573, Avg=4043.29, 90=5863, 99=8351, 99.9=20607, 99.99=36063] [UPDATE: Count=401376, Max=43551, Min=478, Avg=2191.65, 90=3073, 99=4279, 99.9=7471, 99.99=21247] 
2023-05-04 21:38:45:198 1120 sec: 88154253 operations; 79613.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=397758, Max=61983, Min=592, Avg=4068.01, 90=5919, 99=8279, 99.9=13215, 99.99=40127] [UPDATE: Count=398508, Max=27231, Min=473, Avg=2210.94, 90=3103, 99=4195, 99.9=7651, 99.99=22415] 
2023-05-04 21:38:55:198 1130 sec: 88943288 operations; 78903.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=394533, Max=14335, Min=572, Avg=4114.65, 90=6019, 99=8051, 99.9=10159, 99.99=12031] [UPDATE: Count=394307, Max=9655, Min=469, Avg=2218.57, 90=3101, 99=4195, 99.9=6991, 99.99=8391] 
2023-05-04 21:39:05:198 1140 sec: 89715403 operations; 77211.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=386298, Max=49343, Min=519, Avg=4236.9, 90=6231, 99=8591, 99.9=13719, 99.99=31071] [UPDATE: Count=385975, Max=28511, Min=477, Avg=2234.54, 90=3095, 99=4291, 99.9=7615, 99.99=21135] 
2023-05-04 21:39:15:198 1150 sec: 90473403 operations; 75800 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=379243, Max=65215, Min=558, Avg=4336.34, 90=6371, 99=9215, 99.9=15879, 99.99=37471] [UPDATE: Count=378733, Max=38623, Min=484, Avg=2255.78, 90=3113, 99=4411, 99.9=7399, 99.99=21519] 
2023-05-04 21:39:25:198 1160 sec: 91218037 operations; 74463.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371714, Max=20607, Min=569, Avg=4426.1, 90=6507, 99=9191, 99.9=12815, 99.99=17375] [UPDATE: Count=372625, Max=15215, Min=474, Avg=2288.87, 90=3149, 99=4443, 99.9=7335, 99.99=10311] 
2023-05-04 21:39:35:198 1170 sec: 91963470 operations; 74543.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372646, Max=59679, Min=561, Avg=4387.33, 90=6347, 99=9367, 99.9=16943, 99.99=34431] [UPDATE: Count=373233, Max=29359, Min=485, Avg=2316.62, 90=3191, 99=4715, 99.9=7491, 99.99=19807] 
2023-05-04 21:39:45:198 1180 sec: 92705631 operations; 74216.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371610, Max=61791, Min=562, Avg=4389.61, 90=6235, 99=8743, 99.9=13911, 99.99=35839] [UPDATE: Count=370111, Max=39967, Min=495, Avg=2342.22, 90=3195, 99=4487, 99.9=7423, 99.99=19727] 
2023-05-04 21:39:55:198 1190 sec: 93426479 operations; 72084.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=360252, Max=22959, Min=555, Avg=4524.85, 90=6323, 99=8615, 99.9=12151, 99.99=17407] [UPDATE: Count=360631, Max=18015, Min=482, Avg=2409.75, 90=3249, 99=4431, 99.9=7315, 99.99=13327] 
2023-05-04 21:40:05:198 1200 sec: 94124920 operations; 69844.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=349063, Max=68671, Min=951, Avg=4676.04, 90=6459, 99=8655, 99.9=12735, 99.99=36575] [UPDATE: Count=349437, Max=47487, Min=611, Avg=2480.96, 90=3327, 99=4507, 99.9=7771, 99.99=22351] 
2023-05-04 21:40:15:198 1210 sec: 94779972 operations; 65505.2 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=327362, Max=54687, Min=594, Avg=4916.39, 90=6463, 99=8303, 99.9=11575, 99.99=35455] [UPDATE: Count=327546, Max=35263, Min=486, Avg=2715.6, 90=3555, 99=4579, 99.9=7579, 99.99=22223] 
2023-05-04 21:40:25:198 1220 sec: 95423606 operations; 64363.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=321493, Max=18159, Min=513, Avg=4971.95, 90=6407, 99=8011, 99.9=10247, 99.99=13575] [UPDATE: Count=321912, Max=15335, Min=459, Avg=2795.78, 90=3589, 99=4471, 99.9=7491, 99.99=8855] 
2023-05-04 21:40:35:198 1230 sec: 96078076 operations; 65447 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=327081, Max=47615, Min=519, Avg=4896.83, 90=6431, 99=8159, 99.9=10839, 99.99=34879] [UPDATE: Count=327610, Max=30175, Min=450, Avg=2740.54, 90=3581, 99=4583, 99.9=7575, 99.99=22255] 
2023-05-04 21:40:45:198 1240 sec: 96759264 operations; 68118.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=340690, Max=48479, Min=488, Avg=4705.11, 90=6311, 99=8191, 99.9=12247, 99.99=32751] [UPDATE: Count=340688, Max=33215, Min=468, Avg=2631.15, 90=3529, 99=4583, 99.9=7259, 99.99=20895] 
2023-05-04 21:40:55:198 1250 sec: 97456243 operations; 69697.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=348561, Max=22687, Min=529, Avg=4596.96, 90=6227, 99=8063, 99.9=10839, 99.99=16367] [UPDATE: Count=347521, Max=27375, Min=460, Avg=2578.61, 90=3469, 99=4487, 99.9=7603, 99.99=17999] 
2023-05-04 21:41:05:198 1260 sec: 98160773 operations; 70453 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=351588, Max=53087, Min=502, Avg=4556.42, 90=6195, 99=8383, 99.9=16751, 99.99=35999] [UPDATE: Count=353857, Max=31967, Min=473, Avg=2535.87, 90=3435, 99=4431, 99.9=8011, 99.99=22367] 
2023-05-04 21:41:15:198 1270 sec: 98885449 operations; 72467.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=361866, Max=41151, Min=513, Avg=4438.66, 90=6135, 99=8115, 99.9=11487, 99.99=30959] [UPDATE: Count=362640, Max=29023, Min=478, Avg=2460.12, 90=3367, 99=4303, 99.9=7767, 99.99=21247] 
2023-05-04 21:41:25:198 1280 sec: 99626529 operations; 74108 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=370530, Max=20255, Min=508, Avg=4352.87, 90=6087, 99=8079, 99.9=10615, 99.99=14335] [UPDATE: Count=370438, Max=16895, Min=473, Avg=2390.66, 90=3255, 99=4275, 99.9=7531, 99.99=9295] 
2023-05-04 21:41:35:198 1290 sec: 100372466 operations; 74593.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372876, Max=56223, Min=541, Avg=4322.37, 90=6071, 99=8167, 99.9=12095, 99.99=35103] [UPDATE: Count=373235, Max=31327, Min=459, Avg=2377.89, 90=3243, 99=4267, 99.9=7859, 99.99=21519] 
2023-05-04 21:41:45:198 1300 sec: 101117769 operations; 74530.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372563, Max=49215, Min=560, Avg=4335.35, 90=6103, 99=8287, 99.9=15311, 99.99=31823] [UPDATE: Count=372925, Max=32959, Min=478, Avg=2370.59, 90=3247, 99=4315, 99.9=7895, 99.99=19599] 
2023-05-04 21:41:55:198 1310 sec: 101863857 operations; 74608.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372896, Max=15623, Min=554, Avg=4331.65, 90=6143, 99=8199, 99.9=10375, 99.99=12391] [UPDATE: Count=373146, Max=10503, Min=477, Avg=2367.54, 90=3253, 99=4311, 99.9=7431, 99.99=8895] 
2023-05-04 21:42:05:198 1320 sec: 102607795 operations; 74393.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371780, Max=54335, Min=558, Avg=4346.59, 90=6151, 99=8351, 99.9=14463, 99.99=34815] [UPDATE: Count=372208, Max=30047, Min=469, Avg=2372.13, 90=3263, 99=4391, 99.9=7879, 99.99=20271] 
2023-05-04 21:42:15:198 1330 sec: 103356741 operations; 74894.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373803, Max=44351, Min=542, Avg=4317.93, 90=6143, 99=8399, 99.9=12351, 99.99=30767] [UPDATE: Count=375098, Max=30511, Min=469, Avg=2358.16, 90=3247, 99=4403, 99.9=7843, 99.99=18783] 
2023-05-04 21:42:25:198 1340 sec: 104105076 operations; 74833.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374461, Max=23999, Min=549, Avg=4326.58, 90=6183, 99=8479, 99.9=11911, 99.99=18159] [UPDATE: Count=373696, Max=16447, Min=490, Avg=2349.92, 90=3247, 99=4435, 99.9=7507, 99.99=9671] 
2023-05-04 21:42:35:198 1350 sec: 104860920 operations; 75584.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=378056, Max=49087, Min=552, Avg=4276.47, 90=6095, 99=8271, 99.9=12647, 99.99=33535] [UPDATE: Count=377863, Max=29503, Min=460, Avg=2334.69, 90=3217, 99=4331, 99.9=7799, 99.99=19327] 
2023-05-04 21:42:45:198 1360 sec: 105614919 operations; 75399.9 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=377632, Max=45119, Min=578, Avg=4301.66, 90=6187, 99=9143, 99.9=19151, 99.99=32671] [UPDATE: Count=376362, Max=29839, Min=477, Avg=2323.03, 90=3221, 99=4651, 99.9=7931, 99.99=21519] 
2023-05-04 21:42:55:198 1370 sec: 106373096 operations; 75817.7 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=379628, Max=26031, Min=513, Avg=4279.45, 90=6239, 99=8959, 99.9=12175, 99.99=16655] [UPDATE: Count=378481, Max=19711, Min=480, Avg=2309.21, 90=3219, 99=4515, 99.9=7579, 99.99=13847] 
2023-05-04 21:43:05:198 1380 sec: 107137057 operations; 76396.1 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=381795, Max=43519, Min=538, Avg=4244.53, 90=6151, 99=8975, 99.9=16271, 99.99=31727] [UPDATE: Count=382196, Max=30015, Min=452, Avg=2297.79, 90=3205, 99=4523, 99.9=7879, 99.99=22495] 
2023-05-04 21:43:15:198 1390 sec: 107901795 operations; 76473.8 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=382117, Max=58815, Min=529, Avg=4237.98, 90=6087, 99=8519, 99.9=25791, 99.99=38143] [UPDATE: Count=382622, Max=48351, Min=483, Avg=2297.72, 90=3189, 99=4383, 99.9=7999, 99.99=29119] 
2023-05-04 21:43:25:198 1400 sec: 108671060 operations; 76926.5 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384812, Max=18847, Min=514, Avg=4211, 90=6079, 99=8343, 99.9=10911, 99.99=13943] [UPDATE: Count=384393, Max=16655, Min=476, Avg=2284.71, 90=3191, 99=4279, 99.9=7395, 99.99=9919] 
2023-05-04 21:43:35:198 1410 sec: 109440242 operations; 76918.2 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=383982, Max=51839, Min=521, Avg=4213.18, 90=6071, 99=8391, 99.9=15279, 99.99=32319] [UPDATE: Count=385193, Max=30063, Min=454, Avg=2286.87, 90=3191, 99=4371, 99.9=7667, 99.99=22111] 
2023-05-04 21:43:45:198 1420 sec: 110207611 operations; 76736.9 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=383858, Max=46015, Min=536, Avg=4223.59, 90=6079, 99=8487, 99.9=15575, 99.99=34207] [UPDATE: Count=383612, Max=31727, Min=461, Avg=2288.93, 90=3193, 99=4395, 99.9=7535, 99.99=22495] 
2023-05-04 21:43:55:198 1430 sec: 110978152 operations; 77054.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=384868, Max=18207, Min=563, Avg=4195.81, 90=6067, 99=8247, 99.9=10799, 99.99=13551] [UPDATE: Count=385774, Max=9679, Min=463, Avg=2291.91, 90=3207, 99=4307, 99.9=7191, 99.99=8535] 
2023-05-04 21:44:05:198 1440 sec: 111737862 operations; 75971 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=380466, Max=50239, Min=549, Avg=4251.17, 90=6091, 99=8447, 99.9=15271, 99.99=35583] [UPDATE: Count=379347, Max=44287, Min=461, Avg=2323.51, 90=3241, 99=4379, 99.9=7771, 99.99=18591] 
2023-05-04 21:44:15:198 1450 sec: 112489008 operations; 75114.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=375264, Max=47071, Min=566, Avg=4301.39, 90=6107, 99=8175, 99.9=11655, 99.99=31007] [UPDATE: Count=375835, Max=27119, Min=481, Avg=2353.41, 90=3257, 99=4315, 99.9=7563, 99.99=22879] 
2023-05-04 21:44:25:198 1460 sec: 113230685 operations; 74167.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=370589, Max=18943, Min=534, Avg=4370.94, 90=6195, 99=8199, 99.9=10391, 99.99=13471] [UPDATE: Count=370765, Max=15863, Min=466, Avg=2369.15, 90=3269, 99=4263, 99.9=7167, 99.99=8863] 
2023-05-04 21:44:35:198 1470 sec: 113956378 operations; 72569.3 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=363188, Max=56159, Min=567, Avg=4493.6, 90=6355, 99=8567, 99.9=14687, 99.99=36895] [UPDATE: Count=362735, Max=29855, Min=453, Avg=2391.32, 90=3273, 99=4327, 99.9=7515, 99.99=23055] 
2023-05-04 21:44:45:198 1480 sec: 114680463 operations; 72408.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=361184, Max=54655, Min=557, Avg=4497.61, 90=6351, 99=8879, 99.9=14839, 99.99=35519] [UPDATE: Count=362901, Max=50335, Min=482, Avg=2409.55, 90=3291, 99=4651, 99.9=7311, 99.99=21663] 
2023-05-04 21:44:55:198 1490 sec: 115398855 operations; 71839.2 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=358706, Max=21983, Min=561, Avg=4545.66, 90=6531, 99=9559, 99.9=12951, 99.99=17471] [UPDATE: Count=359620, Max=9911, Min=464, Avg=2414.19, 90=3323, 99=4787, 99.9=7251, 99.99=8575] 
2023-05-04 21:45:05:198 1500 sec: 116117596 operations; 71874.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=359364, Max=50367, Min=559, Avg=4527.81, 90=6403, 99=9311, 99.9=15551, 99.99=33215] [UPDATE: Count=359325, Max=41663, Min=464, Avg=2425.71, 90=3291, 99=4759, 99.9=7711, 99.99=22751] 
2023-05-04 21:45:15:198 1510 sec: 116829136 operations; 71154 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=356316, Max=48383, Min=532, Avg=4558.87, 90=6359, 99=8903, 99.9=15247, 99.99=31215] [UPDATE: Count=355320, Max=42367, Min=458, Avg=2462.2, 90=3335, 99=4683, 99.9=7563, 99.99=17663] 
2023-05-04 21:45:25:198 1520 sec: 117528953 operations; 69981.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=350331, Max=21599, Min=642, Avg=4634.32, 90=6395, 99=9007, 99.9=11895, 99.99=15455] [UPDATE: Count=349464, Max=15103, Min=458, Avg=2504.62, 90=3367, 99=4519, 99.9=7379, 99.99=9111] 
2023-05-04 21:45:35:198 1530 sec: 118232082 operations; 70312.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=351103, Max=50335, Min=549, Avg=4604.02, 90=6283, 99=8423, 99.9=12087, 99.99=33823] [UPDATE: Count=352052, Max=41407, Min=461, Avg=2506.62, 90=3339, 99=4487, 99.9=7691, 99.99=22607] 
2023-05-04 21:45:45:198 1540 sec: 118930758 operations; 69867.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=349560, Max=51871, Min=558, Avg=4633.33, 90=6323, 99=8727, 99.9=12967, 99.99=33151] [UPDATE: Count=349093, Max=28735, Min=485, Avg=2518.34, 90=3347, 99=4567, 99.9=7987, 99.99=21567] 
2023-05-04 21:45:55:198 1550 sec: 119629784 operations; 69902.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=349164, Max=16119, Min=644, Avg=4643.76, 90=6371, 99=8447, 99.9=10775, 99.99=12679] [UPDATE: Count=349545, Max=10895, Min=482, Avg=2508.07, 90=3329, 99=4495, 99.9=7175, 99.99=8559] 
2023-05-04 21:46:05:198 1560 sec: 120320182 operations; 69039.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=345650, Max=52223, Min=838, Avg=4701.39, 90=6451, 99=8623, 99.9=12807, 99.99=31071] [UPDATE: Count=344982, Max=33247, Min=577, Avg=2534.93, 90=3365, 99=4475, 99.9=7695, 99.99=20239] 
2023-05-04 21:46:15:198 1570 sec: 120988819 operations; 66863.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=334374, Max=46975, Min=564, Avg=4808.72, 90=6363, 99=8279, 99.9=11343, 99.99=32335] [UPDATE: Count=334047, Max=30735, Min=482, Avg=2665.76, 90=3455, 99=4451, 99.9=7859, 99.99=21071] 
2023-05-04 21:46:25:198 1580 sec: 121648331 operations; 65951.2 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330271, Max=20223, Min=566, Avg=4875.63, 90=6435, 99=8143, 99.9=10343, 99.99=12783] [UPDATE: Count=329269, Max=15951, Min=469, Avg=2699.15, 90=3493, 99=4459, 99.9=7475, 99.99=9687] 
2023-05-04 21:46:35:198 1590 sec: 122311185 operations; 66285.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330928, Max=51327, Min=538, Avg=4858.66, 90=6475, 99=8607, 99.9=14439, 99.99=35263] [UPDATE: Count=332189, Max=44575, Min=467, Avg=2684.48, 90=3533, 99=4675, 99.9=7723, 99.99=23839] 
2023-05-04 21:46:45:198 1600 sec: 123008776 operations; 69759.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=348468, Max=55007, Min=538, Avg=4604.67, 90=6351, 99=8831, 99.9=17583, 99.99=36639] [UPDATE: Count=349140, Max=35359, Min=460, Avg=2560.97, 90=3447, 99=4795, 99.9=8583, 99.99=25727] 
2023-05-04 21:46:55:198 1610 sec: 123714944 operations; 70616.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=353154, Max=27583, Min=545, Avg=4545.59, 90=6295, 99=8407, 99.9=11223, 99.99=21439] [UPDATE: Count=352989, Max=27775, Min=456, Avg=2530.94, 90=3413, 99=4627, 99.9=7887, 99.99=19087] 
2023-05-04 21:47:05:198 1620 sec: 124436124 operations; 72118 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=360641, Max=50879, Min=492, Avg=4463.89, 90=6219, 99=8271, 99.9=12127, 99.99=36575] [UPDATE: Count=360587, Max=29695, Min=469, Avg=2465.65, 90=3339, 99=4351, 99.9=7735, 99.99=18783] 
2023-05-04 21:47:15:198 1630 sec: 125160369 operations; 72424.5 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=362035, Max=45983, Min=524, Avg=4446.06, 90=6211, 99=8271, 99.9=13815, 99.99=32863] [UPDATE: Count=362243, Max=28447, Min=455, Avg=2454.89, 90=3329, 99=4483, 99.9=7535, 99.99=20975] 
2023-05-04 21:47:25:198 1640 sec: 125892324 operations; 73195.5 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=365885, Max=21647, Min=550, Avg=4398.42, 90=6187, 99=8231, 99.9=10567, 99.99=14031] [UPDATE: Count=365822, Max=16831, Min=465, Avg=2430.13, 90=3309, 99=4371, 99.9=7291, 99.99=9335] 
2023-05-04 21:47:35:198 1650 sec: 126620465 operations; 72814.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=364703, Max=209023, Min=519, Avg=4409.89, 90=6179, 99=8359, 99.9=14991, 99.99=113279] [UPDATE: Count=363346, Max=207103, Min=471, Avg=2451.47, 90=3303, 99=4463, 99.9=8107, 99.99=139391] 
2023-05-04 21:47:45:198 1660 sec: 127357105 operations; 73664 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=368034, Max=53375, Min=533, Avg=4377.28, 90=6195, 99=8367, 99.9=12319, 99.99=34303] [UPDATE: Count=368790, Max=28815, Min=475, Avg=2407.23, 90=3287, 99=4427, 99.9=7775, 99.99=23279] 
2023-05-04 21:47:55:198 1670 sec: 128097337 operations; 74023.2 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=370134, Max=15687, Min=519, Avg=4358.86, 90=6227, 99=8391, 99.9=10663, 99.99=12447] [UPDATE: Count=370183, Max=10335, Min=471, Avg=2392.9, 90=3289, 99=4399, 99.9=7275, 99.99=8663] 
2023-05-04 21:48:05:198 1680 sec: 128840020 operations; 74268.3 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=371493, Max=55743, Min=526, Avg=4343.53, 90=6199, 99=8535, 99.9=14495, 99.99=36511] [UPDATE: Count=370877, Max=29695, Min=473, Avg=2386.91, 90=3277, 99=4547, 99.9=8023, 99.99=23071] 
2023-05-04 21:48:15:198 1690 sec: 129581564 operations; 74154.4 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=370400, Max=58239, Min=569, Avg=4355.72, 90=6187, 99=8543, 99.9=19583, 99.99=35999] [UPDATE: Count=371706, Max=29855, Min=471, Avg=2383.25, 90=3277, 99=4499, 99.9=7843, 99.99=23663] 
2023-05-04 21:48:25:198 1700 sec: 130324171 operations; 74260.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=370885, Max=19679, Min=505, Avg=4353.81, 90=6223, 99=8607, 99.9=11671, 99.99=15879] [UPDATE: Count=371599, Max=17983, Min=468, Avg=2378.37, 90=3279, 99=4443, 99.9=7371, 99.99=9463] 
2023-05-04 21:48:35:198 1710 sec: 131074245 operations; 75007.4 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=374746, Max=59903, Min=558, Avg=4308.54, 90=6167, 99=8751, 99.9=20127, 99.99=35391] [UPDATE: Count=374536, Max=28943, Min=465, Avg=2360.02, 90=3271, 99=4691, 99.9=8639, 99.99=24255] 
2023-05-04 21:48:45:198 1720 sec: 131822055 operations; 74781 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=374359, Max=59391, Min=543, Avg=4320.54, 90=6183, 99=8839, 99.9=18127, 99.99=35647] [UPDATE: Count=374379, Max=42239, Min=476, Avg=2355.42, 90=3273, 99=4599, 99.9=7791, 99.99=24911] 
2023-05-04 21:48:55:198 1730 sec: 132580523 operations; 75846.8 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=380176, Max=17455, Min=562, Avg=4250.97, 90=6103, 99=8263, 99.9=10599, 99.99=13327] [UPDATE: Count=377491, Max=22559, Min=477, Avg=2336.49, 90=3251, 99=4411, 99.9=7339, 99.99=14839] 
2023-05-04 21:49:05:198 1740 sec: 133339085 operations; 75856.2 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379636, Max=54719, Min=546, Avg=4264.83, 90=6131, 99=8727, 99.9=19983, 99.99=36479] [UPDATE: Count=379726, Max=29695, Min=463, Avg=2318.37, 90=3225, 99=4395, 99.9=8027, 99.99=20463] 
2023-05-04 21:49:15:198 1750 sec: 134100032 operations; 76094.7 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=381284, Max=59423, Min=530, Avg=4253.3, 90=6111, 99=8711, 99.9=22783, 99.99=38335] [UPDATE: Count=378886, Max=27935, Min=464, Avg=2313.76, 90=3215, 99=4479, 99.9=8115, 99.99=22527] 
2023-05-04 21:49:25:198 1760 sec: 134862001 operations; 76196.9 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=380906, Max=30975, Min=550, Avg=4249.22, 90=6127, 99=8639, 99.9=12887, 99.99=21135] [UPDATE: Count=381513, Max=27535, Min=472, Avg=2305.85, 90=3207, 99=4367, 99.9=7715, 99.99=13575] 
2023-05-04 21:49:35:198 1770 sec: 135628697 operations; 76669.6 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=383162, Max=62751, Min=573, Avg=4221.88, 90=6095, 99=8671, 99.9=21647, 99.99=37759] [UPDATE: Count=383628, Max=47263, Min=463, Avg=2297.51, 90=3217, 99=4471, 99.9=7831, 99.99=21855] 
2023-05-04 21:49:45:198 1780 sec: 136387911 operations; 75921.4 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=379420, Max=53855, Min=543, Avg=4265.36, 90=6179, 99=8791, 99.9=15143, 99.99=40543] [UPDATE: Count=379741, Max=33695, Min=474, Avg=2318.44, 90=3251, 99=4491, 99.9=7571, 99.99=23247] 
2023-05-04 21:49:55:198 1790 sec: 137142794 operations; 75488.3 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=377105, Max=18623, Min=534, Avg=4288.01, 90=6211, 99=8511, 99.9=11015, 99.99=14023] [UPDATE: Count=377737, Max=12191, Min=470, Avg=2334.92, 90=3279, 99=4391, 99.9=7327, 99.99=8927] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 21:50:05:198 1800 sec: 137901573 operations; 75877.9 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=379701, Max=54367, Min=493, Avg=4274.54, 90=6207, 99=8679, 99.9=17087, 99.99=36223] [UPDATE: Count=378973, Max=42463, Min=444, Avg=2308.48, 90=3271, 99=4459, 99.9=7823, 99.99=23535] 
Still waiting for thread Thread-75 to complete. Workload status: true
2023-05-04 21:50:07:450 1802 sec: 137903762 operations; 971.59 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=1128, Max=7231, Min=545, Avg=3519.28, 90=5399, 99=6663, 99.9=7063, 99.99=7231] [CLEANUP: Count=250, Max=2224127, Min=0, Avg=8893.81, 90=2, 99=25, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802251
[OVERALL], Throughput(ops/sec), 76517.5117117427
[TOTAL_GCS_PS_Scavenge], Count, 5178
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18026
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0001936467229038
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 75
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.00416146252658481
[TOTAL_GCs], Count, 5180
[TOTAL_GC_TIME], Time(ms), 18101
[TOTAL_GC_TIME_%], Time(%), 1.0043551092494887
[READ], Operations, 68947060
[READ], AverageLatency(us), 4038.9339160799605
[READ], MinLatency(us), 488
[READ], MaxLatency(us), 209023
[READ], 95thPercentileLatency(us), 6539
[READ], 99thPercentileLatency(us), 8135
[READ], Return=OK, 68947060
[CLEANUP], Operations, 250
[CLEANUP], AverageLatency(us), 8893.808
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 25
[UPDATE], Operations, 68956702
[UPDATE], AverageLatency(us), 2234.8458093747
[UPDATE], MinLatency(us), 438
[UPDATE], MaxLatency(us), 207103
[UPDATE], 95thPercentileLatency(us), 3457
[UPDATE], 99thPercentileLatency(us), 4247
[UPDATE], Return=OK, 68956702
