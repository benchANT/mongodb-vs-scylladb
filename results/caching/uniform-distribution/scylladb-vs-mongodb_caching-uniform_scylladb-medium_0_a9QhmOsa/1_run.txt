bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 21:20:04:611 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-04 21:20:14:594 10 sec: 745468 operations; 74546.8 current ops/sec; est completion in 3 hours 43 minutes [READ: Count=373125, Max=116351, Min=592, Avg=3256.87, 90=4571, 99=11447, 99.9=60255, 99.99=102079] [UPDATE: Count=374898, Max=114815, Min=497, Avg=2058.01, 90=2687, 99=8919, 99.9=39199, 99.99=100799] 
2023-05-04 21:20:24:594 20 sec: 1545494 operations; 80002.6 current ops/sec; est completion in 3 hours 35 minutes [READ: Count=400070, Max=22079, Min=562, Avg=2755.41, 90=3981, 99=5399, 99.9=6819, 99.99=10863] [UPDATE: Count=398963, Max=17647, Min=493, Avg=1678.52, 90=2365, 99=3115, 99.9=4299, 99.99=7811] 
2023-05-04 21:20:34:594 30 sec: 2345489 operations; 79999.5 current ops/sec; est completion in 3 hours 32 minutes [READ: Count=400191, Max=53887, Min=543, Avg=2787.3, 90=4017, 99=5527, 99.9=9767, 99.99=34271] [UPDATE: Count=399941, Max=27295, Min=485, Avg=1692.25, 90=2381, 99=3159, 99.9=5747, 99.99=20127] 
2023-05-04 21:20:44:594 40 sec: 3145489 operations; 80000 current ops/sec; est completion in 3 hours 31 minutes [READ: Count=399674, Max=49247, Min=566, Avg=2804.47, 90=4049, 99=5571, 99.9=9135, 99.99=30895] [UPDATE: Count=400163, Max=38239, Min=473, Avg=1699.26, 90=2391, 99=3159, 99.9=6079, 99.99=20527] 
2023-05-04 21:20:54:594 50 sec: 3945484 operations; 79999.5 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=400153, Max=11943, Min=575, Avg=2785.27, 90=4027, 99=5503, 99.9=7339, 99.99=9551] [UPDATE: Count=399717, Max=9071, Min=483, Avg=1691.26, 90=2381, 99=3137, 99.9=5187, 99.99=8059] 
2023-05-04 21:21:04:594 60 sec: 4745488 operations; 80000.4 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=400672, Max=54239, Min=546, Avg=2822.77, 90=4071, 99=5695, 99.9=11047, 99.99=30591] [UPDATE: Count=399116, Max=27135, Min=488, Avg=1711.18, 90=2399, 99=3211, 99.9=7203, 99.99=20399] 
2023-05-04 21:21:14:594 70 sec: 5545450 operations; 79996.2 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=400290, Max=85375, Min=552, Avg=2838.19, 90=4095, 99=5691, 99.9=13703, 99.99=37695] [UPDATE: Count=399829, Max=47167, Min=477, Avg=1710.23, 90=2413, 99=3203, 99.9=6263, 99.99=22511] 
2023-05-04 21:21:24:594 80 sec: 6345506 operations; 80005.6 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399854, Max=12023, Min=528, Avg=2779.7, 90=4021, 99=5439, 99.9=6807, 99.99=8695] [UPDATE: Count=400194, Max=10431, Min=484, Avg=1686.78, 90=2379, 99=3125, 99.9=4159, 99.99=7155] 
2023-05-04 21:21:34:594 90 sec: 7145480 operations; 79997.4 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=400827, Max=57567, Min=558, Avg=2844.16, 90=4107, 99=5647, 99.9=11423, 99.99=34463] [UPDATE: Count=399365, Max=28143, Min=483, Avg=1714.31, 90=2417, 99=3195, 99.9=5335, 99.99=19375] 
2023-05-04 21:21:44:594 100 sec: 7945482 operations; 80000.2 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399475, Max=52575, Min=565, Avg=2799.88, 90=4029, 99=5503, 99.9=8831, 99.99=34463] [UPDATE: Count=400278, Max=28623, Min=493, Avg=1693.93, 90=2385, 99=3143, 99.9=5363, 99.99=21135] 
2023-05-04 21:21:54:594 110 sec: 8745487 operations; 80000.5 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400209, Max=12255, Min=562, Avg=2798.31, 90=4049, 99=5459, 99.9=6811, 99.99=8767] [UPDATE: Count=399799, Max=9919, Min=493, Avg=1696.44, 90=2393, 99=3149, 99.9=4091, 99.99=7427] 
2023-05-04 21:22:04:594 120 sec: 9545488 operations; 80000.1 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400372, Max=54495, Min=570, Avg=2843.93, 90=4107, 99=5699, 99.9=12391, 99.99=33023] [UPDATE: Count=399781, Max=44479, Min=481, Avg=1713.78, 90=2413, 99=3201, 99.9=6227, 99.99=19087] 
2023-05-04 21:22:14:594 130 sec: 10345507 operations; 80001.9 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399897, Max=60159, Min=532, Avg=2816.88, 90=4053, 99=5627, 99.9=10719, 99.99=38207] [UPDATE: Count=400146, Max=33503, Min=489, Avg=1704.49, 90=2401, 99=3197, 99.9=6223, 99.99=21055] 
2023-05-04 21:22:24:594 140 sec: 11145460 operations; 79995.3 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400578, Max=12703, Min=517, Avg=2839.36, 90=4123, 99=5655, 99.9=7623, 99.99=9367] [UPDATE: Count=399066, Max=12983, Min=482, Avg=1715.13, 90=2421, 99=3207, 99.9=5995, 99.99=8063] 
2023-05-04 21:22:34:598 150 sec: 11945411 operations; 79955.12 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400060, Max=51007, Min=548, Avg=2846.87, 90=4123, 99=5891, 99.9=11943, 99.99=33183] [UPDATE: Count=400512, Max=47487, Min=481, Avg=1719.91, 90=2421, 99=3291, 99.9=7091, 99.99=21791] 
2023-05-04 21:22:44:594 160 sec: 12745452 operations; 80044.12 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400132, Max=53311, Min=535, Avg=2862.25, 90=4159, 99=6087, 99.9=10423, 99.99=31775] [UPDATE: Count=399674, Max=28591, Min=491, Avg=1731.5, 90=2437, 99=3393, 99.9=7027, 99.99=18255] 
2023-05-04 21:22:54:594 170 sec: 13545471 operations; 80001.9 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399893, Max=11999, Min=525, Avg=2931.73, 90=4327, 99=6071, 99.9=8399, 99.99=10303] [UPDATE: Count=399478, Max=15511, Min=464, Avg=1757.84, 90=2485, 99=3345, 99.9=6827, 99.99=8951] 
2023-05-04 21:23:04:594 180 sec: 14345190 operations; 79971.9 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399895, Max=63551, Min=545, Avg=3390.6, 90=5067, 99=6911, 99.9=12775, 99.99=35871] [UPDATE: Count=400181, Max=43039, Min=473, Avg=1949.4, 90=2811, 99=3795, 99.9=7807, 99.99=22799] 
2023-05-04 21:23:14:594 190 sec: 15142230 operations; 79704 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=398278, Max=50463, Min=580, Avg=3840.61, 90=5699, 99=7359, 99.9=11831, 99.99=31215] [UPDATE: Count=398770, Max=30111, Min=468, Avg=2102.92, 90=2955, 99=3845, 99.9=7695, 99.99=22911] 
2023-05-04 21:23:24:594 200 sec: 15869804 operations; 72757.4 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=363969, Max=14159, Min=529, Avg=4439.07, 90=6159, 99=7655, 99.9=9919, 99.99=11623] [UPDATE: Count=363286, Max=9679, Min=515, Avg=2428.23, 90=3261, 99=4231, 99.9=7251, 99.99=8343] 
2023-05-04 21:23:34:594 210 sec: 16493606 operations; 62380.2 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=312046, Max=46975, Min=924, Avg=5110.31, 90=6387, 99=7875, 99.9=10927, 99.99=30543] [UPDATE: Count=311633, Max=31663, Min=550, Avg=2902.02, 90=3595, 99=4591, 99.9=7795, 99.99=21551] 
2023-05-04 21:23:44:594 220 sec: 17146633 operations; 65302.7 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=326539, Max=55615, Min=559, Avg=4861.14, 90=6247, 99=7659, 99.9=10663, 99.99=33279] [UPDATE: Count=326705, Max=35775, Min=470, Avg=2791.62, 90=3561, 99=4411, 99.9=7639, 99.99=20015] 
2023-05-04 21:23:54:594 230 sec: 17900583 operations; 75395 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=377156, Max=14807, Min=540, Avg=4217.82, 90=5931, 99=7567, 99.9=9967, 99.99=11775] [UPDATE: Count=376851, Max=10063, Min=490, Avg=2409.39, 90=3335, 99=4239, 99.9=7459, 99.99=8799] 
2023-05-04 21:24:04:594 240 sec: 18706154 operations; 80557.1 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=402490, Max=58399, Min=566, Avg=3966.24, 90=5711, 99=7631, 99.9=11647, 99.99=35519] [UPDATE: Count=403306, Max=32959, Min=488, Avg=2238.06, 90=3165, 99=4267, 99.9=7743, 99.99=23103] 
2023-05-04 21:24:14:594 250 sec: 19529512 operations; 82335.8 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=410975, Max=49663, Min=591, Avg=3887.75, 90=5539, 99=7383, 99.9=10535, 99.99=32831] [UPDATE: Count=412282, Max=28095, Min=493, Avg=2184.7, 90=3065, 99=4041, 99.9=7371, 99.99=20159] 
2023-05-04 21:24:24:594 260 sec: 20360560 operations; 83104.8 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=415232, Max=14695, Min=586, Avg=3849.83, 90=5515, 99=7283, 99.9=9591, 99.99=11311] [UPDATE: Count=415841, Max=10375, Min=488, Avg=2164.73, 90=3033, 99=3925, 99.9=7323, 99.99=8783] 
2023-05-04 21:24:34:594 270 sec: 21191656 operations; 83109.6 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=415129, Max=60543, Min=581, Avg=3852.13, 90=5539, 99=7439, 99.9=11503, 99.99=32191] [UPDATE: Count=416004, Max=29583, Min=499, Avg=2162.6, 90=3037, 99=3931, 99.9=7787, 99.99=19103] 
2023-05-04 21:24:44:594 280 sec: 22023824 operations; 83216.8 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=416594, Max=55487, Min=537, Avg=3842.92, 90=5531, 99=7375, 99.9=12359, 99.99=35135] [UPDATE: Count=415714, Max=28671, Min=492, Avg=2161.57, 90=3041, 99=4069, 99.9=7339, 99.99=23007] 
2023-05-04 21:24:54:594 290 sec: 22850427 operations; 82660.3 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=412986, Max=16095, Min=547, Avg=3875.21, 90=5627, 99=7695, 99.9=10191, 99.99=12879] [UPDATE: Count=413397, Max=15255, Min=501, Avg=2170.95, 90=3061, 99=4025, 99.9=7291, 99.99=9319] 
2023-05-04 21:25:04:594 300 sec: 23677438 operations; 82701.1 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=413608, Max=54847, Min=531, Avg=3873.02, 90=5627, 99=7919, 99.9=14751, 99.99=35359] [UPDATE: Count=413560, Max=29727, Min=498, Avg=2168.83, 90=3069, 99=4159, 99.9=7959, 99.99=20559] 
2023-05-04 21:25:14:594 310 sec: 24511762 operations; 83432.4 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=417237, Max=54399, Min=571, Avg=3841.87, 90=5599, 99=7643, 99.9=11783, 99.99=35871] [UPDATE: Count=416534, Max=28959, Min=485, Avg=2150.22, 90=3045, 99=4089, 99.9=7715, 99.99=22655] 
2023-05-04 21:25:24:594 320 sec: 25361625 operations; 84986.3 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=424952, Max=23263, Min=577, Avg=3767.34, 90=5515, 99=7515, 99.9=9991, 99.99=17599] [UPDATE: Count=424602, Max=26671, Min=487, Avg=2113.05, 90=2969, 99=3975, 99.9=7379, 99.99=15543] 
2023-05-04 21:25:34:594 330 sec: 26204196 operations; 84257.1 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=421000, Max=48543, Min=556, Avg=3808.31, 90=5587, 99=7891, 99.9=14175, 99.99=31615] [UPDATE: Count=422474, Max=29855, Min=473, Avg=2120.52, 90=2983, 99=4075, 99.9=7719, 99.99=22111] 
2023-05-04 21:25:44:594 340 sec: 27051975 operations; 84777.9 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=423784, Max=79679, Min=566, Avg=3778.09, 90=5523, 99=7627, 99.9=14807, 99.99=33439] [UPDATE: Count=424261, Max=45951, Min=512, Avg=2116.81, 90=2989, 99=4005, 99.9=7659, 99.99=23087] 
2023-05-04 21:25:54:595 350 sec: 27909879 operations; 85773.25 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=429165, Max=14031, Min=545, Avg=3726, 90=5471, 99=7455, 99.9=9743, 99.99=11767] [UPDATE: Count=428418, Max=10279, Min=510, Avg=2090.75, 90=2961, 99=3881, 99.9=7427, 99.99=8943] 
2023-05-04 21:26:04:594 360 sec: 28745325 operations; 83561.31 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=417151, Max=46271, Min=546, Avg=3531.29, 90=5203, 99=7211, 99.9=11527, 99.99=29743] [UPDATE: Count=418311, Max=27759, Min=479, Avg=2012.85, 90=2881, 99=3905, 99.9=7515, 99.99=20815] 
2023-05-04 21:26:14:594 370 sec: 29544963 operations; 79963.8 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400211, Max=51231, Min=530, Avg=3435.45, 90=5083, 99=7007, 99.9=11415, 99.99=35103] [UPDATE: Count=399538, Max=49311, Min=487, Avg=1967.97, 90=2841, 99=3831, 99.9=7303, 99.99=21087] 
2023-05-04 21:26:24:594 380 sec: 30345355 operations; 80039.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400251, Max=16591, Min=544, Avg=3400.94, 90=5051, 99=6867, 99.9=9183, 99.99=12271] [UPDATE: Count=399843, Max=14671, Min=495, Avg=1956.93, 90=2835, 99=3797, 99.9=7191, 99.99=11151] 
2023-05-04 21:26:34:594 390 sec: 31145294 operations; 79993.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399741, Max=48415, Min=534, Avg=3454.17, 90=5123, 99=7135, 99.9=13591, 99.99=30319] [UPDATE: Count=400282, Max=27407, Min=502, Avg=1976.95, 90=2845, 99=3905, 99.9=7787, 99.99=20463] 
2023-05-04 21:26:44:594 400 sec: 31945073 operations; 79977.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399911, Max=49951, Min=557, Avg=3416.78, 90=5067, 99=6967, 99.9=10399, 99.99=35327] [UPDATE: Count=399893, Max=28591, Min=488, Avg=1959.34, 90=2833, 99=3765, 99.9=7503, 99.99=21199] 
2023-05-04 21:26:54:594 410 sec: 32745341 operations; 80026.8 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400124, Max=13863, Min=552, Avg=3428.89, 90=5091, 99=6963, 99.9=9279, 99.99=11247] [UPDATE: Count=400064, Max=10271, Min=491, Avg=1965.68, 90=2839, 99=3773, 99.9=7235, 99.99=8791] 
2023-05-04 21:27:04:594 420 sec: 33545372 operations; 80003.1 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400539, Max=52799, Min=543, Avg=3454.76, 90=5131, 99=7175, 99.9=12791, 99.99=34239] [UPDATE: Count=399574, Max=27743, Min=484, Avg=1971.03, 90=2857, 99=3865, 99.9=7363, 99.99=19055] 
2023-05-04 21:27:14:594 430 sec: 34345150 operations; 79977.8 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399794, Max=51359, Min=562, Avg=3405.53, 90=5059, 99=6987, 99.9=9871, 99.99=33599] [UPDATE: Count=399916, Max=28991, Min=475, Avg=1955.87, 90=2837, 99=3813, 99.9=7387, 99.99=20463] 
2023-05-04 21:27:24:594 440 sec: 35145394 operations; 80024.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400041, Max=13535, Min=547, Avg=3392.46, 90=5027, 99=6923, 99.9=9303, 99.99=11175] [UPDATE: Count=400142, Max=9639, Min=475, Avg=1947.8, 90=2827, 99=3729, 99.9=7123, 99.99=8687] 
2023-05-04 21:27:34:594 450 sec: 35945360 operations; 79996.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400069, Max=48159, Min=558, Avg=3373.65, 90=4987, 99=6979, 99.9=10975, 99.99=30783] [UPDATE: Count=399998, Max=28415, Min=490, Avg=1943.4, 90=2819, 99=3805, 99.9=7447, 99.99=17423] 
2023-05-04 21:27:44:594 460 sec: 36745028 operations; 79966.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400217, Max=48543, Min=551, Avg=3393.39, 90=5019, 99=7079, 99.9=11895, 99.99=32927] [UPDATE: Count=399558, Max=27183, Min=483, Avg=1947.29, 90=2815, 99=3759, 99.9=7207, 99.99=18767] 
2023-05-04 21:27:54:594 470 sec: 37545409 operations; 80038.1 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399671, Max=22079, Min=537, Avg=3321.04, 90=4915, 99=6771, 99.9=9439, 99.99=15927] [UPDATE: Count=400556, Max=19759, Min=484, Avg=1925.41, 90=2795, 99=3761, 99.9=7495, 99.99=15447] 
2023-05-04 21:28:04:594 480 sec: 38345338 operations; 79992.9 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399429, Max=51487, Min=559, Avg=3474.31, 90=5155, 99=7251, 99.9=12487, 99.99=29983] [UPDATE: Count=400575, Max=29023, Min=486, Avg=1982.55, 90=2877, 99=3827, 99.9=7591, 99.99=21551] 
2023-05-04 21:28:14:594 490 sec: 39144204 operations; 79886.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400049, Max=53791, Min=581, Avg=3620.72, 90=5347, 99=7231, 99.9=10831, 99.99=33471] [UPDATE: Count=398795, Max=33823, Min=480, Avg=2037.07, 90=2929, 99=3859, 99.9=7439, 99.99=20879] 
2023-05-04 21:28:24:594 500 sec: 39944266 operations; 80006.2 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400178, Max=13255, Min=568, Avg=3882.64, 90=5751, 99=7495, 99.9=9463, 99.99=11231] [UPDATE: Count=399818, Max=9975, Min=497, Avg=2113.58, 90=2985, 99=3869, 99.9=6923, 99.99=8199] 
2023-05-04 21:28:34:594 510 sec: 40729416 operations; 78515 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=392171, Max=53471, Min=575, Avg=4130.75, 90=6011, 99=7987, 99.9=11375, 99.99=32159] [UPDATE: Count=392950, Max=28991, Min=494, Avg=2211.2, 90=3081, 99=4021, 99.9=7267, 99.99=21743] 
2023-05-04 21:28:44:594 520 sec: 41466574 operations; 73715.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=368627, Max=54015, Min=541, Avg=4414.39, 90=6211, 99=8279, 99.9=11895, 99.99=32527] [UPDATE: Count=368412, Max=29503, Min=505, Avg=2365.4, 90=3215, 99=4291, 99.9=7551, 99.99=20351] 
2023-05-04 21:28:54:594 530 sec: 42135054 operations; 66848 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=333697, Max=14455, Min=919, Avg=4855.31, 90=6435, 99=8155, 99.9=10503, 99.99=12239] [UPDATE: Count=334575, Max=12455, Min=571, Avg=2625.99, 90=3473, 99=4375, 99.9=7555, 99.99=8839] 
2023-05-04 21:29:04:594 540 sec: 42744539 operations; 60948.5 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=304369, Max=43679, Min=598, Avg=5236.83, 90=6507, 99=8043, 99.9=11231, 99.99=28607] [UPDATE: Count=305045, Max=29791, Min=457, Avg=2967.27, 90=3621, 99=4423, 99.9=7915, 99.99=20127] 
2023-05-04 21:29:14:594 550 sec: 43364579 operations; 62004 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=310257, Max=53503, Min=540, Avg=5125, 90=6399, 99=7871, 99.9=10807, 99.99=36767] [UPDATE: Count=309853, Max=39743, Min=478, Avg=2934.09, 90=3599, 99=4519, 99.9=7667, 99.99=24079] 
2023-05-04 21:29:24:594 560 sec: 44024811 operations; 66023.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=330597, Max=13799, Min=533, Avg=4807.49, 90=6231, 99=7679, 99.9=9999, 99.99=11559] [UPDATE: Count=329669, Max=9719, Min=470, Avg=2759.32, 90=3559, 99=4355, 99.9=7447, 99.99=8567] 
2023-05-04 21:29:34:594 570 sec: 44710510 operations; 68569.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=343148, Max=52159, Min=540, Avg=4639.57, 90=6135, 99=7599, 99.9=11007, 99.99=34527] [UPDATE: Count=342706, Max=32015, Min=470, Avg=2647.42, 90=3499, 99=4375, 99.9=8011, 99.99=20415] 
2023-05-04 21:29:44:594 580 sec: 45420130 operations; 70962 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=354499, Max=48383, Min=528, Avg=4495.05, 90=6091, 99=7755, 99.9=11159, 99.99=31167] [UPDATE: Count=355185, Max=28431, Min=474, Avg=2549.22, 90=3433, 99=4303, 99.9=7643, 99.99=21183] 
2023-05-04 21:29:54:594 590 sec: 46164271 operations; 74414.1 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=372276, Max=18639, Min=556, Avg=4292.65, 90=6003, 99=7627, 99.9=9807, 99.99=11711] [UPDATE: Count=371847, Max=15247, Min=480, Avg=2422.48, 90=3327, 99=4175, 99.9=7319, 99.99=9823] 
2023-05-04 21:30:04:598 600 sec: 46920031 operations; 75538.23 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=377692, Max=51967, Min=568, Avg=4234.65, 90=5979, 99=7795, 99.9=10903, 99.99=31567] [UPDATE: Count=378237, Max=34623, Min=481, Avg=2380.3, 90=3303, 99=4259, 99.9=7823, 99.99=20927] 
2023-05-04 21:30:14:594 610 sec: 47693630 operations; 77398.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=386741, Max=47679, Min=557, Avg=4147.81, 90=5923, 99=7979, 99.9=11823, 99.99=33055] [UPDATE: Count=386874, Max=37535, Min=488, Avg=2311.27, 90=3241, 99=4211, 99.9=7723, 99.99=21007] 
2023-05-04 21:30:24:594 620 sec: 48478866 operations; 78523.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=392572, Max=39839, Min=553, Avg=4093, 90=5903, 99=8111, 99.9=13503, 99.99=19231] [UPDATE: Count=392566, Max=10255, Min=491, Avg=2271.44, 90=3221, 99=4271, 99.9=7223, 99.99=8559] 
2023-05-04 21:30:34:594 630 sec: 49267838 operations; 78897.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=394354, Max=55167, Min=560, Avg=4062.18, 90=5851, 99=7847, 99.9=10983, 99.99=35583] [UPDATE: Count=394855, Max=27791, Min=475, Avg=2272.87, 90=3217, 99=4255, 99.9=7427, 99.99=20623] 
2023-05-04 21:30:44:594 640 sec: 50056776 operations; 78893.8 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=393974, Max=218495, Min=539, Avg=4058.55, 90=5883, 99=8043, 99.9=13343, 99.99=104383] [UPDATE: Count=394765, Max=210559, Min=489, Avg=2278.92, 90=3221, 99=4251, 99.9=8035, 99.99=119615] 
2023-05-04 21:30:54:594 650 sec: 50861752 operations; 80497.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=402776, Max=15263, Min=573, Avg=3984.51, 90=5887, 99=8019, 99.9=10247, 99.99=12423] [UPDATE: Count=402208, Max=12319, Min=495, Avg=2221.55, 90=3169, 99=4227, 99.9=7267, 99.99=9383] 
2023-05-04 21:31:04:594 660 sec: 51674881 operations; 81312.9 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=406385, Max=48319, Min=579, Avg=3958.22, 90=5823, 99=8127, 99.9=13295, 99.99=32623] [UPDATE: Count=406842, Max=33823, Min=498, Avg=2188.73, 90=3093, 99=4203, 99.9=7719, 99.99=19471] 
2023-05-04 21:31:14:594 670 sec: 52495007 operations; 82012.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=409410, Max=64127, Min=573, Avg=3937.21, 90=5823, 99=8239, 99.9=15727, 99.99=39679] [UPDATE: Count=411032, Max=43967, Min=504, Avg=2158.67, 90=3037, 99=4139, 99.9=7639, 99.99=22511] 
2023-05-04 21:31:24:594 680 sec: 53319275 operations; 82426.8 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=412765, Max=15879, Min=550, Avg=3907.38, 90=5795, 99=8103, 99.9=10463, 99.99=12655] [UPDATE: Count=411087, Max=9751, Min=483, Avg=2152.93, 90=3037, 99=4087, 99.9=7439, 99.99=8823] 
2023-05-04 21:31:34:594 690 sec: 54141931 operations; 82265.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=411668, Max=51999, Min=565, Avg=3917.49, 90=5815, 99=8199, 99.9=12335, 99.99=33535] [UPDATE: Count=411177, Max=29983, Min=477, Avg=2155.45, 90=3051, 99=4239, 99.9=7259, 99.99=17455] 
2023-05-04 21:31:44:594 700 sec: 54963748 operations; 82181.7 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=411283, Max=57407, Min=540, Avg=3925.81, 90=5851, 99=8463, 99.9=17087, 99.99=35135] [UPDATE: Count=410562, Max=28111, Min=470, Avg=2153.8, 90=3055, 99=4283, 99.9=7755, 99.99=21535] 
2023-05-04 21:31:54:594 710 sec: 55791934 operations; 82818.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=414842, Max=18111, Min=581, Avg=3885.73, 90=5779, 99=8103, 99.9=10487, 99.99=12519] [UPDATE: Count=413127, Max=10343, Min=496, Avg=2145.24, 90=3037, 99=4089, 99.9=7443, 99.99=8935] 
2023-05-04 21:32:04:594 720 sec: 56617726 operations; 82579.2 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=412658, Max=63711, Min=559, Avg=3906.21, 90=5799, 99=8415, 99.9=19519, 99.99=37119] [UPDATE: Count=413315, Max=29087, Min=493, Avg=2146.5, 90=3043, 99=4347, 99.9=7579, 99.99=17503] 
2023-05-04 21:32:14:594 730 sec: 57442027 operations; 82430.1 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=412428, Max=51423, Min=585, Avg=3912.53, 90=5851, 99=8399, 99.9=12223, 99.99=35679] [UPDATE: Count=411750, Max=28671, Min=479, Avg=2148.67, 90=3049, 99=4231, 99.9=7751, 99.99=20287] 
2023-05-04 21:32:24:594 740 sec: 58271486 operations; 82945.9 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=415269, Max=15399, Min=535, Avg=3879.01, 90=5791, 99=8047, 99.9=10247, 99.99=12223] [UPDATE: Count=414120, Max=11815, Min=489, Avg=2143.65, 90=3043, 99=4123, 99.9=7343, 99.99=8799] 
2023-05-04 21:32:34:594 750 sec: 59098947 operations; 82746.1 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413631, Max=65183, Min=553, Avg=3893.94, 90=5767, 99=8183, 99.9=15327, 99.99=39487] [UPDATE: Count=413950, Max=27503, Min=487, Avg=2146.18, 90=3039, 99=4123, 99.9=7851, 99.99=20127] 
2023-05-04 21:32:44:594 760 sec: 59925363 operations; 82641.6 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=413224, Max=52415, Min=592, Avg=3899.36, 90=5787, 99=8215, 99.9=12615, 99.99=32063] [UPDATE: Count=413220, Max=27727, Min=470, Avg=2147.62, 90=3039, 99=4215, 99.9=7535, 99.99=21711] 
2023-05-04 21:32:54:594 770 sec: 60754238 operations; 82887.5 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414575, Max=16767, Min=576, Avg=3889.16, 90=5795, 99=8071, 99.9=10527, 99.99=12647] [UPDATE: Count=414324, Max=10983, Min=485, Avg=2139.78, 90=3039, 99=4065, 99.9=7135, 99.99=8935] 
2023-05-04 21:33:04:594 780 sec: 61576899 operations; 82266.1 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=412295, Max=48159, Min=580, Avg=3914.89, 90=5827, 99=8399, 99.9=15279, 99.99=32831] [UPDATE: Count=410637, Max=31487, Min=473, Avg=2154.97, 90=3057, 99=4335, 99.9=7867, 99.99=20671] 
2023-05-04 21:33:14:594 790 sec: 62398386 operations; 82148.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=410475, Max=52671, Min=541, Avg=3928.38, 90=5827, 99=8263, 99.9=12031, 99.99=34335] [UPDATE: Count=410638, Max=27855, Min=470, Avg=2156.11, 90=3057, 99=4183, 99.9=7815, 99.99=19871] 
2023-05-04 21:33:24:594 800 sec: 63209659 operations; 81127.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=405927, Max=19279, Min=558, Avg=3980.51, 90=5867, 99=8027, 99.9=10383, 99.99=12463] [UPDATE: Count=405255, Max=9767, Min=484, Avg=2178.38, 90=3083, 99=4159, 99.9=7339, 99.99=8783] 
2023-05-04 21:33:34:594 810 sec: 64008027 operations; 79836.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=399904, Max=42815, Min=568, Avg=4065.1, 90=5991, 99=8287, 99.9=13311, 99.99=30159] [UPDATE: Count=398149, Max=26095, Min=483, Avg=2194.21, 90=3101, 99=4171, 99.9=8095, 99.99=20207] 
2023-05-04 21:33:44:594 820 sec: 64787689 operations; 77966.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=390262, Max=54911, Min=569, Avg=4188.46, 90=6163, 99=8463, 99.9=14527, 99.99=33247] [UPDATE: Count=389958, Max=28783, Min=492, Avg=2216.21, 90=3105, 99=4127, 99.9=7663, 99.99=21471] 
2023-05-04 21:33:54:594 830 sec: 65551025 operations; 76333.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=381340, Max=22895, Min=614, Avg=4292.13, 90=6275, 99=8527, 99.9=11727, 99.99=17391] [UPDATE: Count=381729, Max=10367, Min=497, Avg=2256.64, 90=3157, 99=4195, 99.9=7515, 99.99=9079] 
2023-05-04 21:34:04:594 840 sec: 66304181 operations; 75315.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=376795, Max=51583, Min=572, Avg=4333.33, 90=6275, 99=8719, 99.9=13855, 99.99=33119] [UPDATE: Count=376419, Max=32799, Min=499, Avg=2301.29, 90=3209, 99=4431, 99.9=7779, 99.99=19951] 
2023-05-04 21:34:14:594 850 sec: 67036746 operations; 73256.5 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=367061, Max=55167, Min=540, Avg=4432.71, 90=6239, 99=8471, 99.9=13127, 99.99=29375] [UPDATE: Count=365468, Max=29935, Min=495, Avg=2385.31, 90=3251, 99=4379, 99.9=8223, 99.99=24639] 
2023-05-04 21:34:24:594 860 sec: 67737439 operations; 70069.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=349776, Max=20367, Min=598, Avg=4648.52, 90=6311, 99=8247, 99.9=11287, 99.99=16767] [UPDATE: Count=350871, Max=17519, Min=513, Avg=2488.41, 90=3285, 99=4351, 99.9=7527, 99.99=10639] 
2023-05-04 21:34:34:594 870 sec: 68411871 operations; 67443.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=338066, Max=49791, Min=711, Avg=4762.55, 90=6339, 99=8215, 99.9=11295, 99.99=28863] [UPDATE: Count=336169, Max=27567, Min=582, Avg=2643.45, 90=3443, 99=4455, 99.9=7691, 99.99=17631] 
2023-05-04 21:34:44:594 880 sec: 69067223 operations; 65535.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=327725, Max=49695, Min=563, Avg=4875.53, 90=6299, 99=7947, 99.9=11487, 99.99=29119] [UPDATE: Count=327611, Max=34239, Min=482, Avg=2750.47, 90=3489, 99=4391, 99.9=7827, 99.99=20799] 
2023-05-04 21:34:54:594 890 sec: 69741599 operations; 67437.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=337174, Max=14215, Min=530, Avg=4741.94, 90=6283, 99=7875, 99.9=10135, 99.99=11991] [UPDATE: Count=337213, Max=10479, Min=474, Avg=2669.34, 90=3497, 99=4387, 99.9=7483, 99.99=8967] 
2023-05-04 21:35:04:594 900 sec: 70473121 operations; 73152.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=364468, Max=51839, Min=586, Avg=4388.92, 90=6095, 99=8047, 99.9=13359, 99.99=38015] [UPDATE: Count=367335, Max=31983, Min=492, Avg=2449.24, 90=3335, 99=4427, 99.9=8111, 99.99=21087] 
2023-05-04 21:35:14:594 910 sec: 71228260 operations; 75513.9 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=377981, Max=44575, Min=558, Avg=4263.34, 90=5987, 99=7911, 99.9=11727, 99.99=33439] [UPDATE: Count=377289, Max=32175, Min=492, Avg=2352.65, 90=3217, 99=4255, 99.9=7551, 99.99=21087] 
2023-05-04 21:35:24:594 920 sec: 71998522 operations; 77026.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=385442, Max=23119, Min=556, Avg=4189.68, 90=5943, 99=8059, 99.9=10847, 99.99=15799] [UPDATE: Count=384876, Max=11503, Min=496, Avg=2297.1, 90=3163, 99=4139, 99.9=7687, 99.99=9327] 
2023-05-04 21:35:34:594 930 sec: 72778372 operations; 77985 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=389961, Max=46143, Min=552, Avg=4150.23, 90=6003, 99=8607, 99.9=14847, 99.99=33343] [UPDATE: Count=389747, Max=29567, Min=486, Avg=2257.92, 90=3149, 99=4303, 99.9=7991, 99.99=21919] 
2023-05-04 21:35:44:594 940 sec: 73559152 operations; 78078 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=390783, Max=56159, Min=580, Avg=4157.26, 90=6003, 99=9119, 99.9=19695, 99.99=34975] [UPDATE: Count=390108, Max=29375, Min=483, Avg=2241.51, 90=3137, 99=4395, 99.9=7647, 99.99=21391] 
2023-05-04 21:35:54:594 950 sec: 74365380 operations; 80622.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=402434, Max=17231, Min=589, Avg=4008.12, 90=5831, 99=7983, 99.9=10519, 99.99=13751] [UPDATE: Count=403820, Max=14559, Min=482, Avg=2193.41, 90=3069, 99=4069, 99.9=7631, 99.99=11111] 
2023-05-04 21:36:04:594 960 sec: 75170390 operations; 80501 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=401383, Max=73407, Min=582, Avg=4025.79, 90=5851, 99=8207, 99.9=16159, 99.99=48863] [UPDATE: Count=403776, Max=48863, Min=501, Avg=2187.16, 90=3057, 99=4111, 99.9=7987, 99.99=18751] 
2023-05-04 21:36:14:594 970 sec: 75974753 operations; 80436.3 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=402190, Max=56671, Min=557, Avg=4022.44, 90=5859, 99=8239, 99.9=12999, 99.99=33567] [UPDATE: Count=401917, Max=29039, Min=493, Avg=2190.45, 90=3061, 99=4171, 99.9=7747, 99.99=21023] 
2023-05-04 21:36:24:594 980 sec: 76785879 operations; 81112.6 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=404627, Max=14159, Min=579, Avg=3983.26, 90=5807, 99=7939, 99.9=10263, 99.99=12231] [UPDATE: Count=406419, Max=10775, Min=487, Avg=2182.07, 90=3051, 99=4019, 99.9=7643, 99.99=9199] 
2023-05-04 21:36:34:594 990 sec: 77586426 operations; 80054.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=400833, Max=51647, Min=545, Avg=4038.07, 90=5887, 99=8359, 99.9=12815, 99.99=33887] [UPDATE: Count=399839, Max=29423, Min=488, Avg=2202.05, 90=3077, 99=4219, 99.9=7795, 99.99=20687] 
2023-05-04 21:36:44:594 1000 sec: 78381722 operations; 79529.6 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=397676, Max=56735, Min=575, Avg=4075.4, 90=5991, 99=8583, 99.9=12911, 99.99=34367] [UPDATE: Count=397536, Max=28943, Min=513, Avg=2208.44, 90=3093, 99=4243, 99.9=7915, 99.99=21839] 
2023-05-04 21:36:54:594 1010 sec: 79181770 operations; 80004.8 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=399888, Max=26783, Min=553, Avg=4041.93, 90=5915, 99=8311, 99.9=11631, 99.99=17343] [UPDATE: Count=400395, Max=12431, Min=495, Avg=2205.15, 90=3093, 99=4203, 99.9=7679, 99.99=9039] 
2023-05-04 21:37:04:594 1020 sec: 79980612 operations; 79884.2 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=399618, Max=52031, Min=581, Avg=4051.02, 90=5943, 99=8543, 99.9=14135, 99.99=33535] [UPDATE: Count=399327, Max=29151, Min=489, Avg=2204.04, 90=3077, 99=4331, 99.9=7831, 99.99=20271] 
2023-05-04 21:37:14:594 1030 sec: 80777701 operations; 79708.9 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=398948, Max=67583, Min=586, Avg=4066.88, 90=5963, 99=8807, 99.9=17999, 99.99=39391] [UPDATE: Count=398141, Max=46911, Min=496, Avg=2201.05, 90=3071, 99=4323, 99.9=7991, 99.99=21775] 
2023-05-04 21:37:24:594 1040 sec: 81587121 operations; 80942 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=404737, Max=15103, Min=547, Avg=3988.48, 90=5863, 99=8087, 99.9=10415, 99.99=12367] [UPDATE: Count=404306, Max=10951, Min=498, Avg=2185.12, 90=3067, 99=4131, 99.9=7327, 99.99=8855] 
2023-05-04 21:37:34:594 1050 sec: 82389730 operations; 80260.9 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=400578, Max=50815, Min=537, Avg=4029.83, 90=5895, 99=8495, 99.9=15087, 99.99=34335] [UPDATE: Count=402103, Max=29679, Min=500, Avg=2200.14, 90=3087, 99=4299, 99.9=7751, 99.99=22031] 
2023-05-04 21:37:44:594 1060 sec: 83188120 operations; 79839 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=399192, Max=48927, Min=531, Avg=4061.5, 90=5947, 99=9543, 99.9=19935, 99.99=34879] [UPDATE: Count=399580, Max=37023, Min=494, Avg=2198.28, 90=3091, 99=4555, 99.9=8179, 99.99=19903] 
2023-05-04 21:37:54:594 1070 sec: 83996372 operations; 80825.2 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=404225, Max=19679, Min=563, Avg=3999.92, 90=5887, 99=8455, 99.9=11423, 99.99=14751] [UPDATE: Count=403875, Max=11047, Min=499, Avg=2182.41, 90=3065, 99=4267, 99.9=7475, 99.99=8839] 
2023-05-04 21:38:04:594 1080 sec: 84800900 operations; 80452.8 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=402341, Max=50719, Min=585, Avg=4022.53, 90=5899, 99=8919, 99.9=16975, 99.99=35679] [UPDATE: Count=402006, Max=28527, Min=501, Avg=2189.24, 90=3061, 99=4547, 99.9=7827, 99.99=20543] 
2023-05-04 21:38:14:594 1090 sec: 85606617 operations; 80571.7 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=403771, Max=71743, Min=566, Avg=4007.61, 90=5811, 99=8399, 99.9=23103, 99.99=65023] [UPDATE: Count=402243, Max=65311, Min=500, Avg=2190.34, 90=3047, 99=4219, 99.9=8167, 99.99=62975] 
2023-05-04 21:38:24:594 1100 sec: 86416161 operations; 80954.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=404092, Max=19791, Min=575, Avg=3999.5, 90=5867, 99=8327, 99.9=10903, 99.99=13415] [UPDATE: Count=405246, Max=10855, Min=515, Avg=2176.95, 90=3061, 99=4199, 99.9=7155, 99.99=8631] 
2023-05-04 21:38:34:593 1110 sec: 87215696 operations; 79953.5 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=399698, Max=60671, Min=560, Avg=4051.33, 90=5871, 99=8359, 99.9=20191, 99.99=34783] [UPDATE: Count=399860, Max=35487, Min=510, Avg=2199.34, 90=3079, 99=4315, 99.9=7399, 99.99=22079] 
2023-05-04 21:38:44:594 1120 sec: 88009271 operations; 79357.5 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=397348, Max=64415, Min=587, Avg=4076.72, 90=5927, 99=8311, 99.9=13167, 99.99=36991] [UPDATE: Count=396093, Max=43807, Min=480, Avg=2218.33, 90=3121, 99=4195, 99.9=7667, 99.99=23167] 
2023-05-04 21:38:54:593 1130 sec: 88797944 operations; 78867.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=393906, Max=14703, Min=592, Avg=4113.11, 90=6015, 99=8071, 99.9=10255, 99.99=12175] [UPDATE: Count=394539, Max=10343, Min=493, Avg=2225.48, 90=3119, 99=4163, 99.9=7311, 99.99=8911] 
2023-05-04 21:39:04:594 1140 sec: 89569284 operations; 77134 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=386058, Max=48095, Min=571, Avg=4235.03, 90=6223, 99=8535, 99.9=13175, 99.99=29983] [UPDATE: Count=385614, Max=27551, Min=495, Avg=2241.82, 90=3113, 99=4271, 99.9=7719, 99.99=20127] 
2023-05-04 21:39:14:593 1150 sec: 90326655 operations; 75737.1 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=378477, Max=54751, Min=564, Avg=4336.27, 90=6379, 99=9247, 99.9=16295, 99.99=36863] [UPDATE: Count=378973, Max=46239, Min=483, Avg=2263.89, 90=3131, 99=4471, 99.9=7691, 99.99=21375] 
2023-05-04 21:39:24:594 1160 sec: 91069621 operations; 74296.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372095, Max=21535, Min=629, Avg=4431.44, 90=6511, 99=9223, 99.9=12687, 99.99=16863] [UPDATE: Count=370693, Max=11463, Min=503, Avg=2291.78, 90=3167, 99=4403, 99.9=7303, 99.99=9191] 
2023-05-04 21:39:34:594 1170 sec: 91813853 operations; 74423.2 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372029, Max=54719, Min=643, Avg=4390.66, 90=6363, 99=9359, 99.9=16463, 99.99=35807] [UPDATE: Count=372475, Max=29455, Min=500, Avg=2324.96, 90=3207, 99=4711, 99.9=7599, 99.99=19807] 
2023-05-04 21:39:44:594 1180 sec: 92556220 operations; 74236.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371949, Max=58495, Min=595, Avg=4383.92, 90=6223, 99=8751, 99.9=15399, 99.99=36799] [UPDATE: Count=370131, Max=41567, Min=499, Avg=2344.55, 90=3199, 99=4415, 99.9=7531, 99.99=20719] 
2023-05-04 21:39:54:594 1190 sec: 93277997 operations; 72177.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=361061, Max=21807, Min=606, Avg=4515.49, 90=6311, 99=8503, 99.9=11047, 99.99=15103] [UPDATE: Count=360613, Max=11711, Min=470, Avg=2407.86, 90=3249, 99=4387, 99.9=6883, 99.99=8223] 
2023-05-04 21:40:04:594 1200 sec: 93976185 operations; 69818.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=348430, Max=62399, Min=935, Avg=4678.09, 90=6467, 99=8719, 99.9=13159, 99.99=37855] [UPDATE: Count=349652, Max=47647, Min=767, Avg=2484.83, 90=3327, 99=4591, 99.9=7867, 99.99=23055] 
2023-05-04 21:40:14:593 1210 sec: 94632070 operations; 65588.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=327830, Max=57439, Min=575, Avg=4912.81, 90=6471, 99=8295, 99.9=11335, 99.99=32991] [UPDATE: Count=327806, Max=36767, Min=480, Avg=2709.23, 90=3551, 99=4571, 99.9=7603, 99.99=20639] 
2023-05-04 21:40:24:593 1220 sec: 95274763 operations; 64269.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=320981, Max=12663, Min=548, Avg=4975.13, 90=6403, 99=7971, 99.9=9943, 99.99=11431] [UPDATE: Count=321686, Max=9463, Min=480, Avg=2803.95, 90=3597, 99=4475, 99.9=7199, 99.99=8479] 
2023-05-04 21:40:34:593 1230 sec: 95926603 operations; 65184 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=326284, Max=49503, Min=531, Avg=4914.58, 90=6439, 99=8143, 99.9=11151, 99.99=31727] [UPDATE: Count=325696, Max=28639, Min=465, Avg=2750.47, 90=3585, 99=4551, 99.9=7639, 99.99=20543] 
2023-05-04 21:40:44:593 1240 sec: 96605129 operations; 67852.6 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=339017, Max=47487, Min=569, Avg=4726.1, 90=6327, 99=8279, 99.9=12839, 99.99=32447] [UPDATE: Count=339571, Max=32527, Min=471, Avg=2641.25, 90=3531, 99=4599, 99.9=7519, 99.99=18319] 
2023-05-04 21:40:54:594 1250 sec: 97300362 operations; 69523.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=347569, Max=21311, Min=553, Avg=4607.64, 90=6219, 99=8075, 99.9=10943, 99.99=15591] [UPDATE: Count=347764, Max=11231, Min=477, Avg=2581.4, 90=3461, 99=4359, 99.9=7451, 99.99=8807] 
2023-05-04 21:41:04:594 1260 sec: 98003416 operations; 70305.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=351456, Max=53087, Min=568, Avg=4565.6, 90=6199, 99=8319, 99.9=14919, 99.99=36863] [UPDATE: Count=351686, Max=46847, Min=489, Avg=2543.53, 90=3429, 99=4503, 99.9=7843, 99.99=21599] 
2023-05-04 21:41:14:594 1270 sec: 98724809 operations; 72139.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=360933, Max=43007, Min=580, Avg=4453.41, 90=6147, 99=8147, 99.9=11279, 99.99=31839] [UPDATE: Count=360447, Max=29327, Min=488, Avg=2473.02, 90=3375, 99=4407, 99.9=7663, 99.99=22431] 
2023-05-04 21:41:24:594 1280 sec: 99464543 operations; 73973.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=369817, Max=15367, Min=548, Avg=4357.14, 90=6091, 99=7995, 99.9=10191, 99.99=12151] [UPDATE: Count=369155, Max=24031, Min=474, Avg=2402.77, 90=3261, 99=4335, 99.9=7595, 99.99=14031] 
2023-05-04 21:41:34:593 1290 sec: 100208285 operations; 74374.2 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=371493, Max=49087, Min=562, Avg=4334.96, 90=6083, 99=8263, 99.9=14823, 99.99=35103] [UPDATE: Count=372964, Max=30255, Min=498, Avg=2382.52, 90=3243, 99=4367, 99.9=7943, 99.99=21359] 
2023-05-04 21:41:44:593 1300 sec: 100950498 operations; 74221.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371297, Max=50111, Min=580, Avg=4352.71, 90=6127, 99=8327, 99.9=15687, 99.99=34079] [UPDATE: Count=371006, Max=28495, Min=486, Avg=2380.54, 90=3249, 99=4435, 99.9=7787, 99.99=21423] 
2023-05-04 21:41:54:594 1310 sec: 101696556 operations; 74605.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373249, Max=14519, Min=600, Avg=4329.71, 90=6147, 99=8207, 99.9=10503, 99.99=12599] [UPDATE: Count=372417, Max=13919, Min=476, Avg=2368.47, 90=3245, 99=4263, 99.9=7687, 99.99=9583] 
2023-05-04 21:42:04:593 1320 sec: 102438019 operations; 74146.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371146, Max=55455, Min=557, Avg=4357.03, 90=6167, 99=8367, 99.9=15263, 99.99=35839] [UPDATE: Count=370633, Max=34207, Min=476, Avg=2379.34, 90=3263, 99=4471, 99.9=8059, 99.99=22255] 
2023-05-04 21:42:14:593 1330 sec: 103186188 operations; 74816.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374053, Max=43519, Min=572, Avg=4319.3, 90=6143, 99=8351, 99.9=12351, 99.99=31375] [UPDATE: Count=374087, Max=27279, Min=484, Avg=2360.81, 90=3241, 99=4387, 99.9=7663, 99.99=18335] 
2023-05-04 21:42:24:593 1340 sec: 103932985 operations; 74679.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373092, Max=23711, Min=545, Avg=4334.9, 90=6191, 99=8503, 99.9=12463, 99.99=18687] [UPDATE: Count=373703, Max=19951, Min=497, Avg=2359.34, 90=3245, 99=4443, 99.9=7771, 99.99=15551] 
2023-05-04 21:42:34:593 1350 sec: 104687812 operations; 75482.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=377533, Max=59519, Min=542, Avg=4278.02, 90=6095, 99=8255, 99.9=12631, 99.99=32191] [UPDATE: Count=377375, Max=29391, Min=481, Avg=2341.57, 90=3219, 99=4367, 99.9=7623, 99.99=23551] 
2023-05-04 21:42:44:593 1360 sec: 105442609 operations; 75479.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=377323, Max=62559, Min=572, Avg=4295.46, 90=6175, 99=9007, 99.9=18767, 99.99=32751] [UPDATE: Count=377503, Max=30431, Min=498, Avg=2326.2, 90=3223, 99=4635, 99.9=7667, 99.99=21215] 
2023-05-04 21:42:54:593 1370 sec: 106202566 operations; 75995.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=379961, Max=18223, Min=551, Avg=4269.29, 90=6215, 99=8855, 99.9=11743, 99.99=14495] [UPDATE: Count=379847, Max=10239, Min=498, Avg=2306.62, 90=3215, 99=4435, 99.9=7251, 99.99=8687] 
2023-05-04 21:43:04:594 1380 sec: 106964457 operations; 76189.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=380399, Max=44287, Min=588, Avg=4259.47, 90=6171, 99=9047, 99.9=16975, 99.99=32895] [UPDATE: Count=381663, Max=28271, Min=476, Avg=2303.22, 90=3205, 99=4591, 99.9=7803, 99.99=20367] 
2023-05-04 21:43:14:593 1390 sec: 107728885 operations; 76442.8 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=383312, Max=60095, Min=530, Avg=4234.83, 90=6087, 99=8471, 99.9=17743, 99.99=37855] [UPDATE: Count=381071, Max=39935, Min=491, Avg=2297.35, 90=3191, 99=4399, 99.9=7495, 99.99=20095] 
2023-05-04 21:43:24:594 1400 sec: 108496409 operations; 76752.4 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384076, Max=17135, Min=614, Avg=4214.25, 90=6079, 99=8351, 99.9=10863, 99.99=13055] [UPDATE: Count=383584, Max=10591, Min=509, Avg=2295.33, 90=3189, 99=4279, 99.9=7587, 99.99=8975] 
2023-05-04 21:43:34:593 1410 sec: 109262934 operations; 76652.5 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=382520, Max=50879, Min=566, Avg=4227.81, 90=6083, 99=8431, 99.9=16175, 99.99=31743] [UPDATE: Count=383897, Max=30271, Min=486, Avg=2295.41, 90=3193, 99=4411, 99.9=8131, 99.99=19279] 
2023-05-04 21:43:44:594 1420 sec: 110027585 operations; 76465.1 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=382143, Max=58783, Min=580, Avg=4239.56, 90=6099, 99=8559, 99.9=15615, 99.99=35263] [UPDATE: Count=382656, Max=33887, Min=503, Avg=2297.33, 90=3195, 99=4359, 99.9=7911, 99.99=21519] 
2023-05-04 21:43:54:599 1430 sec: 110794488 operations; 76644.31 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=383963, Max=18799, Min=558, Avg=4213.22, 90=6091, 99=8367, 99.9=11199, 99.99=13575] [UPDATE: Count=382854, Max=10447, Min=486, Avg=2302.87, 90=3211, 99=4339, 99.9=7775, 99.99=9191] 
2023-05-04 21:44:04:594 1440 sec: 111551879 operations; 75784.57 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=378279, Max=50367, Min=579, Avg=4266.53, 90=6115, 99=8495, 99.9=15399, 99.99=35359] [UPDATE: Count=378669, Max=28143, Min=476, Avg=2333.99, 90=3243, 99=4395, 99.9=8295, 99.99=20431] 
2023-05-04 21:44:14:593 1450 sec: 112300498 operations; 74861.9 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=374332, Max=45119, Min=545, Avg=4312.83, 90=6127, 99=8239, 99.9=13295, 99.99=33375] [UPDATE: Count=374638, Max=28591, Min=507, Avg=2360.33, 90=3267, 99=4367, 99.9=7447, 99.99=21231] 
2023-05-04 21:44:24:593 1460 sec: 113041294 operations; 74079.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=370266, Max=18159, Min=614, Avg=4370.67, 90=6203, 99=8215, 99.9=10383, 99.99=12167] [UPDATE: Count=370284, Max=9919, Min=470, Avg=2376.53, 90=3279, 99=4311, 99.9=7331, 99.99=8463] 
2023-05-04 21:44:34:593 1470 sec: 113764599 operations; 72330.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=362312, Max=53471, Min=582, Avg=4505.12, 90=6371, 99=8639, 99.9=14871, 99.99=37151] [UPDATE: Count=361259, Max=30335, Min=472, Avg=2400.55, 90=3291, 99=4359, 99.9=7867, 99.99=21199] 
2023-05-04 21:44:44:593 1480 sec: 114485274 operations; 72067.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=360507, Max=55391, Min=588, Avg=4513.47, 90=6375, 99=8999, 99.9=14495, 99.99=33855] [UPDATE: Count=360075, Max=34495, Min=489, Avg=2420.27, 90=3305, 99=4595, 99.9=8083, 99.99=22463] 
2023-05-04 21:44:54:593 1490 sec: 115203021 operations; 71774.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=358470, Max=21679, Min=578, Avg=4544.38, 90=6519, 99=9519, 99.9=12519, 99.99=16311] [UPDATE: Count=359223, Max=10359, Min=496, Avg=2421.06, 90=3325, 99=4759, 99.9=7499, 99.99=8751] 
2023-05-04 21:45:04:593 1500 sec: 115919322 operations; 71630.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=357916, Max=54559, Min=615, Avg=4544.88, 90=6435, 99=9455, 99.9=15767, 99.99=37343] [UPDATE: Count=358373, Max=44127, Min=490, Avg=2434.09, 90=3309, 99=4847, 99.9=7939, 99.99=21999] 
2023-05-04 21:45:14:593 1510 sec: 116630210 operations; 71088.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=355364, Max=52927, Min=557, Avg=4565.27, 90=6379, 99=8999, 99.9=14551, 99.99=33407] [UPDATE: Count=355514, Max=40543, Min=507, Avg=2465.54, 90=3345, 99=4711, 99.9=7743, 99.99=21695] 
2023-05-04 21:45:24:593 1520 sec: 117330015 operations; 69980.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=350501, Max=21007, Min=580, Avg=4634.22, 90=6403, 99=8911, 99.9=11855, 99.99=14935] [UPDATE: Count=349262, Max=10095, Min=504, Avg=2504.12, 90=3381, 99=4507, 99.9=7323, 99.99=8655] 
2023-05-04 21:45:34:593 1530 sec: 118032130 operations; 70211.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=350646, Max=54463, Min=557, Avg=4611.16, 90=6303, 99=8503, 99.9=12167, 99.99=35839] [UPDATE: Count=351434, Max=34335, Min=482, Avg=2509.43, 90=3351, 99=4467, 99.9=7947, 99.99=20623] 
2023-05-04 21:45:44:593 1540 sec: 118730624 operations; 69849.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=348944, Max=46623, Min=559, Avg=4638.11, 90=6307, 99=8639, 99.9=16463, 99.99=34239] [UPDATE: Count=349671, Max=32575, Min=488, Avg=2518.76, 90=3351, 99=4447, 99.9=7787, 99.99=30367] 
2023-05-04 21:45:54:593 1550 sec: 119430049 operations; 69942.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=349383, Max=16231, Min=600, Avg=4638.87, 90=6375, 99=8447, 99.9=10735, 99.99=12703] [UPDATE: Count=349900, Max=9863, Min=530, Avg=2509.36, 90=3335, 99=4495, 99.9=7191, 99.99=8559] 
2023-05-04 21:46:04:593 1560 sec: 120121123 operations; 69107.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=345006, Max=50847, Min=681, Avg=4698.41, 90=6451, 99=8695, 99.9=12967, 99.99=31519] [UPDATE: Count=346103, Max=31279, Min=497, Avg=2537.02, 90=3369, 99=4623, 99.9=7911, 99.99=22687] 
2023-05-04 21:46:14:593 1570 sec: 120791286 operations; 67016.3 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=334870, Max=52159, Min=544, Avg=4799.12, 90=6371, 99=8179, 99.9=10895, 99.99=31087] [UPDATE: Count=335259, Max=31231, Min=465, Avg=2660.45, 90=3455, 99=4451, 99.9=7399, 99.99=23999] 
2023-05-04 21:46:24:593 1580 sec: 121451865 operations; 66057.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330238, Max=13887, Min=554, Avg=4869.2, 90=6423, 99=8119, 99.9=10327, 99.99=11951] [UPDATE: Count=330225, Max=9791, Min=481, Avg=2697.5, 90=3483, 99=4407, 99.9=7487, 99.99=8783] 
2023-05-04 21:46:34:593 1590 sec: 122112103 operations; 66023.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330338, Max=61343, Min=563, Avg=4873.43, 90=6479, 99=8695, 99.9=15079, 99.99=36479] [UPDATE: Count=330135, Max=33247, Min=471, Avg=2694.73, 90=3531, 99=4827, 99.9=8319, 99.99=23551] 
2023-05-04 21:46:44:593 1600 sec: 122808721 operations; 69661.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=348160, Max=60031, Min=577, Avg=4615.22, 90=6363, 99=8767, 99.9=15703, 99.99=36927] [UPDATE: Count=348469, Max=36351, Min=487, Avg=2560, 90=3453, 99=4683, 99.9=7595, 99.99=22207] 
2023-05-04 21:46:54:593 1610 sec: 123515669 operations; 70694.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=353498, Max=15223, Min=554, Avg=4543.22, 90=6307, 99=8359, 99.9=10727, 99.99=12943] [UPDATE: Count=353383, Max=11103, Min=481, Avg=2526.33, 90=3413, 99=4475, 99.9=7615, 99.99=8911] 
2023-05-04 21:47:04:593 1620 sec: 124234291 operations; 71862.2 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=358853, Max=50047, Min=556, Avg=4477.21, 90=6231, 99=8327, 99.9=12159, 99.99=36959] [UPDATE: Count=359861, Max=29887, Min=498, Avg=2480.65, 90=3359, 99=4511, 99.9=7839, 99.99=21695] 
2023-05-04 21:47:14:593 1630 sec: 124955773 operations; 72148.2 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=360663, Max=45055, Min=562, Avg=4458.84, 90=6219, 99=8295, 99.9=14391, 99.99=32751] [UPDATE: Count=360791, Max=32191, Min=475, Avg=2468.11, 90=3351, 99=4547, 99.9=7499, 99.99=20911] 
2023-05-04 21:47:24:593 1640 sec: 125684698 operations; 72892.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=364816, Max=17167, Min=555, Avg=4413.72, 90=6199, 99=8303, 99.9=10887, 99.99=13623] [UPDATE: Count=364128, Max=15079, Min=471, Avg=2440.5, 90=3323, 99=4391, 99.9=7903, 99.99=11831] 
2023-05-04 21:47:34:593 1650 sec: 126415964 operations; 73126.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=365150, Max=51263, Min=544, Avg=4401.79, 90=6195, 99=8407, 99.9=13727, 99.99=35007] [UPDATE: Count=366286, Max=31087, Min=471, Avg=2435.18, 90=3321, 99=4499, 99.9=7867, 99.99=22031] 
2023-05-04 21:47:44:594 1660 sec: 127151125 operations; 73516.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=367013, Max=55391, Min=530, Avg=4382.28, 90=6199, 99=8343, 99.9=11967, 99.99=35551] [UPDATE: Count=368153, Max=30303, Min=486, Avg=2419.01, 90=3295, 99=4487, 99.9=7595, 99.99=21743] 
2023-05-04 21:47:54:593 1670 sec: 127889427 operations; 73830.2 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=369457, Max=16815, Min=563, Avg=4366.11, 90=6227, 99=8391, 99.9=10679, 99.99=12631] [UPDATE: Count=368772, Max=10359, Min=485, Avg=2401.25, 90=3293, 99=4447, 99.9=7323, 99.99=8863] 
2023-05-04 21:48:04:594 1680 sec: 128628754 operations; 73932.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=369599, Max=55775, Min=564, Avg=4361.66, 90=6219, 99=8639, 99.9=17183, 99.99=39455] [UPDATE: Count=369875, Max=30287, Min=497, Avg=2398.24, 90=3287, 99=4599, 99.9=8423, 99.99=24143] 
2023-05-04 21:48:14:593 1690 sec: 129370205 operations; 74145.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=371028, Max=55967, Min=541, Avg=4351.62, 90=6175, 99=8423, 99.9=19183, 99.99=37119] [UPDATE: Count=370476, Max=32319, Min=449, Avg=2387.08, 90=3277, 99=4463, 99.9=7711, 99.99=21055] 
2023-05-04 21:48:24:594 1700 sec: 130111772 operations; 74156.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=371019, Max=19647, Min=551, Avg=4356.01, 90=6211, 99=8503, 99.9=11295, 99.99=14575] [UPDATE: Count=370321, Max=9919, Min=486, Avg=2382.17, 90=3281, 99=4431, 99.9=7243, 99.99=8695] 
2023-05-04 21:48:34:594 1710 sec: 130859460 operations; 74768.8 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=374057, Max=53375, Min=582, Avg=4318.93, 90=6199, 99=8791, 99.9=19151, 99.99=34943] [UPDATE: Count=373125, Max=30303, Min=483, Avg=2368.46, 90=3285, 99=4691, 99.9=8295, 99.99=23055] 
2023-05-04 21:48:44:593 1720 sec: 131606469 operations; 74700.9 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=373465, Max=50303, Min=536, Avg=4324.55, 90=6183, 99=8823, 99.9=18767, 99.99=36031] [UPDATE: Count=374264, Max=45887, Min=495, Avg=2361.31, 90=3277, 99=4599, 99.9=7751, 99.99=24031] 
2023-05-04 21:48:54:593 1730 sec: 132362427 operations; 75595.8 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=378374, Max=16239, Min=569, Avg=4266.35, 90=6119, 99=8303, 99.9=10591, 99.99=12855] [UPDATE: Count=377388, Max=10487, Min=498, Avg=2342.55, 90=3255, 99=4343, 99.9=7223, 99.99=8743] 
2023-05-04 21:49:04:593 1740 sec: 133119700 operations; 75727.3 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=378743, Max=57375, Min=542, Avg=4271.09, 90=6135, 99=8663, 99.9=18207, 99.99=38111] [UPDATE: Count=378689, Max=31327, Min=508, Avg=2327.89, 90=3229, 99=4475, 99.9=8047, 99.99=21199] 
2023-05-04 21:49:14:593 1750 sec: 133878411 operations; 75871.1 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379480, Max=52767, Min=516, Avg=4267.51, 90=6139, 99=8791, 99.9=22671, 99.99=38175] [UPDATE: Count=379296, Max=30447, Min=504, Avg=2318.53, 90=3223, 99=4523, 99.9=8007, 99.99=22703] 
2023-05-04 21:49:24:593 1760 sec: 134640783 operations; 76237.2 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=380835, Max=24671, Min=567, Avg=4245.59, 90=6135, 99=8639, 99.9=11839, 99.99=16543] [UPDATE: Count=381226, Max=11431, Min=502, Avg=2311.44, 90=3209, 99=4331, 99.9=7579, 99.99=9303] 
2023-05-04 21:49:34:594 1770 sec: 135405937 operations; 76515.4 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=382642, Max=52863, Min=555, Avg=4223.04, 90=6111, 99=8647, 99.9=20847, 99.99=37279] [UPDATE: Count=382825, Max=42623, Min=483, Avg=2308.08, 90=3233, 99=4535, 99.9=8015, 99.99=23919] 
2023-05-04 21:49:44:593 1780 sec: 136163542 operations; 75760.5 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379439, Max=58751, Min=539, Avg=4267.53, 90=6187, 99=8839, 99.9=15311, 99.99=40511] [UPDATE: Count=378163, Max=35391, Min=483, Avg=2325.7, 90=3273, 99=4451, 99.9=7995, 99.99=23615] 
2023-05-04 21:49:54:593 1790 sec: 136916126 operations; 75258.4 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=376194, Max=19599, Min=554, Avg=4298.15, 90=6235, 99=8543, 99.9=11079, 99.99=13807] [UPDATE: Count=376219, Max=9815, Min=499, Avg=2342.95, 90=3307, 99=4471, 99.9=7399, 99.99=8711] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 21:50:04:593 1800 sec: 137663774 operations; 74764.8 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=374400, Max=63775, Min=551, Avg=4338.53, 90=6263, 99=8767, 99.9=17087, 99.99=36511] [UPDATE: Count=373072, Max=49791, Min=483, Avg=2342.46, 90=3307, 99=4543, 99.9=8055, 99.99=23679] 
Still waiting for thread Thread-135 to complete. Workload status: true
2023-05-04 21:50:06:845 1802 sec: 137666028 operations; 1000.89 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=1158, Max=8231, Min=554, Avg=3886.52, 90=5787, 99=7359, 99.9=8207, 99.99=8231] [CLEANUP: Count=250, Max=2222079, Min=0, Avg=8885.42, 90=1, 99=10, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802250
[OVERALL], Throughput(ops/sec), 76385.64461090304
[TOTAL_GCS_PS_Scavenge], Count, 4998
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17618
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9775558329865446
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 76
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004216951033430434
[TOTAL_GCs], Count, 5000
[TOTAL_GC_TIME], Time(ms), 17694
[TOTAL_GC_TIME_%], Time(%), 0.981772784019975
[READ], Operations, 68837652
[READ], AverageLatency(us), 4047.068520930958
[READ], MinLatency(us), 516
[READ], MaxLatency(us), 218495
[READ], 95thPercentileLatency(us), 6551
[READ], 99thPercentileLatency(us), 8151
[READ], Return=OK, 68837652
[CLEANUP], Operations, 250
[CLEANUP], AverageLatency(us), 8885.416
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 10
[UPDATE], Operations, 68828376
[UPDATE], AverageLatency(us), 2244.1790861519094
[UPDATE], MinLatency(us), 449
[UPDATE], MaxLatency(us), 210559
[UPDATE], 95thPercentileLatency(us), 3465
[UPDATE], 99thPercentileLatency(us), 4251
[UPDATE], Return=OK, 68828376
