bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-05-04 21:20:03:803 0 sec: 0 operations; est completion in 0 second 
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-04 21:20:13:787 10 sec: 744509 operations; 74450.9 current ops/sec; est completion in 3 hours 43 minutes [READ: Count=371820, Max=158335, Min=557, Avg=3059.27, 90=4435, 99=10751, 99.9=31231, 99.99=116991] [UPDATE: Count=375569, Max=154367, Min=478, Avg=1961.54, 90=2643, 99=8815, 99.9=25439, 99.99=117823] 
2023-05-04 21:20:23:787 20 sec: 1544519 operations; 80001 current ops/sec; est completion in 3 hours 35 minutes [READ: Count=400945, Max=55551, Min=553, Avg=2764.83, 90=3987, 99=5467, 99.9=8247, 99.99=30527] [UPDATE: Count=397665, Max=30031, Min=491, Avg=1668.25, 90=2361, 99=3125, 99.9=4979, 99.99=19919] 
2023-05-04 21:20:33:787 30 sec: 2344503 operations; 79998.4 current ops/sec; est completion in 3 hours 32 minutes [READ: Count=400264, Max=57919, Min=561, Avg=2777.24, 90=4005, 99=5563, 99.9=10671, 99.99=32991] [UPDATE: Count=400219, Max=26319, Min=468, Avg=1674.49, 90=2375, 99=3153, 99.9=6023, 99.99=21135] 
2023-05-04 21:20:43:787 40 sec: 3144546 operations; 80004.3 current ops/sec; est completion in 3 hours 31 minutes [READ: Count=399040, Max=13415, Min=531, Avg=2768.89, 90=4011, 99=5439, 99.9=6859, 99.99=9823] [UPDATE: Count=400359, Max=12327, Min=499, Avg=1672.02, 90=2373, 99=3107, 99.9=4251, 99.99=7999] 
2023-05-04 21:20:53:787 50 sec: 3944503 operations; 79995.7 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=399387, Max=51743, Min=552, Avg=2793.14, 90=4041, 99=5575, 99.9=8695, 99.99=32767] [UPDATE: Count=400676, Max=27471, Min=486, Avg=1684.2, 90=2387, 99=3165, 99.9=5971, 99.99=20943] 
2023-05-04 21:21:03:787 60 sec: 4744509 operations; 80000.6 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=399683, Max=54655, Min=565, Avg=2815.4, 90=4073, 99=5671, 99.9=12071, 99.99=30767] [UPDATE: Count=400363, Max=28223, Min=461, Avg=1694.59, 90=2399, 99=3205, 99.9=6119, 99.99=20287] 
2023-05-04 21:21:13:787 70 sec: 5544524 operations; 80001.5 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=398545, Max=10599, Min=554, Avg=2804.92, 90=4079, 99=5691, 99.9=7679, 99.99=9383] [UPDATE: Count=401503, Max=10191, Min=491, Avg=1691.19, 90=2401, 99=3227, 99.9=6227, 99.99=7903] 
2023-05-04 21:21:23:787 80 sec: 6344530 operations; 80000.6 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=401040, Max=74367, Min=525, Avg=2844.37, 90=4111, 99=6043, 99.9=13039, 99.99=41311] [UPDATE: Count=399116, Max=40927, Min=489, Avg=1710.4, 90=2415, 99=3423, 99.9=6919, 99.99=21999] 
2023-05-04 21:21:33:787 90 sec: 7144338 operations; 79980.8 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399488, Max=54463, Min=546, Avg=2864.8, 90=4155, 99=6103, 99.9=11879, 99.99=33375] [UPDATE: Count=400192, Max=31391, Min=481, Avg=1718.2, 90=2431, 99=3413, 99.9=7219, 99.99=17455] 
2023-05-04 21:21:43:787 100 sec: 7944501 operations; 80016.3 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=400401, Max=16543, Min=550, Avg=2803.07, 90=4063, 99=5819, 99.9=8191, 99.99=9639] [UPDATE: Count=399777, Max=16303, Min=481, Avg=1693.91, 90=2399, 99=3277, 99.9=6639, 99.99=7843] 
2023-05-04 21:21:53:787 110 sec: 8744508 operations; 80000.7 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400559, Max=51199, Min=509, Avg=2846.73, 90=4127, 99=6007, 99.9=9847, 99.99=32271] [UPDATE: Count=399498, Max=28031, Min=489, Avg=1714.53, 90=2421, 99=3353, 99.9=7103, 99.99=20351] 
2023-05-04 21:22:03:787 120 sec: 9544526 operations; 80001.8 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400266, Max=62719, Min=542, Avg=2866.32, 90=4159, 99=6083, 99.9=12111, 99.99=31999] [UPDATE: Count=399879, Max=45695, Min=479, Avg=1719.78, 90=2427, 99=3381, 99.9=7039, 99.99=21135] 
2023-05-04 21:22:13:787 130 sec: 10344491 operations; 79996.5 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400043, Max=12591, Min=571, Avg=2803.25, 90=4067, 99=5771, 99.9=7863, 99.99=9447] [UPDATE: Count=399751, Max=9719, Min=490, Avg=1694.23, 90=2401, 99=3293, 99.9=6399, 99.99=7743] 
2023-05-04 21:22:23:792 140 sec: 11144571 operations; 79968.02 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399700, Max=56447, Min=563, Avg=2880.08, 90=4175, 99=6067, 99.9=11359, 99.99=37535] [UPDATE: Count=400343, Max=40799, Min=491, Avg=1727.27, 90=2447, 99=3395, 99.9=7055, 99.99=21775] 
2023-05-04 21:22:33:787 150 sec: 11944492 operations; 80032.12 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399458, Max=58911, Min=550, Avg=2850.45, 90=4135, 99=6031, 99.9=10519, 99.99=35295] [UPDATE: Count=400591, Max=36319, Min=482, Avg=1713.39, 90=2425, 99=3403, 99.9=7115, 99.99=19951] 
2023-05-04 21:22:43:787 160 sec: 12744517 operations; 80002.5 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400526, Max=16079, Min=550, Avg=2821.99, 90=4111, 99=5847, 99.9=8059, 99.99=10087] [UPDATE: Count=399367, Max=13599, Min=482, Avg=1702.35, 90=2415, 99=3319, 99.9=6551, 99.99=7787] 
2023-05-04 21:22:53:787 170 sec: 13544484 operations; 79996.7 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=399961, Max=50399, Min=526, Avg=2933.88, 90=4315, 99=6191, 99.9=10727, 99.99=29263] [UPDATE: Count=400168, Max=28015, Min=497, Avg=1746.04, 90=2477, 99=3377, 99.9=6971, 99.99=17919] 
2023-05-04 21:23:03:787 180 sec: 14344380 operations; 79989.6 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400394, Max=62335, Min=557, Avg=3325.78, 90=4959, 99=6747, 99.9=11847, 99.99=37727] [UPDATE: Count=399487, Max=46687, Min=489, Avg=1919.19, 90=2771, 99=3761, 99.9=7183, 99.99=22607] 
2023-05-04 21:23:13:787 190 sec: 15143363 operations; 79898.3 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=399093, Max=13151, Min=578, Avg=3791.64, 90=5659, 99=7191, 99.9=9111, 99.99=10951] [UPDATE: Count=399470, Max=9423, Min=491, Avg=2073.3, 90=2929, 99=3813, 99.9=6683, 99.99=7999] 
2023-05-04 21:23:23:787 200 sec: 15881828 operations; 73846.5 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=369586, Max=53375, Min=584, Avg=4372.9, 90=6115, 99=7635, 99.9=10559, 99.99=31551] [UPDATE: Count=368734, Max=26303, Min=502, Avg=2387.68, 90=3223, 99=4215, 99.9=7475, 99.99=20063] 
2023-05-04 21:23:33:787 210 sec: 16512346 operations; 63051.8 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=314874, Max=43327, Min=885, Avg=5064.51, 90=6359, 99=7735, 99.9=10415, 99.99=28127] [UPDATE: Count=315411, Max=31359, Min=813, Avg=2865.72, 90=3573, 99=4443, 99.9=7343, 99.99=20799] 
2023-05-04 21:23:43:787 220 sec: 17161032 operations; 64868.6 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=324302, Max=15103, Min=567, Avg=4897.21, 90=6267, 99=7611, 99.9=9935, 99.99=11447] [UPDATE: Count=324537, Max=11631, Min=477, Avg=2806.68, 90=3565, 99=4403, 99.9=7335, 99.99=8799] 
2023-05-04 21:23:53:787 230 sec: 17907966 operations; 74693.4 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=373520, Max=50719, Min=538, Avg=4257.84, 90=5959, 99=7623, 99.9=10823, 99.99=33087] [UPDATE: Count=374004, Max=29759, Min=489, Avg=2431.7, 90=3353, 99=4307, 99.9=7651, 99.99=19999] 
2023-05-04 21:24:03:787 240 sec: 18713241 operations; 80527.5 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=402537, Max=67775, Min=570, Avg=3967.42, 90=5719, 99=7591, 99.9=12871, 99.99=37951] [UPDATE: Count=402528, Max=38591, Min=468, Avg=2238.25, 90=3177, 99=4219, 99.9=7583, 99.99=19327] 
2023-05-04 21:24:13:787 250 sec: 19540602 operations; 82736.1 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=413413, Max=14335, Min=550, Avg=3865.53, 90=5531, 99=7259, 99.9=9399, 99.99=11383] [UPDATE: Count=414121, Max=10447, Min=488, Avg=2175.22, 90=3057, 99=4035, 99.9=6875, 99.99=8735] 
2023-05-04 21:24:23:787 260 sec: 20372791 operations; 83218.9 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=415797, Max=51295, Min=554, Avg=3850.2, 90=5511, 99=7283, 99.9=10311, 99.99=34751] [UPDATE: Count=416480, Max=29791, Min=481, Avg=2155.76, 90=3029, 99=3985, 99.9=7147, 99.99=19407] 
2023-05-04 21:24:33:787 270 sec: 21204017 operations; 83122.6 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=416759, Max=51615, Min=562, Avg=3847.29, 90=5539, 99=7375, 99.9=10959, 99.99=31231] [UPDATE: Count=414183, Max=28863, Min=474, Avg=2159.72, 90=3041, 99=4023, 99.9=7311, 99.99=21359] 
2023-05-04 21:24:43:787 280 sec: 22041210 operations; 83719.3 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=418476, Max=27359, Min=567, Avg=3818.09, 90=5519, 99=7267, 99.9=9847, 99.99=20559] [UPDATE: Count=418928, Max=25167, Min=499, Avg=2151.1, 90=3037, 99=3937, 99.9=7379, 99.99=17599] 
2023-05-04 21:24:53:787 290 sec: 22868227 operations; 82701.7 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=413669, Max=53503, Min=580, Avg=3878.92, 90=5631, 99=7759, 99.9=12015, 99.99=34047] [UPDATE: Count=413530, Max=28511, Min=505, Avg=2162.83, 90=3059, 99=4147, 99.9=7315, 99.99=21135] 
2023-05-04 21:25:03:787 300 sec: 23696925 operations; 82869.8 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=414383, Max=50687, Min=537, Avg=3870.91, 90=5635, 99=7879, 99.9=15047, 99.99=34655] [UPDATE: Count=414496, Max=31919, Min=493, Avg=2159.6, 90=3063, 99=4167, 99.9=7691, 99.99=18111] 
2023-05-04 21:25:13:787 310 sec: 24535872 operations; 83894.7 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=418445, Max=17871, Min=579, Avg=3821.52, 90=5599, 99=7527, 99.9=9807, 99.99=12191] [UPDATE: Count=420325, Max=12375, Min=500, Avg=2138.03, 90=3041, 99=3971, 99.9=7115, 99.99=8783] 
2023-05-04 21:25:23:787 320 sec: 25387101 operations; 85122.9 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=425422, Max=55647, Min=579, Avg=3765.64, 90=5507, 99=7603, 99.9=11679, 99.99=35807] [UPDATE: Count=425945, Max=30239, Min=501, Avg=2105.49, 90=2963, 99=4043, 99.9=7511, 99.99=22095] 
2023-05-04 21:25:33:787 330 sec: 26233155 operations; 84605.4 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=422793, Max=50431, Min=608, Avg=3795.79, 90=5579, 99=7775, 99.9=13039, 99.99=32831] [UPDATE: Count=423234, Max=28127, Min=496, Avg=2110.9, 90=2981, 99=4123, 99.9=7259, 99.99=21695] 
2023-05-04 21:25:43:787 340 sec: 27085303 operations; 85214.8 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=426602, Max=13975, Min=543, Avg=3755.87, 90=5515, 99=7423, 99.9=9511, 99.99=11327] [UPDATE: Count=425433, Max=9967, Min=487, Avg=2105.72, 90=2983, 99=3973, 99.9=6759, 99.99=8351] 
2023-05-04 21:25:53:787 350 sec: 27933425 operations; 84812.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=424177, Max=53087, Min=547, Avg=3736.67, 90=5483, 99=7579, 99.9=14231, 99.99=32127] [UPDATE: Count=424152, Max=29087, Min=491, Avg=2091.65, 90=2965, 99=3931, 99.9=7659, 99.99=21999] 
2023-05-04 21:26:03:787 360 sec: 28744397 operations; 81097.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=404956, Max=50783, Min=546, Avg=3542.33, 90=5223, 99=7167, 99.9=12839, 99.99=32959] [UPDATE: Count=405677, Max=40447, Min=490, Avg=2012.18, 90=2887, 99=3901, 99.9=7559, 99.99=17359] 
2023-05-04 21:26:13:787 370 sec: 29544449 operations; 80005.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399669, Max=15815, Min=562, Avg=3406.48, 90=5067, 99=6879, 99.9=9071, 99.99=11887] [UPDATE: Count=400336, Max=13663, Min=479, Avg=1948.25, 90=2831, 99=3763, 99.9=6995, 99.99=9343] 
2023-05-04 21:26:23:787 380 sec: 30344395 operations; 79994.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400506, Max=54623, Min=561, Avg=3411.97, 90=5075, 99=6931, 99.9=10319, 99.99=34175] [UPDATE: Count=399557, Max=37631, Min=489, Avg=1952.13, 90=2837, 99=3825, 99.9=7199, 99.99=21583] 
2023-05-04 21:26:33:787 390 sec: 31144109 operations; 79971.4 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399947, Max=47775, Min=577, Avg=3435.71, 90=5107, 99=7039, 99.9=11303, 99.99=29183] [UPDATE: Count=399943, Max=27071, Min=494, Avg=1962.79, 90=2849, 99=3867, 99.9=7111, 99.99=19759] 
2023-05-04 21:26:43:787 400 sec: 31944395 operations; 80028.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400052, Max=12927, Min=540, Avg=3382.47, 90=5047, 99=6823, 99.9=8775, 99.99=10431] [UPDATE: Count=399620, Max=9127, Min=495, Avg=1941.42, 90=2831, 99=3797, 99.9=6699, 99.99=8079] 
2023-05-04 21:26:53:787 410 sec: 32744403 operations; 80000.8 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400433, Max=53919, Min=551, Avg=3442.63, 90=5123, 99=7067, 99.9=10231, 99.99=31903] [UPDATE: Count=399863, Max=27727, Min=492, Avg=1969.08, 90=2853, 99=3889, 99.9=7239, 99.99=21871] 
2023-05-04 21:27:03:787 420 sec: 33544408 operations; 80000.5 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399784, Max=57567, Min=570, Avg=3443.5, 90=5127, 99=7135, 99.9=12551, 99.99=33279] [UPDATE: Count=400404, Max=28863, Min=484, Avg=1963.85, 90=2857, 99=3899, 99.9=7279, 99.99=21743] 
2023-05-04 21:27:13:787 430 sec: 34344373 operations; 79996.5 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399231, Max=21343, Min=559, Avg=3378.74, 90=5035, 99=6855, 99.9=9023, 99.99=15407] [UPDATE: Count=400647, Max=18351, Min=492, Avg=1939.19, 90=2833, 99=3807, 99.9=6723, 99.99=14655] 
2023-05-04 21:27:23:787 440 sec: 35144409 operations; 80003.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400530, Max=52639, Min=536, Avg=3403.29, 90=5043, 99=6991, 99.9=10247, 99.99=34815] [UPDATE: Count=398408, Max=29695, Min=481, Avg=1954.04, 90=2841, 99=3803, 99.9=7547, 99.99=24399] 
2023-05-04 21:27:33:787 450 sec: 35944436 operations; 80002.7 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400179, Max=48799, Min=572, Avg=3372.41, 90=4987, 99=6975, 99.9=12879, 99.99=30191] [UPDATE: Count=400658, Max=29599, Min=485, Avg=1937.9, 90=2823, 99=3827, 99.9=7543, 99.99=23583] 
2023-05-04 21:27:43:787 460 sec: 36744415 operations; 79997.9 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399947, Max=16767, Min=580, Avg=3366.3, 90=5007, 99=6903, 99.9=9183, 99.99=11071] [UPDATE: Count=399876, Max=12895, Min=489, Avg=1932.78, 90=2815, 99=3755, 99.9=6987, 99.99=8695] 
2023-05-04 21:27:53:787 470 sec: 37544373 operations; 79995.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399645, Max=53759, Min=538, Avg=3332.19, 90=4927, 99=6851, 99.9=11335, 99.99=32383] [UPDATE: Count=400469, Max=27679, Min=481, Avg=1922.3, 90=2811, 99=3819, 99.9=7127, 99.99=21103] 
2023-05-04 21:28:03:787 480 sec: 38344313 operations; 79994 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400157, Max=50623, Min=553, Avg=3452.21, 90=5135, 99=7155, 99.9=12215, 99.99=32031] [UPDATE: Count=400082, Max=28271, Min=495, Avg=1968.58, 90=2869, 99=3873, 99.9=7271, 99.99=20095] 
2023-05-04 21:28:13:787 490 sec: 39144324 operations; 80001.1 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399949, Max=17407, Min=570, Avg=3569.19, 90=5295, 99=7067, 99.9=9463, 99.99=12023] [UPDATE: Count=399896, Max=16815, Min=490, Avg=2012.96, 90=2905, 99=3777, 99.9=7043, 99.99=9655] 
2023-05-04 21:28:23:787 500 sec: 39943596 operations; 79927.2 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400408, Max=52671, Min=566, Avg=3868.76, 90=5719, 99=7531, 99.9=10735, 99.99=33663] [UPDATE: Count=398719, Max=33471, Min=480, Avg=2108.12, 90=2969, 99=3875, 99.9=7591, 99.99=22767] 
2023-05-04 21:28:33:787 510 sec: 40731254 operations; 78765.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=394489, Max=53023, Min=591, Avg=4104.43, 90=5979, 99=7951, 99.9=11855, 99.99=35007] [UPDATE: Count=393165, Max=29807, Min=483, Avg=2197.65, 90=3061, 99=4103, 99.9=7303, 99.99=21103] 
2023-05-04 21:28:43:787 520 sec: 41477781 operations; 74652.7 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=373904, Max=20479, Min=572, Avg=4359.83, 90=6171, 99=8075, 99.9=10519, 99.99=13495] [UPDATE: Count=372447, Max=9055, Min=487, Avg=2331.77, 90=3187, 99=4191, 99.9=6795, 99.99=8071] 
2023-05-04 21:28:53:787 530 sec: 42152121 operations; 67434 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=337355, Max=53119, Min=867, Avg=4816.73, 90=6411, 99=8191, 99.9=11231, 99.99=31407] [UPDATE: Count=336753, Max=29055, Min=659, Avg=2594.29, 90=3455, 99=4427, 99.9=7183, 99.99=20383] 
2023-05-04 21:29:03:787 540 sec: 42764747 operations; 61262.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=306640, Max=38975, Min=635, Avg=5210.04, 90=6499, 99=8015, 99.9=10695, 99.99=29615] [UPDATE: Count=306115, Max=31135, Min=485, Avg=2946.62, 90=3615, 99=4595, 99.9=7455, 99.99=21375] 
2023-05-04 21:29:13:787 550 sec: 43385787 operations; 62104 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=310896, Max=14975, Min=542, Avg=5118.01, 90=6391, 99=7771, 99.9=9831, 99.99=11719] [UPDATE: Count=309985, Max=10751, Min=473, Avg=2926.94, 90=3591, 99=4415, 99.9=7187, 99.99=8383] 
2023-05-04 21:29:23:787 560 sec: 44041330 operations; 65554.3 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=327352, Max=48447, Min=506, Avg=4846.05, 90=6239, 99=7727, 99.9=11783, 99.99=35327] [UPDATE: Count=328614, Max=39775, Min=472, Avg=2779.99, 90=3563, 99=4439, 99.9=7927, 99.99=21775] 
2023-05-04 21:29:33:787 570 sec: 44727368 operations; 68603.8 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=343088, Max=51679, Min=548, Avg=4639.92, 90=6131, 99=7659, 99.9=11159, 99.99=35871] [UPDATE: Count=342693, Max=32063, Min=484, Avg=2644.32, 90=3493, 99=4331, 99.9=7619, 99.99=18559] 
2023-05-04 21:29:43:787 580 sec: 45437241 operations; 70987.3 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=355132, Max=15415, Min=561, Avg=4491.58, 90=6083, 99=7619, 99.9=10071, 99.99=12471] [UPDATE: Count=354781, Max=10079, Min=494, Avg=2547.43, 90=3435, 99=4287, 99.9=7131, 99.99=8583] 
2023-05-04 21:29:53:787 590 sec: 46179804 operations; 74256.3 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=371655, Max=50815, Min=553, Avg=4300.48, 90=6007, 99=7679, 99.9=10463, 99.99=31999] [UPDATE: Count=371066, Max=29695, Min=475, Avg=2427.3, 90=3325, 99=4287, 99.9=7363, 99.99=21471] 
2023-05-04 21:30:03:787 600 sec: 46935397 operations; 75559.3 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=377892, Max=53119, Min=543, Avg=4233.54, 90=5967, 99=7743, 99.9=10871, 99.99=32191] [UPDATE: Count=377782, Max=31407, Min=480, Avg=2380, 90=3301, 99=4287, 99.9=7407, 99.99=18143] 
2023-05-04 21:30:13:787 610 sec: 47711689 operations; 77629.2 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=387941, Max=14775, Min=516, Avg=4133.76, 90=5907, 99=7783, 99.9=10135, 99.99=12287] [UPDATE: Count=388241, Max=11415, Min=499, Avg=2304.25, 90=3231, 99=4155, 99.9=7339, 99.99=8879] 
2023-05-04 21:30:23:787 620 sec: 48496589 operations; 78490 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=392667, Max=52159, Min=551, Avg=4095.64, 90=5891, 99=8263, 99.9=16431, 99.99=33951] [UPDATE: Count=392456, Max=33855, Min=490, Avg=2270.18, 90=3209, 99=4295, 99.9=7503, 99.99=19695] 
2023-05-04 21:30:33:787 630 sec: 49286999 operations; 79041 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=394605, Max=51903, Min=554, Avg=4062.01, 90=5855, 99=7883, 99.9=11335, 99.99=35359] [UPDATE: Count=395702, Max=27535, Min=478, Avg=2263.2, 90=3201, 99=4207, 99.9=7711, 99.99=18543] 
2023-05-04 21:30:43:787 640 sec: 50083160 operations; 79616.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=398161, Max=18783, Min=557, Avg=4022.92, 90=5855, 99=7831, 99.9=10047, 99.99=12167] [UPDATE: Count=398075, Max=11351, Min=498, Avg=2253.41, 90=3211, 99=4203, 99.9=7031, 99.99=8615] 
2023-05-04 21:30:53:787 650 sec: 50887689 operations; 80452.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=402660, Max=52639, Min=542, Avg=3989.73, 90=5871, 99=8019, 99.9=11615, 99.99=32111] [UPDATE: Count=402090, Max=27343, Min=484, Avg=2219.65, 90=3163, 99=4271, 99.9=7231, 99.99=20703] 
2023-05-04 21:31:03:787 660 sec: 51702678 operations; 81498.9 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=407978, Max=48639, Min=544, Avg=3946.13, 90=5799, 99=8091, 99.9=13455, 99.99=32863] [UPDATE: Count=407017, Max=27423, Min=490, Avg=2183.19, 90=3083, 99=4199, 99.9=7731, 99.99=20559] 
2023-05-04 21:31:13:787 670 sec: 52528131 operations; 82545.3 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=412221, Max=14247, Min=558, Avg=3909.88, 90=5791, 99=7991, 99.9=10111, 99.99=12007] [UPDATE: Count=413151, Max=10551, Min=498, Avg=2146.17, 90=3019, 99=4051, 99.9=6843, 99.99=8311] 
2023-05-04 21:31:23:787 680 sec: 53350054 operations; 82192.3 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=411333, Max=59551, Min=538, Avg=3924.42, 90=5799, 99=8231, 99.9=15079, 99.99=37759] [UPDATE: Count=410743, Max=45279, Min=479, Avg=2153.67, 90=3033, 99=4239, 99.9=7343, 99.99=19343] 
2023-05-04 21:31:33:787 690 sec: 54175429 operations; 82537.5 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=412150, Max=49439, Min=570, Avg=3906.06, 90=5791, 99=8163, 99.9=12703, 99.99=31279] [UPDATE: Count=412991, Max=28559, Min=485, Avg=2150.55, 90=3037, 99=4227, 99.9=7275, 99.99=21519] 
2023-05-04 21:31:43:787 700 sec: 55003686 operations; 82825.7 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=413691, Max=17247, Min=586, Avg=3895.32, 90=5819, 99=8215, 99.9=10655, 99.99=12911] [UPDATE: Count=414449, Max=10751, Min=490, Avg=2139.92, 90=3035, 99=4131, 99.9=7223, 99.99=8903] 
2023-05-04 21:31:53:787 710 sec: 55830859 operations; 82717.3 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=414001, Max=56159, Min=577, Avg=3897.66, 90=5767, 99=8231, 99.9=16927, 99.99=35903] [UPDATE: Count=413669, Max=28847, Min=501, Avg=2141.71, 90=3031, 99=4187, 99.9=7459, 99.99=21679] 
2023-05-04 21:32:03:787 720 sec: 56656917 operations; 82605.8 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413140, Max=65599, Min=574, Avg=3906.79, 90=5791, 99=8511, 99.9=19823, 99.99=36927] [UPDATE: Count=411692, Max=39455, Min=488, Avg=2147.47, 90=3037, 99=4411, 99.9=8399, 99.99=24255] 
2023-05-04 21:32:13:787 730 sec: 57485267 operations; 82835 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413258, Max=32543, Min=577, Avg=3891.76, 90=5823, 99=8199, 99.9=10895, 99.99=22479] [UPDATE: Count=415815, Max=29423, Min=473, Avg=2139.06, 90=3039, 99=4195, 99.9=6947, 99.99=9199] 
2023-05-04 21:32:23:787 740 sec: 58313617 operations; 82835 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413398, Max=56031, Min=556, Avg=3894.09, 90=5807, 99=8183, 99.9=11791, 99.99=34591] [UPDATE: Count=415385, Max=28911, Min=485, Avg=2141.89, 90=3041, 99=4235, 99.9=7187, 99.99=19471] 
2023-05-04 21:32:33:787 750 sec: 59143883 operations; 83026.6 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414469, Max=57791, Min=554, Avg=3879.92, 90=5751, 99=8123, 99.9=15527, 99.99=39231] [UPDATE: Count=415409, Max=37695, Min=483, Avg=2141.58, 90=3033, 99=4223, 99.9=7635, 99.99=20703] 
2023-05-04 21:32:43:787 760 sec: 59974657 operations; 83077.4 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414958, Max=15887, Min=562, Avg=3879.23, 90=5763, 99=7999, 99.9=10439, 99.99=12879] [UPDATE: Count=415580, Max=10263, Min=498, Avg=2137.55, 90=3029, 99=4139, 99.9=7051, 99.99=8631] 
2023-05-04 21:32:53:787 770 sec: 60803926 operations; 82926.9 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414038, Max=52127, Min=571, Avg=3889.71, 90=5783, 99=8215, 99.9=12047, 99.99=34015] [UPDATE: Count=415182, Max=29839, Min=484, Avg=2139.8, 90=3033, 99=4163, 99.9=7843, 99.99=21199] 
2023-05-04 21:33:03:787 780 sec: 61628587 operations; 82466.1 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=412646, Max=50975, Min=579, Avg=3910.08, 90=5831, 99=8399, 99.9=15127, 99.99=31887] [UPDATE: Count=412353, Max=29583, Min=493, Avg=2146.94, 90=3043, 99=4283, 99.9=7759, 99.99=20207] 
2023-05-04 21:33:13:787 790 sec: 62453983 operations; 82539.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=412508, Max=15487, Min=548, Avg=3909.29, 90=5823, 99=8119, 99.9=10463, 99.99=12575] [UPDATE: Count=412789, Max=10039, Min=506, Avg=2145.87, 90=3049, 99=4147, 99.9=7095, 99.99=8479] 
2023-05-04 21:33:23:787 800 sec: 63269257 operations; 81527.4 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=407244, Max=52255, Min=584, Avg=3965.69, 90=5827, 99=8031, 99.9=11471, 99.99=31663] [UPDATE: Count=407971, Max=28303, Min=487, Avg=2165.53, 90=3055, 99=4115, 99.9=7583, 99.99=21471] 
2023-05-04 21:33:33:787 810 sec: 64068589 operations; 79933.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=400014, Max=49567, Min=533, Avg=4063.19, 90=5987, 99=8255, 99.9=13767, 99.99=32639] [UPDATE: Count=399367, Max=28911, Min=497, Avg=2186.88, 90=3085, 99=4219, 99.9=7543, 99.99=20175] 
2023-05-04 21:33:43:787 820 sec: 64856725 operations; 78813.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=394004, Max=14303, Min=555, Avg=4139.7, 90=6111, 99=8147, 99.9=10295, 99.99=12287] [UPDATE: Count=394035, Max=9671, Min=469, Avg=2201.2, 90=3093, 99=4059, 99.9=6827, 99.99=8139] 
2023-05-04 21:33:53:787 830 sec: 65620913 operations; 76418.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=381620, Max=56063, Min=586, Avg=4291.66, 90=6263, 99=8551, 99.9=14751, 99.99=33663] [UPDATE: Count=382632, Max=28015, Min=495, Avg=2250.46, 90=3141, 99=4287, 99.9=7267, 99.99=18479] 
2023-05-04 21:34:03:787 840 sec: 66376012 operations; 75509.9 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=377616, Max=52703, Min=602, Avg=4325.53, 90=6267, 99=8695, 99.9=13991, 99.99=33951] [UPDATE: Count=377480, Max=33055, Min=473, Avg=2292.64, 90=3197, 99=4443, 99.9=7511, 99.99=19119] 
2023-05-04 21:34:13:787 850 sec: 67116067 operations; 74005.5 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=369970, Max=16415, Min=580, Avg=4395.49, 90=6223, 99=8295, 99.9=10543, 99.99=12839] [UPDATE: Count=369840, Max=9559, Min=507, Avg=2357.99, 90=3237, 99=4311, 99.9=7087, 99.99=8279] 
2023-05-04 21:34:23:787 860 sec: 67819039 operations; 70297.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=351270, Max=53823, Min=567, Avg=4640.24, 90=6295, 99=8223, 99.9=13175, 99.99=31263] [UPDATE: Count=351648, Max=26895, Min=512, Avg=2471.6, 90=3269, 99=4331, 99.9=7787, 99.99=20639] 
2023-05-04 21:34:33:787 870 sec: 68501354 operations; 68231.5 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=341306, Max=49439, Min=878, Avg=4717.57, 90=6307, 99=8079, 99.9=11623, 99.99=31279] [UPDATE: Count=340985, Max=30447, Min=695, Avg=2605.95, 90=3407, 99=4243, 99.9=7627, 99.99=22703] 
2023-05-04 21:34:43:787 880 sec: 69160792 operations; 65943.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=330030, Max=14391, Min=563, Avg=4850.25, 90=6275, 99=7727, 99.9=10583, 99.99=12799] [UPDATE: Count=329376, Max=11327, Min=475, Avg=2726.88, 90=3469, 99=4215, 99.9=7371, 99.99=9943] 
2023-05-04 21:34:53:787 890 sec: 69832100 operations; 67130.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=335510, Max=53119, Min=546, Avg=4764.55, 90=6283, 99=7939, 99.9=10815, 99.99=29711] [UPDATE: Count=335947, Max=34303, Min=493, Avg=2680.7, 90=3495, 99=4427, 99.9=7787, 99.99=21279] 
2023-05-04 21:35:03:787 900 sec: 70561534 operations; 72943.4 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=364524, Max=51007, Min=582, Avg=4398.12, 90=6099, 99=7979, 99.9=12183, 99.99=37023] [UPDATE: Count=364995, Max=31887, Min=493, Avg=2453.65, 90=3343, 99=4499, 99.9=7515, 99.99=19791] 
2023-05-04 21:35:13:787 910 sec: 71319784 operations; 75825 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=378887, Max=15327, Min=554, Avg=4244.72, 90=5975, 99=7799, 99.9=10023, 99.99=11775] [UPDATE: Count=379276, Max=9455, Min=494, Avg=2347.16, 90=3211, 99=4171, 99.9=7303, 99.99=8519] 
2023-05-04 21:35:23:787 920 sec: 72089781 operations; 76999.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=385141, Max=52383, Min=548, Avg=4192.79, 90=5931, 99=8011, 99.9=12599, 99.99=33343] [UPDATE: Count=384150, Max=34783, Min=499, Avg=2301.79, 90=3159, 99=4271, 99.9=7711, 99.99=24607] 
2023-05-04 21:35:33:787 930 sec: 72869028 operations; 77924.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=389034, Max=50591, Min=534, Avg=4155.96, 90=5995, 99=8583, 99.9=16863, 99.99=33183] [UPDATE: Count=391200, Max=28543, Min=488, Avg=2254.52, 90=3141, 99=4411, 99.9=7691, 99.99=22223] 
2023-05-04 21:35:43:787 940 sec: 73653387 operations; 78435.9 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=391678, Max=30143, Min=552, Avg=4141.72, 90=6003, 99=8999, 99.9=16511, 99.99=23439] [UPDATE: Count=392741, Max=12671, Min=497, Avg=2231.8, 90=3127, 99=4319, 99.9=7299, 99.99=8751] 
2023-05-04 21:35:53:787 950 sec: 74457535 operations; 80414.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=402229, Max=47743, Min=556, Avg=4022.51, 90=5843, 99=8067, 99.9=11791, 99.99=32543] [UPDATE: Count=401939, Max=46207, Min=491, Avg=2191.32, 90=3057, 99=4147, 99.9=7507, 99.99=22255] 
2023-05-04 21:36:03:787 960 sec: 75265128 operations; 80759.3 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=403890, Max=69311, Min=603, Avg=4008.55, 90=5827, 99=8103, 99.9=16031, 99.99=46367] [UPDATE: Count=403689, Max=44703, Min=486, Avg=2179.3, 90=3041, 99=4107, 99.9=7727, 99.99=19343] 
2023-05-04 21:36:13:787 970 sec: 76073196 operations; 80806.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=404307, Max=18671, Min=593, Avg=4004.6, 90=5851, 99=8103, 99.9=10567, 99.99=13871] [UPDATE: Count=403632, Max=10647, Min=483, Avg=2177.61, 90=3045, 99=4067, 99.9=7171, 99.99=8639] 
2023-05-04 21:36:23:787 980 sec: 76883773 operations; 81057.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=405220, Max=62239, Min=569, Avg=3985.15, 90=5795, 99=7959, 99.9=11655, 99.99=34815] [UPDATE: Count=405380, Max=29247, Min=485, Avg=2180.24, 90=3045, 99=4163, 99.9=7203, 99.99=20767] 
2023-05-04 21:36:33:787 990 sec: 77686111 operations; 80233.8 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=400617, Max=57983, Min=604, Avg=4033.58, 90=5879, 99=8239, 99.9=13119, 99.99=33887] [UPDATE: Count=401808, Max=29039, Min=499, Avg=2197.18, 90=3069, 99=4275, 99.9=7367, 99.99=21151] 
2023-05-04 21:36:43:787 1000 sec: 78485478 operations; 79936.7 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=399558, Max=19087, Min=575, Avg=4051.48, 90=5963, 99=8351, 99.9=10919, 99.99=14351] [UPDATE: Count=399571, Max=10463, Min=483, Avg=2200.51, 90=3089, 99=4223, 99.9=7235, 99.99=8703] 
2023-05-04 21:36:53:787 1010 sec: 79284751 operations; 79927.3 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=400351, Max=53503, Min=586, Avg=4046.05, 90=5911, 99=8407, 99.9=14015, 99.99=33055] [UPDATE: Count=399289, Max=28799, Min=487, Avg=2203.15, 90=3083, 99=4295, 99.9=7911, 99.99=21727] 
2023-05-04 21:37:03:787 1020 sec: 80085802 operations; 80105.1 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=400265, Max=50111, Min=551, Avg=4043.53, 90=5935, 99=8471, 99.9=14295, 99.99=35807] [UPDATE: Count=400841, Max=27023, Min=494, Avg=2195.91, 90=3067, 99=4319, 99.9=7751, 99.99=20383] 
2023-05-04 21:37:13:787 1030 sec: 80887346 operations; 80154.4 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=401206, Max=27023, Min=633, Avg=4038.28, 90=5939, 99=8471, 99.9=12143, 99.99=17855] [UPDATE: Count=400328, Max=11135, Min=504, Avg=2194.55, 90=3067, 99=4267, 99.9=7255, 99.99=8703] 
2023-05-04 21:37:23:787 1040 sec: 81693737 operations; 80639.1 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=403226, Max=66879, Min=560, Avg=4013.79, 90=5871, 99=8311, 99.9=17855, 99.99=38879] [UPDATE: Count=403028, Max=43807, Min=512, Avg=2182.69, 90=3053, 99=4187, 99.9=7683, 99.99=20319] 
2023-05-04 21:37:33:787 1050 sec: 82498444 operations; 80470.7 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=402231, Max=53087, Min=551, Avg=4018.55, 90=5883, 99=8415, 99.9=14847, 99.99=36287] [UPDATE: Count=402407, Max=31727, Min=493, Avg=2192.13, 90=3073, 99=4307, 99.9=7555, 99.99=22383] 
2023-05-04 21:37:43:787 1060 sec: 83299890 operations; 80144.6 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=400359, Max=32671, Min=543, Avg=4048.09, 90=5939, 99=9111, 99.9=18367, 99.99=22751] [UPDATE: Count=401030, Max=12135, Min=489, Avg=2188.78, 90=3081, 99=4475, 99.9=7687, 99.99=9319] 
2023-05-04 21:37:53:787 1070 sec: 84107717 operations; 80782.7 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=403722, Max=51327, Min=547, Avg=4001.47, 90=5871, 99=8559, 99.9=15719, 99.99=33279] [UPDATE: Count=404216, Max=26559, Min=505, Avg=2185.53, 90=3067, 99=4383, 99.9=7559, 99.99=20799] 
2023-05-04 21:38:03:787 1080 sec: 84915858 operations; 80814.1 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=403941, Max=56927, Min=603, Avg=4004.38, 90=5883, 99=8599, 99.9=14703, 99.99=36191] [UPDATE: Count=404154, Max=31295, Min=472, Avg=2179.75, 90=3047, 99=4419, 99.9=7363, 99.99=21807] 
2023-05-04 21:38:13:787 1090 sec: 85728586 operations; 81272.8 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=406315, Max=27647, Min=592, Avg=3980.51, 90=5815, 99=8327, 99.9=12559, 99.99=18671] [UPDATE: Count=406325, Max=12567, Min=505, Avg=2168.13, 90=3039, 99=4207, 99.9=7239, 99.99=8703] 
2023-05-04 21:38:23:787 1100 sec: 86538462 operations; 80987.6 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=404701, Max=54175, Min=544, Avg=4002.23, 90=5855, 99=8535, 99.9=18399, 99.99=35327] [UPDATE: Count=405352, Max=30559, Min=488, Avg=2169.69, 90=3043, 99=4275, 99.9=7615, 99.99=19647] 
2023-05-04 21:38:33:787 1110 sec: 87339316 operations; 80085.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=400282, Max=58143, Min=572, Avg=4047.23, 90=5867, 99=8415, 99.9=20591, 99.99=37631] [UPDATE: Count=400424, Max=45343, Min=500, Avg=2193.04, 90=3067, 99=4311, 99.9=7543, 99.99=21871] 
2023-05-04 21:38:43:787 1120 sec: 88137689 operations; 79837.3 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=399666, Max=19455, Min=583, Avg=4050.35, 90=5903, 99=8143, 99.9=11087, 99.99=14407] [UPDATE: Count=398641, Max=13431, Min=496, Avg=2206.56, 90=3099, 99=4167, 99.9=7203, 99.99=8479] 
2023-05-04 21:38:53:787 1130 sec: 88927344 operations; 78965.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=394563, Max=54143, Min=565, Avg=4111.45, 90=5991, 99=8199, 99.9=12207, 99.99=34879] [UPDATE: Count=395118, Max=27423, Min=489, Avg=2218.53, 90=3099, 99=4191, 99.9=7675, 99.99=22191] 
2023-05-04 21:39:03:787 1140 sec: 89700118 operations; 77277.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=386723, Max=52223, Min=554, Avg=4232.3, 90=6219, 99=8567, 99.9=13127, 99.99=31823] [UPDATE: Count=386018, Max=28511, Min=472, Avg=2232.68, 90=3097, 99=4235, 99.9=8047, 99.99=18895] 
2023-05-04 21:39:13:787 1150 sec: 90464652 operations; 76453.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=382132, Max=22383, Min=595, Avg=4292.66, 90=6335, 99=8959, 99.9=12551, 99.99=16831] [UPDATE: Count=382308, Max=12607, Min=483, Avg=2244.88, 90=3111, 99=4359, 99.9=7207, 99.99=8583] 
2023-05-04 21:39:23:787 1160 sec: 91206853 operations; 74220.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=370983, Max=52287, Min=563, Avg=4444.09, 90=6523, 99=9295, 99.9=15279, 99.99=36031] [UPDATE: Count=371311, Max=46943, Min=499, Avg=2289.75, 90=3153, 99=4483, 99.9=7335, 99.99=22223] 
2023-05-04 21:39:33:787 1170 sec: 91953262 operations; 74640.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373683, Max=60767, Min=611, Avg=4384.31, 90=6359, 99=9439, 99.9=16463, 99.99=35711] [UPDATE: Count=372358, Max=28335, Min=490, Avg=2310.3, 90=3183, 99=4571, 99.9=7939, 99.99=20959] 
2023-05-04 21:39:43:787 1180 sec: 92694992 operations; 74173 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=370899, Max=53375, Min=578, Avg=4391.17, 90=6223, 99=8775, 99.9=14359, 99.99=49951] [UPDATE: Count=371166, Max=49151, Min=495, Avg=2344.57, 90=3191, 99=4471, 99.9=7455, 99.99=47135] 
2023-05-04 21:39:53:787 1190 sec: 93417551 operations; 72255.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=360466, Max=62815, Min=604, Avg=4517.71, 90=6303, 99=8615, 99.9=13807, 99.99=36351] [UPDATE: Count=362011, Max=41247, Min=516, Avg=2403.66, 90=3237, 99=4511, 99.9=7263, 99.99=21631] 
2023-05-04 21:40:03:787 1200 sec: 94119991 operations; 70244 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=350581, Max=58527, Min=944, Avg=4649.27, 90=6427, 99=8687, 99.9=13431, 99.99=38463] [UPDATE: Count=351754, Max=45567, Min=810, Avg=2469.74, 90=3313, 99=4519, 99.9=7431, 99.99=22287] 
2023-05-04 21:40:13:787 1210 sec: 94782372 operations; 66238.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=331312, Max=14575, Min=592, Avg=4871.91, 90=6459, 99=8199, 99.9=10231, 99.99=11959] [UPDATE: Count=330879, Max=9439, Min=504, Avg=2673.35, 90=3527, 99=4455, 99.9=7067, 99.99=8391] 
2023-05-04 21:40:23:787 1220 sec: 95424717 operations; 64234.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=321129, Max=52831, Min=530, Avg=4980.32, 90=6387, 99=7967, 99.9=10959, 99.99=36287] [UPDATE: Count=320868, Max=32015, Min=476, Avg=2804.15, 90=3591, 99=4535, 99.9=7531, 99.99=22239] 
2023-05-04 21:40:33:787 1230 sec: 96074938 operations; 65022.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=325124, Max=47039, Min=525, Avg=4931.39, 90=6431, 99=8147, 99.9=13671, 99.99=33215] [UPDATE: Count=325656, Max=32399, Min=465, Avg=2751.56, 90=3583, 99=4567, 99.9=7679, 99.99=23375] 
2023-05-04 21:40:43:787 1240 sec: 96754786 operations; 67984.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=339454, Max=21167, Min=550, Avg=4715.4, 90=6319, 99=8147, 99.9=10783, 99.99=15511] [UPDATE: Count=340393, Max=10919, Min=481, Avg=2638.34, 90=3529, 99=4567, 99.9=7147, 99.99=8351] 
2023-05-04 21:40:53:787 1250 sec: 97449049 operations; 69426.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=346462, Max=47871, Min=543, Avg=4618.87, 90=6219, 99=8115, 99.9=12911, 99.99=31103] [UPDATE: Count=347520, Max=32719, Min=470, Avg=2585.58, 90=3461, 99=4515, 99.9=7531, 99.99=15647] 
2023-05-04 21:41:03:787 1260 sec: 98153198 operations; 70414.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=352434, Max=56319, Min=578, Avg=4555.72, 90=6187, 99=8247, 99.9=14983, 99.99=33567] [UPDATE: Count=352334, Max=45791, Min=486, Avg=2537.91, 90=3421, 99=4455, 99.9=7811, 99.99=20639] 
2023-05-04 21:41:13:787 1270 sec: 98876834 operations; 72363.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=361539, Max=14351, Min=535, Avg=4438.62, 90=6123, 99=7911, 99.9=10007, 99.99=12031] [UPDATE: Count=361161, Max=26719, Min=482, Avg=2473.15, 90=3373, 99=4351, 99.9=7079, 99.99=17055] 
2023-05-04 21:41:23:787 1280 sec: 99616256 operations; 73942.2 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=369203, Max=42431, Min=544, Avg=4364.13, 90=6075, 99=8019, 99.9=13967, 99.99=32639] [UPDATE: Count=371230, Max=31039, Min=476, Avg=2392.63, 90=3251, 99=4271, 99.9=7403, 99.99=23631] 
2023-05-04 21:41:33:787 1290 sec: 100362692 operations; 74643.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373655, Max=48031, Min=534, Avg=4319.93, 90=6067, 99=8103, 99.9=12495, 99.99=33055] [UPDATE: Count=372841, Max=31135, Min=482, Avg=2372.83, 90=3233, 99=4319, 99.9=7675, 99.99=21631] 
2023-05-04 21:41:43:787 1300 sec: 101110489 operations; 74779.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373327, Max=14575, Min=575, Avg=4323.74, 90=6091, 99=8059, 99.9=10239, 99.99=12399] [UPDATE: Count=374396, Max=9023, Min=482, Avg=2362.18, 90=3235, 99=4295, 99.9=7091, 99.99=8159] 
2023-05-04 21:41:53:787 1310 sec: 101856223 operations; 74573.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373109, Max=52287, Min=566, Avg=4337.84, 90=6135, 99=8303, 99.9=16751, 99.99=32191] [UPDATE: Count=372632, Max=28831, Min=471, Avg=2362.41, 90=3239, 99=4387, 99.9=7387, 99.99=19535] 
2023-05-04 21:42:03:787 1320 sec: 102599560 operations; 74333.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=371542, Max=52799, Min=518, Avg=4351.33, 90=6155, 99=8367, 99.9=15551, 99.99=36319] [UPDATE: Count=371784, Max=40255, Min=477, Avg=2372.38, 90=3253, 99=4475, 99.9=7907, 99.99=20815] 
2023-05-04 21:42:13:787 1330 sec: 103350690 operations; 75113 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=375848, Max=17647, Min=596, Avg=4299.4, 90=6127, 99=8207, 99.9=10511, 99.99=12695] [UPDATE: Count=374997, Max=9383, Min=491, Avg=2352.41, 90=3243, 99=4387, 99.9=6975, 99.99=8311] 
2023-05-04 21:42:23:787 1340 sec: 104098064 operations; 74737.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374225, Max=45759, Min=528, Avg=4332.47, 90=6175, 99=8535, 99.9=14967, 99.99=31535] [UPDATE: Count=373202, Max=26719, Min=501, Avg=2351.33, 90=3245, 99=4455, 99.9=7311, 99.99=17823] 
2023-05-04 21:42:33:787 1350 sec: 104853871 operations; 75580.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=378412, Max=50783, Min=590, Avg=4274.56, 90=6083, 99=8255, 99.9=12815, 99.99=34463] [UPDATE: Count=377426, Max=26847, Min=495, Avg=2335.06, 90=3215, 99=4375, 99.9=7627, 99.99=18447] 
2023-05-04 21:42:43:787 1360 sec: 105613558 operations; 75968.7 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=380168, Max=22271, Min=553, Avg=4263.31, 90=6147, 99=8703, 99.9=13103, 99.99=18335] [UPDATE: Count=379554, Max=10839, Min=493, Avg=2313.41, 90=3211, 99=4491, 99.9=7315, 99.99=8767] 
2023-05-04 21:42:53:787 1370 sec: 106370375 operations; 75681.7 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=378637, Max=43295, Min=553, Avg=4292.9, 90=6235, 99=9111, 99.9=18495, 99.99=34015] [UPDATE: Count=378211, Max=31935, Min=494, Avg=2308.85, 90=3215, 99=4603, 99.9=7535, 99.99=22255] 
2023-05-04 21:43:03:787 1380 sec: 107133769 operations; 76339.4 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=381312, Max=54015, Min=599, Avg=4253.68, 90=6167, 99=9007, 99.9=16959, 99.99=33311] [UPDATE: Count=382160, Max=30175, Min=497, Avg=2294.27, 90=3201, 99=4619, 99.9=7583, 99.99=19455] 
2023-05-04 21:43:13:787 1390 sec: 107902873 operations; 76910.4 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384861, Max=23183, Min=564, Avg=4210, 90=6075, 99=8287, 99.9=10943, 99.99=14503] [UPDATE: Count=383997, Max=11143, Min=491, Avg=2286.61, 90=3187, 99=4287, 99.9=6979, 99.99=9031] 
2023-05-04 21:43:23:787 1400 sec: 108669566 operations; 76669.3 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=382603, Max=60383, Min=573, Avg=4229.58, 90=6063, 99=8447, 99.9=18911, 99.99=37919] [UPDATE: Count=384250, Max=51039, Min=481, Avg=2291.97, 90=3189, 99=4419, 99.9=7791, 99.99=21871] 
2023-05-04 21:43:33:787 1410 sec: 109438769 operations; 76920.3 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=385061, Max=51135, Min=555, Avg=4210.36, 90=6059, 99=8359, 99.9=16063, 99.99=33375] [UPDATE: Count=384074, Max=29151, Min=488, Avg=2284.74, 90=3191, 99=4367, 99.9=7555, 99.99=19967] 
2023-05-04 21:43:43:787 1420 sec: 110206517 operations; 76774.8 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384202, Max=16639, Min=578, Avg=4220.07, 90=6091, 99=8351, 99.9=10927, 99.99=13287] [UPDATE: Count=383387, Max=10495, Min=501, Avg=2287.05, 90=3189, 99=4315, 99.9=7299, 99.99=9087] 
2023-05-04 21:43:53:787 1430 sec: 110973866 operations; 76734.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=383164, Max=47071, Min=550, Avg=4213.95, 90=6063, 99=8375, 99.9=15807, 99.99=33567] [UPDATE: Count=384358, Max=33279, Min=495, Avg=2300.76, 90=3211, 99=4407, 99.9=7363, 99.99=20991] 
2023-05-04 21:44:03:787 1440 sec: 111715730 operations; 74186.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=371945, Max=239231, Min=576, Avg=4343.75, 90=6107, 99=8511, 99.9=23535, 99.99=229503] [UPDATE: Count=369986, Max=236287, Min=475, Avg=2380.4, 90=3241, 99=4495, 99.9=8295, 99.99=212095] 
2023-05-04 21:44:13:787 1450 sec: 112471055 operations; 75532.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=377414, Max=16231, Min=610, Avg=4278.17, 90=6095, 99=8075, 99.9=10479, 99.99=12599] [UPDATE: Count=377662, Max=9823, Min=489, Avg=2339.76, 90=3247, 99=4235, 99.9=7279, 99.99=8751] 
2023-05-04 21:44:23:787 1460 sec: 113213012 operations; 74195.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=370472, Max=48959, Min=576, Avg=4365.09, 90=6183, 99=8247, 99.9=11607, 99.99=32623] [UPDATE: Count=371586, Max=28607, Min=482, Avg=2373.15, 90=3277, 99=4307, 99.9=7391, 99.99=19663] 
2023-05-04 21:44:33:787 1470 sec: 113939818 operations; 72680.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=362895, Max=54687, Min=562, Avg=4487.54, 90=6359, 99=8591, 99.9=14911, 99.99=35647] [UPDATE: Count=363891, Max=29231, Min=484, Avg=2391.89, 90=3287, 99=4399, 99.9=7611, 99.99=22655] 
2023-05-04 21:44:43:787 1480 sec: 114665268 operations; 72545 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=362308, Max=18239, Min=589, Avg=4486.18, 90=6363, 99=8719, 99.9=11391, 99.99=14263] [UPDATE: Count=363151, Max=10487, Min=486, Avg=2404.68, 90=3297, 99=4439, 99.9=7175, 99.99=8559] 
2023-05-04 21:44:53:787 1490 sec: 115383201 operations; 71793.3 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=358520, Max=59487, Min=543, Avg=4542.58, 90=6491, 99=9527, 99.9=15311, 99.99=35455] [UPDATE: Count=359500, Max=43487, Min=486, Avg=2421.18, 90=3335, 99=4839, 99.9=7479, 99.99=24143] 
2023-05-04 21:45:03:787 1500 sec: 116099875 operations; 71667.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=358199, Max=74303, Min=599, Avg=4548.9, 90=6463, 99=9527, 99.9=16511, 99.99=33407] [UPDATE: Count=358473, Max=41791, Min=485, Avg=2425.42, 90=3315, 99=4855, 99.9=7839, 99.99=23023] 
2023-05-04 21:45:13:787 1510 sec: 116814984 operations; 71510.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=357553, Max=24143, Min=634, Avg=4541.62, 90=6367, 99=8927, 99.9=13143, 99.99=19839] [UPDATE: Count=357343, Max=20415, Min=505, Avg=2447.18, 90=3331, 99=4627, 99.9=7439, 99.99=15255] 
2023-05-04 21:45:23:787 1520 sec: 117514732 operations; 69974.8 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=349676, Max=51871, Min=529, Avg=4640.17, 90=6415, 99=9071, 99.9=13575, 99.99=34655] [UPDATE: Count=350197, Max=35679, Min=474, Avg=2503.93, 90=3389, 99=4771, 99.9=7499, 99.99=17375] 
2023-05-04 21:45:33:787 1530 sec: 118217631 operations; 70289.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=351856, Max=52223, Min=589, Avg=4604.62, 90=6303, 99=8487, 99.9=12335, 99.99=35263] [UPDATE: Count=350968, Max=36639, Min=478, Avg=2504.31, 90=3355, 99=4535, 99.9=7819, 99.99=19167] 
2023-05-04 21:45:43:787 1540 sec: 118922132 operations; 70450.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=352388, Max=17695, Min=606, Avg=4598.83, 90=6271, 99=8383, 99.9=11559, 99.99=14031] [UPDATE: Count=352117, Max=14399, Min=501, Avg=2492.16, 90=3327, 99=4203, 99.9=7215, 99.99=9519] 
2023-05-04 21:45:53:787 1550 sec: 119623648 operations; 70151.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=349963, Max=52383, Min=547, Avg=4630.59, 90=6351, 99=8423, 99.9=12015, 99.99=32719] [UPDATE: Count=351482, Max=29183, Min=494, Avg=2498.74, 90=3327, 99=4391, 99.9=7147, 99.99=22543] 
2023-05-04 21:46:03:787 1560 sec: 120317014 operations; 69336.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=346635, Max=52031, Min=864, Avg=4684.08, 90=6443, 99=8583, 99.9=12663, 99.99=33823] [UPDATE: Count=346727, Max=31087, Min=685, Avg=2523.95, 90=3359, 99=4599, 99.9=7491, 99.99=21535] 
2023-05-04 21:46:13:787 1570 sec: 120991139 operations; 67412.5 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=336953, Max=20527, Min=583, Avg=4776.59, 90=6375, 99=8179, 99.9=10199, 99.99=12039] [UPDATE: Count=337190, Max=9791, Min=486, Avg=2638.34, 90=3445, 99=4435, 99.9=7047, 99.99=8271] 
2023-05-04 21:46:23:787 1580 sec: 121651078 operations; 65993.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330441, Max=53119, Min=579, Avg=4874.86, 90=6415, 99=8139, 99.9=10903, 99.99=31183] [UPDATE: Count=329453, Max=30047, Min=482, Avg=2695.05, 90=3481, 99=4479, 99.9=7527, 99.99=22591] 
2023-05-04 21:46:33:787 1590 sec: 122310429 operations; 65935.1 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=330072, Max=50975, Min=575, Avg=4885.9, 90=6483, 99=8631, 99.9=18927, 99.99=36415] [UPDATE: Count=329411, Max=32671, Min=491, Avg=2691.75, 90=3521, 99=4651, 99.9=8287, 99.99=29007] 
2023-05-04 21:46:43:787 1600 sec: 123008029 operations; 69760 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=348389, Max=18095, Min=556, Avg=4607.88, 90=6363, 99=8551, 99.9=11367, 99.99=14279] [UPDATE: Count=349317, Max=9479, Min=470, Avg=2558.17, 90=3459, 99=4647, 99.9=7235, 99.99=8495] 
2023-05-04 21:46:53:787 1610 sec: 123712165 operations; 70413.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=351968, Max=53023, Min=545, Avg=4564.81, 90=6303, 99=8551, 99.9=19711, 99.99=36223] [UPDATE: Count=352206, Max=33791, Min=490, Avg=2533.15, 90=3419, 99=4651, 99.9=7939, 99.99=26239] 
2023-05-04 21:47:03:787 1620 sec: 124431627 operations; 71946.2 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=359240, Max=48479, Min=606, Avg=4476.13, 90=6227, 99=8287, 99.9=12207, 99.99=35295] [UPDATE: Count=360253, Max=30095, Min=494, Avg=2472.92, 90=3351, 99=4519, 99.9=7627, 99.99=20831] 
2023-05-04 21:47:13:787 1630 sec: 125158166 operations; 72653.9 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=363351, Max=16639, Min=563, Avg=4427.8, 90=6199, 99=8103, 99.9=10095, 99.99=11799] [UPDATE: Count=362929, Max=9271, Min=486, Avg=2450.46, 90=3339, 99=4407, 99.9=6855, 99.99=8143] 
2023-05-04 21:47:23:787 1640 sec: 125887386 operations; 72922 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=364093, Max=47615, Min=519, Avg=4417.98, 90=6203, 99=8359, 99.9=14503, 99.99=33887] [UPDATE: Count=365280, Max=29295, Min=487, Avg=2437.89, 90=3321, 99=4483, 99.9=7463, 99.99=22415] 
2023-05-04 21:47:33:787 1650 sec: 126618941 operations; 73155.5 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=366596, Max=47743, Min=566, Avg=4398.43, 90=6195, 99=8375, 99.9=14087, 99.99=33567] [UPDATE: Count=364997, Max=28815, Min=490, Avg=2428.6, 90=3313, 99=4567, 99.9=7831, 99.99=22815] 
2023-05-04 21:47:43:787 1660 sec: 127357459 operations; 73851.8 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=369040, Max=15271, Min=553, Avg=4365.64, 90=6187, 99=8247, 99.9=10551, 99.99=12975] [UPDATE: Count=369322, Max=9519, Min=497, Avg=2402.58, 90=3289, 99=4391, 99.9=6851, 99.99=8463] 
2023-05-04 21:47:53:787 1670 sec: 128094709 operations; 73725 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=367509, Max=53183, Min=575, Avg=4382.44, 90=6235, 99=8471, 99.9=12135, 99.99=35967] [UPDATE: Count=369874, Max=29487, Min=482, Avg=2401.89, 90=3293, 99=4575, 99.9=7559, 99.99=22143] 
2023-05-04 21:48:03:787 1680 sec: 128836575 operations; 74186.6 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=371175, Max=55935, Min=538, Avg=4351.15, 90=6199, 99=8535, 99.9=15111, 99.99=39935] [UPDATE: Count=370767, Max=28335, Min=466, Avg=2383.92, 90=3279, 99=4531, 99.9=7451, 99.99=21007] 
2023-05-04 21:48:13:787 1690 sec: 129582875 operations; 74630 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=372980, Max=15951, Min=541, Avg=4319.44, 90=6155, 99=8287, 99.9=10551, 99.99=12799] [UPDATE: Count=373307, Max=10279, Min=502, Avg=2377.89, 90=3275, 99=4439, 99.9=7187, 99.99=8487] 
2023-05-04 21:48:23:787 1700 sec: 130322466 operations; 73959.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=369636, Max=60447, Min=576, Avg=4379.2, 90=6223, 99=8639, 99.9=19471, 99.99=37471] [UPDATE: Count=369987, Max=34655, Min=493, Avg=2378.65, 90=3273, 99=4531, 99.9=7247, 99.99=21599] 
2023-05-04 21:48:33:787 1710 sec: 131072443 operations; 74997.7 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=374882, Max=54175, Min=568, Avg=4313.4, 90=6191, 99=8775, 99.9=18831, 99.99=37695] [UPDATE: Count=375042, Max=30655, Min=497, Avg=2350.79, 90=3279, 99=4619, 99.9=7447, 99.99=20111] 
2023-05-04 21:48:43:787 1720 sec: 131825171 operations; 75272.8 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=376162, Max=22383, Min=564, Avg=4292.59, 90=6175, 99=8543, 99.9=11399, 99.99=15823] [UPDATE: Count=376710, Max=16959, Min=494, Avg=2347.37, 90=3269, 99=4499, 99.9=7019, 99.99=8423] 
2023-05-04 21:48:53:787 1730 sec: 132581818 operations; 75664.7 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=378140, Max=58623, Min=555, Avg=4270.18, 90=6107, 99=8367, 99.9=15343, 99.99=37439] [UPDATE: Count=378603, Max=30895, Min=483, Avg=2335.73, 90=3247, 99=4383, 99.9=7343, 99.99=22847] 
2023-05-04 21:49:03:787 1740 sec: 133340506 operations; 75868.8 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379621, Max=54527, Min=574, Avg=4267.08, 90=6135, 99=8615, 99.9=19231, 99.99=34655] [UPDATE: Count=379145, Max=30399, Min=495, Avg=2318.41, 90=3229, 99=4467, 99.9=7439, 99.99=20863] 
2023-05-04 21:49:13:787 1750 sec: 134105693 operations; 76518.7 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=382600, Max=17807, Min=541, Avg=4223.01, 90=6111, 99=8287, 99.9=10527, 99.99=12359] [UPDATE: Count=381635, Max=22975, Min=490, Avg=2311.48, 90=3221, 99=4375, 99.9=7043, 99.99=15871] 
2023-05-04 21:49:23:787 1760 sec: 134865121 operations; 75942.8 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379850, Max=58175, Min=553, Avg=4268.68, 90=6127, 99=8927, 99.9=22607, 99.99=38175] [UPDATE: Count=379465, Max=32431, Min=498, Avg=2313.72, 90=3207, 99=4599, 99.9=8367, 99.99=25375] 
2023-05-04 21:49:33:787 1770 sec: 135630824 operations; 76570.3 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=382391, Max=51007, Min=552, Avg=4225.08, 90=6099, 99=8719, 99.9=22751, 99.99=39391] [UPDATE: Count=384101, Max=32303, Min=473, Avg=2297.19, 90=3217, 99=4447, 99.9=7847, 99.99=22495] 
2023-05-04 21:49:43:787 1780 sec: 136393559 operations; 76273.5 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=380824, Max=20783, Min=570, Avg=4242.42, 90=6167, 99=8591, 99.9=11807, 99.99=15823] [UPDATE: Count=381829, Max=11039, Min=490, Avg=2312.13, 90=3247, 99=4443, 99.9=7271, 99.99=8727] 
2023-05-04 21:49:53:787 1790 sec: 137145443 operations; 75188.4 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=376516, Max=59519, Min=579, Avg=4305.71, 90=6227, 99=8631, 99.9=14711, 99.99=39647] [UPDATE: Count=375667, Max=32799, Min=490, Avg=2338, 90=3285, 99=4527, 99.9=7611, 99.99=22383] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 21:50:03:787 1800 sec: 137892091 operations; 74664.8 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=372849, Max=58495, Min=551, Avg=4350.28, 90=6259, 99=8607, 99.9=16655, 99.99=36767] [UPDATE: Count=372960, Max=33215, Min=490, Avg=2346.62, 90=3297, 99=4435, 99.9=7595, 99.99=23439] 
Still waiting for thread Thread-64 to complete. Workload status: true
2023-05-04 21:50:06:046 1802 sec: 137893641 operations; 686.14 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=842, Max=17423, Min=1128, Avg=5470.32, 90=9447, 99=12663, 99.9=13903, 99.99=17423] [CLEANUP: Count=250, Max=2228223, Min=0, Avg=8909.77, 90=2, 99=6, 99.9=2228223, 99.99=2228223] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802258
[OVERALL], Throughput(ops/sec), 76511.59878330406
[TOTAL_GCS_PS_Scavenge], Count, 5647
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17941
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9954734560756563
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 61
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.003384643042228138
[TOTAL_GCs], Count, 5649
[TOTAL_GC_TIME], Time(ms), 18002
[TOTAL_GC_TIME_%], Time(%), 0.9988580991178844
[READ], Operations, 68937678
[READ], AverageLatency(us), 4039.036022942345
[READ], MinLatency(us), 506
[READ], MaxLatency(us), 239231
[READ], 95thPercentileLatency(us), 6535
[READ], 99thPercentileLatency(us), 8107
[READ], Return=OK, 68937678
[CLEANUP], Operations, 250
[CLEANUP], AverageLatency(us), 8909.768
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2228223
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 6
[UPDATE], Operations, 68955963
[UPDATE], AverageLatency(us), 2235.9993943961017
[UPDATE], MinLatency(us), 461
[UPDATE], MaxLatency(us), 236287
[UPDATE], 95thPercentileLatency(us), 3461
[UPDATE], 99thPercentileLatency(us), 4271
[UPDATE], Return=OK, 68955963
