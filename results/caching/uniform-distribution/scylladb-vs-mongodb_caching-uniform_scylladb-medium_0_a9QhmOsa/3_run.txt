bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 250 -p recordcount=1000000000 -p operationcount=999900000 -target 80000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 21:20:05:836 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-05-04 21:20:15:820 10 sec: 742414 operations; 74241.4 current ops/sec; est completion in 3 hours 44 minutes [READ: Count=371463, Max=122175, Min=539, Avg=3194.27, 90=4531, 99=9791, 99.9=34463, 99.99=109055] [UPDATE: Count=373412, Max=112831, Min=455, Avg=1981.54, 90=2655, 99=7067, 99.9=28175, 99.99=108031] 
2023-05-04 21:20:25:820 20 sec: 1542448 operations; 80003.4 current ops/sec; est completion in 3 hours 35 minutes [READ: Count=400715, Max=21999, Min=521, Avg=2747.93, 90=3983, 99=5495, 99.9=7391, 99.99=15431] [UPDATE: Count=398391, Max=18703, Min=460, Avg=1663.6, 90=2351, 99=3109, 99.9=5563, 99.99=11711] 
2023-05-04 21:20:35:820 30 sec: 2342391 operations; 79994.3 current ops/sec; est completion in 3 hours 32 minutes [READ: Count=399413, Max=50399, Min=522, Avg=2781.92, 90=4021, 99=5687, 99.9=9919, 99.99=31551] [UPDATE: Count=400565, Max=28815, Min=461, Avg=1682.73, 90=2371, 99=3189, 99.9=6775, 99.99=19999] 
2023-05-04 21:20:45:820 40 sec: 3142436 operations; 80004.5 current ops/sec; est completion in 3 hours 31 minutes [READ: Count=400008, Max=53823, Min=504, Avg=2808.39, 90=4069, 99=5767, 99.9=9775, 99.99=34303] [UPDATE: Count=399840, Max=40575, Min=475, Avg=1695.43, 90=2393, 99=3279, 99.9=6831, 99.99=18783] 
2023-05-04 21:20:55:819 50 sec: 3942448 operations; 80001.2 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=399192, Max=11439, Min=518, Avg=2795.39, 90=4065, 99=5727, 99.9=8075, 99.99=9703] [UPDATE: Count=400652, Max=9167, Min=473, Avg=1693.91, 90=2391, 99=3251, 99.9=6531, 99.99=8015] 
2023-05-04 21:21:05:820 60 sec: 4742437 operations; 79998.9 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=400774, Max=51359, Min=523, Avg=2821.08, 90=4089, 99=5851, 99.9=11175, 99.99=29855] [UPDATE: Count=399614, Max=28959, Min=463, Avg=1702.51, 90=2403, 99=3305, 99.9=6895, 99.99=20207] 
2023-05-04 21:21:15:819 70 sec: 5542425 operations; 79998.8 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=399745, Max=64767, Min=515, Avg=2871.51, 90=4147, 99=6059, 99.9=22799, 99.99=41663] [UPDATE: Count=399962, Max=44799, Min=467, Avg=1722.01, 90=2423, 99=3361, 99.9=7215, 99.99=37183] 
2023-05-04 21:21:25:820 80 sec: 6342443 operations; 80001.8 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399222, Max=21263, Min=502, Avg=2793.17, 90=4057, 99=5747, 99.9=8023, 99.99=10919] [UPDATE: Count=400910, Max=17471, Min=476, Avg=1690.29, 90=2387, 99=3259, 99.9=6335, 99.99=8391] 
2023-05-04 21:21:35:820 90 sec: 7142428 operations; 79998.5 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=399976, Max=55199, Min=523, Avg=2855.73, 90=4147, 99=5963, 99.9=10951, 99.99=33727] [UPDATE: Count=400139, Max=28863, Min=470, Avg=1715.7, 90=2421, 99=3361, 99.9=6583, 99.99=17455] 
2023-05-04 21:21:45:819 100 sec: 7942422 operations; 79999.4 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=400296, Max=54431, Min=539, Avg=2815.22, 90=4071, 99=5839, 99.9=9455, 99.99=33439] [UPDATE: Count=399486, Max=28207, Min=479, Avg=1699.29, 90=2395, 99=3309, 99.9=6699, 99.99=20751] 
2023-05-04 21:21:55:820 110 sec: 8742420 operations; 79999.8 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400273, Max=12895, Min=509, Avg=2810.39, 90=4089, 99=5731, 99.9=8239, 99.99=10495] [UPDATE: Count=399067, Max=21103, Min=473, Avg=1706.17, 90=2407, 99=3325, 99.9=6839, 99.99=14551] 
2023-05-04 21:22:05:820 120 sec: 9542422 operations; 80000.2 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399060, Max=62591, Min=516, Avg=2858.05, 90=4147, 99=6011, 99.9=13959, 99.99=32399] [UPDATE: Count=401518, Max=45951, Min=468, Avg=1720.1, 90=2421, 99=3373, 99.9=6947, 99.99=22367] 
2023-05-04 21:22:15:820 130 sec: 10342439 operations; 80001.7 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=400314, Max=61439, Min=544, Avg=2831.21, 90=4099, 99=5875, 99.9=11455, 99.99=39391] [UPDATE: Count=400086, Max=46111, Min=453, Avg=1707.97, 90=2417, 99=3381, 99.9=6583, 99.99=17135] 
2023-05-04 21:22:25:820 140 sec: 11142435 operations; 79999.6 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=399965, Max=17231, Min=536, Avg=2853.3, 90=4163, 99=5927, 99.9=8171, 99.99=11327] [UPDATE: Count=399674, Max=15191, Min=453, Avg=1715.18, 90=2427, 99=3293, 99.9=6563, 99.99=8295] 
2023-05-04 21:22:35:819 150 sec: 11942059 operations; 79962.4 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400479, Max=53407, Min=502, Avg=2835.68, 90=4115, 99=5931, 99.9=12175, 99.99=32175] [UPDATE: Count=399810, Max=47487, Min=464, Avg=1709.61, 90=2413, 99=3373, 99.9=7195, 99.99=21839] 
2023-05-04 21:22:45:819 160 sec: 12742416 operations; 80035.7 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400675, Max=51519, Min=525, Avg=2848.99, 90=4155, 99=5955, 99.9=10559, 99.99=31519] [UPDATE: Count=399254, Max=27583, Min=471, Avg=1714.56, 90=2425, 99=3363, 99.9=6591, 99.99=18271] 
2023-05-04 21:22:55:822 170 sec: 13542173 operations; 79959.71 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=401227, Max=14007, Min=555, Avg=2935.67, 90=4359, 99=6067, 99.9=8175, 99.99=10135] [UPDATE: Count=398502, Max=15727, Min=474, Avg=1749.83, 90=2491, 99=3351, 99.9=6571, 99.99=8083] 
2023-05-04 21:23:05:820 180 sec: 14342213 operations; 80020 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=400553, Max=88575, Min=550, Avg=3439.21, 90=5143, 99=6835, 99.9=10903, 99.99=34719] [UPDATE: Count=399566, Max=46495, Min=433, Avg=1953.41, 90=2809, 99=3731, 99.9=6747, 99.99=20879] 
2023-05-04 21:23:15:819 190 sec: 15138209 operations; 79599.6 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=398026, Max=51327, Min=517, Avg=3865.89, 90=5723, 99=7279, 99.9=10071, 99.99=32079] [UPDATE: Count=397710, Max=27071, Min=464, Avg=2105.11, 90=2955, 99=3833, 99.9=6899, 99.99=19503] 
2023-05-04 21:23:25:819 200 sec: 15853294 operations; 71508.5 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=357108, Max=20207, Min=573, Avg=4517.23, 90=6183, 99=7615, 99.9=9663, 99.99=12247] [UPDATE: Count=357571, Max=16191, Min=489, Avg=2475.61, 90=3311, 99=4267, 99.9=6835, 99.99=8863] 
2023-05-04 21:23:35:820 210 sec: 16476134 operations; 62284 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=311726, Max=48255, Min=571, Avg=5117, 90=6363, 99=7667, 99.9=10119, 99.99=30079] [UPDATE: Count=311144, Max=27823, Min=514, Avg=2906.46, 90=3589, 99=4399, 99.9=7183, 99.99=19599] 
2023-05-04 21:23:45:820 220 sec: 17142367 operations; 66623.3 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=333380, Max=65727, Min=509, Avg=4767.63, 90=6203, 99=7551, 99.9=10247, 99.99=31615] [UPDATE: Count=333112, Max=43487, Min=453, Avg=2731.65, 90=3531, 99=4407, 99.9=6999, 99.99=20959] 
2023-05-04 21:23:55:820 230 sec: 17910008 operations; 76764.1 current ops/sec; est completion in 3 hours 30 minutes [READ: Count=383326, Max=28047, Min=529, Avg=4147.15, 90=5875, 99=7487, 99.9=10023, 99.99=20991] [UPDATE: Count=384719, Max=28127, Min=450, Avg=2364.59, 90=3319, 99=4259, 99.9=7347, 99.99=20591] 
2023-05-04 21:24:05:820 240 sec: 18723812 operations; 81380.4 current ops/sec; est completion in 3 hours 29 minutes [READ: Count=407460, Max=69823, Min=569, Avg=3930.11, 90=5659, 99=7587, 99.9=11399, 99.99=36991] [UPDATE: Count=406448, Max=32687, Min=470, Avg=2208.22, 90=3137, 99=4187, 99.9=7407, 99.99=20847] 
2023-05-04 21:24:15:819 250 sec: 19553264 operations; 82945.2 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=415214, Max=51519, Min=523, Avg=3859.54, 90=5511, 99=7247, 99.9=10199, 99.99=33887] [UPDATE: Count=412937, Max=30703, Min=476, Avg=2168.6, 90=3051, 99=3969, 99.9=7367, 99.99=22111] 
2023-05-04 21:24:25:819 260 sec: 20385774 operations; 83251 current ops/sec; est completion in 3 hours 28 minutes [READ: Count=416484, Max=31455, Min=543, Avg=3843.92, 90=5527, 99=7311, 99.9=10295, 99.99=20879] [UPDATE: Count=416973, Max=23935, Min=458, Avg=2152.94, 90=3031, 99=3981, 99.9=7123, 99.99=13167] 
2023-05-04 21:24:35:819 270 sec: 21220715 operations; 83494.1 current ops/sec; est completion in 3 hours 27 minutes [READ: Count=417950, Max=54719, Min=528, Avg=3833.9, 90=5527, 99=7319, 99.9=10423, 99.99=31967] [UPDATE: Count=417169, Max=28143, Min=475, Avg=2149.33, 90=3035, 99=3987, 99.9=7259, 99.99=20799] 
2023-05-04 21:24:45:819 280 sec: 22057541 operations; 83682.6 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=418265, Max=63871, Min=531, Avg=3831.3, 90=5527, 99=7375, 99.9=12615, 99.99=35327] [UPDATE: Count=418362, Max=39967, Min=458, Avg=2141.44, 90=3037, 99=4011, 99.9=7123, 99.99=19807] 
2023-05-04 21:24:55:819 290 sec: 22889411 operations; 83187 current ops/sec; est completion in 3 hours 26 minutes [READ: Count=415730, Max=14623, Min=534, Avg=3854.91, 90=5611, 99=7623, 99.9=9783, 99.99=11599] [UPDATE: Count=416028, Max=12503, Min=457, Avg=2153.56, 90=3055, 99=4011, 99.9=6927, 99.99=8447] 
2023-05-04 21:25:05:819 300 sec: 23722287 operations; 83287.6 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=416415, Max=54047, Min=564, Avg=3849.53, 90=5603, 99=7767, 99.9=14551, 99.99=32831] [UPDATE: Count=416591, Max=28639, Min=478, Avg=2150.85, 90=3057, 99=4159, 99.9=7451, 99.99=21455] 
2023-05-04 21:25:15:819 310 sec: 24563283 operations; 84099.6 current ops/sec; est completion in 3 hours 25 minutes [READ: Count=420053, Max=55359, Min=523, Avg=3814.84, 90=5579, 99=7607, 99.9=11255, 99.99=35839] [UPDATE: Count=421035, Max=29471, Min=477, Avg=2128.83, 90=3021, 99=4023, 99.9=7459, 99.99=22015] 
2023-05-04 21:25:25:819 320 sec: 25418719 operations; 85543.6 current ops/sec; est completion in 3 hours 24 minutes [READ: Count=427798, Max=21071, Min=526, Avg=3747.8, 90=5499, 99=7503, 99.9=9711, 99.99=13599] [UPDATE: Count=427448, Max=17119, Min=460, Avg=2094.09, 90=2953, 99=3975, 99.9=7007, 99.99=8847] 
2023-05-04 21:25:35:819 330 sec: 26268154 operations; 84943.5 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=425150, Max=51839, Min=514, Avg=3779.17, 90=5551, 99=7691, 99.9=11943, 99.99=30927] [UPDATE: Count=424396, Max=27711, Min=476, Avg=2102.33, 90=2965, 99=4011, 99.9=7375, 99.99=21663] 
2023-05-04 21:25:45:819 340 sec: 27118718 operations; 85056.4 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=425341, Max=84607, Min=546, Avg=3759.03, 90=5503, 99=7543, 99.9=14831, 99.99=34911] [UPDATE: Count=425265, Max=48703, Min=467, Avg=2097.22, 90=2969, 99=3977, 99.9=7127, 99.99=23247] 
2023-05-04 21:25:55:819 350 sec: 27941839 operations; 82312.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=411671, Max=17455, Min=546, Avg=3691.94, 90=5435, 99=7335, 99.9=9335, 99.99=11031] [UPDATE: Count=411253, Max=11767, Min=471, Avg=2073.82, 90=2945, 99=3921, 99.9=6871, 99.99=8207] 
2023-05-04 21:26:05:820 360 sec: 28742328 operations; 80048.9 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399794, Max=46271, Min=535, Avg=3485.64, 90=5143, 99=7015, 99.9=11119, 99.99=30031] [UPDATE: Count=400722, Max=47871, Min=472, Avg=1982.15, 90=2853, 99=3809, 99.9=7287, 99.99=22543] 
2023-05-04 21:26:15:819 370 sec: 29542292 operations; 79996.4 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399975, Max=57023, Min=485, Avg=3414.8, 90=5079, 99=6891, 99.9=10799, 99.99=39007] [UPDATE: Count=399977, Max=43199, Min=471, Avg=1951.39, 90=2827, 99=3815, 99.9=6783, 99.99=21951] 
2023-05-04 21:26:25:819 380 sec: 30342319 operations; 80002.7 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399927, Max=18703, Min=513, Avg=3390.04, 90=5055, 99=6899, 99.9=9111, 99.99=11639] [UPDATE: Count=400018, Max=16991, Min=466, Avg=1940.7, 90=2815, 99=3743, 99.9=7219, 99.99=9719] 
2023-05-04 21:26:35:820 390 sec: 31142316 operations; 79999.7 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399374, Max=50431, Min=554, Avg=3417.14, 90=5091, 99=6963, 99.9=10447, 99.99=29807] [UPDATE: Count=401002, Max=28383, Min=481, Avg=1951.93, 90=2825, 99=3789, 99.9=6999, 99.99=20095] 
2023-05-04 21:26:45:820 400 sec: 31942142 operations; 79982.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=400301, Max=50367, Min=526, Avg=3405, 90=5071, 99=6919, 99.9=9991, 99.99=33023] [UPDATE: Count=399751, Max=27663, Min=460, Avg=1946.13, 90=2823, 99=3797, 99.9=7127, 99.99=22047] 
2023-05-04 21:26:55:819 410 sec: 32742319 operations; 80017.7 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400472, Max=13175, Min=570, Avg=3411.33, 90=5087, 99=6867, 99.9=8863, 99.99=10607] [UPDATE: Count=399098, Max=9935, Min=456, Avg=1948.05, 90=2827, 99=3755, 99.9=6699, 99.99=8003] 
2023-05-04 21:27:05:820 420 sec: 33542323 operations; 80000.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400273, Max=50207, Min=532, Avg=3431.4, 90=5115, 99=7119, 99.9=12471, 99.99=31407] [UPDATE: Count=399946, Max=29247, Min=457, Avg=1957.34, 90=2845, 99=3867, 99.9=7195, 99.99=19679] 
2023-05-04 21:27:15:820 430 sec: 34342357 operations; 80003.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=400696, Max=55135, Min=517, Avg=3399.35, 90=5063, 99=6927, 99.9=9719, 99.99=33183] [UPDATE: Count=399493, Max=29103, Min=463, Avg=1943.03, 90=2829, 99=3815, 99.9=6723, 99.99=19535] 
2023-05-04 21:27:25:820 440 sec: 35142372 operations; 80001.5 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=401005, Max=26223, Min=547, Avg=3379.47, 90=5011, 99=6931, 99.9=9895, 99.99=21295] [UPDATE: Count=398820, Max=26911, Min=460, Avg=1939.41, 90=2817, 99=3761, 99.9=7563, 99.99=17919] 
2023-05-04 21:27:35:820 450 sec: 35942361 operations; 79998.9 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=399753, Max=52031, Min=525, Avg=3350.01, 90=4963, 99=6839, 99.9=10447, 99.99=31439] [UPDATE: Count=400287, Max=27295, Min=469, Avg=1925.29, 90=2799, 99=3753, 99.9=6943, 99.99=20831] 
2023-05-04 21:27:45:819 460 sec: 36742326 operations; 79996.5 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399805, Max=51711, Min=520, Avg=3396.12, 90=5035, 99=7103, 99.9=14255, 99.99=33311] [UPDATE: Count=400435, Max=28527, Min=451, Avg=1941.56, 90=2807, 99=3829, 99.9=7755, 99.99=24959] 
2023-05-04 21:27:55:819 470 sec: 37542354 operations; 80002.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399788, Max=13215, Min=525, Avg=3279.65, 90=4867, 99=6547, 99.9=8583, 99.99=10607] [UPDATE: Count=399460, Max=16655, Min=468, Avg=1901.88, 90=2781, 99=3727, 99.9=6743, 99.99=11375] 
2023-05-04 21:28:05:820 480 sec: 38342278 operations; 79992.4 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=400444, Max=51583, Min=551, Avg=3487.2, 90=5183, 99=7219, 99.9=13255, 99.99=31983] [UPDATE: Count=400197, Max=28383, Min=461, Avg=1980.92, 90=2871, 99=3891, 99.9=7331, 99.99=21311] 
2023-05-04 21:28:15:820 490 sec: 39142113 operations; 79983.5 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=399731, Max=52927, Min=526, Avg=3637.04, 90=5379, 99=7195, 99.9=10495, 99.99=33599] [UPDATE: Count=400032, Max=28175, Min=477, Avg=2030.52, 90=2913, 99=3855, 99.9=6951, 99.99=19919] 
2023-05-04 21:28:25:819 500 sec: 39941069 operations; 79895.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=398721, Max=22639, Min=551, Avg=3895.68, 90=5771, 99=7543, 99.9=9815, 99.99=12943] [UPDATE: Count=399889, Max=19343, Min=468, Avg=2105.94, 90=2967, 99=3835, 99.9=7175, 99.99=10247] 
2023-05-04 21:28:35:819 510 sec: 40726725 operations; 78565.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=392372, Max=50719, Min=570, Avg=4136.53, 90=6007, 99=7955, 99.9=11295, 99.99=32543] [UPDATE: Count=393304, Max=29967, Min=459, Avg=2204.5, 90=3063, 99=3999, 99.9=7031, 99.99=20015] 
2023-05-04 21:28:45:819 520 sec: 41459064 operations; 73233.9 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=366197, Max=52031, Min=602, Avg=4448.27, 90=6215, 99=8295, 99.9=11839, 99.99=29743] [UPDATE: Count=365939, Max=39263, Min=492, Avg=2376.79, 90=3223, 99=4303, 99.9=7115, 99.99=20991] 
2023-05-04 21:28:55:819 530 sec: 42121302 operations; 66223.8 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=332061, Max=14767, Min=892, Avg=4889.39, 90=6439, 99=8087, 99.9=10071, 99.99=11671] [UPDATE: Count=329963, Max=9735, Min=793, Avg=2652.31, 90=3497, 99=4423, 99.9=7211, 99.99=8263] 
2023-05-04 21:29:05:819 540 sec: 42730575 operations; 60927.3 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=303480, Max=48543, Min=504, Avg=5241.88, 90=6503, 99=8003, 99.9=11039, 99.99=32559] [UPDATE: Count=305819, Max=29711, Min=460, Avg=2970.25, 90=3613, 99=4471, 99.9=7695, 99.99=19103] 
2023-05-04 21:29:15:819 550 sec: 43355712 operations; 62513.7 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=312958, Max=54399, Min=520, Avg=5087.8, 90=6371, 99=7767, 99.9=10719, 99.99=35935] [UPDATE: Count=312376, Max=37663, Min=450, Avg=2905.41, 90=3587, 99=4443, 99.9=7459, 99.99=22239] 
2023-05-04 21:29:25:819 560 sec: 44024188 operations; 66847.6 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=333887, Max=17935, Min=503, Avg=4754.21, 90=6203, 99=7619, 99.9=10031, 99.99=13383] [UPDATE: Count=334485, Max=15679, Min=454, Avg=2724.17, 90=3541, 99=4367, 99.9=7311, 99.99=9551] 
2023-05-04 21:29:35:820 570 sec: 44715998 operations; 69181 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=345401, Max=56447, Min=533, Avg=4606.59, 90=6119, 99=7515, 99.9=10239, 99.99=33055] [UPDATE: Count=346191, Max=29535, Min=456, Avg=2623.6, 90=3481, 99=4271, 99.9=7611, 99.99=18879] 
2023-05-04 21:29:45:819 580 sec: 45432872 operations; 71687.4 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=358506, Max=48255, Min=504, Avg=4453.31, 90=6079, 99=7723, 99.9=12191, 99.99=29615] [UPDATE: Count=359004, Max=38079, Min=456, Avg=2515.07, 90=3405, 99=4307, 99.9=7287, 99.99=21231] 
2023-05-04 21:29:55:819 590 sec: 46181828 operations; 74895.6 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=374475, Max=14383, Min=528, Avg=4268.14, 90=5995, 99=7611, 99.9=9703, 99.99=11359] [UPDATE: Count=374406, Max=9815, Min=457, Avg=2404.81, 90=3323, 99=4255, 99.9=7007, 99.99=8231] 
2023-05-04 21:30:05:819 600 sec: 46940243 operations; 75841.5 current ops/sec; est completion in 3 hours 23 minutes [READ: Count=379435, Max=53343, Min=526, Avg=4215.99, 90=5959, 99=7783, 99.9=11871, 99.99=31135] [UPDATE: Count=379143, Max=30383, Min=448, Avg=2372.28, 90=3299, 99=4295, 99.9=8123, 99.99=23103] 
2023-05-04 21:30:15:820 610 sec: 47720826 operations; 78058.3 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=390734, Max=52767, Min=527, Avg=4116.56, 90=5887, 99=7899, 99.9=11783, 99.99=34271] [UPDATE: Count=389861, Max=36991, Min=473, Avg=2283.59, 90=3215, 99=4199, 99.9=7243, 99.99=19215] 
2023-05-04 21:30:25:819 620 sec: 48509027 operations; 78820.1 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=395143, Max=30079, Min=531, Avg=4077.63, 90=5883, 99=8167, 99.9=13735, 99.99=19023] [UPDATE: Count=393072, Max=16415, Min=471, Avg=2258.28, 90=3203, 99=4235, 99.9=7395, 99.99=9407] 
2023-05-04 21:30:35:820 630 sec: 49302275 operations; 79324.8 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=396659, Max=59199, Min=534, Avg=4044.23, 90=5831, 99=7807, 99.9=10919, 99.99=33567] [UPDATE: Count=396563, Max=35999, Min=459, Avg=2255.94, 90=3193, 99=4187, 99.9=7539, 99.99=19263] 
2023-05-04 21:30:45:820 640 sec: 50100615 operations; 79834 current ops/sec; est completion in 3 hours 22 minutes [READ: Count=399353, Max=54335, Min=514, Avg=4020.9, 90=5867, 99=8043, 99.9=11719, 99.99=33343] [UPDATE: Count=398288, Max=27727, Min=470, Avg=2241.25, 90=3195, 99=4247, 99.9=7635, 99.99=21071] 
2023-05-04 21:30:55:819 650 sec: 50909701 operations; 80908.6 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=405257, Max=29503, Min=533, Avg=3966.86, 90=5843, 99=7911, 99.9=10367, 99.99=20143] [UPDATE: Count=404558, Max=25215, Min=468, Avg=2203.58, 90=3137, 99=4187, 99.9=6847, 99.99=10599] 
2023-05-04 21:31:05:819 660 sec: 51728205 operations; 81850.4 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=408944, Max=47935, Min=563, Avg=3937.79, 90=5799, 99=8063, 99.9=12807, 99.99=34815] [UPDATE: Count=409474, Max=28991, Min=460, Avg=2169.62, 90=3061, 99=4219, 99.9=7491, 99.99=19167] 
2023-05-04 21:31:15:819 670 sec: 52552367 operations; 82416.2 current ops/sec; est completion in 3 hours 21 minutes [READ: Count=412022, Max=68927, Min=541, Avg=3920.38, 90=5791, 99=8183, 99.9=15879, 99.99=38175] [UPDATE: Count=412444, Max=38783, Min=466, Avg=2142.94, 90=3015, 99=4111, 99.9=7435, 99.99=21807] 
2023-05-04 21:31:25:819 680 sec: 53381694 operations; 82932.7 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=415335, Max=19535, Min=542, Avg=3885.91, 90=5755, 99=8015, 99.9=10351, 99.99=13311] [UPDATE: Count=413586, Max=16687, Min=466, Avg=2137.29, 90=3017, 99=4073, 99.9=7119, 99.99=9775] 
2023-05-04 21:31:35:819 690 sec: 54209007 operations; 82731.3 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=413636, Max=50559, Min=534, Avg=3900.14, 90=5791, 99=8175, 99.9=12071, 99.99=33663] [UPDATE: Count=413813, Max=28799, Min=470, Avg=2140.62, 90=3029, 99=4159, 99.9=7287, 99.99=19567] 
2023-05-04 21:31:45:819 700 sec: 55035913 operations; 82690.6 current ops/sec; est completion in 3 hours 20 minutes [READ: Count=412895, Max=54079, Min=530, Avg=3909.82, 90=5819, 99=8319, 99.9=18591, 99.99=35263] [UPDATE: Count=414064, Max=27967, Min=469, Avg=2136.23, 90=3035, 99=4235, 99.9=7271, 99.99=19119] 
2023-05-04 21:31:55:820 710 sec: 55869755 operations; 83384.2 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=416635, Max=14719, Min=543, Avg=3865.06, 90=5751, 99=7991, 99.9=10279, 99.99=12095] [UPDATE: Count=417238, Max=9655, Min=482, Avg=2129.46, 90=3021, 99=4099, 99.9=6959, 99.99=8391] 
2023-05-04 21:32:05:820 720 sec: 56698596 operations; 82884.1 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=414389, Max=73599, Min=553, Avg=3896.21, 90=5783, 99=8479, 99.9=18559, 99.99=38751] [UPDATE: Count=414507, Max=30143, Min=469, Avg=2133.27, 90=3025, 99=4299, 99.9=7767, 99.99=21455] 
2023-05-04 21:32:15:819 730 sec: 57526802 operations; 82820.6 current ops/sec; est completion in 3 hours 19 minutes [READ: Count=413585, Max=54687, Min=512, Avg=3900.74, 90=5827, 99=8351, 99.9=12463, 99.99=35871] [UPDATE: Count=414715, Max=27167, Min=453, Avg=2135.62, 90=3035, 99=4239, 99.9=7411, 99.99=21055] 
2023-05-04 21:32:25:819 740 sec: 58360623 operations; 83382.1 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=417016, Max=19855, Min=517, Avg=3863.96, 90=5763, 99=8007, 99.9=10239, 99.99=14079] [UPDATE: Count=415832, Max=23407, Min=464, Avg=2131.89, 90=3029, 99=4147, 99.9=7195, 99.99=14407] 
2023-05-04 21:32:35:819 750 sec: 59191041 operations; 83041.8 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=415273, Max=57823, Min=568, Avg=3880.88, 90=5751, 99=8075, 99.9=16767, 99.99=38687] [UPDATE: Count=415979, Max=28735, Min=473, Avg=2134.77, 90=3029, 99=4187, 99.9=7171, 99.99=21855] 
2023-05-04 21:32:45:819 760 sec: 60019764 operations; 82872.3 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=414523, Max=53471, Min=541, Avg=3893.6, 90=5775, 99=8167, 99.9=12735, 99.99=34655] [UPDATE: Count=414021, Max=29327, Min=453, Avg=2134.98, 90=3021, 99=4171, 99.9=7199, 99.99=21791] 
2023-05-04 21:32:55:819 770 sec: 60853443 operations; 83367.9 current ops/sec; est completion in 3 hours 18 minutes [READ: Count=416926, Max=15847, Min=554, Avg=3867.28, 90=5763, 99=8079, 99.9=10607, 99.99=13119] [UPDATE: Count=416237, Max=20031, Min=475, Avg=2129.52, 90=3019, 99=4081, 99.9=7543, 99.99=12015] 
2023-05-04 21:33:05:821 780 sec: 61678813 operations; 82520.5 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=412895, Max=47871, Min=537, Avg=3909.76, 90=5823, 99=8383, 99.9=15831, 99.99=32511] [UPDATE: Count=413353, Max=30175, Min=479, Avg=2141.24, 90=3035, 99=4255, 99.9=7647, 99.99=20991] 
2023-05-04 21:33:15:819 790 sec: 62503760 operations; 82511.2 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=412681, Max=52991, Min=522, Avg=3916.78, 90=5803, 99=8155, 99.9=11887, 99.99=34111] [UPDATE: Count=412149, Max=28591, Min=474, Avg=2140.56, 90=3031, 99=4073, 99.9=7435, 99.99=19647] 
2023-05-04 21:33:25:820 800 sec: 63317783 operations; 81402.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=407394, Max=18735, Min=525, Avg=3974.84, 90=5859, 99=7979, 99.9=10399, 99.99=13471] [UPDATE: Count=406569, Max=16151, Min=469, Avg=2162.95, 90=3053, 99=4055, 99.9=7019, 99.99=8943] 
2023-05-04 21:33:35:819 810 sec: 64119816 operations; 80203.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=401336, Max=43775, Min=538, Avg=4052.52, 90=5975, 99=8207, 99.9=12711, 99.99=30767] [UPDATE: Count=400517, Max=27727, Min=460, Avg=2177.09, 90=3075, 99=4147, 99.9=7539, 99.99=19823] 
2023-05-04 21:33:45:819 820 sec: 64902793 operations; 78297.7 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=391978, Max=61727, Min=540, Avg=4176.6, 90=6147, 99=8303, 99.9=12199, 99.99=32495] [UPDATE: Count=390948, Max=39551, Min=477, Avg=2203.98, 90=3083, 99=4049, 99.9=7479, 99.99=22815] 
2023-05-04 21:33:55:819 830 sec: 65666961 operations; 76416.8 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=381999, Max=23199, Min=603, Avg=4291.75, 90=6271, 99=8575, 99.9=11743, 99.99=16831] [UPDATE: Count=382037, Max=11879, Min=484, Avg=2248.87, 90=3141, 99=4295, 99.9=7219, 99.99=8679] 
2023-05-04 21:34:05:819 840 sec: 66423191 operations; 75623 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=377590, Max=54943, Min=571, Avg=4317.29, 90=6239, 99=8623, 99.9=13759, 99.99=34975] [UPDATE: Count=378754, Max=35519, Min=466, Avg=2294.45, 90=3193, 99=4359, 99.9=7595, 99.99=20335] 
2023-05-04 21:34:15:819 850 sec: 67157251 operations; 73406 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=367316, Max=53727, Min=554, Avg=4432.53, 90=6219, 99=8279, 99.9=11479, 99.99=29087] [UPDATE: Count=366604, Max=27487, Min=460, Avg=2375.11, 90=3231, 99=4299, 99.9=7427, 99.99=20783] 
2023-05-04 21:34:25:820 860 sec: 67858091 operations; 70084 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=350352, Max=21663, Min=919, Avg=4648.63, 90=6303, 99=8179, 99.9=11351, 99.99=17455] [UPDATE: Count=349691, Max=28623, Min=623, Avg=2487.47, 90=3291, 99=4427, 99.9=7531, 99.99=16223] 
2023-05-04 21:34:35:819 870 sec: 68528305 operations; 67021.4 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=335592, Max=50495, Min=903, Avg=4790.75, 90=6319, 99=8127, 99.9=13015, 99.99=31167] [UPDATE: Count=335309, Max=29919, Min=546, Avg=2659.45, 90=3451, 99=4431, 99.9=7543, 99.99=21679] 
2023-05-04 21:34:45:819 880 sec: 69188611 operations; 66030.6 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=329983, Max=49439, Min=528, Avg=4846.96, 90=6279, 99=7839, 99.9=11583, 99.99=30319] [UPDATE: Count=329847, Max=32831, Min=452, Avg=2728.05, 90=3483, 99=4375, 99.9=7991, 99.99=22975] 
2023-05-04 21:34:55:819 890 sec: 69871889 operations; 68327.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=341224, Max=28543, Min=545, Avg=4682.38, 90=6235, 99=7823, 99.9=10271, 99.99=21167] [UPDATE: Count=342696, Max=25775, Min=463, Avg=2629.92, 90=3479, 99=4367, 99.9=7211, 99.99=12063] 
2023-05-04 21:35:05:819 900 sec: 70611056 operations; 73916.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=369476, Max=51295, Min=528, Avg=4347.25, 90=6059, 99=8011, 99.9=12391, 99.99=34815] [UPDATE: Count=369937, Max=31327, Min=463, Avg=2414.53, 90=3303, 99=4443, 99.9=7755, 99.99=22447] 
2023-05-04 21:35:15:819 910 sec: 71371064 operations; 76000.8 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=380785, Max=50463, Min=513, Avg=4237.97, 90=5955, 99=7867, 99.9=11391, 99.99=33951] [UPDATE: Count=379104, Max=37439, Min=474, Avg=2333.65, 90=3197, 99=4187, 99.9=7715, 99.99=20735] 
2023-05-04 21:35:25:819 920 sec: 72145577 operations; 77451.3 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=387024, Max=22783, Min=510, Avg=4176.72, 90=5947, 99=8043, 99.9=11103, 99.99=16863] [UPDATE: Count=387648, Max=16103, Min=480, Avg=2278.32, 90=3149, 99=4195, 99.9=7195, 99.99=10159] 
2023-05-04 21:35:35:820 930 sec: 72929874 operations; 78429.7 current ops/sec; est completion in 3 hours 17 minutes [READ: Count=392191, Max=50207, Min=532, Avg=4131.29, 90=5987, 99=8543, 99.9=13743, 99.99=34015] [UPDATE: Count=392234, Max=28815, Min=492, Avg=2239.39, 90=3127, 99=4279, 99.9=7607, 99.99=21743] 
2023-05-04 21:35:45:819 940 sec: 73716920 operations; 78704.6 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=392945, Max=57567, Min=523, Avg=4130.63, 90=5971, 99=9151, 99.9=19983, 99.99=34463] [UPDATE: Count=394192, Max=32863, Min=467, Avg=2221.96, 90=3111, 99=4327, 99.9=7687, 99.99=21023] 
2023-05-04 21:35:55:820 950 sec: 74527491 operations; 81057.1 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=405599, Max=15159, Min=567, Avg=3988.73, 90=5823, 99=7907, 99.9=10087, 99.99=11919] [UPDATE: Count=404614, Max=9919, Min=450, Avg=2175.31, 90=3041, 99=4085, 99.9=7063, 99.99=8423] 
2023-05-04 21:36:05:820 960 sec: 75335396 operations; 80790.5 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=404382, Max=63967, Min=491, Avg=4010.31, 90=5831, 99=8131, 99.9=15687, 99.99=47039] [UPDATE: Count=403824, Max=37471, Min=474, Avg=2174.65, 90=3033, 99=4119, 99.9=7619, 99.99=21167] 
2023-05-04 21:36:15:819 970 sec: 76145117 operations; 80972.1 current ops/sec; est completion in 3 hours 16 minutes [READ: Count=405638, Max=63679, Min=549, Avg=3996.94, 90=5827, 99=8087, 99.9=12047, 99.99=34527] [UPDATE: Count=403476, Max=28335, Min=461, Avg=2172.75, 90=3035, 99=4085, 99.9=7575, 99.99=21279] 
2023-05-04 21:36:25:819 980 sec: 76951329 operations; 80621.2 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=402492, Max=76927, Min=540, Avg=4011.56, 90=5803, 99=7899, 99.9=11199, 99.99=72575] [UPDATE: Count=403932, Max=72383, Min=487, Avg=2187.69, 90=3041, 99=4103, 99.9=7195, 99.99=70079] 
2023-05-04 21:36:35:820 990 sec: 77754947 operations; 80361.8 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=402723, Max=56159, Min=555, Avg=4024.24, 90=5887, 99=8215, 99.9=12215, 99.99=32575] [UPDATE: Count=400994, Max=40479, Min=476, Avg=2190.42, 90=3063, 99=4263, 99.9=7199, 99.99=22095] 
2023-05-04 21:36:45:820 1000 sec: 78553429 operations; 79848.2 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=399417, Max=56895, Min=590, Avg=4060.1, 90=5967, 99=8415, 99.9=12407, 99.99=33567] [UPDATE: Count=399252, Max=29023, Min=484, Avg=2197.92, 90=3087, 99=4303, 99.9=7139, 99.99=20623] 
2023-05-04 21:36:55:819 1010 sec: 79357152 operations; 80372.3 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=401389, Max=23551, Min=541, Avg=4026.12, 90=5887, 99=8179, 99.9=11631, 99.99=18639] [UPDATE: Count=402197, Max=21167, Min=476, Avg=2193.73, 90=3073, 99=4303, 99.9=7283, 99.99=15591] 
2023-05-04 21:37:05:819 1020 sec: 80160513 operations; 80336.1 current ops/sec; est completion in 3 hours 15 minutes [READ: Count=401047, Max=52383, Min=575, Avg=4033.27, 90=5919, 99=8399, 99.9=13135, 99.99=36543] [UPDATE: Count=402308, Max=28975, Min=483, Avg=2190.21, 90=3059, 99=4315, 99.9=7175, 99.99=22319] 
2023-05-04 21:37:15:820 1030 sec: 80962632 operations; 80211.9 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=401228, Max=63295, Min=573, Avg=4045.38, 90=5931, 99=8567, 99.9=18175, 99.99=38495] [UPDATE: Count=400185, Max=31935, Min=479, Avg=2188.44, 90=3055, 99=4327, 99.9=7559, 99.99=24047] 
2023-05-04 21:37:25:819 1040 sec: 81772963 operations; 81033.1 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=405157, Max=29663, Min=599, Avg=3987.81, 90=5859, 99=8155, 99.9=11143, 99.99=21311] [UPDATE: Count=405826, Max=28031, Min=442, Avg=2175.28, 90=3055, 99=4187, 99.9=7183, 99.99=11343] 
2023-05-04 21:37:35:822 1050 sec: 82579382 operations; 80617.71 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=403029, Max=57151, Min=522, Avg=4012.93, 90=5879, 99=8295, 99.9=14047, 99.99=34559] [UPDATE: Count=403679, Max=33055, Min=443, Avg=2185.55, 90=3069, 99=4259, 99.9=7211, 99.99=22751] 
2023-05-04 21:37:45:819 1060 sec: 83381020 operations; 80187.86 current ops/sec; est completion in 3 hours 14 minutes [READ: Count=401019, Max=49791, Min=530, Avg=4048, 90=5915, 99=9511, 99.9=20319, 99.99=33151] [UPDATE: Count=400089, Max=27711, Min=472, Avg=2187.16, 90=3081, 99=4675, 99.9=7987, 99.99=20159] 
2023-05-04 21:37:55:819 1070 sec: 84192292 operations; 81127.2 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=405625, Max=24319, Min=571, Avg=3985.59, 90=5851, 99=8407, 99.9=11591, 99.99=17695] [UPDATE: Count=405891, Max=21071, Min=457, Avg=2171.96, 90=3057, 99=4315, 99.9=7043, 99.99=9231] 
2023-05-04 21:38:05:819 1080 sec: 85000990 operations; 80869.8 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=404448, Max=53215, Min=570, Avg=4008.41, 90=5887, 99=8815, 99.9=16799, 99.99=33599] [UPDATE: Count=404404, Max=27311, Min=458, Avg=2170.71, 90=3045, 99=4423, 99.9=7587, 99.99=19519] 
2023-05-04 21:38:15:819 1090 sec: 85802337 operations; 80134.7 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=401113, Max=181887, Min=528, Avg=4036.26, 90=5787, 99=8319, 99.9=24415, 99.99=177791] [UPDATE: Count=400215, Max=178303, Min=480, Avg=2198.1, 90=3035, 99=4255, 99.9=7499, 99.99=173183] 
2023-05-04 21:38:25:819 1100 sec: 86611813 operations; 80947.6 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=405258, Max=20095, Min=520, Avg=4000.39, 90=5863, 99=8263, 99.9=10823, 99.99=15191] [UPDATE: Count=404038, Max=17103, Min=499, Avg=2171.18, 90=3047, 99=4255, 99.9=7007, 99.99=9463] 
2023-05-04 21:38:35:819 1110 sec: 87416087 operations; 80427.4 current ops/sec; est completion in 3 hours 13 minutes [READ: Count=401840, Max=70463, Min=538, Avg=4032.85, 90=5843, 99=8279, 99.9=19903, 99.99=36383] [UPDATE: Count=402519, Max=28687, Min=476, Avg=2182.29, 90=3071, 99=4227, 99.9=6951, 99.99=20143] 
2023-05-04 21:38:45:819 1120 sec: 88213021 operations; 79693.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=398078, Max=64159, Min=514, Avg=4064.53, 90=5907, 99=8247, 99.9=14495, 99.99=37407] [UPDATE: Count=398818, Max=39103, Min=470, Avg=2208.18, 90=3103, 99=4215, 99.9=7871, 99.99=23007] 
2023-05-04 21:38:55:819 1130 sec: 89004021 operations; 79100 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=395241, Max=13759, Min=550, Avg=4108.67, 90=6027, 99=8019, 99.9=10135, 99.99=11847] [UPDATE: Count=395604, Max=9479, Min=461, Avg=2210.73, 90=3091, 99=4123, 99.9=7067, 99.99=8383] 
2023-05-04 21:39:05:819 1140 sec: 89778004 operations; 77398.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=386438, Max=49567, Min=558, Avg=4233.7, 90=6235, 99=8695, 99.9=13863, 99.99=30447] [UPDATE: Count=387632, Max=29823, Min=470, Avg=2226.11, 90=3087, 99=4259, 99.9=7815, 99.99=21471] 
2023-05-04 21:39:15:819 1150 sec: 90535393 operations; 75738.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=378537, Max=59967, Min=555, Avg=4344.69, 90=6387, 99=9135, 99.9=15295, 99.99=36191] [UPDATE: Count=378830, Max=35583, Min=470, Avg=2255.04, 90=3117, 99=4439, 99.9=7415, 99.99=22639] 
2023-05-04 21:39:25:819 1160 sec: 91281130 operations; 74573.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372766, Max=21775, Min=533, Avg=4417.06, 90=6491, 99=9231, 99.9=13111, 99.99=18207] [UPDATE: Count=373176, Max=16399, Min=460, Avg=2285.27, 90=3159, 99=4487, 99.9=6935, 99.99=9335] 
2023-05-04 21:39:35:819 1170 sec: 92028158 operations; 74702.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373551, Max=59807, Min=582, Avg=4379.81, 90=6327, 99=9295, 99.9=16799, 99.99=34495] [UPDATE: Count=373287, Max=27951, Min=481, Avg=2310.11, 90=3185, 99=4611, 99.9=7283, 99.99=20015] 
2023-05-04 21:39:45:819 1180 sec: 92772604 operations; 74444.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372451, Max=60927, Min=548, Avg=4377.92, 90=6207, 99=8583, 99.9=13919, 99.99=34975] [UPDATE: Count=371905, Max=42207, Min=477, Avg=2334.56, 90=3189, 99=4447, 99.9=7187, 99.99=16543] 
2023-05-04 21:39:55:819 1190 sec: 93493908 operations; 72130.4 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=360581, Max=22431, Min=525, Avg=4525.91, 90=6315, 99=8551, 99.9=11519, 99.99=15903] [UPDATE: Count=360654, Max=13559, Min=467, Avg=2403.43, 90=3241, 99=4399, 99.9=7059, 99.99=9111] 
2023-05-04 21:40:05:819 1200 sec: 94191818 operations; 69791 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=348534, Max=55231, Min=840, Avg=4684.83, 90=6467, 99=8631, 99.9=12391, 99.99=34463] [UPDATE: Count=349344, Max=46495, Min=686, Avg=2479.62, 90=3335, 99=4479, 99.9=7451, 99.99=20287] 
2023-05-04 21:40:15:819 1210 sec: 94846227 operations; 65440.9 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=327070, Max=49759, Min=504, Avg=4915.75, 90=6431, 99=8167, 99.9=11247, 99.99=33535] [UPDATE: Count=327235, Max=35615, Min=465, Avg=2723.57, 90=3559, 99=4523, 99.9=7243, 99.99=22703] 
2023-05-04 21:40:25:819 1220 sec: 95491313 operations; 64508.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=322417, Max=19535, Min=500, Avg=4962.24, 90=6403, 99=7959, 99.9=9999, 99.99=13535] [UPDATE: Count=322648, Max=16287, Min=453, Avg=2786.62, 90=3589, 99=4527, 99.9=7035, 99.99=10527] 
2023-05-04 21:40:35:819 1230 sec: 96149071 operations; 65775.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=329236, Max=47263, Min=499, Avg=4873.75, 90=6415, 99=8095, 99.9=10735, 99.99=31535] [UPDATE: Count=328623, Max=29919, Min=447, Avg=2722.23, 90=3579, 99=4519, 99.9=7411, 99.99=21391] 
2023-05-04 21:40:45:819 1240 sec: 96831529 operations; 68245.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=342182, Max=47327, Min=530, Avg=4694.12, 90=6307, 99=8207, 99.9=12447, 99.99=32415] [UPDATE: Count=340309, Max=31375, Min=463, Avg=2623.48, 90=3511, 99=4571, 99.9=7547, 99.99=21967] 
2023-05-04 21:40:55:819 1250 sec: 97530745 operations; 69921.6 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=349246, Max=29343, Min=530, Avg=4588.93, 90=6207, 99=8083, 99.9=11295, 99.99=15911] [UPDATE: Count=349959, Max=15143, Min=431, Avg=2561.01, 90=3439, 99=4367, 99.9=7347, 99.99=11815] 
2023-05-04 21:41:05:819 1260 sec: 98240272 operations; 70952.7 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=354183, Max=55583, Min=500, Avg=4527.39, 90=6155, 99=8183, 99.9=13951, 99.99=34655] [UPDATE: Count=355643, Max=30575, Min=434, Avg=2519.78, 90=3403, 99=4387, 99.9=7535, 99.99=17423] 
2023-05-04 21:41:15:819 1270 sec: 98967990 operations; 72771.8 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=363744, Max=41343, Min=502, Avg=4421.72, 90=6115, 99=7967, 99.9=10983, 99.99=31295] [UPDATE: Count=363988, Max=30879, Min=457, Avg=2446.43, 90=3341, 99=4367, 99.9=7131, 99.99=19247] 
2023-05-04 21:41:25:819 1280 sec: 99712625 operations; 74463.5 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=372023, Max=19695, Min=563, Avg=4335.27, 90=6071, 99=7963, 99.9=10239, 99.99=13327] [UPDATE: Count=372380, Max=16247, Min=463, Avg=2378.14, 90=3245, 99=4255, 99.9=7103, 99.99=9135] 
2023-05-04 21:41:35:819 1290 sec: 100461255 operations; 74863 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373772, Max=54911, Min=517, Avg=4315.73, 90=6071, 99=8119, 99.9=12087, 99.99=33119] [UPDATE: Count=374864, Max=30223, Min=451, Avg=2362.97, 90=3233, 99=4295, 99.9=7363, 99.99=22463] 
2023-05-04 21:41:45:819 1300 sec: 101208826 operations; 74757.1 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374303, Max=51359, Min=536, Avg=4326, 90=6103, 99=8163, 99.9=15967, 99.99=31135] [UPDATE: Count=373338, Max=27983, Min=463, Avg=2356.46, 90=3233, 99=4339, 99.9=7335, 99.99=19903] 
2023-05-04 21:41:55:819 1310 sec: 101957859 operations; 74903.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374367, Max=14823, Min=536, Avg=4318.57, 90=6131, 99=8135, 99.9=10159, 99.99=11903] [UPDATE: Count=374569, Max=9423, Min=465, Avg=2354.73, 90=3237, 99=4371, 99.9=6955, 99.99=8107] 
2023-05-04 21:42:05:819 1320 sec: 102705302 operations; 74744.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=373853, Max=67391, Min=519, Avg=4324.97, 90=6127, 99=8179, 99.9=13311, 99.99=36959] [UPDATE: Count=373016, Max=42495, Min=456, Avg=2364.41, 90=3253, 99=4407, 99.9=7715, 99.99=22383] 
2023-05-04 21:42:15:819 1330 sec: 103454845 operations; 74954.3 current ops/sec; est completion in 3 hours 12 minutes [READ: Count=374991, Max=49055, Min=535, Avg=4315.41, 90=6131, 99=8391, 99.9=15071, 99.99=31583] [UPDATE: Count=375170, Max=30751, Min=457, Avg=2347.36, 90=3233, 99=4371, 99.9=7551, 99.99=22575] 
2023-05-04 21:42:25:819 1340 sec: 104206440 operations; 75159.5 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=376473, Max=21535, Min=517, Avg=4309.15, 90=6163, 99=8431, 99.9=11959, 99.99=17407] [UPDATE: Count=375090, Max=15271, Min=454, Avg=2336.82, 90=3231, 99=4383, 99.9=7287, 99.99=9095] 
2023-05-04 21:42:35:819 1350 sec: 104965301 operations; 75886.1 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=379265, Max=47071, Min=559, Avg=4265.93, 90=6083, 99=8215, 99.9=12223, 99.99=34175] [UPDATE: Count=379691, Max=29087, Min=457, Avg=2320.81, 90=3207, 99=4287, 99.9=7283, 99.99=18399] 
2023-05-04 21:42:45:819 1360 sec: 105724257 operations; 75895.6 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=379371, Max=48671, Min=524, Avg=4281.42, 90=6163, 99=9007, 99.9=19183, 99.99=32367] [UPDATE: Count=379579, Max=30895, Min=464, Avg=2304.08, 90=3211, 99=4583, 99.9=7391, 99.99=19551] 
2023-05-04 21:42:55:819 1370 sec: 106484435 operations; 76017.8 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=380428, Max=29823, Min=533, Avg=4274.03, 90=6227, 99=8951, 99.9=12583, 99.99=22159] [UPDATE: Count=379848, Max=29471, Min=482, Avg=2298.25, 90=3207, 99=4511, 99.9=7543, 99.99=17727] 
2023-05-04 21:43:05:819 1380 sec: 107250193 operations; 76575.8 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=382719, Max=45951, Min=542, Avg=4239.35, 90=6143, 99=8815, 99.9=16783, 99.99=32319] [UPDATE: Count=382961, Max=27519, Min=472, Avg=2287.62, 90=3199, 99=4559, 99.9=7439, 99.99=19279] 
2023-05-04 21:43:15:819 1390 sec: 108019204 operations; 76901.1 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384357, Max=56895, Min=597, Avg=4215.89, 90=6051, 99=8375, 99.9=18175, 99.99=37823] [UPDATE: Count=384672, Max=46975, Min=464, Avg=2284, 90=3181, 99=4375, 99.9=7407, 99.99=19599] 
2023-05-04 21:43:25:819 1400 sec: 108789999 operations; 77079.5 current ops/sec; est completion in 3 hours 11 minutes [READ: Count=384873, Max=23247, Min=540, Avg=4204.65, 90=6067, 99=8311, 99.9=10823, 99.99=14583] [UPDATE: Count=385786, Max=17247, Min=454, Avg=2281.57, 90=3185, 99=4327, 99.9=7123, 99.99=9679] 
2023-05-04 21:43:35:819 1410 sec: 109559972 operations; 76997.3 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=385371, Max=52703, Min=564, Avg=4212.03, 90=6059, 99=8295, 99.9=16383, 99.99=33663] [UPDATE: Count=384710, Max=33119, Min=475, Avg=2276.85, 90=3181, 99=4359, 99.9=7191, 99.99=18399] 
2023-05-04 21:43:45:819 1420 sec: 110329368 operations; 76939.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=384399, Max=45087, Min=543, Avg=4214.87, 90=6071, 99=8447, 99.9=15511, 99.99=33471] [UPDATE: Count=385013, Max=29711, Min=461, Avg=2282.35, 90=3185, 99=4383, 99.9=7471, 99.99=22591] 
2023-05-04 21:43:55:819 1430 sec: 111100684 operations; 77131.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=386006, Max=17391, Min=536, Avg=4192.16, 90=6059, 99=8179, 99.9=10647, 99.99=13239] [UPDATE: Count=385246, Max=9855, Min=466, Avg=2285.56, 90=3201, 99=4259, 99.9=7175, 99.99=8511] 
2023-05-04 21:44:05:819 1440 sec: 111858558 operations; 75787.4 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=378064, Max=46655, Min=563, Avg=4268.68, 90=6107, 99=8543, 99.9=19887, 99.99=39647] [UPDATE: Count=379853, Max=38975, Min=486, Avg=2330.26, 90=3237, 99=4407, 99.9=8727, 99.99=37119] 
2023-05-04 21:44:15:819 1450 sec: 112609965 operations; 75140.7 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=375521, Max=46943, Min=524, Avg=4300.17, 90=6107, 99=8131, 99.9=11727, 99.99=32511] [UPDATE: Count=375847, Max=28399, Min=470, Avg=2351.86, 90=3263, 99=4403, 99.9=7263, 99.99=19695] 
2023-05-04 21:44:25:819 1460 sec: 113350617 operations; 74065.2 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=369846, Max=19855, Min=540, Avg=4376.38, 90=6211, 99=8223, 99.9=10455, 99.99=13711] [UPDATE: Count=370736, Max=15999, Min=475, Avg=2374.18, 90=3281, 99=4371, 99.9=7107, 99.99=8879] 
2023-05-04 21:44:35:819 1470 sec: 114077550 operations; 72693.3 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=363660, Max=54207, Min=556, Avg=4489.22, 90=6351, 99=8527, 99.9=14615, 99.99=34239] [UPDATE: Count=363291, Max=29231, Min=453, Avg=2384.89, 90=3275, 99=4267, 99.9=7299, 99.99=20447] 
2023-05-04 21:44:45:819 1480 sec: 114801750 operations; 72420 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=362159, Max=56095, Min=548, Avg=4494.06, 90=6355, 99=8935, 99.9=15071, 99.99=36959] [UPDATE: Count=362082, Max=49247, Min=481, Avg=2406.79, 90=3301, 99=4611, 99.9=7299, 99.99=22175] 
2023-05-04 21:44:55:819 1490 sec: 115520069 operations; 71831.9 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=359636, Max=20447, Min=540, Avg=4542.89, 90=6535, 99=9471, 99.9=12751, 99.99=16879] [UPDATE: Count=358590, Max=9223, Min=475, Avg=2412.2, 90=3333, 99=4731, 99.9=6755, 99.99=8151] 
2023-05-04 21:45:05:819 1500 sec: 116240575 operations; 72050.6 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=359945, Max=51615, Min=561, Avg=4517.62, 90=6391, 99=9255, 99.9=15879, 99.99=34719] [UPDATE: Count=359878, Max=40959, Min=472, Avg=2427.21, 90=3297, 99=4827, 99.9=8191, 99.99=24639] 
2023-05-04 21:45:15:821 1510 sec: 116949594 operations; 70887.72 current ops/sec; est completion in 3 hours 10 minutes [READ: Count=354875, Max=51871, Min=542, Avg=4574.29, 90=6375, 99=8983, 99.9=17055, 99.99=35231] [UPDATE: Count=354976, Max=34143, Min=481, Avg=2465.76, 90=3355, 99=4671, 99.9=7255, 99.99=20671] 
2023-05-04 21:45:25:819 1520 sec: 117651425 operations; 70197.14 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=350743, Max=21487, Min=583, Avg=4624.17, 90=6399, 99=8935, 99.9=11999, 99.99=15351] [UPDATE: Count=351039, Max=16279, Min=468, Avg=2498.19, 90=3377, 99=4587, 99.9=7223, 99.99=8839] 
2023-05-04 21:45:35:819 1530 sec: 118356258 operations; 70483.3 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=352261, Max=53631, Min=585, Avg=4594.92, 90=6271, 99=8359, 99.9=11671, 99.99=34015] [UPDATE: Count=352573, Max=42815, Min=468, Avg=2496.94, 90=3345, 99=4403, 99.9=7447, 99.99=23615] 
2023-05-04 21:45:45:819 1540 sec: 119057951 operations; 70169.3 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=350669, Max=50559, Min=563, Avg=4619.6, 90=6303, 99=8639, 99.9=12983, 99.99=33343] [UPDATE: Count=351025, Max=29071, Min=481, Avg=2504.04, 90=3349, 99=4491, 99.9=7423, 99.99=18255] 
2023-05-04 21:45:55:819 1550 sec: 119759332 operations; 70138.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=350646, Max=14879, Min=705, Avg=4626.33, 90=6351, 99=8327, 99.9=10575, 99.99=12871] [UPDATE: Count=350166, Max=16831, Min=546, Avg=2502.46, 90=3335, 99=4451, 99.9=6995, 99.99=13215] 
2023-05-04 21:46:05:819 1560 sec: 120449362 operations; 69003 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=344478, Max=51391, Min=846, Avg=4706.19, 90=6459, 99=8639, 99.9=13983, 99.99=32623] [UPDATE: Count=345991, Max=33247, Min=592, Avg=2538.09, 90=3383, 99=4531, 99.9=7623, 99.99=21263] 
2023-05-04 21:46:15:819 1570 sec: 121118050 operations; 66868.8 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=333903, Max=46111, Min=563, Avg=4810.54, 90=6367, 99=8199, 99.9=12431, 99.99=32991] [UPDATE: Count=334863, Max=29679, Min=474, Avg=2666.68, 90=3459, 99=4511, 99.9=7875, 99.99=22751] 
2023-05-04 21:46:25:819 1580 sec: 121779080 operations; 66103 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=330464, Max=23023, Min=518, Avg=4871.97, 90=6431, 99=8119, 99.9=10663, 99.99=18031] [UPDATE: Count=329920, Max=22975, Min=470, Avg=2693.23, 90=3491, 99=4491, 99.9=7651, 99.99=17247] 
2023-05-04 21:46:35:819 1590 sec: 122444058 operations; 66497.8 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=331938, Max=61727, Min=531, Avg=4843.65, 90=6471, 99=8615, 99.9=16127, 99.99=35839] [UPDATE: Count=333737, Max=32351, Min=460, Avg=2671.66, 90=3523, 99=4707, 99.9=7679, 99.99=23663] 
2023-05-04 21:46:45:819 1600 sec: 123146113 operations; 70205.5 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=350500, Max=48607, Min=511, Avg=4584.28, 90=6339, 99=8623, 99.9=16735, 99.99=36543] [UPDATE: Count=351702, Max=33247, Min=441, Avg=2537.8, 90=3445, 99=4631, 99.9=7283, 99.99=24159] 
2023-05-04 21:46:55:819 1610 sec: 123860180 operations; 71406.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=356913, Max=18143, Min=534, Avg=4501.42, 90=6251, 99=8111, 99.9=10455, 99.99=13687] [UPDATE: Count=357106, Max=16607, Min=464, Avg=2498.24, 90=3387, 99=4303, 99.9=6863, 99.99=12055] 
2023-05-04 21:47:05:819 1620 sec: 124585152 operations; 72497.2 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=362103, Max=54047, Min=521, Avg=4445.02, 90=6191, 99=8127, 99.9=12103, 99.99=36543] [UPDATE: Count=362882, Max=28399, Min=469, Avg=2450.96, 90=3335, 99=4275, 99.9=7255, 99.99=22719] 
2023-05-04 21:47:15:819 1630 sec: 125311149 operations; 72599.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=363133, Max=46015, Min=489, Avg=4436.5, 90=6199, 99=8239, 99.9=14375, 99.99=33279] [UPDATE: Count=362840, Max=29263, Min=440, Avg=2447.07, 90=3341, 99=4483, 99.9=7139, 99.99=21375] 
2023-05-04 21:47:25:819 1640 sec: 126044370 operations; 73322.1 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=366324, Max=21615, Min=518, Avg=4391.34, 90=6187, 99=8199, 99.9=10447, 99.99=13591] [UPDATE: Count=366695, Max=16287, Min=466, Avg=2426.45, 90=3319, 99=4443, 99.9=7043, 99.99=8951] 
2023-05-04 21:47:35:819 1650 sec: 126778637 operations; 73426.7 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=367264, Max=52127, Min=512, Avg=4387.67, 90=6175, 99=8311, 99.9=13615, 99.99=35999] [UPDATE: Count=367089, Max=28751, Min=460, Avg=2418.18, 90=3303, 99=4455, 99.9=7459, 99.99=22575] 
2023-05-04 21:47:45:823 1660 sec: 127515720 operations; 73678.83 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=368078, Max=56287, Min=538, Avg=4376.44, 90=6195, 99=8343, 99.9=12223, 99.99=35807] [UPDATE: Count=369177, Max=28559, Min=482, Avg=2407.92, 90=3291, 99=4523, 99.9=7451, 99.99=21823] 
2023-05-04 21:47:55:819 1670 sec: 128257060 operations; 74163.67 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=370538, Max=17999, Min=549, Avg=4353.38, 90=6215, 99=8295, 99.9=10503, 99.99=13047] [UPDATE: Count=370666, Max=9999, Min=464, Avg=2387.44, 90=3285, 99=4423, 99.9=6931, 99.99=8239] 
2023-05-04 21:48:05:819 1680 sec: 129001109 operations; 74404.9 current ops/sec; est completion in 3 hours 9 minutes [READ: Count=371883, Max=67071, Min=546, Avg=4338.47, 90=6183, 99=8503, 99.9=14695, 99.99=37343] [UPDATE: Count=372344, Max=35551, Min=456, Avg=2379.25, 90=3275, 99=4503, 99.9=7675, 99.99=22959] 
2023-05-04 21:48:15:819 1690 sec: 129743708 operations; 74259.9 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=370988, Max=54559, Min=575, Avg=4352.96, 90=6187, 99=8479, 99.9=19279, 99.99=36543] [UPDATE: Count=371608, Max=30927, Min=471, Avg=2378.9, 90=3273, 99=4523, 99.9=7439, 99.99=23023] 
2023-05-04 21:48:25:819 1700 sec: 130487683 operations; 74397.5 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=372214, Max=20335, Min=514, Avg=4345.48, 90=6219, 99=8567, 99.9=11551, 99.99=16007] [UPDATE: Count=371704, Max=17391, Min=456, Avg=2370.8, 90=3275, 99=4491, 99.9=7099, 99.99=8959] 
2023-05-04 21:48:35:819 1710 sec: 131239186 operations; 75150.3 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=376270, Max=50879, Min=542, Avg=4301.83, 90=6163, 99=8703, 99.9=19199, 99.99=36383] [UPDATE: Count=375389, Max=28783, Min=447, Avg=2345.72, 90=3265, 99=4579, 99.9=7227, 99.99=20127] 
2023-05-04 21:48:45:819 1720 sec: 131990571 operations; 75138.5 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=375862, Max=50015, Min=522, Avg=4303.51, 90=6167, 99=8623, 99.9=16703, 99.99=36671] [UPDATE: Count=375654, Max=44575, Min=456, Avg=2346.86, 90=3269, 99=4499, 99.9=7187, 99.99=24927] 
2023-05-04 21:48:55:819 1730 sec: 132750420 operations; 75984.9 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=380000, Max=15367, Min=518, Avg=4248.73, 90=6099, 99=8271, 99.9=10535, 99.99=12671] [UPDATE: Count=379600, Max=9655, Min=444, Avg=2328.2, 90=3245, 99=4347, 99.9=7043, 99.99=8407] 
2023-05-04 21:49:05:819 1740 sec: 133509921 operations; 75950.1 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=379930, Max=53151, Min=523, Avg=4264.96, 90=6139, 99=8647, 99.9=18639, 99.99=36191] [UPDATE: Count=379785, Max=29087, Min=463, Avg=2314.45, 90=3225, 99=4491, 99.9=7779, 99.99=20143] 
2023-05-04 21:49:15:819 1750 sec: 134273373 operations; 76345.2 current ops/sec; est completion in 3 hours 8 minutes [READ: Count=381739, Max=56895, Min=543, Avg=4244.54, 90=6103, 99=8623, 99.9=23535, 99.99=38847] [UPDATE: Count=381678, Max=28559, Min=465, Avg=2301.54, 90=3213, 99=4431, 99.9=7515, 99.99=21119] 
2023-05-04 21:49:25:819 1760 sec: 135038819 operations; 76544.6 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=382389, Max=26063, Min=549, Avg=4231.78, 90=6123, 99=8503, 99.9=11775, 99.99=17231] [UPDATE: Count=382898, Max=16879, Min=479, Avg=2299.04, 90=3211, 99=4367, 99.9=6915, 99.99=9391] 
2023-05-04 21:49:35:819 1770 sec: 135806139 operations; 76732 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=383703, Max=58687, Min=521, Avg=4218.56, 90=6103, 99=8607, 99.9=20959, 99.99=39039] [UPDATE: Count=383458, Max=45247, Min=468, Avg=2296.16, 90=3221, 99=4531, 99.9=7767, 99.99=23375] 
2023-05-04 21:49:45:819 1780 sec: 136565389 operations; 75925 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=378964, Max=55807, Min=531, Avg=4265.16, 90=6187, 99=8847, 99.9=15799, 99.99=38719] [UPDATE: Count=380535, Max=34175, Min=469, Avg=2318.81, 90=3265, 99=4471, 99.9=7855, 99.99=24495] 
2023-05-04 21:49:55:819 1790 sec: 137320844 operations; 75545.5 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=378035, Max=18015, Min=542, Avg=4282.47, 90=6211, 99=8463, 99.9=10743, 99.99=13231] [UPDATE: Count=377281, Max=10983, Min=460, Avg=2331.57, 90=3293, 99=4391, 99.9=7043, 99.99=8543] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 21:50:05:819 1800 sec: 138095827 operations; 77498.3 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=386851, Max=74303, Min=505, Avg=4184.29, 90=6135, 99=8479, 99.9=16463, 99.99=37791] [UPDATE: Count=387995, Max=46143, Min=446, Avg=2266.71, 90=3253, 99=4383, 99.9=7695, 99.99=22719] 
Still waiting for thread Thread-135 to complete. Workload status: true
2023-05-04 21:50:08:069 1802 sec: 138098151 operations; 1032.89 current ops/sec; est completion in 3 hours 7 minutes [READ: Count=1177, Max=18543, Min=576, Avg=3414.51, 90=5207, 99=6343, 99.9=7035, 99.99=18543] [CLEANUP: Count=250, Max=2220031, Min=0, Avg=8877.34, 90=2, 99=14, 99.9=2220031, 99.99=2220031] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802249
[OVERALL], Throughput(ops/sec), 76625.45575001012
[TOTAL_GCS_PS_Scavenge], Count, 5714
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18142
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0066311591794475
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 87
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004827301887807956
[TOTAL_GCs], Count, 5716
[TOTAL_GC_TIME], Time(ms), 18229
[TOTAL_GC_TIME_%], Time(%), 1.0114584610672555
[READ], Operations, 69050260
[READ], AverageLatency(us), 4034.851604642763
[READ], MinLatency(us), 485
[READ], MaxLatency(us), 181887
[READ], 95thPercentileLatency(us), 6531
[READ], 99thPercentileLatency(us), 8087
[READ], Return=OK, 69050260
[CLEANUP], Operations, 250
[CLEANUP], AverageLatency(us), 8877.34
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2220031
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 14
[UPDATE], Operations, 69047891
[UPDATE], AverageLatency(us), 2231.155145810319
[UPDATE], MinLatency(us), 431
[UPDATE], MaxLatency(us), 178303
[UPDATE], 95thPercentileLatency(us), 3459
[UPDATE], 99thPercentileLatency(us), 4259
[UPDATE], Return=OK, 69047891
