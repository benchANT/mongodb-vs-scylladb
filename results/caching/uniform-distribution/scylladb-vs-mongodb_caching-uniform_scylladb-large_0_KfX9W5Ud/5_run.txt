bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:21:896 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
2023-06-05 12:32:31:881 10 sec: 512389 operations; 51238.9 current ops/sec; [READ: Count=256106, Max=104319, Min=365, Avg=3193.87, 90=5023, 99=15831, 99.9=51679, 99.99=87039] [UPDATE: Count=257960, Max=96639, Min=301, Avg=1850.9, 90=2653, 99=7675, 99.9=49215, 99.99=83263] 
2023-06-05 12:32:41:881 20 sec: 1074871 operations; 56248.2 current ops/sec; [READ: Count=281112, Max=40575, Min=417, Avg=3652.78, 90=5587, 99=17535, 99.9=23087, 99.99=28239] [UPDATE: Count=280937, Max=12519, Min=324, Avg=1850.39, 90=2785, 99=5743, 99.9=7919, 99.99=9159] 
2023-06-05 12:32:51:881 30 sec: 1637307 operations; 56243.6 current ops/sec; [READ: Count=281209, Max=44031, Min=372, Avg=3785.48, 90=5847, 99=17679, 99.9=31903, 99.99=36031] [UPDATE: Count=281011, Max=29023, Min=309, Avg=1894.89, 90=2859, 99=5795, 99.9=7967, 99.99=10279] 
2023-06-05 12:33:01:881 40 sec: 2199807 operations; 56250 current ops/sec; [READ: Count=280979, Max=41503, Min=375, Avg=3865.96, 90=5983, 99=18015, 99.9=30319, 99.99=35007] [UPDATE: Count=281610, Max=18127, Min=305, Avg=1916.33, 90=2905, 99=5839, 99.9=8059, 99.99=9647] 
2023-06-05 12:33:11:881 50 sec: 2760534 operations; 56072.7 current ops/sec; [READ: Count=280542, Max=148735, Min=411, Avg=4227.87, 90=6503, 99=20911, 99.9=67455, 99.99=86271] [UPDATE: Count=280240, Max=23727, Min=334, Avg=1989.43, 90=3031, 99=6163, 99.9=8239, 99.99=10231] 
2023-06-05 12:33:21:881 60 sec: 3324227 operations; 56369.3 current ops/sec; [READ: Count=281966, Max=131071, Min=416, Avg=4480.05, 90=6551, 99=26927, 99.9=80063, 99.99=92415] [UPDATE: Count=281917, Max=11263, Min=326, Avg=2016.93, 90=3073, 99=6299, 99.9=8271, 99.99=9783] 
2023-06-05 12:33:31:881 70 sec: 3887210 operations; 56298.3 current ops/sec; [READ: Count=281782, Max=65791, Min=411, Avg=4155.12, 90=6507, 99=18927, 99.9=31855, 99.99=57119] [UPDATE: Count=280889, Max=13503, Min=309, Avg=2027.64, 90=3091, 99=6035, 99.9=8115, 99.99=9719] 
2023-06-05 12:33:41:881 80 sec: 4449546 operations; 56233.6 current ops/sec; [READ: Count=280504, Max=61631, Min=397, Avg=4192.38, 90=6571, 99=18991, 99.9=33759, 99.99=44703] [UPDATE: Count=281999, Max=15199, Min=318, Avg=2041.56, 90=3133, 99=6055, 99.9=8099, 99.99=9815] 
2023-06-05 12:33:51:881 90 sec: 5012221 operations; 56267.5 current ops/sec; [READ: Count=281249, Max=48831, Min=414, Avg=4211.23, 90=6591, 99=18911, 99.9=35007, 99.99=39679] [UPDATE: Count=281403, Max=16703, Min=333, Avg=2052.94, 90=3147, 99=6067, 99.9=8199, 99.99=11247] 
2023-06-05 12:34:01:881 100 sec: 5574837 operations; 56261.6 current ops/sec; [READ: Count=280954, Max=44447, Min=400, Avg=4183.63, 90=6579, 99=19839, 99.9=28879, 99.99=38015] [UPDATE: Count=281646, Max=17919, Min=318, Avg=2029.86, 90=3121, 99=6143, 99.9=8263, 99.99=10567] 
2023-06-05 12:34:11:881 110 sec: 6134145 operations; 55930.8 current ops/sec; [READ: Count=279634, Max=155391, Min=395, Avg=4557.45, 90=6827, 99=25487, 99.9=95295, 99.99=109375] [UPDATE: Count=279829, Max=25503, Min=327, Avg=2058.09, 90=3145, 99=6679, 99.9=9487, 99.99=16831] 
2023-06-05 12:34:21:881 120 sec: 6699350 operations; 56520.5 current ops/sec; [READ: Count=283080, Max=120127, Min=409, Avg=4557.98, 90=6743, 99=24031, 99.9=94975, 99.99=113791] [UPDATE: Count=282099, Max=24335, Min=326, Avg=2065.93, 90=3127, 99=6531, 99.9=8855, 99.99=10511] 
2023-06-05 12:34:31:881 130 sec: 7255045 operations; 55569.5 current ops/sec; [READ: Count=278118, Max=301823, Min=372, Avg=4532.98, 90=6835, 99=22479, 99.9=113983, 99.99=164351] [UPDATE: Count=277521, Max=14279, Min=332, Avg=2072.66, 90=3121, 99=6935, 99.9=9375, 99.99=10983] 
2023-06-05 12:34:41:881 140 sec: 7805896 operations; 55085.1 current ops/sec; [READ: Count=275866, Max=288255, Min=398, Avg=5043.63, 90=6819, 99=23215, 99.9=162815, 99.99=257791] [UPDATE: Count=274967, Max=14695, Min=306, Avg=2054.58, 90=3105, 99=6907, 99.9=9247, 99.99=10887] 
2023-06-05 12:34:51:881 150 sec: 8361343 operations; 55544.7 current ops/sec; [READ: Count=277484, Max=330495, Min=351, Avg=5035.06, 90=6575, 99=25183, 99.9=161407, 99.99=251391] [UPDATE: Count=278046, Max=17471, Min=334, Avg=2044, 90=3089, 99=6815, 99.9=9383, 99.99=12039] 
2023-06-05 12:35:01:881 160 sec: 8927467 operations; 56612.4 current ops/sec; [READ: Count=282193, Max=348671, Min=405, Avg=4908.07, 90=6439, 99=21103, 99.9=191231, 99.99=197119] [UPDATE: Count=283928, Max=18047, Min=338, Avg=2053.2, 90=3099, 99=6291, 99.9=8927, 99.99=11335] 
2023-06-05 12:35:11:881 170 sec: 9483511 operations; 55604.4 current ops/sec; [READ: Count=277586, Max=374271, Min=403, Avg=4954.81, 90=6539, 99=22927, 99.9=188287, 99.99=238591] [UPDATE: Count=278339, Max=13903, Min=325, Avg=2079.66, 90=3167, 99=6067, 99.9=8183, 99.99=9663] 
2023-06-05 12:35:21:881 180 sec: 10052534 operations; 56902.3 current ops/sec; [READ: Count=284323, Max=313599, Min=402, Avg=4841.14, 90=6315, 99=23439, 99.9=192511, 99.99=232063] [UPDATE: Count=284739, Max=14023, Min=326, Avg=2083.82, 90=3137, 99=5583, 99.9=8171, 99.99=10207] 
2023-06-05 12:35:31:881 190 sec: 10626088 operations; 57355.4 current ops/sec; [READ: Count=286651, Max=293887, Min=387, Avg=4547.05, 90=6303, 99=23871, 99.9=114175, 99.99=184831] [UPDATE: Count=286816, Max=17951, Min=310, Avg=2108.22, 90=3139, 99=5607, 99.9=8599, 99.99=10343] 
2023-06-05 12:35:41:881 200 sec: 11191666 operations; 56557.8 current ops/sec; [READ: Count=283616, Max=312575, Min=384, Avg=4637.36, 90=6103, 99=21887, 99.9=188671, 99.99=196607] [UPDATE: Count=281885, Max=13855, Min=349, Avg=2074.02, 90=3107, 99=5343, 99.9=8415, 99.99=10495] 
2023-06-05 12:35:51:881 210 sec: 11761417 operations; 56975.1 current ops/sec; [READ: Count=284895, Max=172927, Min=428, Avg=4446.07, 90=6203, 99=20143, 99.9=134911, 99.99=163967] [UPDATE: Count=284751, Max=17503, Min=343, Avg=2098.21, 90=3129, 99=5559, 99.9=8663, 99.99=12079] 
2023-06-05 12:36:01:881 220 sec: 12323391 operations; 56197.4 current ops/sec; [READ: Count=281692, Max=139391, Min=399, Avg=4114.55, 90=6043, 99=18959, 99.9=49087, 99.99=91263] [UPDATE: Count=280463, Max=17151, Min=339, Avg=2052.32, 90=3063, 99=5535, 99.9=8599, 99.99=11775] 
2023-06-05 12:36:11:881 230 sec: 12887375 operations; 56398.4 current ops/sec; [READ: Count=281851, Max=94143, Min=401, Avg=3956.75, 90=5739, 99=17007, 99.9=51743, 99.99=83583] [UPDATE: Count=282047, Max=11583, Min=345, Avg=2006.81, 90=3009, 99=4983, 99.9=7883, 99.99=10007] 
2023-06-05 12:36:21:881 240 sec: 13450034 operations; 56265.9 current ops/sec; [READ: Count=281110, Max=29727, Min=428, Avg=3603.34, 90=5447, 99=9191, 99.9=21807, 99.99=26879] [UPDATE: Count=281507, Max=14023, Min=337, Avg=1939.84, 90=2923, 99=4319, 99.9=6767, 99.99=8407] 
2023-06-05 12:36:31:881 250 sec: 14012529 operations; 56249.5 current ops/sec; [READ: Count=281289, Max=43455, Min=387, Avg=3561.01, 90=5439, 99=7927, 99.9=12151, 99.99=20239] [UPDATE: Count=280787, Max=17391, Min=342, Avg=1947.98, 90=2939, 99=4135, 99.9=6503, 99.99=11199] 
2023-06-05 12:36:41:881 260 sec: 14575009 operations; 56248 current ops/sec; [READ: Count=280954, Max=23839, Min=404, Avg=3550.41, 90=5447, 99=7943, 99.9=12351, 99.99=19439] [UPDATE: Count=281847, Max=17247, Min=335, Avg=1941.34, 90=2955, 99=4151, 99.9=6327, 99.99=10015] 
2023-06-05 12:36:51:881 270 sec: 15137530 operations; 56252.1 current ops/sec; [READ: Count=281776, Max=28223, Min=408, Avg=3605.81, 90=5559, 99=8511, 99.9=14743, 99.99=23727] [UPDATE: Count=280751, Max=26239, Min=311, Avg=1958.92, 90=2985, 99=4279, 99.9=6803, 99.99=10175] 
2023-06-05 12:37:01:881 280 sec: 15699917 operations; 56238.7 current ops/sec; [READ: Count=280439, Max=31471, Min=377, Avg=3549.26, 90=5467, 99=8171, 99.9=12887, 99.99=22159] [UPDATE: Count=282026, Max=18287, Min=324, Avg=1932.5, 90=2959, 99=4025, 99.9=6475, 99.99=12255] 
2023-06-05 12:37:11:881 290 sec: 16262479 operations; 56256.2 current ops/sec; [READ: Count=280907, Max=92991, Min=401, Avg=3584.39, 90=5491, 99=8799, 99.9=21295, 99.99=41279] [UPDATE: Count=281669, Max=10783, Min=316, Avg=1931.71, 90=2963, 99=4295, 99.9=6883, 99.99=8823] 
2023-06-05 12:37:21:881 300 sec: 16825017 operations; 56253.8 current ops/sec; [READ: Count=281406, Max=23871, Min=409, Avg=3520.4, 90=5443, 99=8175, 99.9=11535, 99.99=16271] [UPDATE: Count=281032, Max=12983, Min=321, Avg=1913.8, 90=2931, 99=4223, 99.9=6091, 99.99=7379] 
2023-06-05 12:37:31:881 310 sec: 17387508 operations; 56249.1 current ops/sec; [READ: Count=281005, Max=90303, Min=409, Avg=3569.16, 90=5435, 99=8775, 99.9=23743, 99.99=42687] [UPDATE: Count=281626, Max=12327, Min=340, Avg=1917.21, 90=2925, 99=4323, 99.9=6851, 99.99=9135] 
2023-06-05 12:37:41:881 320 sec: 17950025 operations; 56251.7 current ops/sec; [READ: Count=282111, Max=40511, Min=386, Avg=3438.52, 90=5287, 99=8263, 99.9=18751, 99.99=25967] [UPDATE: Count=280332, Max=15919, Min=312, Avg=1868.52, 90=2853, 99=4191, 99.9=6963, 99.99=12159] 
2023-06-05 12:37:51:881 330 sec: 18512533 operations; 56250.8 current ops/sec; [READ: Count=280816, Max=27887, Min=403, Avg=3446.71, 90=5299, 99=9191, 99.9=20927, 99.99=24415] [UPDATE: Count=281697, Max=16463, Min=335, Avg=1858.23, 90=2815, 99=4463, 99.9=7919, 99.99=10767] 
2023-06-05 12:38:01:881 340 sec: 19075009 operations; 56247.6 current ops/sec; [READ: Count=281109, Max=31743, Min=389, Avg=3408.38, 90=5223, 99=9175, 99.9=21567, 99.99=25615] [UPDATE: Count=281409, Max=17023, Min=339, Avg=1840.48, 90=2775, 99=4363, 99.9=7747, 99.99=10663] 
2023-06-05 12:38:11:881 350 sec: 19637536 operations; 56252.7 current ops/sec; [READ: Count=281100, Max=30815, Min=419, Avg=3424.35, 90=5219, 99=8959, 99.9=20735, 99.99=24495] [UPDATE: Count=280890, Max=25055, Min=332, Avg=1854.3, 90=2789, 99=4315, 99.9=7727, 99.99=15695] 
2023-06-05 12:38:21:881 360 sec: 20200066 operations; 56253 current ops/sec; [READ: Count=281271, Max=26927, Min=392, Avg=3328.22, 90=5071, 99=7579, 99.9=14415, 99.99=21983] [UPDATE: Count=281727, Max=24287, Min=337, Avg=1827.12, 90=2755, 99=3975, 99.9=6303, 99.99=9143] 
2023-06-05 12:38:31:881 370 sec: 20762544 operations; 56247.8 current ops/sec; [READ: Count=280564, Max=56351, Min=402, Avg=3323.46, 90=5091, 99=7575, 99.9=12135, 99.99=25007] [UPDATE: Count=281624, Max=17471, Min=337, Avg=1832.34, 90=2771, 99=4015, 99.9=6459, 99.99=12799] 
2023-06-05 12:38:41:881 380 sec: 21325037 operations; 56249.3 current ops/sec; [READ: Count=281229, Max=19887, Min=390, Avg=3292.75, 90=5067, 99=7431, 99.9=10087, 99.99=14839] [UPDATE: Count=281557, Max=19055, Min=319, Avg=1817.81, 90=2757, 99=3961, 99.9=5875, 99.99=8287] 
2023-06-05 12:38:51:881 390 sec: 21887525 operations; 56248.8 current ops/sec; [READ: Count=281292, Max=25535, Min=405, Avg=3350.23, 90=5151, 99=7531, 99.9=10183, 99.99=15423] [UPDATE: Count=281162, Max=16927, Min=337, Avg=1835.75, 90=2795, 99=3937, 99.9=6179, 99.99=9063] 
2023-06-05 12:39:01:881 400 sec: 22450033 operations; 56250.8 current ops/sec; [READ: Count=281361, Max=24847, Min=379, Avg=3437.25, 90=5295, 99=7735, 99.9=11127, 99.99=17119] [UPDATE: Count=281193, Max=18415, Min=313, Avg=1882.05, 90=2877, 99=4075, 99.9=6331, 99.99=13487] 
2023-06-05 12:39:11:881 410 sec: 23012490 operations; 56245.7 current ops/sec; [READ: Count=281443, Max=31823, Min=427, Avg=3528.52, 90=5439, 99=8239, 99.9=14015, 99.99=21647] [UPDATE: Count=280970, Max=11383, Min=344, Avg=1913.78, 90=2925, 99=4219, 99.9=6423, 99.99=8447] 
2023-06-05 12:39:21:881 420 sec: 23575017 operations; 56252.7 current ops/sec; [READ: Count=281161, Max=24287, Min=365, Avg=3557.2, 90=5495, 99=8175, 99.9=12151, 99.99=17663] [UPDATE: Count=281124, Max=21999, Min=337, Avg=1931.51, 90=2945, 99=4231, 99.9=6819, 99.99=15487] 
2023-06-05 12:39:31:881 430 sec: 24137461 operations; 56244.4 current ops/sec; [READ: Count=280879, Max=20911, Min=434, Avg=3622.05, 90=5587, 99=8327, 99.9=11495, 99.99=16607] [UPDATE: Count=281831, Max=17103, Min=334, Avg=1954.76, 90=2987, 99=4263, 99.9=6323, 99.99=8727] 
2023-06-05 12:39:41:881 440 sec: 24700027 operations; 56256.6 current ops/sec; [READ: Count=281682, Max=22031, Min=418, Avg=3604.93, 90=5567, 99=8167, 99.9=11223, 99.99=15391] [UPDATE: Count=280828, Max=9719, Min=318, Avg=1947.1, 90=2989, 99=4187, 99.9=6047, 99.99=7523] 
2023-06-05 12:39:51:881 450 sec: 25262503 operations; 56247.6 current ops/sec; [READ: Count=281297, Max=27951, Min=402, Avg=3618.61, 90=5595, 99=8319, 99.9=12071, 99.99=19087] [UPDATE: Count=281207, Max=18399, Min=322, Avg=1953.2, 90=2999, 99=4279, 99.9=6359, 99.99=8279] 
2023-06-05 12:40:01:881 460 sec: 25824862 operations; 56235.9 current ops/sec; [READ: Count=281161, Max=39455, Min=432, Avg=3660.32, 90=5663, 99=9143, 99.9=18351, 99.99=26239] [UPDATE: Count=281254, Max=17999, Min=333, Avg=1959.28, 90=3001, 99=4447, 99.9=7099, 99.99=10783] 
2023-06-05 12:40:11:881 470 sec: 26384966 operations; 56010.4 current ops/sec; [READ: Count=279927, Max=119999, Min=413, Avg=4128.92, 90=6187, 99=18991, 99.9=32959, 99.99=73791] [UPDATE: Count=280154, Max=18159, Min=342, Avg=2061.59, 90=3127, 99=5663, 99.9=8647, 99.99=13055] 
2023-06-05 12:40:21:881 480 sec: 26947875 operations; 56290.9 current ops/sec; [READ: Count=282069, Max=277503, Min=420, Avg=4611.16, 90=6047, 99=24735, 99.9=137983, 99.99=220287] [UPDATE: Count=280661, Max=23727, Min=328, Avg=2056.04, 90=3099, 99=5783, 99.9=8959, 99.99=12767] 
2023-06-05 12:40:31:881 490 sec: 27512491 operations; 56461.6 current ops/sec; [READ: Count=282778, Max=141311, Min=373, Avg=3744.74, 90=5655, 99=9471, 99.9=27631, 99.99=85759] [UPDATE: Count=282027, Max=21343, Min=348, Avg=1964.05, 90=2985, 99=4287, 99.9=6911, 99.99=9887] 
2023-06-05 12:40:41:881 500 sec: 28075007 operations; 56251.6 current ops/sec; [READ: Count=281651, Max=39039, Min=374, Avg=3664.66, 90=5663, 99=9183, 99.9=17791, 99.99=27551] [UPDATE: Count=280763, Max=11303, Min=337, Avg=1957.67, 90=2995, 99=4423, 99.9=6663, 99.99=8695] 
2023-06-05 12:40:51:881 510 sec: 28637467 operations; 56246 current ops/sec; [READ: Count=280875, Max=41375, Min=386, Avg=3615.93, 90=5599, 99=8887, 99.9=18415, 99.99=32127] [UPDATE: Count=281687, Max=27039, Min=315, Avg=1933.39, 90=2963, 99=4415, 99.9=7127, 99.99=11039] 
2023-06-05 12:41:01:881 520 sec: 29200010 operations; 56254.3 current ops/sec; [READ: Count=281548, Max=80767, Min=399, Avg=3682.46, 90=5687, 99=9015, 99.9=25839, 99.99=43423] [UPDATE: Count=280985, Max=20127, Min=324, Avg=1956.39, 90=3007, 99=4503, 99.9=6979, 99.99=10655] 
2023-06-05 12:41:11:881 530 sec: 29762496 operations; 56248.6 current ops/sec; [READ: Count=281741, Max=25455, Min=418, Avg=3688.75, 90=5735, 99=9031, 99.9=17023, 99.99=21391] [UPDATE: Count=280703, Max=11759, Min=319, Avg=1966.71, 90=3019, 99=4515, 99.9=7071, 99.99=9135] 
2023-06-05 12:41:21:881 540 sec: 30324960 operations; 56246.4 current ops/sec; [READ: Count=282037, Max=29247, Min=413, Avg=3687.18, 90=5711, 99=8871, 99.9=15095, 99.99=21455] [UPDATE: Count=280414, Max=27247, Min=329, Avg=1975.3, 90=3025, 99=4475, 99.9=7395, 99.99=16327] 
2023-06-05 12:41:31:881 550 sec: 30887417 operations; 56245.7 current ops/sec; [READ: Count=281631, Max=32927, Min=406, Avg=3795.94, 90=5863, 99=9863, 99.9=21663, 99.99=26879] [UPDATE: Count=280878, Max=13927, Min=318, Avg=2000.85, 90=3071, 99=4659, 99.9=7395, 99.99=9559] 
2023-06-05 12:41:41:881 560 sec: 31449799 operations; 56238.2 current ops/sec; [READ: Count=281873, Max=55135, Min=369, Avg=3854.43, 90=5891, 99=11103, 99.9=25295, 99.99=30335] [UPDATE: Count=280577, Max=12599, Min=332, Avg=2005.07, 90=3067, 99=4755, 99.9=7903, 99.99=10103] 
2023-06-05 12:41:51:881 570 sec: 31995041 operations; 54524.2 current ops/sec; [READ: Count=272965, Max=409855, Min=396, Avg=4713.92, 90=5667, 99=13567, 99.9=206079, 99.99=352511] [UPDATE: Count=272404, Max=19375, Min=320, Avg=1956.14, 90=3007, 99=4883, 99.9=8751, 99.99=11743] 
2023-06-05 12:42:01:881 580 sec: 32551235 operations; 55619.4 current ops/sec; [READ: Count=278584, Max=375551, Min=375, Avg=4941.49, 90=5855, 99=17199, 99.9=229247, 99.99=289023] [UPDATE: Count=277667, Max=20287, Min=321, Avg=2000.15, 90=3053, 99=4823, 99.9=7935, 99.99=10863] 
2023-06-05 12:42:11:881 590 sec: 33095761 operations; 54452.6 current ops/sec; [READ: Count=271590, Max=317951, Min=399, Avg=5158.85, 90=6487, 99=23327, 99.9=192383, 99.99=260991] [UPDATE: Count=272690, Max=13583, Min=329, Avg=2092.8, 90=3195, 99=5867, 99.9=8375, 99.99=10351] 
2023-06-05 12:42:21:881 600 sec: 33588792 operations; 49303.1 current ops/sec; [READ: Count=246572, Max=547327, Min=404, Avg=6000.72, 90=7147, 99=47743, 99.9=324863, 99.99=330495] [UPDATE: Count=246568, Max=13615, Min=319, Avg=2088.65, 90=3257, 99=6731, 99.9=9031, 99.99=11023] 
2023-06-05 12:42:31:881 610 sec: 34103838 operations; 51504.6 current ops/sec; [READ: Count=257413, Max=357631, Min=375, Avg=5654.74, 90=6967, 99=34943, 99.9=322815, 99.99=328447] [UPDATE: Count=257690, Max=12935, Min=321, Avg=2123.23, 90=3295, 99=6279, 99.9=8791, 99.99=10559] 
2023-06-05 12:42:41:881 620 sec: 34658468 operations; 55463 current ops/sec; [READ: Count=277236, Max=325375, Min=397, Avg=5061.89, 90=6887, 99=31295, 99.9=161023, 99.99=268799] [UPDATE: Count=277339, Max=11639, Min=334, Avg=2149.24, 90=3287, 99=5879, 99.9=8155, 99.99=9767] 
2023-06-05 12:42:51:881 630 sec: 35220772 operations; 56230.4 current ops/sec; [READ: Count=280922, Max=231423, Min=437, Avg=4934.2, 90=6919, 99=30031, 99.9=119935, 99.99=143103] [UPDATE: Count=281542, Max=22639, Min=330, Avg=2176.73, 90=3313, 99=6139, 99.9=8527, 99.99=11087] 
2023-06-05 12:43:01:881 640 sec: 35795402 operations; 57463 current ops/sec; [READ: Count=287346, Max=158719, Min=399, Avg=4803.49, 90=6623, 99=19855, 99.9=134271, 99.99=140543] [UPDATE: Count=287371, Max=19199, Min=332, Avg=2157.94, 90=3273, 99=5363, 99.9=7667, 99.99=9855] 
2023-06-05 12:43:11:881 650 sec: 36362072 operations; 56667 current ops/sec; [READ: Count=283696, Max=283903, Min=424, Avg=4866.59, 90=6747, 99=21359, 99.9=129471, 99.99=185471] [UPDATE: Count=283048, Max=12039, Min=328, Avg=2180.92, 90=3301, 99=5739, 99.9=8351, 99.99=9919] 
2023-06-05 12:43:21:881 660 sec: 36939354 operations; 57728.2 current ops/sec; [READ: Count=288506, Max=258559, Min=383, Avg=4740.4, 90=6691, 99=16143, 99.9=159999, 99.99=211839] [UPDATE: Count=288721, Max=19679, Min=349, Avg=2186.04, 90=3301, 99=5247, 99.9=7823, 99.99=9471] 
2023-06-05 12:43:31:881 670 sec: 37523793 operations; 58443.9 current ops/sec; [READ: Count=292561, Max=161407, Min=363, Avg=4580.68, 90=6975, 99=14783, 99.9=47423, 99.99=110719] [UPDATE: Count=291250, Max=21295, Min=312, Avg=2251.51, 90=3377, 99=5395, 99.9=8191, 99.99=12439] 
2023-06-05 12:43:41:881 680 sec: 38112406 operations; 58861.3 current ops/sec; [READ: Count=293924, Max=32447, Min=394, Avg=4498.26, 90=6943, 99=12223, 99.9=21087, 99.99=25759] [UPDATE: Count=294900, Max=21071, Min=342, Avg=2271.66, 90=3393, 99=5055, 99.9=7335, 99.99=9671] 
2023-06-05 12:43:51:881 690 sec: 38691512 operations; 57910.6 current ops/sec; [READ: Count=289673, Max=117951, Min=420, Avg=4594.46, 90=6799, 99=13991, 99.9=80767, 99.99=87679] [UPDATE: Count=289560, Max=27871, Min=346, Avg=2269.74, 90=3377, 99=5179, 99.9=8015, 99.99=10911] 
2023-06-05 12:44:01:881 700 sec: 39267795 operations; 57628.3 current ops/sec; [READ: Count=288529, Max=96383, Min=413, Avg=4610.82, 90=6743, 99=13695, 99.9=71999, 99.99=85887] [UPDATE: Count=287083, Max=26767, Min=332, Avg=2284.22, 90=3383, 99=5191, 99.9=8887, 99.99=15239] 
2023-06-05 12:44:11:881 710 sec: 39838529 operations; 57073.4 current ops/sec; [READ: Count=284877, Max=68671, Min=420, Avg=4653.65, 90=6871, 99=15703, 99.9=41503, 99.99=50335] [UPDATE: Count=286667, Max=18543, Min=306, Avg=2314.59, 90=3421, 99=5415, 99.9=8847, 99.99=11335] 
2023-06-05 12:44:21:881 720 sec: 40391313 operations; 55278.4 current ops/sec; [READ: Count=276322, Max=220543, Min=421, Avg=4905.43, 90=6731, 99=20783, 99.9=134399, 99.99=158207] [UPDATE: Count=275652, Max=28351, Min=332, Avg=2299.78, 90=3389, 99=5951, 99.9=9359, 99.99=18959] 
2023-06-05 12:44:31:881 730 sec: 40952583 operations; 56127 current ops/sec; [READ: Count=281010, Max=147327, Min=417, Avg=4755.17, 90=7019, 99=15775, 99.9=34687, 99.99=134783] [UPDATE: Count=280319, Max=26783, Min=338, Avg=2360.6, 90=3471, 99=5715, 99.9=9351, 99.99=17471] 
2023-06-05 12:44:41:881 740 sec: 41513708 operations; 56112.5 current ops/sec; [READ: Count=281058, Max=48095, Min=392, Avg=4758.97, 90=7083, 99=18831, 99.9=32799, 99.99=37343] [UPDATE: Count=280792, Max=22687, Min=340, Avg=2350.03, 90=3465, 99=5891, 99.9=9287, 99.99=11991] 
2023-06-05 12:44:51:881 750 sec: 42080742 operations; 56703.4 current ops/sec; [READ: Count=283025, Max=50559, Min=426, Avg=4702.03, 90=6999, 99=16527, 99.9=28111, 99.99=34079] [UPDATE: Count=283820, Max=17951, Min=349, Avg=2345.05, 90=3465, 99=5559, 99.9=8791, 99.99=11503] 
2023-06-05 12:45:01:881 760 sec: 42647541 operations; 56679.9 current ops/sec; [READ: Count=283075, Max=40863, Min=396, Avg=4693.4, 90=6939, 99=17951, 99.9=26127, 99.99=30527] [UPDATE: Count=283819, Max=18847, Min=339, Avg=2348.7, 90=3443, 99=5751, 99.9=9079, 99.99=11247] 
2023-06-05 12:45:11:881 770 sec: 43204919 operations; 55737.8 current ops/sec; [READ: Count=278876, Max=270591, Min=418, Avg=4798.17, 90=6959, 99=21167, 99.9=32303, 99.99=171007] [UPDATE: Count=278378, Max=12847, Min=343, Avg=2349.47, 90=3453, 99=5807, 99.9=8975, 99.99=11015] 
2023-06-05 12:45:21:881 780 sec: 43726092 operations; 52117.3 current ops/sec; [READ: Count=260370, Max=543231, Min=397, Avg=5432.02, 90=6371, 99=21631, 99.9=273407, 99.99=290559] [UPDATE: Count=260856, Max=12567, Min=339, Avg=2228.69, 90=3307, 99=5407, 99.9=8599, 99.99=10607] 
2023-06-05 12:45:31:881 790 sec: 44277759 operations; 55166.7 current ops/sec; [READ: Count=276070, Max=281087, Min=394, Avg=5006.37, 90=6507, 99=15039, 99.9=270335, 99.99=275455] [UPDATE: Count=275657, Max=11823, Min=345, Avg=2248.6, 90=3327, 99=5095, 99.9=7615, 99.99=9095] 
2023-06-05 12:45:41:881 800 sec: 44858400 operations; 58064.1 current ops/sec; [READ: Count=290368, Max=59263, Min=446, Avg=4554.48, 90=6915, 99=10991, 99.9=21535, 99.99=29071] [UPDATE: Count=290165, Max=11807, Min=338, Avg=2323.76, 90=3421, 99=4955, 99.9=7155, 99.99=9383] 
2023-06-05 12:45:51:881 810 sec: 45434239 operations; 57583.9 current ops/sec; [READ: Count=287878, Max=38751, Min=400, Avg=4582.27, 90=6919, 99=11127, 99.9=18815, 99.99=29407] [UPDATE: Count=287926, Max=23407, Min=351, Avg=2345.4, 90=3433, 99=4959, 99.9=7323, 99.99=10567] 
2023-06-05 12:46:01:881 820 sec: 46012723 operations; 57848.4 current ops/sec; [READ: Count=289081, Max=25791, Min=431, Avg=4536.85, 90=6807, 99=10431, 99.9=14959, 99.99=20111] [UPDATE: Count=289433, Max=15623, Min=320, Avg=2338.71, 90=3403, 99=4671, 99.9=6991, 99.99=9119] 
2023-06-05 12:46:11:881 830 sec: 46587876 operations; 57515.3 current ops/sec; [READ: Count=287759, Max=95935, Min=436, Avg=4548.28, 90=6775, 99=10599, 99.9=20367, 99.99=38943] [UPDATE: Count=287428, Max=10807, Min=340, Avg=2340.2, 90=3405, 99=4715, 99.9=7079, 99.99=9047] 
2023-06-05 12:46:21:881 840 sec: 47161089 operations; 57321.3 current ops/sec; [READ: Count=286675, Max=35967, Min=386, Avg=4534.62, 90=6787, 99=10151, 99.9=14775, 99.99=22031] [UPDATE: Count=286485, Max=13687, Min=335, Avg=2352.94, 90=3423, 99=4799, 99.9=6795, 99.99=8375] 
2023-06-05 12:46:31:881 850 sec: 47726273 operations; 56518.4 current ops/sec; [READ: Count=281883, Max=95743, Min=423, Avg=4633.14, 90=6771, 99=11015, 99.9=25743, 99.99=54495] [UPDATE: Count=283427, Max=16431, Min=338, Avg=2383.58, 90=3445, 99=4903, 99.9=7487, 99.99=9735] 
2023-06-05 12:46:41:881 860 sec: 48286766 operations; 56049.3 current ops/sec; [READ: Count=280519, Max=52991, Min=413, Avg=4702.38, 90=6847, 99=12751, 99.9=25887, 99.99=37503] [UPDATE: Count=279927, Max=13511, Min=316, Avg=2413.27, 90=3479, 99=5091, 99.9=8303, 99.99=10695] 
2023-06-05 12:46:51:881 870 sec: 48849244 operations; 56247.8 current ops/sec; [READ: Count=280941, Max=35455, Min=389, Avg=4686.52, 90=6843, 99=11607, 99.9=25455, 99.99=29743] [UPDATE: Count=281537, Max=18127, Min=325, Avg=2413.96, 90=3467, 99=5043, 99.9=8171, 99.99=11375] 
2023-06-05 12:47:01:881 880 sec: 49410546 operations; 56130.2 current ops/sec; [READ: Count=280522, Max=37599, Min=409, Avg=4706.96, 90=6911, 99=12655, 99.9=25023, 99.99=29103] [UPDATE: Count=280792, Max=18895, Min=335, Avg=2404.13, 90=3465, 99=5263, 99.9=8231, 99.99=11239] 
2023-06-05 12:47:11:881 890 sec: 49969848 operations; 55930.2 current ops/sec; [READ: Count=279935, Max=39935, Min=444, Avg=4731.99, 90=6979, 99=13783, 99.9=22671, 99.99=28127] [UPDATE: Count=279295, Max=13415, Min=335, Avg=2406.39, 90=3469, 99=5383, 99.9=8099, 99.99=10135] 
2023-06-05 12:47:21:881 900 sec: 50526227 operations; 55637.9 current ops/sec; [READ: Count=278691, Max=84351, Min=399, Avg=4792.71, 90=6907, 99=18031, 99.9=44991, 99.99=57375] [UPDATE: Count=277775, Max=15999, Min=333, Avg=2386.85, 90=3433, 99=5691, 99.9=8759, 99.99=10615] 
2023-06-05 12:47:31:881 910 sec: 51084805 operations; 55857.8 current ops/sec; [READ: Count=279446, Max=45791, Min=434, Avg=4751.65, 90=6879, 99=16279, 99.9=25967, 99.99=31055] [UPDATE: Count=279108, Max=19631, Min=332, Avg=2404.1, 90=3453, 99=5575, 99.9=8543, 99.99=10295] 
2023-06-05 12:47:41:881 920 sec: 51646027 operations; 56122.2 current ops/sec; [READ: Count=280129, Max=46783, Min=427, Avg=4716.2, 90=6771, 99=13863, 99.9=26399, 99.99=31871] [UPDATE: Count=280972, Max=13535, Min=355, Avg=2411.48, 90=3441, 99=5083, 99.9=7923, 99.99=10095] 
2023-06-05 12:47:51:881 930 sec: 52208630 operations; 56260.3 current ops/sec; [READ: Count=281218, Max=35359, Min=423, Avg=4699.69, 90=6771, 99=13399, 99.9=24335, 99.99=28399] [UPDATE: Count=281314, Max=18255, Min=322, Avg=2407.64, 90=3433, 99=5075, 99.9=7503, 99.99=11799] 
2023-06-05 12:48:01:881 940 sec: 52771994 operations; 56336.4 current ops/sec; [READ: Count=282258, Max=32959, Min=468, Avg=4680.36, 90=6819, 99=12095, 99.9=22479, 99.99=26351] [UPDATE: Count=281280, Max=18911, Min=358, Avg=2408.72, 90=3449, 99=4995, 99.9=7363, 99.99=11935] 
2023-06-05 12:48:11:881 950 sec: 53337287 operations; 56529.3 current ops/sec; [READ: Count=282678, Max=32895, Min=414, Avg=4666.35, 90=6899, 99=11423, 99.9=20655, 99.99=24575] [UPDATE: Count=282557, Max=9935, Min=340, Avg=2400.61, 90=3463, 99=5023, 99.9=7183, 99.99=8375] 
2023-06-05 12:48:21:881 960 sec: 53905513 operations; 56822.6 current ops/sec; [READ: Count=284128, Max=31823, Min=421, Avg=4643.69, 90=6855, 99=11511, 99.9=20911, 99.99=24383] [UPDATE: Count=284121, Max=12855, Min=345, Avg=2384.03, 90=3439, 99=4927, 99.9=7291, 99.99=9391] 
2023-06-05 12:48:31:881 970 sec: 54474989 operations; 56947.6 current ops/sec; [READ: Count=285256, Max=67071, Min=416, Avg=4608.99, 90=6783, 99=10607, 99.9=21583, 99.99=62911] [UPDATE: Count=284299, Max=63935, Min=345, Avg=2382.77, 90=3435, 99=4843, 99.9=7083, 99.99=60031] 
2023-06-05 12:48:41:881 980 sec: 55043792 operations; 56880.3 current ops/sec; [READ: Count=284297, Max=82175, Min=389, Avg=4619.07, 90=6779, 99=11535, 99.9=37663, 99.99=44767] [UPDATE: Count=284444, Max=13735, Min=341, Avg=2357.78, 90=3409, 99=4919, 99.9=7399, 99.99=9399] 
2023-06-05 12:48:51:881 990 sec: 55605935 operations; 56214.3 current ops/sec; [READ: Count=280686, Max=120511, Min=427, Avg=4725.27, 90=6699, 99=12279, 99.9=70079, 99.99=79103] [UPDATE: Count=281451, Max=27199, Min=338, Avg=2345.1, 90=3397, 99=4967, 99.9=7643, 99.99=10415] 
2023-06-05 12:49:01:881 1000 sec: 56172565 operations; 56663 current ops/sec; [READ: Count=283098, Max=66367, Min=390, Avg=4665.85, 90=6747, 99=11591, 99.9=51487, 99.99=61759] [UPDATE: Count=283550, Max=16463, Min=325, Avg=2353.02, 90=3399, 99=4895, 99.9=7503, 99.99=10031] 
2023-06-05 12:49:11:881 1010 sec: 56739436 operations; 56687.1 current ops/sec; [READ: Count=283678, Max=42399, Min=406, Avg=4649.48, 90=6851, 99=12663, 99.9=29247, 99.99=36511] [UPDATE: Count=283157, Max=12375, Min=351, Avg=2346.26, 90=3415, 99=4967, 99.9=7311, 99.99=9823] 
2023-06-05 12:49:21:881 1020 sec: 57308810 operations; 56937.4 current ops/sec; [READ: Count=284450, Max=36095, Min=415, Avg=4559.18, 90=6811, 99=11127, 99.9=22511, 99.99=28127] [UPDATE: Count=284994, Max=11327, Min=314, Avg=2334.58, 90=3411, 99=4871, 99.9=6875, 99.99=8383] 
2023-06-05 12:49:31:881 1030 sec: 57875026 operations; 56621.6 current ops/sec; [READ: Count=283069, Max=27375, Min=422, Avg=4548.09, 90=6779, 99=10431, 99.9=16175, 99.99=22975] [UPDATE: Count=282567, Max=26463, Min=356, Avg=2358.89, 90=3427, 99=4819, 99.9=7223, 99.99=13919] 
2023-06-05 12:49:41:881 1040 sec: 58440086 operations; 56506 current ops/sec; [READ: Count=282306, Max=39583, Min=399, Avg=4579.74, 90=6763, 99=11463, 99.9=23791, 99.99=28671] [UPDATE: Count=283238, Max=21007, Min=337, Avg=2347.89, 90=3401, 99=4691, 99.9=7479, 99.99=10743] 
2023-06-05 12:49:51:881 1050 sec: 59003567 operations; 56348.1 current ops/sec; [READ: Count=281937, Max=41343, Min=430, Avg=4640.77, 90=6867, 99=13183, 99.9=25583, 99.99=29951] [UPDATE: Count=281590, Max=25279, Min=335, Avg=2351.71, 90=3423, 99=5059, 99.9=7939, 99.99=10623] 
2023-06-05 12:50:01:881 1060 sec: 59568145 operations; 56457.8 current ops/sec; [READ: Count=282617, Max=35071, Min=412, Avg=4594.95, 90=6827, 99=11863, 99.9=25327, 99.99=30175] [UPDATE: Count=281942, Max=18175, Min=323, Avg=2340.96, 90=3405, 99=4979, 99.9=7699, 99.99=10575] 
2023-06-05 12:50:11:881 1070 sec: 60116422 operations; 54827.7 current ops/sec; [READ: Count=274828, Max=201727, Min=407, Avg=4870.92, 90=6887, 99=17087, 99.9=95359, 99.99=143359] [UPDATE: Count=273525, Max=13511, Min=330, Avg=2329.01, 90=3401, 99=5375, 99.9=7731, 99.99=9327] 
2023-06-05 12:50:21:881 1080 sec: 60672761 operations; 55633.9 current ops/sec; [READ: Count=278207, Max=147455, Min=414, Avg=4845.88, 90=7019, 99=15935, 99.9=111359, 99.99=118783] [UPDATE: Count=278237, Max=13367, Min=319, Avg=2339.08, 90=3417, 99=5435, 99.9=8487, 99.99=10887] 
2023-06-05 12:50:31:881 1090 sec: 61243522 operations; 57076.1 current ops/sec; [READ: Count=285513, Max=41983, Min=403, Avg=4639.19, 90=6911, 99=12567, 99.9=26047, 99.99=30239] [UPDATE: Count=285065, Max=16007, Min=331, Avg=2347.21, 90=3407, 99=5035, 99.9=8063, 99.99=10191] 
2023-06-05 12:50:41:881 1100 sec: 61809764 operations; 56624.2 current ops/sec; [READ: Count=283387, Max=43903, Min=430, Avg=4666.28, 90=6907, 99=13039, 99.9=25647, 99.99=29663] [UPDATE: Count=282802, Max=20767, Min=334, Avg=2365.51, 90=3425, 99=5119, 99.9=7843, 99.99=10071] 
2023-06-05 12:50:51:881 1110 sec: 62378340 operations; 56857.6 current ops/sec; [READ: Count=284576, Max=36223, Min=431, Avg=4619.41, 90=6887, 99=11983, 99.9=23983, 99.99=29295] [UPDATE: Count=284077, Max=24399, Min=342, Avg=2348.28, 90=3413, 99=4975, 99.9=7419, 99.99=10543] 
2023-06-05 12:51:01:881 1120 sec: 62939702 operations; 56136.2 current ops/sec; [READ: Count=281156, Max=120959, Min=422, Avg=4702.55, 90=6803, 99=12815, 99.9=64127, 99.99=77055] [UPDATE: Count=280205, Max=24207, Min=340, Avg=2338.58, 90=3403, 99=5135, 99.9=8895, 99.99=15839] 
2023-06-05 12:51:11:881 1130 sec: 63503708 operations; 56400.6 current ops/sec; [READ: Count=281361, Max=86335, Min=422, Avg=4690.6, 90=6815, 99=12327, 99.9=61887, 99.99=74623] [UPDATE: Count=282697, Max=13111, Min=349, Avg=2333.24, 90=3401, 99=5027, 99.9=8079, 99.99=10415] 
2023-06-05 12:51:21:881 1140 sec: 64060894 operations; 55718.6 current ops/sec; [READ: Count=277958, Max=189823, Min=415, Avg=4812.19, 90=6871, 99=18271, 99.9=83775, 99.99=118463] [UPDATE: Count=279384, Max=12583, Min=338, Avg=2324.59, 90=3387, 99=5807, 99.9=8975, 99.99=10679] 
2023-06-05 12:51:31:881 1150 sec: 64629407 operations; 56851.3 current ops/sec; [READ: Count=284095, Max=54623, Min=432, Avg=4651.63, 90=6899, 99=16751, 99.9=28255, 99.99=33663] [UPDATE: Count=284261, Max=26287, Min=344, Avg=2324.41, 90=3389, 99=5735, 99.9=9095, 99.99=10863] 
2023-06-05 12:51:41:881 1160 sec: 65196124 operations; 56671.7 current ops/sec; [READ: Count=283699, Max=34847, Min=445, Avg=4608.7, 90=6871, 99=15735, 99.9=25455, 99.99=29631] [UPDATE: Count=282690, Max=22623, Min=336, Avg=2311.13, 90=3383, 99=5543, 99.9=8999, 99.99=13487] 
2023-06-05 12:51:51:881 1170 sec: 65761000 operations; 56487.6 current ops/sec; [READ: Count=281887, Max=31743, Min=432, Avg=4453.85, 90=6687, 99=13407, 99.9=23279, 99.99=27631] [UPDATE: Count=283444, Max=25919, Min=335, Avg=2259.31, 90=3329, 99=4927, 99.9=8019, 99.99=12039] 
2023-06-05 12:52:01:881 1180 sec: 66324045 operations; 56304.5 current ops/sec; [READ: Count=281878, Max=39391, Min=414, Avg=4448.19, 90=6671, 99=14095, 99.9=23871, 99.99=27775] [UPDATE: Count=281041, Max=17103, Min=340, Avg=2251.85, 90=3317, 99=5139, 99.9=8287, 99.99=10711] 
2023-06-05 12:52:11:881 1190 sec: 66883709 operations; 55966.4 current ops/sec; [READ: Count=279806, Max=125183, Min=405, Avg=4634.51, 90=6763, 99=16167, 99.9=81407, 99.99=88127] [UPDATE: Count=279964, Max=19999, Min=346, Avg=2274.86, 90=3359, 99=5319, 99.9=8335, 99.99=9935] 
2023-06-05 12:52:21:881 1200 sec: 67449698 operations; 56598.9 current ops/sec; [READ: Count=282921, Max=94335, Min=384, Avg=4453.6, 90=6651, 99=11959, 99.9=39263, 99.99=84927] [UPDATE: Count=282971, Max=18655, Min=347, Avg=2250.83, 90=3323, 99=4979, 99.9=7391, 99.99=9135] 
2023-06-05 12:52:31:881 1210 sec: 68012274 operations; 56257.6 current ops/sec; [READ: Count=280934, Max=32751, Min=430, Avg=4324.98, 90=6583, 99=10399, 99.9=16815, 99.99=26127] [UPDATE: Count=281434, Max=12255, Min=337, Avg=2228.51, 90=3295, 99=4795, 99.9=6755, 99.99=8471] 
2023-06-05 12:52:41:881 1220 sec: 68574671 operations; 56239.7 current ops/sec; [READ: Count=281280, Max=33759, Min=435, Avg=4359.21, 90=6671, 99=11031, 99.9=17599, 99.99=25215] [UPDATE: Count=281211, Max=13583, Min=348, Avg=2226.67, 90=3297, 99=4827, 99.9=6835, 99.99=8551] 
2023-06-05 12:52:51:881 1230 sec: 69133198 operations; 55852.7 current ops/sec; [READ: Count=279359, Max=232447, Min=417, Avg=4488.82, 90=6627, 99=11439, 99.9=69823, 99.99=173055] [UPDATE: Count=279318, Max=28591, Min=327, Avg=2220.9, 90=3287, 99=4847, 99.9=7167, 99.99=11319] 
2023-06-05 12:53:01:881 1240 sec: 69699641 operations; 56644.3 current ops/sec; [READ: Count=283433, Max=43135, Min=428, Avg=4414.88, 90=6727, 99=11223, 99.9=25551, 99.99=33247] [UPDATE: Count=282832, Max=17327, Min=356, Avg=2256.27, 90=3333, 99=4963, 99.9=7447, 99.99=11823] 
2023-06-05 12:53:11:881 1250 sec: 70259354 operations; 55971.3 current ops/sec; [READ: Count=279344, Max=31519, Min=423, Avg=4417.35, 90=6735, 99=11911, 99.9=19359, 99.99=27551] [UPDATE: Count=280401, Max=12303, Min=321, Avg=2246.76, 90=3331, 99=4923, 99.9=7179, 99.99=8943] 
2023-06-05 12:53:21:881 1260 sec: 70824671 operations; 56531.7 current ops/sec; [READ: Count=282561, Max=54015, Min=440, Avg=4392.41, 90=6695, 99=10871, 99.9=21071, 99.99=42527] [UPDATE: Count=282849, Max=14191, Min=347, Avg=2249.57, 90=3333, 99=4819, 99.9=7083, 99.99=9455] 
2023-06-05 12:53:31:881 1270 sec: 71386982 operations; 56231.1 current ops/sec; [READ: Count=280610, Max=36895, Min=423, Avg=4436.05, 90=6747, 99=11655, 99.9=22559, 99.99=27071] [UPDATE: Count=281023, Max=29279, Min=313, Avg=2268.11, 90=3353, 99=5039, 99.9=8639, 99.99=14279] 
2023-06-05 12:53:41:881 1280 sec: 71940513 operations; 55353.1 current ops/sec; [READ: Count=276980, Max=288255, Min=419, Avg=4793.89, 90=6699, 99=14927, 99.9=158975, 99.99=171775] [UPDATE: Count=277317, Max=25375, Min=348, Avg=2237.26, 90=3331, 99=5247, 99.9=8559, 99.99=11679] 
2023-06-05 12:53:51:881 1290 sec: 72508691 operations; 56817.8 current ops/sec; [READ: Count=284877, Max=141951, Min=433, Avg=4634.77, 90=6771, 99=12231, 99.9=110399, 99.99=137343] [UPDATE: Count=283228, Max=27087, Min=339, Avg=2270.66, 90=3371, 99=5047, 99.9=7791, 99.99=10895] 
2023-06-05 12:54:01:881 1300 sec: 73073488 operations; 56479.7 current ops/sec; [READ: Count=281982, Max=102719, Min=422, Avg=4538.3, 90=6659, 99=14071, 99.9=60575, 99.99=78783] [UPDATE: Count=282833, Max=17871, Min=335, Avg=2221.2, 90=3297, 99=4935, 99.9=8367, 99.99=11263] 
2023-06-05 12:54:11:881 1310 sec: 73633847 operations; 56035.9 current ops/sec; [READ: Count=279700, Max=204031, Min=416, Avg=4631.97, 90=6747, 99=19167, 99.9=59231, 99.99=131967] [UPDATE: Count=280647, Max=15839, Min=329, Avg=2224.15, 90=3307, 99=5411, 99.9=9223, 99.99=11375] 
2023-06-05 12:54:21:881 1320 sec: 74185068 operations; 55122.1 current ops/sec; [READ: Count=275819, Max=237311, Min=409, Avg=4916.37, 90=6683, 99=22351, 99.9=159103, 99.99=165375] [UPDATE: Count=275382, Max=13743, Min=315, Avg=2196.31, 90=3277, 99=5863, 99.9=9279, 99.99=11167] 
2023-06-05 12:54:31:881 1330 sec: 74746090 operations; 56102.2 current ops/sec; [READ: Count=280491, Max=114239, Min=404, Avg=4854.24, 90=7067, 99=24751, 99.9=67903, 99.99=95487] [UPDATE: Count=280582, Max=16799, Min=334, Avg=2246.78, 90=3351, 99=6107, 99.9=9463, 99.99=11559] 
2023-06-05 12:54:41:881 1340 sec: 75307831 operations; 56174.1 current ops/sec; [READ: Count=280585, Max=190847, Min=405, Avg=4844.03, 90=7087, 99=24175, 99.9=67263, 99.99=109631] [UPDATE: Count=281292, Max=12343, Min=343, Avg=2241.61, 90=3355, 99=5935, 99.9=8855, 99.99=10831] 
2023-06-05 12:54:51:881 1350 sec: 75874512 operations; 56668.1 current ops/sec; [READ: Count=282997, Max=134527, Min=415, Avg=4738.43, 90=7063, 99=18415, 99.9=93759, 99.99=105471] [UPDATE: Count=283577, Max=28959, Min=339, Avg=2255.18, 90=3369, 99=5523, 99.9=8631, 99.99=11407] 
2023-06-05 12:55:01:881 1360 sec: 76445870 operations; 57135.8 current ops/sec; [READ: Count=285779, Max=98367, Min=414, Avg=4570.49, 90=7015, 99=13143, 99.9=27423, 99.99=35679] [UPDATE: Count=285544, Max=18271, Min=337, Avg=2269.21, 90=3377, 99=5187, 99.9=7519, 99.99=9959] 
2023-06-05 12:55:11:881 1370 sec: 76999624 operations; 55375.4 current ops/sec; [READ: Count=276927, Max=135679, Min=404, Avg=4785.9, 90=7163, 99=18863, 99.9=60927, 99.99=84095] [UPDATE: Count=276758, Max=13647, Min=337, Avg=2288.53, 90=3407, 99=5739, 99.9=8743, 99.99=10903] 
2023-06-05 12:55:21:881 1380 sec: 77556404 operations; 55678 current ops/sec; [READ: Count=278222, Max=116223, Min=404, Avg=4895.85, 90=7091, 99=22271, 99.9=81855, 99.99=87103] [UPDATE: Count=278265, Max=27183, Min=345, Avg=2286.21, 90=3409, 99=5755, 99.9=9239, 99.99=16167] 
2023-06-05 12:55:31:881 1390 sec: 78089392 operations; 53298.8 current ops/sec; [READ: Count=266225, Max=552447, Min=425, Avg=5264.78, 90=6587, 99=20687, 99.9=325631, 99.99=415231] [UPDATE: Count=266782, Max=42271, Min=298, Avg=2178.41, 90=3291, 99=5771, 99.9=9447, 99.99=28847] 
2023-06-05 12:55:41:881 1400 sec: 78623506 operations; 53411.4 current ops/sec; [READ: Count=266703, Max=407551, Min=398, Avg=5319.06, 90=6419, 99=16119, 99.9=366847, 99.99=397823] [UPDATE: Count=267723, Max=43327, Min=317, Avg=2137.15, 90=3241, 99=5207, 99.9=8391, 99.99=29839] 
2023-06-05 12:55:51:881 1410 sec: 79157404 operations; 53389.8 current ops/sec; [READ: Count=267054, Max=461823, Min=414, Avg=5368.04, 90=6371, 99=15903, 99.9=376831, 99.99=437247] [UPDATE: Count=266968, Max=16879, Min=326, Avg=2098.23, 90=3201, 99=5027, 99.9=8343, 99.99=10567] 
2023-06-05 12:56:01:881 1420 sec: 79720847 operations; 56344.3 current ops/sec; [READ: Count=281610, Max=463103, Min=366, Avg=4881.66, 90=7159, 99=17839, 99.9=99583, 99.99=419839] [UPDATE: Count=281892, Max=19055, Min=321, Avg=2237.71, 90=3379, 99=5631, 99.9=8543, 99.99=10983] 
2023-06-05 12:56:11:881 1430 sec: 80289335 operations; 56848.8 current ops/sec; [READ: Count=284447, Max=110527, Min=385, Avg=4757.49, 90=7295, 99=19919, 99.9=44575, 99.99=58559] [UPDATE: Count=283871, Max=12559, Min=342, Avg=2267.11, 90=3425, 99=5791, 99.9=8743, 99.99=10687] 
2023-06-05 12:56:21:881 1440 sec: 80849076 operations; 55974.1 current ops/sec; [READ: Count=279093, Max=185983, Min=416, Avg=4903.52, 90=7147, 99=23167, 99.9=94719, 99.99=133887] [UPDATE: Count=280771, Max=13271, Min=347, Avg=2238.23, 90=3391, 99=5739, 99.9=8407, 99.99=10191] 
2023-06-05 12:56:31:881 1450 sec: 81416864 operations; 56778.8 current ops/sec; [READ: Count=284163, Max=165887, Min=407, Avg=4789.43, 90=7171, 99=17919, 99.9=73471, 99.99=137727] [UPDATE: Count=283590, Max=14231, Min=327, Avg=2247.82, 90=3401, 99=5451, 99.9=8231, 99.99=10159] 
2023-06-05 12:56:41:881 1460 sec: 81986250 operations; 56938.6 current ops/sec; [READ: Count=283701, Max=65855, Min=438, Avg=4784.06, 90=7479, 99=17263, 99.9=33599, 99.99=56895] [UPDATE: Count=284993, Max=25391, Min=325, Avg=2250.07, 90=3409, 99=5431, 99.9=8455, 99.99=15383] 
2023-06-05 12:56:51:881 1470 sec: 82552785 operations; 56653.5 current ops/sec; [READ: Count=283661, Max=111743, Min=410, Avg=4788.32, 90=7351, 99=19887, 99.9=47167, 99.99=64319] [UPDATE: Count=283787, Max=21903, Min=333, Avg=2256.3, 90=3425, 99=5675, 99.9=8295, 99.99=12063] 
2023-06-05 12:57:01:881 1480 sec: 83107559 operations; 55477.4 current ops/sec; [READ: Count=277243, Max=289279, Min=391, Avg=5005.42, 90=6883, 99=22079, 99.9=161023, 99.99=208639] [UPDATE: Count=277360, Max=17631, Min=334, Avg=2187.89, 90=3327, 99=5407, 99.9=8303, 99.99=10439] 
2023-06-05 12:57:11:881 1490 sec: 83667772 operations; 56021.3 current ops/sec; [READ: Count=279837, Max=195711, Min=395, Avg=4910.19, 90=6995, 99=15503, 99.9=159487, 99.99=168703] [UPDATE: Count=280327, Max=12679, Min=338, Avg=2225.21, 90=3367, 99=5243, 99.9=7647, 99.99=9551] 
2023-06-05 12:57:21:881 1500 sec: 84235441 operations; 56766.9 current ops/sec; [READ: Count=284286, Max=140415, Min=420, Avg=4780.9, 90=7139, 99=15111, 99.9=85439, 99.99=117119] [UPDATE: Count=283307, Max=10727, Min=324, Avg=2253.76, 90=3399, 99=5215, 99.9=7307, 99.99=8943] 
2023-06-05 12:57:31:881 1510 sec: 84802665 operations; 56722.4 current ops/sec; [READ: Count=283655, Max=333055, Min=424, Avg=4762.95, 90=7079, 99=16231, 99.9=58911, 99.99=211967] [UPDATE: Count=283424, Max=16863, Min=341, Avg=2269.22, 90=3391, 99=5299, 99.9=7895, 99.99=10279] 
2023-06-05 12:57:41:881 1520 sec: 85363620 operations; 56095.5 current ops/sec; [READ: Count=280721, Max=231551, Min=381, Avg=4837.91, 90=7147, 99=19887, 99.9=79935, 99.99=137087] [UPDATE: Count=280504, Max=16607, Min=320, Avg=2285.09, 90=3417, 99=5587, 99.9=8607, 99.99=10799] 
2023-06-05 12:57:51:881 1530 sec: 85924691 operations; 56107.1 current ops/sec; [READ: Count=280824, Max=97727, Min=406, Avg=4847.75, 90=7175, 99=21071, 99.9=73215, 99.99=87551] [UPDATE: Count=279955, Max=32799, Min=331, Avg=2272.26, 90=3395, 99=6011, 99.9=9567, 99.99=17343] 
2023-06-05 12:58:01:881 1540 sec: 86485518 operations; 56082.7 current ops/sec; [READ: Count=280372, Max=81855, Min=419, Avg=4832.98, 90=7351, 99=20255, 99.9=51167, 99.99=63711] [UPDATE: Count=280580, Max=17631, Min=340, Avg=2292.26, 90=3425, 99=5939, 99.9=9015, 99.99=11583] 
2023-06-05 12:58:11:881 1550 sec: 87044772 operations; 55925.4 current ops/sec; [READ: Count=278826, Max=141695, Min=372, Avg=4860.84, 90=7287, 99=24223, 99.9=48959, 99.99=91391] [UPDATE: Count=280483, Max=14367, Min=328, Avg=2293.73, 90=3439, 99=5811, 99.9=8727, 99.99=10591] 
2023-06-05 12:58:21:881 1560 sec: 87600237 operations; 55546.5 current ops/sec; [READ: Count=277556, Max=123263, Min=408, Avg=4926.37, 90=7067, 99=25167, 99.9=102271, 99.99=118399] [UPDATE: Count=278050, Max=14199, Min=342, Avg=2269.55, 90=3399, 99=5807, 99.9=9159, 99.99=10799] 
2023-06-05 12:58:31:881 1570 sec: 88143765 operations; 54352.8 current ops/sec; [READ: Count=272412, Max=221311, Min=426, Avg=5072.89, 90=7143, 99=26447, 99.9=131455, 99.99=146303] [UPDATE: Count=271031, Max=15911, Min=345, Avg=2270.34, 90=3405, 99=6487, 99.9=9575, 99.99=11551] 
2023-06-05 12:58:41:881 1580 sec: 88691885 operations; 54812 current ops/sec; [READ: Count=273962, Max=124159, Min=390, Avg=5017.48, 90=7251, 99=25551, 99.9=95423, 99.99=116095] [UPDATE: Count=274148, Max=17711, Min=326, Avg=2282.19, 90=3431, 99=6375, 99.9=9383, 99.99=11263] 
2023-06-05 12:58:51:881 1590 sec: 89236583 operations; 54469.8 current ops/sec; [READ: Count=271791, Max=107967, Min=399, Avg=5043.36, 90=7375, 99=25743, 99.9=58079, 99.99=69375] [UPDATE: Count=272399, Max=26463, Min=330, Avg=2308.27, 90=3455, 99=6707, 99.9=9775, 99.99=14895] 
2023-06-05 12:59:01:881 1600 sec: 89773073 operations; 53649 current ops/sec; [READ: Count=268300, Max=276991, Min=423, Avg=5159.33, 90=7131, 99=25663, 99.9=115775, 99.99=220543] [UPDATE: Count=268731, Max=18687, Min=323, Avg=2283.41, 90=3415, 99=6391, 99.9=9135, 99.99=12231] 
2023-06-05 12:59:11:881 1610 sec: 90286442 operations; 51336.9 current ops/sec; [READ: Count=256712, Max=818687, Min=434, Avg=5600.96, 90=6383, 99=24559, 99.9=323071, 99.99=463103] [UPDATE: Count=256662, Max=14959, Min=345, Avg=2177.76, 90=3257, 99=5751, 99.9=8863, 99.99=10863] 
2023-06-05 12:59:21:881 1620 sec: 90818956 operations; 53251.4 current ops/sec; [READ: Count=266224, Max=383231, Min=433, Avg=5322.84, 90=6371, 99=16799, 99.9=324351, 99.99=341247] [UPDATE: Count=266185, Max=12831, Min=332, Avg=2195.36, 90=3269, 99=5035, 99.9=7687, 99.99=9767] 
2023-06-05 12:59:31:881 1630 sec: 91384077 operations; 56512.1 current ops/sec; [READ: Count=282492, Max=137087, Min=415, Avg=4757.94, 90=7107, 99=14943, 99.9=58399, 99.99=109695] [UPDATE: Count=282624, Max=12319, Min=353, Avg=2322.07, 90=3427, 99=5387, 99.9=8159, 99.99=10135] 
2023-06-05 12:59:41:881 1640 sec: 91956683 operations; 57260.6 current ops/sec; [READ: Count=285724, Max=37567, Min=459, Avg=4661.46, 90=7103, 99=13239, 99.9=24687, 99.99=30719] [UPDATE: Count=286822, Max=11623, Min=343, Avg=2326.13, 90=3425, 99=5263, 99.9=8027, 99.99=10143] 
2023-06-05 12:59:51:881 1650 sec: 92522196 operations; 56551.3 current ops/sec; [READ: Count=282593, Max=124479, Min=424, Avg=4747.59, 90=7063, 99=15295, 99.9=50271, 99.99=95807] [UPDATE: Count=283040, Max=23391, Min=315, Avg=2323.06, 90=3417, 99=5383, 99.9=8831, 99.99=11855] 
2023-06-05 13:00:01:881 1660 sec: 93089218 operations; 56702.2 current ops/sec; [READ: Count=283248, Max=95359, Min=394, Avg=4743.39, 90=6939, 99=14799, 99.9=79295, 99.99=86079] [UPDATE: Count=283817, Max=17903, Min=342, Avg=2311.34, 90=3403, 99=5223, 99.9=7967, 99.99=10535] 
2023-06-05 13:00:11:881 1670 sec: 93651121 operations; 56190.3 current ops/sec; [READ: Count=280508, Max=313599, Min=450, Avg=4774.7, 90=7035, 99=14943, 99.9=55743, 99.99=179199] [UPDATE: Count=281309, Max=12911, Min=338, Avg=2336.04, 90=3433, 99=5299, 99.9=7795, 99.99=9335] 
2023-06-05 13:00:21:881 1680 sec: 94207422 operations; 55630.1 current ops/sec; [READ: Count=277745, Max=332287, Min=416, Avg=4866.27, 90=6995, 99=14319, 99.9=86271, 99.99=269055] [UPDATE: Count=278708, Max=12927, Min=353, Avg=2333.96, 90=3409, 99=5267, 99.9=7715, 99.99=9727] 
2023-06-05 13:00:31:881 1690 sec: 94746747 operations; 53932.5 current ops/sec; [READ: Count=269344, Max=265727, Min=425, Avg=5055.22, 90=7179, 99=17631, 99.9=138111, 99.99=191231] [UPDATE: Count=269195, Max=33663, Min=353, Avg=2364.76, 90=3455, 99=5775, 99.9=8727, 99.99=14071] 
2023-06-05 13:00:41:881 1700 sec: 95304333 operations; 55758.6 current ops/sec; [READ: Count=279097, Max=131455, Min=421, Avg=4808.06, 90=7151, 99=15783, 99.9=49119, 99.99=110783] [UPDATE: Count=279079, Max=30431, Min=370, Avg=2356.43, 90=3439, 99=5467, 99.9=9023, 99.99=11743] 
2023-06-05 13:00:51:881 1710 sec: 95846295 operations; 54196.2 current ops/sec; [READ: Count=270661, Max=158591, Min=428, Avg=5031.59, 90=7251, 99=24687, 99.9=65183, 99.99=110271] [UPDATE: Count=271355, Max=17791, Min=351, Avg=2343.66, 90=3455, 99=6179, 99.9=9431, 99.99=11647] 
2023-06-05 13:01:01:881 1720 sec: 96386251 operations; 53995.6 current ops/sec; [READ: Count=270392, Max=217215, Min=394, Avg=5110.87, 90=6915, 99=23791, 99.9=134143, 99.99=191615] [UPDATE: Count=269626, Max=18991, Min=338, Avg=2293.79, 90=3375, 99=5667, 99.9=9047, 99.99=11423] 
2023-06-05 13:01:11:881 1730 sec: 96926958 operations; 54070.7 current ops/sec; [READ: Count=270513, Max=219135, Min=421, Avg=5052.73, 90=6979, 99=21695, 99.9=98367, 99.99=141439] [UPDATE: Count=270193, Max=215039, Min=317, Avg=2340.27, 90=3411, 99=5659, 99.9=8655, 99.99=12231] 
2023-06-05 13:01:21:881 1740 sec: 97472478 operations; 54552 current ops/sec; [READ: Count=273074, Max=161919, Min=403, Avg=4996.77, 90=7103, 99=20015, 99.9=83967, 99.99=128191] [UPDATE: Count=272299, Max=15319, Min=344, Avg=2331.56, 90=3447, 99=5671, 99.9=8295, 99.99=10175] 
2023-06-05 13:01:31:881 1750 sec: 98025366 operations; 55288.8 current ops/sec; [READ: Count=276133, Max=170495, Min=412, Avg=4902.54, 90=7067, 99=15991, 99.9=82879, 99.99=139775] [UPDATE: Count=276858, Max=16895, Min=327, Avg=2333.12, 90=3443, 99=5411, 99.9=8311, 99.99=10407] 
2023-06-05 13:01:41:881 1760 sec: 98591913 operations; 56654.7 current ops/sec; [READ: Count=283132, Max=43263, Min=444, Avg=4697.51, 90=7067, 99=12687, 99.9=33119, 99.99=39071] [UPDATE: Count=283306, Max=13567, Min=364, Avg=2360.83, 90=3459, 99=5171, 99.9=7847, 99.99=10111] 
2023-06-05 13:01:51:881 1770 sec: 99148479 operations; 55656.6 current ops/sec; [READ: Count=277661, Max=109311, Min=445, Avg=4801.61, 90=7091, 99=16623, 99.9=32927, 99.99=91903] [UPDATE: Count=278911, Max=90687, Min=349, Avg=2387.57, 90=3457, 99=5527, 99.9=9407, 99.99=88895] 
2023-06-05 13:02:01:881 1780 sec: 99707324 operations; 55884.5 current ops/sec; [READ: Count=279684, Max=90879, Min=426, Avg=4774.35, 90=7047, 99=16247, 99.9=29567, 99.99=56511] [UPDATE: Count=279192, Max=17247, Min=338, Avg=2377.89, 90=3451, 99=5451, 99.9=8855, 99.99=11311] 
2023-06-05 13:02:11:881 1790 sec: 100259340 operations; 55201.6 current ops/sec; [READ: Count=275576, Max=260607, Min=377, Avg=4877.24, 90=7051, 99=18335, 99.9=78143, 99.99=135935] [UPDATE: Count=276363, Max=12911, Min=329, Avg=2363.01, 90=3447, 99=5555, 99.9=8439, 99.99=10223] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:21:881 1800 sec: 100818405 operations; 55906.5 current ops/sec; [READ: Count=279800, Max=267775, Min=420, Avg=4904.74, 90=6411, 99=12479, 99.9=163071, 99.99=190207] [UPDATE: Count=278940, Max=212735, Min=345, Avg=2251.72, 90=3297, 99=4923, 99.9=7727, 99.99=10639] 
Still waiting for thread Thread-195 to complete. Workload status: true
2023-06-05 13:02:24:131 1802 sec: 100819692 operations; 572.25 current ops/sec; [READ: Count=674, Max=10807, Min=1046, Avg=3874.21, 90=5663, 99=7211, 99.9=10623, 99.99=10807] [CLEANUP: Count=200, Max=2226175, Min=0, Avg=11127.22, 90=2, 99=17, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802248
[OVERALL], Throughput(ops/sec), 55941.07581198592
[TOTAL_GCS_PS_Scavenge], Count, 6562
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17362
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9633524354028968
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 156
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008655856463705328
[TOTAL_GCs], Count, 6565
[TOTAL_GC_TIME], Time(ms), 17518
[TOTAL_GC_TIME_%], Time(%), 0.9720082918666021
[READ], Operations, 50407168
[READ], AverageLatency(us), 4511.810886935763
[READ], MinLatency(us), 351
[READ], MaxLatency(us), 818687
[READ], 95thPercentileLatency(us), 7923
[READ], 99thPercentileLatency(us), 16079
[READ], Return=OK, 50407168
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11127.215
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 17
[UPDATE], Operations, 50412524
[UPDATE], AverageLatency(us), 2188.6887930864164
[UPDATE], MinLatency(us), 298
[UPDATE], MaxLatency(us), 215039
[UPDATE], 95thPercentileLatency(us), 3703
[UPDATE], 99thPercentileLatency(us), 5323
[UPDATE], Return=OK, 50412524
