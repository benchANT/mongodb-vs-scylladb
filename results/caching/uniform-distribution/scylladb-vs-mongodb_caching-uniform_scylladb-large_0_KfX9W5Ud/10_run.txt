bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:24:815 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:34:800 10 sec: 507758 operations; 50775.8 current ops/sec; [READ: Count=253801, Max=108415, Min=502, Avg=3859.58, 90=5939, 99=18063, 99.9=77311, 99.99=104063] [UPDATE: Count=255460, Max=109695, Min=435, Avg=2145.84, 90=2981, 99=8135, 99.9=68671, 99.99=101951] 
2023-06-05 12:32:44:800 20 sec: 1070270 operations; 56251.2 current ops/sec; [READ: Count=280661, Max=46719, Min=463, Avg=3736.35, 90=5707, 99=17295, 99.9=23199, 99.99=27951] [UPDATE: Count=281495, Max=14055, Min=443, Avg=1928.31, 90=2869, 99=5731, 99.9=7963, 99.99=9527] 
2023-06-05 12:32:54:800 30 sec: 1632633 operations; 56236.3 current ops/sec; [READ: Count=281415, Max=42143, Min=510, Avg=3902.89, 90=5983, 99=18079, 99.9=32895, 99.99=35935] [UPDATE: Count=280905, Max=25199, Min=440, Avg=1967.19, 90=2939, 99=5919, 99.9=8071, 99.99=10015] 
2023-06-05 12:33:04:800 40 sec: 2195033 operations; 56240 current ops/sec; [READ: Count=281646, Max=43103, Min=466, Avg=3939.98, 90=6079, 99=17967, 99.9=29167, 99.99=32863] [UPDATE: Count=280765, Max=17391, Min=435, Avg=1995.35, 90=2979, 99=6011, 99.9=8147, 99.99=10239] 
2023-06-05 12:33:14:800 50 sec: 2756004 operations; 56097.1 current ops/sec; [READ: Count=281163, Max=146175, Min=491, Avg=4406.47, 90=6647, 99=23839, 99.9=79871, 99.99=85759] [UPDATE: Count=279924, Max=14063, Min=426, Avg=2058.83, 90=3109, 99=6255, 99.9=8223, 99.99=9991] 
2023-06-05 12:33:24:800 60 sec: 3319889 operations; 56388.5 current ops/sec; [READ: Count=281602, Max=128511, Min=494, Avg=4480.69, 90=6639, 99=24591, 99.9=69887, 99.99=89471] [UPDATE: Count=281804, Max=27439, Min=432, Avg=2092.15, 90=3149, 99=6411, 99.9=8679, 99.99=16831] 
2023-06-05 12:33:34:800 70 sec: 3882236 operations; 56234.7 current ops/sec; [READ: Count=280976, Max=57567, Min=487, Avg=4206.35, 90=6587, 99=18799, 99.9=26271, 99.99=35647] [UPDATE: Count=281812, Max=23839, Min=433, Avg=2093.71, 90=3163, 99=6127, 99.9=8215, 99.99=10303] 
2023-06-05 12:33:44:800 80 sec: 4444890 operations; 56265.4 current ops/sec; [READ: Count=281402, Max=98175, Min=524, Avg=4267.87, 90=6635, 99=19263, 99.9=38079, 99.99=46463] [UPDATE: Count=281111, Max=13967, Min=439, Avg=2103.18, 90=3185, 99=6083, 99.9=8083, 99.99=9671] 
2023-06-05 12:33:54:800 90 sec: 5007520 operations; 56263 current ops/sec; [READ: Count=280818, Max=41791, Min=504, Avg=4263.08, 90=6731, 99=19055, 99.9=31695, 99.99=36735] [UPDATE: Count=281830, Max=17599, Min=437, Avg=2102.4, 90=3191, 99=6163, 99.9=8187, 99.99=12439] 
2023-06-05 12:34:04:800 100 sec: 5569253 operations; 56173.3 current ops/sec; [READ: Count=280943, Max=48735, Min=480, Avg=4273.35, 90=6659, 99=20591, 99.9=30975, 99.99=37823] [UPDATE: Count=280821, Max=16655, Min=438, Avg=2081.98, 90=3141, 99=6319, 99.9=8671, 99.99=11359] 
2023-06-05 12:34:14:800 110 sec: 6128088 operations; 55883.5 current ops/sec; [READ: Count=279974, Max=156543, Min=504, Avg=4714.46, 90=6799, 99=26783, 99.9=99007, 99.99=116927] [UPDATE: Count=278993, Max=13007, Min=433, Avg=2105.95, 90=3177, 99=6631, 99.9=8975, 99.99=10783] 
2023-06-05 12:34:24:800 120 sec: 6694450 operations; 56636.2 current ops/sec; [READ: Count=283624, Max=104191, Min=521, Avg=4544.93, 90=6863, 99=23327, 99.9=62719, 99.99=97535] [UPDATE: Count=282634, Max=13815, Min=436, Avg=2138.06, 90=3191, 99=6735, 99.9=9279, 99.99=11255] 
2023-06-05 12:34:34:800 130 sec: 7241951 operations; 54750.1 current ops/sec; [READ: Count=273896, Max=300287, Min=502, Avg=4841.27, 90=7083, 99=22559, 99.9=159615, 99.99=263423] [UPDATE: Count=273625, Max=39071, Min=416, Avg=2131.78, 90=3175, 99=7151, 99.9=9847, 99.99=29311] 
2023-06-05 12:34:44:800 140 sec: 7793844 operations; 55189.3 current ops/sec; [READ: Count=275999, Max=287999, Min=501, Avg=5036.01, 90=6843, 99=24479, 99.9=162431, 99.99=240639] [UPDATE: Count=276091, Max=17871, Min=428, Avg=2116.4, 90=3161, 99=6939, 99.9=9479, 99.99=11567] 
2023-06-05 12:34:54:800 150 sec: 8340239 operations; 54639.5 current ops/sec; [READ: Count=273157, Max=348927, Min=522, Avg=5191.78, 90=6475, 99=25567, 99.9=188543, 99.99=273919] [UPDATE: Count=273283, Max=18255, Min=418, Avg=2077.55, 90=3107, 99=6715, 99.9=9311, 99.99=12015] 
2023-06-05 12:35:04:800 160 sec: 8904199 operations; 56396 current ops/sec; [READ: Count=281996, Max=216831, Min=523, Avg=4910.53, 90=6583, 99=20687, 99.9=190847, 99.99=195071] [UPDATE: Count=281773, Max=18287, Min=453, Avg=2131.35, 90=3193, 99=6183, 99.9=8679, 99.99=11399] 
2023-06-05 12:35:14:800 170 sec: 9444836 operations; 54063.7 current ops/sec; [READ: Count=270328, Max=376319, Min=478, Avg=5238.85, 90=6411, 99=27599, 99.9=224895, 99.99=284415] [UPDATE: Count=270193, Max=13655, Min=417, Avg=2108.5, 90=3187, 99=6095, 99.9=8311, 99.99=10095] 
2023-06-05 12:35:24:800 180 sec: 10025481 operations; 58064.5 current ops/sec; [READ: Count=290489, Max=226431, Min=496, Avg=4681.28, 90=6487, 99=21263, 99.9=161535, 99.99=194559] [UPDATE: Count=290394, Max=16479, Min=441, Avg=2173.1, 90=3209, 99=5579, 99.9=8455, 99.99=10591] 
2023-06-05 12:35:34:800 190 sec: 10603278 operations; 57779.7 current ops/sec; [READ: Count=288551, Max=306431, Min=519, Avg=4646.61, 90=6219, 99=24335, 99.9=152703, 99.99=205439] [UPDATE: Count=289240, Max=13287, Min=439, Avg=2142.21, 90=3171, 99=5615, 99.9=8623, 99.99=10575] 
2023-06-05 12:35:44:800 200 sec: 11177865 operations; 57458.7 current ops/sec; [READ: Count=287411, Max=205695, Min=519, Avg=4623.43, 90=6219, 99=21183, 99.9=162815, 99.99=192511] [UPDATE: Count=287089, Max=15439, Min=430, Avg=2138.83, 90=3167, 99=5419, 99.9=8511, 99.99=10119] 
2023-06-05 12:35:54:800 210 sec: 11753673 operations; 57580.8 current ops/sec; [READ: Count=288167, Max=161023, Min=511, Avg=4381.6, 90=6243, 99=20095, 99.9=112447, 99.99=137983] [UPDATE: Count=287541, Max=27407, Min=414, Avg=2145.61, 90=3163, 99=5503, 99.9=8751, 99.99=11063] 
2023-06-05 12:36:04:800 220 sec: 12319704 operations; 56603.1 current ops/sec; [READ: Count=282188, Max=135167, Min=522, Avg=4189.77, 90=6035, 99=19311, 99.9=52927, 99.99=85055] [UPDATE: Count=283752, Max=17903, Min=430, Avg=2102.83, 90=3109, 99=5543, 99.9=8519, 99.99=10639] 
2023-06-05 12:36:14:800 230 sec: 12882796 operations; 56309.2 current ops/sec; [READ: Count=281918, Max=74879, Min=521, Avg=3893.46, 90=5735, 99=14495, 99.9=39999, 99.99=66687] [UPDATE: Count=281166, Max=12599, Min=433, Avg=2047.61, 90=3037, 99=4895, 99.9=7771, 99.99=9775] 
2023-06-05 12:36:24:800 240 sec: 13445367 operations; 56257.1 current ops/sec; [READ: Count=281696, Max=31423, Min=479, Avg=3600.26, 90=5443, 99=8063, 99.9=17807, 99.99=23967] [UPDATE: Count=280870, Max=13535, Min=421, Avg=1995.13, 90=2967, 99=4159, 99.9=6527, 99.99=8351] 
2023-06-05 12:36:34:800 250 sec: 14007820 operations; 56245.3 current ops/sec; [READ: Count=281339, Max=36223, Min=466, Avg=3633.6, 90=5507, 99=7991, 99.9=12359, 99.99=20191] [UPDATE: Count=281028, Max=10607, Min=442, Avg=2017.66, 90=3011, 99=4155, 99.9=6407, 99.99=8447] 
2023-06-05 12:36:44:800 260 sec: 14570359 operations; 56253.9 current ops/sec; [READ: Count=281150, Max=25839, Min=508, Avg=3618.88, 90=5511, 99=8039, 99.9=11591, 99.99=19183] [UPDATE: Count=281374, Max=12527, Min=417, Avg=2004.94, 90=3003, 99=4163, 99.9=6391, 99.99=8287] 
2023-06-05 12:36:54:800 270 sec: 15132747 operations; 56238.8 current ops/sec; [READ: Count=281218, Max=34623, Min=487, Avg=3673.32, 90=5627, 99=8567, 99.9=14431, 99.99=23839] [UPDATE: Count=281269, Max=19983, Min=440, Avg=2026.16, 90=3049, 99=4327, 99.9=6627, 99.99=9495] 
2023-06-05 12:37:04:800 280 sec: 15695328 operations; 56258.1 current ops/sec; [READ: Count=281139, Max=29615, Min=511, Avg=3601.06, 90=5515, 99=8247, 99.9=12607, 99.99=22639] [UPDATE: Count=281340, Max=20399, Min=426, Avg=1993.63, 90=3013, 99=4175, 99.9=6471, 99.99=12703] 
2023-06-05 12:37:14:800 290 sec: 16257863 operations; 56253.5 current ops/sec; [READ: Count=280895, Max=105343, Min=486, Avg=3673.89, 90=5607, 99=8871, 99.9=20527, 99.99=40735] [UPDATE: Count=281604, Max=12039, Min=433, Avg=2005.57, 90=3025, 99=4435, 99.9=7055, 99.99=8967] 
2023-06-05 12:37:24:800 300 sec: 16820360 operations; 56249.7 current ops/sec; [READ: Count=281087, Max=22255, Min=489, Avg=3572.31, 90=5479, 99=8127, 99.9=11311, 99.99=15719] [UPDATE: Count=281339, Max=9327, Min=437, Avg=1977.74, 90=2979, 99=4223, 99.9=6247, 99.99=7499] 
2023-06-05 12:37:34:800 310 sec: 17382862 operations; 56250.2 current ops/sec; [READ: Count=281243, Max=79615, Min=492, Avg=3618.32, 90=5463, 99=8943, 99.9=24719, 99.99=46495] [UPDATE: Count=281421, Max=12007, Min=429, Avg=1975.99, 90=2973, 99=4343, 99.9=6939, 99.99=9143] 
2023-06-05 12:37:44:800 320 sec: 17945334 operations; 56247.2 current ops/sec; [READ: Count=281181, Max=27823, Min=511, Avg=3500.44, 90=5339, 99=8479, 99.9=18479, 99.99=23343] [UPDATE: Count=280747, Max=23359, Min=432, Avg=1939.41, 90=2907, 99=4299, 99.9=7687, 99.99=14151] 
2023-06-05 12:37:54:802 330 sec: 18507794 operations; 56229.13 current ops/sec; [READ: Count=280991, Max=30751, Min=480, Avg=3515.01, 90=5347, 99=9599, 99.9=21615, 99.99=25775] [UPDATE: Count=282177, Max=17999, Min=417, Avg=1924.53, 90=2869, 99=4511, 99.9=8199, 99.99=11623] 
2023-06-05 12:38:04:800 340 sec: 19070349 operations; 56272.38 current ops/sec; [READ: Count=281312, Max=31807, Min=507, Avg=3478.3, 90=5287, 99=9063, 99.9=21535, 99.99=25183] [UPDATE: Count=281019, Max=20127, Min=440, Avg=1912.63, 90=2845, 99=4375, 99.9=7955, 99.99=10479] 
2023-06-05 12:38:14:800 350 sec: 19632863 operations; 56251.4 current ops/sec; [READ: Count=281683, Max=32159, Min=527, Avg=3467.11, 90=5235, 99=8647, 99.9=20367, 99.99=23951] [UPDATE: Count=280778, Max=15391, Min=429, Avg=1912.81, 90=2835, 99=4175, 99.9=6823, 99.99=8695] 
2023-06-05 12:38:24:800 360 sec: 20195396 operations; 56253.3 current ops/sec; [READ: Count=281138, Max=16303, Min=515, Avg=3367.43, 90=5107, 99=7415, 99.9=9831, 99.99=12447] [UPDATE: Count=281310, Max=12647, Min=447, Avg=1894.05, 90=2807, 99=3833, 99.9=6107, 99.99=9255] 
2023-06-05 12:38:34:800 370 sec: 20757872 operations; 56247.6 current ops/sec; [READ: Count=281952, Max=59615, Min=521, Avg=3386.55, 90=5143, 99=7611, 99.9=11855, 99.99=22111] [UPDATE: Count=280584, Max=11999, Min=442, Avg=1893.3, 90=2819, 99=3927, 99.9=6347, 99.99=8519] 
2023-06-05 12:38:44:800 380 sec: 21320380 operations; 56250.8 current ops/sec; [READ: Count=281650, Max=17599, Min=542, Avg=3373.77, 90=5139, 99=7555, 99.9=9863, 99.99=12567] [UPDATE: Count=280314, Max=26687, Min=452, Avg=1900.76, 90=2829, 99=4031, 99.9=6591, 99.99=17455] 
2023-06-05 12:38:54:800 390 sec: 21882848 operations; 56246.8 current ops/sec; [READ: Count=280918, Max=214399, Min=510, Avg=3527.32, 90=5263, 99=7751, 99.9=13991, 99.99=208767] [UPDATE: Count=282090, Max=208895, Min=410, Avg=1965.12, 90=2877, 99=4069, 99.9=6567, 99.99=202751] 
2023-06-05 12:39:04:800 400 sec: 22445333 operations; 56248.5 current ops/sec; [READ: Count=280983, Max=26415, Min=514, Avg=3546.15, 90=5423, 99=7947, 99.9=11383, 99.99=17695] [UPDATE: Count=281524, Max=16927, Min=441, Avg=1967.13, 90=2959, 99=4107, 99.9=6191, 99.99=8391] 
2023-06-05 12:39:14:800 410 sec: 23007849 operations; 56251.6 current ops/sec; [READ: Count=280769, Max=27423, Min=521, Avg=3601.79, 90=5523, 99=8255, 99.9=13039, 99.99=20927] [UPDATE: Count=281699, Max=12079, Min=420, Avg=1984.79, 90=2983, 99=4211, 99.9=6455, 99.99=8583] 
2023-06-05 12:39:24:800 420 sec: 23570347 operations; 56249.8 current ops/sec; [READ: Count=280883, Max=21503, Min=540, Avg=3644.19, 90=5583, 99=8215, 99.9=11631, 99.99=17103] [UPDATE: Count=281648, Max=10639, Min=438, Avg=2002.68, 90=3011, 99=4203, 99.9=6327, 99.99=7991] 
2023-06-05 12:39:34:800 430 sec: 24132841 operations; 56249.4 current ops/sec; [READ: Count=281485, Max=20303, Min=514, Avg=3680.52, 90=5659, 99=8327, 99.9=11199, 99.99=14879] [UPDATE: Count=280993, Max=9383, Min=443, Avg=2016.13, 90=3045, 99=4259, 99.9=6239, 99.99=7623] 
2023-06-05 12:39:44:800 440 sec: 24695343 operations; 56250.2 current ops/sec; [READ: Count=281703, Max=20591, Min=505, Avg=3663.76, 90=5611, 99=8191, 99.9=11543, 99.99=18143] [UPDATE: Count=280792, Max=19823, Min=439, Avg=2019.44, 90=3043, 99=4275, 99.9=6683, 99.99=14263] 
2023-06-05 12:39:54:800 450 sec: 25257817 operations; 56247.4 current ops/sec; [READ: Count=281269, Max=30719, Min=524, Avg=3701.39, 90=5679, 99=8639, 99.9=14743, 99.99=23151] [UPDATE: Count=281237, Max=20303, Min=433, Avg=2019.85, 90=3051, 99=4299, 99.9=6655, 99.99=11031] 
2023-06-05 12:40:04:800 460 sec: 25820120 operations; 56230.3 current ops/sec; [READ: Count=281390, Max=39935, Min=527, Avg=3793.67, 90=5775, 99=10239, 99.9=29039, 99.99=35231] [UPDATE: Count=280984, Max=16703, Min=425, Avg=2032, 90=3065, 99=4531, 99.9=7303, 99.99=9727] 
2023-06-05 12:40:14:800 470 sec: 26370595 operations; 55047.5 current ops/sec; [READ: Count=275026, Max=282367, Min=481, Avg=4530.87, 90=6339, 99=23599, 99.9=137983, 99.99=230527] [UPDATE: Count=275658, Max=13911, Min=425, Avg=2120.86, 90=3199, 99=5911, 99.9=8599, 99.99=10215] 
2023-06-05 12:40:24:800 480 sec: 26945201 operations; 57460.6 current ops/sec; [READ: Count=287257, Max=206335, Min=531, Avg=4351.63, 90=6031, 99=21279, 99.9=100863, 99.99=123327] [UPDATE: Count=287304, Max=24575, Min=426, Avg=2098.46, 90=3129, 99=5247, 99.9=8439, 99.99=10879] 
2023-06-05 12:40:34:800 490 sec: 27507836 operations; 56263.5 current ops/sec; [READ: Count=281382, Max=29695, Min=522, Avg=3704.21, 90=5671, 99=8847, 99.9=15191, 99.99=23487] [UPDATE: Count=281023, Max=14311, Min=424, Avg=2024.37, 90=3051, 99=4419, 99.9=6667, 99.99=8375] 
2023-06-05 12:40:44:800 500 sec: 28070364 operations; 56252.8 current ops/sec; [READ: Count=282096, Max=38431, Min=492, Avg=3738.1, 90=5739, 99=9391, 99.9=19791, 99.99=29071] [UPDATE: Count=280510, Max=17535, Min=435, Avg=2026, 90=3051, 99=4535, 99.9=7455, 99.99=12503] 
2023-06-05 12:40:54:800 510 sec: 28632661 operations; 56229.7 current ops/sec; [READ: Count=280298, Max=76735, Min=521, Avg=3721.42, 90=5695, 99=9351, 99.9=29407, 99.99=41823] [UPDATE: Count=281831, Max=27263, Min=424, Avg=2007.38, 90=3035, 99=4503, 99.9=7603, 99.99=11543] 
2023-06-05 12:41:04:800 520 sec: 29195338 operations; 56267.7 current ops/sec; [READ: Count=281591, Max=44287, Min=494, Avg=3715.03, 90=5731, 99=8695, 99.9=13855, 99.99=37087] [UPDATE: Count=281166, Max=17311, Min=428, Avg=2018.85, 90=3055, 99=4379, 99.9=6915, 99.99=11399] 
2023-06-05 12:41:14:800 530 sec: 29757806 operations; 56246.8 current ops/sec; [READ: Count=281148, Max=26687, Min=492, Avg=3758.14, 90=5787, 99=9247, 99.9=18015, 99.99=21487] [UPDATE: Count=281382, Max=13623, Min=437, Avg=2026.01, 90=3059, 99=4535, 99.9=7283, 99.99=9631] 
2023-06-05 12:41:24:800 540 sec: 30320155 operations; 56234.9 current ops/sec; [READ: Count=281075, Max=27679, Min=515, Avg=3769.54, 90=5819, 99=8943, 99.9=13695, 99.99=20463] [UPDATE: Count=281240, Max=10783, Min=444, Avg=2040.08, 90=3091, 99=4459, 99.9=6595, 99.99=8495] 
2023-06-05 12:41:34:800 550 sec: 30882771 operations; 56261.6 current ops/sec; [READ: Count=281716, Max=33087, Min=510, Avg=3879.49, 90=5935, 99=10359, 99.9=23423, 99.99=28671] [UPDATE: Count=280340, Max=26319, Min=430, Avg=2066.02, 90=3119, 99=4719, 99.9=8335, 99.99=14991] 
2023-06-05 12:41:44:800 560 sec: 31441515 operations; 55874.4 current ops/sec; [READ: Count=278937, Max=289535, Min=494, Avg=4036.6, 90=5943, 99=12375, 99.9=78143, 99.99=161791] [UPDATE: Count=280420, Max=21583, Min=435, Avg=2059.99, 90=3115, 99=4943, 99.9=8559, 99.99=10783] 
2023-06-05 12:41:54:800 570 sec: 31985697 operations; 54418.2 current ops/sec; [READ: Count=271838, Max=415743, Min=503, Avg=4983.13, 90=5699, 99=13615, 99.9=228351, 99.99=367103] [UPDATE: Count=272167, Max=19679, Min=426, Avg=2003.16, 90=3049, 99=4879, 99.9=8423, 99.99=12959] 
2023-06-05 12:42:04:800 580 sec: 32539849 operations; 55415.2 current ops/sec; [READ: Count=277170, Max=300543, Min=471, Avg=4993.38, 90=6043, 99=19759, 99.9=228351, 99.99=270591] [UPDATE: Count=277341, Max=18527, Min=409, Avg=2082.08, 90=3139, 99=4955, 99.9=8071, 99.99=10831] 
2023-06-05 12:42:14:800 590 sec: 33063825 operations; 52397.6 current ops/sec; [READ: Count=262275, Max=317183, Min=497, Avg=5406.25, 90=7099, 99=26319, 99.9=191743, 99.99=282367] [UPDATE: Count=261599, Max=14087, Min=422, Avg=2174.94, 90=3307, 99=6595, 99.9=8839, 99.99=10695] 
2023-06-05 12:42:24:800 600 sec: 33555020 operations; 49119.5 current ops/sec; [READ: Count=245226, Max=555007, Min=484, Avg=6021.74, 90=6683, 99=45279, 99.9=325887, 99.99=330239] [UPDATE: Count=246098, Max=12207, Min=400, Avg=2114.3, 90=3259, 99=6359, 99.9=8863, 99.99=10583] 
2023-06-05 12:42:34:800 610 sec: 34074758 operations; 51973.8 current ops/sec; [READ: Count=259778, Max=355583, Min=503, Avg=5519.37, 90=7039, 99=34335, 99.9=231935, 99.99=326143] [UPDATE: Count=259471, Max=26367, Min=428, Avg=2196.54, 90=3361, 99=6359, 99.9=9047, 99.99=14807] 
2023-06-05 12:42:44:800 620 sec: 34621557 operations; 54679.9 current ops/sec; [READ: Count=273869, Max=290047, Min=539, Avg=5074.6, 90=7111, 99=29359, 99.9=157951, 99.99=189311] [UPDATE: Count=273410, Max=19679, Min=440, Avg=2233.51, 90=3389, 99=6083, 99.9=8223, 99.99=9759] 
2023-06-05 12:42:54:800 630 sec: 35176889 operations; 55533.2 current ops/sec; [READ: Count=277295, Max=253567, Min=504, Avg=4990.01, 90=6771, 99=30479, 99.9=135167, 99.99=159615] [UPDATE: Count=278161, Max=25711, Min=433, Avg=2208.94, 90=3331, 99=5827, 99.9=8303, 99.99=10775] 
2023-06-05 12:43:04:800 640 sec: 35743962 operations; 56707.3 current ops/sec; [READ: Count=282492, Max=160639, Min=539, Avg=4839.56, 90=6723, 99=18943, 99.9=122239, 99.99=139007] [UPDATE: Count=284560, Max=19407, Min=437, Avg=2224.42, 90=3337, 99=5451, 99.9=7951, 99.99=10311] 
2023-06-05 12:43:14:800 650 sec: 36302650 operations; 55868.8 current ops/sec; [READ: Count=279179, Max=280063, Min=484, Avg=4929.49, 90=6719, 99=20927, 99.9=160767, 99.99=177023] [UPDATE: Count=279530, Max=14343, Min=432, Avg=2229.57, 90=3333, 99=5639, 99.9=8271, 99.99=10711] 
2023-06-05 12:43:24:800 660 sec: 36868672 operations; 56602.2 current ops/sec; [READ: Count=283173, Max=258687, Min=500, Avg=4805.17, 90=6835, 99=18351, 99.9=114367, 99.99=210431] [UPDATE: Count=282928, Max=20127, Min=443, Avg=2258.5, 90=3381, 99=5611, 99.9=8163, 99.99=9775] 
2023-06-05 12:43:34:800 670 sec: 37452945 operations; 58427.3 current ops/sec; [READ: Count=291708, Max=30367, Min=468, Avg=4533.95, 90=6999, 99=12311, 99.9=21039, 99.99=25183] [UPDATE: Count=292268, Max=11951, Min=437, Avg=2312.21, 90=3427, 99=5135, 99.9=7351, 99.99=8999] 
2023-06-05 12:43:44:800 680 sec: 38035063 operations; 58211.8 current ops/sec; [READ: Count=291072, Max=31743, Min=535, Avg=4539.48, 90=6963, 99=12055, 99.9=20623, 99.99=24079] [UPDATE: Count=290964, Max=13591, Min=441, Avg=2329.04, 90=3443, 99=5095, 99.9=7375, 99.99=9135] 
2023-06-05 12:43:54:800 690 sec: 38606463 operations; 57140 current ops/sec; [READ: Count=285871, Max=122367, Min=493, Avg=4679.67, 90=6779, 99=14039, 99.9=82943, 99.99=88511] [UPDATE: Count=285703, Max=27647, Min=433, Avg=2315.79, 90=3415, 99=5227, 99.9=8107, 99.99=11703] 
2023-06-05 12:44:04:800 700 sec: 39175578 operations; 56911.5 current ops/sec; [READ: Count=284547, Max=83071, Min=546, Avg=4681.7, 90=6875, 99=14863, 99.9=52575, 99.99=73855] [UPDATE: Count=284565, Max=17727, Min=441, Avg=2342.93, 90=3447, 99=5327, 99.9=8599, 99.99=10863] 
2023-06-05 12:44:14:800 710 sec: 39739928 operations; 56435 current ops/sec; [READ: Count=282006, Max=163711, Min=511, Avg=4710.56, 90=6891, 99=16431, 99.9=40991, 99.99=67135] [UPDATE: Count=282312, Max=25231, Min=432, Avg=2372.25, 90=3459, 99=5527, 99.9=8959, 99.99=14759] 
2023-06-05 12:44:24:800 720 sec: 40285077 operations; 54514.9 current ops/sec; [READ: Count=272556, Max=219391, Min=463, Avg=4983.42, 90=6767, 99=20479, 99.9=135039, 99.99=151935] [UPDATE: Count=272296, Max=21455, Min=427, Avg=2356.67, 90=3443, 99=5927, 99.9=9255, 99.99=13047] 
2023-06-05 12:44:34:800 730 sec: 40840561 operations; 55548.4 current ops/sec; [READ: Count=277076, Max=41151, Min=513, Avg=4784.71, 90=7115, 99=16399, 99.9=33343, 99.99=37407] [UPDATE: Count=278740, Max=19007, Min=440, Avg=2412.54, 90=3525, 99=5695, 99.9=8863, 99.99=11343] 
2023-06-05 12:44:44:800 740 sec: 41396083 operations; 55552.2 current ops/sec; [READ: Count=277936, Max=51327, Min=538, Avg=4795.8, 90=7087, 99=18335, 99.9=31279, 99.99=36127] [UPDATE: Count=277435, Max=13671, Min=448, Avg=2402.79, 90=3509, 99=5775, 99.9=8967, 99.99=10759] 
2023-06-05 12:44:54:800 750 sec: 41956538 operations; 56045.5 current ops/sec; [READ: Count=280668, Max=50207, Min=521, Avg=4735.54, 90=7023, 99=16719, 99.9=27615, 99.99=33951] [UPDATE: Count=279967, Max=32207, Min=441, Avg=2393.68, 90=3495, 99=5583, 99.9=8775, 99.99=12231] 
2023-06-05 12:45:04:800 760 sec: 42515856 operations; 55931.8 current ops/sec; [READ: Count=278618, Max=42015, Min=528, Avg=4751.69, 90=6947, 99=18479, 99.9=27231, 99.99=32095] [UPDATE: Count=280448, Max=19695, Min=430, Avg=2405.65, 90=3491, 99=5795, 99.9=9247, 99.99=11759] 
2023-06-05 12:45:14:800 770 sec: 43046210 operations; 53035.4 current ops/sec; [READ: Count=265233, Max=540159, Min=518, Avg=5150.64, 90=6891, 99=22543, 99.9=248191, 99.99=276735] [UPDATE: Count=265145, Max=13399, Min=423, Avg=2370.39, 90=3477, 99=5875, 99.9=9047, 99.99=10799] 
2023-06-05 12:45:24:800 780 sec: 43573627 operations; 52741.7 current ops/sec; [READ: Count=263713, Max=372479, Min=479, Avg=5299.85, 90=6427, 99=18399, 99.9=273151, 99.99=276735] [UPDATE: Count=263819, Max=12319, Min=420, Avg=2285.16, 90=3355, 99=5379, 99.9=8271, 99.99=10047] 
2023-06-05 12:45:34:800 790 sec: 44126968 operations; 55334.1 current ops/sec; [READ: Count=276645, Max=280575, Min=522, Avg=4912.65, 90=6719, 99=13367, 99.9=228095, 99.99=273919] [UPDATE: Count=276803, Max=12975, Min=437, Avg=2326.97, 90=3409, 99=5123, 99.9=7579, 99.99=9383] 
2023-06-05 12:45:44:800 800 sec: 44699685 operations; 57271.7 current ops/sec; [READ: Count=286447, Max=60767, Min=483, Avg=4599.11, 90=6947, 99=10815, 99.9=17919, 99.99=28895] [UPDATE: Count=286092, Max=11055, Min=410, Avg=2381.24, 90=3467, 99=4895, 99.9=6971, 99.99=8599] 
2023-06-05 12:45:54:800 810 sec: 45268045 operations; 56836 current ops/sec; [READ: Count=284710, Max=41503, Min=516, Avg=4630.07, 90=6967, 99=11215, 99.9=18927, 99.99=29439] [UPDATE: Count=283591, Max=22543, Min=442, Avg=2400.6, 90=3485, 99=5043, 99.9=7203, 99.99=9679] 
2023-06-05 12:46:04:800 820 sec: 45839545 operations; 57150 current ops/sec; [READ: Count=285705, Max=26559, Min=529, Avg=4592.9, 90=6839, 99=10359, 99.9=15111, 99.99=20175] [UPDATE: Count=285760, Max=17823, Min=426, Avg=2403.41, 90=3473, 99=4851, 99.9=6879, 99.99=8847] 
2023-06-05 12:46:14:800 830 sec: 46409132 operations; 56958.7 current ops/sec; [READ: Count=285197, Max=107967, Min=516, Avg=4617.11, 90=6859, 99=10751, 99.9=21583, 99.99=40799] [UPDATE: Count=284541, Max=13407, Min=436, Avg=2399.56, 90=3467, 99=4927, 99.9=7011, 99.99=9191] 
2023-06-05 12:46:24:800 840 sec: 46978770 operations; 56963.8 current ops/sec; [READ: Count=284622, Max=33215, Min=489, Avg=4604.15, 90=6835, 99=10151, 99.9=14815, 99.99=21791] [UPDATE: Count=284907, Max=16271, Min=453, Avg=2416.24, 90=3479, 99=4819, 99.9=6923, 99.99=10495] 
2023-06-05 12:46:34:800 850 sec: 47535460 operations; 55669 current ops/sec; [READ: Count=278386, Max=89791, Min=509, Avg=4730.64, 90=6851, 99=12519, 99.9=31855, 99.99=53663] [UPDATE: Count=278457, Max=12583, Min=443, Avg=2451.5, 90=3499, 99=5223, 99.9=8199, 99.99=10471] 
2023-06-05 12:46:44:800 860 sec: 48089841 operations; 55438.1 current ops/sec; [READ: Count=276998, Max=38463, Min=496, Avg=4745.89, 90=6911, 99=11983, 99.9=25055, 99.99=29967] [UPDATE: Count=277345, Max=17215, Min=439, Avg=2468.03, 90=3523, 99=5115, 99.9=7999, 99.99=10711] 
2023-06-05 12:46:54:800 870 sec: 48645509 operations; 55566.8 current ops/sec; [READ: Count=277732, Max=34879, Min=498, Avg=4731.49, 90=6891, 99=11671, 99.9=24975, 99.99=29151] [UPDATE: Count=277906, Max=18095, Min=405, Avg=2464.75, 90=3517, 99=5147, 99.9=8151, 99.99=11007] 
2023-06-05 12:47:04:800 880 sec: 49198276 operations; 55276.7 current ops/sec; [READ: Count=276205, Max=34719, Min=514, Avg=4768.9, 90=6979, 99=13183, 99.9=24287, 99.99=28287] [UPDATE: Count=276465, Max=17679, Min=452, Avg=2465.89, 90=3533, 99=5335, 99.9=8207, 99.99=10679] 
2023-06-05 12:47:14:800 890 sec: 49748192 operations; 54991.6 current ops/sec; [READ: Count=274894, Max=76543, Min=532, Avg=4810.99, 90=6999, 99=15079, 99.9=28367, 99.99=55967] [UPDATE: Count=275065, Max=28063, Min=449, Avg=2460.18, 90=3511, 99=5467, 99.9=8519, 99.99=10295] 
2023-06-05 12:47:24:800 900 sec: 50296902 operations; 54871 current ops/sec; [READ: Count=274541, Max=62367, Min=533, Avg=4829.4, 90=6987, 99=17631, 99.9=27279, 99.99=51967] [UPDATE: Count=274165, Max=23871, Min=455, Avg=2455.29, 90=3501, 99=5867, 99.9=9031, 99.99=14935] 
2023-06-05 12:47:34:800 910 sec: 50846271 operations; 54936.9 current ops/sec; [READ: Count=274507, Max=46207, Min=523, Avg=4807.12, 90=6907, 99=15703, 99.9=25887, 99.99=30655] [UPDATE: Count=274942, Max=12999, Min=472, Avg=2472.49, 90=3505, 99=5471, 99.9=8367, 99.99=10431] 
2023-06-05 12:47:44:800 920 sec: 51399217 operations; 55294.6 current ops/sec; [READ: Count=276487, Max=42879, Min=512, Avg=4765.53, 90=6823, 99=13311, 99.9=26255, 99.99=31455] [UPDATE: Count=276448, Max=11223, Min=459, Avg=2465.73, 90=3489, 99=5063, 99.9=7507, 99.99=9431] 
2023-06-05 12:47:54:800 930 sec: 51952776 operations; 55355.9 current ops/sec; [READ: Count=276754, Max=35199, Min=531, Avg=4757.93, 90=6835, 99=13303, 99.9=24063, 99.99=27983] [UPDATE: Count=276711, Max=17807, Min=455, Avg=2465.05, 90=3487, 99=5067, 99.9=7387, 99.99=9455] 
2023-06-05 12:48:04:800 940 sec: 52508526 operations; 55575 current ops/sec; [READ: Count=278502, Max=29727, Min=538, Avg=4722.23, 90=6883, 99=11431, 99.9=21455, 99.99=25455] [UPDATE: Count=277246, Max=18575, Min=440, Avg=2467.89, 90=3511, 99=5055, 99.9=7355, 99.99=10887] 
2023-06-05 12:48:14:800 950 sec: 53065150 operations; 55662.4 current ops/sec; [READ: Count=278048, Max=34879, Min=495, Avg=4730.09, 90=6967, 99=11655, 99.9=20895, 99.99=24271] [UPDATE: Count=278643, Max=10191, Min=444, Avg=2454.47, 90=3509, 99=5067, 99.9=7183, 99.99=8559] 
2023-06-05 12:48:24:800 960 sec: 53626835 operations; 56168.5 current ops/sec; [READ: Count=280976, Max=30847, Min=478, Avg=4679.1, 90=6883, 99=11263, 99.9=20239, 99.99=23983] [UPDATE: Count=280640, Max=12663, Min=432, Avg=2438.49, 90=3485, 99=5027, 99.9=7311, 99.99=9183] 
2023-06-05 12:48:34:800 970 sec: 54190818 operations; 56398.3 current ops/sec; [READ: Count=282441, Max=39967, Min=535, Avg=4656.87, 90=6867, 99=10831, 99.9=20271, 99.99=30255] [UPDATE: Count=281589, Max=11655, Min=432, Avg=2428.66, 90=3473, 99=4983, 99.9=7419, 99.99=9215] 
2023-06-05 12:48:44:800 980 sec: 54750517 operations; 55969.9 current ops/sec; [READ: Count=279851, Max=114367, Min=509, Avg=4727.16, 90=6783, 99=12079, 99.9=50047, 99.99=75519] [UPDATE: Count=279847, Max=16047, Min=432, Avg=2415.42, 90=3451, 99=5067, 99.9=7799, 99.99=9823] 
2023-06-05 12:48:54:800 990 sec: 55305220 operations; 55470.3 current ops/sec; [READ: Count=277774, Max=100159, Min=516, Avg=4793.87, 90=6783, 99=12007, 99.9=69375, 99.99=76799] [UPDATE: Count=276931, Max=29151, Min=423, Avg=2411.64, 90=3449, 99=5051, 99.9=7643, 99.99=10015] 
2023-06-05 12:49:04:800 1000 sec: 55864095 operations; 55887.5 current ops/sec; [READ: Count=279286, Max=101055, Min=526, Avg=4732.19, 90=6847, 99=11727, 99.9=48607, 99.99=67071] [UPDATE: Count=279060, Max=68927, Min=427, Avg=2428.69, 90=3459, 99=5015, 99.9=8287, 99.99=64415] 
2023-06-05 12:49:14:800 1010 sec: 56425884 operations; 56178.9 current ops/sec; [READ: Count=281186, Max=37663, Min=505, Avg=4706.34, 90=6935, 99=13231, 99.9=28015, 99.99=32175] [UPDATE: Count=281113, Max=15487, Min=421, Avg=2403, 90=3473, 99=5035, 99.9=7507, 99.99=10383] 
2023-06-05 12:49:24:800 1020 sec: 56996817 operations; 57093.3 current ops/sec; [READ: Count=285759, Max=35807, Min=494, Avg=4602.92, 90=6855, 99=10703, 99.9=19647, 99.99=28223] [UPDATE: Count=285191, Max=10631, Min=440, Avg=2397.78, 90=3471, 99=4919, 99.9=6971, 99.99=8895] 
2023-06-05 12:49:34:800 1030 sec: 57564637 operations; 56782 current ops/sec; [READ: Count=283601, Max=29951, Min=534, Avg=4620.83, 90=6827, 99=10535, 99.9=16431, 99.99=23631] [UPDATE: Count=284175, Max=12303, Min=438, Avg=2423.13, 90=3483, 99=4867, 99.9=7003, 99.99=8815] 
2023-06-05 12:49:44:800 1040 sec: 58130091 operations; 56545.4 current ops/sec; [READ: Count=282383, Max=36639, Min=499, Avg=4660.99, 90=6859, 99=12063, 99.9=24895, 99.99=29599] [UPDATE: Count=282871, Max=16119, Min=438, Avg=2414.89, 90=3481, 99=5031, 99.9=7863, 99.99=10935] 
2023-06-05 12:49:54:800 1050 sec: 58690949 operations; 56085.8 current ops/sec; [READ: Count=280505, Max=39199, Min=524, Avg=4711.49, 90=6951, 99=13167, 99.9=25263, 99.99=29903] [UPDATE: Count=280639, Max=24335, Min=449, Avg=2414.5, 90=3473, 99=5147, 99.9=8015, 99.99=10327] 
2023-06-05 12:50:04:800 1060 sec: 59257118 operations; 56616.9 current ops/sec; [READ: Count=283062, Max=37119, Min=558, Avg=4664.95, 90=6919, 99=11863, 99.9=24575, 99.99=29711] [UPDATE: Count=282829, Max=17743, Min=406, Avg=2399.92, 90=3457, 99=5039, 99.9=7675, 99.99=12559] 
2023-06-05 12:50:14:800 1070 sec: 59789298 operations; 53218 current ops/sec; [READ: Count=266146, Max=211071, Min=491, Avg=5116.51, 90=7071, 99=22751, 99.9=112767, 99.99=146303] [UPDATE: Count=266380, Max=17279, Min=408, Avg=2391.26, 90=3471, 99=5767, 99.9=8463, 99.99=10639] 
2023-06-05 12:50:24:800 1080 sec: 60350683 operations; 56138.5 current ops/sec; [READ: Count=281076, Max=121151, Min=496, Avg=4724.2, 90=6967, 99=12919, 99.9=28287, 99.99=113983] [UPDATE: Count=280151, Max=13231, Min=441, Avg=2397.47, 90=3455, 99=5147, 99.9=8043, 99.99=10631] 
2023-06-05 12:50:34:800 1090 sec: 60911337 operations; 56065.4 current ops/sec; [READ: Count=280282, Max=36703, Min=523, Avg=4715.62, 90=6971, 99=13159, 99.9=26159, 99.99=30543] [UPDATE: Count=280501, Max=13119, Min=422, Avg=2415.91, 90=3471, 99=5123, 99.9=8075, 99.99=10191] 
2023-06-05 12:50:44:800 1100 sec: 61472311 operations; 56097.4 current ops/sec; [READ: Count=280372, Max=48159, Min=510, Avg=4707.81, 90=6963, 99=12455, 99.9=25263, 99.99=29455] [UPDATE: Count=280475, Max=21183, Min=431, Avg=2420.39, 90=3471, 99=5107, 99.9=7923, 99.99=11279] 
2023-06-05 12:50:54:800 1110 sec: 62034953 operations; 56264.2 current ops/sec; [READ: Count=281252, Max=133759, Min=504, Avg=4701.46, 90=6939, 99=12543, 99.9=27007, 99.99=69695] [UPDATE: Count=281514, Max=18815, Min=434, Avg=2405.05, 90=3469, 99=5091, 99.9=7815, 99.99=10623] 
2023-06-05 12:51:04:800 1120 sec: 62593288 operations; 55833.5 current ops/sec; [READ: Count=279006, Max=106879, Min=524, Avg=4766.9, 90=6847, 99=12047, 99.9=69439, 99.99=75775] [UPDATE: Count=279336, Max=17983, Min=417, Avg=2395.18, 90=3455, 99=5079, 99.9=8155, 99.99=10903] 
2023-06-05 12:51:14:800 1130 sec: 63155352 operations; 56206.4 current ops/sec; [READ: Count=280169, Max=69375, Min=522, Avg=4729.3, 90=6911, 99=13463, 99.9=51839, 99.99=64287] [UPDATE: Count=281976, Max=24239, Min=435, Avg=2392.97, 90=3451, 99=5295, 99.9=8575, 99.99=10495] 
2023-06-05 12:51:24:800 1140 sec: 63705428 operations; 55007.6 current ops/sec; [READ: Count=274963, Max=184319, Min=477, Avg=4883.59, 90=6955, 99=18735, 99.9=87807, 99.99=119039] [UPDATE: Count=275135, Max=14007, Min=427, Avg=2384.97, 90=3445, 99=5899, 99.9=9151, 99.99=11007] 
2023-06-05 12:51:34:800 1150 sec: 64270641 operations; 56521.3 current ops/sec; [READ: Count=282336, Max=37311, Min=465, Avg=4697.07, 90=6955, 99=16327, 99.9=27807, 99.99=32287] [UPDATE: Count=282716, Max=22527, Min=451, Avg=2379.26, 90=3445, 99=5635, 99.9=9071, 99.99=10775] 
2023-06-05 12:51:44:800 1160 sec: 64841308 operations; 57066.7 current ops/sec; [READ: Count=285646, Max=36511, Min=520, Avg=4643.69, 90=6899, 99=15095, 99.9=25407, 99.99=29343] [UPDATE: Count=285010, Max=24831, Min=420, Avg=2360.39, 90=3433, 99=5491, 99.9=8455, 99.99=10287] 
2023-06-05 12:51:54:800 1170 sec: 65427773 operations; 58646.5 current ops/sec; [READ: Count=292549, Max=33695, Min=544, Avg=4498.91, 90=6747, 99=13087, 99.9=22959, 99.99=27151] [UPDATE: Count=293979, Max=16751, Min=442, Avg=2323.77, 90=3397, 99=5175, 99.9=8135, 99.99=10959] 
2023-06-05 12:52:04:800 1180 sec: 66009639 operations; 58186.6 current ops/sec; [READ: Count=291540, Max=48959, Min=535, Avg=4541.34, 90=6779, 99=14807, 99.9=25039, 99.99=30079] [UPDATE: Count=290267, Max=19391, Min=432, Avg=2325.11, 90=3399, 99=5311, 99.9=8303, 99.99=11175] 
2023-06-05 12:52:14:800 1190 sec: 66576694 operations; 56705.5 current ops/sec; [READ: Count=283316, Max=143999, Min=498, Avg=4723.16, 90=6783, 99=16383, 99.9=82559, 99.99=90495] [UPDATE: Count=283878, Max=19455, Min=437, Avg=2329.25, 90=3403, 99=5387, 99.9=8591, 99.99=12991] 
2023-06-05 12:52:24:800 1200 sec: 67169712 operations; 59301.8 current ops/sec; [READ: Count=296856, Max=74367, Min=515, Avg=4433.06, 90=6675, 99=10903, 99.9=22287, 99.99=67519] [UPDATE: Count=296052, Max=23055, Min=450, Avg=2307.05, 90=3377, 99=4911, 99.9=7055, 99.99=8527] 
2023-06-05 12:52:34:800 1210 sec: 67770132 operations; 60042 current ops/sec; [READ: Count=300228, Max=31775, Min=501, Avg=4373.92, 90=6639, 99=10463, 99.9=16207, 99.99=25583] [UPDATE: Count=300117, Max=12023, Min=439, Avg=2285.77, 90=3353, 99=4839, 99.9=6927, 99.99=8495] 
2023-06-05 12:52:44:800 1220 sec: 68363321 operations; 59318.9 current ops/sec; [READ: Count=296893, Max=33535, Min=527, Avg=4441.37, 90=6787, 99=11199, 99.9=17759, 99.99=25327] [UPDATE: Count=296332, Max=12527, Min=450, Avg=2295.57, 90=3365, 99=4899, 99.9=7099, 99.99=8591] 
2023-06-05 12:52:54:800 1230 sec: 68944517 operations; 58119.6 current ops/sec; [READ: Count=291200, Max=227455, Min=509, Avg=4573.66, 90=6723, 99=11615, 99.9=66879, 99.99=173183] [UPDATE: Count=290069, Max=32655, Min=437, Avg=2298.24, 90=3367, 99=5027, 99.9=7355, 99.99=10767] 
2023-06-05 12:53:04:800 1240 sec: 69534481 operations; 58996.4 current ops/sec; [READ: Count=294656, Max=44351, Min=531, Avg=4464.11, 90=6767, 99=11135, 99.9=27487, 99.99=34207] [UPDATE: Count=295222, Max=19871, Min=447, Avg=2308.68, 90=3381, 99=4955, 99.9=7379, 99.99=9711] 
2023-06-05 12:53:14:800 1250 sec: 70119453 operations; 58497.2 current ops/sec; [READ: Count=292926, Max=34431, Min=531, Avg=4501.08, 90=6859, 99=12039, 99.9=19567, 99.99=27359] [UPDATE: Count=292084, Max=11863, Min=456, Avg=2319.63, 90=3405, 99=5203, 99.9=7599, 99.99=9399] 
2023-06-05 12:53:24:800 1260 sec: 70706839 operations; 58738.6 current ops/sec; [READ: Count=294142, Max=54623, Min=505, Avg=4460.42, 90=6747, 99=11135, 99.9=22095, 99.99=42719] [UPDATE: Count=293222, Max=11975, Min=427, Avg=2313.75, 90=3393, 99=4983, 99.9=7603, 99.99=9799] 
2023-06-05 12:53:34:800 1270 sec: 71282701 operations; 57586.2 current ops/sec; [READ: Count=287985, Max=178303, Min=513, Avg=4579.07, 90=6867, 99=13591, 99.9=29727, 99.99=103807] [UPDATE: Count=287874, Max=14487, Min=451, Avg=2325.34, 90=3413, 99=5215, 99.9=8447, 99.99=10511] 
2023-06-05 12:53:44:800 1280 sec: 71842802 operations; 56010.1 current ops/sec; [READ: Count=279728, Max=233087, Min=521, Avg=4833.83, 90=6683, 99=12279, 99.9=157823, 99.99=166655] [UPDATE: Count=280351, Max=25871, Min=442, Avg=2291.06, 90=3377, 99=5043, 99.9=8043, 99.99=10015] 
2023-06-05 12:53:54:800 1290 sec: 72412828 operations; 57002.6 current ops/sec; [READ: Count=285631, Max=134143, Min=531, Avg=4664.31, 90=6879, 99=13423, 99.9=51135, 99.99=110591] [UPDATE: Count=284525, Max=25615, Min=451, Avg=2334.82, 90=3441, 99=5187, 99.9=7795, 99.99=10959] 
2023-06-05 12:54:04:800 1300 sec: 72989038 operations; 57621 current ops/sec; [READ: Count=287974, Max=104127, Min=508, Avg=4623.3, 90=6739, 99=14639, 99.9=62015, 99.99=79679] [UPDATE: Count=288194, Max=17183, Min=434, Avg=2284.49, 90=3363, 99=5239, 99.9=8527, 99.99=11039] 
2023-06-05 12:54:14:800 1310 sec: 73550000 operations; 56096.2 current ops/sec; [READ: Count=279938, Max=247295, Min=502, Avg=4817.48, 90=6763, 99=20623, 99.9=158079, 99.99=171263] [UPDATE: Count=281015, Max=14447, Min=434, Avg=2275.9, 90=3357, 99=5727, 99.9=9431, 99.99=11535] 
2023-06-05 12:54:24:800 1320 sec: 74098459 operations; 54845.9 current ops/sec; [READ: Count=274213, Max=170623, Min=539, Avg=4999.63, 90=6935, 99=24223, 99.9=114943, 99.99=162943] [UPDATE: Count=274270, Max=13759, Min=433, Avg=2282.21, 90=3381, 99=6095, 99.9=9303, 99.99=11215] 
2023-06-05 12:54:34:800 1330 sec: 74655144 operations; 55668.5 current ops/sec; [READ: Count=278631, Max=96447, Min=476, Avg=4870.56, 90=7119, 99=23903, 99.9=60223, 99.99=74111] [UPDATE: Count=278051, Max=19503, Min=435, Avg=2308.99, 90=3417, 99=6135, 99.9=9439, 99.99=11471] 
2023-06-05 12:54:44:799 1340 sec: 75211027 operations; 55588.3 current ops/sec; [READ: Count=278428, Max=178303, Min=517, Avg=4887.81, 90=7115, 99=22911, 99.9=95871, 99.99=107839] [UPDATE: Count=277485, Max=13759, Min=450, Avg=2299.69, 90=3413, 99=5847, 99.9=8759, 99.99=10783] 
2023-06-05 12:54:54:800 1350 sec: 75776626 operations; 56559.9 current ops/sec; [READ: Count=282371, Max=128703, Min=506, Avg=4745.33, 90=7163, 99=15999, 99.9=40031, 99.99=100863] [UPDATE: Count=283154, Max=18271, Min=417, Avg=2327.34, 90=3443, 99=5427, 99.9=8279, 99.99=10855] 
2023-06-05 12:55:04:800 1360 sec: 76349489 operations; 57286.3 current ops/sec; [READ: Count=285787, Max=68287, Min=538, Avg=4649.04, 90=7083, 99=13743, 99.9=27871, 99.99=35103] [UPDATE: Count=287020, Max=18495, Min=426, Avg=2330.86, 90=3441, 99=5231, 99.9=7851, 99.99=10159] 
2023-06-05 12:55:14:800 1370 sec: 76892178 operations; 54268.9 current ops/sec; [READ: Count=271795, Max=134655, Min=496, Avg=5002.85, 90=7339, 99=22783, 99.9=79999, 99.99=86655] [UPDATE: Count=270624, Max=20079, Min=442, Avg=2360.73, 90=3491, 99=6163, 99.9=9047, 99.99=12607] 
2023-06-05 12:55:24:800 1380 sec: 77445184 operations; 55300.6 current ops/sec; [READ: Count=276804, Max=90495, Min=529, Avg=4882.75, 90=7111, 99=19439, 99.9=79231, 99.99=85567] [UPDATE: Count=276535, Max=15447, Min=414, Avg=2342.37, 90=3467, 99=5639, 99.9=8727, 99.99=10759] 
2023-06-05 12:55:34:800 1390 sec: 77964146 operations; 51896.2 current ops/sec; [READ: Count=259949, Max=536575, Min=507, Avg=5496.72, 90=6407, 99=19343, 99.9=328959, 99.99=416511] [UPDATE: Count=259007, Max=14551, Min=425, Avg=2184.33, 90=3283, 99=5455, 99.9=8871, 99.99=10999] 
2023-06-05 12:55:44:799 1400 sec: 78488425 operations; 52427.9 current ops/sec; [READ: Count=262565, Max=409087, Min=486, Avg=5468.94, 90=6391, 99=18559, 99.9=370431, 99.99=397311] [UPDATE: Count=261960, Max=12119, Min=425, Avg=2165.42, 90=3269, 99=5315, 99.9=8407, 99.99=10335] 
2023-06-05 12:55:54:800 1410 sec: 79027981 operations; 53955.6 current ops/sec; [READ: Count=269643, Max=864767, Min=481, Avg=5221.66, 90=6615, 99=13839, 99.9=378623, 99.99=448767] [UPDATE: Count=269771, Max=16847, Min=413, Avg=2193.73, 90=3313, 99=5095, 99.9=7975, 99.99=10431] 
2023-06-05 12:56:04:800 1420 sec: 79584423 operations; 55644.2 current ops/sec; [READ: Count=278691, Max=122303, Min=515, Avg=4864.26, 90=7339, 99=21535, 99.9=51519, 99.99=107455] [UPDATE: Count=277739, Max=21311, Min=434, Avg=2316.78, 90=3469, 99=5823, 99.9=8695, 99.99=11335] 
2023-06-05 12:56:14:800 1430 sec: 80145305 operations; 56088.2 current ops/sec; [READ: Count=280563, Max=175231, Min=506, Avg=4810.31, 90=7251, 99=19183, 99.9=52831, 99.99=99711] [UPDATE: Count=280261, Max=14343, Min=444, Avg=2317.59, 90=3469, 99=5711, 99.9=8567, 99.99=10519] 
2023-06-05 12:56:24:800 1440 sec: 80695488 operations; 55018.3 current ops/sec; [READ: Count=274735, Max=189695, Min=528, Avg=4963.17, 90=7243, 99=23215, 99.9=98303, 99.99=139007] [UPDATE: Count=275502, Max=21615, Min=421, Avg=2307.95, 90=3459, 99=5967, 99.9=8999, 99.99=15543] 
2023-06-05 12:56:34:800 1450 sec: 81256548 operations; 56106 current ops/sec; [READ: Count=280656, Max=100031, Min=529, Avg=4804, 90=7359, 99=17279, 99.9=40927, 99.99=83263] [UPDATE: Count=280338, Max=24991, Min=422, Avg=2319.87, 90=3471, 99=5503, 99.9=8583, 99.99=23359] 
2023-06-05 12:56:44:799 1460 sec: 81817987 operations; 56143.9 current ops/sec; [READ: Count=279352, Max=65023, Min=492, Avg=4830.59, 90=7535, 99=17119, 99.9=33471, 99.99=55615] [UPDATE: Count=282123, Max=15879, Min=417, Avg=2304.01, 90=3465, 99=5439, 99.9=7959, 99.99=9735] 
2023-06-05 12:56:54:799 1470 sec: 82370878 operations; 55289.1 current ops/sec; [READ: Count=276507, Max=192639, Min=502, Avg=4924.97, 90=7327, 99=22447, 99.9=63327, 99.99=100927] [UPDATE: Count=276423, Max=17599, Min=432, Avg=2303.99, 90=3461, 99=5775, 99.9=8495, 99.99=11087] 
2023-06-05 12:57:04:800 1480 sec: 82919760 operations; 54888.2 current ops/sec; [READ: Count=274546, Max=294911, Min=520, Avg=5037.86, 90=6867, 99=18415, 99.9=162431, 99.99=215807] [UPDATE: Count=274313, Max=19199, Min=431, Avg=2244.97, 90=3375, 99=5275, 99.9=8047, 99.99=10887] 
2023-06-05 12:57:14:799 1490 sec: 83471440 operations; 55168 current ops/sec; [READ: Count=276424, Max=172671, Min=517, Avg=4947.06, 90=7115, 99=15647, 99.9=136191, 99.99=164479] [UPDATE: Count=275247, Max=12591, Min=440, Avg=2296.1, 90=3447, 99=5327, 99.9=7695, 99.99=9519] 
2023-06-05 12:57:24:800 1500 sec: 84032585 operations; 56114.5 current ops/sec; [READ: Count=280314, Max=137855, Min=540, Avg=4800.83, 90=7195, 99=14447, 99.9=71935, 99.99=110143] [UPDATE: Count=280861, Max=15047, Min=449, Avg=2328.59, 90=3463, 99=5251, 99.9=7363, 99.99=9135] 
2023-06-05 12:57:34:800 1510 sec: 84587007 operations; 55442.2 current ops/sec; [READ: Count=277367, Max=321535, Min=462, Avg=4877.25, 90=7103, 99=17919, 99.9=83775, 99.99=227839] [UPDATE: Count=277159, Max=12223, Min=439, Avg=2333.07, 90=3459, 99=5399, 99.9=8063, 99.99=10335] 
2023-06-05 12:57:44:800 1520 sec: 85139653 operations; 55264.6 current ops/sec; [READ: Count=275984, Max=131071, Min=524, Avg=4899.08, 90=7199, 99=20575, 99.9=80959, 99.99=95423] [UPDATE: Count=276643, Max=16119, Min=427, Avg=2337.47, 90=3465, 99=5695, 99.9=8727, 99.99=10559] 
2023-06-05 12:57:54:800 1530 sec: 85693749 operations; 55409.6 current ops/sec; [READ: Count=276846, Max=108351, Min=536, Avg=4890.66, 90=7259, 99=20575, 99.9=69375, 99.99=77951] [UPDATE: Count=277087, Max=20287, Min=439, Avg=2328.83, 90=3449, 99=5783, 99.9=8815, 99.99=11799] 
2023-06-05 12:58:04:800 1540 sec: 86245103 operations; 55135.4 current ops/sec; [READ: Count=275730, Max=71039, Min=490, Avg=4898.24, 90=7443, 99=21055, 99.9=43615, 99.99=56479] [UPDATE: Count=275630, Max=17727, Min=420, Avg=2352.87, 90=3491, 99=6015, 99.9=8863, 99.99=11015] 
2023-06-05 12:58:14:803 1550 sec: 86793510 operations; 54818.77 current ops/sec; [READ: Count=274577, Max=138623, Min=502, Avg=4947.65, 90=7235, 99=24639, 99.9=59295, 99.99=118143] [UPDATE: Count=273993, Max=12999, Min=433, Avg=2339.36, 90=3473, 99=5863, 99.9=8927, 99.99=10503] 
2023-06-05 12:58:24:800 1560 sec: 87340828 operations; 54753.7 current ops/sec; [READ: Count=274084, Max=122687, Min=497, Avg=4962.36, 90=7231, 99=24671, 99.9=78399, 99.99=112511] [UPDATE: Count=273087, Max=14719, Min=445, Avg=2339.46, 90=3471, 99=6111, 99.9=9431, 99.99=11031] 
2023-06-05 12:58:34:799 1570 sec: 87872604 operations; 53177.6 current ops/sec; [READ: Count=265522, Max=217599, Min=484, Avg=5209.57, 90=7147, 99=27167, 99.9=129535, 99.99=143103] [UPDATE: Count=266219, Max=13375, Min=421, Avg=2312.75, 90=3441, 99=6551, 99.9=9583, 99.99=11431] 
2023-06-05 12:58:44:799 1580 sec: 88410631 operations; 53802.7 current ops/sec; [READ: Count=269191, Max=104063, Min=524, Avg=5075.87, 90=7451, 99=26095, 99.9=51839, 99.99=82175] [UPDATE: Count=268837, Max=13303, Min=433, Avg=2353.38, 90=3507, 99=6567, 99.9=9399, 99.99=11287] 
2023-06-05 12:58:54:800 1590 sec: 88945749 operations; 53511.8 current ops/sec; [READ: Count=268336, Max=78719, Min=516, Avg=5089.11, 90=7463, 99=25279, 99.9=53471, 99.99=65599] [UPDATE: Count=266439, Max=32959, Min=435, Avg=2380.87, 90=3535, 99=6707, 99.9=9687, 99.99=15255] 
2023-06-05 12:59:04:800 1600 sec: 89470992 operations; 52524.3 current ops/sec; [READ: Count=262628, Max=278271, Min=509, Avg=5283.12, 90=6979, 99=26351, 99.9=152447, 99.99=227199] [UPDATE: Count=262985, Max=22671, Min=424, Avg=2315.48, 90=3429, 99=6339, 99.9=9143, 99.99=11895] 
2023-06-05 12:59:14:800 1610 sec: 89972178 operations; 50118.6 current ops/sec; [READ: Count=250729, Max=589823, Min=494, Avg=5744.95, 90=6299, 99=21503, 99.9=324607, 99.99=474879] [UPDATE: Count=250552, Max=12887, Min=408, Avg=2222.27, 90=3293, 99=5507, 99.9=8543, 99.99=10791] 
2023-06-05 12:59:24:800 1620 sec: 90504039 operations; 53186.1 current ops/sec; [READ: Count=265600, Max=359935, Min=503, Avg=5242.82, 90=6667, 99=15775, 99.9=322815, 99.99=330495] [UPDATE: Count=266202, Max=11703, Min=442, Avg=2296, 90=3377, 99=5191, 99.9=7835, 99.99=9991] 
2023-06-05 12:59:34:800 1630 sec: 91061938 operations; 55789.9 current ops/sec; [READ: Count=278412, Max=87743, Min=541, Avg=4787.14, 90=7131, 99=14447, 99.9=52927, 99.99=74047] [UPDATE: Count=279442, Max=12255, Min=435, Avg=2384.56, 90=3485, 99=5387, 99.9=8131, 99.99=10295] 
2023-06-05 12:59:44:800 1640 sec: 91622600 operations; 56066.2 current ops/sec; [READ: Count=280016, Max=103423, Min=514, Avg=4746.79, 90=7171, 99=13495, 99.9=26751, 99.99=67967] [UPDATE: Count=280520, Max=13359, Min=426, Avg=2386.19, 90=3481, 99=5291, 99.9=8075, 99.99=10463] 
2023-06-05 12:59:54:799 1650 sec: 92177712 operations; 55511.2 current ops/sec; [READ: Count=277848, Max=114239, Min=513, Avg=4827.39, 90=7063, 99=15167, 99.9=80575, 99.99=93887] [UPDATE: Count=277357, Max=25775, Min=447, Avg=2372.82, 90=3463, 99=5335, 99.9=8615, 99.99=11399] 
2023-06-05 13:00:04:800 1660 sec: 92735917 operations; 55820.5 current ops/sec; [READ: Count=279038, Max=89151, Min=521, Avg=4771.97, 90=7075, 99=14215, 99.9=39391, 99.99=83007] [UPDATE: Count=279095, Max=16343, Min=450, Avg=2392.99, 90=3481, 99=5291, 99.9=7787, 99.99=10223] 
2023-06-05 13:00:14:800 1670 sec: 93277947 operations; 54203 current ops/sec; [READ: Count=271310, Max=330495, Min=524, Avg=4997.95, 90=6959, 99=16975, 99.9=105855, 99.99=270079] [UPDATE: Count=270954, Max=11783, Min=459, Avg=2375.37, 90=3455, 99=5475, 99.9=8035, 99.99=10135] 
2023-06-05 13:00:24:800 1680 sec: 93831657 operations; 55371 current ops/sec; [READ: Count=276853, Max=51647, Min=524, Avg=4793.2, 90=7207, 99=13559, 99.9=21919, 99.99=28751] [UPDATE: Count=276721, Max=13519, Min=464, Avg=2428.22, 90=3501, 99=5291, 99.9=7587, 99.99=9247] 
2023-06-05 13:00:34:800 1690 sec: 94362252 operations; 53059.5 current ops/sec; [READ: Count=265218, Max=330495, Min=532, Avg=5119.93, 90=7223, 99=18495, 99.9=139135, 99.99=182655] [UPDATE: Count=265546, Max=14263, Min=446, Avg=2416.63, 90=3505, 99=5859, 99.9=8575, 99.99=10503] 
2023-06-05 13:00:44:800 1700 sec: 94905402 operations; 54315 current ops/sec; [READ: Count=271923, Max=130047, Min=564, Avg=4933.05, 90=7295, 99=18063, 99.9=49023, 99.99=87423] [UPDATE: Count=271036, Max=16895, Min=443, Avg=2422.44, 90=3521, 99=5807, 99.9=8991, 99.99=11231] 
2023-06-05 13:00:54:800 1710 sec: 95435142 operations; 52974 current ops/sec; [READ: Count=265094, Max=239103, Min=525, Avg=5184.44, 90=6991, 99=28015, 99.9=134015, 99.99=191871] [UPDATE: Count=264847, Max=18415, Min=425, Avg=2362.34, 90=3449, 99=5983, 99.9=9455, 99.99=11735] 
2023-06-05 13:01:04:800 1720 sec: 95973430 operations; 53828.8 current ops/sec; [READ: Count=268768, Max=176255, Min=535, Avg=5041.71, 90=7071, 99=19967, 99.9=97855, 99.99=136703] [UPDATE: Count=269311, Max=17679, Min=460, Avg=2390.01, 90=3467, 99=5627, 99.9=9015, 99.99=11855] 
2023-06-05 13:01:14:800 1730 sec: 96504292 operations; 53086.2 current ops/sec; [READ: Count=264988, Max=167551, Min=541, Avg=5146.93, 90=7111, 99=22287, 99.9=97087, 99.99=137087] [UPDATE: Count=265899, Max=15695, Min=461, Avg=2388.89, 90=3469, 99=5795, 99.9=8831, 99.99=10911] 
2023-06-05 13:01:24:800 1740 sec: 97037227 operations; 53293.5 current ops/sec; [READ: Count=266622, Max=274943, Min=545, Avg=5111.13, 90=7107, 99=21263, 99.9=87039, 99.99=134399] [UPDATE: Count=266346, Max=20175, Min=462, Avg=2390.94, 90=3491, 99=5855, 99.9=8679, 99.99=11743] 
2023-06-05 13:01:34:800 1750 sec: 97587443 operations; 55021.6 current ops/sec; [READ: Count=275132, Max=123455, Min=510, Avg=4841.62, 90=7235, 99=13527, 99.9=55903, 99.99=75391] [UPDATE: Count=275175, Max=14103, Min=430, Avg=2425.36, 90=3529, 99=5387, 99.9=7979, 99.99=10031] 
2023-06-05 13:01:44:800 1760 sec: 98142304 operations; 55486.1 current ops/sec; [READ: Count=277789, Max=49855, Min=516, Avg=4781.63, 90=7123, 99=13439, 99.9=33695, 99.99=39871] [UPDATE: Count=276586, Max=17983, Min=467, Avg=2423.93, 90=3519, 99=5327, 99.9=8519, 99.99=12407] 
2023-06-05 13:01:54:800 1770 sec: 98691398 operations; 54909.4 current ops/sec; [READ: Count=274586, Max=42271, Min=539, Avg=4844.06, 90=7187, 99=16767, 99.9=30095, 99.99=35263] [UPDATE: Count=274200, Max=29279, Min=452, Avg=2439.38, 90=3525, 99=5739, 99.9=9463, 99.99=14911] 
2023-06-05 13:02:04:800 1780 sec: 99235386 operations; 54398.8 current ops/sec; [READ: Count=271890, Max=111871, Min=538, Avg=4899.99, 90=7151, 99=17407, 99.9=34463, 99.99=99839] [UPDATE: Count=272750, Max=17759, Min=460, Avg=2445.72, 90=3511, 99=5755, 99.9=8871, 99.99=12007] 
2023-06-05 13:02:14:799 1790 sec: 99771930 operations; 53654.4 current ops/sec; [READ: Count=267352, Max=297727, Min=555, Avg=5059.1, 90=6939, 99=18831, 99.9=135295, 99.99=186879] [UPDATE: Count=268868, Max=22735, Min=444, Avg=2399.96, 90=3473, 99=5659, 99.9=8751, 99.99=12951] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:24:800 1800 sec: 100380540 operations; 60861 current ops/sec; [READ: Count=304729, Max=209279, Min=514, Avg=4366.13, 90=6111, 99=9943, 99.9=160255, 99.99=172159] [UPDATE: Count=303973, Max=18607, Min=410, Avg=2200.57, 90=3259, 99=4743, 99.9=7623, 99.99=10191] 
Still waiting for thread Thread-169 to complete. Workload status: true
2023-06-05 13:02:27:050 1802 sec: 100382154 operations; 717.01 current ops/sec; [READ: Count=847, Max=7927, Min=583, Avg=3374.03, 90=5251, 99=6419, 99.9=7115, 99.99=7927] [CLEANUP: Count=200, Max=2226175, Min=0, Avg=11127.1, 90=2, 99=9, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802250
[OVERALL], Throughput(ops/sec), 55698.2405326675
[TOTAL_GCS_PS_Scavenge], Count, 6538
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17607
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9769454848106534
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 73
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004050492440005549
[TOTAL_GCs], Count, 6540
[TOTAL_GC_TIME], Time(ms), 17680
[TOTAL_GC_TIME_%], Time(%), 0.9809959772506588
[READ], Operations, 50192021
[READ], AverageLatency(us), 4573.39146857625
[READ], MinLatency(us), 462
[READ], MaxLatency(us), 864767
[READ], 95thPercentileLatency(us), 7979
[READ], 99thPercentileLatency(us), 16127
[READ], Return=OK, 50192021
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11127.1
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 9
[UPDATE], Operations, 50190133
[UPDATE], AverageLatency(us), 2249.9917925102927
[UPDATE], MinLatency(us), 400
[UPDATE], MaxLatency(us), 208895
[UPDATE], 95thPercentileLatency(us), 3759
[UPDATE], 99thPercentileLatency(us), 5379
[UPDATE], Return=OK, 50190133
