bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:19:579 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
2023-06-05 12:32:29:562 10 sec: 513888 operations; 51388.8 current ops/sec; [READ: Count=256777, Max=101119, Min=445, Avg=2571.28, 90=3979, 99=10439, 99.9=20463, 99.99=78207] [UPDATE: Count=258533, Max=104831, Min=373, Avg=1603.59, 90=2279, 99=6595, 99.9=18623, 99.99=79423] 
2023-06-05 12:32:39:562 20 sec: 1076388 operations; 56250 current ops/sec; [READ: Count=280739, Max=43199, Min=493, Avg=3745.55, 90=5695, 99=17807, 99.9=22719, 99.99=26687] [UPDATE: Count=281420, Max=13879, Min=433, Avg=1923.89, 90=2847, 99=5851, 99.9=8015, 99.99=9343] 
2023-06-05 12:32:49:562 30 sec: 1638707 operations; 56231.9 current ops/sec; [READ: Count=281111, Max=39487, Min=493, Avg=3817.88, 90=5831, 99=17503, 99.9=30767, 99.99=35263] [UPDATE: Count=281134, Max=16911, Min=421, Avg=1955.23, 90=2911, 99=5851, 99.9=8079, 99.99=9663] 
2023-06-05 12:32:59:562 40 sec: 2201327 operations; 56262 current ops/sec; [READ: Count=281761, Max=45151, Min=502, Avg=3925.04, 90=6043, 99=18143, 99.9=31791, 99.99=35711] [UPDATE: Count=280843, Max=19935, Min=425, Avg=1985.39, 90=2967, 99=5947, 99.9=8127, 99.99=10135] 
2023-06-05 12:33:09:562 50 sec: 2760907 operations; 55958 current ops/sec; [READ: Count=279269, Max=140543, Min=525, Avg=4145.66, 90=6435, 99=19199, 99.9=39295, 99.99=80639] [UPDATE: Count=280417, Max=12879, Min=441, Avg=2041.84, 90=3071, 99=6211, 99.9=8143, 99.99=9711] 
2023-06-05 12:33:19:562 60 sec: 3324386 operations; 56347.9 current ops/sec; [READ: Count=282050, Max=129279, Min=499, Avg=4550.92, 90=6619, 99=27679, 99.9=81151, 99.99=91007] [UPDATE: Count=281615, Max=25631, Min=399, Avg=2071.62, 90=3117, 99=6307, 99.9=8319, 99.99=10159] 
2023-06-05 12:33:29:562 70 sec: 3888651 operations; 56426.5 current ops/sec; [READ: Count=282074, Max=79615, Min=482, Avg=4285.04, 90=6559, 99=19823, 99.9=54943, 99.99=64319] [UPDATE: Count=282029, Max=13607, Min=442, Avg=2093.08, 90=3155, 99=6111, 99.9=8187, 99.99=9695] 
2023-06-05 12:33:39:562 80 sec: 4450903 operations; 56225.2 current ops/sec; [READ: Count=281469, Max=91967, Min=496, Avg=4247.64, 90=6659, 99=19103, 99.9=28719, 99.99=39263] [UPDATE: Count=280767, Max=11703, Min=435, Avg=2109.2, 90=3189, 99=6195, 99.9=8263, 99.99=9863] 
2023-06-05 12:33:49:562 90 sec: 5013560 operations; 56265.7 current ops/sec; [READ: Count=280603, Max=48959, Min=467, Avg=4296.94, 90=6691, 99=19071, 99.9=37759, 99.99=45087] [UPDATE: Count=282034, Max=14831, Min=449, Avg=2119.72, 90=3217, 99=6115, 99.9=8111, 99.99=9895] 
2023-06-05 12:33:59:562 100 sec: 5575819 operations; 56225.9 current ops/sec; [READ: Count=281066, Max=49727, Min=498, Avg=4250.05, 90=6691, 99=19503, 99.9=28623, 99.99=36383] [UPDATE: Count=280617, Max=28383, Min=430, Avg=2104.6, 90=3195, 99=6179, 99.9=8655, 99.99=16799] 
2023-06-05 12:34:09:562 110 sec: 6135559 operations; 55974 current ops/sec; [READ: Count=279747, Max=139391, Min=513, Avg=4480.8, 90=6787, 99=22911, 99.9=63551, 99.99=105151] [UPDATE: Count=280127, Max=26639, Min=439, Avg=2113.91, 90=3189, 99=6667, 99.9=9279, 99.99=15903] 
2023-06-05 12:34:19:562 120 sec: 6698182 operations; 56262.3 current ops/sec; [READ: Count=281303, Max=156543, Min=484, Avg=4698.48, 90=6707, 99=25583, 99.9=96703, 99.99=114687] [UPDATE: Count=281875, Max=22415, Min=426, Avg=2112.55, 90=3167, 99=6523, 99.9=8991, 99.99=10775] 
2023-06-05 12:34:29:562 130 sec: 7262112 operations; 56393 current ops/sec; [READ: Count=282227, Max=141567, Min=503, Avg=4462.42, 90=6887, 99=22431, 99.9=30303, 99.99=54559] [UPDATE: Count=281518, Max=14111, Min=447, Avg=2146.57, 90=3191, 99=6895, 99.9=9383, 99.99=11463] 
2023-06-05 12:34:39:562 140 sec: 7803732 operations; 54162 current ops/sec; [READ: Count=270995, Max=299775, Min=520, Avg=5089.8, 90=6911, 99=22431, 99.9=162431, 99.99=273407] [UPDATE: Count=270796, Max=13519, Min=415, Avg=2106.97, 90=3155, 99=6963, 99.9=9327, 99.99=11255] 
2023-06-05 12:34:49:562 150 sec: 8354902 operations; 55117 current ops/sec; [READ: Count=276136, Max=270335, Min=501, Avg=5079.13, 90=6751, 99=25983, 99.9=161407, 99.99=220287] [UPDATE: Count=274991, Max=18079, Min=420, Avg=2119.39, 90=3163, 99=6931, 99.9=9479, 99.99=12703] 
2023-06-05 12:34:59:562 160 sec: 8910972 operations; 55607 current ops/sec; [READ: Count=277940, Max=344831, Min=502, Avg=5041.18, 90=6411, 99=21855, 99.9=191103, 99.99=289535] [UPDATE: Count=277894, Max=18543, Min=427, Avg=2099.51, 90=3137, 99=6563, 99.9=9359, 99.99=11975] 
2023-06-05 12:35:09:562 170 sec: 9474657 operations; 56368.5 current ops/sec; [READ: Count=281568, Max=273407, Min=494, Avg=4884.25, 90=6607, 99=20831, 99.9=187263, 99.99=194687] [UPDATE: Count=282282, Max=16687, Min=413, Avg=2151.3, 90=3223, 99=6099, 99.9=8375, 99.99=10135] 
2023-06-05 12:35:19:562 180 sec: 10018837 operations; 54418 current ops/sec; [READ: Count=272820, Max=373759, Min=489, Avg=5196.41, 90=6347, 99=26783, 99.9=223615, 99.99=272639] [UPDATE: Count=271587, Max=13087, Min=434, Avg=2121.9, 90=3185, 99=5803, 99.9=8199, 99.99=10087] 
2023-06-05 12:35:29:565 190 sec: 10604871 operations; 58585.82 current ops/sec; [READ: Count=292544, Max=191487, Min=490, Avg=4570.65, 90=6475, 99=22143, 99.9=113919, 99.99=159615] [UPDATE: Count=293612, Max=13415, Min=426, Avg=2187.95, 90=3219, 99=5683, 99.9=8519, 99.99=10375] 
2023-06-05 12:35:39:562 200 sec: 11174617 operations; 56991.7 current ops/sec; [READ: Count=284921, Max=309503, Min=491, Avg=4725.2, 90=6111, 99=23455, 99.9=189823, 99.99=202239] [UPDATE: Count=284673, Max=15767, Min=417, Avg=2124.18, 90=3155, 99=5507, 99.9=8727, 99.99=10943] 
2023-06-05 12:35:49:562 210 sec: 11749134 operations; 57451.7 current ops/sec; [READ: Count=288046, Max=173823, Min=518, Avg=4570.8, 90=6267, 99=20591, 99.9=159615, 99.99=166271] [UPDATE: Count=286259, Max=27455, Min=434, Avg=2157.83, 90=3187, 99=5587, 99.9=8615, 99.99=10943] 
2023-06-05 12:35:59:562 220 sec: 12325219 operations; 57608.5 current ops/sec; [READ: Count=288375, Max=135039, Min=492, Avg=4180.6, 90=6111, 99=18815, 99.9=50495, 99.99=108735] [UPDATE: Count=287731, Max=14935, Min=440, Avg=2118.68, 90=3135, 99=5419, 99.9=8543, 99.99=10479] 
2023-06-05 12:36:09:562 230 sec: 12888833 operations; 56361.4 current ops/sec; [READ: Count=281879, Max=162815, Min=523, Avg=4127.09, 90=5919, 99=18239, 99.9=53087, 99.99=84479] [UPDATE: Count=281756, Max=13383, Min=431, Avg=2084.47, 90=3091, 99=5243, 99.9=8127, 99.99=9935] 
2023-06-05 12:36:19:562 240 sec: 13451469 operations; 56263.6 current ops/sec; [READ: Count=281255, Max=38623, Min=481, Avg=3751.46, 90=5603, 99=10911, 99.9=24719, 99.99=32431] [UPDATE: Count=281315, Max=13919, Min=438, Avg=2023.38, 90=3007, 99=4575, 99.9=7247, 99.99=9383] 
2023-06-05 12:36:29:562 250 sec: 14013866 operations; 56239.7 current ops/sec; [READ: Count=281796, Max=24927, Min=512, Avg=3601.55, 90=5467, 99=7803, 99.9=10983, 99.99=16343] [UPDATE: Count=280486, Max=10415, Min=448, Avg=2005.72, 90=2983, 99=4075, 99.9=6283, 99.99=7971] 
2023-06-05 12:36:39:562 260 sec: 14576434 operations; 56256.8 current ops/sec; [READ: Count=281569, Max=34751, Min=518, Avg=3630.26, 90=5523, 99=7943, 99.9=11271, 99.99=19055] [UPDATE: Count=280903, Max=10911, Min=436, Avg=2020.48, 90=3021, 99=4155, 99.9=6423, 99.99=8159] 
2023-06-05 12:36:49:562 270 sec: 15138942 operations; 56250.8 current ops/sec; [READ: Count=281284, Max=31423, Min=469, Avg=3651.8, 90=5579, 99=8359, 99.9=13895, 99.99=21567] [UPDATE: Count=281378, Max=26127, Min=420, Avg=2022.45, 90=3035, 99=4283, 99.9=6739, 99.99=9799] 
2023-06-05 12:36:59:562 280 sec: 15701465 operations; 56252.3 current ops/sec; [READ: Count=280886, Max=32079, Min=481, Avg=3665.95, 90=5619, 99=8431, 99.9=12991, 99.99=24495] [UPDATE: Count=281608, Max=18527, Min=444, Avg=2024.89, 90=3053, 99=4307, 99.9=6471, 99.99=8687] 
2023-06-05 12:37:09:562 290 sec: 16263898 operations; 56243.3 current ops/sec; [READ: Count=281549, Max=27263, Min=492, Avg=3604.52, 90=5515, 99=8439, 99.9=14999, 99.99=22031] [UPDATE: Count=280811, Max=12023, Min=440, Avg=1991.8, 90=3007, 99=4303, 99.9=6699, 99.99=8887] 
2023-06-05 12:37:19:562 300 sec: 16826479 operations; 56258.1 current ops/sec; [READ: Count=281484, Max=102527, Min=536, Avg=3657.11, 90=5571, 99=8631, 99.9=19231, 99.99=44159] [UPDATE: Count=281157, Max=12055, Min=413, Avg=2001.42, 90=3015, 99=4371, 99.9=6739, 99.99=8967] 
2023-06-05 12:37:29:562 310 sec: 17388939 operations; 56246 current ops/sec; [READ: Count=281115, Max=31759, Min=484, Avg=3591.06, 90=5483, 99=8199, 99.9=13887, 99.99=25695] [UPDATE: Count=280934, Max=19487, Min=444, Avg=1981.71, 90=2979, 99=4187, 99.9=6695, 99.99=13175] 
2023-06-05 12:37:39:562 320 sec: 17951453 operations; 56251.4 current ops/sec; [READ: Count=281671, Max=89791, Min=525, Avg=3575.09, 90=5399, 99=8791, 99.9=24031, 99.99=47231] [UPDATE: Count=281351, Max=21327, Min=438, Avg=1955.59, 90=2937, 99=4323, 99.9=7243, 99.99=10231] 
2023-06-05 12:37:49:562 330 sec: 18513921 operations; 56246.8 current ops/sec; [READ: Count=281514, Max=29967, Min=511, Avg=3520.33, 90=5343, 99=9039, 99.9=20447, 99.99=24479] [UPDATE: Count=280891, Max=15383, Min=430, Avg=1935.21, 90=2885, 99=4419, 99.9=8155, 99.99=10751] 
2023-06-05 12:37:59:562 340 sec: 19076474 operations; 56255.3 current ops/sec; [READ: Count=281287, Max=38111, Min=477, Avg=3499.28, 90=5299, 99=9431, 99.9=21583, 99.99=25103] [UPDATE: Count=280811, Max=23151, Min=424, Avg=1920.91, 90=2859, 99=4467, 99.9=8495, 99.99=14663] 
2023-06-05 12:38:09:562 350 sec: 19638918 operations; 56244.4 current ops/sec; [READ: Count=281159, Max=30335, Min=501, Avg=3502.98, 90=5295, 99=9207, 99.9=21119, 99.99=24831] [UPDATE: Count=281776, Max=19519, Min=467, Avg=1923.29, 90=2849, 99=4327, 99.9=7655, 99.99=10487] 
2023-06-05 12:38:19:562 360 sec: 20201506 operations; 56258.8 current ops/sec; [READ: Count=280283, Max=25775, Min=511, Avg=3412.47, 90=5143, 99=7723, 99.9=18431, 99.99=21983] [UPDATE: Count=282253, Max=17647, Min=433, Avg=1901.37, 90=2825, 99=4019, 99.9=6423, 99.99=8123] 
2023-06-05 12:38:29:562 370 sec: 20764012 operations; 56250.6 current ops/sec; [READ: Count=280565, Max=19615, Min=504, Avg=3389.69, 90=5151, 99=7515, 99.9=10079, 99.99=14767] [UPDATE: Count=281605, Max=18047, Min=416, Avg=1906.12, 90=2825, 99=3991, 99.9=6803, 99.99=14919] 
2023-06-05 12:38:39:562 380 sec: 21326527 operations; 56251.5 current ops/sec; [READ: Count=280863, Max=55103, Min=504, Avg=3378.24, 90=5115, 99=7651, 99.9=13391, 99.99=24047] [UPDATE: Count=281818, Max=17343, Min=422, Avg=1884.2, 90=2809, 99=3879, 99.9=5927, 99.99=8487] 
2023-06-05 12:38:49:562 390 sec: 21888991 operations; 56246.4 current ops/sec; [READ: Count=281204, Max=27135, Min=532, Avg=3411.39, 90=5175, 99=7563, 99.9=10223, 99.99=14415] [UPDATE: Count=281335, Max=16751, Min=440, Avg=1912.59, 90=2859, 99=4003, 99.9=6071, 99.99=9175] 
2023-06-05 12:38:59:562 400 sec: 22451509 operations; 56251.8 current ops/sec; [READ: Count=281223, Max=214143, Min=479, Avg=3488.46, 90=5307, 99=7719, 99.9=10447, 99.99=14751] [UPDATE: Count=281374, Max=216703, Min=428, Avg=1951.33, 90=2913, 99=4049, 99.9=6407, 99.99=11719] 
2023-06-05 12:39:09:562 410 sec: 23013959 operations; 56245 current ops/sec; [READ: Count=281858, Max=27567, Min=491, Avg=3587.81, 90=5487, 99=8223, 99.9=13487, 99.99=22175] [UPDATE: Count=280579, Max=15191, Min=426, Avg=1982.91, 90=2977, 99=4263, 99.9=6667, 99.99=9191] 
2023-06-05 12:39:19:562 420 sec: 23576451 operations; 56249.2 current ops/sec; [READ: Count=281495, Max=24911, Min=481, Avg=3607.13, 90=5507, 99=8043, 99.9=11095, 99.99=16199] [UPDATE: Count=280941, Max=10991, Min=413, Avg=1995.48, 90=2999, 99=4199, 99.9=6287, 99.99=7815] 
2023-06-05 12:39:29:562 430 sec: 24138960 operations; 56250.9 current ops/sec; [READ: Count=281731, Max=24431, Min=524, Avg=3679.96, 90=5631, 99=8303, 99.9=11551, 99.99=16895] [UPDATE: Count=280835, Max=13135, Min=440, Avg=2020.02, 90=3037, 99=4275, 99.9=6395, 99.99=7903] 
2023-06-05 12:39:39:562 440 sec: 24701480 operations; 56252 current ops/sec; [READ: Count=280585, Max=23871, Min=486, Avg=3678.02, 90=5639, 99=8303, 99.9=11495, 99.99=15407] [UPDATE: Count=281806, Max=16263, Min=428, Avg=2021.98, 90=3053, 99=4239, 99.9=6319, 99.99=11471] 
2023-06-05 12:39:49:562 450 sec: 25263941 operations; 56246.1 current ops/sec; [READ: Count=281023, Max=25967, Min=507, Avg=3679.73, 90=5639, 99=8279, 99.9=11983, 99.99=17631] [UPDATE: Count=281468, Max=18127, Min=441, Avg=2024.24, 90=3051, 99=4239, 99.9=6815, 99.99=14703] 
2023-06-05 12:39:59:562 460 sec: 25826420 operations; 56247.9 current ops/sec; [READ: Count=281353, Max=28559, Min=482, Avg=3727.4, 90=5731, 99=9063, 99.9=17023, 99.99=23919] [UPDATE: Count=281235, Max=17055, Min=436, Avg=2029.52, 90=3071, 99=4491, 99.9=6991, 99.99=9767] 
2023-06-05 12:40:09:562 470 sec: 26388531 operations; 56211.1 current ops/sec; [READ: Count=280793, Max=47743, Min=523, Avg=3957.44, 90=5927, 99=13183, 99.9=31055, 99.99=35743] [UPDATE: Count=281308, Max=11631, Min=435, Avg=2073.24, 90=3123, 99=5007, 99.9=7867, 99.99=9775] 
2023-06-05 12:40:19:562 480 sec: 26947059 operations; 55852.8 current ops/sec; [READ: Count=279258, Max=281343, Min=489, Avg=4737.44, 90=6395, 99=25023, 99.9=137343, 99.99=223359] [UPDATE: Count=279532, Max=13127, Min=434, Avg=2140.82, 90=3201, 99=6203, 99.9=8983, 99.99=10895] 
2023-06-05 12:40:29:562 490 sec: 27513943 operations; 56688.4 current ops/sec; [READ: Count=283266, Max=129023, Min=498, Avg=3959.09, 90=5755, 99=10479, 99.9=90751, 99.99=118015] [UPDATE: Count=283422, Max=22111, Min=437, Avg=2043.97, 90=3057, 99=4391, 99.9=7855, 99.99=15663] 
2023-06-05 12:40:39:562 500 sec: 28076429 operations; 56248.6 current ops/sec; [READ: Count=280844, Max=37855, Min=463, Avg=3707.8, 90=5675, 99=9039, 99.9=16327, 99.99=24719] [UPDATE: Count=281500, Max=11535, Min=413, Avg=2013.85, 90=3039, 99=4211, 99.9=6503, 99.99=8703] 
2023-06-05 12:40:49:562 510 sec: 28638928 operations; 56249.9 current ops/sec; [READ: Count=281362, Max=48703, Min=503, Avg=3685.63, 90=5675, 99=8959, 99.9=16351, 99.99=29007] [UPDATE: Count=281172, Max=17775, Min=442, Avg=2004.25, 90=3027, 99=4403, 99.9=6959, 99.99=10039] 
2023-06-05 12:40:59:562 520 sec: 29201472 operations; 56254.4 current ops/sec; [READ: Count=281465, Max=71231, Min=507, Avg=3762.96, 90=5751, 99=9367, 99.9=29791, 99.99=42367] [UPDATE: Count=281145, Max=17055, Min=435, Avg=2021.48, 90=3053, 99=4635, 99.9=7587, 99.99=10911] 
2023-06-05 12:41:09:562 530 sec: 29763903 operations; 56243.1 current ops/sec; [READ: Count=281590, Max=23935, Min=517, Avg=3739.06, 90=5771, 99=8895, 99.9=15327, 99.99=20287] [UPDATE: Count=280777, Max=11727, Min=418, Avg=2026.66, 90=3065, 99=4475, 99.9=6883, 99.99=9023] 
2023-06-05 12:41:19:562 540 sec: 30326493 operations; 56259 current ops/sec; [READ: Count=281756, Max=24991, Min=489, Avg=3743.67, 90=5755, 99=8959, 99.9=16239, 99.99=21023] [UPDATE: Count=280777, Max=12535, Min=434, Avg=2028.4, 90=3063, 99=4415, 99.9=7175, 99.99=9807] 
2023-06-05 12:41:29:562 550 sec: 30888863 operations; 56237 current ops/sec; [READ: Count=281016, Max=31023, Min=499, Avg=3842.05, 90=5911, 99=9735, 99.9=19823, 99.99=25887] [UPDATE: Count=281436, Max=18527, Min=445, Avg=2060.27, 90=3115, 99=4599, 99.9=7531, 99.99=14407] 
2023-06-05 12:41:39:562 560 sec: 31451351 operations; 56248.8 current ops/sec; [READ: Count=280552, Max=42975, Min=510, Avg=3893.79, 90=5943, 99=10679, 99.9=24767, 99.99=29263] [UPDATE: Count=281960, Max=15767, Min=440, Avg=2066, 90=3117, 99=4759, 99.9=7815, 99.99=9743] 
2023-06-05 12:41:49:562 570 sec: 31999273 operations; 54792.2 current ops/sec; [READ: Count=273452, Max=398335, Min=472, Avg=4489.51, 90=5815, 99=13295, 99.9=190719, 99.99=335615] [UPDATE: Count=274572, Max=22831, Min=420, Avg=2032.46, 90=3087, 99=4995, 99.9=8575, 99.99=11215] 
2023-06-05 12:41:59:562 580 sec: 32550331 operations; 55105.8 current ops/sec; [READ: Count=276507, Max=409855, Min=507, Avg=5034.55, 90=5839, 99=15367, 99.9=229503, 99.99=336383] [UPDATE: Count=274604, Max=17951, Min=422, Avg=2038.51, 90=3079, 99=4783, 99.9=7987, 99.99=10511] 
2023-06-05 12:42:09:562 590 sec: 33093426 operations; 54309.5 current ops/sec; [READ: Count=271879, Max=319999, Min=483, Avg=5157.77, 90=6223, 99=32575, 99.9=224639, 99.99=291327] [UPDATE: Count=271252, Max=13343, Min=428, Avg=2110.35, 90=3179, 99=5415, 99.9=8319, 99.99=10471] 
2023-06-05 12:42:19:562 600 sec: 33589414 operations; 49598.8 current ops/sec; [READ: Count=247961, Max=558079, Min=501, Avg=5877.28, 90=7311, 99=38207, 99.9=323071, 99.99=329983] [UPDATE: Count=247648, Max=19455, Min=417, Avg=2171.45, 90=3323, 99=6827, 99.9=9183, 99.99=11887] 
2023-06-05 12:42:29:562 610 sec: 34086734 operations; 49732 current ops/sec; [READ: Count=248479, Max=343295, Min=513, Avg=5899.96, 90=6887, 99=40383, 99.9=324863, 99.99=329727] [UPDATE: Count=249190, Max=17215, Min=404, Avg=2155.07, 90=3303, 99=6235, 99.9=8727, 99.99=10791] 
2023-06-05 12:42:39:562 620 sec: 34625348 operations; 53861.4 current ops/sec; [READ: Count=268732, Max=326143, Min=497, Avg=5212.65, 90=6967, 99=33087, 99.9=161919, 99.99=272383] [UPDATE: Count=269849, Max=12399, Min=441, Avg=2217.9, 90=3371, 99=6031, 99.9=8375, 99.99=10215] 
2023-06-05 12:42:49:562 630 sec: 35177253 operations; 55190.5 current ops/sec; [READ: Count=275834, Max=143231, Min=498, Avg=4991.9, 90=7235, 99=28815, 99.9=132095, 99.99=137855] [UPDATE: Count=276087, Max=18623, Min=449, Avg=2252.73, 90=3399, 99=6235, 99.9=8431, 99.99=10879] 
2023-06-05 12:42:59:562 640 sec: 35731212 operations; 55395.9 current ops/sec; [READ: Count=277524, Max=217727, Min=463, Avg=5010.69, 90=6643, 99=35711, 99.9=136319, 99.99=158719] [UPDATE: Count=276453, Max=27263, Min=436, Avg=2204.03, 90=3309, 99=5539, 99.9=8455, 99.99=14487] 
2023-06-05 12:43:09:562 650 sec: 36294122 operations; 56291 current ops/sec; [READ: Count=281825, Max=242559, Min=495, Avg=4851.35, 90=6815, 99=20143, 99.9=116479, 99.99=154367] [UPDATE: Count=281024, Max=14895, Min=424, Avg=2241.86, 90=3351, 99=5715, 99.9=8319, 99.99=10103] 
2023-06-05 12:43:19:562 660 sec: 36862093 operations; 56797.1 current ops/sec; [READ: Count=283672, Max=268031, Min=521, Avg=4786.3, 90=6723, 99=16287, 99.9=160895, 99.99=197375] [UPDATE: Count=284239, Max=13191, Min=453, Avg=2250.25, 90=3357, 99=5351, 99.9=7959, 99.99=9983] 
2023-06-05 12:43:29:562 670 sec: 37430714 operations; 56862.1 current ops/sec; [READ: Count=284414, Max=250367, Min=505, Avg=4769.99, 90=6895, 99=16607, 99.9=111231, 99.99=205055] [UPDATE: Count=284383, Max=16151, Min=420, Avg=2275.26, 90=3393, 99=5391, 99.9=7967, 99.99=9871] 
2023-06-05 12:43:39:562 680 sec: 38012850 operations; 58213.6 current ops/sec; [READ: Count=290501, Max=34943, Min=511, Avg=4549.35, 90=6995, 99=12303, 99.9=20991, 99.99=25231] [UPDATE: Count=291460, Max=12559, Min=448, Avg=2323.13, 90=3439, 99=5091, 99.9=7447, 99.99=9311] 
2023-06-05 12:43:49:562 690 sec: 38588120 operations; 57527 current ops/sec; [READ: Count=287044, Max=139135, Min=490, Avg=4629.39, 90=6895, 99=13551, 99.9=53855, 99.99=86783] [UPDATE: Count=288352, Max=27423, Min=408, Avg=2324.42, 90=3431, 99=5199, 99.9=7879, 99.99=10479] 
2023-06-05 12:43:59:562 700 sec: 39157562 operations; 56944.2 current ops/sec; [READ: Count=284635, Max=100223, Min=509, Avg=4694.7, 90=6771, 99=13991, 99.9=82495, 99.99=88767] [UPDATE: Count=284702, Max=18175, Min=440, Avg=2326.53, 90=3419, 99=5143, 99.9=8295, 99.99=10695] 
2023-06-05 12:44:09:562 710 sec: 39723862 operations; 56630 current ops/sec; [READ: Count=283784, Max=72063, Min=529, Avg=4687.3, 90=6871, 99=15255, 99.9=44159, 99.99=54687] [UPDATE: Count=282559, Max=12991, Min=422, Avg=2367.48, 90=3465, 99=5383, 99.9=8711, 99.99=10767] 
2023-06-05 12:44:19:562 720 sec: 40274981 operations; 55111.9 current ops/sec; [READ: Count=275762, Max=220671, Min=477, Avg=4893.07, 90=6823, 99=19903, 99.9=118015, 99.99=149503] [UPDATE: Count=275323, Max=23151, Min=422, Avg=2357.44, 90=3435, 99=5787, 99.9=9223, 99.99=14247] 
2023-06-05 12:44:29:562 730 sec: 40825945 operations; 55096.4 current ops/sec; [READ: Count=275260, Max=156927, Min=515, Avg=4866.26, 90=7015, 99=17231, 99.9=113151, 99.99=138879] [UPDATE: Count=275689, Max=13391, Min=430, Avg=2394.03, 90=3489, 99=5771, 99.9=8759, 99.99=10751] 
2023-06-05 12:44:39:562 740 sec: 41379888 operations; 55394.3 current ops/sec; [READ: Count=277070, Max=47711, Min=517, Avg=4812.75, 90=7115, 99=18511, 99.9=33759, 99.99=37983] [UPDATE: Count=276838, Max=14799, Min=433, Avg=2404.26, 90=3503, 99=5887, 99.9=9103, 99.99=10967] 
2023-06-05 12:44:49:562 750 sec: 41937815 operations; 55792.7 current ops/sec; [READ: Count=278417, Max=52031, Min=514, Avg=4768.71, 90=7063, 99=17151, 99.9=29551, 99.99=34847] [UPDATE: Count=279320, Max=32367, Min=441, Avg=2404.67, 90=3511, 99=5643, 99.9=8983, 99.99=12743] 
2023-06-05 12:44:59:562 760 sec: 42497542 operations; 55972.7 current ops/sec; [READ: Count=279721, Max=40191, Min=512, Avg=4745.67, 90=7003, 99=17967, 99.9=26239, 99.99=31487] [UPDATE: Count=280217, Max=19327, Min=426, Avg=2396.91, 90=3485, 99=5675, 99.9=8999, 99.99=11551] 
2023-06-05 12:45:09:562 770 sec: 43056531 operations; 55898.9 current ops/sec; [READ: Count=279081, Max=42847, Min=522, Avg=4750.65, 90=6947, 99=18079, 99.9=28527, 99.99=32991] [UPDATE: Count=279877, Max=13999, Min=428, Avg=2405.35, 90=3489, 99=5659, 99.9=9015, 99.99=10711] 
2023-06-05 12:45:19:562 780 sec: 43568739 operations; 51220.8 current ops/sec; [READ: Count=255513, Max=539647, Min=518, Avg=5473.35, 90=6611, 99=24063, 99.9=272895, 99.99=323583] [UPDATE: Count=256797, Max=27567, Min=444, Avg=2321.42, 90=3403, 99=5939, 99.9=9575, 99.99=16831] 
2023-06-05 12:45:29:562 790 sec: 44104023 operations; 53528.4 current ops/sec; [READ: Count=267923, Max=278783, Min=523, Avg=5198.37, 90=6415, 99=16591, 99.9=272127, 99.99=275199] [UPDATE: Count=267281, Max=12135, Min=419, Avg=2279.83, 90=3343, 99=5119, 99.9=7767, 99.99=9663] 
2023-06-05 12:45:39:562 800 sec: 44672636 operations; 56861.3 current ops/sec; [READ: Count=284798, Max=163199, Min=532, Avg=4654.41, 90=6963, 99=11559, 99.9=24623, 99.99=135807] [UPDATE: Count=283870, Max=12295, Min=436, Avg=2379.17, 90=3459, 99=5055, 99.9=7363, 99.99=9703] 
2023-06-05 12:45:49:562 810 sec: 45241909 operations; 56927.3 current ops/sec; [READ: Count=284870, Max=35775, Min=512, Avg=4624.7, 90=6967, 99=11047, 99.9=18415, 99.99=24767] [UPDATE: Count=284379, Max=25599, Min=432, Avg=2396.85, 90=3479, 99=4967, 99.9=7047, 99.99=9535] 
2023-06-05 12:45:59:562 820 sec: 45813360 operations; 57145.1 current ops/sec; [READ: Count=285988, Max=35743, Min=533, Avg=4598.43, 90=6875, 99=10591, 99.9=16655, 99.99=28911] [UPDATE: Count=285492, Max=20639, Min=432, Avg=2397.01, 90=3465, 99=4891, 99.9=7055, 99.99=9063] 
2023-06-05 12:46:09:562 830 sec: 46384155 operations; 57079.5 current ops/sec; [READ: Count=284959, Max=27631, Min=521, Avg=4600.25, 90=6859, 99=10415, 99.9=15215, 99.99=19887] [UPDATE: Count=285624, Max=17663, Min=454, Avg=2407.03, 90=3465, 99=4851, 99.9=6875, 99.99=8163] 
2023-06-05 12:46:19:562 840 sec: 46955082 operations; 57092.7 current ops/sec; [READ: Count=285613, Max=116735, Min=487, Avg=4600.73, 90=6823, 99=10479, 99.9=21167, 99.99=45823] [UPDATE: Count=285512, Max=12567, Min=440, Avg=2400.81, 90=3467, 99=4859, 99.9=7011, 99.99=8695] 
2023-06-05 12:46:29:562 850 sec: 47519747 operations; 56466.5 current ops/sec; [READ: Count=282115, Max=36383, Min=506, Avg=4643.21, 90=6839, 99=10367, 99.9=16783, 99.99=24319] [UPDATE: Count=282444, Max=14191, Min=441, Avg=2439.05, 90=3493, 99=4931, 99.9=7071, 99.99=8727] 
2023-06-05 12:46:39:562 860 sec: 48071738 operations; 55199.1 current ops/sec; [READ: Count=275797, Max=92031, Min=525, Avg=4779.61, 90=6907, 99=13383, 99.9=32831, 99.99=56415] [UPDATE: Count=276247, Max=12639, Min=441, Avg=2465.06, 90=3517, 99=5263, 99.9=8511, 99.99=10439] 
2023-06-05 12:46:49:562 870 sec: 48626234 operations; 55449.6 current ops/sec; [READ: Count=276767, Max=40415, Min=513, Avg=4746.49, 90=6903, 99=11863, 99.9=25631, 99.99=30127] [UPDATE: Count=277678, Max=17439, Min=428, Avg=2468.36, 90=3519, 99=5139, 99.9=8255, 99.99=11239] 
2023-06-05 12:46:59:562 880 sec: 49181457 operations; 55522.3 current ops/sec; [READ: Count=277213, Max=36735, Min=478, Avg=4739.55, 90=6927, 99=11887, 99.9=24991, 99.99=29743] [UPDATE: Count=277552, Max=23359, Min=451, Avg=2469.37, 90=3525, 99=5215, 99.9=8447, 99.99=15127] 
2023-06-05 12:47:09:562 890 sec: 49732369 operations; 55091.2 current ops/sec; [READ: Count=275426, Max=38943, Min=527, Avg=4786.54, 90=7031, 99=13975, 99.9=23327, 99.99=27327] [UPDATE: Count=275989, Max=16623, Min=453, Avg=2466.96, 90=3539, 99=5395, 99.9=8343, 99.99=10759] 
2023-06-05 12:47:19:562 900 sec: 50280641 operations; 54827.2 current ops/sec; [READ: Count=273868, Max=83583, Min=492, Avg=4846.1, 90=6979, 99=17279, 99.9=42015, 99.99=56767] [UPDATE: Count=274333, Max=13055, Min=441, Avg=2450.33, 90=3497, 99=5607, 99.9=8775, 99.99=10783] 
2023-06-05 12:47:29:562 910 sec: 50830610 operations; 54996.9 current ops/sec; [READ: Count=275030, Max=37535, Min=505, Avg=4809.03, 90=6971, 99=16735, 99.9=25439, 99.99=29839] [UPDATE: Count=274989, Max=20367, Min=458, Avg=2459.29, 90=3497, 99=5579, 99.9=8623, 99.99=10655] 
2023-06-05 12:47:39:562 920 sec: 51378987 operations; 54837.7 current ops/sec; [READ: Count=274613, Max=45823, Min=531, Avg=4802.21, 90=6859, 99=15015, 99.9=26655, 99.99=31391] [UPDATE: Count=273741, Max=24495, Min=446, Avg=2485.13, 90=3515, 99=5363, 99.9=8727, 99.99=14887] 
2023-06-05 12:47:49:562 930 sec: 51932857 operations; 55387 current ops/sec; [READ: Count=275925, Max=40351, Min=537, Avg=4759.59, 90=6823, 99=13503, 99.9=25343, 99.99=30111] [UPDATE: Count=277925, Max=16895, Min=453, Avg=2467.94, 90=3493, 99=5091, 99.9=7423, 99.99=11759] 
2023-06-05 12:47:59:562 940 sec: 52485218 operations; 55236.1 current ops/sec; [READ: Count=276069, Max=75199, Min=534, Avg=4756.74, 90=6839, 99=12375, 99.9=24303, 99.99=63103] [UPDATE: Count=276316, Max=61983, Min=445, Avg=2482.59, 90=3501, 99=4931, 99.9=7371, 99.99=60351] 
2023-06-05 12:48:09:562 950 sec: 53041257 operations; 55603.9 current ops/sec; [READ: Count=278001, Max=31151, Min=533, Avg=4729.38, 90=6947, 99=11575, 99.9=21007, 99.99=24287] [UPDATE: Count=277942, Max=12047, Min=450, Avg=2461.85, 90=3517, 99=4975, 99.9=7151, 99.99=9167] 
2023-06-05 12:48:19:562 960 sec: 53601018 operations; 55976.1 current ops/sec; [READ: Count=279850, Max=29407, Min=514, Avg=4701.39, 90=6895, 99=11647, 99.9=20895, 99.99=24543] [UPDATE: Count=279983, Max=12607, Min=447, Avg=2441.41, 90=3489, 99=4847, 99.9=7451, 99.99=9687] 
2023-06-05 12:48:29:562 970 sec: 54165491 operations; 56447.3 current ops/sec; [READ: Count=282614, Max=28767, Min=517, Avg=4643.25, 90=6843, 99=10687, 99.9=18383, 99.99=23679] [UPDATE: Count=281555, Max=27215, Min=438, Avg=2438.98, 90=3489, 99=4927, 99.9=7923, 99.99=15831] 
2023-06-05 12:48:39:562 980 sec: 54729163 operations; 56367.2 current ops/sec; [READ: Count=281546, Max=60447, Min=506, Avg=4667.15, 90=6835, 99=11359, 99.9=28959, 99.99=42271] [UPDATE: Count=282505, Max=15695, Min=444, Avg=2425.45, 90=3481, 99=4931, 99.9=7335, 99.99=9743] 
2023-06-05 12:48:49:562 990 sec: 55284441 operations; 55527.8 current ops/sec; [READ: Count=277465, Max=118399, Min=532, Avg=4792.02, 90=6755, 99=13135, 99.9=70207, 99.99=78335] [UPDATE: Count=277858, Max=28175, Min=455, Avg=2409.55, 90=3455, 99=5035, 99.9=8143, 99.99=14559] 
2023-06-05 12:48:59:562 1000 sec: 55843166 operations; 55872.5 current ops/sec; [READ: Count=279748, Max=71871, Min=506, Avg=4738.64, 90=6803, 99=11535, 99.9=56351, 99.99=64607] [UPDATE: Count=279004, Max=16799, Min=447, Avg=2414.22, 90=3471, 99=4919, 99.9=7419, 99.99=9719] 
2023-06-05 12:49:09:562 1010 sec: 56404566 operations; 56140 current ops/sec; [READ: Count=280475, Max=51935, Min=520, Avg=4714.15, 90=6895, 99=12631, 99.9=32991, 99.99=41439] [UPDATE: Count=280861, Max=11991, Min=444, Avg=2409.99, 90=3477, 99=5011, 99.9=7423, 99.99=9111] 
2023-06-05 12:49:19:562 1020 sec: 56972285 operations; 56771.9 current ops/sec; [READ: Count=284169, Max=35839, Min=549, Avg=4645.58, 90=6895, 99=11623, 99.9=24543, 99.99=30127] [UPDATE: Count=283510, Max=12383, Min=453, Avg=2394.71, 90=3461, 99=4947, 99.9=6991, 99.99=8879] 
2023-06-05 12:49:29:562 1030 sec: 57542788 operations; 57050.3 current ops/sec; [READ: Count=285790, Max=37759, Min=521, Avg=4597.54, 90=6831, 99=10471, 99.9=16511, 99.99=22767] [UPDATE: Count=284691, Max=10711, Min=427, Avg=2406.79, 90=3479, 99=4819, 99.9=6707, 99.99=8527] 
2023-06-05 12:49:39:562 1040 sec: 58108649 operations; 56586.1 current ops/sec; [READ: Count=283212, Max=34783, Min=498, Avg=4641.78, 90=6831, 99=10879, 99.9=21759, 99.99=27983] [UPDATE: Count=282639, Max=12799, Min=442, Avg=2421.53, 90=3485, 99=4863, 99.9=7283, 99.99=9791] 
2023-06-05 12:49:49:562 1050 sec: 58670125 operations; 56147.6 current ops/sec; [READ: Count=280776, Max=35295, Min=494, Avg=4705.92, 90=6939, 99=13319, 99.9=25327, 99.99=29647] [UPDATE: Count=280506, Max=17311, Min=440, Avg=2417.46, 90=3489, 99=5247, 99.9=8187, 99.99=11775] 
2023-06-05 12:49:59:562 1060 sec: 59235771 operations; 56564.6 current ops/sec; [READ: Count=282480, Max=37919, Min=507, Avg=4661.79, 90=6903, 99=11847, 99.9=25151, 99.99=30303] [UPDATE: Count=283349, Max=18847, Min=444, Avg=2406.35, 90=3467, 99=4999, 99.9=7955, 99.99=10783] 
2023-06-05 12:50:09:562 1070 sec: 59793675 operations; 55790.4 current ops/sec; [READ: Count=279438, Max=171135, Min=531, Avg=4767.17, 90=6923, 99=13903, 99.9=64543, 99.99=108095] [UPDATE: Count=278522, Max=12031, Min=434, Avg=2393.38, 90=3461, 99=5163, 99.9=7611, 99.99=9367] 
2023-06-05 12:50:19:562 1080 sec: 60331201 operations; 53752.6 current ops/sec; [READ: Count=269109, Max=201727, Min=488, Avg=5037.07, 90=7099, 99=19567, 99.9=113023, 99.99=140415] [UPDATE: Count=268551, Max=17471, Min=434, Avg=2400.12, 90=3491, 99=5675, 99.9=8711, 99.99=12135] 
2023-06-05 12:50:29:562 1090 sec: 60895488 operations; 56428.7 current ops/sec; [READ: Count=281875, Max=35647, Min=483, Avg=4683.16, 90=6959, 99=12343, 99.9=25887, 99.99=30559] [UPDATE: Count=282275, Max=14719, Min=426, Avg=2404.31, 90=3463, 99=5131, 99.9=8007, 99.99=10375] 
2023-06-05 12:50:39:562 1100 sec: 61452820 operations; 55733.2 current ops/sec; [READ: Count=279222, Max=43903, Min=509, Avg=4741.65, 90=6995, 99=13279, 99.9=26335, 99.99=30495] [UPDATE: Count=278108, Max=13095, Min=437, Avg=2427.84, 90=3483, 99=5171, 99.9=8039, 99.99=10079] 
2023-06-05 12:50:49:562 1110 sec: 62014110 operations; 56129 current ops/sec; [READ: Count=281540, Max=47295, Min=517, Avg=4700.94, 90=6967, 99=12503, 99.9=24815, 99.99=29119] [UPDATE: Count=279690, Max=17119, Min=441, Avg=2415.17, 90=3477, 99=5007, 99.9=7315, 99.99=10223] 
2023-06-05 12:50:59:562 1120 sec: 62576205 operations; 56209.5 current ops/sec; [READ: Count=281354, Max=119807, Min=521, Avg=4717.78, 90=6867, 99=12199, 99.9=62719, 99.99=74559] [UPDATE: Count=280859, Max=18191, Min=420, Avg=2392.66, 90=3451, 99=5011, 99.9=8043, 99.99=10423] 
2023-06-05 12:51:09:562 1130 sec: 63135439 operations; 55923.4 current ops/sec; [READ: Count=279548, Max=120895, Min=514, Avg=4762.12, 90=6843, 99=12399, 99.9=64031, 99.99=74623] [UPDATE: Count=279665, Max=18047, Min=448, Avg=2387.61, 90=3435, 99=4839, 99.9=8231, 99.99=13215] 
2023-06-05 12:51:19:562 1140 sec: 63689477 operations; 55403.8 current ops/sec; [READ: Count=277196, Max=192383, Min=505, Avg=4835.53, 90=6899, 99=17535, 99.9=81087, 99.99=121343] [UPDATE: Count=276937, Max=18895, Min=409, Avg=2378.85, 90=3431, 99=5471, 99.9=9039, 99.99=10807] 
2023-06-05 12:51:29:562 1150 sec: 64251319 operations; 56184.2 current ops/sec; [READ: Count=280391, Max=113919, Min=482, Avg=4741.1, 90=6963, 99=17471, 99.9=29679, 99.99=84415] [UPDATE: Count=281515, Max=17039, Min=437, Avg=2381.6, 90=3447, 99=5659, 99.9=9007, 99.99=10767] 
2023-06-05 12:51:39:562 1160 sec: 64816799 operations; 56548 current ops/sec; [READ: Count=282616, Max=42143, Min=533, Avg=4688.87, 90=6959, 99=16399, 99.9=26223, 99.99=29999] [UPDATE: Count=282827, Max=14071, Min=424, Avg=2381.67, 90=3455, 99=5695, 99.9=9135, 99.99=10991] 
2023-06-05 12:51:49:562 1170 sec: 65397242 operations; 58044.3 current ops/sec; [READ: Count=289902, Max=31295, Min=522, Avg=4552.47, 90=6799, 99=13463, 99.9=24159, 99.99=28351] [UPDATE: Count=290494, Max=17135, Min=420, Avg=2338.2, 90=3415, 99=5151, 99.9=7871, 99.99=11727] 
2023-06-05 12:51:59:562 1180 sec: 65980861 operations; 58361.9 current ops/sec; [READ: Count=291803, Max=37151, Min=534, Avg=4527.56, 90=6775, 99=14479, 99.9=23823, 99.99=27583] [UPDATE: Count=291841, Max=18879, Min=430, Avg=2323.26, 90=3391, 99=5323, 99.9=8303, 99.99=10871] 
2023-06-05 12:52:09:562 1190 sec: 66555114 operations; 57425.3 current ops/sec; [READ: Count=287083, Max=141695, Min=505, Avg=4629.06, 90=6791, 99=15943, 99.9=35967, 99.99=86335] [UPDATE: Count=287245, Max=17791, Min=444, Avg=2332.3, 90=3411, 99=5355, 99.9=8311, 99.99=10087] 
2023-06-05 12:52:19:562 1200 sec: 67132733 operations; 57761.9 current ops/sec; [READ: Count=288731, Max=94463, Min=512, Avg=4611.36, 90=6747, 99=13447, 99.9=81023, 99.99=86335] [UPDATE: Count=288867, Max=15063, Min=453, Avg=2312.44, 90=3385, 99=5083, 99.9=7695, 99.99=9479] 
2023-06-05 12:52:29:562 1210 sec: 67732932 operations; 60019.9 current ops/sec; [READ: Count=299938, Max=31151, Min=525, Avg=4372.84, 90=6627, 99=10351, 99.9=16263, 99.99=25055] [UPDATE: Count=300108, Max=13199, Min=443, Avg=2289.55, 90=3353, 99=4791, 99.9=6647, 99.99=8367] 
2023-06-05 12:52:39:562 1220 sec: 68331956 operations; 59902.4 current ops/sec; [READ: Count=299703, Max=34047, Min=520, Avg=4389.01, 90=6663, 99=10855, 99.9=17455, 99.99=24559] [UPDATE: Count=299283, Max=11775, Min=453, Avg=2282.62, 90=3351, 99=4855, 99.9=6831, 99.99=8575] 
2023-06-05 12:52:49:562 1230 sec: 68922224 operations; 59026.8 current ops/sec; [READ: Count=295481, Max=233215, Min=552, Avg=4476.49, 90=6683, 99=11407, 99.9=30319, 99.99=162431] [UPDATE: Count=294970, Max=31119, Min=444, Avg=2284.14, 90=3349, 99=4927, 99.9=7207, 99.99=10479] 
2023-06-05 12:52:59:562 1240 sec: 69505617 operations; 58339.3 current ops/sec; [READ: Count=291872, Max=179583, Min=535, Avg=4536.16, 90=6803, 99=11383, 99.9=29807, 99.99=144767] [UPDATE: Count=291569, Max=19359, Min=466, Avg=2316.72, 90=3393, 99=4995, 99.9=7387, 99.99=10455] 
2023-06-05 12:53:09:562 1250 sec: 70097921 operations; 59230.4 current ops/sec; [READ: Count=296575, Max=47935, Min=529, Avg=4439.11, 90=6751, 99=10791, 99.9=18095, 99.99=31503] [UPDATE: Count=295610, Max=13551, Min=446, Avg=2298.49, 90=3369, 99=4855, 99.9=7031, 99.99=8879] 
2023-06-05 12:53:19:562 1260 sec: 70685037 operations; 58711.6 current ops/sec; [READ: Count=293590, Max=51551, Min=542, Avg=4482.77, 90=6799, 99=12079, 99.9=22319, 99.99=43231] [UPDATE: Count=293592, Max=13063, Min=438, Avg=2311.67, 90=3391, 99=5055, 99.9=7419, 99.99=9319] 
2023-06-05 12:53:29:562 1270 sec: 71270513 operations; 58547.6 current ops/sec; [READ: Count=292280, Max=30527, Min=510, Avg=4487.65, 90=6787, 99=11447, 99.9=21663, 99.99=25503] [UPDATE: Count=293126, Max=12383, Min=444, Avg=2324.97, 90=3411, 99=4995, 99.9=7955, 99.99=10383] 
2023-06-05 12:53:39:562 1280 sec: 71833919 operations; 56340.6 current ops/sec; [READ: Count=281547, Max=262399, Min=523, Avg=4769.91, 90=6771, 99=14223, 99.9=157311, 99.99=169215] [UPDATE: Count=281965, Max=19551, Min=417, Avg=2300.64, 90=3395, 99=5259, 99.9=8391, 99.99=10327] 
2023-06-05 12:53:49:562 1290 sec: 72399399 operations; 56548 current ops/sec; [READ: Count=282536, Max=162303, Min=548, Avg=4741.7, 90=6831, 99=12415, 99.9=132351, 99.99=139647] [UPDATE: Count=282898, Max=17775, Min=449, Avg=2321.97, 90=3417, 99=5155, 99.9=8255, 99.99=12719] 
2023-06-05 12:53:59:562 1300 sec: 72975368 operations; 57596.9 current ops/sec; [READ: Count=287025, Max=111615, Min=530, Avg=4625.13, 90=6795, 99=13999, 99.9=57055, 99.99=79743] [UPDATE: Count=288971, Max=16055, Min=434, Avg=2306.8, 90=3399, 99=5247, 99.9=8155, 99.99=10807] 
2023-06-05 12:54:09:562 1310 sec: 73548474 operations; 57310.6 current ops/sec; [READ: Count=286599, Max=103743, Min=472, Avg=4655.65, 90=6815, 99=17071, 99.9=60415, 99.99=71039] [UPDATE: Count=286416, Max=22047, Min=445, Avg=2294.04, 90=3381, 99=5451, 99.9=9119, 99.99=11399] 
2023-06-05 12:54:19:562 1320 sec: 74103413 operations; 55493.9 current ops/sec; [READ: Count=277724, Max=248959, Min=496, Avg=4931.13, 90=6703, 99=21871, 99.9=159871, 99.99=167551] [UPDATE: Count=277291, Max=14911, Min=407, Avg=2256.76, 90=3331, 99=5803, 99.9=9455, 99.99=11343] 
2023-06-05 12:54:29:562 1330 sec: 74654982 operations; 55156.9 current ops/sec; [READ: Count=275719, Max=143999, Min=527, Avg=4953.94, 90=7067, 99=25807, 99.9=72575, 99.99=112447] [UPDATE: Count=275913, Max=30735, Min=419, Avg=2295.75, 90=3385, 99=6191, 99.9=10231, 99.99=25167] 
2023-06-05 12:54:39:562 1340 sec: 75212461 operations; 55747.9 current ops/sec; [READ: Count=279009, Max=114495, Min=532, Avg=4871.56, 90=7191, 99=23663, 99.9=51999, 99.99=71871] [UPDATE: Count=278479, Max=13175, Min=455, Avg=2299.08, 90=3411, 99=5903, 99.9=9023, 99.99=10871] 
2023-06-05 12:54:49:562 1350 sec: 75773815 operations; 56135.4 current ops/sec; [READ: Count=280529, Max=187007, Min=498, Avg=4815.2, 90=7111, 99=18335, 99.9=95423, 99.99=109055] [UPDATE: Count=280735, Max=19375, Min=441, Avg=2308.49, 90=3421, 99=5459, 99.9=8551, 99.99=11159] 
2023-06-05 12:54:59:562 1360 sec: 76342412 operations; 56859.7 current ops/sec; [READ: Count=284024, Max=132607, Min=532, Avg=4712.32, 90=7075, 99=14879, 99.9=41311, 99.99=100223] [UPDATE: Count=284599, Max=20063, Min=443, Avg=2321.18, 90=3437, 99=5267, 99.9=7887, 99.99=10287] 
2023-06-05 12:55:09:562 1370 sec: 76911356 operations; 56894.4 current ops/sec; [READ: Count=284061, Max=49759, Min=514, Avg=4685.44, 90=7131, 99=15151, 99.9=26543, 99.99=33599] [UPDATE: Count=284672, Max=17887, Min=439, Avg=2342.07, 90=3445, 99=5395, 99.9=8487, 99.99=11583] 
2023-06-05 12:55:19:562 1380 sec: 77452453 operations; 54109.7 current ops/sec; [READ: Count=270871, Max=132735, Min=516, Avg=5046.7, 90=7179, 99=25871, 99.9=82111, 99.99=88383] [UPDATE: Count=270432, Max=12255, Min=442, Avg=2339.08, 90=3465, 99=5915, 99.9=8823, 99.99=10543] 
2023-06-05 12:55:29:562 1390 sec: 77994756 operations; 54230.3 current ops/sec; [READ: Count=271430, Max=541695, Min=504, Avg=5042.63, 90=6843, 99=19935, 99.9=163839, 99.99=421631] [UPDATE: Count=270677, Max=14431, Min=427, Avg=2280.11, 90=3407, 99=5595, 99.9=9087, 99.99=10799] 
2023-06-05 12:55:39:562 1400 sec: 78517228 operations; 52247.2 current ops/sec; [READ: Count=261366, Max=405759, Min=508, Avg=5506.49, 90=6359, 99=15503, 99.9=370943, 99.99=397823] [UPDATE: Count=261216, Max=13999, Min=420, Avg=2171.42, 90=3269, 99=5091, 99.9=8147, 99.99=9991] 
2023-06-05 12:55:49:562 1410 sec: 79041731 operations; 52450.3 current ops/sec; [READ: Count=262544, Max=403455, Min=490, Avg=5451.29, 90=6487, 99=18319, 99.9=352255, 99.99=387583] [UPDATE: Count=262155, Max=14551, Min=434, Avg=2164.43, 90=3273, 99=5271, 99.9=8695, 99.99=11143] 
2023-06-05 12:55:59:562 1420 sec: 79589548 operations; 54781.7 current ops/sec; [READ: Count=274025, Max=505855, Min=508, Avg=5062.61, 90=6971, 99=17295, 99.9=304639, 99.99=449535] [UPDATE: Count=273710, Max=17871, Min=433, Avg=2257.62, 90=3387, 99=5507, 99.9=8535, 99.99=10983] 
2023-06-05 12:56:09:562 1430 sec: 80148814 operations; 55926.6 current ops/sec; [READ: Count=280150, Max=69695, Min=520, Avg=4817.19, 90=7391, 99=19327, 99.9=38655, 99.99=54655] [UPDATE: Count=279121, Max=11887, Min=450, Avg=2327.4, 90=3489, 99=5755, 99.9=8663, 99.99=10335] 
2023-06-05 12:56:19:562 1440 sec: 80705372 operations; 55655.8 current ops/sec; [READ: Count=278333, Max=177919, Min=512, Avg=4870.09, 90=7271, 99=21055, 99.9=59711, 99.99=101055] [UPDATE: Count=277667, Max=27759, Min=444, Avg=2318.22, 90=3469, 99=5891, 99.9=8895, 99.99=14871] 
2023-06-05 12:56:29:562 1450 sec: 81261102 operations; 55573 current ops/sec; [READ: Count=277868, Max=180991, Min=531, Avg=4890.39, 90=7199, 99=19855, 99.9=97727, 99.99=139263] [UPDATE: Count=278526, Max=27583, Min=427, Avg=2298.51, 90=3447, 99=5507, 99.9=8231, 99.99=10575] 
2023-06-05 12:56:39:562 1460 sec: 81821207 operations; 56010.5 current ops/sec; [READ: Count=279762, Max=93055, Min=488, Avg=4834.84, 90=7447, 99=17599, 99.9=43647, 99.99=82751] [UPDATE: Count=280175, Max=13135, Min=438, Avg=2305.37, 90=3457, 99=5491, 99.9=8223, 99.99=10199] 
2023-06-05 12:56:49:562 1470 sec: 82377984 operations; 55677.7 current ops/sec; [READ: Count=277998, Max=115199, Min=501, Avg=4880, 90=7487, 99=19935, 99.9=42911, 99.99=64415] [UPDATE: Count=278271, Max=27183, Min=439, Avg=2310.93, 90=3477, 99=5687, 99.9=8615, 99.99=16655] 
2023-06-05 12:56:59:562 1480 sec: 82930738 operations; 55275.4 current ops/sec; [READ: Count=275827, Max=271103, Min=529, Avg=4962.96, 90=7035, 99=20879, 99.9=137727, 99.99=193919] [UPDATE: Count=277503, Max=24607, Min=444, Avg=2264.45, 90=3407, 99=5471, 99.9=8591, 99.99=11503] 
2023-06-05 12:57:09:562 1490 sec: 83480151 operations; 54941.3 current ops/sec; [READ: Count=275308, Max=224895, Min=519, Avg=5003.18, 90=6987, 99=16375, 99.9=161791, 99.99=172031] [UPDATE: Count=274041, Max=11807, Min=423, Avg=2272.46, 90=3415, 99=5319, 99.9=7711, 99.99=9527] 
2023-06-05 12:57:19:562 1500 sec: 84035377 operations; 55522.6 current ops/sec; [READ: Count=278236, Max=144255, Min=511, Avg=4890.61, 90=7187, 99=15263, 99.9=110591, 99.99=135935] [UPDATE: Count=276932, Max=14199, Min=447, Avg=2305.43, 90=3449, 99=5255, 99.9=7423, 99.99=9271] 
2023-06-05 12:57:29:562 1510 sec: 84598167 operations; 56279 current ops/sec; [READ: Count=281376, Max=92927, Min=498, Avg=4763.99, 90=7219, 99=14439, 99.9=47423, 99.99=69695] [UPDATE: Count=280936, Max=25279, Min=431, Avg=2345.66, 90=3479, 99=5275, 99.9=7719, 99.99=14903] 
2023-06-05 12:57:39:562 1520 sec: 85147391 operations; 54922.4 current ops/sec; [READ: Count=274821, Max=332031, Min=496, Avg=4945.13, 90=7123, 99=21695, 99.9=88383, 99.99=204287] [UPDATE: Count=275089, Max=23135, Min=431, Avg=2327.31, 90=3437, 99=5483, 99.9=8863, 99.99=11431] 
2023-06-05 12:57:49:563 1530 sec: 85701961 operations; 55451.45 current ops/sec; [READ: Count=277065, Max=99647, Min=490, Avg=4893.05, 90=7175, 99=20895, 99.9=79999, 99.99=87743] [UPDATE: Count=277306, Max=34335, Min=434, Avg=2318.5, 90=3437, 99=5767, 99.9=8927, 99.99=11887] 
2023-06-05 12:57:59:562 1540 sec: 86255650 operations; 55374.44 current ops/sec; [READ: Count=276458, Max=98559, Min=497, Avg=4880.82, 90=7359, 99=20335, 99.9=58079, 99.99=69951] [UPDATE: Count=277219, Max=18543, Min=421, Avg=2344.98, 90=3473, 99=5843, 99.9=8855, 99.99=10799] 
2023-06-05 12:58:09:562 1550 sec: 86805346 operations; 54969.6 current ops/sec; [READ: Count=275277, Max=75647, Min=523, Avg=4908.97, 90=7387, 99=22959, 99.9=45215, 99.99=55423] [UPDATE: Count=274395, Max=24351, Min=432, Avg=2359.97, 90=3499, 99=5955, 99.9=9079, 99.99=15119] 
2023-06-05 12:58:19:562 1560 sec: 87351549 operations; 54620.3 current ops/sec; [READ: Count=272979, Max=140415, Min=526, Avg=4996.58, 90=7103, 99=25327, 99.9=110399, 99.99=118335] [UPDATE: Count=273270, Max=13599, Min=444, Avg=2324.48, 90=3441, 99=5911, 99.9=9159, 99.99=11079] 
2023-06-05 12:58:29:562 1570 sec: 87893448 operations; 54189.9 current ops/sec; [READ: Count=271082, Max=208255, Min=513, Avg=5025.53, 90=7319, 99=25535, 99.9=45407, 99.99=140031] [UPDATE: Count=270695, Max=12895, Min=426, Avg=2346.89, 90=3479, 99=6459, 99.9=9487, 99.99=11103] 
2023-06-05 12:58:39:562 1580 sec: 88430790 operations; 53734.2 current ops/sec; [READ: Count=268825, Max=152191, Min=525, Avg=5126.64, 90=7163, 99=25647, 99.9=115583, 99.99=138879] [UPDATE: Count=268592, Max=15407, Min=404, Avg=2317.85, 90=3449, 99=6247, 99.9=9479, 99.99=11271] 
2023-06-05 12:58:49:562 1590 sec: 88965908 operations; 53511.8 current ops/sec; [READ: Count=267468, Max=102335, Min=503, Avg=5114.85, 90=7459, 99=26287, 99.9=59039, 99.99=68991] [UPDATE: Count=267659, Max=31615, Min=440, Avg=2357.37, 90=3507, 99=6667, 99.9=9327, 99.99=12055] 
2023-06-05 12:58:59:562 1600 sec: 89500673 operations; 53476.5 current ops/sec; [READ: Count=266770, Max=221823, Min=515, Avg=5115.06, 90=7327, 99=25183, 99.9=81471, 99.99=127935] [UPDATE: Count=268078, Max=22815, Min=426, Avg=2362.09, 90=3499, 99=6527, 99.9=9575, 99.99=15655] 
2023-06-05 12:59:09:562 1610 sec: 90008535 operations; 50786.2 current ops/sec; [READ: Count=253772, Max=573951, Min=494, Avg=5600.21, 90=6555, 99=26335, 99.9=269567, 99.99=413183] [UPDATE: Count=253992, Max=23823, Min=441, Avg=2258, 90=3337, 99=6071, 99.9=9399, 99.99=14111] 
2023-06-05 12:59:19:562 1620 sec: 90526535 operations; 51800 current ops/sec; [READ: Count=259286, Max=589823, Min=497, Avg=5483.85, 90=6375, 99=17471, 99.9=324863, 99.99=375807] [UPDATE: Count=258767, Max=13127, Min=404, Avg=2243.09, 90=3311, 99=5135, 99.9=7887, 99.99=9983] 
2023-06-05 12:59:29:562 1630 sec: 91076354 operations; 54981.9 current ops/sec; [READ: Count=274873, Max=326655, Min=536, Avg=4929.41, 90=6983, 99=15615, 99.9=91839, 99.99=274431] [UPDATE: Count=274968, Max=11895, Min=428, Avg=2352.1, 90=3443, 99=5307, 99.9=8147, 99.99=9951] 
2023-06-05 12:59:39:562 1640 sec: 91638108 operations; 56175.4 current ops/sec; [READ: Count=280805, Max=83263, Min=527, Avg=4735.51, 90=7155, 99=13455, 99.9=25983, 99.99=64607] [UPDATE: Count=280953, Max=12919, Min=412, Avg=2384.38, 90=3481, 99=5259, 99.9=8043, 99.99=10175] 
2023-06-05 12:59:49:562 1650 sec: 92197580 operations; 55947.2 current ops/sec; [READ: Count=279657, Max=110975, Min=493, Avg=4767.44, 90=7131, 99=14087, 99.9=38335, 99.99=94975] [UPDATE: Count=279905, Max=21455, Min=429, Avg=2379.69, 90=3475, 99=5319, 99.9=8359, 99.99=11087] 
2023-06-05 12:59:59:562 1660 sec: 92752576 operations; 55499.6 current ops/sec; [READ: Count=277251, Max=118527, Min=486, Avg=4838.69, 90=6995, 99=16311, 99.9=81151, 99.99=87231] [UPDATE: Count=277659, Max=18255, Min=456, Avg=2367.52, 90=3451, 99=5395, 99.9=8375, 99.99=11399] 
2023-06-05 13:00:09:562 1670 sec: 93312038 operations; 55946.2 current ops/sec; [READ: Count=279196, Max=42015, Min=479, Avg=4742.89, 90=7135, 99=13335, 99.9=23023, 99.99=29615] [UPDATE: Count=280123, Max=11623, Min=437, Avg=2408.64, 90=3499, 99=5243, 99.9=7571, 99.99=9143] 
2023-06-05 13:00:19:562 1680 sec: 93853388 operations; 54135 current ops/sec; [READ: Count=270609, Max=335615, Min=506, Avg=5012.8, 90=6943, 99=17343, 99.9=107711, 99.99=271871] [UPDATE: Count=270192, Max=35487, Min=463, Avg=2381.13, 90=3445, 99=5507, 99.9=8631, 99.99=19135] 
2023-06-05 13:00:29:562 1690 sec: 94395182 operations; 54179.4 current ops/sec; [READ: Count=270749, Max=145279, Min=515, Avg=4928.66, 90=7331, 99=15903, 99.9=30607, 99.99=110719] [UPDATE: Count=271600, Max=15631, Min=450, Avg=2439.81, 90=3527, 99=5647, 99.9=8131, 99.99=10415] 
2023-06-05 13:00:39:562 1700 sec: 94937185 operations; 54200.3 current ops/sec; [READ: Count=271246, Max=269055, Min=519, Avg=4985.14, 90=7083, 99=16367, 99.9=130687, 99.99=187775] [UPDATE: Count=270944, Max=12887, Min=437, Avg=2393.31, 90=3471, 99=5523, 99.9=8839, 99.99=11311] 
2023-06-05 13:00:49:562 1710 sec: 95475924 operations; 53873.9 current ops/sec; [READ: Count=269154, Max=122431, Min=514, Avg=5013.56, 90=7319, 99=21631, 99.9=53087, 99.99=101823] [UPDATE: Count=269450, Max=17775, Min=449, Avg=2410.1, 90=3517, 99=5991, 99.9=9215, 99.99=12015] 
2023-06-05 13:00:59:562 1720 sec: 96003688 operations; 52776.4 current ops/sec; [READ: Count=264069, Max=213759, Min=507, Avg=5208.92, 90=6919, 99=29967, 99.9=135039, 99.99=192255] [UPDATE: Count=263765, Max=63007, Min=459, Avg=2363.14, 90=3431, 99=5855, 99.9=9623, 99.99=59455] 
2023-06-05 13:01:09:562 1730 sec: 96538837 operations; 53514.9 current ops/sec; [READ: Count=267647, Max=157823, Min=505, Avg=5076.32, 90=7071, 99=20911, 99.9=98431, 99.99=114943] [UPDATE: Count=267471, Max=13919, Min=457, Avg=2395.29, 90=3477, 99=5695, 99.9=8767, 99.99=10983] 
2023-06-05 13:01:19:562 1740 sec: 97070836 operations; 53199.9 current ops/sec; [READ: Count=266408, Max=166911, Min=534, Avg=5126.22, 90=7115, 99=22191, 99.9=85439, 99.99=146687] [UPDATE: Count=265490, Max=16431, Min=445, Avg=2387.58, 90=3487, 99=5791, 99.9=8791, 99.99=11383] 
2023-06-05 13:01:29:562 1750 sec: 97607522 operations; 53668.6 current ops/sec; [READ: Count=268239, Max=171007, Min=538, Avg=5051.47, 90=7123, 99=18767, 99.9=87807, 99.99=136447] [UPDATE: Count=268656, Max=14719, Min=453, Avg=2398.96, 90=3501, 99=5647, 99.9=8535, 99.99=10607] 
2023-06-05 13:01:39:562 1760 sec: 98165381 operations; 55785.9 current ops/sec; [READ: Count=279240, Max=45759, Min=552, Avg=4744.04, 90=7147, 99=12207, 99.9=31279, 99.99=40415] [UPDATE: Count=278474, Max=12559, Min=428, Avg=2420.17, 90=3513, 99=5151, 99.9=7831, 99.99=10103] 
2023-06-05 13:01:49:562 1770 sec: 98719588 operations; 55420.7 current ops/sec; [READ: Count=276514, Max=49823, Min=550, Avg=4798.24, 90=7103, 99=15127, 99.9=32079, 99.99=37215] [UPDATE: Count=277715, Max=23279, Min=446, Avg=2421.14, 90=3511, 99=5407, 99.9=8463, 99.99=10799] 
2023-06-05 13:01:59:562 1780 sec: 99269390 operations; 54980.2 current ops/sec; [READ: Count=274658, Max=45631, Min=538, Avg=4834.87, 90=7163, 99=16639, 99.9=28911, 99.99=34079] [UPDATE: Count=275166, Max=19439, Min=465, Avg=2440.09, 90=3517, 99=5539, 99.9=8879, 99.99=11479] 
2023-06-05 13:02:09:562 1790 sec: 99814452 operations; 54506.2 current ops/sec; [READ: Count=272334, Max=108991, Min=511, Avg=4900.29, 90=7147, 99=18335, 99.9=37695, 99.99=98047] [UPDATE: Count=272689, Max=12367, Min=452, Avg=2436.53, 90=3515, 99=5711, 99.9=8703, 99.99=10495] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:19:562 1800 sec: 100343658 operations; 52920.6 current ops/sec; [READ: Count=264398, Max=304127, Min=552, Avg=5199.22, 90=6683, 99=17647, 99.9=163327, 99.99=224895] [UPDATE: Count=264386, Max=12615, Min=433, Avg=2354.57, 90=3417, 99=5239, 99.9=8223, 99.99=10071] 
Still waiting for thread Thread-129 to complete. Workload status: true
2023-06-05 13:02:21:959 1802 sec: 100344844 operations; 494.79 current ops/sec; [READ: Count=597, Max=168191, Min=1166, Avg=8171.89, 90=7039, 99=161791, 99.9=166143, 99.99=168191] [CLEANUP: Count=200, Max=2224127, Min=0, Avg=11116.82, 90=2, 99=13, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802397
[OVERALL], Throughput(ops/sec), 55672.99768031127
[TOTAL_GCS_PS_Scavenge], Count, 6649
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17132
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9505120126143132
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 125
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.00693520905771592
[TOTAL_GCs], Count, 6652
[TOTAL_GC_TIME], Time(ms), 17257
[TOTAL_GC_TIME_%], Time(%), 0.957447221672029
[READ], Operations, 50170802
[READ], AverageLatency(us), 4567.105671621514
[READ], MinLatency(us), 445
[READ], MaxLatency(us), 589823
[READ], 95thPercentileLatency(us), 7971
[READ], 99thPercentileLatency(us), 16111
[READ], Return=OK, 50170802
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11116.815
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 13
[UPDATE], Operations, 50174042
[UPDATE], AverageLatency(us), 2247.528544102546
[UPDATE], MinLatency(us), 373
[UPDATE], MaxLatency(us), 216703
[UPDATE], 95thPercentileLatency(us), 3757
[UPDATE], 99thPercentileLatency(us), 5347
[UPDATE], Return=OK, 50174042
