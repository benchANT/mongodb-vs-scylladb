bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:20:742 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:30:725 10 sec: 512483 operations; 51248.3 current ops/sec; [READ: Count=256169, Max=95487, Min=349, Avg=3051.99, 90=4807, 99=15055, 99.9=65183, 99.99=75711] [UPDATE: Count=257833, Max=108863, Min=282, Avg=1850.4, 90=2633, 99=8887, 99.9=50047, 99.99=72575] 
2023-06-05 12:32:40:725 20 sec: 1075078 operations; 56259.5 current ops/sec; [READ: Count=281191, Max=40287, Min=396, Avg=3659.12, 90=5579, 99=17791, 99.9=23055, 99.99=26879] [UPDATE: Count=281097, Max=10671, Min=303, Avg=1847.95, 90=2781, 99=5679, 99.9=7827, 99.99=9223] 
2023-06-05 12:32:50:725 30 sec: 1637404 operations; 56232.6 current ops/sec; [READ: Count=280840, Max=43583, Min=398, Avg=3758.52, 90=5803, 99=17487, 99.9=31263, 99.99=35583] [UPDATE: Count=281452, Max=24111, Min=311, Avg=1890.11, 90=2867, 99=5835, 99.9=8035, 99.99=9991] 
2023-06-05 12:33:00:725 40 sec: 2199884 operations; 56248 current ops/sec; [READ: Count=281547, Max=38719, Min=377, Avg=3853.75, 90=5955, 99=18111, 99.9=31311, 99.99=35327] [UPDATE: Count=280975, Max=17567, Min=301, Avg=1913.08, 90=2903, 99=5943, 99.9=8075, 99.99=9975] 
2023-06-05 12:33:10:725 50 sec: 2760433 operations; 56054.9 current ops/sec; [READ: Count=279745, Max=155135, Min=382, Avg=4165, 90=6475, 99=20031, 99.9=59775, 99.99=83903] [UPDATE: Count=280900, Max=13447, Min=298, Avg=1974.79, 90=3009, 99=6103, 99.9=8179, 99.99=9455] 
2023-06-05 12:33:20:725 60 sec: 3323899 operations; 56346.6 current ops/sec; [READ: Count=282187, Max=124607, Min=372, Avg=4472.75, 90=6503, 99=27855, 99.9=80511, 99.99=89151] [UPDATE: Count=281299, Max=11311, Min=313, Avg=1990.96, 90=3027, 99=6147, 99.9=8199, 99.99=9671] 
2023-06-05 12:33:30:725 70 sec: 3887411 operations; 56351.2 current ops/sec; [READ: Count=281392, Max=70591, Min=398, Avg=4162.8, 90=6439, 99=19247, 99.9=41567, 99.99=61055] [UPDATE: Count=281513, Max=24143, Min=318, Avg=2012.51, 90=3065, 99=6047, 99.9=8295, 99.99=12991] 
2023-06-05 12:33:40:725 80 sec: 4449675 operations; 56226.4 current ops/sec; [READ: Count=281544, Max=92287, Min=394, Avg=4173.59, 90=6555, 99=19055, 99.9=30879, 99.99=43999] [UPDATE: Count=281119, Max=19391, Min=277, Avg=2025.5, 90=3099, 99=6063, 99.9=8143, 99.99=9623] 
2023-06-05 12:33:50:725 90 sec: 5012383 operations; 56270.8 current ops/sec; [READ: Count=281008, Max=49087, Min=398, Avg=4206, 90=6595, 99=18847, 99.9=36575, 99.99=44479] [UPDATE: Count=281645, Max=15527, Min=294, Avg=2035.92, 90=3131, 99=5987, 99.9=8095, 99.99=10495] 
2023-06-05 12:34:00:725 100 sec: 5574878 operations; 56249.5 current ops/sec; [READ: Count=280943, Max=52735, Min=387, Avg=4176.11, 90=6591, 99=19775, 99.9=29311, 99.99=37663] [UPDATE: Count=281543, Max=16639, Min=291, Avg=2017.91, 90=3109, 99=6059, 99.9=8151, 99.99=10479] 
2023-06-05 12:34:10:725 110 sec: 6135315 operations; 56043.7 current ops/sec; [READ: Count=280657, Max=135423, Min=397, Avg=4450.53, 90=6731, 99=23599, 99.9=86975, 99.99=103295] [UPDATE: Count=279914, Max=15223, Min=328, Avg=2048.13, 90=3127, 99=6623, 99.9=9143, 99.99=11263] 
2023-06-05 12:34:20:725 120 sec: 6699281 operations; 56396.6 current ops/sec; [READ: Count=281797, Max=160895, Min=401, Avg=4600.33, 90=6703, 99=24639, 99.9=96191, 99.99=114879] [UPDATE: Count=282114, Max=12879, Min=290, Avg=2059.98, 90=3125, 99=6551, 99.9=8943, 99.99=10647] 
2023-06-05 12:34:30:727 130 sec: 7258946 operations; 55955.31 current ops/sec; [READ: Count=280460, Max=257407, Min=399, Avg=4439.02, 90=6835, 99=22511, 99.9=32031, 99.99=127295] [UPDATE: Count=279368, Max=15023, Min=296, Avg=2073.85, 90=3125, 99=6875, 99.9=9359, 99.99=10975] 
2023-06-05 12:34:40:725 140 sec: 7804592 operations; 54575.52 current ops/sec; [READ: Count=273078, Max=302847, Min=392, Avg=5090.39, 90=6819, 99=22959, 99.9=163199, 99.99=271103] [UPDATE: Count=272658, Max=14151, Min=319, Avg=2048.51, 90=3095, 99=6899, 99.9=9311, 99.99=10863] 
2023-06-05 12:34:50:725 150 sec: 8361370 operations; 55677.8 current ops/sec; [READ: Count=278454, Max=448255, Min=399, Avg=5024.57, 90=6671, 99=25423, 99.9=161407, 99.99=235007] [UPDATE: Count=278250, Max=19775, Min=304, Avg=2053.31, 90=3105, 99=6867, 99.9=9567, 99.99=12895] 
2023-06-05 12:35:00:725 160 sec: 8923446 operations; 56207.6 current ops/sec; [READ: Count=281034, Max=346367, Min=392, Avg=4978.08, 90=6403, 99=21791, 99.9=191231, 99.99=290047] [UPDATE: Count=281016, Max=17103, Min=285, Avg=2041.17, 90=3085, 99=6459, 99.9=9279, 99.99=11839] 
2023-06-05 12:35:10:725 170 sec: 9486472 operations; 56302.6 current ops/sec; [READ: Count=281396, Max=368639, Min=403, Avg=4863.71, 90=6491, 99=21231, 99.9=188287, 99.99=220543] [UPDATE: Count=281388, Max=12719, Min=310, Avg=2081.72, 90=3167, 99=6111, 99.9=8223, 99.99=9775] 
2023-06-05 12:35:20:725 180 sec: 10047925 operations; 56145.3 current ops/sec; [READ: Count=280438, Max=319231, Min=392, Avg=4965.88, 90=6307, 99=25151, 99.9=197119, 99.99=261247] [UPDATE: Count=280645, Max=23871, Min=306, Avg=2073.71, 90=3137, 99=5711, 99.9=8479, 99.99=13719] 
2023-06-05 12:35:30:725 190 sec: 10627439 operations; 57951.4 current ops/sec; [READ: Count=289094, Max=228735, Min=305, Avg=4520.05, 90=6375, 99=22863, 99.9=110847, 99.99=157695] [UPDATE: Count=290816, Max=19215, Min=280, Avg=2118.61, 90=3151, 99=5671, 99.9=8735, 99.99=11327] 
2023-06-05 12:35:40:725 200 sec: 11192496 operations; 56505.7 current ops/sec; [READ: Count=282385, Max=297727, Min=378, Avg=4643.31, 90=6079, 99=22911, 99.9=188159, 99.99=201087] [UPDATE: Count=282731, Max=14703, Min=310, Avg=2068.06, 90=3109, 99=5423, 99.9=8623, 99.99=10703] 
2023-06-05 12:35:50:725 210 sec: 11760702 operations; 56820.6 current ops/sec; [READ: Count=283541, Max=173183, Min=395, Avg=4488.05, 90=6223, 99=20207, 99.9=157823, 99.99=165247] [UPDATE: Count=284616, Max=16831, Min=316, Avg=2092.53, 90=3123, 99=5571, 99.9=8655, 99.99=11183] 
2023-06-05 12:36:00:725 220 sec: 12324831 operations; 56412.9 current ops/sec; [READ: Count=281930, Max=134783, Min=401, Avg=4075.38, 90=6003, 99=18495, 99.9=49215, 99.99=94463] [UPDATE: Count=282104, Max=17503, Min=315, Avg=2048.55, 90=3067, 99=5327, 99.9=8583, 99.99=11127] 
2023-06-05 12:36:10:725 230 sec: 12887592 operations; 56276.1 current ops/sec; [READ: Count=280894, Max=145791, Min=418, Avg=4021.09, 90=5791, 99=18015, 99.9=53663, 99.99=83903] [UPDATE: Count=281949, Max=26303, Min=298, Avg=2011.93, 90=3011, 99=5111, 99.9=8647, 99.99=17295] 
2023-06-05 12:36:20:725 240 sec: 13450164 operations; 56257.2 current ops/sec; [READ: Count=281845, Max=35039, Min=375, Avg=3624.13, 90=5467, 99=9879, 99.9=22847, 99.99=29119] [UPDATE: Count=280442, Max=15511, Min=324, Avg=1937.77, 90=2921, 99=4271, 99.9=6975, 99.99=9703] 
2023-06-05 12:36:30:725 250 sec: 14012647 operations; 56248.3 current ops/sec; [READ: Count=281188, Max=38015, Min=419, Avg=3549.7, 90=5427, 99=7875, 99.9=12175, 99.99=20447] [UPDATE: Count=281392, Max=14479, Min=304, Avg=1938.62, 90=2931, 99=4115, 99.9=6311, 99.99=9247] 
2023-06-05 12:36:40:725 260 sec: 14575165 operations; 56251.8 current ops/sec; [READ: Count=280850, Max=23007, Min=386, Avg=3548.27, 90=5439, 99=7819, 99.9=11095, 99.99=17599] [UPDATE: Count=281611, Max=10903, Min=311, Avg=1939.02, 90=2947, 99=4077, 99.9=5951, 99.99=7815] 
2023-06-05 12:36:50:725 270 sec: 15137637 operations; 56247.2 current ops/sec; [READ: Count=281384, Max=28895, Min=394, Avg=3592.25, 90=5527, 99=8423, 99.9=14439, 99.99=22623] [UPDATE: Count=281128, Max=18735, Min=308, Avg=1948.75, 90=2971, 99=4243, 99.9=6407, 99.99=9503] 
2023-06-05 12:37:00:725 280 sec: 15700172 operations; 56253.5 current ops/sec; [READ: Count=280717, Max=31359, Min=391, Avg=3575.48, 90=5519, 99=8239, 99.9=12743, 99.99=23919] [UPDATE: Count=281778, Max=17071, Min=293, Avg=1943.91, 90=2971, 99=4187, 99.9=6407, 99.99=9055] 
2023-06-05 12:37:10:725 290 sec: 16262495 operations; 56232.3 current ops/sec; [READ: Count=280704, Max=111295, Min=380, Avg=3575.28, 90=5491, 99=8663, 99.9=20415, 99.99=41439] [UPDATE: Count=281737, Max=13623, Min=296, Avg=1924.79, 90=2947, 99=4291, 99.9=6751, 99.99=9367] 
2023-06-05 12:37:20:725 300 sec: 16825164 operations; 56266.9 current ops/sec; [READ: Count=281571, Max=41183, Min=396, Avg=3531.97, 90=5451, 99=8171, 99.9=12191, 99.99=31631] [UPDATE: Count=281007, Max=9135, Min=281, Avg=1919.94, 90=2935, 99=4219, 99.9=6131, 99.99=7599] 
2023-06-05 12:37:30:725 310 sec: 17387542 operations; 56237.8 current ops/sec; [READ: Count=281213, Max=83135, Min=387, Avg=3543.43, 90=5423, 99=8471, 99.9=22191, 99.99=37727] [UPDATE: Count=281008, Max=18447, Min=310, Avg=1915.35, 90=2919, 99=4315, 99.9=6931, 99.99=12095] 
2023-06-05 12:37:40:725 320 sec: 17950108 operations; 56256.6 current ops/sec; [READ: Count=281334, Max=54655, Min=364, Avg=3445.91, 90=5263, 99=8343, 99.9=21455, 99.99=28175] [UPDATE: Count=281434, Max=17023, Min=313, Avg=1859.62, 90=2839, 99=3933, 99.9=6515, 99.99=9303] 
2023-06-05 12:37:50:725 330 sec: 18512618 operations; 56251 current ops/sec; [READ: Count=281222, Max=33791, Min=370, Avg=3438.39, 90=5263, 99=9311, 99.9=20799, 99.99=24623] [UPDATE: Count=281294, Max=17887, Min=286, Avg=1854.31, 90=2807, 99=4267, 99.9=8367, 99.99=14527] 
2023-06-05 12:38:00:725 340 sec: 19075049 operations; 56243.1 current ops/sec; [READ: Count=280871, Max=30735, Min=380, Avg=3399.73, 90=5207, 99=9103, 99.9=21535, 99.99=25087] [UPDATE: Count=281615, Max=18719, Min=309, Avg=1838.67, 90=2773, 99=4459, 99.9=7795, 99.99=10879] 
2023-06-05 12:38:10:725 350 sec: 19637590 operations; 56254.1 current ops/sec; [READ: Count=281881, Max=30431, Min=377, Avg=3431.76, 90=5239, 99=9167, 99.9=20991, 99.99=24607] [UPDATE: Count=280642, Max=13807, Min=281, Avg=1849.83, 90=2785, 99=4339, 99.9=7343, 99.99=9711] 
2023-06-05 12:38:20:725 360 sec: 20200183 operations; 56259.3 current ops/sec; [READ: Count=281965, Max=24175, Min=366, Avg=3320.95, 90=5059, 99=7563, 99.9=17871, 99.99=22079] [UPDATE: Count=280543, Max=9407, Min=311, Avg=1827.26, 90=2753, 99=3949, 99.9=6223, 99.99=7819] 
2023-06-05 12:38:30:725 370 sec: 20762641 operations; 56245.8 current ops/sec; [READ: Count=281134, Max=51295, Min=360, Avg=3314.02, 90=5075, 99=7483, 99.9=11031, 99.99=24223] [UPDATE: Count=281343, Max=10567, Min=323, Avg=1825.37, 90=2761, 99=3957, 99.9=6079, 99.99=7903] 
2023-06-05 12:38:40:725 380 sec: 21325178 operations; 56253.7 current ops/sec; [READ: Count=280865, Max=28031, Min=391, Avg=3288.6, 90=5063, 99=7451, 99.9=10215, 99.99=17663] [UPDATE: Count=281613, Max=9519, Min=318, Avg=1811.57, 90=2743, 99=3933, 99.9=6031, 99.99=7787] 
2023-06-05 12:38:50:725 390 sec: 21887689 operations; 56251.1 current ops/sec; [READ: Count=281238, Max=26287, Min=391, Avg=3347.42, 90=5143, 99=7595, 99.9=10375, 99.99=16103] [UPDATE: Count=281295, Max=21455, Min=303, Avg=1842.06, 90=2797, 99=4009, 99.9=6187, 99.99=9839] 
2023-06-05 12:39:00:725 400 sec: 22450165 operations; 56247.6 current ops/sec; [READ: Count=280954, Max=19423, Min=371, Avg=3422.84, 90=5283, 99=7707, 99.9=10423, 99.99=15199] [UPDATE: Count=281549, Max=18127, Min=319, Avg=1871.57, 90=2861, 99=3995, 99.9=5971, 99.99=7967] 
2023-06-05 12:39:10:725 410 sec: 23012666 operations; 56250.1 current ops/sec; [READ: Count=280790, Max=26687, Min=394, Avg=3518.7, 90=5423, 99=8199, 99.9=14103, 99.99=22031] [UPDATE: Count=281675, Max=10871, Min=326, Avg=1908.14, 90=2917, 99=4191, 99.9=6487, 99.99=8735] 
2023-06-05 12:39:20:725 420 sec: 23575153 operations; 56248.7 current ops/sec; [READ: Count=281349, Max=22959, Min=383, Avg=3545.43, 90=5479, 99=8079, 99.9=11223, 99.99=16735] [UPDATE: Count=280802, Max=20175, Min=285, Avg=1925.64, 90=2929, 99=4187, 99.9=6295, 99.99=13159] 
2023-06-05 12:39:30:725 430 sec: 24137648 operations; 56249.5 current ops/sec; [READ: Count=280790, Max=23679, Min=370, Avg=3608.55, 90=5571, 99=8271, 99.9=11567, 99.99=17327] [UPDATE: Count=281701, Max=19103, Min=319, Avg=1952.36, 90=2979, 99=4243, 99.9=6543, 99.99=13439] 
2023-06-05 12:39:40:725 440 sec: 24700176 operations; 56252.8 current ops/sec; [READ: Count=281613, Max=23551, Min=406, Avg=3608.83, 90=5579, 99=8271, 99.9=11671, 99.99=17583] [UPDATE: Count=281278, Max=17407, Min=304, Avg=1950.13, 90=2983, 99=4231, 99.9=6299, 99.99=8959] 
2023-06-05 12:39:50:725 450 sec: 25262619 operations; 56244.3 current ops/sec; [READ: Count=280730, Max=30607, Min=392, Avg=3612.88, 90=5583, 99=8215, 99.9=11783, 99.99=17215] [UPDATE: Count=281684, Max=26751, Min=316, Avg=1954.76, 90=2995, 99=4239, 99.9=6299, 99.99=9679] 
2023-06-05 12:40:00:725 460 sec: 25825130 operations; 56251.1 current ops/sec; [READ: Count=281496, Max=27375, Min=401, Avg=3650.48, 90=5655, 99=8999, 99.9=16703, 99.99=23279] [UPDATE: Count=281044, Max=19487, Min=308, Avg=1957.93, 90=3003, 99=4431, 99.9=6767, 99.99=9775] 
2023-06-05 12:40:10:725 470 sec: 26385986 operations; 56085.6 current ops/sec; [READ: Count=280657, Max=74239, Min=398, Avg=4010.94, 90=6035, 99=15679, 99.9=31663, 99.99=44511] [UPDATE: Count=280400, Max=11639, Min=303, Avg=2030.21, 90=3097, 99=5403, 99.9=8255, 99.99=9935] 
2023-06-05 12:40:20:725 480 sec: 26946678 operations; 56069.2 current ops/sec; [READ: Count=281029, Max=274687, Min=403, Avg=4684.91, 90=6191, 99=25407, 99.9=139519, 99.99=224383] [UPDATE: Count=279765, Max=13015, Min=298, Avg=2064.35, 90=3127, 99=5911, 99.9=8791, 99.99=10663] 
2023-06-05 12:40:30:725 490 sec: 27512672 operations; 56599.4 current ops/sec; [READ: Count=282695, Max=183295, Min=373, Avg=3818.8, 90=5691, 99=9719, 99.9=73471, 99.99=107967] [UPDATE: Count=283088, Max=11215, Min=291, Avg=1978.65, 90=3013, 99=4499, 99.9=7059, 99.99=9119] 
2023-06-05 12:40:40:725 500 sec: 28075033 operations; 56236.1 current ops/sec; [READ: Count=280625, Max=39647, Min=367, Avg=3665.51, 90=5675, 99=9287, 99.9=18191, 99.99=26607] [UPDATE: Count=281739, Max=10943, Min=327, Avg=1958.43, 90=2999, 99=4451, 99.9=6751, 99.99=8943] 
2023-06-05 12:40:50:725 510 sec: 28637597 operations; 56256.4 current ops/sec; [READ: Count=281498, Max=35359, Min=351, Avg=3607.37, 90=5599, 99=8815, 99.9=17007, 99.99=30751] [UPDATE: Count=281046, Max=18943, Min=311, Avg=1928.92, 90=2955, 99=4359, 99.9=6855, 99.99=10367] 
2023-06-05 12:41:00:725 520 sec: 29200169 operations; 56257.2 current ops/sec; [READ: Count=281268, Max=76287, Min=371, Avg=3687.88, 90=5671, 99=9239, 99.9=30303, 99.99=42239] [UPDATE: Count=281307, Max=21599, Min=324, Avg=1949.97, 90=2995, 99=4491, 99.9=7139, 99.99=10143] 
2023-06-05 12:41:10:725 530 sec: 29762629 operations; 56246 current ops/sec; [READ: Count=281587, Max=23935, Min=388, Avg=3675.85, 90=5715, 99=8943, 99.9=16319, 99.99=20895] [UPDATE: Count=280814, Max=11903, Min=320, Avg=1959.21, 90=3005, 99=4451, 99.9=6915, 99.99=9055] 
2023-06-05 12:41:20:725 540 sec: 30325163 operations; 56253.4 current ops/sec; [READ: Count=281753, Max=24511, Min=372, Avg=3673.81, 90=5707, 99=8807, 99.9=15415, 99.99=20847] [UPDATE: Count=280785, Max=12183, Min=313, Avg=1961.25, 90=3009, 99=4411, 99.9=6591, 99.99=8743] 
2023-06-05 12:41:30:725 550 sec: 30887651 operations; 56248.8 current ops/sec; [READ: Count=281103, Max=39007, Min=362, Avg=3775.7, 90=5835, 99=9719, 99.9=20991, 99.99=26319] [UPDATE: Count=281426, Max=13791, Min=306, Avg=1992.89, 90=3059, 99=4611, 99.9=7263, 99.99=9679] 
2023-06-05 12:41:40:725 560 sec: 31450033 operations; 56238.2 current ops/sec; [READ: Count=280215, Max=34623, Min=405, Avg=3840.4, 90=5883, 99=10815, 99.9=24879, 99.99=28959] [UPDATE: Count=282209, Max=12359, Min=312, Avg=2003.11, 90=3067, 99=4735, 99.9=7975, 99.99=10375] 
2023-06-05 12:41:50:725 570 sec: 31997743 operations; 54771 current ops/sec; [READ: Count=273850, Max=415231, Min=404, Avg=4540.9, 90=5687, 99=13367, 99.9=192255, 99.99=356351] [UPDATE: Count=273877, Max=17199, Min=291, Avg=1957.55, 90=3015, 99=4963, 99.9=8623, 99.99=10919] 
2023-06-05 12:42:00:726 580 sec: 32555815 operations; 55801.62 current ops/sec; [READ: Count=278986, Max=380927, Min=380, Avg=4918.11, 90=5807, 99=14959, 99.9=229631, 99.99=346111] [UPDATE: Count=279176, Max=18319, Min=323, Avg=1988.34, 90=3039, 99=4783, 99.9=8015, 99.99=10527] 
2023-06-05 12:42:10:725 590 sec: 33102116 operations; 54635.56 current ops/sec; [READ: Count=273611, Max=319231, Min=404, Avg=5113.44, 90=6291, 99=23983, 99.9=193663, 99.99=285183] [UPDATE: Count=272721, Max=15807, Min=309, Avg=2064.65, 90=3165, 99=5491, 99.9=8247, 99.99=10047] 
2023-06-05 12:42:20:725 600 sec: 33602313 operations; 50019.7 current ops/sec; [READ: Count=250777, Max=469247, Min=378, Avg=5863.51, 90=7271, 99=42143, 99.9=323839, 99.99=329727] [UPDATE: Count=249234, Max=13135, Min=290, Avg=2096.8, 90=3277, 99=6703, 99.9=9031, 99.99=10855] 
2023-06-05 12:42:30:725 610 sec: 34111295 operations; 50898.2 current ops/sec; [READ: Count=253865, Max=353535, Min=359, Avg=5774.18, 90=6951, 99=39391, 99.9=324095, 99.99=328959] [UPDATE: Count=255326, Max=13199, Min=300, Avg=2107.68, 90=3283, 99=6267, 99.9=8727, 99.99=10591] 
2023-06-05 12:42:40:725 620 sec: 34660949 operations; 54965.4 current ops/sec; [READ: Count=274951, Max=323839, Min=391, Avg=5119.92, 90=6935, 99=32255, 99.9=161407, 99.99=270079] [UPDATE: Count=274670, Max=11519, Min=309, Avg=2156.54, 90=3315, 99=5987, 99.9=8247, 99.99=9847] 
2023-06-05 12:42:50:725 630 sec: 35220411 operations; 55946.2 current ops/sec; [READ: Count=279965, Max=253055, Min=388, Avg=4960.1, 90=7051, 99=29791, 99.9=131199, 99.99=145535] [UPDATE: Count=279492, Max=17407, Min=313, Avg=2180.04, 90=3331, 99=6151, 99.9=8423, 99.99=10735] 
2023-06-05 12:43:00:725 640 sec: 35794066 operations; 57365.5 current ops/sec; [READ: Count=286928, Max=228607, Min=394, Avg=4827.94, 90=6591, 99=21311, 99.9=135039, 99.99=142335] [UPDATE: Count=286784, Max=18623, Min=316, Avg=2145.4, 90=3263, 99=5347, 99.9=7691, 99.99=9959] 
2023-06-05 12:43:10:725 650 sec: 36365051 operations; 57098.5 current ops/sec; [READ: Count=285708, Max=278527, Min=390, Avg=4823.52, 90=6719, 99=21167, 99.9=117631, 99.99=175615] [UPDATE: Count=285257, Max=25023, Min=317, Avg=2170.95, 90=3277, 99=5659, 99.9=8647, 99.99=15095] 
2023-06-05 12:43:20:725 660 sec: 36943221 operations; 57817 current ops/sec; [READ: Count=288846, Max=249215, Min=394, Avg=4735.59, 90=6631, 99=16479, 99.9=161407, 99.99=204927] [UPDATE: Count=289294, Max=16511, Min=307, Avg=2171.94, 90=3285, 99=5155, 99.9=7895, 99.99=9351] 
2023-06-05 12:43:30:725 670 sec: 37525295 operations; 58207.4 current ops/sec; [READ: Count=291633, Max=213887, Min=372, Avg=4622.61, 90=6923, 99=15599, 99.9=76031, 99.99=158079] [UPDATE: Count=290548, Max=220671, Min=321, Avg=2243.92, 90=3373, 99=5339, 99.9=7935, 99.99=10615] 
2023-06-05 12:43:40:725 680 sec: 38115832 operations; 59053.7 current ops/sec; [READ: Count=295219, Max=34815, Min=423, Avg=4479.82, 90=6927, 99=12055, 99.9=20863, 99.99=25231] [UPDATE: Count=295063, Max=11743, Min=320, Avg=2259.56, 90=3381, 99=5015, 99.9=7075, 99.99=8471] 
2023-06-05 12:43:50:725 690 sec: 38696273 operations; 58044.1 current ops/sec; [READ: Count=290375, Max=140415, Min=392, Avg=4568.97, 90=6807, 99=13495, 99.9=77567, 99.99=87551] [UPDATE: Count=290135, Max=19183, Min=309, Avg=2262.6, 90=3369, 99=5091, 99.9=7851, 99.99=10807] 
2023-06-05 12:44:00:725 700 sec: 39273149 operations; 57687.6 current ops/sec; [READ: Count=287804, Max=100479, Min=393, Avg=4617.92, 90=6719, 99=13895, 99.9=79871, 99.99=86591] [UPDATE: Count=288999, Max=16447, Min=305, Avg=2268.78, 90=3375, 99=5155, 99.9=8463, 99.99=11183] 
2023-06-05 12:44:10:725 710 sec: 39843977 operations; 57082.8 current ops/sec; [READ: Count=285027, Max=67391, Min=416, Avg=4642.49, 90=6855, 99=15431, 99.9=42367, 99.99=51647] [UPDATE: Count=285905, Max=20399, Min=295, Avg=2309.11, 90=3409, 99=5259, 99.9=8639, 99.99=10615] 
2023-06-05 12:44:20:725 720 sec: 40401202 operations; 55722.5 current ops/sec; [READ: Count=278943, Max=226943, Min=341, Avg=4837.98, 90=6719, 99=20255, 99.9=132223, 99.99=148863] [UPDATE: Count=278436, Max=13455, Min=317, Avg=2286.16, 90=3377, 99=5587, 99.9=8831, 99.99=10847] 
2023-06-05 12:44:30:725 730 sec: 40962948 operations; 56174.6 current ops/sec; [READ: Count=280698, Max=143103, Min=367, Avg=4768.02, 90=6979, 99=16279, 99.9=39327, 99.99=137727] [UPDATE: Count=281043, Max=16447, Min=308, Avg=2342.36, 90=3459, 99=5591, 99.9=8679, 99.99=10679] 
2023-06-05 12:44:40:725 740 sec: 41525746 operations; 56279.8 current ops/sec; [READ: Count=282106, Max=42271, Min=396, Avg=4741.4, 90=7043, 99=18415, 99.9=33087, 99.99=37183] [UPDATE: Count=280579, Max=13967, Min=318, Avg=2346.58, 90=3465, 99=5823, 99.9=9087, 99.99=10927] 
2023-06-05 12:44:50:725 750 sec: 42092420 operations; 56667.4 current ops/sec; [READ: Count=282610, Max=38431, Min=414, Avg=4707.76, 90=7011, 99=16767, 99.9=28799, 99.99=33823] [UPDATE: Count=283385, Max=30847, Min=306, Avg=2347.03, 90=3465, 99=5723, 99.9=9095, 99.99=16639] 
2023-06-05 12:45:00:725 760 sec: 42658809 operations; 56638.9 current ops/sec; [READ: Count=283948, Max=41663, Min=379, Avg=4687.39, 90=6939, 99=18095, 99.9=26159, 99.99=30399] [UPDATE: Count=283053, Max=21967, Min=320, Avg=2336.42, 90=3437, 99=5671, 99.9=8999, 99.99=12399] 
2023-06-05 12:45:10:725 770 sec: 43222803 operations; 56399.4 current ops/sec; [READ: Count=282199, Max=133631, Min=385, Avg=4712.94, 90=6915, 99=18703, 99.9=29007, 99.99=41407] [UPDATE: Count=281718, Max=12951, Min=315, Avg=2344.6, 90=3449, 99=5567, 99.9=8831, 99.99=10791] 
2023-06-05 12:45:20:725 780 sec: 43745049 operations; 52224.6 current ops/sec; [READ: Count=260886, Max=535039, Min=389, Avg=5395.23, 90=6435, 99=22911, 99.9=273151, 99.99=285695] [UPDATE: Count=261450, Max=13847, Min=284, Avg=2240.75, 90=3329, 99=5731, 99.9=8983, 99.99=11399] 
2023-06-05 12:45:30:725 790 sec: 44289777 operations; 54472.8 current ops/sec; [READ: Count=272062, Max=279039, Min=410, Avg=5114.86, 90=6423, 99=15983, 99.9=271615, 99.99=275199] [UPDATE: Count=272743, Max=11903, Min=308, Avg=2226.93, 90=3305, 99=5019, 99.9=7495, 99.99=9159] 
2023-06-05 12:45:40:725 800 sec: 44870601 operations; 58082.4 current ops/sec; [READ: Count=289885, Max=61759, Min=403, Avg=4555.09, 90=6907, 99=11063, 99.9=21823, 99.99=29503] [UPDATE: Count=290446, Max=26127, Min=310, Avg=2324.56, 90=3423, 99=4983, 99.9=7555, 99.99=13559] 
2023-06-05 12:45:50:725 810 sec: 45446434 operations; 57583.3 current ops/sec; [READ: Count=287553, Max=38687, Min=401, Avg=4582.79, 90=6935, 99=11319, 99.9=19343, 99.99=27247] [UPDATE: Count=288701, Max=27071, Min=334, Avg=2340.44, 90=3431, 99=4959, 99.9=7451, 99.99=13119] 
2023-06-05 12:46:00:725 820 sec: 46024731 operations; 57829.7 current ops/sec; [READ: Count=289291, Max=33023, Min=413, Avg=4537.82, 90=6815, 99=10407, 99.9=15943, 99.99=28815] [UPDATE: Count=288904, Max=18463, Min=336, Avg=2338.15, 90=3415, 99=4803, 99.9=6811, 99.99=9759] 
2023-06-05 12:46:10:725 830 sec: 46598507 operations; 57377.6 current ops/sec; [READ: Count=286850, Max=100927, Min=399, Avg=4556.74, 90=6791, 99=10615, 99.9=18447, 99.99=43679] [UPDATE: Count=287028, Max=11775, Min=321, Avg=2347.39, 90=3423, 99=4847, 99.9=6995, 99.99=8911] 
2023-06-05 12:46:20:725 840 sec: 47171567 operations; 57306 current ops/sec; [READ: Count=286489, Max=65023, Min=408, Avg=4536.6, 90=6779, 99=10199, 99.9=15911, 99.99=34719] [UPDATE: Count=286465, Max=12487, Min=323, Avg=2344.87, 90=3417, 99=4791, 99.9=6827, 99.99=8671] 
2023-06-05 12:46:30:725 850 sec: 47737363 operations; 56579.6 current ops/sec; [READ: Count=282318, Max=90559, Min=416, Avg=4611.44, 90=6783, 99=10583, 99.9=22591, 99.99=51935] [UPDATE: Count=283491, Max=13703, Min=307, Avg=2382.69, 90=3451, 99=4903, 99.9=7335, 99.99=9655] 
2023-06-05 12:46:40:725 860 sec: 48296848 operations; 55948.5 current ops/sec; [READ: Count=279714, Max=73727, Min=393, Avg=4719.52, 90=6863, 99=13359, 99.9=27759, 99.99=41503] [UPDATE: Count=279792, Max=21711, Min=310, Avg=2412.85, 90=3469, 99=5275, 99.9=8831, 99.99=14695] 
2023-06-05 12:46:50:725 870 sec: 48859700 operations; 56285.2 current ops/sec; [READ: Count=280682, Max=36447, Min=392, Avg=4682.35, 90=6851, 99=11623, 99.9=25391, 99.99=29743] [UPDATE: Count=281868, Max=20095, Min=331, Avg=2415.46, 90=3471, 99=5215, 99.9=8759, 99.99=14871] 
2023-06-05 12:47:00:725 880 sec: 49423570 operations; 56387 current ops/sec; [READ: Count=281631, Max=37855, Min=426, Avg=4681.77, 90=6855, 99=12447, 99.9=25135, 99.99=30047] [UPDATE: Count=282520, Max=19439, Min=316, Avg=2387.61, 90=3441, 99=4927, 99.9=8131, 99.99=11167] 
2023-06-05 12:47:10:725 890 sec: 49985586 operations; 56201.6 current ops/sec; [READ: Count=280644, Max=35071, Min=378, Avg=4708.04, 90=6947, 99=13407, 99.9=22639, 99.99=26927] [UPDATE: Count=281385, Max=12623, Min=317, Avg=2392.38, 90=3455, 99=5211, 99.9=8027, 99.99=9727] 
2023-06-05 12:47:20:725 900 sec: 50542511 operations; 55692.5 current ops/sec; [READ: Count=279000, Max=70399, Min=401, Avg=4784.14, 90=6915, 99=17567, 99.9=42783, 99.99=56127] [UPDATE: Count=277916, Max=18687, Min=312, Avg=2385.01, 90=3441, 99=5691, 99.9=8735, 99.99=10535] 
2023-06-05 12:47:30:725 910 sec: 51102270 operations; 55975.9 current ops/sec; [READ: Count=279901, Max=36159, Min=394, Avg=4743.97, 90=6887, 99=16399, 99.9=25439, 99.99=30447] [UPDATE: Count=279872, Max=12631, Min=332, Avg=2394.42, 90=3441, 99=5487, 99.9=8431, 99.99=10287] 
2023-06-05 12:47:40:725 920 sec: 51662715 operations; 56044.5 current ops/sec; [READ: Count=280172, Max=39359, Min=424, Avg=4721.26, 90=6787, 99=14319, 99.9=26559, 99.99=30863] [UPDATE: Count=280331, Max=15567, Min=351, Avg=2411.24, 90=3439, 99=5167, 99.9=8095, 99.99=9783] 
2023-06-05 12:47:50:725 930 sec: 52222968 operations; 56025.3 current ops/sec; [READ: Count=280179, Max=66623, Min=415, Avg=4717.36, 90=6767, 99=13631, 99.9=26255, 99.99=57695] [UPDATE: Count=280051, Max=57663, Min=309, Avg=2413.7, 90=3423, 99=5119, 99.9=7671, 99.99=54239] 
2023-06-05 12:48:00:725 940 sec: 52787827 operations; 56485.9 current ops/sec; [READ: Count=282254, Max=31199, Min=415, Avg=4674.39, 90=6799, 99=12111, 99.9=22895, 99.99=26815] [UPDATE: Count=282508, Max=17903, Min=332, Avg=2399.71, 90=3437, 99=4867, 99.9=7127, 99.99=9399] 
2023-06-05 12:48:10:725 950 sec: 53353837 operations; 56601 current ops/sec; [READ: Count=282500, Max=30767, Min=399, Avg=4663.19, 90=6879, 99=11423, 99.9=20879, 99.99=24463] [UPDATE: Count=283526, Max=10855, Min=319, Avg=2395.55, 90=3461, 99=4915, 99.9=6963, 99.99=8463] 
2023-06-05 12:48:20:725 960 sec: 53921405 operations; 56756.8 current ops/sec; [READ: Count=283871, Max=31359, Min=389, Avg=4642.85, 90=6839, 99=11511, 99.9=20815, 99.99=24063] [UPDATE: Count=283703, Max=12527, Min=339, Avg=2382.46, 90=3445, 99=4903, 99.9=7115, 99.99=9327] 
2023-06-05 12:48:30:725 970 sec: 54492395 operations; 57099 current ops/sec; [READ: Count=285131, Max=47647, Min=438, Avg=4575.6, 90=6775, 99=10559, 99.9=19215, 99.99=29823] [UPDATE: Count=285865, Max=22527, Min=316, Avg=2366.36, 90=3429, 99=4807, 99.9=6879, 99.99=8935] 
2023-06-05 12:48:40:725 980 sec: 55058733 operations; 56633.8 current ops/sec; [READ: Count=283836, Max=54783, Min=408, Avg=4613.08, 90=6775, 99=11271, 99.9=34495, 99.99=42879] [UPDATE: Count=282591, Max=16751, Min=316, Avg=2358.83, 90=3409, 99=4915, 99.9=7207, 99.99=9431] 
2023-06-05 12:48:50:725 990 sec: 55619900 operations; 56116.7 current ops/sec; [READ: Count=280396, Max=116735, Min=396, Avg=4717.95, 90=6699, 99=12815, 99.9=69503, 99.99=76287] [UPDATE: Count=280812, Max=25871, Min=338, Avg=2343.76, 90=3393, 99=4963, 99.9=7891, 99.99=10943] 
2023-06-05 12:49:00:725 1000 sec: 56184678 operations; 56477.8 current ops/sec; [READ: Count=282063, Max=69119, Min=386, Avg=4678.81, 90=6751, 99=11527, 99.9=53951, 99.99=64383] [UPDATE: Count=282588, Max=17695, Min=326, Avg=2351.88, 90=3401, 99=4951, 99.9=7419, 99.99=10391] 
2023-06-05 12:49:10:725 1010 sec: 56749932 operations; 56525.4 current ops/sec; [READ: Count=282852, Max=43647, Min=415, Avg=4662.89, 90=6871, 99=12767, 99.9=30959, 99.99=37407] [UPDATE: Count=281862, Max=29967, Min=322, Avg=2353.3, 90=3425, 99=5023, 99.9=7715, 99.99=15359] 
2023-06-05 12:49:20:725 1020 sec: 57317362 operations; 56743 current ops/sec; [READ: Count=283556, Max=41951, Min=416, Avg=4575.58, 90=6819, 99=11487, 99.9=23535, 99.99=30111] [UPDATE: Count=284396, Max=20191, Min=326, Avg=2334.76, 90=3417, 99=4907, 99.9=7047, 99.99=9535] 
2023-06-05 12:49:30:725 1030 sec: 57882195 operations; 56483.3 current ops/sec; [READ: Count=283125, Max=28751, Min=390, Avg=4538.32, 90=6775, 99=10399, 99.9=16119, 99.99=22847] [UPDATE: Count=281666, Max=11711, Min=323, Avg=2345.2, 90=3419, 99=4771, 99.9=6651, 99.99=8591] 
2023-06-05 12:49:40:725 1040 sec: 58445906 operations; 56371.1 current ops/sec; [READ: Count=281454, Max=32559, Min=399, Avg=4579.19, 90=6783, 99=11055, 99.9=22879, 99.99=28655] [UPDATE: Count=282280, Max=12711, Min=311, Avg=2360.65, 90=3431, 99=4851, 99.9=7203, 99.99=9623] 
2023-06-05 12:49:50:725 1050 sec: 59008210 operations; 56230.4 current ops/sec; [READ: Count=281013, Max=38559, Min=396, Avg=4651.91, 90=6887, 99=13207, 99.9=25519, 99.99=30351] [UPDATE: Count=281382, Max=18159, Min=312, Avg=2352.68, 90=3431, 99=5063, 99.9=7863, 99.99=10047] 
2023-06-05 12:50:00:725 1060 sec: 59572639 operations; 56442.9 current ops/sec; [READ: Count=282377, Max=37439, Min=404, Avg=4595.81, 90=6823, 99=11743, 99.9=25119, 99.99=30767] [UPDATE: Count=282068, Max=15447, Min=304, Avg=2342.16, 90=3407, 99=4963, 99.9=7699, 99.99=10079] 
2023-06-05 12:50:10:725 1070 sec: 60123766 operations; 55112.7 current ops/sec; [READ: Count=275944, Max=208639, Min=408, Avg=4801.37, 90=6871, 99=15703, 99.9=82623, 99.99=146047] [UPDATE: Count=275080, Max=12311, Min=305, Avg=2328.75, 90=3399, 99=5227, 99.9=7799, 99.99=9575] 
2023-06-05 12:50:20:725 1080 sec: 60675370 operations; 55160.4 current ops/sec; [READ: Count=275251, Max=174847, Min=360, Avg=4919.92, 90=7015, 99=17663, 99.9=112703, 99.99=123071] [UPDATE: Count=276589, Max=13407, Min=312, Avg=2330.9, 90=3409, 99=5411, 99.9=8247, 99.99=10343] 
2023-06-05 12:50:30:725 1090 sec: 61246154 operations; 57078.4 current ops/sec; [READ: Count=285393, Max=33471, Min=375, Avg=4632.97, 90=6903, 99=12663, 99.9=26159, 99.99=30207] [UPDATE: Count=285159, Max=12679, Min=319, Avg=2349.75, 90=3411, 99=5055, 99.9=8179, 99.99=10167] 
2023-06-05 12:50:40:725 1100 sec: 61812062 operations; 56590.8 current ops/sec; [READ: Count=283656, Max=40063, Min=409, Avg=4673.35, 90=6923, 99=13279, 99.9=26431, 99.99=30895] [UPDATE: Count=282314, Max=14079, Min=316, Avg=2363.33, 90=3425, 99=5055, 99.9=8027, 99.99=10135] 
2023-06-05 12:50:50:725 1110 sec: 62380298 operations; 56823.6 current ops/sec; [READ: Count=284425, Max=36351, Min=377, Avg=4618.25, 90=6871, 99=11975, 99.9=24367, 99.99=28559] [UPDATE: Count=283823, Max=23295, Min=323, Avg=2353.13, 90=3415, 99=5007, 99.9=7535, 99.99=9727] 
2023-06-05 12:51:00:725 1120 sec: 62942206 operations; 56190.8 current ops/sec; [READ: Count=280926, Max=140927, Min=431, Avg=4690.55, 90=6823, 99=12407, 99.9=63167, 99.99=76671] [UPDATE: Count=280960, Max=16815, Min=325, Avg=2331.69, 90=3395, 99=5019, 99.9=8047, 99.99=11199] 
2023-06-05 12:51:10:725 1130 sec: 63505952 operations; 56374.6 current ops/sec; [READ: Count=281957, Max=111359, Min=371, Avg=4698.52, 90=6811, 99=12151, 99.9=64831, 99.99=74303] [UPDATE: Count=281805, Max=14255, Min=299, Avg=2332.92, 90=3387, 99=5011, 99.9=8143, 99.99=10855] 
2023-06-05 12:51:20:725 1140 sec: 64064006 operations; 55805.4 current ops/sec; [READ: Count=279003, Max=207999, Min=369, Avg=4790.26, 90=6843, 99=17791, 99.9=84607, 99.99=121855] [UPDATE: Count=279165, Max=14279, Min=310, Avg=2314.72, 90=3369, 99=5563, 99.9=8975, 99.99=11199] 
2023-06-05 12:51:30:725 1150 sec: 64632229 operations; 56822.3 current ops/sec; [READ: Count=283513, Max=98751, Min=395, Avg=4654.52, 90=6875, 99=17199, 99.9=28703, 99.99=38591] [UPDATE: Count=284676, Max=12847, Min=314, Avg=2323.33, 90=3383, 99=5623, 99.9=9055, 99.99=10823] 
2023-06-05 12:51:40:725 1160 sec: 65197738 operations; 56550.9 current ops/sec; [READ: Count=282590, Max=36671, Min=376, Avg=4622.67, 90=6887, 99=15927, 99.9=26159, 99.99=29791] [UPDATE: Count=282955, Max=15175, Min=336, Avg=2312.66, 90=3385, 99=5483, 99.9=8887, 99.99=10719] 
2023-06-05 12:51:50:725 1170 sec: 65761843 operations; 56410.5 current ops/sec; [READ: Count=281787, Max=31967, Min=391, Avg=4479.27, 90=6731, 99=13351, 99.9=23615, 99.99=27903] [UPDATE: Count=282326, Max=17471, Min=334, Avg=2273.92, 90=3355, 99=5171, 99.9=7947, 99.99=10839] 
2023-06-05 12:52:00:725 1180 sec: 66324587 operations; 56274.4 current ops/sec; [READ: Count=281110, Max=33439, Min=420, Avg=4457.89, 90=6695, 99=14423, 99.9=23935, 99.99=27631] [UPDATE: Count=281519, Max=17599, Min=331, Avg=2258.84, 90=3323, 99=5235, 99.9=8311, 99.99=10815] 
2023-06-05 12:52:10:725 1190 sec: 66884541 operations; 55995.4 current ops/sec; [READ: Count=280444, Max=132479, Min=401, Avg=4584.94, 90=6731, 99=15663, 99.9=71295, 99.99=88383] [UPDATE: Count=279565, Max=12983, Min=333, Avg=2278.15, 90=3361, 99=5315, 99.9=8263, 99.99=9911] 
2023-06-05 12:52:20:725 1200 sec: 67449913 operations; 56537.2 current ops/sec; [READ: Count=282621, Max=91391, Min=365, Avg=4502.9, 90=6663, 99=12535, 99.9=75327, 99.99=85759] [UPDATE: Count=282722, Max=28143, Min=319, Avg=2250.54, 90=3317, 99=4939, 99.9=7495, 99.99=9511] 
2023-06-05 12:52:30:725 1210 sec: 68012378 operations; 56246.5 current ops/sec; [READ: Count=281177, Max=33727, Min=420, Avg=4314.59, 90=6559, 99=10295, 99.9=16687, 99.99=24975] [UPDATE: Count=281135, Max=12591, Min=322, Avg=2230.35, 90=3295, 99=4743, 99.9=6587, 99.99=8303] 
2023-06-05 12:52:40:725 1220 sec: 68573917 operations; 56153.9 current ops/sec; [READ: Count=280384, Max=217087, Min=405, Avg=4348.8, 90=6647, 99=10839, 99.9=17103, 99.99=23871] [UPDATE: Count=281209, Max=212095, Min=329, Avg=2230.63, 90=3289, 99=4759, 99.9=6707, 99.99=9447] 
2023-06-05 12:52:50:725 1230 sec: 69131278 operations; 55736.1 current ops/sec; [READ: Count=279331, Max=232703, Min=391, Avg=4487.1, 90=6623, 99=11495, 99.9=81983, 99.99=170751] [UPDATE: Count=278173, Max=32143, Min=308, Avg=2222.95, 90=3289, 99=4879, 99.9=7143, 99.99=10071] 
2023-06-05 12:53:00:725 1240 sec: 69699565 operations; 56828.7 current ops/sec; [READ: Count=284506, Max=77887, Min=431, Avg=4452.37, 90=6759, 99=11479, 99.9=28383, 99.99=60031] [UPDATE: Count=283714, Max=23359, Min=316, Avg=2257.59, 90=3335, 99=4887, 99.9=7219, 99.99=10175] 
2023-06-05 12:53:10:725 1250 sec: 70262442 operations; 56287.7 current ops/sec; [READ: Count=281512, Max=34335, Min=426, Avg=4363.39, 90=6671, 99=10599, 99.9=16975, 99.99=28911] [UPDATE: Count=281315, Max=14335, Min=333, Avg=2237.36, 90=3313, 99=4727, 99.9=6835, 99.99=8599] 
2023-06-05 12:53:20:725 1260 sec: 70824789 operations; 56234.7 current ops/sec; [READ: Count=280357, Max=57471, Min=415, Avg=4445.75, 90=6767, 99=12271, 99.9=22303, 99.99=43487] [UPDATE: Count=282030, Max=12335, Min=325, Avg=2253.5, 90=3337, 99=5019, 99.9=7487, 99.99=9439] 
2023-06-05 12:53:30:725 1270 sec: 71387224 operations; 56243.5 current ops/sec; [READ: Count=281065, Max=33471, Min=370, Avg=4430.92, 90=6735, 99=11431, 99.9=22063, 99.99=26159] [UPDATE: Count=281294, Max=12527, Min=322, Avg=2263.92, 90=3349, 99=4951, 99.9=7951, 99.99=10167] 
2023-06-05 12:53:40:725 1280 sec: 71940272 operations; 55304.8 current ops/sec; [READ: Count=276501, Max=284415, Min=361, Avg=4749.19, 90=6707, 99=14383, 99.9=158207, 99.99=167807] [UPDATE: Count=276788, Max=13231, Min=309, Avg=2242.52, 90=3337, 99=5207, 99.9=8375, 99.99=10471] 
2023-06-05 12:53:50:725 1290 sec: 72506584 operations; 56631.2 current ops/sec; [READ: Count=283173, Max=158463, Min=393, Avg=4674.8, 90=6755, 99=12295, 99.9=116671, 99.99=139007] [UPDATE: Count=283112, Max=26943, Min=322, Avg=2264.66, 90=3363, 99=5047, 99.9=7655, 99.99=10615] 
2023-06-05 12:54:00:725 1300 sec: 73073183 operations; 56659.9 current ops/sec; [READ: Count=283761, Max=102143, Min=378, Avg=4559.01, 90=6703, 99=14031, 99.9=59391, 99.99=76159] [UPDATE: Count=282883, Max=16183, Min=337, Avg=2241.58, 90=3329, 99=5187, 99.9=8375, 99.99=11111] 
2023-06-05 12:54:10:725 1310 sec: 73634806 operations; 56162.3 current ops/sec; [READ: Count=280448, Max=99327, Min=399, Avg=4628.56, 90=6783, 99=18559, 99.9=59679, 99.99=76287] [UPDATE: Count=281158, Max=20111, Min=315, Avg=2234.55, 90=3325, 99=5415, 99.9=9447, 99.99=13599] 
2023-06-05 12:54:20:725 1320 sec: 74185869 operations; 55106.3 current ops/sec; [READ: Count=275637, Max=250367, Min=413, Avg=4899.97, 90=6607, 99=22271, 99.9=160511, 99.99=169599] [UPDATE: Count=274848, Max=26751, Min=305, Avg=2199.55, 90=3277, 99=5683, 99.9=9543, 99.99=12991] 
2023-06-05 12:54:30:725 1330 sec: 74742580 operations; 55671.1 current ops/sec; [READ: Count=278837, Max=136703, Min=373, Avg=4899.59, 90=7111, 99=24991, 99.9=69119, 99.99=108735] [UPDATE: Count=278485, Max=21231, Min=295, Avg=2254.63, 90=3365, 99=6179, 99.9=9615, 99.99=12311] 
2023-06-05 12:54:40:725 1340 sec: 75306263 operations; 56368.3 current ops/sec; [READ: Count=281558, Max=181631, Min=425, Avg=4818.36, 90=7107, 99=23599, 99.9=54175, 99.99=89983] [UPDATE: Count=282128, Max=12191, Min=331, Avg=2243.78, 90=3367, 99=5935, 99.9=8887, 99.99=10599] 
2023-06-05 12:54:50:725 1350 sec: 75873748 operations; 56748.5 current ops/sec; [READ: Count=283470, Max=130751, Min=397, Avg=4742.59, 90=7079, 99=18495, 99.9=94911, 99.99=102207] [UPDATE: Count=283882, Max=23983, Min=321, Avg=2251.06, 90=3365, 99=5527, 99.9=8647, 99.99=11455] 
2023-06-05 12:55:00:725 1360 sec: 76445161 operations; 57141.3 current ops/sec; [READ: Count=285375, Max=124287, Min=405, Avg=4611.14, 90=7031, 99=13791, 99.9=32127, 99.99=97535] [UPDATE: Count=286121, Max=27951, Min=313, Avg=2268.26, 90=3379, 99=5219, 99.9=8015, 99.99=15599] 
2023-06-05 12:55:10:725 1370 sec: 77002536 operations; 55737.5 current ops/sec; [READ: Count=278714, Max=132095, Min=394, Avg=4712.63, 90=7107, 99=17279, 99.9=48191, 99.99=72191] [UPDATE: Count=278572, Max=18015, Min=328, Avg=2290.6, 90=3409, 99=5623, 99.9=8607, 99.99=10447] 
2023-06-05 12:55:20:725 1380 sec: 77554839 operations; 55230.3 current ops/sec; [READ: Count=275959, Max=134015, Min=387, Avg=4955.45, 90=7103, 99=24895, 99.9=82111, 99.99=87167] [UPDATE: Count=276387, Max=36063, Min=311, Avg=2283.23, 90=3403, 99=5771, 99.9=8887, 99.99=32591] 
2023-06-05 12:55:30:725 1390 sec: 78091973 operations; 53713.4 current ops/sec; [READ: Count=268876, Max=544255, Min=404, Avg=5171.34, 90=6687, 99=20319, 99.9=325887, 99.99=417023] [UPDATE: Count=268147, Max=18911, Min=322, Avg=2192.65, 90=3319, 99=5551, 99.9=9119, 99.99=11039] 
2023-06-05 12:55:40:725 1400 sec: 78622611 operations; 53063.8 current ops/sec; [READ: Count=264777, Max=409343, Min=364, Avg=5403.12, 90=6407, 99=16175, 99.9=372735, 99.99=399103] [UPDATE: Count=265894, Max=21311, Min=314, Avg=2130.99, 90=3239, 99=5191, 99.9=8511, 99.99=12447] 
2023-06-05 12:55:50:725 1410 sec: 79158933 operations; 53632.2 current ops/sec; [READ: Count=269016, Max=412671, Min=352, Avg=5333.89, 90=6371, 99=17359, 99.9=351743, 99.99=401663] [UPDATE: Count=267627, Max=18511, Min=319, Avg=2100.36, 90=3213, 99=5131, 99.9=8399, 99.99=11055] 
2023-06-05 12:56:00:725 1420 sec: 79721641 operations; 56270.8 current ops/sec; [READ: Count=281020, Max=466943, Min=373, Avg=4910.54, 90=7011, 99=17359, 99.9=113983, 99.99=447999] [UPDATE: Count=281613, Max=17007, Min=294, Avg=2208.19, 90=3347, 99=5399, 99.9=8311, 99.99=10335] 
2023-06-05 12:56:10:725 1430 sec: 80289352 operations; 56771.1 current ops/sec; [READ: Count=284248, Max=78783, Min=392, Avg=4768.12, 90=7339, 99=19631, 99.9=47103, 99.99=55423] [UPDATE: Count=283314, Max=14471, Min=304, Avg=2269.43, 90=3433, 99=5755, 99.9=8751, 99.99=10543] 
2023-06-05 12:56:20:725 1440 sec: 80853353 operations; 56400.1 current ops/sec; [READ: Count=281728, Max=170879, Min=421, Avg=4837.34, 90=7203, 99=21855, 99.9=65375, 99.99=105343] [UPDATE: Count=282343, Max=15655, Min=327, Avg=2246.12, 90=3397, 99=5727, 99.9=8367, 99.99=10135] 
2023-06-05 12:56:30:725 1450 sec: 81421193 operations; 56784 current ops/sec; [READ: Count=284122, Max=206975, Min=393, Avg=4797.27, 90=7131, 99=19055, 99.9=76799, 99.99=138367] [UPDATE: Count=283743, Max=11711, Min=322, Avg=2237.75, 90=3389, 99=5383, 99.9=8095, 99.99=9911] 
2023-06-05 12:56:40:725 1460 sec: 81991251 operations; 57005.8 current ops/sec; [READ: Count=285552, Max=89535, Min=407, Avg=4762.6, 90=7403, 99=17055, 99.9=34207, 99.99=83263] [UPDATE: Count=283742, Max=27599, Min=314, Avg=2248.92, 90=3405, 99=5411, 99.9=8543, 99.99=16103] 
2023-06-05 12:56:50:725 1470 sec: 82556478 operations; 56522.7 current ops/sec; [READ: Count=282309, Max=92287, Min=426, Avg=4814.58, 90=7419, 99=20031, 99.9=46815, 99.99=65023] [UPDATE: Count=283645, Max=20223, Min=307, Avg=2243.31, 90=3409, 99=5547, 99.9=8063, 99.99=10743] 
2023-06-05 12:57:00:725 1480 sec: 83113028 operations; 55655 current ops/sec; [READ: Count=278825, Max=286463, Min=388, Avg=4966.22, 90=6903, 99=21759, 99.9=159487, 99.99=204159] [UPDATE: Count=277720, Max=18687, Min=314, Avg=2192.18, 90=3333, 99=5315, 99.9=8167, 99.99=10399] 
2023-06-05 12:57:10:725 1490 sec: 83672465 operations; 55943.7 current ops/sec; [READ: Count=279591, Max=191615, Min=420, Avg=4921.5, 90=6995, 99=15471, 99.9=160639, 99.99=167679] [UPDATE: Count=279825, Max=11711, Min=317, Avg=2219.83, 90=3365, 99=5291, 99.9=7655, 99.99=9767] 
2023-06-05 12:57:20:725 1500 sec: 84240988 operations; 56852.3 current ops/sec; [READ: Count=284250, Max=140031, Min=389, Avg=4777.44, 90=7131, 99=15143, 99.9=95295, 99.99=129791] [UPDATE: Count=284235, Max=10855, Min=314, Avg=2248.86, 90=3401, 99=5171, 99.9=7343, 99.99=9183] 
2023-06-05 12:57:30:725 1510 sec: 84812258 operations; 57127 current ops/sec; [READ: Count=285627, Max=163071, Min=373, Avg=4705.83, 90=7123, 99=14991, 99.9=46847, 99.99=90879] [UPDATE: Count=285502, Max=17871, Min=330, Avg=2270.11, 90=3399, 99=5067, 99.9=7623, 99.99=10255] 
2023-06-05 12:57:40:725 1520 sec: 85369038 operations; 55678 current ops/sec; [READ: Count=279011, Max=314367, Min=391, Avg=4889.3, 90=7091, 99=20831, 99.9=86975, 99.99=218879] [UPDATE: Count=277950, Max=13031, Min=316, Avg=2275.41, 90=3399, 99=5543, 99.9=8615, 99.99=10695] 
2023-06-05 12:57:50:725 1530 sec: 85929743 operations; 56070.5 current ops/sec; [READ: Count=281018, Max=105215, Min=390, Avg=4853.38, 90=7155, 99=21311, 99.9=77951, 99.99=87231] [UPDATE: Count=279455, Max=30575, Min=315, Avg=2264.46, 90=3391, 99=5851, 99.9=9231, 99.99=14207] 
2023-06-05 12:58:00:725 1540 sec: 86491977 operations; 56223.4 current ops/sec; [READ: Count=281171, Max=78975, Min=395, Avg=4822.8, 90=7319, 99=20223, 99.9=52735, 99.99=63551] [UPDATE: Count=281239, Max=19199, Min=301, Avg=2283.73, 90=3411, 99=5887, 99.9=8759, 99.99=11367] 
2023-06-05 12:58:10:725 1550 sec: 87050581 operations; 55860.4 current ops/sec; [READ: Count=279451, Max=95679, Min=395, Avg=4857.63, 90=7327, 99=23343, 99.9=48319, 99.99=56863] [UPDATE: Count=279146, Max=14375, Min=314, Avg=2295.16, 90=3437, 99=5835, 99.9=8679, 99.99=10687] 
2023-06-05 12:58:20:725 1560 sec: 87606501 operations; 55592 current ops/sec; [READ: Count=277807, Max=136831, Min=370, Avg=4923.4, 90=7039, 99=25279, 99.9=104575, 99.99=119103] [UPDATE: Count=278115, Max=17295, Min=307, Avg=2265.54, 90=3391, 99=5863, 99.9=9255, 99.99=12727] 
2023-06-05 12:58:30:725 1570 sec: 88153736 operations; 54723.5 current ops/sec; [READ: Count=274235, Max=201215, Min=364, Avg=5018.24, 90=7207, 99=25887, 99.9=117439, 99.99=144383] [UPDATE: Count=272989, Max=16311, Min=317, Avg=2276.23, 90=3411, 99=6427, 99.9=9471, 99.99=11239] 
2023-06-05 12:58:40:725 1580 sec: 88702461 operations; 54872.5 current ops/sec; [READ: Count=274990, Max=142079, Min=379, Avg=5017.16, 90=7187, 99=25023, 99.9=111743, 99.99=135295] [UPDATE: Count=273748, Max=14919, Min=318, Avg=2267.94, 90=3413, 99=6159, 99.9=9183, 99.99=10991] 
2023-06-05 12:58:50:725 1590 sec: 89247216 operations; 54475.5 current ops/sec; [READ: Count=272022, Max=113407, Min=375, Avg=5041.33, 90=7435, 99=25903, 99.9=57855, 99.99=68671] [UPDATE: Count=272743, Max=21215, Min=308, Avg=2301.69, 90=3453, 99=6671, 99.9=9399, 99.99=11623] 
2023-06-05 12:59:00:725 1600 sec: 89789628 operations; 54241.2 current ops/sec; [READ: Count=270829, Max=264703, Min=414, Avg=5089.75, 90=7179, 99=25295, 99.9=100927, 99.99=164223] [UPDATE: Count=271554, Max=18607, Min=330, Avg=2280.33, 90=3405, 99=6351, 99.9=9111, 99.99=11359] 
2023-06-05 12:59:10:725 1610 sec: 90308525 operations; 51889.7 current ops/sec; [READ: Count=258470, Max=767999, Min=393, Avg=5530.52, 90=6383, 99=25439, 99.9=299519, 99.99=424703] [UPDATE: Count=260434, Max=12791, Min=323, Avg=2173.22, 90=3245, 99=5715, 99.9=8903, 99.99=10687] 
2023-06-05 12:59:20:725 1620 sec: 90837945 operations; 52942 current ops/sec; [READ: Count=264048, Max=421119, Min=371, Avg=5377.85, 90=6343, 99=17247, 99.9=324607, 99.99=339711] [UPDATE: Count=265263, Max=14991, Min=317, Avg=2190.45, 90=3259, 99=5075, 99.9=7679, 99.99=9855] 
2023-06-05 12:59:30:725 1630 sec: 91400587 operations; 56264.2 current ops/sec; [READ: Count=281432, Max=292863, Min=411, Avg=4808.69, 90=7003, 99=15287, 99.9=69119, 99.99=253055] [UPDATE: Count=281340, Max=12407, Min=293, Avg=2309.4, 90=3409, 99=5287, 99.9=8155, 99.99=10247] 
2023-06-05 12:59:40:725 1640 sec: 91971994 operations; 57140.7 current ops/sec; [READ: Count=285668, Max=37663, Min=450, Avg=4669.07, 90=7099, 99=13255, 99.9=25151, 99.99=31199] [UPDATE: Count=285793, Max=13383, Min=324, Avg=2328.4, 90=3425, 99=5183, 99.9=7847, 99.99=9951] 
2023-06-05 12:59:50:725 1650 sec: 92540107 operations; 56811.3 current ops/sec; [READ: Count=284282, Max=111295, Min=403, Avg=4716.25, 90=7067, 99=14535, 99.9=40799, 99.99=96063] [UPDATE: Count=283833, Max=16975, Min=318, Avg=2318.95, 90=3411, 99=5267, 99.9=8375, 99.99=10791] 
2023-06-05 13:00:00:725 1660 sec: 93103642 operations; 56353.5 current ops/sec; [READ: Count=281950, Max=114943, Min=412, Avg=4783.87, 90=6939, 99=16183, 99.9=80639, 99.99=86847] [UPDATE: Count=281612, Max=18943, Min=288, Avg=2310.77, 90=3399, 99=5263, 99.9=8119, 99.99=10879] 
2023-06-05 13:00:10:725 1670 sec: 93670343 operations; 56670.1 current ops/sec; [READ: Count=283605, Max=115391, Min=393, Avg=4707.85, 90=7063, 99=13799, 99.9=25391, 99.99=67327] [UPDATE: Count=282951, Max=12623, Min=327, Avg=2344.68, 90=3437, 99=5147, 99.9=7571, 99.99=9343] 
2023-06-05 13:00:20:725 1680 sec: 94221065 operations; 55072.2 current ops/sec; [READ: Count=275357, Max=330751, Min=420, Avg=4946.13, 90=6919, 99=16247, 99.9=105983, 99.99=271103] [UPDATE: Count=275634, Max=13431, Min=328, Avg=2315.68, 90=3383, 99=5183, 99.9=7775, 99.99=9703] 
2023-06-05 13:00:30:725 1690 sec: 94766770 operations; 54570.5 current ops/sec; [READ: Count=272605, Max=325119, Min=389, Avg=4956.43, 90=7231, 99=16879, 99.9=94719, 99.99=171135] [UPDATE: Count=272808, Max=11783, Min=322, Avg=2362.57, 90=3453, 99=5623, 99.9=8255, 99.99=9983] 
2023-06-05 13:00:40:725 1700 sec: 95323577 operations; 55680.7 current ops/sec; [READ: Count=278187, Max=256127, Min=426, Avg=4854.25, 90=7047, 99=15455, 99.9=67583, 99.99=177535] [UPDATE: Count=278452, Max=17839, Min=330, Avg=2341.1, 90=3415, 99=5367, 99.9=8887, 99.99=12255] 
2023-06-05 13:00:50:725 1710 sec: 95867547 operations; 54397 current ops/sec; [READ: Count=272023, Max=125247, Min=336, Avg=4996.76, 90=7303, 99=22943, 99.9=54719, 99.99=106047] [UPDATE: Count=272209, Max=18415, Min=332, Avg=2350, 90=3469, 99=6083, 99.9=9399, 99.99=12271] 
2023-06-05 13:01:00:725 1720 sec: 96407336 operations; 53978.9 current ops/sec; [READ: Count=269623, Max=231551, Min=403, Avg=5123.09, 90=6855, 99=25167, 99.9=135935, 99.99=192639] [UPDATE: Count=270206, Max=19951, Min=314, Avg=2286.6, 90=3369, 99=5667, 99.9=9127, 99.99=11607] 
2023-06-05 13:01:10:725 1730 sec: 96953010 operations; 54567.4 current ops/sec; [READ: Count=273527, Max=160511, Min=422, Avg=4990.9, 90=6987, 99=20623, 99.9=98175, 99.99=116735] [UPDATE: Count=271997, Max=13927, Min=336, Avg=2329.13, 90=3407, 99=5587, 99.9=8567, 99.99=10567] 
2023-06-05 13:01:20:725 1740 sec: 97494581 operations; 54157.1 current ops/sec; [READ: Count=271105, Max=161663, Min=405, Avg=5051.34, 90=7087, 99=21151, 99.9=84415, 99.99=133759] [UPDATE: Count=270536, Max=12639, Min=321, Avg=2329.67, 90=3441, 99=5731, 99.9=8407, 99.99=10263] 
2023-06-05 13:01:30:725 1750 sec: 98038972 operations; 54439.1 current ops/sec; [READ: Count=271892, Max=167039, Min=419, Avg=4992.67, 90=7071, 99=17855, 99.9=101951, 99.99=141695] [UPDATE: Count=272551, Max=105343, Min=321, Avg=2356.46, 90=3441, 99=5515, 99.9=8815, 99.99=102847] 
2023-06-05 13:01:40:725 1760 sec: 98605981 operations; 56700.9 current ops/sec; [READ: Count=283565, Max=48959, Min=413, Avg=4691.87, 90=7083, 99=12319, 99.9=32463, 99.99=39775] [UPDATE: Count=283440, Max=14903, Min=322, Avg=2359.08, 90=3453, 99=5059, 99.9=7547, 99.99=10039] 
2023-06-05 13:01:50:725 1770 sec: 99169202 operations; 56322.1 current ops/sec; [READ: Count=281751, Max=53247, Min=416, Avg=4736.07, 90=7031, 99=15351, 99.9=31823, 99.99=37311] [UPDATE: Count=281448, Max=17759, Min=327, Avg=2362.35, 90=3449, 99=5315, 99.9=8583, 99.99=10815] 
2023-06-05 13:02:00:725 1780 sec: 99728888 operations; 55968.6 current ops/sec; [READ: Count=280193, Max=51743, Min=411, Avg=4759.84, 90=7067, 99=15695, 99.9=28799, 99.99=34143] [UPDATE: Count=279283, Max=16735, Min=331, Avg=2382.21, 90=3457, 99=5459, 99.9=8823, 99.99=10895] 
2023-06-05 13:02:10:725 1790 sec: 100281021 operations; 55213.3 current ops/sec; [READ: Count=275683, Max=116671, Min=393, Avg=4868.1, 90=7079, 99=18831, 99.9=42943, 99.99=100223] [UPDATE: Count=276690, Max=14615, Min=330, Avg=2375.05, 90=3455, 99=5623, 99.9=8607, 99.99=10855] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:20:725 1800 sec: 100826916 operations; 54589.5 current ops/sec; [READ: Count=273028, Max=282623, Min=408, Avg=5055.39, 90=6519, 99=15511, 99.9=162687, 99.99=192127] [UPDATE: Count=272364, Max=18831, Min=329, Avg=2269.45, 90=3323, 99=4991, 99.9=8023, 99.99=9951] 
Still waiting for thread Thread-169 to complete. Workload status: true
2023-06-05 13:02:22:974 1802 sec: 100828157 operations; 552.05 current ops/sec; [READ: Count=642, Max=15519, Min=845, Avg=4200.66, 90=6211, 99=10479, 99.9=13783, 99.99=15519] [CLEANUP: Count=200, Max=2224127, Min=0, Avg=11116.6, 90=2, 99=8, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802247
[OVERALL], Throughput(ops/sec), 55945.80376607646
[TOTAL_GCS_PS_Scavenge], Count, 6558
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 16801
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9322251611460582
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 171
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.009488155619068862
[TOTAL_GCs], Count, 6561
[TOTAL_GC_TIME], Time(ms), 16972
[TOTAL_GC_TIME_%], Time(%), 0.941713316765127
[READ], Operations, 50411088
[READ], AverageLatency(us), 4508.080986567876
[READ], MinLatency(us), 305
[READ], MaxLatency(us), 767999
[READ], 95thPercentileLatency(us), 7915
[READ], 99thPercentileLatency(us), 16087
[READ], Return=OK, 50411088
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11116.605
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 8
[UPDATE], Operations, 50417069
[UPDATE], AverageLatency(us), 2185.4314802988647
[UPDATE], MinLatency(us), 277
[UPDATE], MaxLatency(us), 220671
[UPDATE], 95thPercentileLatency(us), 3699
[UPDATE], 99thPercentileLatency(us), 5291
[UPDATE], Return=OK, 50417069
