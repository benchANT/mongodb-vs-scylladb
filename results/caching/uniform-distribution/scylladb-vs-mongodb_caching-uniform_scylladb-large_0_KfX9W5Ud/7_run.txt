bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-06-05 12:32:23:079 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:33:064 10 sec: 511228 operations; 51122.8 current ops/sec; [READ: Count=255204, Max=101951, Min=361, Avg=3348, 90=5271, 99=16415, 99.9=32063, 99.99=83455] [UPDATE: Count=257609, Max=101951, Min=281, Avg=1868.94, 90=2719, 99=7455, 99.9=29327, 99.99=84863] 
2023-06-05 12:32:43:064 20 sec: 1073729 operations; 56250.1 current ops/sec; [READ: Count=281370, Max=48639, Min=402, Avg=3667.2, 90=5603, 99=17471, 99.9=23055, 99.99=27551] [UPDATE: Count=280772, Max=11191, Min=311, Avg=1853.42, 90=2801, 99=5687, 99.9=7807, 99.99=9119] 
2023-06-05 12:32:53:064 30 sec: 1636039 operations; 56231 current ops/sec; [READ: Count=280601, Max=45535, Min=397, Avg=3818.94, 90=5895, 99=17823, 99.9=32143, 99.99=35775] [UPDATE: Count=281636, Max=16495, Min=318, Avg=1895.82, 90=2883, 99=5859, 99.9=8075, 99.99=9615] 
2023-06-05 12:33:03:064 40 sec: 2198646 operations; 56260.7 current ops/sec; [READ: Count=281855, Max=43199, Min=401, Avg=3858.57, 90=5959, 99=17951, 99.9=29615, 99.99=34559] [UPDATE: Count=280669, Max=17743, Min=306, Avg=1918.24, 90=2907, 99=5867, 99.9=7999, 99.99=9543] 
2023-06-05 12:33:13:064 50 sec: 2759861 operations; 56121.5 current ops/sec; [READ: Count=280546, Max=143999, Min=337, Avg=4285.24, 90=6579, 99=22079, 99.9=76351, 99.99=84799] [UPDATE: Count=280930, Max=14951, Min=289, Avg=1988.2, 90=3033, 99=6159, 99.9=8207, 99.99=9743] 
2023-06-05 12:33:23:064 60 sec: 3323226 operations; 56336.5 current ops/sec; [READ: Count=282049, Max=128511, Min=405, Avg=4449.69, 90=6527, 99=26127, 99.9=76223, 99.99=89087] [UPDATE: Count=281380, Max=12887, Min=326, Avg=2005.35, 90=3051, 99=6183, 99.9=8271, 99.99=9511] 
2023-06-05 12:33:33:064 70 sec: 3886079 operations; 56285.3 current ops/sec; [READ: Count=281169, Max=64383, Min=406, Avg=4113.75, 90=6451, 99=18783, 99.9=28127, 99.99=36991] [UPDATE: Count=281284, Max=20623, Min=311, Avg=2020.97, 90=3079, 99=5987, 99.9=8239, 99.99=10527] 
2023-06-05 12:33:43:064 80 sec: 4448420 operations; 56234.1 current ops/sec; [READ: Count=281152, Max=58079, Min=387, Avg=4185.83, 90=6531, 99=19151, 99.9=36287, 99.99=46143] [UPDATE: Count=281351, Max=19887, Min=302, Avg=2031.18, 90=3117, 99=6099, 99.9=8179, 99.99=9695] 
2023-06-05 12:33:53:064 90 sec: 5011017 operations; 56259.7 current ops/sec; [READ: Count=281116, Max=42847, Min=371, Avg=4186.13, 90=6555, 99=18767, 99.9=34079, 99.99=39199] [UPDATE: Count=281404, Max=16495, Min=311, Avg=2034.9, 90=3133, 99=5943, 99.9=8091, 99.99=10271] 
2023-06-05 12:34:03:067 100 sec: 5573411 operations; 56222.53 current ops/sec; [READ: Count=280632, Max=56927, Min=387, Avg=4153.36, 90=6495, 99=19871, 99.9=29231, 99.99=38207] [UPDATE: Count=281844, Max=20143, Min=291, Avg=2010.02, 90=3087, 99=6059, 99.9=8255, 99.99=11447] 
2023-06-05 12:34:13:064 110 sec: 6132640 operations; 55939.68 current ops/sec; [READ: Count=279310, Max=176895, Min=419, Avg=4628.32, 90=6887, 99=26415, 99.9=96511, 99.99=115583] [UPDATE: Count=280036, Max=14615, Min=314, Avg=2063.22, 90=3147, 99=6663, 99.9=8967, 99.99=10639] 
2023-06-05 12:34:23:064 120 sec: 6698125 operations; 56548.5 current ops/sec; [READ: Count=282710, Max=117567, Min=381, Avg=4526.43, 90=6763, 99=23567, 99.9=93695, 99.99=112767] [UPDATE: Count=282664, Max=25503, Min=312, Avg=2075.8, 90=3141, 99=6595, 99.9=8999, 99.99=10871] 
2023-06-05 12:34:33:064 130 sec: 7252401 operations; 55427.6 current ops/sec; [READ: Count=276406, Max=302079, Min=386, Avg=4622.04, 90=6959, 99=22431, 99.9=125503, 99.99=164607] [UPDATE: Count=277853, Max=16295, Min=317, Avg=2074.92, 90=3133, 99=7031, 99.9=9519, 99.99=11423] 
2023-06-05 12:34:43:064 140 sec: 7805271 operations; 55287 current ops/sec; [READ: Count=276299, Max=355071, Min=379, Avg=5021.6, 90=6755, 99=24095, 99.9=162687, 99.99=240895] [UPDATE: Count=276617, Max=16719, Min=300, Avg=2059.02, 90=3107, 99=6911, 99.9=9415, 99.99=11255] 
2023-06-05 12:34:53:064 150 sec: 8357029 operations; 55175.8 current ops/sec; [READ: Count=276042, Max=346367, Min=399, Avg=5082.36, 90=6531, 99=25199, 99.9=162943, 99.99=277247] [UPDATE: Count=275655, Max=18431, Min=287, Avg=2034.35, 90=3075, 99=6815, 99.9=9351, 99.99=12167] 
2023-06-05 12:35:03:064 160 sec: 8921675 operations; 56464.6 current ops/sec; [READ: Count=282603, Max=320255, Min=404, Avg=4898.31, 90=6499, 99=20959, 99.9=191359, 99.99=197631] [UPDATE: Count=282063, Max=19183, Min=317, Avg=2070.27, 90=3129, 99=6295, 99.9=8895, 99.99=11423] 
2023-06-05 12:35:13:064 170 sec: 9471001 operations; 54932.6 current ops/sec; [READ: Count=274693, Max=374015, Min=365, Avg=5083.74, 90=6535, 99=24911, 99.9=190591, 99.99=266495] [UPDATE: Count=274496, Max=14847, Min=291, Avg=2080.53, 90=3169, 99=6191, 99.9=8439, 99.99=11247] 
2023-06-05 12:35:23:064 180 sec: 10047303 operations; 57630.2 current ops/sec; [READ: Count=288483, Max=283135, Min=373, Avg=4767.47, 90=6363, 99=22479, 99.9=190975, 99.99=229503] [UPDATE: Count=288008, Max=12327, Min=318, Avg=2099.37, 90=3151, 99=5503, 99.9=8207, 99.99=9951] 
2023-06-05 12:35:33:064 190 sec: 10622793 operations; 57549 current ops/sec; [READ: Count=287093, Max=292351, Min=388, Avg=4562.42, 90=6243, 99=24175, 99.9=133375, 99.99=193407] [UPDATE: Count=288443, Max=17471, Min=318, Avg=2099.53, 90=3137, 99=5615, 99.9=8679, 99.99=10431] 
2023-06-05 12:35:43:064 200 sec: 11190326 operations; 56753.3 current ops/sec; [READ: Count=284046, Max=211327, Min=363, Avg=4603.63, 90=6151, 99=21231, 99.9=169471, 99.99=194687] [UPDATE: Count=283413, Max=12543, Min=321, Avg=2079.67, 90=3121, 99=5427, 99.9=8399, 99.99=10319] 
2023-06-05 12:35:53:064 210 sec: 11760619 operations; 57029.3 current ops/sec; [READ: Count=284618, Max=171519, Min=389, Avg=4397.76, 90=6223, 99=20175, 99.9=130623, 99.99=161919] [UPDATE: Count=285705, Max=25599, Min=302, Avg=2104.27, 90=3139, 99=5623, 99.9=8935, 99.99=13967] 
2023-06-05 12:36:03:064 220 sec: 12322855 operations; 56223.6 current ops/sec; [READ: Count=281669, Max=137599, Min=426, Avg=4121.49, 90=6031, 99=18751, 99.9=49727, 99.99=84351] [UPDATE: Count=280456, Max=15495, Min=332, Avg=2052.21, 90=3079, 99=5455, 99.9=8511, 99.99=10535] 
2023-06-05 12:36:13:064 230 sec: 12886269 operations; 56341.4 current ops/sec; [READ: Count=282020, Max=88895, Min=368, Avg=3918.79, 90=5731, 99=16303, 99.9=48703, 99.99=82687] [UPDATE: Count=281312, Max=12895, Min=308, Avg=1998.18, 90=3007, 99=4995, 99.9=7747, 99.99=9831] 
2023-06-05 12:36:23:064 240 sec: 13448836 operations; 56256.7 current ops/sec; [READ: Count=281101, Max=31903, Min=370, Avg=3588.96, 90=5447, 99=8679, 99.9=20495, 99.99=25599] [UPDATE: Count=281449, Max=17263, Min=311, Avg=1931.14, 90=2923, 99=4103, 99.9=6703, 99.99=8463] 
2023-06-05 12:36:33:064 250 sec: 14011310 operations; 56247.4 current ops/sec; [READ: Count=280476, Max=34911, Min=395, Avg=3569.54, 90=5451, 99=7927, 99.9=12039, 99.99=19583] [UPDATE: Count=281515, Max=19775, Min=302, Avg=1950.72, 90=2957, 99=4119, 99.9=6751, 99.99=14271] 
2023-06-05 12:36:43:064 260 sec: 14573638 operations; 56232.8 current ops/sec; [READ: Count=281884, Max=23759, Min=383, Avg=3556.73, 90=5447, 99=7939, 99.9=12159, 99.99=19551] [UPDATE: Count=280851, Max=18879, Min=309, Avg=1938.84, 90=2961, 99=4107, 99.9=6471, 99.99=8887] 
2023-06-05 12:36:53:064 270 sec: 15136322 operations; 56268.4 current ops/sec; [READ: Count=280774, Max=31631, Min=358, Avg=3615.24, 90=5571, 99=8527, 99.9=14127, 99.99=22191] [UPDATE: Count=281876, Max=26591, Min=301, Avg=1957.14, 90=2997, 99=4259, 99.9=6607, 99.99=10143] 
2023-06-05 12:37:03:064 280 sec: 15698834 operations; 56251.2 current ops/sec; [READ: Count=281897, Max=30607, Min=406, Avg=3564.12, 90=5495, 99=8187, 99.9=12711, 99.99=22607] [UPDATE: Count=280700, Max=19295, Min=307, Avg=1932.82, 90=2971, 99=4195, 99.9=6455, 99.99=9351] 
2023-06-05 12:37:13:064 290 sec: 16261293 operations; 56245.9 current ops/sec; [READ: Count=280888, Max=103551, Min=395, Avg=3616.07, 90=5523, 99=9023, 99.9=21919, 99.99=42943] [UPDATE: Count=281611, Max=21679, Min=310, Avg=1944.84, 90=2987, 99=4515, 99.9=7551, 99.99=14823] 
2023-06-05 12:37:23:064 300 sec: 16823824 operations; 56253.1 current ops/sec; [READ: Count=281668, Max=20943, Min=391, Avg=3521.76, 90=5427, 99=8187, 99.9=11415, 99.99=15927] [UPDATE: Count=280715, Max=11255, Min=324, Avg=1917.17, 90=2949, 99=4203, 99.9=6391, 99.99=8127] 
2023-06-05 12:37:33:064 310 sec: 17386245 operations; 56242.1 current ops/sec; [READ: Count=280900, Max=86975, Min=414, Avg=3571.49, 90=5427, 99=8791, 99.9=24175, 99.99=47711] [UPDATE: Count=281616, Max=15031, Min=298, Avg=1916.06, 90=2939, 99=4351, 99.9=7003, 99.99=9375] 
2023-06-05 12:37:43:064 320 sec: 17948849 operations; 56260.4 current ops/sec; [READ: Count=280898, Max=33727, Min=407, Avg=3439.78, 90=5279, 99=8327, 99.9=18703, 99.99=25023] [UPDATE: Count=281334, Max=21071, Min=310, Avg=1867.82, 90=2859, 99=4195, 99.9=7303, 99.99=13951] 
2023-06-05 12:37:53:064 330 sec: 18511335 operations; 56248.6 current ops/sec; [READ: Count=281005, Max=34463, Min=385, Avg=3456.54, 90=5279, 99=9471, 99.9=21183, 99.99=25183] [UPDATE: Count=281766, Max=19375, Min=307, Avg=1858.35, 90=2827, 99=4471, 99.9=8143, 99.99=11999] 
2023-06-05 12:38:03:064 340 sec: 19073810 operations; 56247.5 current ops/sec; [READ: Count=281400, Max=32671, Min=403, Avg=3419.9, 90=5223, 99=9151, 99.9=21311, 99.99=25247] [UPDATE: Count=281136, Max=17039, Min=313, Avg=1842.21, 90=2787, 99=4379, 99.9=7983, 99.99=10279] 
2023-06-05 12:38:13:064 350 sec: 19636353 operations; 56254.3 current ops/sec; [READ: Count=281579, Max=28927, Min=412, Avg=3428.19, 90=5195, 99=8799, 99.9=20479, 99.99=24511] [UPDATE: Count=280988, Max=16847, Min=317, Avg=1847.94, 90=2793, 99=4255, 99.9=7007, 99.99=9327] 
2023-06-05 12:38:23:064 360 sec: 20198852 operations; 56249.9 current ops/sec; [READ: Count=281585, Max=34111, Min=367, Avg=3338.68, 90=5071, 99=7555, 99.9=12223, 99.99=31359] [UPDATE: Count=280937, Max=35871, Min=329, Avg=1829.65, 90=2763, 99=3877, 99.9=6275, 99.99=29775] 
2023-06-05 12:38:33:064 370 sec: 20761365 operations; 56251.3 current ops/sec; [READ: Count=281017, Max=60543, Min=367, Avg=3332.55, 90=5083, 99=7619, 99.9=12391, 99.99=24815] [UPDATE: Count=281444, Max=11415, Min=303, Avg=1824.65, 90=2773, 99=3933, 99.9=6435, 99.99=8447] 
2023-06-05 12:38:43:064 380 sec: 21323866 operations; 56250.1 current ops/sec; [READ: Count=281357, Max=15927, Min=392, Avg=3303.98, 90=5067, 99=7495, 99.9=9799, 99.99=12271] [UPDATE: Count=281007, Max=13263, Min=297, Avg=1816.08, 90=2767, 99=3925, 99.9=6179, 99.99=7711] 
2023-06-05 12:38:53:064 390 sec: 21886359 operations; 56249.3 current ops/sec; [READ: Count=281662, Max=28079, Min=399, Avg=3365.44, 90=5155, 99=7619, 99.9=10239, 99.99=14183] [UPDATE: Count=280903, Max=16399, Min=290, Avg=1847.69, 90=2823, 99=3975, 99.9=6163, 99.99=9175] 
2023-06-05 12:39:03:064 400 sec: 22448824 operations; 56246.5 current ops/sec; [READ: Count=281397, Max=27071, Min=397, Avg=3463.38, 90=5315, 99=7747, 99.9=10559, 99.99=14887] [UPDATE: Count=281141, Max=17759, Min=320, Avg=1890.95, 90=2895, 99=4043, 99.9=6343, 99.99=8087] 
2023-06-05 12:39:13:064 410 sec: 23011356 operations; 56253.2 current ops/sec; [READ: Count=281438, Max=25311, Min=389, Avg=3551.17, 90=5463, 99=8335, 99.9=14047, 99.99=20959] [UPDATE: Count=281121, Max=11463, Min=328, Avg=1922.73, 90=2941, 99=4231, 99.9=6843, 99.99=9135] 
2023-06-05 12:39:23:064 420 sec: 23573812 operations; 56245.6 current ops/sec; [READ: Count=280693, Max=23423, Min=394, Avg=3571.09, 90=5499, 99=8151, 99.9=11359, 99.99=16527] [UPDATE: Count=281710, Max=14287, Min=296, Avg=1940.43, 90=2969, 99=4279, 99.9=6503, 99.99=11655] 
2023-06-05 12:39:33:064 430 sec: 24136318 operations; 56250.6 current ops/sec; [READ: Count=280796, Max=19535, Min=392, Avg=3624.86, 90=5591, 99=8279, 99.9=11263, 99.99=15167] [UPDATE: Count=281663, Max=11855, Min=314, Avg=1954.01, 90=3003, 99=4247, 99.9=6335, 99.99=7903] 
2023-06-05 12:39:43:064 440 sec: 24698830 operations; 56251.2 current ops/sec; [READ: Count=281441, Max=23279, Min=386, Avg=3596, 90=5535, 99=8075, 99.9=11055, 99.99=14447] [UPDATE: Count=281105, Max=20271, Min=297, Avg=1943.62, 90=2997, 99=4143, 99.9=6107, 99.99=7623] 
2023-06-05 12:39:53:064 450 sec: 25261147 operations; 56231.7 current ops/sec; [READ: Count=280329, Max=28655, Min=378, Avg=3638.24, 90=5619, 99=8479, 99.9=13287, 99.99=22783] [UPDATE: Count=281996, Max=17423, Min=326, Avg=1954.59, 90=3011, 99=4287, 99.9=6371, 99.99=9063] 
2023-06-05 12:40:03:064 460 sec: 25823626 operations; 56247.9 current ops/sec; [READ: Count=281832, Max=44639, Min=366, Avg=3687.28, 90=5667, 99=9479, 99.9=22655, 99.99=34527] [UPDATE: Count=280746, Max=17775, Min=325, Avg=1958.34, 90=3013, 99=4447, 99.9=7103, 99.99=10463] 
2023-06-05 12:40:13:064 470 sec: 26380303 operations; 55667.7 current ops/sec; [READ: Count=278635, Max=225919, Min=356, Avg=4247.03, 90=6215, 99=20911, 99.9=62239, 99.99=146431] [UPDATE: Count=278173, Max=21151, Min=318, Avg=2061.26, 90=3143, 99=5759, 99.9=8631, 99.99=10551] 
2023-06-05 12:40:23:064 480 sec: 26947599 operations; 56729.6 current ops/sec; [READ: Count=283477, Max=287743, Min=367, Avg=4512.61, 90=6015, 99=23583, 99.9=123711, 99.99=216191] [UPDATE: Count=283834, Max=20543, Min=309, Avg=2046.99, 90=3083, 99=5647, 99.9=9087, 99.99=13711] 
2023-06-05 12:40:33:064 490 sec: 27511248 operations; 56364.9 current ops/sec; [READ: Count=281425, Max=77439, Min=385, Avg=3679.9, 90=5643, 99=8975, 99.9=20255, 99.99=59135] [UPDATE: Count=282092, Max=10351, Min=304, Avg=1961.6, 90=3001, 99=4351, 99.9=6811, 99.99=8583] 
2023-06-05 12:40:43:064 500 sec: 28073762 operations; 56251.4 current ops/sec; [READ: Count=281285, Max=34879, Min=377, Avg=3673.75, 90=5671, 99=9231, 99.9=18879, 99.99=29071] [UPDATE: Count=281230, Max=12135, Min=296, Avg=1958.64, 90=3011, 99=4459, 99.9=6887, 99.99=8991] 
2023-06-05 12:40:53:064 510 sec: 28636106 operations; 56234.4 current ops/sec; [READ: Count=280998, Max=81407, Min=377, Avg=3635.29, 90=5599, 99=9047, 99.9=26223, 99.99=35231] [UPDATE: Count=281371, Max=17599, Min=298, Avg=1931.93, 90=2983, 99=4443, 99.9=7347, 99.99=10711] 
2023-06-05 12:41:03:064 520 sec: 29198799 operations; 56269.3 current ops/sec; [READ: Count=280764, Max=80639, Min=371, Avg=3672.15, 90=5679, 99=8871, 99.9=19631, 99.99=40607] [UPDATE: Count=281824, Max=17199, Min=326, Avg=1952.1, 90=3019, 99=4407, 99.9=6787, 99.99=9735] 
2023-06-05 12:41:13:064 530 sec: 29761317 operations; 56251.8 current ops/sec; [READ: Count=281188, Max=25295, Min=367, Avg=3687.63, 90=5715, 99=9103, 99.9=17791, 99.99=21519] [UPDATE: Count=281384, Max=11839, Min=300, Avg=1962.07, 90=3015, 99=4483, 99.9=7283, 99.99=9391] 
2023-06-05 12:41:23:064 540 sec: 30323786 operations; 56246.9 current ops/sec; [READ: Count=280641, Max=26975, Min=345, Avg=3699.63, 90=5735, 99=8791, 99.9=13623, 99.99=20543] [UPDATE: Count=281799, Max=11783, Min=312, Avg=1975.59, 90=3049, 99=4431, 99.9=6615, 99.99=8279] 
2023-06-05 12:41:33:064 550 sec: 30886207 operations; 56242.1 current ops/sec; [READ: Count=281400, Max=36799, Min=385, Avg=3826.78, 90=5915, 99=10199, 99.9=22623, 99.99=28095] [UPDATE: Count=281061, Max=14639, Min=327, Avg=2010.35, 90=3095, 99=4711, 99.9=7651, 99.99=9623] 
2023-06-05 12:41:43:064 560 sec: 31447984 operations; 56177.7 current ops/sec; [READ: Count=281024, Max=163199, Min=387, Avg=3889.75, 90=5919, 99=11583, 99.9=26831, 99.99=79359] [UPDATE: Count=280856, Max=13759, Min=316, Avg=2011.69, 90=3089, 99=4823, 99.9=8167, 99.99=10247] 
2023-06-05 12:41:53:064 570 sec: 31991327 operations; 54334.3 current ops/sec; [READ: Count=271464, Max=410367, Min=365, Avg=4877.15, 90=5667, 99=13647, 99.9=227327, 99.99=372735] [UPDATE: Count=271963, Max=21327, Min=323, Avg=1952.77, 90=3007, 99=4907, 99.9=8799, 99.99=15391] 
2023-06-05 12:42:03:064 580 sec: 32547274 operations; 55594.7 current ops/sec; [READ: Count=278600, Max=361727, Min=396, Avg=4970.15, 90=5903, 99=19999, 99.9=229247, 99.99=282111] [UPDATE: Count=277334, Max=19903, Min=303, Avg=2015.2, 90=3079, 99=4867, 99.9=7791, 99.99=10415] 
2023-06-05 12:42:13:064 590 sec: 33086067 operations; 53879.3 current ops/sec; [READ: Count=269894, Max=319999, Min=393, Avg=5228.94, 90=6667, 99=24687, 99.9=192127, 99.99=260223] [UPDATE: Count=268891, Max=13607, Min=308, Avg=2103.44, 90=3225, 99=6139, 99.9=8583, 99.99=10231] 
2023-06-05 12:42:23:065 600 sec: 33581634 operations; 49551.74 current ops/sec; [READ: Count=247445, Max=552447, Min=379, Avg=5987.11, 90=6879, 99=47967, 99.9=325119, 99.99=330239] [UPDATE: Count=248159, Max=16319, Min=307, Avg=2071.28, 90=3237, 99=6543, 99.9=8839, 99.99=10791] 
2023-06-05 12:42:33:064 610 sec: 34101673 operations; 52009.1 current ops/sec; [READ: Count=260033, Max=350975, Min=375, Avg=5574.99, 90=7023, 99=34527, 99.9=321279, 99.99=328191] [UPDATE: Count=259200, Max=22431, Min=306, Avg=2131.93, 90=3299, 99=6415, 99.9=9359, 99.99=16119] 
2023-06-05 12:42:43:064 620 sec: 34654962 operations; 55328.9 current ops/sec; [READ: Count=276447, Max=288255, Min=378, Avg=5064.24, 90=6915, 99=30687, 99.9=160639, 99.99=266751] [UPDATE: Count=277600, Max=19855, Min=300, Avg=2161.24, 90=3317, 99=6007, 99.9=8255, 99.99=10079] 
2023-06-05 12:42:53:064 630 sec: 35217163 operations; 56220.1 current ops/sec; [READ: Count=281604, Max=257535, Min=385, Avg=4938.16, 90=6871, 99=30527, 99.9=131967, 99.99=152575] [UPDATE: Count=280729, Max=24495, Min=322, Avg=2167.36, 90=3309, 99=6039, 99.9=8471, 99.99=10479] 
2023-06-05 12:43:03:064 640 sec: 35793965 operations; 57680.2 current ops/sec; [READ: Count=288267, Max=150783, Min=370, Avg=4775.72, 90=6639, 99=18879, 99.9=132991, 99.99=140415] [UPDATE: Count=288296, Max=17695, Min=312, Avg=2157.95, 90=3285, 99=5315, 99.9=7803, 99.99=9999] 
2023-06-05 12:43:13:064 650 sec: 36361354 operations; 56738.9 current ops/sec; [READ: Count=283459, Max=274687, Min=354, Avg=4867.25, 90=6703, 99=21583, 99.9=158591, 99.99=199935] [UPDATE: Count=284068, Max=11671, Min=308, Avg=2181.66, 90=3305, 99=5743, 99.9=8311, 99.99=10063] 
2023-06-05 12:43:23:064 660 sec: 36941497 operations; 58014.3 current ops/sec; [READ: Count=290129, Max=258047, Min=398, Avg=4693.43, 90=6711, 99=16447, 99.9=134143, 99.99=204671] [UPDATE: Count=289935, Max=13927, Min=318, Avg=2195.87, 90=3319, 99=5355, 99.9=7883, 99.99=9727] 
2023-06-05 12:43:33:064 670 sec: 37527425 operations; 58592.8 current ops/sec; [READ: Count=292637, Max=173695, Min=408, Avg=4561.78, 90=6963, 99=14079, 99.9=43391, 99.99=107327] [UPDATE: Count=293307, Max=17503, Min=309, Avg=2250.73, 90=3385, 99=5307, 99.9=7791, 99.99=9655] 
2023-06-05 12:43:43:064 680 sec: 38115761 operations; 58833.6 current ops/sec; [READ: Count=294502, Max=27183, Min=419, Avg=4492.7, 90=6947, 99=12031, 99.9=20767, 99.99=24031] [UPDATE: Count=293693, Max=14335, Min=312, Avg=2272.27, 90=3393, 99=5043, 99.9=7287, 99.99=8647] 
2023-06-05 12:43:53:064 690 sec: 38692954 operations; 57719.3 current ops/sec; [READ: Count=288966, Max=139263, Min=399, Avg=4620.23, 90=6783, 99=14191, 99.9=82303, 99.99=88127] [UPDATE: Count=288291, Max=22703, Min=308, Avg=2269.45, 90=3379, 99=5231, 99.9=7991, 99.99=10255] 
2023-06-05 12:44:03:064 700 sec: 39268736 operations; 57578.2 current ops/sec; [READ: Count=288225, Max=97279, Min=399, Avg=4615.33, 90=6743, 99=14295, 99.9=68671, 99.99=84223] [UPDATE: Count=287680, Max=17967, Min=324, Avg=2278.98, 90=3379, 99=5243, 99.9=8607, 99.99=11039] 
2023-06-05 12:44:13:064 710 sec: 39839118 operations; 57038.2 current ops/sec; [READ: Count=284891, Max=62847, Min=362, Avg=4645.36, 90=6855, 99=15695, 99.9=40607, 99.99=48511] [UPDATE: Count=285364, Max=13391, Min=321, Avg=2312.97, 90=3419, 99=5351, 99.9=8447, 99.99=10359] 
2023-06-05 12:44:23:064 720 sec: 40389660 operations; 55054.2 current ops/sec; [READ: Count=275665, Max=226431, Min=362, Avg=4933.85, 90=6699, 99=21487, 99.9=135295, 99.99=161535] [UPDATE: Count=274953, Max=12927, Min=308, Avg=2289.28, 90=3385, 99=5759, 99.9=8887, 99.99=10775] 
2023-06-05 12:44:33:064 730 sec: 40954061 operations; 56440.1 current ops/sec; [READ: Count=282222, Max=117631, Min=369, Avg=4722.77, 90=7023, 99=15655, 99.9=33023, 99.99=106111] [UPDATE: Count=282105, Max=16191, Min=295, Avg=2356.54, 90=3477, 99=5567, 99.9=8807, 99.99=10767] 
2023-06-05 12:44:43:064 740 sec: 41516116 operations; 56205.5 current ops/sec; [READ: Count=281501, Max=48191, Min=383, Avg=4753.08, 90=7051, 99=18799, 99.9=32463, 99.99=37471] [UPDATE: Count=280534, Max=21247, Min=304, Avg=2349.95, 90=3473, 99=5831, 99.9=9215, 99.99=12991] 
2023-06-05 12:44:53:064 750 sec: 42083409 operations; 56729.3 current ops/sec; [READ: Count=283832, Max=50335, Min=366, Avg=4691.13, 90=6987, 99=16359, 99.9=27727, 99.99=33599] [UPDATE: Count=283388, Max=28991, Min=316, Avg=2342.2, 90=3465, 99=5511, 99.9=8623, 99.99=12071] 
2023-06-05 12:45:03:064 760 sec: 42650556 operations; 56714.7 current ops/sec; [READ: Count=283947, Max=40383, Min=374, Avg=4685.56, 90=6915, 99=18207, 99.9=26431, 99.99=31439] [UPDATE: Count=283290, Max=19215, Min=298, Avg=2342.5, 90=3443, 99=5687, 99.9=9079, 99.99=11607] 
2023-06-05 12:45:13:064 770 sec: 43202697 operations; 55214.1 current ops/sec; [READ: Count=275649, Max=390655, Min=413, Avg=4867.12, 90=6903, 99=21535, 99.9=40351, 99.99=269567] [UPDATE: Count=276287, Max=13879, Min=295, Avg=2335.57, 90=3445, 99=5851, 99.9=9031, 99.99=10967] 
2023-06-05 12:45:23:064 780 sec: 43730894 operations; 52819.7 current ops/sec; [READ: Count=263569, Max=539135, Min=373, Avg=5341.21, 90=6359, 99=19951, 99.9=273407, 99.99=278527] [UPDATE: Count=264800, Max=14911, Min=303, Avg=2225.99, 90=3305, 99=5295, 99.9=8407, 99.99=10503] 
2023-06-05 12:45:33:064 790 sec: 44284680 operations; 55378.6 current ops/sec; [READ: Count=277729, Max=282879, Min=401, Avg=4961.35, 90=6559, 99=14407, 99.9=269567, 99.99=274943] [UPDATE: Count=276083, Max=11711, Min=322, Avg=2255.67, 90=3341, 99=5099, 99.9=7647, 99.99=9559] 
2023-06-05 12:45:43:064 800 sec: 44866009 operations; 58132.9 current ops/sec; [READ: Count=291226, Max=59903, Min=391, Avg=4543.88, 90=6891, 99=10727, 99.9=18943, 99.99=29983] [UPDATE: Count=290047, Max=12087, Min=318, Avg=2320.38, 90=3415, 99=4855, 99.9=6911, 99.99=8719] 
2023-06-05 12:45:53:064 810 sec: 45441809 operations; 57580 current ops/sec; [READ: Count=288420, Max=37023, Min=371, Avg=4577.39, 90=6915, 99=11231, 99.9=19183, 99.99=29391] [UPDATE: Count=287340, Max=21855, Min=330, Avg=2340.23, 90=3433, 99=4951, 99.9=7187, 99.99=9959] 
2023-06-05 12:46:03:064 820 sec: 46018260 operations; 57645.1 current ops/sec; [READ: Count=288405, Max=30207, Min=406, Avg=4533.49, 90=6795, 99=10399, 99.9=14911, 99.99=20463] [UPDATE: Count=288015, Max=19855, Min=341, Avg=2348.55, 90=3423, 99=4791, 99.9=6919, 99.99=9551] 
2023-06-05 12:46:13:064 830 sec: 46590904 operations; 57264.4 current ops/sec; [READ: Count=286498, Max=108607, Min=425, Avg=4562.72, 90=6807, 99=10647, 99.9=22191, 99.99=58943] [UPDATE: Count=286240, Max=14719, Min=312, Avg=2347.27, 90=3417, 99=4875, 99.9=7067, 99.99=9255] 
2023-06-05 12:46:23:064 840 sec: 47163784 operations; 57288 current ops/sec; [READ: Count=285910, Max=31967, Min=398, Avg=4536.44, 90=6767, 99=10135, 99.9=14823, 99.99=22399] [UPDATE: Count=286829, Max=12711, Min=303, Avg=2352.06, 90=3425, 99=4735, 99.9=6743, 99.99=8383] 
2023-06-05 12:46:33:067 850 sec: 47727451 operations; 56349.8 current ops/sec; [READ: Count=281787, Max=92543, Min=368, Avg=4650.06, 90=6791, 99=11615, 99.9=27855, 99.99=47871] [UPDATE: Count=282021, Max=18111, Min=321, Avg=2391.56, 90=3455, 99=5027, 99.9=7803, 99.99=10655] 
2023-06-05 12:46:43:064 860 sec: 48288976 operations; 56169.35 current ops/sec; [READ: Count=280495, Max=50111, Min=399, Avg=4696.6, 90=6851, 99=12167, 99.9=25279, 99.99=34687] [UPDATE: Count=281051, Max=12271, Min=300, Avg=2410.59, 90=3471, 99=5139, 99.9=8123, 99.99=10343] 
2023-06-05 12:46:53:064 870 sec: 48852186 operations; 56321 current ops/sec; [READ: Count=281607, Max=37471, Min=394, Avg=4679.57, 90=6851, 99=11623, 99.9=25167, 99.99=30047] [UPDATE: Count=281625, Max=23887, Min=306, Avg=2406.65, 90=3467, 99=5039, 99.9=7907, 99.99=10735] 
2023-06-05 12:47:03:064 880 sec: 49413760 operations; 56157.4 current ops/sec; [READ: Count=281314, Max=37887, Min=379, Avg=4702.28, 90=6907, 99=12887, 99.9=25039, 99.99=29295] [UPDATE: Count=279669, Max=26015, Min=295, Avg=2404.35, 90=3471, 99=5267, 99.9=8615, 99.99=16319] 
2023-06-05 12:47:13:064 890 sec: 49972790 operations; 55903 current ops/sec; [READ: Count=279854, Max=74303, Min=405, Avg=4740.34, 90=6971, 99=14471, 99.9=24367, 99.99=46879] [UPDATE: Count=279740, Max=23903, Min=329, Avg=2399.82, 90=3463, 99=5383, 99.9=8391, 99.99=10871] 
2023-06-05 12:47:23:064 900 sec: 50531709 operations; 55891.9 current ops/sec; [READ: Count=279028, Max=62815, Min=396, Avg=4766.04, 90=6883, 99=17455, 99.9=41727, 99.99=55007] [UPDATE: Count=279403, Max=25887, Min=343, Avg=2389.64, 90=3443, 99=5723, 99.9=9103, 99.99=14159] 
2023-06-05 12:47:33:064 910 sec: 51090670 operations; 55896.1 current ops/sec; [READ: Count=279241, Max=44479, Min=406, Avg=4747.54, 90=6859, 99=16431, 99.9=26191, 99.99=31087] [UPDATE: Count=280359, Max=21999, Min=316, Avg=2402.7, 90=3447, 99=5475, 99.9=8583, 99.99=11159] 
2023-06-05 12:47:43:064 920 sec: 51652579 operations; 56190.9 current ops/sec; [READ: Count=280783, Max=46463, Min=388, Avg=4707.91, 90=6767, 99=13407, 99.9=26639, 99.99=31135] [UPDATE: Count=280817, Max=14439, Min=348, Avg=2407.06, 90=3439, 99=5119, 99.9=7723, 99.99=9687] 
2023-06-05 12:47:53:064 930 sec: 52215496 operations; 56291.7 current ops/sec; [READ: Count=280545, Max=34399, Min=422, Avg=4699.69, 90=6759, 99=13727, 99.9=24383, 99.99=27999] [UPDATE: Count=282445, Max=18687, Min=333, Avg=2406.93, 90=3439, 99=5031, 99.9=7247, 99.99=9647] 
2023-06-05 12:48:03:064 940 sec: 52780726 operations; 56523 current ops/sec; [READ: Count=282803, Max=33599, Min=405, Avg=4666.89, 90=6819, 99=11759, 99.9=22271, 99.99=25647] [UPDATE: Count=282364, Max=18351, Min=314, Avg=2401.83, 90=3455, 99=4947, 99.9=7155, 99.99=9239] 
2023-06-05 12:48:13:064 950 sec: 53345819 operations; 56509.3 current ops/sec; [READ: Count=283102, Max=26927, Min=403, Avg=4668.17, 90=6891, 99=11535, 99.9=20847, 99.99=24127] [UPDATE: Count=281745, Max=20847, Min=347, Avg=2397.95, 90=3461, 99=4999, 99.9=7283, 99.99=12775] 
2023-06-05 12:48:23:064 960 sec: 53915542 operations; 56972.3 current ops/sec; [READ: Count=284783, Max=30943, Min=422, Avg=4624.17, 90=6811, 99=11591, 99.9=20623, 99.99=24767] [UPDATE: Count=285347, Max=17071, Min=331, Avg=2367.11, 90=3419, 99=4779, 99.9=7303, 99.99=9863] 
2023-06-05 12:48:33:064 970 sec: 54487356 operations; 57181.4 current ops/sec; [READ: Count=285645, Max=41087, Min=382, Avg=4571.68, 90=6767, 99=10535, 99.9=19135, 99.99=29359] [UPDATE: Count=286122, Max=10911, Min=315, Avg=2358.92, 90=3411, 99=4735, 99.9=7003, 99.99=8959] 
2023-06-05 12:48:43:064 980 sec: 55052951 operations; 56559.5 current ops/sec; [READ: Count=282847, Max=114175, Min=401, Avg=4637.49, 90=6739, 99=11807, 99.9=40415, 99.99=63071] [UPDATE: Count=282344, Max=20607, Min=327, Avg=2360.36, 90=3409, 99=5095, 99.9=8051, 99.99=12727] 
2023-06-05 12:48:53:064 990 sec: 55613848 operations; 56089.7 current ops/sec; [READ: Count=280204, Max=127487, Min=412, Avg=4741.83, 90=6731, 99=12119, 99.9=69951, 99.99=77439] [UPDATE: Count=281084, Max=19023, Min=308, Avg=2347.57, 90=3401, 99=5011, 99.9=7703, 99.99=11375] 
2023-06-05 12:49:03:064 1000 sec: 56180637 operations; 56678.9 current ops/sec; [READ: Count=283108, Max=62719, Min=445, Avg=4661.46, 90=6779, 99=11743, 99.9=48671, 99.99=55679] [UPDATE: Count=283757, Max=16511, Min=282, Avg=2351.76, 90=3413, 99=4907, 99.9=7427, 99.99=10519] 
2023-06-05 12:49:13:064 1010 sec: 56746456 operations; 56581.9 current ops/sec; [READ: Count=282866, Max=52031, Min=375, Avg=4647, 90=6887, 99=12815, 99.9=28687, 99.99=35039] [UPDATE: Count=282943, Max=12215, Min=327, Avg=2346.8, 90=3423, 99=5099, 99.9=7499, 99.99=9375] 
2023-06-05 12:49:23:064 1020 sec: 57314780 operations; 56832.4 current ops/sec; [READ: Count=283624, Max=36223, Min=398, Avg=4546.93, 90=6815, 99=10911, 99.9=21455, 99.99=28815] [UPDATE: Count=284600, Max=12119, Min=310, Avg=2333.2, 90=3405, 99=4859, 99.9=7043, 99.99=8863] 
2023-06-05 12:49:33:064 1030 sec: 57878918 operations; 56413.8 current ops/sec; [READ: Count=282011, Max=71487, Min=402, Avg=4577.32, 90=6775, 99=10407, 99.9=18383, 99.99=59007] [UPDATE: Count=282193, Max=60287, Min=313, Avg=2372.46, 90=3435, 99=4767, 99.9=7071, 99.99=56479] 
2023-06-05 12:49:43:064 1040 sec: 58442981 operations; 56406.3 current ops/sec; [READ: Count=282534, Max=34431, Min=381, Avg=4587.14, 90=6787, 99=11575, 99.9=24031, 99.99=29567] [UPDATE: Count=281328, Max=11383, Min=309, Avg=2359.19, 90=3431, 99=4955, 99.9=7579, 99.99=9967] 
2023-06-05 12:49:53:064 1050 sec: 59006060 operations; 56307.9 current ops/sec; [READ: Count=281184, Max=37471, Min=386, Avg=4646.36, 90=6883, 99=13175, 99.9=25679, 99.99=29727] [UPDATE: Count=282054, Max=17663, Min=323, Avg=2359.35, 90=3441, 99=5155, 99.9=8043, 99.99=10335] 
2023-06-05 12:50:03:064 1060 sec: 59570038 operations; 56397.8 current ops/sec; [READ: Count=281780, Max=36255, Min=390, Avg=4597.06, 90=6847, 99=11887, 99.9=24751, 99.99=29871] [UPDATE: Count=282128, Max=16463, Min=315, Avg=2338.86, 90=3401, 99=4939, 99.9=7755, 99.99=10167] 
2023-06-05 12:50:13:064 1070 sec: 60112723 operations; 54268.5 current ops/sec; [READ: Count=271998, Max=185599, Min=389, Avg=4947.83, 90=6927, 99=19551, 99.9=99327, 99.99=147199] [UPDATE: Count=270758, Max=12799, Min=299, Avg=2332.18, 90=3417, 99=5431, 99.9=8019, 99.99=9727] 
2023-06-05 12:50:23:064 1080 sec: 60674429 operations; 56170.6 current ops/sec; [READ: Count=280777, Max=145151, Min=363, Avg=4775.35, 90=6971, 99=14871, 99.9=64959, 99.99=117311] [UPDATE: Count=281010, Max=13215, Min=323, Avg=2342.28, 90=3419, 99=5303, 99.9=8231, 99.99=10431] 
2023-06-05 12:50:33:064 1090 sec: 61242503 operations; 56807.4 current ops/sec; [READ: Count=284376, Max=34591, Min=388, Avg=4656.44, 90=6927, 99=12711, 99.9=26095, 99.99=29999] [UPDATE: Count=283576, Max=14879, Min=311, Avg=2358.89, 90=3419, 99=5095, 99.9=8055, 99.99=10231] 
2023-06-05 12:50:43:064 1100 sec: 61810537 operations; 56803.4 current ops/sec; [READ: Count=283911, Max=55007, Min=385, Avg=4651.12, 90=6899, 99=12551, 99.9=25567, 99.99=29823] [UPDATE: Count=284125, Max=12943, Min=310, Avg=2360.41, 90=3425, 99=5035, 99.9=7639, 99.99=9823] 
2023-06-05 12:50:53:064 1110 sec: 62378292 operations; 56775.5 current ops/sec; [READ: Count=283868, Max=52799, Min=395, Avg=4621.46, 90=6887, 99=12039, 99.9=23823, 99.99=29071] [UPDATE: Count=283552, Max=24799, Min=305, Avg=2359.24, 90=3427, 99=5055, 99.9=7875, 99.99=14431] 
2023-06-05 12:51:03:065 1120 sec: 62938593 operations; 56024.5 current ops/sec; [READ: Count=279239, Max=100735, Min=412, Avg=4733.13, 90=6811, 99=12727, 99.9=68991, 99.99=77183] [UPDATE: Count=281590, Max=21359, Min=329, Avg=2337.48, 90=3401, 99=5071, 99.9=8527, 99.99=13687] 
2023-06-05 12:51:13:064 1130 sec: 63504121 operations; 56558.46 current ops/sec; [READ: Count=282628, Max=77631, Min=397, Avg=4668.45, 90=6823, 99=12503, 99.9=59135, 99.99=72703] [UPDATE: Count=282820, Max=13247, Min=290, Avg=2337.95, 90=3401, 99=5111, 99.9=8407, 99.99=10615] 
2023-06-05 12:51:23:064 1140 sec: 64061602 operations; 55748.1 current ops/sec; [READ: Count=278430, Max=186367, Min=380, Avg=4805.48, 90=6895, 99=18383, 99.9=84223, 99.99=118143] [UPDATE: Count=279159, Max=12583, Min=297, Avg=2328.15, 90=3395, 99=5819, 99.9=9087, 99.99=10735] 
2023-06-05 12:51:33:064 1150 sec: 64630079 operations; 56847.7 current ops/sec; [READ: Count=284176, Max=53727, Min=403, Avg=4639.91, 90=6879, 99=16719, 99.9=28431, 99.99=33439] [UPDATE: Count=284175, Max=12967, Min=299, Avg=2324.91, 90=3395, 99=5579, 99.9=8991, 99.99=11047] 
2023-06-05 12:51:43:064 1160 sec: 65196155 operations; 56607.6 current ops/sec; [READ: Count=283228, Max=43231, Min=361, Avg=4604.65, 90=6879, 99=15511, 99.9=25327, 99.99=29071] [UPDATE: Count=282805, Max=16103, Min=305, Avg=2310.34, 90=3383, 99=5419, 99.9=8527, 99.99=10447] 
2023-06-05 12:51:53:064 1170 sec: 65760715 operations; 56456 current ops/sec; [READ: Count=282738, Max=39391, Min=367, Avg=4454.34, 90=6691, 99=13047, 99.9=23311, 99.99=27407] [UPDATE: Count=281771, Max=16191, Min=327, Avg=2266.38, 90=3341, 99=5059, 99.9=7855, 99.99=10879] 
2023-06-05 12:52:03:064 1180 sec: 66323278 operations; 56256.3 current ops/sec; [READ: Count=281284, Max=37119, Min=384, Avg=4480.91, 90=6723, 99=14751, 99.9=24335, 99.99=28351] [UPDATE: Count=281272, Max=23855, Min=303, Avg=2264.98, 90=3333, 99=5291, 99.9=8287, 99.99=11143] 
2023-06-05 12:52:13:064 1190 sec: 66882736 operations; 55945.8 current ops/sec; [READ: Count=279054, Max=145535, Min=431, Avg=4654.08, 90=6747, 99=16415, 99.9=82239, 99.99=90687] [UPDATE: Count=280552, Max=12007, Min=309, Avg=2272.88, 90=3353, 99=5191, 99.9=8247, 99.99=10007] 
2023-06-05 12:52:23:064 1200 sec: 67448570 operations; 56583.4 current ops/sec; [READ: Count=282724, Max=91071, Min=407, Avg=4440.73, 90=6667, 99=11615, 99.9=26703, 99.99=82559] [UPDATE: Count=282428, Max=30367, Min=333, Avg=2259.15, 90=3323, 99=5003, 99.9=7831, 99.99=16895] 
2023-06-05 12:52:33:064 1210 sec: 68011131 operations; 56256.1 current ops/sec; [READ: Count=281198, Max=32799, Min=385, Avg=4319.37, 90=6559, 99=10535, 99.9=17631, 99.99=25263] [UPDATE: Count=281915, Max=20527, Min=305, Avg=2216.74, 90=3279, 99=4575, 99.9=6447, 99.99=9295] 
2023-06-05 12:52:43:064 1220 sec: 68573473 operations; 56234.2 current ops/sec; [READ: Count=280853, Max=34271, Min=417, Avg=4370.13, 90=6707, 99=11047, 99.9=17583, 99.99=25039] [UPDATE: Count=281476, Max=11519, Min=303, Avg=2235.08, 90=3305, 99=4843, 99.9=6935, 99.99=8703] 
2023-06-05 12:52:53:064 1230 sec: 69133987 operations; 56051.4 current ops/sec; [READ: Count=280062, Max=230911, Min=394, Avg=4488.31, 90=6651, 99=11543, 99.9=52095, 99.99=168575] [UPDATE: Count=280526, Max=28079, Min=304, Avg=2232.35, 90=3303, 99=4927, 99.9=7175, 99.99=9375] 
2023-06-05 12:53:03:064 1240 sec: 69698580 operations; 56459.3 current ops/sec; [READ: Count=282230, Max=46591, Min=382, Avg=4433.87, 90=6743, 99=11359, 99.9=28063, 99.99=34527] [UPDATE: Count=282309, Max=22831, Min=323, Avg=2258.9, 90=3333, 99=4919, 99.9=7715, 99.99=20191] 
2023-06-05 12:53:13:064 1250 sec: 70259914 operations; 56133.4 current ops/sec; [READ: Count=280929, Max=33343, Min=397, Avg=4444.71, 90=6779, 99=12159, 99.9=19887, 99.99=27903] [UPDATE: Count=280404, Max=16431, Min=331, Avg=2264.47, 90=3349, 99=5063, 99.9=7627, 99.99=12663] 
2023-06-05 12:53:23:064 1260 sec: 70823398 operations; 56348.4 current ops/sec; [READ: Count=281346, Max=49183, Min=395, Avg=4392.18, 90=6675, 99=10831, 99.9=21423, 99.99=43327] [UPDATE: Count=282067, Max=13071, Min=323, Avg=2259.7, 90=3345, 99=4875, 99.9=7287, 99.99=9279] 
2023-06-05 12:53:33:064 1270 sec: 71385041 operations; 56164.3 current ops/sec; [READ: Count=280722, Max=82687, Min=431, Avg=4473.65, 90=6799, 99=12039, 99.9=24047, 99.99=35039] [UPDATE: Count=281008, Max=13407, Min=319, Avg=2280.88, 90=3375, 99=5163, 99.9=8199, 99.99=10295] 
2023-06-05 12:53:43:064 1280 sec: 71938082 operations; 55304.1 current ops/sec; [READ: Count=276242, Max=297983, Min=388, Avg=4831.09, 90=6699, 99=14207, 99.9=158335, 99.99=166015] [UPDATE: Count=276911, Max=12703, Min=288, Avg=2250.11, 90=3343, 99=5247, 99.9=8303, 99.99=10327] 
2023-06-05 12:53:53:064 1290 sec: 72506704 operations; 56862.2 current ops/sec; [READ: Count=284180, Max=136319, Min=402, Avg=4637.55, 90=6839, 99=12903, 99.9=73855, 99.99=119999] [UPDATE: Count=284473, Max=24127, Min=312, Avg=2290.59, 90=3389, 99=5247, 99.9=7951, 99.99=10583] 
2023-06-05 12:54:03:064 1300 sec: 73071375 operations; 56467.1 current ops/sec; [READ: Count=282431, Max=105407, Min=411, Avg=4577.06, 90=6687, 99=14223, 99.9=61439, 99.99=83071] [UPDATE: Count=282143, Max=18399, Min=319, Avg=2242.76, 90=3327, 99=5247, 99.9=8423, 99.99=11303] 
2023-06-05 12:54:13:064 1310 sec: 73629408 operations; 55803.3 current ops/sec; [READ: Count=279482, Max=237567, Min=414, Avg=4714.28, 90=6787, 99=19871, 99.9=61311, 99.99=164095] [UPDATE: Count=278689, Max=15167, Min=315, Avg=2243.81, 90=3329, 99=5827, 99.9=9399, 99.99=11631] 
2023-06-05 12:54:23:064 1320 sec: 74180652 operations; 55124.4 current ops/sec; [READ: Count=275560, Max=176127, Min=368, Avg=4936.49, 90=6783, 99=22527, 99.9=138623, 99.99=165247] [UPDATE: Count=275668, Max=13671, Min=307, Avg=2218.28, 90=3309, 99=5923, 99.9=9223, 99.99=10943] 
2023-06-05 12:54:33:064 1330 sec: 74743626 operations; 56297.4 current ops/sec; [READ: Count=281203, Max=111423, Min=402, Avg=4830.87, 90=7039, 99=24383, 99.9=62911, 99.99=91967] [UPDATE: Count=281745, Max=15599, Min=307, Avg=2252.07, 90=3365, 99=6063, 99.9=9383, 99.99=11527] 
2023-06-05 12:54:43:064 1340 sec: 75305317 operations; 56169.1 current ops/sec; [READ: Count=280670, Max=184959, Min=374, Avg=4840.31, 90=7095, 99=23471, 99.9=84287, 99.99=111935] [UPDATE: Count=281059, Max=17279, Min=305, Avg=2252.57, 90=3365, 99=5995, 99.9=9063, 99.99=13711] 
2023-06-05 12:54:53:064 1350 sec: 75872563 operations; 56724.6 current ops/sec; [READ: Count=283999, Max=129471, Min=392, Avg=4730.91, 90=7095, 99=17279, 99.9=77759, 99.99=110015] [UPDATE: Count=283237, Max=18735, Min=312, Avg=2274.26, 90=3389, 99=5587, 99.9=8351, 99.99=11703] 
2023-06-05 12:55:03:067 1360 sec: 76443463 operations; 57072.88 current ops/sec; [READ: Count=284835, Max=56991, Min=369, Avg=4591.11, 90=7031, 99=13287, 99.9=28143, 99.99=35039] [UPDATE: Count=285978, Max=19263, Min=312, Avg=2284.24, 90=3403, 99=5271, 99.9=7711, 99.99=10807] 
2023-06-05 12:55:13:064 1370 sec: 76989610 operations; 54631.09 current ops/sec; [READ: Count=273812, Max=134527, Min=407, Avg=4895.86, 90=7287, 99=20863, 99.9=64127, 99.99=85759] [UPDATE: Count=272188, Max=18607, Min=319, Avg=2318.58, 90=3449, 99=6187, 99.9=9079, 99.99=11703] 
2023-06-05 12:55:23:064 1380 sec: 77550608 operations; 56099.8 current ops/sec; [READ: Count=279779, Max=91391, Min=388, Avg=4834.45, 90=7075, 99=18687, 99.9=81023, 99.99=85951] [UPDATE: Count=281358, Max=16495, Min=323, Avg=2289.07, 90=3407, 99=5643, 99.9=8751, 99.99=10759] 
2023-06-05 12:55:33:064 1390 sec: 78077848 operations; 52724 current ops/sec; [READ: Count=263628, Max=543231, Min=370, Avg=5363.23, 90=6475, 99=20943, 99.9=325887, 99.99=430335] [UPDATE: Count=263587, Max=15311, Min=305, Avg=2160.25, 90=3265, 99=5627, 99.9=9071, 99.99=11423] 
2023-06-05 12:55:43:064 1400 sec: 78601099 operations; 52325.1 current ops/sec; [READ: Count=262154, Max=412927, Min=363, Avg=5489.6, 90=6383, 99=17327, 99.9=375551, 99.99=398847] [UPDATE: Count=261056, Max=29247, Min=306, Avg=2125.07, 90=3231, 99=5287, 99.9=8319, 99.99=10407] 
2023-06-05 12:55:53:065 1410 sec: 79139058 operations; 53790.52 current ops/sec; [READ: Count=268322, Max=463615, Min=379, Avg=5323.22, 90=6435, 99=14223, 99.9=380159, 99.99=451327] [UPDATE: Count=269789, Max=18623, Min=315, Avg=2119.65, 90=3233, 99=5071, 99.9=8183, 99.99=10607] 
2023-06-05 12:56:03:064 1420 sec: 79703004 operations; 56400.24 current ops/sec; [READ: Count=281878, Max=282623, Min=401, Avg=4829.41, 90=7303, 99=20079, 99.9=65023, 99.99=197375] [UPDATE: Count=282065, Max=17407, Min=314, Avg=2270.24, 90=3427, 99=5843, 99.9=8647, 99.99=10927] 
2023-06-05 12:56:13:064 1430 sec: 80270387 operations; 56738.3 current ops/sec; [READ: Count=283128, Max=168063, Min=373, Avg=4770.77, 90=7267, 99=19935, 99.9=49887, 99.99=88575] [UPDATE: Count=284270, Max=12639, Min=330, Avg=2276.39, 90=3433, 99=5827, 99.9=8639, 99.99=10551] 
2023-06-05 12:56:23:064 1440 sec: 80830318 operations; 55993.1 current ops/sec; [READ: Count=279951, Max=185087, Min=392, Avg=4888.4, 90=7143, 99=22447, 99.9=96063, 99.99=140031] [UPDATE: Count=280043, Max=14863, Min=327, Avg=2250.07, 90=3407, 99=5911, 99.9=8431, 99.99=10127] 
2023-06-05 12:56:33:064 1450 sec: 81398773 operations; 56845.5 current ops/sec; [READ: Count=283917, Max=141183, Min=391, Avg=4767.45, 90=7255, 99=17119, 99.9=59647, 99.99=133887] [UPDATE: Count=284436, Max=13095, Min=315, Avg=2269.03, 90=3431, 99=5475, 99.9=8143, 99.99=10071] 
2023-06-05 12:56:43:064 1460 sec: 81964580 operations; 56580.7 current ops/sec; [READ: Count=282676, Max=64223, Min=316, Avg=4814.19, 90=7531, 99=17887, 99.9=33855, 99.99=54815] [UPDATE: Count=282662, Max=28847, Min=305, Avg=2256.25, 90=3411, 99=5491, 99.9=8703, 99.99=26271] 
2023-06-05 12:56:53:064 1470 sec: 82526553 operations; 56197.3 current ops/sec; [READ: Count=280865, Max=96447, Min=395, Avg=4838.68, 90=7403, 99=20943, 99.9=53439, 99.99=64767] [UPDATE: Count=281566, Max=23375, Min=327, Avg=2269.83, 90=3439, 99=5767, 99.9=8295, 99.99=11575] 
2023-06-05 12:57:03:064 1480 sec: 83081543 operations; 55499 current ops/sec; [READ: Count=277384, Max=284159, Min=409, Avg=5005.56, 90=6875, 99=20799, 99.9=161663, 99.99=208255] [UPDATE: Count=277860, Max=19167, Min=307, Avg=2195.77, 90=3337, 99=5387, 99.9=8027, 99.99=10087] 
2023-06-05 12:57:13:064 1490 sec: 83638623 operations; 55708 current ops/sec; [READ: Count=278944, Max=190975, Min=377, Avg=4929.89, 90=7043, 99=16047, 99.9=149247, 99.99=166527] [UPDATE: Count=277899, Max=11575, Min=297, Avg=2241.19, 90=3399, 99=5271, 99.9=7647, 99.99=9527] 
2023-06-05 12:57:23:064 1500 sec: 84206875 operations; 56825.2 current ops/sec; [READ: Count=283453, Max=140671, Min=363, Avg=4769.2, 90=7171, 99=14887, 99.9=81279, 99.99=110847] [UPDATE: Count=284835, Max=12503, Min=332, Avg=2271.67, 90=3417, 99=5319, 99.9=7483, 99.99=9183] 
2023-06-05 12:57:33:064 1510 sec: 84770525 operations; 56365 current ops/sec; [READ: Count=281440, Max=324095, Min=366, Avg=4812.49, 90=7063, 99=16991, 99.9=85631, 99.99=218111] [UPDATE: Count=282207, Max=17327, Min=314, Avg=2278.96, 90=3413, 99=5303, 99.9=7867, 99.99=9983] 
2023-06-05 12:57:43:064 1520 sec: 85330820 operations; 56029.5 current ops/sec; [READ: Count=280043, Max=134015, Min=410, Avg=4833.03, 90=7163, 99=19935, 99.9=79935, 99.99=91647] [UPDATE: Count=280234, Max=13159, Min=300, Avg=2298.21, 90=3433, 99=5675, 99.9=8511, 99.99=10687] 
2023-06-05 12:57:53:064 1530 sec: 85888970 operations; 55815 current ops/sec; [READ: Count=279128, Max=100799, Min=421, Avg=4875.98, 90=7219, 99=21119, 99.9=70911, 99.99=85375] [UPDATE: Count=278924, Max=30287, Min=312, Avg=2286.35, 90=3411, 99=6051, 99.9=9335, 99.99=14975] 
2023-06-05 12:58:03:064 1540 sec: 86448707 operations; 55973.7 current ops/sec; [READ: Count=279840, Max=70463, Min=413, Avg=4839.73, 90=7379, 99=20479, 99.9=47199, 99.99=59295] [UPDATE: Count=279923, Max=18463, Min=327, Avg=2303.39, 90=3435, 99=5935, 99.9=8839, 99.99=10911] 
2023-06-05 12:58:13:064 1550 sec: 87004128 operations; 55542.1 current ops/sec; [READ: Count=277550, Max=140415, Min=385, Avg=4894.36, 90=7259, 99=24335, 99.9=50719, 99.99=116863] [UPDATE: Count=277899, Max=13151, Min=303, Avg=2303.78, 90=3443, 99=5927, 99.9=8911, 99.99=10791] 
2023-06-05 12:58:23:064 1560 sec: 87559422 operations; 55529.4 current ops/sec; [READ: Count=277710, Max=122303, Min=397, Avg=4915.87, 90=7119, 99=24751, 99.9=95743, 99.99=117247] [UPDATE: Count=277674, Max=14119, Min=322, Avg=2283.8, 90=3413, 99=6011, 99.9=9319, 99.99=11231] 
2023-06-05 12:58:33:064 1570 sec: 88098908 operations; 53948.6 current ops/sec; [READ: Count=270084, Max=214015, Min=421, Avg=5129.33, 90=7155, 99=26831, 99.9=131967, 99.99=149503] [UPDATE: Count=269416, Max=14751, Min=320, Avg=2274.32, 90=3399, 99=6575, 99.9=9567, 99.99=11695] 
2023-06-05 12:58:43:064 1580 sec: 88646710 operations; 54780.2 current ops/sec; [READ: Count=274106, Max=116735, Min=382, Avg=5002.3, 90=7291, 99=25887, 99.9=79871, 99.99=100735] [UPDATE: Count=273677, Max=16143, Min=332, Avg=2296.72, 90=3447, 99=6519, 99.9=9375, 99.99=11663] 
2023-06-05 12:58:53:064 1590 sec: 89189296 operations; 54258.6 current ops/sec; [READ: Count=271672, Max=78271, Min=378, Avg=5041.7, 90=7419, 99=25311, 99.9=57663, 99.99=65343] [UPDATE: Count=270516, Max=26575, Min=315, Avg=2326.17, 90=3473, 99=6683, 99.9=9647, 99.99=14503] 
2023-06-05 12:59:03:064 1600 sec: 89723565 operations; 53426.9 current ops/sec; [READ: Count=267241, Max=272127, Min=379, Avg=5189.71, 90=7087, 99=25695, 99.9=130431, 99.99=201983] [UPDATE: Count=267356, Max=19135, Min=311, Avg=2286.73, 90=3415, 99=6435, 99.9=9239, 99.99=11527] 
2023-06-05 12:59:13:064 1610 sec: 90229630 operations; 50606.5 current ops/sec; [READ: Count=253312, Max=590335, Min=382, Avg=5697.97, 90=6359, 99=24223, 99.9=323839, 99.99=465407] [UPDATE: Count=252071, Max=27327, Min=292, Avg=2195.75, 90=3267, 99=5955, 99.9=9343, 99.99=16703] 
2023-06-05 12:59:23:064 1620 sec: 90761105 operations; 53147.5 current ops/sec; [READ: Count=265829, Max=454399, Min=371, Avg=5305.38, 90=6479, 99=16911, 99.9=323839, 99.99=335359] [UPDATE: Count=266294, Max=17007, Min=323, Avg=2222.18, 90=3297, 99=5095, 99.9=7815, 99.99=10151] 
2023-06-05 12:59:33:064 1630 sec: 91326027 operations; 56492.2 current ops/sec; [READ: Count=281839, Max=120447, Min=419, Avg=4748.18, 90=7111, 99=14591, 99.9=51583, 99.99=74943] [UPDATE: Count=283113, Max=11879, Min=326, Avg=2334.08, 90=3437, 99=5367, 99.9=8047, 99.99=10167] 
2023-06-05 12:59:43:064 1640 sec: 91895600 operations; 56957.3 current ops/sec; [READ: Count=285178, Max=32687, Min=431, Avg=4675.8, 90=7131, 99=13007, 99.9=24207, 99.99=28687] [UPDATE: Count=283668, Max=24959, Min=301, Avg=2346.13, 90=3439, 99=5391, 99.9=8759, 99.99=15479] 
2023-06-05 12:59:53:064 1650 sec: 92456631 operations; 56103.1 current ops/sec; [READ: Count=281053, Max=124991, Min=400, Avg=4782.23, 90=7055, 99=15999, 99.9=65983, 99.99=97727] [UPDATE: Count=280694, Max=27599, Min=322, Avg=2332.09, 90=3427, 99=5507, 99.9=8767, 99.99=12951] 
2023-06-05 13:00:03:064 1660 sec: 93020357 operations; 56372.6 current ops/sec; [READ: Count=281973, Max=91071, Min=410, Avg=4761.69, 90=7023, 99=14415, 99.9=78783, 99.99=85439] [UPDATE: Count=281709, Max=17263, Min=290, Avg=2330.15, 90=3419, 99=5331, 99.9=7867, 99.99=10591] 
2023-06-05 13:00:13:064 1670 sec: 93574680 operations; 55432.3 current ops/sec; [READ: Count=276659, Max=325375, Min=401, Avg=4876.64, 90=6971, 99=15743, 99.9=80703, 99.99=271871] [UPDATE: Count=277663, Max=11527, Min=304, Avg=2330.97, 90=3425, 99=5375, 99.9=7947, 99.99=9807] 
2023-06-05 13:00:23:064 1680 sec: 94133545 operations; 55886.5 current ops/sec; [READ: Count=279283, Max=193535, Min=373, Avg=4800.07, 90=7091, 99=14007, 99.9=55519, 99.99=156927] [UPDATE: Count=279582, Max=11327, Min=333, Avg=2364.45, 90=3447, 99=5319, 99.9=7691, 99.99=9567] 
2023-06-05 13:00:33:064 1690 sec: 94671716 operations; 53817.1 current ops/sec; [READ: Count=269839, Max=267775, Min=430, Avg=5056, 90=7179, 99=17567, 99.9=131455, 99.99=188671] [UPDATE: Count=268453, Max=14367, Min=337, Avg=2365.28, 90=3447, 99=5803, 99.9=8439, 99.99=10407] 
2023-06-05 13:00:43:064 1700 sec: 95228332 operations; 55661.6 current ops/sec; [READ: Count=278654, Max=81471, Min=408, Avg=4811.25, 90=7187, 99=15879, 99.9=46975, 99.99=56191] [UPDATE: Count=277771, Max=44543, Min=329, Avg=2367.76, 90=3459, 99=5639, 99.9=8919, 99.99=11191] 
2023-06-05 13:00:53:064 1710 sec: 95764160 operations; 53582.8 current ops/sec; [READ: Count=267564, Max=203391, Min=371, Avg=5122.3, 90=7155, 99=27039, 99.9=95615, 99.99=174079] [UPDATE: Count=268026, Max=18607, Min=329, Avg=2338.6, 90=3445, 99=6351, 99.9=9511, 99.99=12575] 
2023-06-05 13:01:03:064 1720 sec: 96305203 operations; 54104.3 current ops/sec; [READ: Count=269945, Max=236671, Min=389, Avg=5082.1, 90=6971, 99=22111, 99.9=103039, 99.99=192895] [UPDATE: Count=271613, Max=20079, Min=333, Avg=2317.23, 90=3403, 99=5695, 99.9=8919, 99.99=11511] 
2023-06-05 13:01:13:064 1730 sec: 96844991 operations; 53978.8 current ops/sec; [READ: Count=270161, Max=164735, Min=408, Avg=5066.35, 90=7019, 99=21727, 99.9=98495, 99.99=146687] [UPDATE: Count=269464, Max=19743, Min=306, Avg=2336.77, 90=3419, 99=5731, 99.9=8735, 99.99=10823] 
2023-06-05 13:01:23:064 1740 sec: 97385283 operations; 54029.2 current ops/sec; [READ: Count=270226, Max=162175, Min=406, Avg=5047.77, 90=7103, 99=20735, 99.9=84415, 99.99=117823] [UPDATE: Count=270188, Max=18223, Min=338, Avg=2348.9, 90=3461, 99=5851, 99.9=8559, 99.99=10647] 
2023-06-05 13:01:33:064 1750 sec: 97938807 operations; 55352.4 current ops/sec; [READ: Count=275872, Max=258943, Min=390, Avg=4881.3, 90=7123, 99=14799, 99.9=75391, 99.99=136831] [UPDATE: Count=277634, Max=18559, Min=328, Avg=2354.06, 90=3465, 99=5451, 99.9=8039, 99.99=10167] 
2023-06-05 13:01:43:064 1760 sec: 98501074 operations; 56226.7 current ops/sec; [READ: Count=281572, Max=51775, Min=395, Avg=4730.75, 90=7103, 99=13167, 99.9=33343, 99.99=39551] [UPDATE: Count=280626, Max=15367, Min=352, Avg=2375.77, 90=3477, 99=5291, 99.9=8071, 99.99=10351] 
2023-06-05 13:01:53:064 1770 sec: 99060386 operations; 55931.2 current ops/sec; [READ: Count=279370, Max=44415, Min=424, Avg=4772.33, 90=7103, 99=16591, 99.9=30847, 99.99=36639] [UPDATE: Count=279973, Max=25679, Min=333, Avg=2378.15, 90=3467, 99=5595, 99.9=8863, 99.99=11183] 
2023-06-05 13:02:03:064 1780 sec: 99616118 operations; 55573.2 current ops/sec; [READ: Count=277443, Max=113919, Min=414, Avg=4805.78, 90=7047, 99=16687, 99.9=33087, 99.99=99071] [UPDATE: Count=278194, Max=17807, Min=360, Avg=2390.26, 90=3463, 99=5623, 99.9=8879, 99.99=10911] 
2023-06-05 13:02:13:064 1790 sec: 100161906 operations; 54578.8 current ops/sec; [READ: Count=273055, Max=307711, Min=396, Avg=4964.1, 90=7007, 99=19071, 99.9=113151, 99.99=176255] [UPDATE: Count=272777, Max=12447, Min=307, Avg=2356.66, 90=3439, 99=5627, 99.9=8335, 99.99=10351] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:23:064 1800 sec: 100745146 operations; 58324 current ops/sec; [READ: Count=291662, Max=231167, Min=400, Avg=4634.33, 90=6303, 99=10807, 99.9=162047, 99.99=177151] [UPDATE: Count=291253, Max=21151, Min=314, Avg=2224.2, 90=3275, 99=4879, 99.9=8051, 99.99=13031] 
Still waiting for thread Thread-22 to complete. Workload status: true
2023-06-05 13:02:25:317 1802 sec: 100746726 operations; 701.29 current ops/sec; [READ: Count=817, Max=8855, Min=537, Avg=3723.28, 90=5795, 99=7563, 99.9=8743, 99.99=8855] [CLEANUP: Count=200, Max=2228223, Min=0, Avg=11136.95, 90=2, 99=6, 99.9=2228223, 99.99=2228223] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802252
[OVERALL], Throughput(ops/sec), 55900.465639655275
[TOTAL_GCS_PS_Scavenge], Count, 6545
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17306
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9602430736656139
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 71
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.00393951567261404
[TOTAL_GCs], Count, 6547
[TOTAL_GC_TIME], Time(ms), 17377
[TOTAL_GC_TIME_%], Time(%), 0.964182589338228
[READ], Operations, 50367205
[READ], AverageLatency(us), 4518.804654199096
[READ], MinLatency(us), 316
[READ], MaxLatency(us), 590335
[READ], 95thPercentileLatency(us), 7935
[READ], 99thPercentileLatency(us), 16087
[READ], Return=OK, 50367205
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11136.955
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2228223
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 6
[UPDATE], Operations, 50379521
[UPDATE], AverageLatency(us), 2192.4221064745734
[UPDATE], MinLatency(us), 281
[UPDATE], MaxLatency(us), 101951
[UPDATE], 95thPercentileLatency(us), 3711
[UPDATE], 99thPercentileLatency(us), 5351
[UPDATE], Return=OK, 50379521
