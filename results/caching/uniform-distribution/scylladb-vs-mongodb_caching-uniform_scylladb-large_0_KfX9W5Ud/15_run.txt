bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:27:769 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
2023-06-05 12:32:37:754 10 sec: 503638 operations; 50363.8 current ops/sec; [READ: Count=251316, Max=98111, Min=401, Avg=3910.16, 90=6019, 99=18783, 99.9=58079, 99.99=75391] [UPDATE: Count=253924, Max=93823, Min=341, Avg=2044, 90=2949, 99=7103, 99.9=47231, 99.99=69375] 
2023-06-05 12:32:47:754 20 sec: 1065932 operations; 56229.4 current ops/sec; [READ: Count=281087, Max=38527, Min=379, Avg=3720.49, 90=5755, 99=17327, 99.9=25727, 99.99=34783] [UPDATE: Count=280757, Max=17407, Min=312, Avg=1871.66, 90=2827, 99=5799, 99.9=8007, 99.99=9847] 
2023-06-05 12:32:57:754 30 sec: 1628456 operations; 56252.4 current ops/sec; [READ: Count=281081, Max=43871, Min=418, Avg=3843.75, 90=5951, 99=18191, 99.9=32175, 99.99=35967] [UPDATE: Count=281430, Max=21903, Min=328, Avg=1910.11, 90=2897, 99=5959, 99.9=8095, 99.99=10303] 
2023-06-05 12:33:07:754 40 sec: 2190593 operations; 56213.7 current ops/sec; [READ: Count=281085, Max=51359, Min=392, Avg=3923.46, 90=6111, 99=18223, 99.9=28975, 99.99=33439] [UPDATE: Count=280934, Max=11775, Min=327, Avg=1941.05, 90=2945, 99=5943, 99.9=7979, 99.99=9519] 
2023-06-05 12:33:17:754 50 sec: 2751476 operations; 56088.3 current ops/sec; [READ: Count=280059, Max=142463, Min=401, Avg=4534.13, 90=6707, 99=27951, 99.9=81407, 99.99=95103] [UPDATE: Count=281045, Max=13975, Min=330, Avg=1999.52, 90=3055, 99=6211, 99.9=8255, 99.99=9639] 
2023-06-05 12:33:27:754 60 sec: 3315805 operations; 56432.9 current ops/sec; [READ: Count=282300, Max=77631, Min=388, Avg=4281.51, 90=6539, 99=20879, 99.9=58751, 99.99=70911] [UPDATE: Count=282018, Max=14319, Min=327, Avg=2022.9, 90=3083, 99=6091, 99.9=8095, 99.99=9343] 
2023-06-05 12:33:37:754 70 sec: 3878368 operations; 56256.3 current ops/sec; [READ: Count=281085, Max=54655, Min=381, Avg=4159.94, 90=6559, 99=18879, 99.9=26735, 99.99=33151] [UPDATE: Count=280741, Max=30095, Min=310, Avg=2047.48, 90=3131, 99=6191, 99.9=8607, 99.99=15463] 
2023-06-05 12:33:47:754 80 sec: 4440616 operations; 56224.8 current ops/sec; [READ: Count=280225, Max=71167, Min=382, Avg=4238.95, 90=6647, 99=19039, 99.9=38495, 99.99=45055] [UPDATE: Count=282238, Max=22111, Min=325, Avg=2051.88, 90=3145, 99=6123, 99.9=8431, 99.99=14823] 
2023-06-05 12:33:57:754 90 sec: 5003155 operations; 56253.9 current ops/sec; [READ: Count=281471, Max=44607, Min=397, Avg=4171.92, 90=6631, 99=19023, 99.9=28351, 99.99=34367] [UPDATE: Count=281428, Max=18767, Min=314, Avg=2025.18, 90=3117, 99=5971, 99.9=8087, 99.99=11663] 
2023-06-05 12:34:07:754 100 sec: 5563103 operations; 55994.8 current ops/sec; [READ: Count=280010, Max=139775, Min=386, Avg=4357.83, 90=6735, 99=22415, 99.9=45535, 99.99=99647] [UPDATE: Count=280023, Max=13775, Min=324, Avg=2035.65, 90=3105, 99=6511, 99.9=8815, 99.99=10543] 
2023-06-05 12:34:17:754 110 sec: 6124797 operations; 56169.4 current ops/sec; [READ: Count=281293, Max=154879, Min=413, Avg=4627.95, 90=6567, 99=26079, 99.9=98303, 99.99=115135] [UPDATE: Count=280469, Max=13719, Min=334, Avg=2043.65, 90=3097, 99=6487, 99.9=8975, 99.99=10623] 
2023-06-05 12:34:27:754 120 sec: 6690292 operations; 56549.5 current ops/sec; [READ: Count=282899, Max=83199, Min=370, Avg=4389.65, 90=6755, 99=22671, 99.9=32143, 99.99=58751] [UPDATE: Count=282558, Max=18495, Min=328, Avg=2077.11, 90=3129, 99=6711, 99.9=9199, 99.99=10791] 
2023-06-05 12:34:37:754 130 sec: 7238134 operations; 54784.2 current ops/sec; [READ: Count=274438, Max=306687, Min=394, Avg=4940.39, 90=6895, 99=21983, 99.9=161791, 99.99=265215] [UPDATE: Count=273473, Max=14111, Min=313, Avg=2051.8, 90=3099, 99=6983, 99.9=9351, 99.99=11071] 
2023-06-05 12:34:47:754 140 sec: 7795885 operations; 55775.1 current ops/sec; [READ: Count=277927, Max=242687, Min=409, Avg=5002.27, 90=6755, 99=25663, 99.9=162047, 99.99=213759] [UPDATE: Count=279709, Max=18719, Min=319, Avg=2061.35, 90=3111, 99=6943, 99.9=9487, 99.99=11847] 
2023-06-05 12:34:57:754 150 sec: 8348821 operations; 55293.6 current ops/sec; [READ: Count=275510, Max=342271, Min=391, Avg=5096.84, 90=6403, 99=23183, 99.9=190591, 99.99=295423] [UPDATE: Count=277497, Max=18207, Min=330, Avg=2027.74, 90=3069, 99=6627, 99.9=9247, 99.99=11623] 
2023-06-05 12:35:07:754 160 sec: 8919548 operations; 57072.7 current ops/sec; [READ: Count=285387, Max=210943, Min=424, Avg=4793.04, 90=6535, 99=20303, 99.9=189951, 99.99=194559] [UPDATE: Count=285249, Max=12535, Min=328, Avg=2079.75, 90=3147, 99=5963, 99.9=8163, 99.99=9871] 
2023-06-05 12:35:17:754 170 sec: 9465279 operations; 54573.1 current ops/sec; [READ: Count=272565, Max=370431, Min=404, Avg=5209.03, 90=6319, 99=29135, 99.9=223743, 99.99=283391] [UPDATE: Count=273308, Max=12343, Min=326, Avg=2052.23, 90=3125, 99=5927, 99.9=8311, 99.99=10023] 
2023-06-05 12:35:27:754 180 sec: 10050359 operations; 58508 current ops/sec; [READ: Count=292696, Max=192383, Min=382, Avg=4546.42, 90=6423, 99=21647, 99.9=133503, 99.99=184319] [UPDATE: Count=292353, Max=12015, Min=332, Avg=2127.7, 90=3173, 99=5559, 99.9=8351, 99.99=10287] 
2023-06-05 12:35:37:754 190 sec: 10617300 operations; 56694.1 current ops/sec; [READ: Count=283195, Max=287999, Min=422, Avg=4627.71, 90=6087, 99=23519, 99.9=189183, 99.99=209151] [UPDATE: Count=283706, Max=14831, Min=331, Avg=2064.17, 90=3101, 99=5379, 99.9=8575, 99.99=10759] 
2023-06-05 12:35:47:754 200 sec: 11185876 operations; 56857.6 current ops/sec; [READ: Count=284624, Max=182015, Min=389, Avg=4546.6, 90=6179, 99=20879, 99.9=160895, 99.99=167807] [UPDATE: Count=283790, Max=17407, Min=317, Avg=2087.49, 90=3123, 99=5475, 99.9=8599, 99.99=10967] 
2023-06-05 12:35:57:754 210 sec: 11753541 operations; 56766.5 current ops/sec; [READ: Count=284072, Max=133759, Min=405, Avg=4180.77, 90=6111, 99=18959, 99.9=60767, 99.99=128319] [UPDATE: Count=283680, Max=16799, Min=338, Avg=2068.51, 90=3091, 99=5403, 99.9=8807, 99.99=11335] 
2023-06-05 12:36:07:754 220 sec: 12316030 operations; 56248.9 current ops/sec; [READ: Count=281511, Max=145791, Min=399, Avg=4093.94, 90=5899, 99=19023, 99.9=54719, 99.99=84543] [UPDATE: Count=280939, Max=13407, Min=302, Avg=2029.7, 90=3045, 99=5359, 99.9=8255, 99.99=10055] 
2023-06-05 12:36:17:754 230 sec: 12878703 operations; 56267.3 current ops/sec; [READ: Count=280669, Max=47647, Min=360, Avg=3732.6, 90=5579, 99=12407, 99.9=27007, 99.99=39967] [UPDATE: Count=281865, Max=14495, Min=315, Avg=1962.52, 90=2965, 99=4675, 99.9=7439, 99.99=9383] 
2023-06-05 12:36:27:757 240 sec: 13441225 operations; 56229.71 current ops/sec; [READ: Count=280605, Max=21359, Min=392, Avg=3512.19, 90=5379, 99=7631, 99.9=10695, 99.99=18303] [UPDATE: Count=281936, Max=11015, Min=332, Avg=1922.5, 90=2909, 99=4033, 99.9=5999, 99.99=7203] 
2023-06-05 12:36:37:754 250 sec: 14003705 operations; 56270.51 current ops/sec; [READ: Count=281141, Max=37279, Min=398, Avg=3569.91, 90=5475, 99=7955, 99.9=12335, 99.99=20223] [UPDATE: Count=281217, Max=11439, Min=325, Avg=1949.05, 90=2965, 99=4151, 99.9=6171, 99.99=8063] 
2023-06-05 12:36:47:754 260 sec: 14566201 operations; 56249.6 current ops/sec; [READ: Count=281027, Max=25887, Min=403, Avg=3550.2, 90=5463, 99=8139, 99.9=13231, 99.99=21695] [UPDATE: Count=281516, Max=19519, Min=314, Avg=1937.63, 90=2951, 99=4147, 99.9=6375, 99.99=9551] 
2023-06-05 12:36:57:754 270 sec: 15128694 operations; 56249.3 current ops/sec; [READ: Count=280730, Max=29887, Min=389, Avg=3602.95, 90=5559, 99=8479, 99.9=14063, 99.99=25119] [UPDATE: Count=281880, Max=26383, Min=329, Avg=1955.09, 90=2993, 99=4295, 99.9=6439, 99.99=9727] 
2023-06-05 12:37:07:754 280 sec: 15691187 operations; 56249.3 current ops/sec; [READ: Count=280936, Max=25903, Min=404, Avg=3527.27, 90=5455, 99=8271, 99.9=14887, 99.99=21823] [UPDATE: Count=281546, Max=13311, Min=331, Avg=1916.73, 90=2947, 99=4239, 99.9=6371, 99.99=8823] 
2023-06-05 12:37:17:754 290 sec: 16253718 operations; 56253.1 current ops/sec; [READ: Count=281525, Max=99711, Min=407, Avg=3576.52, 90=5491, 99=8591, 99.9=19039, 99.99=41983] [UPDATE: Count=280991, Max=11551, Min=329, Avg=1924.62, 90=2947, 99=4255, 99.9=6475, 99.99=8559] 
2023-06-05 12:37:27:754 300 sec: 16816223 operations; 56250.5 current ops/sec; [READ: Count=281096, Max=30191, Min=426, Avg=3493.86, 90=5383, 99=8031, 99.9=11703, 99.99=18623] [UPDATE: Count=281293, Max=10575, Min=311, Avg=1902.33, 90=2913, 99=4119, 99.9=6019, 99.99=7275] 
2023-06-05 12:37:37:754 310 sec: 17378721 operations; 56249.8 current ops/sec; [READ: Count=281092, Max=89471, Min=400, Avg=3523.91, 90=5363, 99=8839, 99.9=24799, 99.99=51423] [UPDATE: Count=281517, Max=11999, Min=308, Avg=1887.67, 90=2887, 99=4283, 99.9=6995, 99.99=8935] 
2023-06-05 12:37:47:754 320 sec: 17941182 operations; 56246.1 current ops/sec; [READ: Count=281596, Max=28431, Min=370, Avg=3441.96, 90=5275, 99=8831, 99.9=19743, 99.99=23711] [UPDATE: Count=280883, Max=21295, Min=330, Avg=1858.21, 90=2825, 99=4311, 99.9=7587, 99.99=10575] 
2023-06-05 12:37:57:754 330 sec: 18503722 operations; 56254 current ops/sec; [READ: Count=280989, Max=31071, Min=386, Avg=3419.53, 90=5251, 99=9423, 99.9=21503, 99.99=25103] [UPDATE: Count=281345, Max=19055, Min=306, Avg=1840.44, 90=2785, 99=4455, 99.9=8159, 99.99=12327] 
2023-06-05 12:38:07:754 340 sec: 19066195 operations; 56247.3 current ops/sec; [READ: Count=281401, Max=29759, Min=381, Avg=3418.44, 90=5231, 99=9247, 99.9=21455, 99.99=25215] [UPDATE: Count=281155, Max=15583, Min=334, Avg=1841.75, 90=2783, 99=4335, 99.9=7715, 99.99=10207] 
2023-06-05 12:38:17:754 350 sec: 19628730 operations; 56253.5 current ops/sec; [READ: Count=281235, Max=27263, Min=387, Avg=3350.57, 90=5107, 99=7899, 99.9=19071, 99.99=22735] [UPDATE: Count=281393, Max=13767, Min=325, Avg=1829.4, 90=2763, 99=4035, 99.9=6235, 99.99=7943] 
2023-06-05 12:38:27:754 360 sec: 20191144 operations; 56241.4 current ops/sec; [READ: Count=280824, Max=15215, Min=368, Avg=3296, 90=5063, 99=7331, 99.9=9511, 99.99=12063] [UPDATE: Count=281575, Max=8423, Min=341, Avg=1822.57, 90=2757, 99=3943, 99.9=5903, 99.99=7131] 
2023-06-05 12:38:37:754 370 sec: 20753732 operations; 56258.8 current ops/sec; [READ: Count=280354, Max=48351, Min=380, Avg=3302.53, 90=5075, 99=7571, 99.9=11807, 99.99=27727] [UPDATE: Count=282228, Max=12487, Min=325, Avg=1816.64, 90=2757, 99=3973, 99.9=6303, 99.99=8215] 
2023-06-05 12:38:47:754 380 sec: 21316231 operations; 56249.9 current ops/sec; [READ: Count=282168, Max=20239, Min=398, Avg=3318.74, 90=5107, 99=7507, 99.9=10495, 99.99=14663] [UPDATE: Count=280332, Max=17471, Min=323, Avg=1827.97, 90=2777, 99=3971, 99.9=6155, 99.99=12839] 
2023-06-05 12:38:57:754 390 sec: 21878711 operations; 56248 current ops/sec; [READ: Count=281396, Max=25983, Min=380, Avg=3385.58, 90=5219, 99=7647, 99.9=10535, 99.99=15887] [UPDATE: Count=281089, Max=18127, Min=321, Avg=1854.89, 90=2827, 99=4019, 99.9=6163, 99.99=10143] 
2023-06-05 12:39:07:754 400 sec: 22441180 operations; 56246.9 current ops/sec; [READ: Count=280409, Max=24847, Min=364, Avg=3498.27, 90=5399, 99=8071, 99.9=13343, 99.99=20287] [UPDATE: Count=282071, Max=12215, Min=318, Avg=1901.39, 90=2905, 99=4167, 99.9=6271, 99.99=8551] 
2023-06-05 12:39:17:754 410 sec: 23003696 operations; 56251.6 current ops/sec; [READ: Count=281052, Max=27711, Min=377, Avg=3522.49, 90=5447, 99=8083, 99.9=11415, 99.99=18015] [UPDATE: Count=281431, Max=18415, Min=316, Avg=1910.76, 90=2927, 99=4151, 99.9=6219, 99.99=8847] 
2023-06-05 12:39:27:754 420 sec: 23566179 operations; 56248.3 current ops/sec; [READ: Count=281792, Max=23039, Min=372, Avg=3586.42, 90=5535, 99=8215, 99.9=11327, 99.99=16079] [UPDATE: Count=280593, Max=10623, Min=315, Avg=1940.24, 90=2961, 99=4219, 99.9=6247, 99.99=7619] 
2023-06-05 12:39:37:754 430 sec: 24128691 operations; 56251.2 current ops/sec; [READ: Count=281444, Max=20511, Min=401, Avg=3617.14, 90=5599, 99=8319, 99.9=11247, 99.99=15007] [UPDATE: Count=281047, Max=11895, Min=327, Avg=1949.77, 90=2997, 99=4243, 99.9=6047, 99.99=7547] 
2023-06-05 12:39:47:754 440 sec: 24691208 operations; 56251.7 current ops/sec; [READ: Count=280655, Max=21503, Min=391, Avg=3586.34, 90=5547, 99=8079, 99.9=11247, 99.99=16623] [UPDATE: Count=281977, Max=17967, Min=325, Avg=1942.16, 90=2981, 99=4167, 99.9=6183, 99.99=7867] 
2023-06-05 12:39:57:754 450 sec: 25253677 operations; 56246.9 current ops/sec; [READ: Count=281558, Max=26943, Min=406, Avg=3647.28, 90=5647, 99=8895, 99.9=16879, 99.99=22639] [UPDATE: Count=280946, Max=26527, Min=302, Avg=1956.46, 90=3001, 99=4379, 99.9=6907, 99.99=10791] 
2023-06-05 12:40:07:754 460 sec: 25815987 operations; 56231 current ops/sec; [READ: Count=280695, Max=44255, Min=399, Avg=3785.67, 90=5743, 99=11359, 99.9=30015, 99.99=36063] [UPDATE: Count=281582, Max=12103, Min=318, Avg=1974.65, 90=3017, 99=4655, 99.9=7395, 99.99=9223] 
2023-06-05 12:40:17:754 470 sec: 26373937 operations; 55795 current ops/sec; [READ: Count=278598, Max=277759, Min=399, Avg=4660.92, 90=6443, 99=24895, 99.9=140159, 99.99=230527] [UPDATE: Count=279616, Max=12759, Min=343, Avg=2095.39, 90=3173, 99=6183, 99.9=8975, 99.99=10639] 
2023-06-05 12:40:27:754 480 sec: 26941185 operations; 56724.8 current ops/sec; [READ: Count=284512, Max=231295, Min=390, Avg=4050.31, 90=5759, 99=12535, 99.9=100607, 99.99=120447] [UPDATE: Count=282677, Max=25759, Min=320, Avg=1998.56, 90=3025, 99=4707, 99.9=7931, 99.99=9951] 
2023-06-05 12:40:37:754 490 sec: 27503635 operations; 56245 current ops/sec; [READ: Count=281061, Max=32799, Min=394, Avg=3639.78, 90=5607, 99=9135, 99.9=17599, 99.99=25023] [UPDATE: Count=281331, Max=25343, Min=330, Avg=1944.39, 90=2967, 99=4199, 99.9=6851, 99.99=15255] 
2023-06-05 12:40:47:754 500 sec: 28066202 operations; 56256.7 current ops/sec; [READ: Count=281444, Max=38847, Min=390, Avg=3606.22, 90=5583, 99=8799, 99.9=17135, 99.99=28335] [UPDATE: Count=281028, Max=21247, Min=325, Avg=1927.94, 90=2957, 99=4163, 99.9=6607, 99.99=10111] 
2023-06-05 12:40:57:754 510 sec: 28628671 operations; 56246.9 current ops/sec; [READ: Count=281244, Max=79295, Min=406, Avg=3680.19, 90=5655, 99=9431, 99.9=31295, 99.99=43295] [UPDATE: Count=281211, Max=27215, Min=323, Avg=1942.95, 90=2981, 99=4471, 99.9=7375, 99.99=11047] 
2023-06-05 12:41:07:754 520 sec: 29191146 operations; 56247.5 current ops/sec; [READ: Count=280631, Max=23279, Min=408, Avg=3649.61, 90=5679, 99=8647, 99.9=14151, 99.99=20319] [UPDATE: Count=281906, Max=16655, Min=314, Avg=1953.07, 90=2999, 99=4391, 99.9=6479, 99.99=8751] 
2023-06-05 12:41:17:754 530 sec: 29753684 operations; 56253.8 current ops/sec; [READ: Count=281523, Max=23503, Min=381, Avg=3679.1, 90=5699, 99=9063, 99.9=17487, 99.99=21247] [UPDATE: Count=280921, Max=12487, Min=317, Avg=1961.51, 90=3007, 99=4467, 99.9=6895, 99.99=8791] 
2023-06-05 12:41:27:754 540 sec: 30316149 operations; 56246.5 current ops/sec; [READ: Count=281441, Max=28127, Min=360, Avg=3743.2, 90=5795, 99=9191, 99.9=17887, 99.99=23903] [UPDATE: Count=280983, Max=12503, Min=328, Avg=1982.1, 90=3047, 99=4431, 99.9=6795, 99.99=9159] 
2023-06-05 12:41:37:754 550 sec: 30878580 operations; 56243.1 current ops/sec; [READ: Count=281132, Max=31903, Min=403, Avg=3811.27, 90=5863, 99=10503, 99.9=24223, 99.99=28959] [UPDATE: Count=281443, Max=12455, Min=326, Avg=1995.34, 90=3063, 99=4643, 99.9=7655, 99.99=9687] 
2023-06-05 12:41:47:754 560 sec: 31433720 operations; 55514 current ops/sec; [READ: Count=277311, Max=353535, Min=389, Avg=4188.32, 90=5803, 99=12591, 99.9=161663, 99.99=251007] [UPDATE: Count=277842, Max=17887, Min=328, Avg=1981.04, 90=3039, 99=4991, 99.9=8687, 99.99=11415] 
2023-06-05 12:41:57:754 570 sec: 31980772 operations; 54705.2 current ops/sec; [READ: Count=273144, Max=414975, Min=415, Avg=5004.29, 90=5711, 99=14207, 99.9=229247, 99.99=372991] [UPDATE: Count=273948, Max=19023, Min=331, Avg=1963.69, 90=3013, 99=4699, 99.9=7927, 99.99=10695] 
2023-06-05 12:42:07:754 580 sec: 32537567 operations; 55679.5 current ops/sec; [READ: Count=278489, Max=316927, Min=413, Avg=4979.15, 90=5987, 99=29151, 99.9=227327, 99.99=278783] [UPDATE: Count=277957, Max=23407, Min=312, Avg=2029.45, 90=3099, 99=4959, 99.9=8279, 99.99=11655] 
2023-06-05 12:42:17:754 590 sec: 33046358 operations; 50879.1 current ops/sec; [READ: Count=254215, Max=553983, Min=332, Avg=5707.92, 90=7539, 99=33087, 99.9=214911, 99.99=327679] [UPDATE: Count=254976, Max=16239, Min=309, Avg=2119.97, 90=3291, 99=6739, 99.9=8975, 99.99=10951] 
2023-06-05 12:42:27:754 600 sec: 33551922 operations; 50556.4 current ops/sec; [READ: Count=252773, Max=354559, Min=391, Avg=5835.86, 90=6695, 99=37535, 99.9=325887, 99.99=329727] [UPDATE: Count=252675, Max=13231, Min=313, Avg=2076.11, 90=3227, 99=6155, 99.9=8647, 99.99=10623] 
2023-06-05 12:42:37:754 610 sec: 34097666 operations; 54574.4 current ops/sec; [READ: Count=272615, Max=327423, Min=396, Avg=5191.87, 90=6863, 99=33535, 99.9=163327, 99.99=321791] [UPDATE: Count=273278, Max=11935, Min=321, Avg=2147.22, 90=3305, 99=6019, 99.9=8479, 99.99=10191] 
2023-06-05 12:42:47:754 620 sec: 34653002 operations; 55533.6 current ops/sec; [READ: Count=278021, Max=170367, Min=361, Avg=5001.02, 90=7247, 99=28991, 99.9=134783, 99.99=161023] [UPDATE: Count=277289, Max=17951, Min=329, Avg=2200.59, 90=3369, 99=6231, 99.9=8367, 99.99=10359] 
2023-06-05 12:42:57:754 630 sec: 35220847 operations; 56784.5 current ops/sec; [READ: Count=284212, Max=254207, Min=403, Avg=4902.59, 90=6551, 99=32287, 99.9=135679, 99.99=155391] [UPDATE: Count=283689, Max=27087, Min=338, Avg=2132.53, 90=3249, 99=5507, 99.9=8139, 99.99=10943] 
2023-06-05 12:43:07:754 640 sec: 35794251 operations; 57340.4 current ops/sec; [READ: Count=287168, Max=152831, Min=419, Avg=4786.7, 90=6819, 99=19855, 99.9=115647, 99.99=134015] [UPDATE: Count=286244, Max=12543, Min=320, Avg=2182.85, 90=3313, 99=5595, 99.9=8159, 99.99=9967] 
2023-06-05 12:43:17:754 650 sec: 36371564 operations; 57731.3 current ops/sec; [READ: Count=287938, Max=277247, Min=415, Avg=4747.97, 90=6639, 99=15991, 99.9=160767, 99.99=175743] [UPDATE: Count=289428, Max=19487, Min=332, Avg=2178.81, 90=3289, 99=5231, 99.9=7863, 99.99=9719] 
2023-06-05 12:43:27:754 660 sec: 36947894 operations; 57633 current ops/sec; [READ: Count=287787, Max=255103, Min=404, Avg=4730.49, 90=6767, 99=17791, 99.9=113471, 99.99=209407] [UPDATE: Count=288584, Max=18111, Min=327, Avg=2203.71, 90=3333, 99=5375, 99.9=8091, 99.99=10039] 
2023-06-05 12:43:37:754 670 sec: 37538797 operations; 59090.3 current ops/sec; [READ: Count=295320, Max=35935, Min=404, Avg=4477.92, 90=6935, 99=12151, 99.9=20879, 99.99=25183] [UPDATE: Count=295432, Max=11279, Min=335, Avg=2260.94, 90=3385, 99=4999, 99.9=7187, 99.99=8871] 
2023-06-05 12:43:47:754 680 sec: 38122526 operations; 58372.9 current ops/sec; [READ: Count=292231, Max=111359, Min=418, Avg=4521.66, 90=6867, 99=12895, 99.9=29263, 99.99=81087] [UPDATE: Count=291523, Max=17183, Min=321, Avg=2268.33, 90=3381, 99=5067, 99.9=7607, 99.99=9903] 
2023-06-05 12:43:57:754 690 sec: 38697332 operations; 57480.6 current ops/sec; [READ: Count=288288, Max=108415, Min=391, Avg=4636.78, 90=6715, 99=13727, 99.9=82815, 99.99=87871] [UPDATE: Count=286285, Max=28863, Min=334, Avg=2265.01, 90=3369, 99=5191, 99.9=8535, 99.99=11863] 
2023-06-05 12:44:07:754 700 sec: 39269567 operations; 57223.5 current ops/sec; [READ: Count=286151, Max=87743, Min=416, Avg=4626.52, 90=6823, 99=15079, 99.9=46207, 99.99=58239] [UPDATE: Count=286206, Max=13623, Min=321, Avg=2301.47, 90=3411, 99=5263, 99.9=8631, 99.99=10703] 
2023-06-05 12:44:17:754 710 sec: 39831374 operations; 56180.7 current ops/sec; [READ: Count=280643, Max=226943, Min=394, Avg=4747.91, 90=6759, 99=17583, 99.9=103743, 99.99=138111] [UPDATE: Count=281240, Max=14335, Min=335, Avg=2300.26, 90=3395, 99=5435, 99.9=8735, 99.99=10391] 
2023-06-05 12:44:27:754 720 sec: 40388201 operations; 55682.7 current ops/sec; [READ: Count=278623, Max=165247, Min=410, Avg=4849.67, 90=6895, 99=18479, 99.9=134015, 99.99=140543] [UPDATE: Count=278200, Max=13943, Min=308, Avg=2319.9, 90=3423, 99=5655, 99.9=8815, 99.99=10791] 
2023-06-05 12:44:37:754 730 sec: 40951729 operations; 56352.8 current ops/sec; [READ: Count=281264, Max=45119, Min=417, Avg=4740.93, 90=7027, 99=17759, 99.9=34175, 99.99=38495] [UPDATE: Count=282272, Max=14975, Min=343, Avg=2351.28, 90=3469, 99=5671, 99.9=8959, 99.99=10735] 
2023-06-05 12:44:47:754 740 sec: 41516013 operations; 56428.4 current ops/sec; [READ: Count=281789, Max=44127, Min=375, Avg=4734.12, 90=7031, 99=17999, 99.9=29967, 99.99=34367] [UPDATE: Count=282537, Max=18127, Min=326, Avg=2343.24, 90=3461, 99=5571, 99.9=8839, 99.99=11071] 
2023-06-05 12:44:57:754 750 sec: 42083326 operations; 56731.3 current ops/sec; [READ: Count=284136, Max=48895, Min=405, Avg=4687.04, 90=6971, 99=17487, 99.9=25791, 99.99=30607] [UPDATE: Count=283002, Max=20639, Min=336, Avg=2337.64, 90=3447, 99=5603, 99.9=8911, 99.99=11943] 
2023-06-05 12:45:07:754 760 sec: 42649841 operations; 56651.5 current ops/sec; [READ: Count=283349, Max=48223, Min=425, Avg=4681.24, 90=6875, 99=17679, 99.9=28143, 99.99=33151] [UPDATE: Count=283113, Max=13903, Min=323, Avg=2345.8, 90=3439, 99=5519, 99.9=8839, 99.99=10703] 
2023-06-05 12:45:17:754 770 sec: 43175423 operations; 52558.2 current ops/sec; [READ: Count=262711, Max=538111, Min=390, Avg=5300.8, 90=6643, 99=23055, 99.9=272383, 99.99=372735] [UPDATE: Count=262922, Max=13415, Min=329, Avg=2280.08, 90=3389, 99=5831, 99.9=9023, 99.99=10935] 
2023-06-05 12:45:27:754 780 sec: 43717345 operations; 54192.2 current ops/sec; [READ: Count=271284, Max=279551, Min=387, Avg=5148.48, 90=6355, 99=16719, 99.9=272383, 99.99=275967] [UPDATE: Count=270684, Max=14295, Min=329, Avg=2225.9, 90=3307, 99=5147, 99.9=7815, 99.99=9687] 
2023-06-05 12:45:37:754 790 sec: 44291243 operations; 57389.8 current ops/sec; [READ: Count=287513, Max=271103, Min=404, Avg=4660.05, 90=6851, 99=11615, 99.9=32239, 99.99=229503] [UPDATE: Count=286414, Max=13567, Min=340, Avg=2303.32, 90=3401, 99=4963, 99.9=7303, 99.99=9351] 
2023-06-05 12:45:47:754 800 sec: 44870522 operations; 57927.9 current ops/sec; [READ: Count=289657, Max=56287, Min=406, Avg=4556.58, 90=6899, 99=10807, 99.9=17935, 99.99=26351] [UPDATE: Count=289590, Max=17503, Min=328, Avg=2331.83, 90=3423, 99=4859, 99.9=7071, 99.99=9407] 
2023-06-05 12:45:57:754 810 sec: 45447248 operations; 57672.6 current ops/sec; [READ: Count=287996, Max=49695, Min=419, Avg=4554.9, 90=6855, 99=10855, 99.9=18239, 99.99=29887] [UPDATE: Count=288696, Max=25887, Min=341, Avg=2341.57, 90=3425, 99=4867, 99.9=6951, 99.99=9167] 
2023-06-05 12:46:07:754 820 sec: 46022396 operations; 57514.8 current ops/sec; [READ: Count=287459, Max=25791, Min=358, Avg=4542.21, 90=6799, 99=10383, 99.9=15127, 99.99=19471] [UPDATE: Count=287588, Max=12311, Min=333, Avg=2348.39, 90=3425, 99=4799, 99.9=6647, 99.99=8019] 
2023-06-05 12:46:17:754 830 sec: 46596518 operations; 57412.2 current ops/sec; [READ: Count=286444, Max=97663, Min=416, Avg=4536.82, 90=6779, 99=10495, 99.9=21071, 99.99=41599] [UPDATE: Count=287716, Max=12647, Min=340, Avg=2335.33, 90=3415, 99=4827, 99.9=6979, 99.99=9127] 
2023-06-05 12:46:27:754 840 sec: 47165485 operations; 56896.7 current ops/sec; [READ: Count=284251, Max=32095, Min=415, Avg=4569.04, 90=6775, 99=10127, 99.9=15639, 99.99=21679] [UPDATE: Count=284614, Max=16311, Min=330, Avg=2373.4, 90=3441, 99=4747, 99.9=6667, 99.99=8375] 
2023-06-05 12:46:37:754 850 sec: 47725448 operations; 55996.3 current ops/sec; [READ: Count=279695, Max=92031, Min=406, Avg=4711.65, 90=6839, 99=12871, 99.9=30015, 99.99=52831] [UPDATE: Count=280497, Max=13623, Min=311, Avg=2403.88, 90=3465, 99=5171, 99.9=8239, 99.99=10935] 
2023-06-05 12:46:47:754 860 sec: 48287809 operations; 56236.1 current ops/sec; [READ: Count=281408, Max=40639, Min=398, Avg=4686.11, 90=6851, 99=12015, 99.9=25407, 99.99=29967] [UPDATE: Count=280898, Max=18607, Min=334, Avg=2411.92, 90=3471, 99=5003, 99.9=8079, 99.99=10711] 
2023-06-05 12:46:57:754 870 sec: 48851350 operations; 56354.1 current ops/sec; [READ: Count=281818, Max=37087, Min=456, Avg=4674.07, 90=6847, 99=11631, 99.9=24831, 99.99=29199] [UPDATE: Count=281731, Max=17583, Min=331, Avg=2402.5, 90=3461, 99=4987, 99.9=7971, 99.99=11343] 
2023-06-05 12:47:07:754 880 sec: 49412448 operations; 56109.8 current ops/sec; [READ: Count=280398, Max=38911, Min=409, Avg=4713.05, 90=6951, 99=13543, 99.9=23599, 99.99=27983] [UPDATE: Count=280339, Max=17983, Min=339, Avg=2403.05, 90=3481, 99=5339, 99.9=8327, 99.99=11887] 
2023-06-05 12:47:17:754 890 sec: 49968681 operations; 55623.3 current ops/sec; [READ: Count=278247, Max=71935, Min=366, Avg=4785.4, 90=6919, 99=17215, 99.9=42175, 99.99=55199] [UPDATE: Count=278337, Max=17055, Min=340, Avg=2390.55, 90=3453, 99=5559, 99.9=8735, 99.99=10519] 
2023-06-05 12:47:27:754 900 sec: 50529250 operations; 56056.9 current ops/sec; [READ: Count=280062, Max=37823, Min=433, Avg=4738.85, 90=6907, 99=16751, 99.9=25311, 99.99=30079] [UPDATE: Count=280408, Max=14647, Min=330, Avg=2392.16, 90=3437, 99=5535, 99.9=8623, 99.99=10543] 
2023-06-05 12:47:37:754 910 sec: 51088686 operations; 55943.6 current ops/sec; [READ: Count=279747, Max=37791, Min=443, Avg=4729.67, 90=6775, 99=14943, 99.9=26543, 99.99=31727] [UPDATE: Count=279755, Max=14127, Min=336, Avg=2413.9, 90=3451, 99=5223, 99.9=8287, 99.99=10487] 
2023-06-05 12:47:47:754 920 sec: 51651913 operations; 56322.7 current ops/sec; [READ: Count=281374, Max=40415, Min=432, Avg=4696.08, 90=6755, 99=13271, 99.9=25663, 99.99=29807] [UPDATE: Count=281917, Max=16543, Min=344, Avg=2402.13, 90=3427, 99=4979, 99.9=7455, 99.99=10199] 
2023-06-05 12:47:57:754 930 sec: 52215399 operations; 56348.6 current ops/sec; [READ: Count=281185, Max=36159, Min=396, Avg=4687.85, 90=6771, 99=12927, 99.9=23823, 99.99=27967] [UPDATE: Count=282226, Max=17087, Min=318, Avg=2409.21, 90=3449, 99=5039, 99.9=7239, 99.99=8839] 
2023-06-05 12:48:07:754 940 sec: 52779921 operations; 56452.2 current ops/sec; [READ: Count=282738, Max=29967, Min=418, Avg=4671.68, 90=6875, 99=11519, 99.9=21023, 99.99=25119] [UPDATE: Count=281710, Max=12431, Min=327, Avg=2401.5, 90=3457, 99=4991, 99.9=7139, 99.99=8559] 
2023-06-05 12:48:17:754 950 sec: 53347052 operations; 56713.1 current ops/sec; [READ: Count=283221, Max=28607, Min=386, Avg=4648.41, 90=6859, 99=11463, 99.9=20591, 99.99=24175] [UPDATE: Count=283876, Max=10391, Min=350, Avg=2386.84, 90=3449, 99=4899, 99.9=7067, 99.99=8527] 
2023-06-05 12:48:27:754 960 sec: 53917393 operations; 57034.1 current ops/sec; [READ: Count=285737, Max=28319, Min=413, Avg=4591.81, 90=6799, 99=10799, 99.9=19519, 99.99=24175] [UPDATE: Count=284711, Max=13143, Min=344, Avg=2371.72, 90=3425, 99=4867, 99.9=7187, 99.99=9303] 
2023-06-05 12:48:37:754 970 sec: 54485226 operations; 56783.3 current ops/sec; [READ: Count=283744, Max=46751, Min=448, Avg=4598.95, 90=6799, 99=11071, 99.9=23167, 99.99=35455] [UPDATE: Count=284090, Max=14935, Min=321, Avg=2363.76, 90=3421, 99=4927, 99.9=7243, 99.99=9263] 
2023-06-05 12:48:47:754 980 sec: 55047407 operations; 56218.1 current ops/sec; [READ: Count=280973, Max=122175, Min=436, Avg=4701.38, 90=6695, 99=12631, 99.9=69119, 99.99=79295] [UPDATE: Count=281246, Max=16271, Min=346, Avg=2340.38, 90=3383, 99=4983, 99.9=7703, 99.99=10231] 
2023-06-05 12:48:57:754 990 sec: 55611555 operations; 56414.8 current ops/sec; [READ: Count=282284, Max=85375, Min=412, Avg=4688.54, 90=6719, 99=11615, 99.9=60255, 99.99=73087] [UPDATE: Count=281875, Max=31791, Min=321, Avg=2353.41, 90=3403, 99=4923, 99.9=7515, 99.99=9879] 
2023-06-05 12:49:07:754 1000 sec: 56177925 operations; 56637 current ops/sec; [READ: Count=282906, Max=51551, Min=399, Avg=4655.73, 90=6831, 99=12327, 99.9=36159, 99.99=43263] [UPDATE: Count=283453, Max=11519, Min=334, Avg=2348.27, 90=3415, 99=4975, 99.9=7511, 99.99=9399] 
2023-06-05 12:49:17:753 1010 sec: 56745059 operations; 56713.4 current ops/sec; [READ: Count=283367, Max=41663, Min=409, Avg=4599.65, 90=6843, 99=11863, 99.9=25855, 99.99=30511] [UPDATE: Count=283697, Max=11119, Min=336, Avg=2335.6, 90=3411, 99=4979, 99.9=7135, 99.99=9111] 
2023-06-05 12:49:27:754 1020 sec: 57310109 operations; 56505 current ops/sec; [READ: Count=282711, Max=40095, Min=411, Avg=4533.01, 90=6783, 99=10455, 99.9=16703, 99.99=27311] [UPDATE: Count=282286, Max=15295, Min=342, Avg=2338.61, 90=3411, 99=4863, 99.9=6903, 99.99=8823] 
2023-06-05 12:49:37:754 1030 sec: 57873804 operations; 56369.5 current ops/sec; [READ: Count=281651, Max=30767, Min=376, Avg=4574.94, 90=6787, 99=10551, 99.9=19967, 99.99=25919] [UPDATE: Count=282115, Max=11423, Min=310, Avg=2363.35, 90=3423, 99=4863, 99.9=7127, 99.99=9119] 
2023-06-05 12:49:47:753 1040 sec: 58435258 operations; 56145.4 current ops/sec; [READ: Count=281020, Max=39295, Min=411, Avg=4639.08, 90=6855, 99=13215, 99.9=25311, 99.99=30031] [UPDATE: Count=280420, Max=17935, Min=327, Avg=2354.74, 90=3423, 99=5179, 99.9=7959, 99.99=10431] 
2023-06-05 12:49:57:754 1050 sec: 59000049 operations; 56479.1 current ops/sec; [READ: Count=282503, Max=41183, Min=415, Avg=4605.16, 90=6831, 99=11799, 99.9=24815, 99.99=30287] [UPDATE: Count=282378, Max=18431, Min=320, Avg=2344.43, 90=3399, 99=4979, 99.9=7743, 99.99=10447] 
2023-06-05 12:50:07:754 1060 sec: 59560690 operations; 56064.1 current ops/sec; [READ: Count=280563, Max=109951, Min=424, Avg=4642.73, 90=6883, 99=13023, 99.9=27279, 99.99=70591] [UPDATE: Count=279538, Max=20431, Min=322, Avg=2343.24, 90=3407, 99=5203, 99.9=8079, 99.99=12127] 
2023-06-05 12:50:17:753 1070 sec: 60100109 operations; 53941.9 current ops/sec; [READ: Count=269989, Max=200575, Min=373, Avg=5059.79, 90=6987, 99=22719, 99.9=113535, 99.99=143231] [UPDATE: Count=270086, Max=20559, Min=344, Avg=2330.39, 90=3419, 99=5715, 99.9=8527, 99.99=10927] 
2023-06-05 12:50:27:753 1080 sec: 60673091 operations; 57298.2 current ops/sec; [READ: Count=286663, Max=34527, Min=404, Avg=4626.64, 90=6907, 99=12559, 99.9=25919, 99.99=30591] [UPDATE: Count=286096, Max=14111, Min=344, Avg=2334.71, 90=3391, 99=5003, 99.9=7887, 99.99=9983] 
2023-06-05 12:50:37:754 1090 sec: 61238819 operations; 56572.8 current ops/sec; [READ: Count=283049, Max=47551, Min=398, Avg=4674.6, 90=6931, 99=13271, 99.9=26431, 99.99=31103] [UPDATE: Count=282687, Max=12895, Min=324, Avg=2363.19, 90=3421, 99=5179, 99.9=8067, 99.99=9911] 
2023-06-05 12:50:47:753 1100 sec: 61806987 operations; 56816.8 current ops/sec; [READ: Count=284428, Max=47839, Min=455, Avg=4625.75, 90=6899, 99=12279, 99.9=24831, 99.99=29343] [UPDATE: Count=283735, Max=18671, Min=329, Avg=2350.65, 90=3405, 99=5107, 99.9=7655, 99.99=11471] 
2023-06-05 12:50:57:754 1110 sec: 62371008 operations; 56402.1 current ops/sec; [READ: Count=281747, Max=118207, Min=417, Avg=4652.61, 90=6839, 99=12263, 99.9=57119, 99.99=75711] [UPDATE: Count=282372, Max=19263, Min=332, Avg=2335.8, 90=3391, 99=5011, 99.9=7903, 99.99=10863] 
2023-06-05 12:51:07:754 1120 sec: 62931519 operations; 56051.1 current ops/sec; [READ: Count=280612, Max=111359, Min=412, Avg=4728.19, 90=6807, 99=12215, 99.9=64287, 99.99=74495] [UPDATE: Count=279998, Max=46495, Min=315, Avg=2344.51, 90=3401, 99=4971, 99.9=8199, 99.99=44479] 
2023-06-05 12:51:17:754 1130 sec: 63491464 operations; 55994.5 current ops/sec; [READ: Count=280012, Max=197119, Min=397, Avg=4741.66, 90=6863, 99=15999, 99.9=56287, 99.99=122239] [UPDATE: Count=279924, Max=14311, Min=320, Avg=2325.04, 90=3385, 99=5459, 99.9=8847, 99.99=10743] 
2023-06-05 12:51:27:754 1140 sec: 64057054 operations; 56559 current ops/sec; [READ: Count=282845, Max=119295, Min=412, Avg=4703.05, 90=6867, 99=17311, 99.9=35135, 99.99=100927] [UPDATE: Count=282798, Max=16399, Min=322, Avg=2316.12, 90=3379, 99=5643, 99.9=9055, 99.99=10983] 
2023-06-05 12:51:37:754 1150 sec: 64623740 operations; 56668.6 current ops/sec; [READ: Count=283619, Max=38079, Min=412, Avg=4623.96, 90=6883, 99=16431, 99.9=26415, 99.99=30847] [UPDATE: Count=282892, Max=21791, Min=331, Avg=2319.24, 90=3387, 99=5631, 99.9=9231, 99.99=13823] 
2023-06-05 12:51:47:753 1160 sec: 65189989 operations; 56624.9 current ops/sec; [READ: Count=282719, Max=34463, Min=396, Avg=4518.82, 90=6767, 99=13895, 99.9=24591, 99.99=28223] [UPDATE: Count=283611, Max=16991, Min=319, Avg=2279.07, 90=3359, 99=5071, 99.9=7923, 99.99=10895] 
2023-06-05 12:51:57:754 1170 sec: 65752870 operations; 56288.1 current ops/sec; [READ: Count=281526, Max=32159, Min=375, Avg=4450.76, 90=6687, 99=13935, 99.9=23151, 99.99=27183] [UPDATE: Count=281274, Max=18927, Min=341, Avg=2259.24, 90=3339, 99=5163, 99.9=8087, 99.99=11007] 
2023-06-05 12:52:07:753 1180 sec: 66313478 operations; 56060.8 current ops/sec; [READ: Count=280681, Max=125311, Min=415, Avg=4524.33, 90=6751, 99=15279, 99.9=28511, 99.99=82239] [UPDATE: Count=279940, Max=29663, Min=331, Avg=2270.38, 90=3347, 99=5335, 99.9=8375, 99.99=10103] 
2023-06-05 12:52:17:753 1190 sec: 66877657 operations; 56417.9 current ops/sec; [READ: Count=282591, Max=126783, Min=401, Avg=4601.78, 90=6679, 99=14615, 99.9=82303, 99.99=87487] [UPDATE: Count=281593, Max=13671, Min=321, Avg=2251.98, 90=3329, 99=5043, 99.9=7963, 99.99=9807] 
2023-06-05 12:52:27:754 1200 sec: 67440896 operations; 56323.9 current ops/sec; [READ: Count=281896, Max=31135, Min=407, Avg=4328.22, 90=6587, 99=10391, 99.9=16447, 99.99=24607] [UPDATE: Count=281270, Max=20031, Min=343, Avg=2231.05, 90=3293, 99=4715, 99.9=6579, 99.99=8439] 
2023-06-05 12:52:37:754 1210 sec: 68003390 operations; 56249.4 current ops/sec; [READ: Count=281185, Max=31311, Min=409, Avg=4317.99, 90=6591, 99=10551, 99.9=16895, 99.99=25359] [UPDATE: Count=281335, Max=12943, Min=341, Avg=2214.19, 90=3275, 99=4755, 99.9=6831, 99.99=8607] 
2023-06-05 12:52:47:754 1220 sec: 68564847 operations; 56145.7 current ops/sec; [READ: Count=280390, Max=216703, Min=441, Avg=4373.75, 90=6687, 99=10959, 99.9=18559, 99.99=31359] [UPDATE: Count=281072, Max=230015, Min=327, Avg=2239.6, 90=3305, 99=4799, 99.9=6859, 99.99=12807] 
2023-06-05 12:52:57:754 1230 sec: 69127889 operations; 56304.2 current ops/sec; [READ: Count=281986, Max=230015, Min=428, Avg=4517.97, 90=6659, 99=11687, 99.9=61023, 99.99=167423] [UPDATE: Count=281184, Max=33951, Min=354, Avg=2238.3, 90=3311, 99=4863, 99.9=7155, 99.99=10831] 
2023-06-05 12:53:07:754 1240 sec: 69690917 operations; 56302.8 current ops/sec; [READ: Count=281792, Max=38687, Min=384, Avg=4410.02, 90=6723, 99=11231, 99.9=22911, 99.99=33343] [UPDATE: Count=280875, Max=12559, Min=329, Avg=2239.28, 90=3319, 99=4807, 99.9=7139, 99.99=9951] 
2023-06-05 12:53:17:754 1250 sec: 70253435 operations; 56251.8 current ops/sec; [READ: Count=281582, Max=34847, Min=427, Avg=4405.44, 90=6727, 99=11615, 99.9=19551, 99.99=28367] [UPDATE: Count=281127, Max=14495, Min=346, Avg=2249.41, 90=3335, 99=4879, 99.9=7303, 99.99=9807] 
2023-06-05 12:53:27:753 1260 sec: 70815768 operations; 56233.3 current ops/sec; [READ: Count=280715, Max=53663, Min=417, Avg=4429.17, 90=6723, 99=11575, 99.9=22943, 99.99=44159] [UPDATE: Count=281207, Max=23231, Min=334, Avg=2262.65, 90=3351, 99=4963, 99.9=8223, 99.99=12839] 
2023-06-05 12:53:37:754 1270 sec: 71371339 operations; 55557.1 current ops/sec; [READ: Count=277747, Max=309759, Min=415, Avg=4651.47, 90=6751, 99=14215, 99.9=134527, 99.99=169087] [UPDATE: Count=278383, Max=19071, Min=344, Avg=2249.97, 90=3341, 99=5275, 99.9=8543, 99.99=11039] 
2023-06-05 12:53:47:754 1280 sec: 71932637 operations; 56129.8 current ops/sec; [READ: Count=281032, Max=168831, Min=394, Avg=4736.31, 90=6703, 99=12223, 99.9=136703, 99.99=162687] [UPDATE: Count=280185, Max=17583, Min=324, Avg=2249.41, 90=3349, 99=5023, 99.9=8147, 99.99=10495] 
2023-06-05 12:53:57:753 1290 sec: 72501223 operations; 56858.6 current ops/sec; [READ: Count=283326, Max=115455, Min=426, Avg=4559.02, 90=6755, 99=13431, 99.9=51039, 99.99=90559] [UPDATE: Count=285335, Max=18207, Min=323, Avg=2253.76, 90=3349, 99=5087, 99.9=7967, 99.99=10671] 
2023-06-05 12:54:07:753 1300 sec: 73063968 operations; 56274.5 current ops/sec; [READ: Count=280815, Max=98751, Min=416, Avg=4577.19, 90=6715, 99=15695, 99.9=61791, 99.99=80383] [UPDATE: Count=281925, Max=35679, Min=338, Avg=2225.38, 90=3319, 99=5187, 99.9=8671, 99.99=11063] 
2023-06-05 12:54:17:753 1310 sec: 73617179 operations; 55321.1 current ops/sec; [READ: Count=276122, Max=262911, Min=407, Avg=4832.96, 90=6631, 99=21199, 99.9=160127, 99.99=169599] [UPDATE: Count=277089, Max=13383, Min=323, Avg=2200.99, 90=3281, 99=5687, 99.9=9399, 99.99=11383] 
2023-06-05 12:54:27:754 1320 sec: 74174571 operations; 55739.2 current ops/sec; [READ: Count=278895, Max=158719, Min=401, Avg=4899.02, 90=6971, 99=25119, 99.9=85055, 99.99=130687] [UPDATE: Count=278630, Max=18927, Min=335, Avg=2230.51, 90=3329, 99=6023, 99.9=9247, 99.99=11103] 
2023-06-05 12:54:37:753 1330 sec: 74737869 operations; 56329.8 current ops/sec; [READ: Count=281234, Max=80191, Min=378, Avg=4822.07, 90=7163, 99=23407, 99.9=56287, 99.99=66623] [UPDATE: Count=282009, Max=33279, Min=316, Avg=2252.47, 90=3369, 99=6059, 99.9=9351, 99.99=13591] 
2023-06-05 12:54:47:754 1340 sec: 75304507 operations; 56663.8 current ops/sec; [READ: Count=283508, Max=165247, Min=448, Avg=4758.57, 90=6999, 99=20639, 99.9=94463, 99.99=106687] [UPDATE: Count=283049, Max=19391, Min=334, Avg=2243.23, 90=3351, 99=5603, 99.9=8775, 99.99=10959] 
2023-06-05 12:54:57:753 1350 sec: 75873366 operations; 56885.9 current ops/sec; [READ: Count=284587, Max=133119, Min=431, Avg=4659.57, 90=7059, 99=15143, 99.9=39743, 99.99=100991] [UPDATE: Count=284338, Max=24319, Min=346, Avg=2262.96, 90=3381, 99=5259, 99.9=8011, 99.99=11495] 
2023-06-05 12:55:07:753 1360 sec: 76439002 operations; 56563.6 current ops/sec; [READ: Count=282874, Max=42687, Min=414, Avg=4587.82, 90=7019, 99=13823, 99.9=27135, 99.99=33375] [UPDATE: Count=282626, Max=19551, Min=300, Avg=2275.5, 90=3379, 99=5279, 99.9=8199, 99.99=13087] 
2023-06-05 12:55:17:753 1370 sec: 76984132 operations; 54513 current ops/sec; [READ: Count=272995, Max=134655, Min=405, Avg=5017.65, 90=7243, 99=25087, 99.9=82303, 99.99=92799] [UPDATE: Count=272285, Max=13031, Min=340, Avg=2288.61, 90=3423, 99=6115, 99.9=8887, 99.99=10519] 
2023-06-05 12:55:27:753 1380 sec: 77544754 operations; 56062.2 current ops/sec; [READ: Count=280107, Max=491263, Min=426, Avg=4835.85, 90=6975, 99=19871, 99.9=71615, 99.99=252415] [UPDATE: Count=280331, Max=13423, Min=342, Avg=2253.27, 90=3377, 99=5607, 99.9=8983, 99.99=10863] 
2023-06-05 12:55:37:753 1390 sec: 78067712 operations; 52295.8 current ops/sec; [READ: Count=261423, Max=544767, Min=396, Avg=5490.85, 90=6207, 99=16767, 99.9=361471, 99.99=422655] [UPDATE: Count=261653, Max=12455, Min=328, Avg=2091.73, 90=3179, 99=4999, 99.9=8359, 99.99=10159] 
2023-06-05 12:55:47:753 1400 sec: 78600247 operations; 53253.5 current ops/sec; [READ: Count=266408, Max=405503, Min=393, Avg=5393.78, 90=6399, 99=18975, 99.9=359935, 99.99=397567] [UPDATE: Count=266189, Max=18063, Min=328, Avg=2104.01, 90=3209, 99=5255, 99.9=8567, 99.99=10783] 
2023-06-05 12:55:57:754 1410 sec: 79152122 operations; 55187.5 current ops/sec; [READ: Count=276216, Max=848895, Min=401, Avg=5077.36, 90=6711, 99=16007, 99.9=377855, 99.99=452607] [UPDATE: Count=275669, Max=18111, Min=339, Avg=2161.43, 90=3287, 99=5295, 99.9=8239, 99.99=10175] 
2023-06-05 12:56:07:754 1420 sec: 79720529 operations; 56840.7 current ops/sec; [READ: Count=284149, Max=77823, Min=427, Avg=4764.3, 90=7347, 99=19599, 99.9=44479, 99.99=54271] [UPDATE: Count=284156, Max=13039, Min=330, Avg=2267.24, 90=3425, 99=5675, 99.9=8615, 99.99=10287] 
2023-06-05 12:56:17:753 1430 sec: 80287506 operations; 56697.7 current ops/sec; [READ: Count=284030, Max=173695, Min=425, Avg=4785.47, 90=7231, 99=20447, 99.9=60127, 99.99=102911] [UPDATE: Count=283015, Max=14927, Min=327, Avg=2251.97, 90=3403, 99=5735, 99.9=8479, 99.99=10359] 
2023-06-05 12:56:27:753 1440 sec: 80853985 operations; 56647.9 current ops/sec; [READ: Count=282456, Max=179711, Min=414, Avg=4825.79, 90=7107, 99=19903, 99.9=95935, 99.99=138495] [UPDATE: Count=284032, Max=11975, Min=308, Avg=2232.61, 90=3381, 99=5423, 99.9=8215, 99.99=10055] 
2023-06-05 12:56:37:753 1450 sec: 81423731 operations; 56974.6 current ops/sec; [READ: Count=285309, Max=93631, Min=437, Avg=4753.06, 90=7303, 99=17455, 99.9=46239, 99.99=82495] [UPDATE: Count=284397, Max=13135, Min=334, Avg=2247.57, 90=3403, 99=5443, 99.9=8139, 99.99=10175] 
2023-06-05 12:56:47:753 1460 sec: 81987843 operations; 56411.2 current ops/sec; [READ: Count=282341, Max=117119, Min=382, Avg=4831.3, 90=7503, 99=19503, 99.9=37983, 99.99=64767] [UPDATE: Count=281779, Max=17103, Min=333, Avg=2242.63, 90=3409, 99=5491, 99.9=8119, 99.99=10935] 
2023-06-05 12:56:57:753 1470 sec: 82547757 operations; 55991.4 current ops/sec; [READ: Count=280472, Max=286207, Min=429, Avg=4899.3, 90=7047, 99=21535, 99.9=123263, 99.99=183935] [UPDATE: Count=279400, Max=16223, Min=334, Avg=2210.7, 90=3361, 99=5439, 99.9=8247, 99.99=10831] 
2023-06-05 12:57:07:753 1480 sec: 83105774 operations; 55801.7 current ops/sec; [READ: Count=278670, Max=233343, Min=397, Avg=4955.58, 90=6895, 99=16783, 99.9=162431, 99.99=184959] [UPDATE: Count=279347, Max=13007, Min=324, Avg=2202.99, 90=3343, 99=5215, 99.9=7639, 99.99=9679] 
2023-06-05 12:57:17:754 1490 sec: 83668984 operations; 56321 current ops/sec; [READ: Count=281614, Max=171519, Min=393, Avg=4853.36, 90=7079, 99=15767, 99.9=130303, 99.99=140927] [UPDATE: Count=281601, Max=11975, Min=340, Avg=2242.76, 90=3385, 99=5259, 99.9=7495, 99.99=9551] 
2023-06-05 12:57:27:753 1500 sec: 84241079 operations; 57209.5 current ops/sec; [READ: Count=285773, Max=115775, Min=417, Avg=4701.73, 90=7151, 99=14207, 99.9=52671, 99.99=81343] [UPDATE: Count=286309, Max=17375, Min=336, Avg=2275.62, 90=3415, 99=5147, 99.9=7355, 99.99=9727] 
2023-06-05 12:57:37:753 1510 sec: 84800325 operations; 55924.6 current ops/sec; [READ: Count=279267, Max=322303, Min=377, Avg=4858.73, 90=7087, 99=19663, 99.9=84287, 99.99=217727] [UPDATE: Count=280071, Max=25679, Min=338, Avg=2283.88, 90=3403, 99=5655, 99.9=8935, 99.99=13751] 
2023-06-05 12:57:47:753 1520 sec: 85359485 operations; 55916 current ops/sec; [READ: Count=279239, Max=127359, Min=399, Avg=4877.18, 90=7127, 99=21551, 99.9=81151, 99.99=97471] [UPDATE: Count=279862, Max=52447, Min=321, Avg=2272.25, 90=3389, 99=5771, 99.9=9047, 99.99=45247] 
2023-06-05 12:57:57:753 1530 sec: 85921546 operations; 56206.1 current ops/sec; [READ: Count=280657, Max=101183, Min=399, Avg=4840.93, 90=7263, 99=20559, 99.9=63903, 99.99=76031] [UPDATE: Count=281412, Max=25551, Min=320, Avg=2275.32, 90=3397, 99=5743, 99.9=8775, 99.99=11599] 
2023-06-05 12:58:07:753 1540 sec: 86481156 operations; 55961 current ops/sec; [READ: Count=279485, Max=82495, Min=424, Avg=4855.18, 90=7371, 99=22495, 99.9=42559, 99.99=55231] [UPDATE: Count=280142, Max=12775, Min=326, Avg=2288.73, 90=3431, 99=5867, 99.9=8735, 99.99=10511] 
2023-06-05 12:58:17:753 1550 sec: 87039185 operations; 55802.9 current ops/sec; [READ: Count=278782, Max=142847, Min=397, Avg=4893.66, 90=7063, 99=24383, 99.9=103359, 99.99=118527] [UPDATE: Count=279080, Max=18927, Min=337, Avg=2271.05, 90=3399, 99=5775, 99.9=9319, 99.99=12367] 
2023-06-05 12:58:27:753 1560 sec: 87596985 operations; 55780 current ops/sec; [READ: Count=278948, Max=91711, Min=398, Avg=4873.42, 90=7219, 99=24399, 99.9=39711, 99.99=80127] [UPDATE: Count=278985, Max=14663, Min=336, Avg=2292.76, 90=3425, 99=6131, 99.9=9351, 99.99=11287] 
2023-06-05 12:58:37:753 1570 sec: 88134836 operations; 53785.1 current ops/sec; [READ: Count=268665, Max=208127, Min=371, Avg=5191.03, 90=7079, 99=27791, 99.9=132863, 99.99=147071] [UPDATE: Count=269201, Max=15703, Min=322, Avg=2246.36, 90=3383, 99=6395, 99.9=9407, 99.99=11567] 
2023-06-05 12:58:47:753 1580 sec: 88680763 operations; 54592.7 current ops/sec; [READ: Count=273582, Max=113407, Min=408, Avg=5023.22, 90=7399, 99=26031, 99.9=58111, 99.99=67967] [UPDATE: Count=271640, Max=29391, Min=322, Avg=2301.31, 90=3451, 99=6703, 99.9=9863, 99.99=15887] 
2023-06-05 12:58:57:753 1590 sec: 89225109 operations; 54434.6 current ops/sec; [READ: Count=271504, Max=174463, Min=411, Avg=5038.04, 90=7379, 99=25151, 99.9=51071, 99.99=83903] [UPDATE: Count=273037, Max=25999, Min=312, Avg=2308.75, 90=3451, 99=6479, 99.9=9503, 99.99=14191] 
2023-06-05 12:59:07:753 1600 sec: 89749419 operations; 52431 current ops/sec; [READ: Count=261699, Max=514559, Min=386, Avg=5375.69, 90=6675, 99=26479, 99.9=222591, 99.99=300031] [UPDATE: Count=262984, Max=24815, Min=306, Avg=2220.93, 90=3321, 99=6203, 99.9=9135, 99.99=11159] 
2023-06-05 12:59:17:753 1610 sec: 90262300 operations; 51288.1 current ops/sec; [READ: Count=256577, Max=589311, Min=358, Avg=5637.54, 90=6255, 99=19311, 99.9=325375, 99.99=419839] [UPDATE: Count=256408, Max=12327, Min=329, Avg=2165.5, 90=3233, 99=5099, 99.9=8075, 99.99=10223] 
2023-06-05 12:59:27:753 1620 sec: 90818263 operations; 55596.3 current ops/sec; [READ: Count=278266, Max=453887, Min=415, Avg=4941.38, 90=6819, 99=14671, 99.9=267263, 99.99=326399] [UPDATE: Count=277792, Max=12647, Min=277, Avg=2270.01, 90=3361, 99=5127, 99.9=7923, 99.99=9951] 
2023-06-05 12:59:37:753 1630 sec: 91387463 operations; 56920 current ops/sec; [READ: Count=284166, Max=113791, Min=385, Avg=4709.88, 90=7075, 99=13767, 99.9=53087, 99.99=76223] [UPDATE: Count=284885, Max=12695, Min=339, Avg=2319.44, 90=3415, 99=5243, 99.9=8023, 99.99=10415] 
2023-06-05 12:59:47:753 1640 sec: 91956487 operations; 56902.4 current ops/sec; [READ: Count=284872, Max=109631, Min=418, Avg=4704.9, 90=7067, 99=13791, 99.9=39679, 99.99=96575] [UPDATE: Count=284288, Max=17343, Min=326, Avg=2318.5, 90=3413, 99=5199, 99.9=8231, 99.99=10887] 
2023-06-05 12:59:57:753 1650 sec: 92520882 operations; 56439.5 current ops/sec; [READ: Count=282361, Max=119807, Min=399, Avg=4780.82, 90=6971, 99=15735, 99.9=80895, 99.99=87807] [UPDATE: Count=281800, Max=17375, Min=277, Avg=2303.42, 90=3395, 99=5259, 99.9=8503, 99.99=11503] 
2023-06-05 13:00:07:753 1660 sec: 93089000 operations; 56811.8 current ops/sec; [READ: Count=284142, Max=52191, Min=427, Avg=4697.17, 90=7099, 99=13743, 99.9=24783, 99.99=39423] [UPDATE: Count=284084, Max=14815, Min=338, Avg=2338.14, 90=3443, 99=5183, 99.9=7711, 99.99=9855] 
2023-06-05 13:00:17:753 1670 sec: 93639740 operations; 55074 current ops/sec; [READ: Count=274796, Max=333311, Min=384, Avg=4955.51, 90=6895, 99=17295, 99.9=104895, 99.99=272127] [UPDATE: Count=275907, Max=15599, Min=343, Avg=2311.54, 90=3385, 99=5367, 99.9=8063, 99.99=9975] 
2023-06-05 13:00:27:753 1680 sec: 94202375 operations; 56263.5 current ops/sec; [READ: Count=280908, Max=38751, Min=441, Avg=4742, 90=7171, 99=13423, 99.9=21983, 99.99=29839] [UPDATE: Count=281704, Max=12047, Min=347, Avg=2366.61, 90=3445, 99=5271, 99.9=7635, 99.99=9687] 
2023-06-05 13:00:37:753 1690 sec: 94744830 operations; 54245.5 current ops/sec; [READ: Count=271140, Max=268543, Min=427, Avg=5031.29, 90=7119, 99=18831, 99.9=137855, 99.99=190463] [UPDATE: Count=271420, Max=14247, Min=338, Avg=2340.33, 90=3435, 99=5751, 99.9=8895, 99.99=11031] 
2023-06-05 13:00:47:753 1700 sec: 95294478 operations; 54964.8 current ops/sec; [READ: Count=274185, Max=127807, Min=402, Avg=4924.99, 90=7227, 99=20607, 99.9=52351, 99.99=103807] [UPDATE: Count=275401, Max=24831, Min=348, Avg=2354.27, 90=3465, 99=5959, 99.9=9255, 99.99=11695] 
2023-06-05 13:00:57:753 1710 sec: 95832607 operations; 53812.9 current ops/sec; [READ: Count=269209, Max=223359, Min=415, Avg=5129.94, 90=6927, 99=27759, 99.9=135039, 99.99=192895] [UPDATE: Count=269024, Max=18335, Min=333, Avg=2297.09, 90=3391, 99=5895, 99.9=9303, 99.99=11823] 
2023-06-05 13:01:07:754 1720 sec: 96377245 operations; 54463.8 current ops/sec; [READ: Count=272416, Max=174207, Min=402, Avg=5020.84, 90=7007, 99=20975, 99.9=99007, 99.99=133759] [UPDATE: Count=272193, Max=18255, Min=344, Avg=2320.14, 90=3403, 99=5615, 99.9=8599, 99.99=10391] 
2023-06-05 13:01:17:753 1730 sec: 96920253 operations; 54300.8 current ops/sec; [READ: Count=271470, Max=172287, Min=405, Avg=5034.7, 90=7015, 99=21183, 99.9=85247, 99.99=135807] [UPDATE: Count=271624, Max=13295, Min=338, Avg=2330.39, 90=3427, 99=5719, 99.9=8631, 99.99=10831] 
2023-06-05 13:01:27:753 1740 sec: 97463449 operations; 54319.6 current ops/sec; [READ: Count=271471, Max=164863, Min=452, Avg=5031.05, 90=7039, 99=22159, 99.9=86527, 99.99=131007] [UPDATE: Count=271715, Max=12383, Min=320, Avg=2331.27, 90=3441, 99=5759, 99.9=8599, 99.99=10575] 
2023-06-05 13:01:37:753 1750 sec: 98030424 operations; 56697.5 current ops/sec; [READ: Count=283413, Max=47775, Min=417, Avg=4691.63, 90=7119, 99=12231, 99.9=26783, 99.99=38847] [UPDATE: Count=283446, Max=14727, Min=350, Avg=2361.68, 90=3467, 99=5103, 99.9=7315, 99.99=9879] 
2023-06-05 13:01:47:754 1760 sec: 98594190 operations; 56376.6 current ops/sec; [READ: Count=281873, Max=49631, Min=422, Avg=4732.96, 90=7055, 99=14591, 99.9=32495, 99.99=38911] [UPDATE: Count=281985, Max=18911, Min=343, Avg=2358.75, 90=3449, 99=5275, 99.9=8375, 99.99=11311] 
2023-06-05 13:01:57:753 1770 sec: 99153769 operations; 55957.9 current ops/sec; [READ: Count=279589, Max=43807, Min=416, Avg=4767.36, 90=7079, 99=16351, 99.9=29087, 99.99=34527] [UPDATE: Count=279888, Max=19055, Min=337, Avg=2379.65, 90=3467, 99=5523, 99.9=9047, 99.99=13279] 
2023-06-05 13:02:07:753 1780 sec: 99708100 operations; 55433.1 current ops/sec; [READ: Count=277461, Max=120255, Min=418, Avg=4837.47, 90=7075, 99=17839, 99.9=38207, 99.99=99007] [UPDATE: Count=276896, Max=27007, Min=346, Avg=2373.06, 90=3453, 99=5671, 99.9=8751, 99.99=10559] 
2023-06-05 13:02:17:753 1790 sec: 100251603 operations; 54350.3 current ops/sec; [READ: Count=270980, Max=274431, Min=377, Avg=5055.8, 90=6715, 99=17343, 99.9=162047, 99.99=199935] [UPDATE: Count=272590, Max=23935, Min=354, Avg=2303.39, 90=3361, 99=5267, 99.9=8107, 99.99=9895] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:27:754 1800 sec: 100965681 operations; 71407.8 current ops/sec; [READ: Count=356959, Max=184063, Min=369, Avg=3653.4, 90=5539, 99=8095, 99.9=43903, 99.99=163711] [UPDATE: Count=356815, Max=20751, Min=299, Avg=1947.78, 90=3027, 99=4207, 99.9=7031, 99.99=13055] 
Still waiting for thread Thread-50 to complete. Workload status: true
2023-06-05 13:02:30:001 1802 sec: 100967356 operations; 745.11 current ops/sec; [READ: Count=872, Max=7379, Min=414, Avg=3035.14, 90=4939, 99=6171, 99.9=7183, 99.99=7379] [CLEANUP: Count=200, Max=2226175, Min=0, Avg=11127.32, 90=1, 99=22, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802247
[OVERALL], Throughput(ops/sec), 56023.04012713019
[TOTAL_GCS_PS_Scavenge], Count, 6833
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17244
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9568055876913654
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 74
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004105985472579508
[TOTAL_GCs], Count, 6835
[TOTAL_GC_TIME], Time(ms), 17318
[TOTAL_GC_TIME_%], Time(%), 0.9609115731639448
[READ], Operations, 50475029
[READ], AverageLatency(us), 4509.0160776727835
[READ], MinLatency(us), 332
[READ], MaxLatency(us), 848895
[READ], 95thPercentileLatency(us), 7911
[READ], 99thPercentileLatency(us), 16055
[READ], Return=OK, 50475029
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11127.32
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 6
[CLEANUP], 99thPercentileLatency(us), 22
[UPDATE], Operations, 50492327
[UPDATE], AverageLatency(us), 2185.406984035416
[UPDATE], MinLatency(us), 277
[UPDATE], MaxLatency(us), 230015
[UPDATE], 95thPercentileLatency(us), 3699
[UPDATE], 99thPercentileLatency(us), 5283
[UPDATE], Return=OK, 50492327
