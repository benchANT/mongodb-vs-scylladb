bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-06-05 12:32:23:647 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:33:632 10 sec: 511728 operations; 51172.8 current ops/sec; [READ: Count=255906, Max=124415, Min=379, Avg=3442.55, 90=5427, 99=16943, 99.9=35199, 99.99=87039] [UPDATE: Count=257489, Max=123903, Min=325, Avg=1905.3, 90=2765, 99=7455, 99.9=30783, 99.99=78847] 
2023-06-05 12:32:43:632 20 sec: 1074223 operations; 56249.5 current ops/sec; [READ: Count=281737, Max=49215, Min=401, Avg=3664.97, 90=5603, 99=17359, 99.9=23103, 99.99=28143] [UPDATE: Count=280252, Max=11975, Min=312, Avg=1863.12, 90=2805, 99=5715, 99.9=7919, 99.99=9167] 
2023-06-05 12:32:53:632 30 sec: 1636597 operations; 56237.4 current ops/sec; [READ: Count=281576, Max=38015, Min=370, Avg=3842.95, 90=5951, 99=18079, 99.9=32511, 99.99=35903] [UPDATE: Count=280818, Max=23007, Min=339, Avg=1907.39, 90=2883, 99=5915, 99.9=8067, 99.99=10335] 
2023-06-05 12:33:03:632 40 sec: 2199051 operations; 56245.4 current ops/sec; [READ: Count=280751, Max=42207, Min=406, Avg=3867.78, 90=5983, 99=17903, 99.9=29535, 99.99=34175] [UPDATE: Count=281660, Max=16431, Min=325, Avg=1926.16, 90=2913, 99=5879, 99.9=8087, 99.99=9551] 
2023-06-05 12:33:13:632 50 sec: 2760421 operations; 56137 current ops/sec; [READ: Count=280833, Max=150783, Min=383, Avg=4315.7, 90=6611, 99=22671, 99.9=77631, 99.99=85311] [UPDATE: Count=280490, Max=15695, Min=348, Avg=1995.77, 90=3041, 99=6207, 99.9=8295, 99.99=10535] 
2023-06-05 12:33:23:632 60 sec: 3323991 operations; 56357 current ops/sec; [READ: Count=281927, Max=128831, Min=387, Avg=4449.97, 90=6599, 99=25519, 99.9=71807, 99.99=89471] [UPDATE: Count=281798, Max=15071, Min=335, Avg=2013.82, 90=3067, 99=6207, 99.9=8247, 99.99=9687] 
2023-06-05 12:33:33:632 70 sec: 3886489 operations; 56249.8 current ops/sec; [READ: Count=280833, Max=64639, Min=408, Avg=4116.86, 90=6443, 99=18735, 99.9=27199, 99.99=34879] [UPDATE: Count=281553, Max=13239, Min=325, Avg=2028.55, 90=3097, 99=6003, 99.9=8131, 99.99=9679] 
2023-06-05 12:33:43:632 80 sec: 4448929 operations; 56244 current ops/sec; [READ: Count=281342, Max=74623, Min=416, Avg=4212.14, 90=6615, 99=19151, 99.9=37727, 99.99=45407] [UPDATE: Count=281186, Max=13263, Min=320, Avg=2043.81, 90=3131, 99=6067, 99.9=8067, 99.99=9543] 
2023-06-05 12:33:53:632 90 sec: 5011458 operations; 56252.9 current ops/sec; [READ: Count=281691, Max=43391, Min=384, Avg=4192.22, 90=6591, 99=18847, 99.9=33279, 99.99=38527] [UPDATE: Count=280347, Max=25055, Min=325, Avg=2051.15, 90=3149, 99=6087, 99.9=8439, 99.99=15767] 
2023-06-05 12:34:03:632 100 sec: 5573758 operations; 56230 current ops/sec; [READ: Count=280701, Max=52639, Min=409, Avg=4179.41, 90=6547, 99=20063, 99.9=30191, 99.99=37887] [UPDATE: Count=282043, Max=18719, Min=317, Avg=2019.74, 90=3091, 99=6171, 99.9=8367, 99.99=12471] 
2023-06-05 12:34:13:632 110 sec: 6133579 operations; 55982.1 current ops/sec; [READ: Count=279696, Max=184447, Min=387, Avg=4649.73, 90=6867, 99=26543, 99.9=97919, 99.99=115903] [UPDATE: Count=280113, Max=12799, Min=327, Avg=2045.16, 90=3123, 99=6567, 99.9=9023, 99.99=10631] 
2023-06-05 12:34:23:635 120 sec: 6698638 operations; 56488.95 current ops/sec; [READ: Count=283178, Max=117375, Min=374, Avg=4517.5, 90=6747, 99=23823, 99.9=82751, 99.99=110911] [UPDATE: Count=281957, Max=13935, Min=325, Avg=2076.82, 90=3137, 99=6647, 99.9=9191, 99.99=11303] 
2023-06-05 12:34:33:632 130 sec: 7251540 operations; 55306.79 current ops/sec; [READ: Count=276818, Max=303103, Min=387, Avg=4644.46, 90=6899, 99=22335, 99.9=138623, 99.99=166399] [UPDATE: Count=275977, Max=13567, Min=337, Avg=2064.53, 90=3111, 99=6983, 99.9=9495, 99.99=11143] 
2023-06-05 12:34:43:632 140 sec: 7805617 operations; 55407.7 current ops/sec; [READ: Count=277143, Max=283135, Min=386, Avg=5013.34, 90=6751, 99=24111, 99.9=162559, 99.99=244223] [UPDATE: Count=276986, Max=13983, Min=319, Avg=2052.64, 90=3101, 99=6895, 99.9=9271, 99.99=11055] 
2023-06-05 12:34:53:632 150 sec: 8355882 operations; 55026.5 current ops/sec; [READ: Count=275412, Max=346367, Min=418, Avg=5127.28, 90=6455, 99=25983, 99.9=166015, 99.99=271103] [UPDATE: Count=274882, Max=18975, Min=329, Avg=2023.94, 90=3061, 99=6779, 99.9=9359, 99.99=12231] 
2023-06-05 12:35:03:632 160 sec: 8924940 operations; 56905.8 current ops/sec; [READ: Count=284207, Max=296703, Min=427, Avg=4855.26, 90=6495, 99=20783, 99.9=191103, 99.99=194815] [UPDATE: Count=284787, Max=16591, Min=329, Avg=2067.3, 90=3123, 99=6175, 99.9=8695, 99.99=10519] 
2023-06-05 12:35:13:632 170 sec: 9469880 operations; 54494 current ops/sec; [READ: Count=272034, Max=377343, Min=393, Avg=5143.07, 90=6451, 99=26399, 99.9=195455, 99.99=282111] [UPDATE: Count=272978, Max=13455, Min=317, Avg=2065.07, 90=3149, 99=6107, 99.9=8303, 99.99=10159] 
2023-06-05 12:35:23:632 180 sec: 10050576 operations; 58069.6 current ops/sec; [READ: Count=290245, Max=258175, Min=413, Avg=4720.62, 90=6355, 99=21663, 99.9=189951, 99.99=227839] [UPDATE: Count=290450, Max=12623, Min=324, Avg=2098.32, 90=3143, 99=5379, 99.9=8151, 99.99=9759] 
2023-06-05 12:35:33:632 190 sec: 10625147 operations; 57457.1 current ops/sec; [READ: Count=287711, Max=283135, Min=415, Avg=4554.52, 90=6207, 99=23999, 99.9=135295, 99.99=196607] [UPDATE: Count=286867, Max=14823, Min=331, Avg=2092.32, 90=3123, 99=5615, 99.9=8631, 99.99=10391] 
2023-06-05 12:35:43:632 200 sec: 11192327 operations; 56718 current ops/sec; [READ: Count=283621, Max=203007, Min=425, Avg=4583.57, 90=6135, 99=21247, 99.9=164607, 99.99=194047] [UPDATE: Count=283429, Max=13287, Min=340, Avg=2075.63, 90=3109, 99=5355, 99.9=8471, 99.99=10479] 
2023-06-05 12:35:53:632 210 sec: 11761330 operations; 56900.3 current ops/sec; [READ: Count=284307, Max=166655, Min=383, Avg=4394.55, 90=6215, 99=20271, 99.9=124095, 99.99=160127] [UPDATE: Count=284794, Max=15895, Min=328, Avg=2091.16, 90=3119, 99=5571, 99.9=8679, 99.99=11087] 
2023-06-05 12:36:03:632 220 sec: 12323148 operations; 56181.8 current ops/sec; [READ: Count=281175, Max=134015, Min=413, Avg=4141.92, 90=6003, 99=19455, 99.9=51423, 99.99=87039] [UPDATE: Count=280612, Max=18143, Min=336, Avg=2049.93, 90=3065, 99=5483, 99.9=8575, 99.99=11047] 
2023-06-05 12:36:13:632 230 sec: 12886724 operations; 56357.6 current ops/sec; [READ: Count=282076, Max=84863, Min=377, Avg=3885.08, 90=5699, 99=15735, 99.9=45343, 99.99=80191] [UPDATE: Count=281343, Max=13759, Min=305, Avg=1995.6, 90=2997, 99=4791, 99.9=7719, 99.99=9655] 
2023-06-05 12:36:23:632 240 sec: 13449316 operations; 56259.2 current ops/sec; [READ: Count=281250, Max=31535, Min=403, Avg=3571.71, 90=5407, 99=8295, 99.9=20015, 99.99=25167] [UPDATE: Count=281232, Max=13935, Min=311, Avg=1930.87, 90=2915, 99=4099, 99.9=6439, 99.99=7871] 
2023-06-05 12:36:33:632 250 sec: 14011810 operations; 56249.4 current ops/sec; [READ: Count=281883, Max=35903, Min=417, Avg=3584.7, 90=5463, 99=7947, 99.9=13351, 99.99=20527] [UPDATE: Count=280381, Max=21535, Min=324, Avg=1959.45, 90=2953, 99=4127, 99.9=6899, 99.99=15991] 
2023-06-05 12:36:43:632 260 sec: 14574317 operations; 56250.7 current ops/sec; [READ: Count=281359, Max=25519, Min=384, Avg=3556.12, 90=5451, 99=7963, 99.9=12031, 99.99=19535] [UPDATE: Count=281418, Max=15503, Min=332, Avg=1943.06, 90=2947, 99=4091, 99.9=6251, 99.99=9375] 
2023-06-05 12:36:53:632 270 sec: 15136805 operations; 56248.8 current ops/sec; [READ: Count=281428, Max=28943, Min=423, Avg=3606.09, 90=5551, 99=8431, 99.9=13951, 99.99=23583] [UPDATE: Count=281011, Max=22159, Min=323, Avg=1962.32, 90=2989, 99=4227, 99.9=6431, 99.99=9399] 
2023-06-05 12:37:03:632 280 sec: 15699324 operations; 56251.9 current ops/sec; [READ: Count=281922, Max=30895, Min=368, Avg=3545.34, 90=5463, 99=8107, 99.9=12543, 99.99=22191] [UPDATE: Count=280658, Max=19631, Min=320, Avg=1932.11, 90=2953, 99=4103, 99.9=6379, 99.99=9943] 
2023-06-05 12:37:13:632 290 sec: 16261808 operations; 56248.4 current ops/sec; [READ: Count=280890, Max=106495, Min=407, Avg=3609.32, 90=5523, 99=8855, 99.9=21471, 99.99=40927] [UPDATE: Count=281686, Max=13279, Min=334, Avg=1944.99, 90=2977, 99=4315, 99.9=6855, 99.99=9447] 
2023-06-05 12:37:23:632 300 sec: 16824312 operations; 56250.4 current ops/sec; [READ: Count=281095, Max=22959, Min=421, Avg=3521.65, 90=5415, 99=8127, 99.9=11439, 99.99=16199] [UPDATE: Count=281271, Max=14199, Min=336, Avg=1916.83, 90=2925, 99=4147, 99.9=6223, 99.99=7599] 
2023-06-05 12:37:33:632 310 sec: 17386776 operations; 56246.4 current ops/sec; [READ: Count=281159, Max=93631, Min=400, Avg=3566.52, 90=5411, 99=8895, 99.9=24207, 99.99=39103] [UPDATE: Count=281333, Max=13903, Min=352, Avg=1915.18, 90=2913, 99=4227, 99.9=7011, 99.99=9255] 
2023-06-05 12:37:43:632 320 sec: 17949314 operations; 56253.8 current ops/sec; [READ: Count=280961, Max=27951, Min=423, Avg=3446.36, 90=5279, 99=8247, 99.9=18223, 99.99=23311] [UPDATE: Count=281498, Max=12119, Min=340, Avg=1875.47, 90=2851, 99=4123, 99.9=6871, 99.99=9799] 
2023-06-05 12:37:53:632 330 sec: 18511811 operations; 56249.7 current ops/sec; [READ: Count=280553, Max=27775, Min=412, Avg=3453.24, 90=5275, 99=9367, 99.9=20911, 99.99=24863] [UPDATE: Count=281489, Max=26431, Min=306, Avg=1866.15, 90=2817, 99=4383, 99.9=8863, 99.99=16079] 
2023-06-05 12:38:03:632 340 sec: 19074124 operations; 56231.3 current ops/sec; [READ: Count=280840, Max=34943, Min=423, Avg=3421.64, 90=5211, 99=9143, 99.9=21327, 99.99=24879] [UPDATE: Count=282114, Max=20671, Min=336, Avg=1852.41, 90=2789, 99=4303, 99.9=7863, 99.99=11791] 
2023-06-05 12:38:13:632 350 sec: 19636814 operations; 56269 current ops/sec; [READ: Count=281203, Max=33535, Min=412, Avg=3427.86, 90=5195, 99=8687, 99.9=20399, 99.99=23919] [UPDATE: Count=281333, Max=13111, Min=336, Avg=1858.13, 90=2793, 99=4191, 99.9=6947, 99.99=9407] 
2023-06-05 12:38:23:632 360 sec: 20199341 operations; 56252.7 current ops/sec; [READ: Count=281433, Max=295935, Min=413, Avg=3438.86, 90=5083, 99=7483, 99.9=12399, 99.99=288511] [UPDATE: Count=281069, Max=293887, Min=338, Avg=1902.15, 90=2767, 99=3897, 99.9=6283, 99.99=268799] 
2023-06-05 12:38:33:632 370 sec: 20761830 operations; 56248.9 current ops/sec; [READ: Count=281503, Max=48319, Min=429, Avg=3345.17, 90=5095, 99=7615, 99.9=12399, 99.99=24319] [UPDATE: Count=280970, Max=12607, Min=318, Avg=1838.25, 90=2769, 99=3955, 99.9=6427, 99.99=9527] 
2023-06-05 12:38:43:632 380 sec: 21324334 operations; 56250.4 current ops/sec; [READ: Count=281904, Max=15895, Min=430, Avg=3310.48, 90=5075, 99=7431, 99.9=9863, 99.99=12471] [UPDATE: Count=280622, Max=11951, Min=334, Avg=1824.56, 90=2761, 99=3873, 99.9=5823, 99.99=7151] 
2023-06-05 12:38:53:632 390 sec: 21886834 operations; 56250 current ops/sec; [READ: Count=281871, Max=27567, Min=417, Avg=3371.5, 90=5167, 99=7583, 99.9=10231, 99.99=14855] [UPDATE: Count=280641, Max=16159, Min=316, Avg=1856.22, 90=2817, 99=3967, 99.9=5939, 99.99=8407] 
2023-06-05 12:39:03:632 400 sec: 22449352 operations; 56251.8 current ops/sec; [READ: Count=281086, Max=210303, Min=408, Avg=3471.47, 90=5303, 99=7711, 99.9=10511, 99.99=17007] [UPDATE: Count=281462, Max=210431, Min=331, Avg=1899.51, 90=2891, 99=3981, 99.9=5803, 99.99=9879] 
2023-06-05 12:39:13:632 410 sec: 23011826 operations; 56247.4 current ops/sec; [READ: Count=281375, Max=26351, Min=402, Avg=3546.55, 90=5455, 99=8239, 99.9=14327, 99.99=21103] [UPDATE: Count=281053, Max=11823, Min=327, Avg=1926.99, 90=2937, 99=4171, 99.9=6287, 99.99=9095] 
2023-06-05 12:39:23:632 420 sec: 23574300 operations; 56247.4 current ops/sec; [READ: Count=281322, Max=21759, Min=427, Avg=3570.05, 90=5503, 99=8079, 99.9=11359, 99.99=16783] [UPDATE: Count=281143, Max=10151, Min=337, Avg=1935.75, 90=2949, 99=4139, 99.9=5955, 99.99=7771] 
2023-06-05 12:39:33:632 430 sec: 24136806 operations; 56250.6 current ops/sec; [READ: Count=281264, Max=18415, Min=426, Avg=3627.73, 90=5595, 99=8279, 99.9=11263, 99.99=14983] [UPDATE: Count=281228, Max=10631, Min=323, Avg=1961.79, 90=2993, 99=4247, 99.9=6299, 99.99=7711] 
2023-06-05 12:39:43:632 440 sec: 24699323 operations; 56251.7 current ops/sec; [READ: Count=280483, Max=21807, Min=414, Avg=3599.5, 90=5551, 99=8135, 99.9=10975, 99.99=14535] [UPDATE: Count=281855, Max=15959, Min=327, Avg=1955.23, 90=2989, 99=4163, 99.9=6203, 99.99=8415] 
2023-06-05 12:39:53:632 450 sec: 25261797 operations; 56247.4 current ops/sec; [READ: Count=281241, Max=30063, Min=436, Avg=3645.3, 90=5635, 99=8543, 99.9=13735, 99.99=23503] [UPDATE: Count=281480, Max=24719, Min=334, Avg=1962.8, 90=3009, 99=4303, 99.9=6615, 99.99=10951] 
2023-06-05 12:40:03:632 460 sec: 25824124 operations; 56232.7 current ops/sec; [READ: Count=280909, Max=45311, Min=393, Avg=3714.76, 90=5691, 99=9767, 99.9=26271, 99.99=34879] [UPDATE: Count=281553, Max=17247, Min=320, Avg=1969.91, 90=3013, 99=4483, 99.9=7215, 99.99=9431] 
2023-06-05 12:40:13:632 470 sec: 26378831 operations; 55470.7 current ops/sec; [READ: Count=276782, Max=284927, Min=397, Avg=4315.96, 90=6251, 99=21535, 99.9=111743, 99.99=189951] [UPDATE: Count=277999, Max=12671, Min=332, Avg=2057.99, 90=3131, 99=5839, 99.9=8591, 99.99=10335] 
2023-06-05 12:40:23:636 480 sec: 26948804 operations; 56997.3 current ops/sec; [READ: Count=285304, Max=544255, Min=369, Avg=4447.56, 90=5971, 99=23311, 99.9=114239, 99.99=205183] [UPDATE: Count=284883, Max=13295, Min=326, Avg=2038.64, 90=3069, 99=5331, 99.9=8583, 99.99=10671] 
2023-06-05 12:40:33:632 490 sec: 27511703 operations; 56289.9 current ops/sec; [READ: Count=282017, Max=29535, Min=401, Avg=3670.95, 90=5643, 99=8951, 99.9=17551, 99.99=24783] [UPDATE: Count=280428, Max=16831, Min=311, Avg=1968.56, 90=2999, 99=4343, 99.9=6667, 99.99=8327] 
2023-06-05 12:40:43:632 500 sec: 28074320 operations; 56261.7 current ops/sec; [READ: Count=281030, Max=33279, Min=410, Avg=3677.88, 90=5683, 99=9247, 99.9=18703, 99.99=27935] [UPDATE: Count=281041, Max=28687, Min=340, Avg=1970.55, 90=3007, 99=4423, 99.9=7555, 99.99=16575] 
2023-06-05 12:40:53:632 510 sec: 28636722 operations; 56240.2 current ops/sec; [READ: Count=280883, Max=77439, Min=381, Avg=3652.07, 90=5631, 99=9239, 99.9=26943, 99.99=38335] [UPDATE: Count=282141, Max=27151, Min=328, Avg=1945.06, 90=2975, 99=4483, 99.9=7387, 99.99=11743] 
2023-06-05 12:41:03:632 520 sec: 29199289 operations; 56256.7 current ops/sec; [READ: Count=281832, Max=46495, Min=412, Avg=3672.24, 90=5691, 99=8727, 99.9=16527, 99.99=39743] [UPDATE: Count=280681, Max=17279, Min=318, Avg=1958.26, 90=2999, 99=4327, 99.9=6703, 99.99=9671] 
2023-06-05 12:41:13:632 530 sec: 29761761 operations; 56247.2 current ops/sec; [READ: Count=281516, Max=23791, Min=408, Avg=3692.08, 90=5707, 99=9087, 99.9=17839, 99.99=21407] [UPDATE: Count=281033, Max=11119, Min=348, Avg=1970.59, 90=3013, 99=4463, 99.9=7091, 99.99=9479] 
2023-06-05 12:41:23:632 540 sec: 30324131 operations; 56237 current ops/sec; [READ: Count=281930, Max=29215, Min=398, Avg=3691.04, 90=5731, 99=8767, 99.9=12871, 99.99=20367] [UPDATE: Count=280366, Max=10007, Min=349, Avg=1971.94, 90=3013, 99=4331, 99.9=6671, 99.99=8279] 
2023-06-05 12:41:33:632 550 sec: 30886741 operations; 56261 current ops/sec; [READ: Count=282352, Max=37343, Min=377, Avg=3816.2, 90=5891, 99=10175, 99.9=23023, 99.99=27711] [UPDATE: Count=280368, Max=12311, Min=338, Avg=2007.63, 90=3069, 99=4647, 99.9=7471, 99.99=9695] 
2023-06-05 12:41:43:632 560 sec: 31447465 operations; 56072.4 current ops/sec; [READ: Count=279804, Max=253055, Min=405, Avg=3881.39, 90=5871, 99=11511, 99.9=27087, 99.99=114687] [UPDATE: Count=280986, Max=14943, Min=330, Avg=2008.38, 90=3065, 99=4927, 99.9=8391, 99.99=10479] 
2023-06-05 12:41:53:632 570 sec: 31991933 operations; 54446.8 current ops/sec; [READ: Count=272604, Max=405503, Min=364, Avg=4867.74, 90=5627, 99=13407, 99.9=227967, 99.99=371455] [UPDATE: Count=271914, Max=17071, Min=327, Avg=1942.68, 90=2987, 99=4743, 99.9=8471, 99.99=10967] 
2023-06-05 12:42:03:632 580 sec: 32551890 operations; 55995.7 current ops/sec; [READ: Count=279603, Max=336895, Min=396, Avg=4903.31, 90=5935, 99=21071, 99.9=228863, 99.99=276991] [UPDATE: Count=280274, Max=18623, Min=318, Avg=2012.99, 90=3067, 99=4863, 99.9=7887, 99.99=10463] 
2023-06-05 12:42:13:632 590 sec: 33089213 operations; 53732.3 current ops/sec; [READ: Count=268547, Max=320767, Min=383, Avg=5252.64, 90=6803, 99=25263, 99.9=191871, 99.99=244607] [UPDATE: Count=268865, Max=13327, Min=323, Avg=2110.67, 90=3227, 99=6335, 99.9=8727, 99.99=10783] 
2023-06-05 12:42:23:632 600 sec: 33588250 operations; 49903.7 current ops/sec; [READ: Count=249700, Max=395007, Min=407, Avg=5925.56, 90=6743, 99=45823, 99.9=325119, 99.99=329727] [UPDATE: Count=248577, Max=25055, Min=294, Avg=2065.08, 90=3205, 99=6551, 99.9=9247, 99.99=14271] 
2023-06-05 12:42:33:632 610 sec: 34110982 operations; 52273.2 current ops/sec; [READ: Count=261138, Max=338431, Min=385, Avg=5535.64, 90=7007, 99=34303, 99.9=273151, 99.99=327167] [UPDATE: Count=261955, Max=23535, Min=332, Avg=2134.1, 90=3299, 99=6299, 99.9=9119, 99.99=13839] 
2023-06-05 12:42:43:632 620 sec: 34666054 operations; 55507.2 current ops/sec; [READ: Count=277285, Max=283647, Min=407, Avg=5041.48, 90=6919, 99=30335, 99.9=160383, 99.99=266751] [UPDATE: Count=278100, Max=19519, Min=329, Avg=2163.25, 90=3311, 99=5947, 99.9=8179, 99.99=9815] 
2023-06-05 12:42:53:632 630 sec: 35230457 operations; 56440.3 current ops/sec; [READ: Count=281994, Max=249983, Min=407, Avg=4922.07, 90=6783, 99=30031, 99.9=132991, 99.99=152959] [UPDATE: Count=282566, Max=17551, Min=326, Avg=2160.74, 90=3287, 99=5919, 99.9=8407, 99.99=10255] 
2023-06-05 12:43:03:632 640 sec: 35808847 operations; 57839 current ops/sec; [READ: Count=289012, Max=150015, Min=396, Avg=4756.86, 90=6639, 99=18943, 99.9=132095, 99.99=139263] [UPDATE: Count=289363, Max=17775, Min=332, Avg=2158.73, 90=3271, 99=5303, 99.9=7691, 99.99=9551] 
2023-06-05 12:43:13:632 650 sec: 36377342 operations; 56849.5 current ops/sec; [READ: Count=284492, Max=282879, Min=423, Avg=4853.62, 90=6655, 99=21151, 99.9=159487, 99.99=185727] [UPDATE: Count=283950, Max=12551, Min=300, Avg=2171.85, 90=3281, 99=5599, 99.9=8059, 99.99=10039] 
2023-06-05 12:43:23:632 660 sec: 36956704 operations; 57936.2 current ops/sec; [READ: Count=290174, Max=255615, Min=413, Avg=4698.93, 90=6731, 99=16927, 99.9=117119, 99.99=202239] [UPDATE: Count=289245, Max=14695, Min=314, Avg=2192.45, 90=3311, 99=5347, 99.9=7843, 99.99=9743] 
2023-06-05 12:43:33:632 670 sec: 37543583 operations; 58687.9 current ops/sec; [READ: Count=293517, Max=170111, Min=442, Avg=4547.36, 90=6963, 99=13663, 99.9=32751, 99.99=99967] [UPDATE: Count=293235, Max=20447, Min=335, Avg=2246.88, 90=3375, 99=5199, 99.9=7631, 99.99=9391] 
2023-06-05 12:43:43:632 680 sec: 38132921 operations; 58933.8 current ops/sec; [READ: Count=294208, Max=27711, Min=408, Avg=4481.95, 90=6919, 99=11959, 99.9=20639, 99.99=23791] [UPDATE: Count=295099, Max=12423, Min=362, Avg=2262.7, 90=3377, 99=4959, 99.9=7135, 99.99=8799] 
2023-06-05 12:43:53:632 690 sec: 38708730 operations; 57580.9 current ops/sec; [READ: Count=287936, Max=134655, Min=417, Avg=4622.69, 90=6751, 99=14247, 99.9=82879, 99.99=89471] [UPDATE: Count=287817, Max=26623, Min=344, Avg=2259.65, 90=3367, 99=5183, 99.9=8083, 99.99=10727] 
2023-06-05 12:44:03:632 700 sec: 39283160 operations; 57443 current ops/sec; [READ: Count=287149, Max=97087, Min=397, Avg=4618.6, 90=6755, 99=14703, 99.9=66303, 99.99=84671] [UPDATE: Count=287385, Max=15679, Min=330, Avg=2279.96, 90=3379, 99=5191, 99.9=8543, 99.99=10679] 
2023-06-05 12:44:13:632 710 sec: 39851684 operations; 56852.4 current ops/sec; [READ: Count=284206, Max=62495, Min=385, Avg=4653.04, 90=6863, 99=16167, 99.9=40255, 99.99=47967] [UPDATE: Count=284382, Max=19839, Min=334, Avg=2316.92, 90=3409, 99=5395, 99.9=9063, 99.99=13847] 
2023-06-05 12:44:23:632 720 sec: 40401711 operations; 55002.7 current ops/sec; [READ: Count=274726, Max=219391, Min=392, Avg=4947.34, 90=6699, 99=21311, 99.9=135295, 99.99=150655] [UPDATE: Count=275195, Max=14727, Min=330, Avg=2286.51, 90=3365, 99=5895, 99.9=8871, 99.99=10743] 
2023-06-05 12:44:33:632 730 sec: 40966953 operations; 56524.2 current ops/sec; [READ: Count=282710, Max=89151, Min=393, Avg=4704.72, 90=7011, 99=15663, 99.9=32559, 99.99=41503] [UPDATE: Count=282535, Max=13751, Min=322, Avg=2355.74, 90=3475, 99=5623, 99.9=8735, 99.99=10487] 
2023-06-05 12:44:43:632 740 sec: 41529992 operations; 56303.9 current ops/sec; [READ: Count=281817, Max=46975, Min=388, Avg=4742.24, 90=7039, 99=18319, 99.9=31887, 99.99=36831] [UPDATE: Count=281142, Max=12935, Min=321, Avg=2345.75, 90=3457, 99=5787, 99.9=8967, 99.99=10679] 
2023-06-05 12:44:53:632 750 sec: 42098758 operations; 56876.6 current ops/sec; [READ: Count=284196, Max=50175, Min=416, Avg=4679.57, 90=6971, 99=16575, 99.9=27615, 99.99=33663] [UPDATE: Count=284715, Max=27503, Min=325, Avg=2333.09, 90=3443, 99=5399, 99.9=8639, 99.99=11343] 
2023-06-05 12:45:03:632 760 sec: 42665614 operations; 56685.6 current ops/sec; [READ: Count=283682, Max=42879, Min=371, Avg=4681.72, 90=6915, 99=17935, 99.9=26543, 99.99=31439] [UPDATE: Count=283058, Max=19215, Min=337, Avg=2339.47, 90=3435, 99=5703, 99.9=9047, 99.99=11287] 
2023-06-05 12:45:13:632 770 sec: 43211657 operations; 54604.3 current ops/sec; [READ: Count=272018, Max=540671, Min=407, Avg=4960.49, 90=6883, 99=21823, 99.9=134143, 99.99=275199] [UPDATE: Count=273902, Max=13743, Min=342, Avg=2321.78, 90=3421, 99=5779, 99.9=8951, 99.99=10879] 
2023-06-05 12:45:23:632 780 sec: 43738945 operations; 52728.8 current ops/sec; [READ: Count=263410, Max=506111, Min=388, Avg=5353.73, 90=6355, 99=19647, 99.9=272895, 99.99=277247] [UPDATE: Count=263460, Max=29839, Min=318, Avg=2231.73, 90=3299, 99=5359, 99.9=8791, 99.99=14455] 
2023-06-05 12:45:33:632 790 sec: 44298122 operations; 55917.7 current ops/sec; [READ: Count=279753, Max=277503, Min=416, Avg=4884.36, 90=6603, 99=13791, 99.9=267263, 99.99=274175] [UPDATE: Count=280161, Max=21167, Min=314, Avg=2261.62, 90=3339, 99=5083, 99.9=7579, 99.99=9823] 
2023-06-05 12:45:43:632 800 sec: 44879072 operations; 58095 current ops/sec; [READ: Count=290557, Max=57631, Min=448, Avg=4545.77, 90=6899, 99=10775, 99.9=17999, 99.99=27807] [UPDATE: Count=290227, Max=10799, Min=305, Avg=2322.68, 90=3413, 99=4851, 99.9=6951, 99.99=8751] 
2023-06-05 12:45:53:632 810 sec: 45455610 operations; 57653.8 current ops/sec; [READ: Count=287936, Max=42111, Min=397, Avg=4575.54, 90=6927, 99=11127, 99.9=18735, 99.99=29183] [UPDATE: Count=288543, Max=24607, Min=336, Avg=2333.61, 90=3421, 99=4903, 99.9=6947, 99.99=9103] 
2023-06-05 12:46:03:632 820 sec: 46032462 operations; 57685.2 current ops/sec; [READ: Count=288161, Max=27823, Min=445, Avg=4533.5, 90=6783, 99=10287, 99.9=14831, 99.99=19535] [UPDATE: Count=288768, Max=20591, Min=322, Avg=2341.82, 90=3411, 99=4747, 99.9=6739, 99.99=9239] 
2023-06-05 12:46:13:632 830 sec: 46599354 operations; 56689.2 current ops/sec; [READ: Count=283158, Max=182783, Min=454, Avg=4616.66, 90=6803, 99=10767, 99.9=30831, 99.99=176639] [UPDATE: Count=283341, Max=181503, Min=337, Avg=2386.32, 90=3419, 99=4935, 99.9=8051, 99.99=176767] 
2023-06-05 12:46:23:632 840 sec: 47171417 operations; 57206.3 current ops/sec; [READ: Count=285622, Max=30431, Min=394, Avg=4536.4, 90=6775, 99=10103, 99.9=14895, 99.99=21823] [UPDATE: Count=286715, Max=14927, Min=322, Avg=2354.49, 90=3425, 99=4755, 99.9=6899, 99.99=8999] 
2023-06-05 12:46:33:632 850 sec: 47733754 operations; 56233.7 current ops/sec; [READ: Count=281715, Max=91967, Min=375, Avg=4663.34, 90=6799, 99=12087, 99.9=29695, 99.99=56639] [UPDATE: Count=280653, Max=15343, Min=319, Avg=2386.37, 90=3447, 99=5051, 99.9=7855, 99.99=10567] 
2023-06-05 12:46:43:632 860 sec: 48295990 operations; 56223.6 current ops/sec; [READ: Count=280707, Max=47647, Min=370, Avg=4688.05, 90=6835, 99=12239, 99.9=24959, 99.99=31103] [UPDATE: Count=281527, Max=23839, Min=338, Avg=2414.92, 90=3471, 99=5051, 99.9=8639, 99.99=14423] 
2023-06-05 12:46:53:632 870 sec: 48859291 operations; 56330.1 current ops/sec; [READ: Count=281491, Max=38623, Min=404, Avg=4677.9, 90=6835, 99=11575, 99.9=25455, 99.99=30175] [UPDATE: Count=281863, Max=27535, Min=341, Avg=2404, 90=3463, 99=5055, 99.9=8155, 99.99=10863] 
2023-06-05 12:47:03:632 880 sec: 49420851 operations; 56156 current ops/sec; [READ: Count=281219, Max=34655, Min=411, Avg=4702.94, 90=6915, 99=13095, 99.9=24991, 99.99=29487] [UPDATE: Count=280383, Max=19871, Min=313, Avg=2397.23, 90=3469, 99=5207, 99.9=8175, 99.99=10703] 
2023-06-05 12:47:13:632 890 sec: 49981213 operations; 56036.2 current ops/sec; [READ: Count=280350, Max=67903, Min=402, Avg=4728.67, 90=6947, 99=14407, 99.9=24303, 99.99=47615] [UPDATE: Count=279991, Max=13991, Min=345, Avg=2397.58, 90=3463, 99=5331, 99.9=8391, 99.99=10447] 
2023-06-05 12:47:23:632 900 sec: 50540216 operations; 55900.3 current ops/sec; [READ: Count=279030, Max=61535, Min=399, Avg=4765.54, 90=6899, 99=17695, 99.9=42111, 99.99=55615] [UPDATE: Count=279934, Max=12407, Min=340, Avg=2385.36, 90=3437, 99=5627, 99.9=8759, 99.99=10631] 
2023-06-05 12:47:33:632 910 sec: 51099872 operations; 55965.6 current ops/sec; [READ: Count=279266, Max=42815, Min=431, Avg=4742.08, 90=6847, 99=16047, 99.9=25919, 99.99=30335] [UPDATE: Count=280398, Max=14143, Min=339, Avg=2403.73, 90=3445, 99=5435, 99.9=8367, 99.99=10359] 
2023-06-05 12:47:43:632 920 sec: 51661804 operations; 56193.2 current ops/sec; [READ: Count=280715, Max=36703, Min=438, Avg=4705.41, 90=6759, 99=13519, 99.9=26527, 99.99=31487] [UPDATE: Count=281248, Max=12911, Min=331, Avg=2410.25, 90=3439, 99=5175, 99.9=7927, 99.99=10671] 
2023-06-05 12:47:53:632 930 sec: 52225106 operations; 56330.2 current ops/sec; [READ: Count=281980, Max=48991, Min=410, Avg=4688.64, 90=6763, 99=13167, 99.9=23919, 99.99=28127] [UPDATE: Count=281306, Max=17151, Min=349, Avg=2400.6, 90=3429, 99=5003, 99.9=7395, 99.99=10031] 
2023-06-05 12:48:03:632 940 sec: 52790260 operations; 56515.4 current ops/sec; [READ: Count=282848, Max=30879, Min=429, Avg=4665.57, 90=6827, 99=11703, 99.9=21919, 99.99=25855] [UPDATE: Count=282291, Max=18095, Min=332, Avg=2400.08, 90=3449, 99=4975, 99.9=7427, 99.99=10287] 
2023-06-05 12:48:13:632 950 sec: 53354896 operations; 56463.6 current ops/sec; [READ: Count=281942, Max=29775, Min=437, Avg=4676.62, 90=6907, 99=11815, 99.9=20975, 99.99=24079] [UPDATE: Count=282713, Max=19279, Min=369, Avg=2396.41, 90=3453, 99=5003, 99.9=7427, 99.99=14015] 
2023-06-05 12:48:23:632 960 sec: 53923344 operations; 56844.8 current ops/sec; [READ: Count=284559, Max=31039, Min=387, Avg=4628.81, 90=6843, 99=11327, 99.9=20623, 99.99=24223] [UPDATE: Count=283927, Max=14127, Min=355, Avg=2376.47, 90=3431, 99=4955, 99.9=7391, 99.99=9159] 
2023-06-05 12:48:33:632 970 sec: 54492551 operations; 56920.7 current ops/sec; [READ: Count=284552, Max=43423, Min=423, Avg=4582.24, 90=6787, 99=10583, 99.9=19151, 99.99=30303] [UPDATE: Count=284563, Max=13039, Min=356, Avg=2366.29, 90=3421, 99=4863, 99.9=6875, 99.99=8751] 
2023-06-05 12:48:43:632 980 sec: 55056906 operations; 56435.5 current ops/sec; [READ: Count=281801, Max=120063, Min=430, Avg=4644.45, 90=6727, 99=11847, 99.9=41727, 99.99=65311] [UPDATE: Count=282670, Max=15287, Min=297, Avg=2350.58, 90=3403, 99=4975, 99.9=7607, 99.99=9599] 
2023-06-05 12:48:53:632 990 sec: 55618970 operations; 56206.4 current ops/sec; [READ: Count=280861, Max=100095, Min=438, Avg=4719.55, 90=6707, 99=11935, 99.9=69567, 99.99=75775] [UPDATE: Count=281205, Max=32671, Min=331, Avg=2344.65, 90=3391, 99=4963, 99.9=7531, 99.99=10679] 
2023-06-05 12:49:03:632 1000 sec: 56184169 operations; 56519.9 current ops/sec; [READ: Count=282678, Max=89407, Min=421, Avg=4675.85, 90=6763, 99=11871, 99.9=51039, 99.99=60991] [UPDATE: Count=282567, Max=59967, Min=348, Avg=2359.52, 90=3401, 99=4851, 99.9=7315, 99.99=57823] 
2023-06-05 12:49:13:632 1010 sec: 56750388 operations; 56621.9 current ops/sec; [READ: Count=282934, Max=44799, Min=416, Avg=4644.26, 90=6875, 99=12783, 99.9=28703, 99.99=34655] [UPDATE: Count=283231, Max=12207, Min=351, Avg=2344.84, 90=3421, 99=5015, 99.9=7303, 99.99=9663] 
2023-06-05 12:49:23:632 1020 sec: 57317903 operations; 56751.5 current ops/sec; [READ: Count=283855, Max=36031, Min=404, Avg=4539.58, 90=6783, 99=10823, 99.9=21247, 99.99=28943] [UPDATE: Count=283598, Max=11343, Min=329, Avg=2329.9, 90=3399, 99=4867, 99.9=6875, 99.99=8823] 
2023-06-05 12:49:33:632 1030 sec: 57882420 operations; 56451.7 current ops/sec; [READ: Count=281915, Max=29455, Min=454, Avg=4549.1, 90=6763, 99=10295, 99.9=15631, 99.99=22735] [UPDATE: Count=282576, Max=11095, Min=334, Avg=2352.98, 90=3423, 99=4731, 99.9=6559, 99.99=8439] 
2023-06-05 12:49:43:632 1040 sec: 58445486 operations; 56306.6 current ops/sec; [READ: Count=281798, Max=34591, Min=431, Avg=4582.39, 90=6779, 99=11623, 99.9=23983, 99.99=29135] [UPDATE: Count=281268, Max=12223, Min=327, Avg=2347.75, 90=3411, 99=4911, 99.9=7803, 99.99=10007] 
2023-06-05 12:49:53:632 1050 sec: 59008350 operations; 56286.4 current ops/sec; [READ: Count=281863, Max=40799, Min=402, Avg=4637.19, 90=6867, 99=13159, 99.9=25391, 99.99=30015] [UPDATE: Count=281116, Max=17887, Min=337, Avg=2353.65, 90=3427, 99=5071, 99.9=8067, 99.99=10295] 
2023-06-05 12:50:03:632 1060 sec: 59571838 operations; 56348.8 current ops/sec; [READ: Count=281895, Max=36895, Min=417, Avg=4587.62, 90=6831, 99=11783, 99.9=24671, 99.99=29903] [UPDATE: Count=281481, Max=16703, Min=332, Avg=2332.69, 90=3395, 99=4935, 99.9=7591, 99.99=10311] 
2023-06-05 12:50:13:632 1070 sec: 60112281 operations; 54044.3 current ops/sec; [READ: Count=269857, Max=204927, Min=377, Avg=4997.02, 90=6947, 99=21151, 99.9=110975, 99.99=148479] [UPDATE: Count=270768, Max=14335, Min=306, Avg=2321.96, 90=3401, 99=5467, 99.9=8151, 99.99=10191] 
2023-06-05 12:50:23:632 1080 sec: 60678694 operations; 56641.3 current ops/sec; [READ: Count=283073, Max=135295, Min=409, Avg=4722.02, 90=6939, 99=13919, 99.9=44575, 99.99=117631] [UPDATE: Count=283297, Max=12575, Min=324, Avg=2333.15, 90=3397, 99=5227, 99.9=8295, 99.99=10431] 
2023-06-05 12:50:33:632 1090 sec: 61247141 operations; 56844.7 current ops/sec; [READ: Count=284390, Max=35551, Min=405, Avg=4652.95, 90=6907, 99=13039, 99.9=26607, 99.99=31599] [UPDATE: Count=283953, Max=13447, Min=351, Avg=2352.19, 90=3411, 99=5019, 99.9=8119, 99.99=10287] 
2023-06-05 12:50:43:632 1100 sec: 61814877 operations; 56773.6 current ops/sec; [READ: Count=283923, Max=43615, Min=397, Avg=4645.27, 90=6887, 99=12575, 99.9=25567, 99.99=29711] [UPDATE: Count=283817, Max=13559, Min=326, Avg=2357.94, 90=3415, 99=5023, 99.9=7907, 99.99=10095] 
2023-06-05 12:50:53:632 1110 sec: 62381624 operations; 56674.7 current ops/sec; [READ: Count=283026, Max=91071, Min=424, Avg=4619.99, 90=6891, 99=12375, 99.9=24447, 99.99=37567] [UPDATE: Count=283665, Max=21967, Min=335, Avg=2339.88, 90=3403, 99=4919, 99.9=7631, 99.99=11175] 
2023-06-05 12:51:03:632 1120 sec: 62941291 operations; 55966.7 current ops/sec; [READ: Count=280215, Max=123775, Min=450, Avg=4722.73, 90=6779, 99=12359, 99.9=69695, 99.99=78719] [UPDATE: Count=279548, Max=16975, Min=320, Avg=2327.43, 90=3385, 99=4987, 99.9=8207, 99.99=10423] 
2023-06-05 12:51:13:632 1130 sec: 63507044 operations; 56575.3 current ops/sec; [READ: Count=282963, Max=76927, Min=421, Avg=4653.04, 90=6815, 99=12759, 99.9=56287, 99.99=67455] [UPDATE: Count=282836, Max=17535, Min=346, Avg=2329.62, 90=3391, 99=5007, 99.9=8287, 99.99=10623] 
2023-06-05 12:51:23:632 1140 sec: 64065242 operations; 55819.8 current ops/sec; [READ: Count=279058, Max=188799, Min=428, Avg=4796.23, 90=6879, 99=18287, 99.9=83327, 99.99=118463] [UPDATE: Count=279249, Max=14119, Min=317, Avg=2318.67, 90=3379, 99=5811, 99.9=9047, 99.99=10783] 
2023-06-05 12:51:33:632 1150 sec: 64632554 operations; 56731.2 current ops/sec; [READ: Count=283890, Max=51711, Min=418, Avg=4638.6, 90=6879, 99=16479, 99.9=28431, 99.99=33375] [UPDATE: Count=283235, Max=13751, Min=316, Avg=2319.07, 90=3391, 99=5571, 99.9=9055, 99.99=10727] 
2023-06-05 12:51:43:632 1160 sec: 65197976 operations; 56542.2 current ops/sec; [READ: Count=283149, Max=42111, Min=374, Avg=4584.8, 90=6843, 99=15127, 99.9=25263, 99.99=28927] [UPDATE: Count=282327, Max=20031, Min=339, Avg=2302.28, 90=3379, 99=5371, 99.9=8591, 99.99=10287] 
2023-06-05 12:51:53:632 1170 sec: 65761342 operations; 56336.6 current ops/sec; [READ: Count=281420, Max=39295, Min=447, Avg=4440.37, 90=6667, 99=13119, 99.9=23119, 99.99=27631] [UPDATE: Count=281893, Max=16295, Min=344, Avg=2256.94, 90=3331, 99=5011, 99.9=7875, 99.99=10335] 
2023-06-05 12:52:03:632 1180 sec: 66323663 operations; 56232.1 current ops/sec; [READ: Count=280779, Max=35167, Min=415, Avg=4459.05, 90=6683, 99=14327, 99.9=24511, 99.99=27999] [UPDATE: Count=281514, Max=17807, Min=326, Avg=2260.43, 90=3331, 99=5191, 99.9=8359, 99.99=10559] 
2023-06-05 12:52:13:632 1190 sec: 66883653 operations; 55999 current ops/sec; [READ: Count=279631, Max=123775, Min=392, Avg=4632.87, 90=6723, 99=16071, 99.9=81983, 99.99=88319] [UPDATE: Count=280519, Max=13751, Min=347, Avg=2269.58, 90=3349, 99=5287, 99.9=8399, 99.99=10151] 
2023-06-05 12:52:23:632 1200 sec: 67449058 operations; 56540.5 current ops/sec; [READ: Count=283044, Max=91967, Min=430, Avg=4413.11, 90=6639, 99=11351, 99.9=24687, 99.99=73535] [UPDATE: Count=281553, Max=28271, Min=374, Avg=2253.04, 90=3317, 99=4891, 99.9=7635, 99.99=14071] 
2023-06-05 12:52:33:632 1210 sec: 68011578 operations; 56252 current ops/sec; [READ: Count=280926, Max=33279, Min=422, Avg=4325.86, 90=6587, 99=10535, 99.9=17151, 99.99=26767] [UPDATE: Count=282212, Max=24591, Min=332, Avg=2222.01, 90=3283, 99=4659, 99.9=6567, 99.99=9519] 
2023-06-05 12:52:43:632 1220 sec: 68574027 operations; 56244.9 current ops/sec; [READ: Count=281551, Max=33855, Min=456, Avg=4369.26, 90=6679, 99=11143, 99.9=17487, 99.99=24447] [UPDATE: Count=280851, Max=20591, Min=345, Avg=2232.03, 90=3297, 99=4819, 99.9=6831, 99.99=8711] 
2023-06-05 12:52:53:632 1230 sec: 69135069 operations; 56104.2 current ops/sec; [READ: Count=280791, Max=235007, Min=423, Avg=4493.74, 90=6639, 99=11495, 99.9=60319, 99.99=173567] [UPDATE: Count=280448, Max=35007, Min=319, Avg=2228.57, 90=3297, 99=4859, 99.9=7179, 99.99=12599] 
2023-06-05 12:53:03:632 1240 sec: 69699075 operations; 56400.6 current ops/sec; [READ: Count=282321, Max=41695, Min=466, Avg=4415.16, 90=6719, 99=11191, 99.9=27087, 99.99=33727] [UPDATE: Count=281611, Max=18991, Min=342, Avg=2246.75, 90=3323, 99=4859, 99.9=7147, 99.99=10039] 
2023-06-05 12:53:13:632 1250 sec: 70261161 operations; 56208.6 current ops/sec; [READ: Count=280730, Max=33631, Min=392, Avg=4429.89, 90=6763, 99=11983, 99.9=19647, 99.99=27407] [UPDATE: Count=281295, Max=21455, Min=331, Avg=2252.82, 90=3335, 99=4991, 99.9=7291, 99.99=9031] 
2023-06-05 12:53:23:632 1260 sec: 70823845 operations; 56268.4 current ops/sec; [READ: Count=281529, Max=50111, Min=424, Avg=4384.61, 90=6675, 99=10943, 99.9=21871, 99.99=44511] [UPDATE: Count=281191, Max=12743, Min=361, Avg=2246.61, 90=3329, 99=4807, 99.9=7299, 99.99=9791] 
2023-06-05 12:53:33:632 1270 sec: 71384372 operations; 56052.7 current ops/sec; [READ: Count=280434, Max=108671, Min=406, Avg=4482.98, 90=6795, 99=12671, 99.9=25471, 99.99=57439] [UPDATE: Count=280044, Max=20415, Min=334, Avg=2264.01, 90=3355, 99=5155, 99.9=8279, 99.99=10687] 
2023-06-05 12:53:43:632 1280 sec: 71938535 operations; 55416.3 current ops/sec; [READ: Count=277891, Max=297983, Min=410, Avg=4820.79, 90=6663, 99=13223, 99.9=158975, 99.99=168191] [UPDATE: Count=276371, Max=11871, Min=323, Avg=2232.45, 90=3325, 99=5059, 99.9=8223, 99.99=10007] 
2023-06-05 12:53:53:632 1290 sec: 72507959 operations; 56942.4 current ops/sec; [READ: Count=284093, Max=133503, Min=425, Avg=4611.34, 90=6791, 99=12967, 99.9=69439, 99.99=120063] [UPDATE: Count=285405, Max=26271, Min=331, Avg=2269.11, 90=3367, 99=5083, 99.9=7687, 99.99=10407] 
2023-06-05 12:54:03:632 1300 sec: 73072066 operations; 56410.7 current ops/sec; [READ: Count=282254, Max=104127, Min=411, Avg=4558.47, 90=6655, 99=14471, 99.9=61503, 99.99=82111] [UPDATE: Count=281788, Max=19087, Min=322, Avg=2214.81, 90=3293, 99=5043, 99.9=8343, 99.99=10919] 
2023-06-05 12:54:13:632 1310 sec: 73629860 operations; 55779.4 current ops/sec; [READ: Count=279444, Max=255615, Min=391, Avg=4708.01, 90=6755, 99=20015, 99.9=62975, 99.99=166655] [UPDATE: Count=278395, Max=14647, Min=333, Avg=2219.35, 90=3309, 99=5559, 99.9=9295, 99.99=11063] 
2023-06-05 12:54:23:632 1320 sec: 74181098 operations; 55123.8 current ops/sec; [READ: Count=275944, Max=173951, Min=409, Avg=4949.27, 90=6791, 99=23279, 99.9=136191, 99.99=164607] [UPDATE: Count=275308, Max=22175, Min=330, Avg=2212.93, 90=3307, 99=5975, 99.9=9239, 99.99=11031] 
2023-06-05 12:54:33:632 1330 sec: 74744567 operations; 56346.9 current ops/sec; [READ: Count=281114, Max=111679, Min=383, Avg=4827.72, 90=7035, 99=24591, 99.9=61791, 99.99=84031] [UPDATE: Count=282391, Max=15655, Min=344, Avg=2246.76, 90=3361, 99=6015, 99.9=9447, 99.99=12455] 
2023-06-05 12:54:43:632 1340 sec: 75307735 operations; 56316.8 current ops/sec; [READ: Count=282098, Max=173311, Min=424, Avg=4822.01, 90=7071, 99=23231, 99.9=84031, 99.99=105983] [UPDATE: Count=281095, Max=20479, Min=321, Avg=2235.43, 90=3355, 99=5759, 99.9=9047, 99.99=14247] 
2023-06-05 12:54:53:632 1350 sec: 75877021 operations; 56928.6 current ops/sec; [READ: Count=285358, Max=130175, Min=370, Avg=4683.35, 90=7071, 99=16215, 99.9=47487, 99.99=100287] [UPDATE: Count=283882, Max=18959, Min=352, Avg=2257.89, 90=3371, 99=5375, 99.9=8351, 99.99=10983] 
2023-06-05 12:55:03:632 1360 sec: 76446309 operations; 56928.8 current ops/sec; [READ: Count=285041, Max=62687, Min=411, Avg=4571.84, 90=6999, 99=13591, 99.9=28719, 99.99=35839] [UPDATE: Count=284136, Max=20175, Min=336, Avg=2263.8, 90=3371, 99=5127, 99.9=7719, 99.99=10391] 
2023-06-05 12:55:13:632 1370 sec: 76992283 operations; 54597.4 current ops/sec; [READ: Count=273121, Max=135679, Min=433, Avg=4912.29, 90=7263, 99=21695, 99.9=72575, 99.99=89407] [UPDATE: Count=272908, Max=14743, Min=294, Avg=2296.93, 90=3437, 99=6059, 99.9=8783, 99.99=10647] 
2023-06-05 12:55:23:632 1380 sec: 77557973 operations; 56569 current ops/sec; [READ: Count=282984, Max=91007, Min=392, Avg=4778.36, 90=6999, 99=18047, 99.9=80575, 99.99=86143] [UPDATE: Count=282773, Max=13111, Min=346, Avg=2272.45, 90=3399, 99=5467, 99.9=8583, 99.99=10759] 
2023-06-05 12:55:33:632 1390 sec: 78087325 operations; 52935.2 current ops/sec; [READ: Count=264795, Max=548863, Min=406, Avg=5335.42, 90=6415, 99=20111, 99.9=325631, 99.99=435199] [UPDATE: Count=264577, Max=19231, Min=311, Avg=2140.53, 90=3243, 99=5399, 99.9=8983, 99.99=11023] 
2023-06-05 12:55:43:632 1400 sec: 78616716 operations; 52939.1 current ops/sec; [READ: Count=265176, Max=744959, Min=414, Avg=5409.33, 90=6339, 99=17343, 99.9=371455, 99.99=397567] [UPDATE: Count=264206, Max=13479, Min=310, Avg=2107.52, 90=3201, 99=5215, 99.9=8463, 99.99=10599] 
2023-06-05 12:55:53:632 1410 sec: 79161971 operations; 54525.5 current ops/sec; [READ: Count=272497, Max=465151, Min=399, Avg=5211.72, 90=6447, 99=13703, 99.9=376319, 99.99=450303] [UPDATE: Count=272696, Max=18831, Min=320, Avg=2112.92, 90=3221, 99=4963, 99.9=8079, 99.99=10695] 
2023-06-05 12:56:03:632 1420 sec: 79728616 operations; 56664.5 current ops/sec; [READ: Count=283239, Max=147199, Min=402, Avg=4799.37, 90=7295, 99=20367, 99.9=52991, 99.99=111999] [UPDATE: Count=283006, Max=19887, Min=344, Avg=2255, 90=3397, 99=5775, 99.9=8879, 99.99=14383] 
2023-06-05 12:56:13:632 1430 sec: 80295735 operations; 56711.9 current ops/sec; [READ: Count=283028, Max=166911, Min=399, Avg=4782.05, 90=7239, 99=20591, 99.9=51391, 99.99=100863] [UPDATE: Count=283747, Max=37279, Min=311, Avg=2268.27, 90=3405, 99=5751, 99.9=9687, 99.99=32495] 
2023-06-05 12:56:23:632 1440 sec: 80854361 operations; 55862.6 current ops/sec; [READ: Count=279297, Max=178943, Min=430, Avg=4911.12, 90=7151, 99=23183, 99.9=98879, 99.99=139775] [UPDATE: Count=280043, Max=19951, Min=336, Avg=2233.55, 90=3375, 99=5719, 99.9=8463, 99.99=10559] 
2023-06-05 12:56:33:632 1450 sec: 81426588 operations; 57222.7 current ops/sec; [READ: Count=286111, Max=116031, Min=389, Avg=4730.87, 90=7243, 99=17199, 99.9=46175, 99.99=86783] [UPDATE: Count=286187, Max=12831, Min=328, Avg=2251.78, 90=3401, 99=5395, 99.9=8179, 99.99=10023] 
2023-06-05 12:56:43:632 1460 sec: 81996612 operations; 57002.4 current ops/sec; [READ: Count=284684, Max=67967, Min=407, Avg=4770.47, 90=7471, 99=17167, 99.9=33471, 99.99=57727] [UPDATE: Count=285323, Max=16527, Min=328, Avg=2237.97, 90=3391, 99=5347, 99.9=7975, 99.99=9911] 
2023-06-05 12:56:53:632 1470 sec: 82560876 operations; 56426.4 current ops/sec; [READ: Count=281921, Max=140031, Min=402, Avg=4827.53, 90=7319, 99=21407, 99.9=58783, 99.99=73919] [UPDATE: Count=282351, Max=29039, Min=337, Avg=2249.52, 90=3415, 99=5643, 99.9=8223, 99.99=10999] 
2023-06-05 12:57:03:632 1480 sec: 83115331 operations; 55445.5 current ops/sec; [READ: Count=277626, Max=382719, Min=410, Avg=5013.01, 90=6823, 99=19935, 99.9=162047, 99.99=228479] [UPDATE: Count=276830, Max=17327, Min=334, Avg=2178.51, 90=3303, 99=5251, 99.9=8115, 99.99=10679] 
2023-06-05 12:57:13:632 1490 sec: 83679412 operations; 56408.1 current ops/sec; [READ: Count=282267, Max=192127, Min=437, Avg=4859.03, 90=6987, 99=15543, 99.9=139903, 99.99=165375] [UPDATE: Count=281699, Max=26127, Min=330, Avg=2219.77, 90=3351, 99=5151, 99.9=7983, 99.99=15951] 
2023-06-05 12:57:23:632 1500 sec: 84251165 operations; 57175.3 current ops/sec; [READ: Count=285790, Max=138239, Min=376, Avg=4728.47, 90=7115, 99=14367, 99.9=78847, 99.99=109887] [UPDATE: Count=285949, Max=11623, Min=333, Avg=2250.95, 90=3385, 99=5071, 99.9=7275, 99.99=8879] 
2023-06-05 12:57:33:632 1510 sec: 84814999 operations; 56383.4 current ops/sec; [READ: Count=282164, Max=330239, Min=426, Avg=4804.17, 90=7055, 99=17487, 99.9=78527, 99.99=209407] [UPDATE: Count=281816, Max=31023, Min=335, Avg=2265.37, 90=3385, 99=5307, 99.9=8019, 99.99=10567] 
2023-06-05 12:57:43:632 1520 sec: 85377367 operations; 56236.8 current ops/sec; [READ: Count=280978, Max=131711, Min=419, Avg=4819.3, 90=7147, 99=20223, 99.9=80191, 99.99=95935] [UPDATE: Count=281218, Max=13567, Min=332, Avg=2281.21, 90=3401, 99=5639, 99.9=8671, 99.99=10735] 
2023-06-05 12:57:53:632 1530 sec: 85938670 operations; 56130.3 current ops/sec; [READ: Count=280812, Max=98943, Min=410, Avg=4844.45, 90=7195, 99=20751, 99.9=70527, 99.99=82431] [UPDATE: Count=280571, Max=29247, Min=344, Avg=2270.72, 90=3389, 99=5807, 99.9=8887, 99.99=11023] 
2023-06-05 12:58:03:632 1540 sec: 86501567 operations; 56289.7 current ops/sec; [READ: Count=281797, Max=74495, Min=402, Avg=4805.74, 90=7335, 99=20191, 99.9=45151, 99.99=55967] [UPDATE: Count=281034, Max=18975, Min=335, Avg=2290, 90=3419, 99=5815, 99.9=8711, 99.99=11151] 
2023-06-05 12:58:13:632 1550 sec: 87057808 operations; 55624.1 current ops/sec; [READ: Count=278154, Max=144127, Min=423, Avg=4890.58, 90=7215, 99=24735, 99.9=52703, 99.99=118207] [UPDATE: Count=278192, Max=13975, Min=328, Avg=2290.87, 90=3431, 99=5779, 99.9=8855, 99.99=10335] 
2023-06-05 12:58:23:632 1560 sec: 87614076 operations; 55626.8 current ops/sec; [READ: Count=277740, Max=121599, Min=395, Avg=4916.1, 90=7127, 99=25023, 99.9=94335, 99.99=115903] [UPDATE: Count=277970, Max=23119, Min=330, Avg=2275.52, 90=3391, 99=5979, 99.9=9447, 99.99=13743] 
2023-06-05 12:58:33:632 1570 sec: 88155758 operations; 54168.2 current ops/sec; [READ: Count=271009, Max=191871, Min=433, Avg=5109.5, 90=7079, 99=26607, 99.9=131711, 99.99=147327] [UPDATE: Count=271203, Max=17871, Min=325, Avg=2256.02, 90=3383, 99=6479, 99.9=9575, 99.99=11967] 
2023-06-05 12:58:43:632 1580 sec: 88705098 operations; 54934 current ops/sec; [READ: Count=275061, Max=114495, Min=385, Avg=4998.8, 90=7311, 99=25903, 99.9=60447, 99.99=96703] [UPDATE: Count=274221, Max=17087, Min=331, Avg=2281.04, 90=3429, 99=6347, 99.9=9351, 99.99=11423] 
2023-06-05 12:58:53:632 1590 sec: 89249584 operations; 54448.6 current ops/sec; [READ: Count=272944, Max=81151, Min=415, Avg=5031.4, 90=7379, 99=25279, 99.9=57311, 99.99=65503] [UPDATE: Count=271652, Max=32111, Min=340, Avg=2304.8, 90=3445, 99=6503, 99.9=9319, 99.99=12311] 
2023-06-05 12:59:03:632 1600 sec: 89785839 operations; 53625.5 current ops/sec; [READ: Count=268094, Max=271615, Min=349, Avg=5183.22, 90=7003, 99=25839, 99.9=144895, 99.99=220159] [UPDATE: Count=268081, Max=17583, Min=319, Avg=2269.05, 90=3385, 99=6399, 99.9=9055, 99.99=11055] 
2023-06-05 12:59:13:632 1610 sec: 90298460 operations; 51262.1 current ops/sec; [READ: Count=256164, Max=587775, Min=378, Avg=5620.62, 90=6267, 99=23103, 99.9=323839, 99.99=492287] [UPDATE: Count=256095, Max=18815, Min=303, Avg=2168.61, 90=3239, 99=5591, 99.9=8839, 99.99=12039] 
2023-06-05 12:59:23:632 1620 sec: 90834331 operations; 53587.1 current ops/sec; [READ: Count=266890, Max=401919, Min=397, Avg=5274.74, 90=6515, 99=16479, 99.9=323583, 99.99=331007] [UPDATE: Count=269083, Max=18607, Min=310, Avg=2218.62, 90=3293, 99=5051, 99.9=8071, 99.99=12183] 
2023-06-05 12:59:33:632 1630 sec: 91401251 operations; 56692 current ops/sec; [READ: Count=282929, Max=124095, Min=413, Avg=4732.41, 90=7087, 99=14559, 99.9=53119, 99.99=74303] [UPDATE: Count=283956, Max=19615, Min=340, Avg=2323.36, 90=3425, 99=5319, 99.9=8375, 99.99=12543] 
2023-06-05 12:59:43:632 1640 sec: 91973523 operations; 57227.2 current ops/sec; [READ: Count=286233, Max=34047, Min=388, Avg=4658.65, 90=7103, 99=12967, 99.9=23855, 99.99=28351] [UPDATE: Count=286206, Max=20271, Min=319, Avg=2325.34, 90=3421, 99=5119, 99.9=8007, 99.99=10487] 
2023-06-05 12:59:53:632 1650 sec: 92537948 operations; 56442.5 current ops/sec; [READ: Count=282664, Max=117951, Min=384, Avg=4765.09, 90=7007, 99=16183, 99.9=77759, 99.99=94783] [UPDATE: Count=281890, Max=29727, Min=327, Avg=2314.33, 90=3401, 99=5415, 99.9=8727, 99.99=11343] 
2023-06-05 13:00:03:632 1660 sec: 93105742 operations; 56779.4 current ops/sec; [READ: Count=283624, Max=90431, Min=420, Avg=4722.62, 90=6975, 99=14367, 99.9=69439, 99.99=84479] [UPDATE: Count=284102, Max=18399, Min=347, Avg=2321.62, 90=3407, 99=5171, 99.9=7651, 99.99=10711] 
2023-06-05 13:00:13:632 1670 sec: 93660101 operations; 55435.9 current ops/sec; [READ: Count=276870, Max=338943, Min=408, Avg=4902.8, 90=6887, 99=16095, 99.9=99199, 99.99=271871] [UPDATE: Count=277558, Max=11911, Min=356, Avg=2309.85, 90=3391, 99=5231, 99.9=7835, 99.99=9471] 
2023-06-05 13:00:23:632 1680 sec: 94223225 operations; 56312.4 current ops/sec; [READ: Count=282676, Max=136191, Min=453, Avg=4740.42, 90=7099, 99=13767, 99.9=25999, 99.99=92799] [UPDATE: Count=280503, Max=11439, Min=346, Avg=2352.94, 90=3427, 99=5151, 99.9=7447, 99.99=9271] 
2023-06-05 13:00:33:632 1690 sec: 94764570 operations; 54134.5 current ops/sec; [READ: Count=270160, Max=259327, Min=406, Avg=5040.61, 90=7139, 99=17807, 99.9=131583, 99.99=187391] [UPDATE: Count=271310, Max=13591, Min=335, Avg=2350.37, 90=3439, 99=5647, 99.9=8375, 99.99=10463] 
2023-06-05 13:00:43:632 1700 sec: 95322501 operations; 55793.1 current ops/sec; [READ: Count=278731, Max=70591, Min=430, Avg=4817.45, 90=7179, 99=16359, 99.9=48863, 99.99=55295] [UPDATE: Count=278497, Max=24207, Min=348, Avg=2354.97, 90=3447, 99=5563, 99.9=9207, 99.99=14119] 
2023-06-05 13:00:53:632 1710 sec: 95858521 operations; 53602 current ops/sec; [READ: Count=268026, Max=214655, Min=443, Avg=5135.93, 90=7051, 99=28031, 99.9=132351, 99.99=189695] [UPDATE: Count=268596, Max=25599, Min=354, Avg=2311.7, 90=3407, 99=6115, 99.9=9431, 99.99=11935] 
2023-06-05 13:01:03:636 1720 sec: 96405224 operations; 54653.9 current ops/sec; [READ: Count=273331, Max=236415, Min=415, Avg=5005.62, 90=6979, 99=20879, 99.9=98559, 99.99=189311] [UPDATE: Count=273511, Max=17359, Min=333, Avg=2315.2, 90=3399, 99=5527, 99.9=8719, 99.99=11663] 
2023-06-05 13:01:13:632 1730 sec: 96947468 operations; 54240.67 current ops/sec; [READ: Count=270584, Max=163199, Min=469, Avg=5051.55, 90=6991, 99=21967, 99.9=97791, 99.99=155519] [UPDATE: Count=271455, Max=13823, Min=299, Avg=2326.07, 90=3409, 99=5695, 99.9=8591, 99.99=10351] 
2023-06-05 13:01:23:632 1740 sec: 97490370 operations; 54290.2 current ops/sec; [READ: Count=271743, Max=170367, Min=405, Avg=5029.84, 90=7067, 99=20543, 99.9=86207, 99.99=134783] [UPDATE: Count=271225, Max=16799, Min=336, Avg=2326.34, 90=3427, 99=5719, 99.9=8623, 99.99=11015] 
2023-06-05 13:01:33:632 1750 sec: 98048233 operations; 55786.3 current ops/sec; [READ: Count=278923, Max=151679, Min=459, Avg=4826.21, 90=7131, 99=14207, 99.9=69759, 99.99=115263] [UPDATE: Count=278866, Max=14119, Min=350, Avg=2348.25, 90=3445, 99=5315, 99.9=7999, 99.99=9943] 
2023-06-05 13:01:43:632 1760 sec: 98612752 operations; 56451.9 current ops/sec; [READ: Count=281933, Max=212863, Min=437, Avg=4722.65, 90=7067, 99=13335, 99.9=33887, 99.99=41215] [UPDATE: Count=282595, Max=210815, Min=345, Avg=2362.71, 90=3449, 99=5199, 99.9=8239, 99.99=11239] 
2023-06-05 13:01:53:632 1770 sec: 99173130 operations; 56037.8 current ops/sec; [READ: Count=280963, Max=43007, Min=419, Avg=4762.27, 90=7095, 99=16767, 99.9=30607, 99.99=35999] [UPDATE: Count=279336, Max=17647, Min=349, Avg=2366.16, 90=3453, 99=5543, 99.9=8887, 99.99=11263] 
2023-06-05 13:02:03:632 1780 sec: 99729879 operations; 55674.9 current ops/sec; [READ: Count=278261, Max=110975, Min=460, Avg=4800.51, 90=7015, 99=16687, 99.9=33791, 99.99=99839] [UPDATE: Count=278459, Max=18351, Min=370, Avg=2384.14, 90=3457, 99=5527, 99.9=9183, 99.99=13751] 
2023-06-05 13:02:13:632 1790 sec: 100274571 operations; 54469.2 current ops/sec; [READ: Count=272529, Max=303359, Min=397, Avg=4990.24, 90=6967, 99=19487, 99.9=116991, 99.99=205695] [UPDATE: Count=272387, Max=67007, Min=351, Avg=2341.16, 90=3389, 99=5403, 99.9=8615, 99.99=63327] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:23:632 1800 sec: 100871062 operations; 59649.1 current ops/sec; [READ: Count=298192, Max=206975, Min=394, Avg=4524.02, 90=6207, 99=10279, 99.9=161407, 99.99=175359] [UPDATE: Count=297789, Max=12039, Min=306, Avg=2183.14, 90=3231, 99=4663, 99.9=7427, 99.99=9535] 
Still waiting for thread Thread-21 to complete. Workload status: true
2023-06-05 13:02:25:879 1802 sec: 100872531 operations; 653.76 current ops/sec; [READ: Count=786, Max=8663, Min=765, Avg=3516.7, 90=5363, 99=6547, 99.9=7455, 99.99=8663] [CLEANUP: Count=200, Max=2224127, Min=0, Avg=11116.85, 90=2, 99=18, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802248
[OVERALL], Throughput(ops/sec), 55970.39419658116
[TOTAL_GCS_PS_Scavenge], Count, 6909
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17411
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9660712621126505
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 130
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0072132137197544405
[TOTAL_GCs], Count, 6912
[TOTAL_GC_TIME], Time(ms), 17541
[TOTAL_GC_TIME_%], Time(%), 0.9732844758324048
[READ], Operations, 50440027
[READ], AverageLatency(us), 4512.1106170700505
[READ], MinLatency(us), 349
[READ], MaxLatency(us), 744959
[READ], 95thPercentileLatency(us), 7911
[READ], 99thPercentileLatency(us), 16087
[READ], Return=OK, 50440027
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11116.85
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 18
[UPDATE], Operations, 50432504
[UPDATE], AverageLatency(us), 2187.7825658230254
[UPDATE], MinLatency(us), 294
[UPDATE], MaxLatency(us), 293887
[UPDATE], 95thPercentileLatency(us), 3697
[UPDATE], 99thPercentileLatency(us), 5279
[UPDATE], Return=OK, 50432504
