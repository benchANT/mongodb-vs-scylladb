bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:21:318 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:31:303 10 sec: 510959 operations; 51095.9 current ops/sec; [READ: Count=255502, Max=126591, Min=504, Avg=3233.1, 90=4991, 99=15447, 99.9=67839, 99.99=120767] [UPDATE: Count=256906, Max=125695, Min=449, Avg=1955.26, 90=2737, 99=8091, 99.9=58239, 99.99=118847] 
2023-06-05 12:32:41:303 20 sec: 1073390 operations; 56243.1 current ops/sec; [READ: Count=281200, Max=45151, Min=543, Avg=3752.26, 90=5699, 99=17711, 99.9=22863, 99.99=28143] [UPDATE: Count=280954, Max=14471, Min=462, Avg=1944.92, 90=2879, 99=5843, 99.9=7959, 99.99=9279] 
2023-06-05 12:32:51:303 30 sec: 1635777 operations; 56238.7 current ops/sec; [READ: Count=281868, Max=38111, Min=524, Avg=3870.01, 90=5927, 99=17759, 99.9=31599, 99.99=35583] [UPDATE: Count=280408, Max=14455, Min=468, Avg=1983.48, 90=2951, 99=5863, 99.9=8127, 99.99=9703] 
2023-06-05 12:33:01:303 40 sec: 2198227 operations; 56245 current ops/sec; [READ: Count=280953, Max=39999, Min=503, Avg=3951.43, 90=6059, 99=18239, 99.9=31103, 99.99=34943] [UPDATE: Count=281639, Max=18367, Min=470, Avg=2010.97, 90=2999, 99=6003, 99.9=8155, 99.99=9575] 
2023-06-05 12:33:11:303 50 sec: 2758161 operations; 55993.4 current ops/sec; [READ: Count=280059, Max=155519, Min=553, Avg=4296.12, 90=6615, 99=20399, 99.9=64831, 99.99=85311] [UPDATE: Count=279983, Max=15495, Min=452, Avg=2082.47, 90=3123, 99=6287, 99.9=8327, 99.99=9735] 
2023-06-05 12:33:21:303 60 sec: 3321852 operations; 56369.1 current ops/sec; [READ: Count=281401, Max=124735, Min=528, Avg=4563.71, 90=6615, 99=27343, 99.9=80383, 99.99=88383] [UPDATE: Count=282291, Max=12383, Min=484, Avg=2103.24, 90=3157, 99=6327, 99.9=8319, 99.99=9727] 
2023-06-05 12:33:31:306 70 sec: 3885473 operations; 56350.83 current ops/sec; [READ: Count=281951, Max=66303, Min=543, Avg=4254.1, 90=6575, 99=19279, 99.9=35199, 99.99=59359] [UPDATE: Count=281651, Max=39583, Min=438, Avg=2122.07, 90=3193, 99=6107, 99.9=8223, 99.99=9895] 
2023-06-05 12:33:41:303 80 sec: 4447899 operations; 56253.85 current ops/sec; [READ: Count=281293, Max=66943, Min=529, Avg=4290.18, 90=6687, 99=19231, 99.9=33471, 99.99=46623] [UPDATE: Count=281014, Max=19471, Min=465, Avg=2135.26, 90=3223, 99=6219, 99.9=8263, 99.99=9799] 
2023-06-05 12:33:51:303 90 sec: 5010673 operations; 56277.4 current ops/sec; [READ: Count=281513, Max=50335, Min=524, Avg=4298.56, 90=6667, 99=19039, 99.9=35775, 99.99=43487] [UPDATE: Count=281276, Max=27023, Min=459, Avg=2144.66, 90=3245, 99=6159, 99.9=8255, 99.99=10863] 
2023-06-05 12:34:01:303 100 sec: 5573210 operations; 56253.7 current ops/sec; [READ: Count=281648, Max=48031, Min=560, Avg=4289.75, 90=6747, 99=19983, 99.9=29247, 99.99=37599] [UPDATE: Count=280904, Max=17727, Min=436, Avg=2126.17, 90=3215, 99=6243, 99.9=8295, 99.99=10775] 
2023-06-05 12:34:11:303 110 sec: 6131600 operations; 55839 current ops/sec; [READ: Count=279761, Max=145023, Min=531, Avg=4591.36, 90=6883, 99=24255, 99.9=92031, 99.99=108287] [UPDATE: Count=278761, Max=14487, Min=481, Avg=2143.64, 90=3219, 99=6751, 99.9=9159, 99.99=10911] 
2023-06-05 12:34:21:303 120 sec: 6696226 operations; 56462.6 current ops/sec; [READ: Count=282331, Max=117311, Min=512, Avg=4672.94, 90=6791, 99=24303, 99.9=95871, 99.99=114367] [UPDATE: Count=281533, Max=31327, Min=479, Avg=2168.83, 90=3237, 99=6691, 99.9=9391, 99.99=16327] 
2023-06-05 12:34:31:303 130 sec: 7254851 operations; 55862.5 current ops/sec; [READ: Count=279772, Max=263679, Min=544, Avg=4570.24, 90=6911, 99=22655, 99.9=34303, 99.99=157439] [UPDATE: Count=279383, Max=22671, Min=469, Avg=2166.74, 90=3223, 99=7011, 99.9=9511, 99.99=11575] 
2023-06-05 12:34:41:303 140 sec: 7792802 operations; 53795.1 current ops/sec; [READ: Count=268638, Max=301311, Min=549, Avg=5199.48, 90=6927, 99=23487, 99.9=163071, 99.99=263423] [UPDATE: Count=269363, Max=12439, Min=478, Avg=2160.61, 90=3213, 99=7027, 99.9=9479, 99.99=10991] 
2023-06-05 12:34:51:303 150 sec: 8337961 operations; 54515.9 current ops/sec; [READ: Count=273152, Max=302591, Min=544, Avg=5155.7, 90=6751, 99=25871, 99.9=161279, 99.99=237951] [UPDATE: Count=271986, Max=17071, Min=452, Avg=2143.76, 90=3179, 99=6995, 99.9=9479, 99.99=12447] 
2023-06-05 12:35:01:303 160 sec: 8892974 operations; 55501.3 current ops/sec; [READ: Count=277459, Max=346879, Min=513, Avg=5048.11, 90=6531, 99=21567, 99.9=191359, 99.99=270847] [UPDATE: Count=277499, Max=17823, Min=459, Avg=2143.98, 90=3195, 99=6431, 99.9=9167, 99.99=11343] 
2023-06-05 12:35:11:303 170 sec: 9439076 operations; 54610.2 current ops/sec; [READ: Count=273360, Max=309759, Min=556, Avg=5062.58, 90=6667, 99=22655, 99.9=188799, 99.99=228735] [UPDATE: Count=272702, Max=223871, Min=474, Avg=2229.26, 90=3311, 99=6383, 99.9=9159, 99.99=40863] 
2023-06-05 12:35:21:303 180 sec: 9996808 operations; 55773.2 current ops/sec; [READ: Count=278634, Max=372991, Min=572, Avg=5001.86, 90=6403, 99=24479, 99.9=193919, 99.99=244863] [UPDATE: Count=279253, Max=13071, Min=450, Avg=2171.47, 90=3231, 99=5643, 99.9=8311, 99.99=10191] 
2023-06-05 12:35:31:303 190 sec: 10580216 operations; 58340.8 current ops/sec; [READ: Count=291712, Max=257663, Min=530, Avg=4606.73, 90=6423, 99=23119, 99.9=110719, 99.99=164991] [UPDATE: Count=290928, Max=31823, Min=472, Avg=2214.88, 90=3243, 99=5799, 99.9=9063, 99.99=14295] 
2023-06-05 12:35:41:303 200 sec: 11149509 operations; 56929.3 current ops/sec; [READ: Count=284418, Max=290303, Min=565, Avg=4776.4, 90=6195, 99=22639, 99.9=189055, 99.99=198655] [UPDATE: Count=285558, Max=25999, Min=449, Avg=2170.17, 90=3205, 99=5439, 99.9=8695, 99.99=11287] 
2023-06-05 12:35:51:303 210 sec: 11733149 operations; 58364 current ops/sec; [READ: Count=291468, Max=175487, Min=562, Avg=4554.84, 90=6307, 99=20079, 99.9=140543, 99.99=164607] [UPDATE: Count=292210, Max=27791, Min=477, Avg=2188.42, 90=3217, 99=5607, 99.9=8839, 99.99=11775] 
2023-06-05 12:36:01:303 220 sec: 12317562 operations; 58441.3 current ops/sec; [READ: Count=291859, Max=112575, Min=539, Avg=4173.88, 90=6107, 99=18735, 99.9=48735, 99.99=78591] [UPDATE: Count=292360, Max=16327, Min=457, Avg=2146.27, 90=3163, 99=5555, 99.9=8607, 99.99=10527] 
2023-06-05 12:36:11:303 230 sec: 12885891 operations; 56832.9 current ops/sec; [READ: Count=283993, Max=143743, Min=533, Avg=4107.76, 90=5887, 99=18175, 99.9=56351, 99.99=83967] [UPDATE: Count=284377, Max=27839, Min=478, Avg=2104.74, 90=3111, 99=5159, 99.9=8199, 99.99=10287] 
2023-06-05 12:36:21:303 240 sec: 13448504 operations; 56261.3 current ops/sec; [READ: Count=281275, Max=31647, Min=570, Avg=3710.07, 90=5559, 99=9487, 99.9=22543, 99.99=27615] [UPDATE: Count=281234, Max=14079, Min=479, Avg=2030.62, 90=3009, 99=4443, 99.9=7027, 99.99=9151] 
2023-06-05 12:36:31:303 250 sec: 14011000 operations; 56249.6 current ops/sec; [READ: Count=281249, Max=37823, Min=560, Avg=3639.51, 90=5511, 99=7919, 99.9=12191, 99.99=21167] [UPDATE: Count=281185, Max=23183, Min=468, Avg=2035.5, 90=3021, 99=4151, 99.9=6247, 99.99=8119] 
2023-06-05 12:36:41:303 260 sec: 14573494 operations; 56249.4 current ops/sec; [READ: Count=280316, Max=23967, Min=542, Avg=3632.52, 90=5531, 99=7951, 99.9=11279, 99.99=17999] [UPDATE: Count=282178, Max=12391, Min=465, Avg=2034.36, 90=3037, 99=4231, 99.9=6283, 99.99=7803] 
2023-06-05 12:36:51:303 270 sec: 15135920 operations; 56242.6 current ops/sec; [READ: Count=281136, Max=32111, Min=552, Avg=3685.69, 90=5619, 99=8535, 99.9=14983, 99.99=23199] [UPDATE: Count=281452, Max=17775, Min=472, Avg=2046.34, 90=3069, 99=4347, 99.9=6639, 99.99=9367] 
2023-06-05 12:37:01:303 280 sec: 15698460 operations; 56254 current ops/sec; [READ: Count=281203, Max=30623, Min=540, Avg=3651.19, 90=5575, 99=8255, 99.9=12391, 99.99=20383] [UPDATE: Count=281295, Max=18799, Min=477, Avg=2033.66, 90=3059, 99=4299, 99.9=6395, 99.99=9823] 
2023-06-05 12:37:11:303 290 sec: 16261002 operations; 56254.2 current ops/sec; [READ: Count=281194, Max=94079, Min=540, Avg=3676.55, 90=5595, 99=8903, 99.9=21263, 99.99=44447] [UPDATE: Count=281420, Max=13887, Min=467, Avg=2021.64, 90=3045, 99=4451, 99.9=6895, 99.99=9191] 
2023-06-05 12:37:21:303 300 sec: 16823506 operations; 56250.4 current ops/sec; [READ: Count=281075, Max=25311, Min=550, Avg=3612.04, 90=5523, 99=8271, 99.9=11823, 99.99=17439] [UPDATE: Count=281282, Max=9903, Min=473, Avg=2008.09, 90=3013, 99=4295, 99.9=6283, 99.99=7639] 
2023-06-05 12:37:31:303 310 sec: 17385947 operations; 56244.1 current ops/sec; [READ: Count=280017, Max=89215, Min=490, Avg=3652.57, 90=5519, 99=8759, 99.9=23567, 99.99=46111] [UPDATE: Count=282640, Max=11831, Min=479, Avg=2010.64, 90=3011, 99=4419, 99.9=6887, 99.99=8999] 
2023-06-05 12:37:41:303 320 sec: 17948502 operations; 56255.5 current ops/sec; [READ: Count=280966, Max=31727, Min=524, Avg=3524.28, 90=5371, 99=8295, 99.9=19887, 99.99=25791] [UPDATE: Count=280841, Max=26847, Min=472, Avg=1966.8, 90=2943, 99=4299, 99.9=7443, 99.99=16167] 
2023-06-05 12:37:51:303 330 sec: 18510993 operations; 56249.1 current ops/sec; [READ: Count=281359, Max=33087, Min=531, Avg=3546.68, 90=5383, 99=9551, 99.9=21343, 99.99=25615] [UPDATE: Count=281802, Max=28719, Min=462, Avg=1947.47, 90=2897, 99=4495, 99.9=8187, 99.99=11791] 
2023-06-05 12:38:01:303 340 sec: 19073466 operations; 56247.3 current ops/sec; [READ: Count=281119, Max=30591, Min=513, Avg=3496.62, 90=5315, 99=9215, 99.9=21295, 99.99=25087] [UPDATE: Count=281319, Max=16879, Min=465, Avg=1934.65, 90=2871, 99=4583, 99.9=8399, 99.99=13439] 
2023-06-05 12:38:11:303 350 sec: 19635996 operations; 56253 current ops/sec; [READ: Count=281199, Max=29647, Min=567, Avg=3514.28, 90=5303, 99=8999, 99.9=20895, 99.99=25151] [UPDATE: Count=281280, Max=21487, Min=453, Avg=1940.89, 90=2875, 99=4407, 99.9=7259, 99.99=9767] 
2023-06-05 12:38:21:303 360 sec: 20198522 operations; 56252.6 current ops/sec; [READ: Count=280889, Max=25439, Min=539, Avg=3401.07, 90=5131, 99=7567, 99.9=16735, 99.99=22047] [UPDATE: Count=281598, Max=21599, Min=475, Avg=1911.39, 90=2833, 99=3923, 99.9=6535, 99.99=16991] 
2023-06-05 12:38:31:303 370 sec: 20760954 operations; 56243.2 current ops/sec; [READ: Count=281261, Max=50815, Min=547, Avg=3407.27, 90=5167, 99=7615, 99.9=11831, 99.99=26799] [UPDATE: Count=281202, Max=11759, Min=476, Avg=1916.69, 90=2849, 99=4027, 99.9=6331, 99.99=8287] 
2023-06-05 12:38:41:303 380 sec: 21323533 operations; 56257.9 current ops/sec; [READ: Count=281472, Max=32831, Min=536, Avg=3376.33, 90=5143, 99=7531, 99.9=9887, 99.99=13367] [UPDATE: Count=281094, Max=11783, Min=473, Avg=1904.57, 90=2835, 99=4021, 99.9=6175, 99.99=7983] 
2023-06-05 12:38:51:303 390 sec: 21886027 operations; 56249.4 current ops/sec; [READ: Count=281228, Max=207359, Min=538, Avg=3440.39, 90=5235, 99=7611, 99.9=10415, 99.99=17503] [UPDATE: Count=281250, Max=214655, Min=449, Avg=1935.81, 90=2881, 99=4079, 99.9=6191, 99.99=12959] 
2023-06-05 12:39:01:303 400 sec: 22448471 operations; 56244.4 current ops/sec; [READ: Count=281305, Max=19439, Min=544, Avg=3519.85, 90=5371, 99=7795, 99.9=10527, 99.99=15135] [UPDATE: Count=281188, Max=15639, Min=453, Avg=1970.13, 90=2949, 99=4163, 99.9=6319, 99.99=7983] 
2023-06-05 12:39:11:303 410 sec: 23011015 operations; 56254.4 current ops/sec; [READ: Count=281533, Max=25791, Min=540, Avg=3615.54, 90=5535, 99=8319, 99.9=13959, 99.99=21199] [UPDATE: Count=280930, Max=23135, Min=464, Avg=1999.8, 90=3003, 99=4283, 99.9=6451, 99.99=8503] 
2023-06-05 12:39:21:303 420 sec: 23573491 operations; 56247.6 current ops/sec; [READ: Count=281058, Max=22111, Min=532, Avg=3633.77, 90=5555, 99=8175, 99.9=11423, 99.99=16415] [UPDATE: Count=281405, Max=11303, Min=471, Avg=2016.11, 90=3021, 99=4267, 99.9=6259, 99.99=8543] 
2023-06-05 12:39:31:303 430 sec: 24135971 operations; 56248 current ops/sec; [READ: Count=281525, Max=20607, Min=540, Avg=3692.53, 90=5647, 99=8335, 99.9=11199, 99.99=15415] [UPDATE: Count=280921, Max=15743, Min=457, Avg=2040.65, 90=3061, 99=4347, 99.9=6235, 99.99=7595] 
2023-06-05 12:39:41:303 440 sec: 24698499 operations; 56252.8 current ops/sec; [READ: Count=280978, Max=23311, Min=569, Avg=3691.34, 90=5651, 99=8271, 99.9=11191, 99.99=14863] [UPDATE: Count=281656, Max=15439, Min=467, Avg=2042.34, 90=3075, 99=4283, 99.9=6215, 99.99=7823] 
2023-06-05 12:39:51:303 450 sec: 25260990 operations; 56249.1 current ops/sec; [READ: Count=281316, Max=27007, Min=539, Avg=3704.93, 90=5675, 99=8391, 99.9=12327, 99.99=19407] [UPDATE: Count=281137, Max=17839, Min=472, Avg=2044.92, 90=3075, 99=4339, 99.9=6467, 99.99=9295] 
2023-06-05 12:40:01:303 460 sec: 25823446 operations; 56245.6 current ops/sec; [READ: Count=281329, Max=29567, Min=546, Avg=3744.95, 90=5743, 99=9183, 99.9=17519, 99.99=24287] [UPDATE: Count=281205, Max=18095, Min=471, Avg=2047.79, 90=3083, 99=4475, 99.9=6823, 99.99=10047] 
2023-06-05 12:40:11:303 470 sec: 26383277 operations; 55983.1 current ops/sec; [READ: Count=280155, Max=85119, Min=554, Avg=4157.15, 90=6183, 99=17951, 99.9=32127, 99.99=46719] [UPDATE: Count=279647, Max=12879, Min=477, Avg=2135.52, 90=3195, 99=5595, 99.9=8399, 99.99=10239] 
2023-06-05 12:40:21:303 480 sec: 26943504 operations; 56022.7 current ops/sec; [READ: Count=280216, Max=283391, Min=530, Avg=4745.56, 90=6211, 99=25119, 99.9=139135, 99.99=226815] [UPDATE: Count=280398, Max=14231, Min=467, Avg=2152.66, 90=3205, 99=5879, 99.9=8863, 99.99=10647] 
2023-06-05 12:40:31:303 490 sec: 27510980 operations; 56747.6 current ops/sec; [READ: Count=284265, Max=159103, Min=547, Avg=3877.43, 90=5775, 99=9679, 99.9=53183, 99.99=97343] [UPDATE: Count=282948, Max=14767, Min=461, Avg=2071.75, 90=3099, 99=4595, 99.9=7231, 99.99=9247] 
2023-06-05 12:40:41:303 500 sec: 28073486 operations; 56250.6 current ops/sec; [READ: Count=281086, Max=40639, Min=552, Avg=3762.18, 90=5763, 99=9399, 99.9=18399, 99.99=27887] [UPDATE: Count=281259, Max=11071, Min=477, Avg=2048.55, 90=3083, 99=4543, 99.9=6859, 99.99=8679] 
2023-06-05 12:40:51:303 510 sec: 28635875 operations; 56238.9 current ops/sec; [READ: Count=280862, Max=42495, Min=517, Avg=3700.1, 90=5687, 99=8967, 99.9=18479, 99.99=31999] [UPDATE: Count=281508, Max=20495, Min=471, Avg=2023.79, 90=3043, 99=4479, 99.9=7023, 99.99=10751] 
2023-06-05 12:41:01:303 520 sec: 29198489 operations; 56261.4 current ops/sec; [READ: Count=281702, Max=81087, Min=535, Avg=3777.43, 90=5771, 99=9175, 99.9=29263, 99.99=42047] [UPDATE: Count=280929, Max=19135, Min=460, Avg=2044.39, 90=3085, 99=4583, 99.9=7327, 99.99=10463] 
2023-06-05 12:41:11:303 530 sec: 29760939 operations; 56245 current ops/sec; [READ: Count=281004, Max=27071, Min=549, Avg=3773.79, 90=5815, 99=9119, 99.9=17007, 99.99=21535] [UPDATE: Count=281417, Max=12007, Min=458, Avg=2052.1, 90=3091, 99=4563, 99.9=7131, 99.99=9399] 
2023-06-05 12:41:21:303 540 sec: 30323460 operations; 56252.1 current ops/sec; [READ: Count=281159, Max=24655, Min=531, Avg=3764.67, 90=5795, 99=8855, 99.9=14471, 99.99=20447] [UPDATE: Count=281369, Max=11111, Min=466, Avg=2058.99, 90=3101, 99=4531, 99.9=6875, 99.99=8911] 
2023-06-05 12:41:31:303 550 sec: 30885853 operations; 56239.3 current ops/sec; [READ: Count=280778, Max=39295, Min=547, Avg=3882.84, 90=5943, 99=9967, 99.9=21823, 99.99=27487] [UPDATE: Count=281673, Max=13023, Min=474, Avg=2094.07, 90=3155, 99=4727, 99.9=7411, 99.99=9839] 
2023-06-05 12:41:41:303 560 sec: 31448368 operations; 56251.5 current ops/sec; [READ: Count=281630, Max=32431, Min=562, Avg=3956.58, 90=6007, 99=11135, 99.9=25135, 99.99=29487] [UPDATE: Count=280866, Max=12679, Min=473, Avg=2106.91, 90=3161, 99=4927, 99.9=8327, 99.99=10207] 
2023-06-05 12:41:51:303 570 sec: 31992782 operations; 54441.4 current ops/sec; [READ: Count=272324, Max=410879, Min=524, Avg=4665.31, 90=5759, 99=13247, 99.9=193791, 99.99=351999] [UPDATE: Count=272141, Max=17871, Min=456, Avg=2047.8, 90=3091, 99=4923, 99.9=8719, 99.99=11175] 
2023-06-05 12:42:01:303 580 sec: 32544356 operations; 55157.4 current ops/sec; [READ: Count=275900, Max=390399, Min=522, Avg=4999.28, 90=5927, 99=15119, 99.9=229375, 99.99=300031] [UPDATE: Count=275737, Max=18463, Min=474, Avg=2089.78, 90=3135, 99=4963, 99.9=8011, 99.99=10599] 
2023-06-05 12:42:11:303 590 sec: 33082116 operations; 53776 current ops/sec; [READ: Count=269078, Max=328191, Min=521, Avg=5205.83, 90=6455, 99=23679, 99.9=193407, 99.99=264447] [UPDATE: Count=268605, Max=13343, Min=472, Avg=2176.78, 90=3267, 99=5767, 99.9=8479, 99.99=10543] 
2023-06-05 12:42:21:303 600 sec: 33567804 operations; 48568.8 current ops/sec; [READ: Count=243136, Max=397567, Min=514, Avg=6029.6, 90=7315, 99=44159, 99.9=324607, 99.99=329727] [UPDATE: Count=242589, Max=16607, Min=446, Avg=2188.06, 90=3349, 99=6751, 99.9=9143, 99.99=11215] 
2023-06-05 12:42:31:303 610 sec: 34068207 operations; 50040.3 current ops/sec; [READ: Count=250704, Max=352511, Min=529, Avg=5775.17, 90=7023, 99=33791, 99.9=323839, 99.99=328959] [UPDATE: Count=249783, Max=19151, Min=470, Avg=2215.94, 90=3367, 99=6395, 99.9=9031, 99.99=13199] 
2023-06-05 12:42:41:303 620 sec: 34608343 operations; 54013.6 current ops/sec; [READ: Count=270445, Max=328959, Min=545, Avg=5153.17, 90=6987, 99=31951, 99.9=161151, 99.99=270079] [UPDATE: Count=269636, Max=12719, Min=464, Avg=2253.3, 90=3401, 99=6039, 99.9=8327, 99.99=10215] 
2023-06-05 12:42:51:303 630 sec: 35156938 operations; 54859.5 current ops/sec; [READ: Count=274816, Max=224767, Min=539, Avg=5019.55, 90=7011, 99=29839, 99.9=130943, 99.99=146303] [UPDATE: Count=273831, Max=16687, Min=471, Avg=2259.88, 90=3383, 99=6151, 99.9=8527, 99.99=10815] 
2023-06-05 12:43:01:303 640 sec: 35716153 operations; 55921.5 current ops/sec; [READ: Count=280072, Max=178303, Min=514, Avg=4907.77, 90=6691, 99=20463, 99.9=134911, 99.99=143103] [UPDATE: Count=279167, Max=20639, Min=476, Avg=2240.81, 90=3353, 99=5299, 99.9=7831, 99.99=10127] 
2023-06-05 12:43:11:304 650 sec: 36269243 operations; 55303.47 current ops/sec; [READ: Count=277173, Max=279039, Min=531, Avg=4940.61, 90=6843, 99=21263, 99.9=119615, 99.99=168575] [UPDATE: Count=276140, Max=30687, Min=475, Avg=2279.68, 90=3393, 99=5835, 99.9=8495, 99.99=10031] 
2023-06-05 12:43:21:303 660 sec: 36831205 operations; 56201.82 current ops/sec; [READ: Count=280956, Max=256639, Min=549, Avg=4842.82, 90=6739, 99=16199, 99.9=160639, 99.99=208383] [UPDATE: Count=280811, Max=13495, Min=482, Avg=2275.4, 90=3387, 99=5347, 99.9=7871, 99.99=9599] 
2023-06-05 12:43:31:303 670 sec: 37401470 operations; 57026.5 current ops/sec; [READ: Count=284809, Max=165887, Min=525, Avg=4682.3, 90=7039, 99=15095, 99.9=57311, 99.99=110591] [UPDATE: Count=285448, Max=16207, Min=465, Avg=2334.2, 90=3463, 99=5395, 99.9=7891, 99.99=9623] 
2023-06-05 12:43:41:303 680 sec: 37977609 operations; 57613.9 current ops/sec; [READ: Count=288132, Max=38303, Min=532, Avg=4578.48, 90=7011, 99=12151, 99.9=21103, 99.99=25055] [UPDATE: Count=287841, Max=12415, Min=456, Avg=2360.98, 90=3471, 99=5147, 99.9=7375, 99.99=8911] 
2023-06-05 12:43:51:303 690 sec: 38545385 operations; 56777.6 current ops/sec; [READ: Count=283685, Max=120511, Min=540, Avg=4682.77, 90=6891, 99=13975, 99.9=80255, 99.99=86527] [UPDATE: Count=284139, Max=26975, Min=470, Avg=2359.97, 90=3463, 99=5255, 99.9=8027, 99.99=11439] 
2023-06-05 12:44:01:303 700 sec: 39109207 operations; 56382.2 current ops/sec; [READ: Count=282436, Max=100927, Min=554, Avg=4719.12, 90=6827, 99=13967, 99.9=79231, 99.99=86591] [UPDATE: Count=281383, Max=19087, Min=468, Avg=2369.4, 90=3471, 99=5303, 99.9=8567, 99.99=10759] 
2023-06-05 12:44:11:303 710 sec: 39668978 operations; 55977.1 current ops/sec; [READ: Count=280087, Max=61855, Min=537, Avg=4737.58, 90=6959, 99=15655, 99.9=42015, 99.99=50975] [UPDATE: Count=279686, Max=12607, Min=483, Avg=2402.43, 90=3503, 99=5375, 99.9=8599, 99.99=10535] 
2023-06-05 12:44:21:303 720 sec: 40212033 operations; 54305.5 current ops/sec; [READ: Count=271544, Max=232063, Min=532, Avg=4976.52, 90=6823, 99=20783, 99.9=133631, 99.99=159871] [UPDATE: Count=271589, Max=14111, Min=469, Avg=2384.24, 90=3471, 99=5847, 99.9=9007, 99.99=10591] 
2023-06-05 12:44:31:303 730 sec: 40760659 operations; 54862.6 current ops/sec; [READ: Count=274497, Max=145663, Min=549, Avg=4847.69, 90=7087, 99=15879, 99.9=35583, 99.99=136575] [UPDATE: Count=273813, Max=18543, Min=477, Avg=2443.37, 90=3551, 99=5695, 99.9=8983, 99.99=11775] 
2023-06-05 12:44:41:303 740 sec: 41309351 operations; 54869.2 current ops/sec; [READ: Count=274543, Max=40863, Min=532, Avg=4839.96, 90=7127, 99=18655, 99.9=33279, 99.99=37535] [UPDATE: Count=274498, Max=16975, Min=454, Avg=2442.75, 90=3551, 99=5891, 99.9=9207, 99.99=11511] 
2023-06-05 12:44:51:303 750 sec: 41862023 operations; 55267.2 current ops/sec; [READ: Count=276023, Max=48255, Min=528, Avg=4799.09, 90=7095, 99=16719, 99.9=28767, 99.99=34527] [UPDATE: Count=276586, Max=31535, Min=460, Avg=2438.3, 90=3549, 99=5651, 99.9=8879, 99.99=11623] 
2023-06-05 12:45:01:303 760 sec: 42416393 operations; 55437 current ops/sec; [READ: Count=277260, Max=39391, Min=562, Avg=4778.3, 90=7023, 99=18031, 99.9=26303, 99.99=31087] [UPDATE: Count=277079, Max=18623, Min=485, Avg=2433.97, 90=3525, 99=5831, 99.9=9143, 99.99=11455] 
2023-06-05 12:45:11:303 770 sec: 42963701 operations; 54730.8 current ops/sec; [READ: Count=274275, Max=218751, Min=567, Avg=4847.82, 90=7035, 99=20367, 99.9=30511, 99.99=100799] [UPDATE: Count=272999, Max=15423, Min=476, Avg=2448.61, 90=3547, 99=5767, 99.9=9039, 99.99=10863] 
2023-06-05 12:45:21:303 780 sec: 43473344 operations; 50964.3 current ops/sec; [READ: Count=255109, Max=532991, Min=540, Avg=5497.99, 90=6487, 99=22911, 99.9=273407, 99.99=280319] [UPDATE: Count=254609, Max=214143, Min=463, Avg=2332.15, 90=3409, 99=5639, 99.9=8879, 99.99=11503] 
2023-06-05 12:45:31:303 790 sec: 44008803 operations; 53545.9 current ops/sec; [READ: Count=267625, Max=280319, Min=550, Avg=5145.64, 90=6559, 99=15735, 99.9=271103, 99.99=275455] [UPDATE: Count=267868, Max=12447, Min=468, Avg=2336.91, 90=3419, 99=5227, 99.9=7695, 99.99=9455] 
2023-06-05 12:45:41:303 800 sec: 44572443 operations; 56364 current ops/sec; [READ: Count=281599, Max=64543, Min=601, Avg=4665.33, 90=7027, 99=11127, 99.9=22175, 99.99=29775] [UPDATE: Count=281372, Max=25727, Min=475, Avg=2434.56, 90=3525, 99=5111, 99.9=7803, 99.99=16511] 
2023-06-05 12:45:51:303 810 sec: 45132011 operations; 55956.8 current ops/sec; [READ: Count=280495, Max=49823, Min=564, Avg=4693.54, 90=7039, 99=11471, 99.9=19679, 99.99=30223] [UPDATE: Count=279748, Max=26383, Min=487, Avg=2440.24, 90=3523, 99=5127, 99.9=7535, 99.99=11935] 
2023-06-05 12:46:01:303 820 sec: 45698935 operations; 56692.4 current ops/sec; [READ: Count=283365, Max=32127, Min=535, Avg=4620.07, 90=6895, 99=10463, 99.9=15479, 99.99=22015] [UPDATE: Count=283224, Max=19887, Min=467, Avg=2435.99, 90=3503, 99=4899, 99.9=7239, 99.99=13231] 
2023-06-05 12:46:11:303 830 sec: 46262641 operations; 56370.6 current ops/sec; [READ: Count=281106, Max=104255, Min=560, Avg=4655.7, 90=6887, 99=10847, 99.9=20831, 99.99=43327] [UPDATE: Count=282871, Max=14887, Min=479, Avg=2440.57, 90=3509, 99=4931, 99.9=7143, 99.99=9711] 
2023-06-05 12:46:21:303 840 sec: 46829274 operations; 56663.3 current ops/sec; [READ: Count=283268, Max=31647, Min=553, Avg=4616.71, 90=6859, 99=10199, 99.9=14599, 99.99=21647] [UPDATE: Count=283276, Max=12711, Min=465, Avg=2439.74, 90=3509, 99=4851, 99.9=6803, 99.99=8407] 
2023-06-05 12:46:31:303 850 sec: 47385605 operations; 55633.1 current ops/sec; [READ: Count=278542, Max=88831, Min=547, Avg=4704.92, 90=6867, 99=10823, 99.9=23839, 99.99=45119] [UPDATE: Count=277834, Max=13959, Min=465, Avg=2478.77, 90=3537, 99=4963, 99.9=7455, 99.99=9263] 
2023-06-05 12:46:41:303 860 sec: 47932941 operations; 54733.6 current ops/sec; [READ: Count=273809, Max=48575, Min=562, Avg=4799.31, 90=6943, 99=13023, 99.9=25535, 99.99=39647] [UPDATE: Count=273510, Max=13359, Min=473, Avg=2505.29, 90=3555, 99=5275, 99.9=8455, 99.99=10919] 
2023-06-05 12:46:51:303 870 sec: 48481772 operations; 54883.1 current ops/sec; [READ: Count=275081, Max=34079, Min=518, Avg=4776.35, 90=6935, 99=11703, 99.9=25583, 99.99=29551] [UPDATE: Count=273651, Max=18335, Min=474, Avg=2503.45, 90=3549, 99=5115, 99.9=8091, 99.99=11351] 
2023-06-05 12:47:01:303 880 sec: 49030277 operations; 54850.5 current ops/sec; [READ: Count=274083, Max=37215, Min=559, Avg=4793.16, 90=6987, 99=12887, 99.9=25247, 99.99=29583] [UPDATE: Count=274570, Max=21103, Min=476, Avg=2497.71, 90=3547, 99=5259, 99.9=8791, 99.99=14647] 
2023-06-05 12:47:11:303 890 sec: 49577392 operations; 54711.5 current ops/sec; [READ: Count=273069, Max=33375, Min=571, Avg=4813, 90=7055, 99=13711, 99.9=22559, 99.99=27167] [UPDATE: Count=273900, Max=16007, Min=469, Avg=2499.16, 90=3559, 99=5423, 99.9=8511, 99.99=10743] 
2023-06-05 12:47:21:303 900 sec: 50121106 operations; 54371.4 current ops/sec; [READ: Count=271364, Max=83391, Min=565, Avg=4877.62, 90=6995, 99=17711, 99.9=44767, 99.99=57791] [UPDATE: Count=272404, Max=19887, Min=485, Avg=2480.57, 90=3533, 99=5723, 99.9=8759, 99.99=10815] 
2023-06-05 12:47:31:303 910 sec: 50666222 operations; 54511.6 current ops/sec; [READ: Count=272831, Max=35007, Min=560, Avg=4838.7, 90=6967, 99=16639, 99.9=25903, 99.99=31135] [UPDATE: Count=272235, Max=12871, Min=473, Avg=2493.78, 90=3537, 99=5563, 99.9=8463, 99.99=10455] 
2023-06-05 12:47:41:303 920 sec: 51212869 operations; 54664.7 current ops/sec; [READ: Count=273204, Max=50495, Min=580, Avg=4810.86, 90=6867, 99=14159, 99.9=26463, 99.99=31039] [UPDATE: Count=273340, Max=18207, Min=472, Avg=2506.16, 90=3535, 99=5223, 99.9=8215, 99.99=10767] 
2023-06-05 12:47:51:303 930 sec: 51760833 operations; 54796.4 current ops/sec; [READ: Count=274192, Max=37375, Min=579, Avg=4792.05, 90=6863, 99=13383, 99.9=24639, 99.99=28927] [UPDATE: Count=274006, Max=17167, Min=490, Avg=2501.05, 90=3523, 99=5171, 99.9=7539, 99.99=12471] 
2023-06-05 12:48:01:303 940 sec: 52310841 operations; 55000.8 current ops/sec; [READ: Count=274761, Max=39199, Min=522, Avg=4770.93, 90=6911, 99=12127, 99.9=22671, 99.99=26543] [UPDATE: Count=275166, Max=18511, Min=494, Avg=2500.82, 90=3539, 99=5087, 99.9=7315, 99.99=9367] 
2023-06-05 12:48:11:303 950 sec: 52862249 operations; 55140.8 current ops/sec; [READ: Count=275591, Max=30879, Min=593, Avg=4757.61, 90=6979, 99=11591, 99.9=20751, 99.99=24703] [UPDATE: Count=275878, Max=11207, Min=485, Avg=2494.66, 90=3553, 99=5083, 99.9=7139, 99.99=8519] 
2023-06-05 12:48:21:303 960 sec: 53414040 operations; 55179.1 current ops/sec; [READ: Count=276189, Max=29183, Min=567, Avg=4751.42, 90=6959, 99=11551, 99.9=20959, 99.99=24367] [UPDATE: Count=275582, Max=14471, Min=493, Avg=2491.83, 90=3537, 99=5155, 99.9=7591, 99.99=9231] 
2023-06-05 12:48:31:303 970 sec: 53973916 operations; 55987.6 current ops/sec; [READ: Count=280090, Max=42591, Min=575, Avg=4677.41, 90=6883, 99=10647, 99.9=19359, 99.99=30127] [UPDATE: Count=279829, Max=13335, Min=487, Avg=2462.63, 90=3511, 99=4947, 99.9=7163, 99.99=9183] 
2023-06-05 12:48:41:303 980 sec: 54532435 operations; 55851.9 current ops/sec; [READ: Count=279585, Max=58079, Min=584, Avg=4703.93, 90=6855, 99=11359, 99.9=36799, 99.99=43199] [UPDATE: Count=279000, Max=12503, Min=449, Avg=2452.09, 90=3499, 99=5023, 99.9=7467, 99.99=9319] 
2023-06-05 12:48:51:303 990 sec: 55082468 operations; 55003.3 current ops/sec; [READ: Count=275431, Max=118783, Min=535, Avg=4820.7, 90=6787, 99=12583, 99.9=70463, 99.99=77567] [UPDATE: Count=274603, Max=18207, Min=475, Avg=2444.72, 90=3487, 99=5135, 99.9=7979, 99.99=10887] 
2023-06-05 12:49:01:303 1000 sec: 55634580 operations; 55211.2 current ops/sec; [READ: Count=275576, Max=99775, Min=523, Avg=4789.72, 90=6835, 99=12079, 99.9=55775, 99.99=63007] [UPDATE: Count=276503, Max=57983, Min=481, Avg=2457.1, 90=3491, 99=4967, 99.9=7787, 99.99=56895] 
2023-06-05 12:49:11:303 1010 sec: 56190989 operations; 55640.9 current ops/sec; [READ: Count=278339, Max=46175, Min=519, Avg=4744.05, 90=6951, 99=12671, 99.9=30431, 99.99=39455] [UPDATE: Count=278052, Max=12023, Min=486, Avg=2440.93, 90=3507, 99=5067, 99.9=7491, 99.99=9975] 
2023-06-05 12:49:21:303 1020 sec: 56754885 operations; 56389.6 current ops/sec; [READ: Count=282157, Max=38719, Min=575, Avg=4659.83, 90=6903, 99=11327, 99.9=23039, 99.99=28719] [UPDATE: Count=281789, Max=11495, Min=489, Avg=2428.45, 90=3499, 99=4983, 99.9=6955, 99.99=8663] 
2023-06-05 12:49:31:303 1030 sec: 57319373 operations; 56448.8 current ops/sec; [READ: Count=281844, Max=29871, Min=558, Avg=4640.31, 90=6867, 99=10519, 99.9=16223, 99.99=22607] [UPDATE: Count=282564, Max=11423, Min=451, Avg=2446.28, 90=3507, 99=4867, 99.9=6991, 99.99=9047] 
2023-06-05 12:49:41:303 1040 sec: 57880636 operations; 56126.3 current ops/sec; [READ: Count=280999, Max=35263, Min=555, Avg=4670.24, 90=6867, 99=11231, 99.9=22783, 99.99=27839] [UPDATE: Count=280281, Max=14543, Min=467, Avg=2450.3, 90=3511, 99=4887, 99.9=7459, 99.99=10135] 
2023-06-05 12:49:51:303 1050 sec: 58437393 operations; 55675.7 current ops/sec; [READ: Count=278388, Max=39423, Min=538, Avg=4731.86, 90=6951, 99=13135, 99.9=25599, 99.99=29935] [UPDATE: Count=278410, Max=26671, Min=472, Avg=2449.93, 90=3521, 99=5171, 99.9=7859, 99.99=10303] 
2023-06-05 12:50:01:303 1060 sec: 58997227 operations; 55983.4 current ops/sec; [READ: Count=280376, Max=36767, Min=568, Avg=4693.53, 90=6935, 99=11999, 99.9=25247, 99.99=30271] [UPDATE: Count=279510, Max=25695, Min=476, Avg=2444.44, 90=3497, 99=5079, 99.9=8583, 99.99=16863] 
2023-06-05 12:50:11:303 1070 sec: 59539590 operations; 54236.3 current ops/sec; [READ: Count=271891, Max=202495, Min=533, Avg=4942.11, 90=6975, 99=16879, 99.9=93887, 99.99=142975] [UPDATE: Count=270476, Max=10999, Min=458, Avg=2419.9, 90=3487, 99=5239, 99.9=7791, 99.99=9503] 
2023-06-05 12:50:21:303 1080 sec: 60080762 operations; 54117.2 current ops/sec; [READ: Count=270560, Max=157183, Min=519, Avg=4955.03, 90=7131, 99=16623, 99.9=111743, 99.99=119615] [UPDATE: Count=270653, Max=15959, Min=475, Avg=2436.84, 90=3511, 99=5507, 99.9=8767, 99.99=12487] 
2023-06-05 12:50:31:303 1090 sec: 60638143 operations; 55738.1 current ops/sec; [READ: Count=278913, Max=39295, Min=528, Avg=4725.95, 90=6987, 99=12663, 99.9=26447, 99.99=30687] [UPDATE: Count=278324, Max=13399, Min=445, Avg=2445.88, 90=3501, 99=5131, 99.9=8319, 99.99=10383] 
2023-06-05 12:50:41:303 1100 sec: 61190889 operations; 55274.6 current ops/sec; [READ: Count=275955, Max=56799, Min=550, Avg=4771.02, 90=7015, 99=13335, 99.9=26047, 99.99=29935] [UPDATE: Count=276349, Max=23919, Min=467, Avg=2469.91, 90=3521, 99=5311, 99.9=8439, 99.99=14519] 
2023-06-05 12:50:51:303 1110 sec: 61747995 operations; 55710.6 current ops/sec; [READ: Count=278105, Max=36607, Min=587, Avg=4725.88, 90=6979, 99=12295, 99.9=24415, 99.99=28895] [UPDATE: Count=279466, Max=18655, Min=474, Avg=2449.83, 90=3505, 99=5099, 99.9=7719, 99.99=12935] 
2023-06-05 12:51:01:303 1120 sec: 62301497 operations; 55350.2 current ops/sec; [READ: Count=276512, Max=122559, Min=558, Avg=4795.34, 90=6899, 99=12791, 99.9=63871, 99.99=79103] [UPDATE: Count=277036, Max=17551, Min=490, Avg=2429.72, 90=3491, 99=5163, 99.9=8279, 99.99=11087] 
2023-06-05 12:51:11:303 1130 sec: 62854430 operations; 55293.3 current ops/sec; [READ: Count=276558, Max=96767, Min=525, Avg=4798.97, 90=6927, 99=12423, 99.9=62943, 99.99=74303] [UPDATE: Count=276369, Max=22639, Min=491, Avg=2431.51, 90=3485, 99=5123, 99.9=8703, 99.99=14919] 
2023-06-05 12:51:21:303 1140 sec: 63401735 operations; 54730.5 current ops/sec; [READ: Count=273810, Max=184191, Min=547, Avg=4881.5, 90=6955, 99=17695, 99.9=82239, 99.99=116799] [UPDATE: Count=273543, Max=14735, Min=476, Avg=2422.69, 90=3489, 99=5863, 99.9=9135, 99.99=10999] 
2023-06-05 12:51:31:303 1150 sec: 63960201 operations; 55846.6 current ops/sec; [READ: Count=279153, Max=41183, Min=543, Avg=4744.22, 90=6983, 99=17103, 99.9=28431, 99.99=32799] [UPDATE: Count=279235, Max=15271, Min=465, Avg=2415.97, 90=3479, 99=5683, 99.9=9135, 99.99=10903] 
2023-06-05 12:51:41:303 1160 sec: 64521962 operations; 56176.1 current ops/sec; [READ: Count=280902, Max=42175, Min=580, Avg=4710.62, 90=6983, 99=15623, 99.9=25823, 99.99=29871] [UPDATE: Count=280796, Max=12479, Min=477, Avg=2407.32, 90=3475, 99=5603, 99.9=8935, 99.99=10583] 
2023-06-05 12:51:51:303 1170 sec: 65099353 operations; 57739.1 current ops/sec; [READ: Count=288896, Max=32927, Min=571, Avg=4560.95, 90=6807, 99=13423, 99.9=23967, 99.99=28287] [UPDATE: Count=288616, Max=18479, Min=475, Avg=2361.14, 90=3433, 99=5139, 99.9=7875, 99.99=10119] 
2023-06-05 12:52:01:303 1180 sec: 65679216 operations; 57986.3 current ops/sec; [READ: Count=289950, Max=35359, Min=541, Avg=4545.09, 90=6775, 99=14423, 99.9=24207, 99.99=28175] [UPDATE: Count=289897, Max=18079, Min=481, Avg=2350.17, 90=3415, 99=5299, 99.9=8479, 99.99=10751] 
2023-06-05 12:52:11:303 1190 sec: 66244406 operations; 56519 current ops/sec; [READ: Count=282381, Max=146687, Min=546, Avg=4702.32, 90=6839, 99=15983, 99.9=80447, 99.99=89023] [UPDATE: Count=282840, Max=11663, Min=483, Avg=2372.43, 90=3449, 99=5463, 99.9=8471, 99.99=10151] 
2023-06-05 12:52:21:303 1200 sec: 66821598 operations; 57719.2 current ops/sec; [READ: Count=288890, Max=97535, Min=568, Avg=4583.34, 90=6751, 99=12503, 99.9=71167, 99.99=86079] [UPDATE: Count=288327, Max=18335, Min=483, Avg=2343.18, 90=3407, 99=5035, 99.9=7499, 99.99=9391] 
2023-06-05 12:52:31:303 1210 sec: 67414599 operations; 59300.1 current ops/sec; [READ: Count=295832, Max=33631, Min=570, Avg=4419.87, 90=6675, 99=10567, 99.9=17103, 99.99=25151] [UPDATE: Count=296996, Max=21439, Min=484, Avg=2326.97, 90=3383, 99=4887, 99.9=7371, 99.99=14007] 
2023-06-05 12:52:41:303 1220 sec: 68004752 operations; 59015.3 current ops/sec; [READ: Count=294491, Max=232959, Min=541, Avg=4449.73, 90=6755, 99=11023, 99.9=17535, 99.99=28223] [UPDATE: Count=295745, Max=229887, Min=470, Avg=2329.5, 90=3389, 99=4859, 99.9=7079, 99.99=11183] 
2023-06-05 12:52:51:303 1230 sec: 68586797 operations; 58204.5 current ops/sec; [READ: Count=290776, Max=232959, Min=565, Avg=4553.56, 90=6691, 99=11319, 99.9=53599, 99.99=166527] [UPDATE: Count=291355, Max=26671, Min=480, Avg=2317.31, 90=3377, 99=4923, 99.9=7215, 99.99=9815] 
2023-06-05 12:53:01:303 1240 sec: 69165554 operations; 57875.7 current ops/sec; [READ: Count=289734, Max=42175, Min=596, Avg=4543.14, 90=6863, 99=11591, 99.9=27279, 99.99=34271] [UPDATE: Count=288859, Max=18335, Min=491, Avg=2362.21, 90=3429, 99=5015, 99.9=7447, 99.99=10711] 
2023-06-05 12:53:11:303 1250 sec: 69751241 operations; 58568.7 current ops/sec; [READ: Count=293064, Max=31615, Min=579, Avg=4478.67, 90=6791, 99=10807, 99.9=17135, 99.99=23535] [UPDATE: Count=292401, Max=18655, Min=491, Avg=2345.04, 90=3415, 99=4967, 99.9=7031, 99.99=8687] 
2023-06-05 12:53:21:303 1260 sec: 70331708 operations; 58046.7 current ops/sec; [READ: Count=290778, Max=53311, Min=568, Avg=4534, 90=6855, 99=12183, 99.9=22351, 99.99=44383] [UPDATE: Count=289813, Max=18959, Min=494, Avg=2351.51, 90=3431, 99=5123, 99.9=7771, 99.99=10575] 
2023-06-05 12:53:31:303 1270 sec: 70914863 operations; 58315.5 current ops/sec; [READ: Count=290808, Max=38463, Min=523, Avg=4512.16, 90=6815, 99=11703, 99.9=22095, 99.99=26383] [UPDATE: Count=292398, Max=14823, Min=479, Avg=2348.46, 90=3423, 99=4919, 99.9=8239, 99.99=10775] 
2023-06-05 12:53:41:303 1280 sec: 71472140 operations; 55727.7 current ops/sec; [READ: Count=278546, Max=299775, Min=515, Avg=4848.69, 90=6779, 99=14527, 99.9=158719, 99.99=169215] [UPDATE: Count=278651, Max=16055, Min=460, Avg=2325.46, 90=3409, 99=5175, 99.9=8511, 99.99=10391] 
2023-06-05 12:53:51:303 1290 sec: 72033000 operations; 56086 current ops/sec; [READ: Count=280413, Max=144383, Min=588, Avg=4764.05, 90=6875, 99=12543, 99.9=114239, 99.99=137983] [UPDATE: Count=280643, Max=27999, Min=478, Avg=2366.38, 90=3457, 99=5163, 99.9=7899, 99.99=11863] 
2023-06-05 12:54:01:303 1300 sec: 72605553 operations; 57255.3 current ops/sec; [READ: Count=286132, Max=109055, Min=583, Avg=4649.95, 90=6779, 99=14231, 99.9=60575, 99.99=75583] [UPDATE: Count=286401, Max=18191, Min=477, Avg=2333.31, 90=3407, 99=5227, 99.9=8415, 99.99=11167] 
2023-06-05 12:54:11:303 1310 sec: 73172615 operations; 56706.2 current ops/sec; [READ: Count=283139, Max=160383, Min=594, Avg=4725.3, 90=6859, 99=18783, 99.9=59647, 99.99=88575] [UPDATE: Count=283882, Max=15031, Min=451, Avg=2328.34, 90=3417, 99=5575, 99.9=9335, 99.99=11383] 
2023-06-05 12:54:21:303 1320 sec: 73721892 operations; 54927.7 current ops/sec; [READ: Count=273921, Max=268031, Min=535, Avg=4995.65, 90=6715, 99=21807, 99.9=160383, 99.99=167679] [UPDATE: Count=275366, Max=13599, Min=473, Avg=2290.22, 90=3361, 99=5771, 99.9=9423, 99.99=11151] 
2023-06-05 12:54:31:303 1330 sec: 74268645 operations; 54675.3 current ops/sec; [READ: Count=273677, Max=132863, Min=525, Avg=4969.56, 90=7171, 99=25263, 99.9=69375, 99.99=93951] [UPDATE: Count=273130, Max=18543, Min=455, Avg=2341.82, 90=3449, 99=6195, 99.9=9359, 99.99=11343] 
2023-06-05 12:54:41:303 1340 sec: 74817298 operations; 54865.3 current ops/sec; [READ: Count=273666, Max=184703, Min=554, Avg=4953.15, 90=7223, 99=24495, 99.9=59327, 99.99=104639] [UPDATE: Count=275035, Max=21215, Min=473, Avg=2340.3, 90=3455, 99=6103, 99.9=9471, 99.99=15759] 
2023-06-05 12:54:51:303 1350 sec: 75374745 operations; 55744.7 current ops/sec; [READ: Count=278545, Max=132223, Min=568, Avg=4825.52, 90=7155, 99=18095, 99.9=94527, 99.99=103103] [UPDATE: Count=278486, Max=26591, Min=448, Avg=2351.11, 90=3463, 99=5659, 99.9=8855, 99.99=14591] 
2023-06-05 12:55:01:303 1360 sec: 75941476 operations; 56673.1 current ops/sec; [READ: Count=283969, Max=102207, Min=573, Avg=4685.57, 90=7127, 99=13495, 99.9=29279, 99.99=93247] [UPDATE: Count=283107, Max=18863, Min=487, Avg=2363.23, 90=3473, 99=5215, 99.9=7663, 99.99=11599] 
2023-06-05 12:55:11:303 1370 sec: 76493307 operations; 55183.1 current ops/sec; [READ: Count=276130, Max=135039, Min=557, Avg=4858.43, 90=7231, 99=18623, 99.9=59455, 99.99=82175] [UPDATE: Count=275623, Max=17775, Min=465, Avg=2384.27, 90=3503, 99=5739, 99.9=8655, 99.99=10839] 
2023-06-05 12:55:21:303 1380 sec: 77035630 operations; 54232.3 current ops/sec; [READ: Count=271091, Max=109951, Min=546, Avg=5002.34, 90=7195, 99=23375, 99.9=81791, 99.99=86655] [UPDATE: Count=271311, Max=12855, Min=456, Avg=2371.77, 90=3497, 99=5855, 99.9=8783, 99.99=10463] 
2023-06-05 12:55:31:303 1390 sec: 77565917 operations; 53028.7 current ops/sec; [READ: Count=265051, Max=534015, Min=552, Avg=5241.52, 90=6711, 99=20463, 99.9=324863, 99.99=422143] [UPDATE: Count=265302, Max=12967, Min=459, Avg=2278.8, 90=3391, 99=5715, 99.9=9359, 99.99=11431] 
2023-06-05 12:55:41:303 1400 sec: 78087635 operations; 52171.8 current ops/sec; [READ: Count=261082, Max=414207, Min=534, Avg=5438.36, 90=6515, 99=16463, 99.9=372991, 99.99=398847] [UPDATE: Count=260587, Max=20495, Min=459, Avg=2225.32, 90=3321, 99=5303, 99.9=8591, 99.99=12631] 
2023-06-05 12:55:51:303 1410 sec: 78614539 operations; 52690.4 current ops/sec; [READ: Count=263417, Max=435711, Min=547, Avg=5380.66, 90=6443, 99=16479, 99.9=358655, 99.99=415999] [UPDATE: Count=263505, Max=36927, Min=447, Avg=2197, 90=3295, 99=5143, 99.9=8671, 99.99=31615] 
2023-06-05 12:56:01:303 1420 sec: 79163487 operations; 54894.8 current ops/sec; [READ: Count=274710, Max=464127, Min=509, Avg=4990.38, 90=7143, 99=17903, 99.9=104959, 99.99=449279] [UPDATE: Count=274407, Max=17839, Min=456, Avg=2319.44, 90=3457, 99=5523, 99.9=8511, 99.99=11095] 
2023-06-05 12:56:11:303 1430 sec: 79716890 operations; 55340.3 current ops/sec; [READ: Count=276440, Max=85247, Min=550, Avg=4861.38, 90=7403, 99=19999, 99.9=43071, 99.99=55871] [UPDATE: Count=276565, Max=15295, Min=459, Avg=2367.22, 90=3521, 99=5911, 99.9=8895, 99.99=10991] 
2023-06-05 12:56:21:303 1440 sec: 80264678 operations; 54778.8 current ops/sec; [READ: Count=274501, Max=180351, Min=519, Avg=4948.42, 90=7279, 99=22047, 99.9=77695, 99.99=121855] [UPDATE: Count=273482, Max=16703, Min=467, Avg=2340.03, 90=3491, 99=5835, 99.9=8639, 99.99=11303] 
2023-06-05 12:56:31:303 1450 sec: 80817764 operations; 55308.6 current ops/sec; [READ: Count=276869, Max=181503, Min=576, Avg=4891.86, 90=7247, 99=19039, 99.9=74175, 99.99=138751] [UPDATE: Count=276271, Max=12591, Min=463, Avg=2337.21, 90=3487, 99=5471, 99.9=8263, 99.99=10399] 
2023-06-05 12:56:41:303 1460 sec: 81372190 operations; 55442.6 current ops/sec; [READ: Count=277915, Max=93951, Min=538, Avg=4865.65, 90=7547, 99=17135, 99.9=33503, 99.99=81471] [UPDATE: Count=276603, Max=13263, Min=480, Avg=2339.93, 90=3495, 99=5475, 99.9=8127, 99.99=9983] 
2023-06-05 12:56:51:303 1470 sec: 81923341 operations; 55115.1 current ops/sec; [READ: Count=275291, Max=110335, Min=522, Avg=4911.6, 90=7475, 99=20351, 99.9=51103, 99.99=64735] [UPDATE: Count=275729, Max=25167, Min=462, Avg=2346.3, 90=3509, 99=5663, 99.9=8271, 99.99=10815] 
2023-06-05 12:57:01:303 1480 sec: 82466657 operations; 54331.6 current ops/sec; [READ: Count=272223, Max=280575, Min=554, Avg=5072.18, 90=6963, 99=21839, 99.9=160767, 99.99=213631] [UPDATE: Count=270714, Max=30399, Min=465, Avg=2285.36, 90=3411, 99=5419, 99.9=8751, 99.99=15959] 
2023-06-05 12:57:11:303 1490 sec: 83013702 operations; 54704.5 current ops/sec; [READ: Count=272985, Max=194431, Min=516, Avg=5000.77, 90=7051, 99=16111, 99.9=160511, 99.99=167807] [UPDATE: Count=274473, Max=26799, Min=446, Avg=2307.37, 90=3433, 99=5135, 99.9=7559, 99.99=9543] 
2023-06-05 12:57:21:303 1500 sec: 83566109 operations; 55240.7 current ops/sec; [READ: Count=276345, Max=137855, Min=553, Avg=4888.74, 90=7239, 99=15223, 99.9=92287, 99.99=131839] [UPDATE: Count=275970, Max=16103, Min=480, Avg=2349.96, 90=3483, 99=5283, 99.9=7671, 99.99=11455] 
2023-06-05 12:57:31:303 1510 sec: 84120181 operations; 55407.2 current ops/sec; [READ: Count=276829, Max=264447, Min=516, Avg=4838.25, 90=7207, 99=15847, 99.9=51359, 99.99=140799] [UPDATE: Count=277243, Max=14743, Min=475, Avg=2371.68, 90=3495, 99=5319, 99.9=7879, 99.99=9991] 
2023-06-05 12:57:41:303 1520 sec: 84664854 operations; 54467.3 current ops/sec; [READ: Count=272762, Max=286207, Min=551, Avg=4968, 90=7191, 99=20815, 99.9=83135, 99.99=180991] [UPDATE: Count=272021, Max=22303, Min=473, Avg=2374.93, 90=3493, 99=5639, 99.9=8823, 99.99=11543] 
2023-06-05 12:57:51:303 1530 sec: 85210441 operations; 54558.7 current ops/sec; [READ: Count=272495, Max=97279, Min=537, Avg=4970.99, 90=7267, 99=21567, 99.9=77247, 99.99=87487] [UPDATE: Count=273009, Max=21263, Min=475, Avg=2361.45, 90=3479, 99=5939, 99.9=9039, 99.99=11247] 
2023-06-05 12:58:01:303 1540 sec: 85758375 operations; 54793.4 current ops/sec; [READ: Count=273695, Max=81727, Min=548, Avg=4914.91, 90=7407, 99=20335, 99.9=51199, 99.99=63615] [UPDATE: Count=273982, Max=19279, Min=466, Avg=2388.09, 90=3515, 99=5923, 99.9=9071, 99.99=14855] 
2023-06-05 12:58:11:303 1550 sec: 86301828 operations; 54345.3 current ops/sec; [READ: Count=271254, Max=107967, Min=556, Avg=4965.72, 90=7399, 99=23823, 99.9=49119, 99.99=70655] [UPDATE: Count=272451, Max=20863, Min=469, Avg=2391.97, 90=3531, 99=5899, 99.9=8887, 99.99=10991] 
2023-06-05 12:58:21:303 1560 sec: 86843749 operations; 54192.1 current ops/sec; [READ: Count=271162, Max=141695, Min=558, Avg=5015.35, 90=7143, 99=25695, 99.9=100415, 99.99=118335] [UPDATE: Count=270841, Max=13407, Min=474, Avg=2361.4, 90=3483, 99=5923, 99.9=9191, 99.99=11183] 
2023-06-05 12:58:31:303 1570 sec: 87377183 operations; 53343.4 current ops/sec; [READ: Count=265871, Max=210559, Min=524, Avg=5135.93, 90=7267, 99=26431, 99.9=131199, 99.99=141951] [UPDATE: Count=267468, Max=14263, Min=460, Avg=2365.3, 90=3489, 99=6595, 99.9=9543, 99.99=11447] 
2023-06-05 12:58:41:303 1580 sec: 87912089 operations; 53490.6 current ops/sec; [READ: Count=266898, Max=123135, Min=542, Avg=5115.96, 90=7299, 99=25455, 99.9=102655, 99.99=117887] [UPDATE: Count=268035, Max=16863, Min=466, Avg=2367.74, 90=3511, 99=6347, 99.9=9327, 99.99=11183] 
2023-06-05 12:58:51:303 1590 sec: 88441838 operations; 52974.9 current ops/sec; [READ: Count=264926, Max=100863, Min=555, Avg=5149.61, 90=7519, 99=26047, 99.9=58751, 99.99=70399] [UPDATE: Count=264887, Max=19247, Min=479, Avg=2398.05, 90=3545, 99=6787, 99.9=9543, 99.99=12391] 
2023-06-05 12:59:01:303 1600 sec: 88969887 operations; 52804.9 current ops/sec; [READ: Count=263573, Max=277247, Min=559, Avg=5189.97, 90=7239, 99=25311, 99.9=112063, 99.99=165375] [UPDATE: Count=264499, Max=18175, Min=460, Avg=2381.95, 90=3513, 99=6487, 99.9=9239, 99.99=11735] 
2023-06-05 12:59:11:303 1610 sec: 89472068 operations; 50218.1 current ops/sec; [READ: Count=250805, Max=591359, Min=538, Avg=5683.36, 90=6471, 99=25583, 99.9=322047, 99.99=451839] [UPDATE: Count=251323, Max=13495, Min=467, Avg=2269.89, 90=3347, 99=5855, 99.9=8991, 99.99=10999] 
2023-06-05 12:59:21:303 1620 sec: 89989249 operations; 51718.1 current ops/sec; [READ: Count=258167, Max=398591, Min=499, Avg=5461.44, 90=6447, 99=17295, 99.9=324607, 99.99=352767] [UPDATE: Count=258990, Max=13103, Min=449, Avg=2286.87, 90=3357, 99=5083, 99.9=7859, 99.99=10039] 
2023-06-05 12:59:31:303 1630 sec: 90539106 operations; 54985.7 current ops/sec; [READ: Count=275128, Max=293119, Min=559, Avg=4865.7, 90=7131, 99=14943, 99.9=63071, 99.99=159103] [UPDATE: Count=274501, Max=17455, Min=480, Avg=2413.22, 90=3509, 99=5435, 99.9=8383, 99.99=12191] 
2023-06-05 12:59:41:303 1640 sec: 91095653 operations; 55654.7 current ops/sec; [READ: Count=278372, Max=39167, Min=566, Avg=4760.9, 90=7195, 99=13519, 99.9=25375, 99.99=31087] [UPDATE: Count=278349, Max=14583, Min=463, Avg=2419.44, 90=3515, 99=5263, 99.9=8239, 99.99=11031] 
2023-06-05 12:59:51:303 1650 sec: 91646346 operations; 55069.3 current ops/sec; [READ: Count=275267, Max=120191, Min=556, Avg=4840.94, 90=7183, 99=15287, 99.9=48383, 99.99=98495] [UPDATE: Count=275538, Max=27263, Min=453, Avg=2419.19, 90=3513, 99=5467, 99.9=8735, 99.99=11751] 
2023-06-05 13:00:01:303 1660 sec: 92198639 operations; 55229.3 current ops/sec; [READ: Count=276029, Max=99263, Min=581, Avg=4839.04, 90=7019, 99=14879, 99.9=80639, 99.99=85759] [UPDATE: Count=276149, Max=19535, Min=464, Avg=2403.37, 90=3489, 99=5239, 99.9=8031, 99.99=10775] 
2023-06-05 13:00:11:303 1670 sec: 92748024 operations; 54938.5 current ops/sec; [READ: Count=274949, Max=236031, Min=539, Avg=4834.92, 90=7131, 99=14703, 99.9=44959, 99.99=96639] [UPDATE: Count=274422, Max=13543, Min=483, Avg=2437.17, 90=3531, 99=5387, 99.9=7867, 99.99=9559] 
2023-06-05 13:00:21:303 1680 sec: 93287990 operations; 53996.6 current ops/sec; [READ: Count=270573, Max=324863, Min=583, Avg=4979, 90=7035, 99=14783, 99.9=97215, 99.99=271103] [UPDATE: Count=268814, Max=35327, Min=491, Avg=2431.05, 90=3499, 99=5375, 99.9=8479, 99.99=16431] 
2023-06-05 13:00:31:303 1690 sec: 93813984 operations; 52599.4 current ops/sec; [READ: Count=263464, Max=266495, Min=605, Avg=5112.35, 90=7335, 99=17663, 99.9=99007, 99.99=180735] [UPDATE: Count=263166, Max=19439, Min=470, Avg=2468.08, 90=3561, 99=5795, 99.9=8351, 99.99=10887] 
2023-06-05 13:00:41:303 1700 sec: 94357164 operations; 54318 current ops/sec; [READ: Count=270808, Max=303615, Min=573, Avg=4922.33, 90=7203, 99=15399, 99.9=51679, 99.99=173695] [UPDATE: Count=272367, Max=14847, Min=472, Avg=2452.52, 90=3531, 99=5551, 99.9=8839, 99.99=11447] 
2023-06-05 13:00:51:303 1710 sec: 94885424 operations; 52826 current ops/sec; [READ: Count=263746, Max=119615, Min=583, Avg=5114.23, 90=7379, 99=23903, 99.9=56991, 99.99=100415] [UPDATE: Count=264471, Max=17775, Min=475, Avg=2454.12, 90=3563, 99=6291, 99.9=9455, 99.99=12071] 
2023-06-05 13:01:01:303 1720 sec: 95409101 operations; 52367.7 current ops/sec; [READ: Count=261725, Max=216063, Min=542, Avg=5246.47, 90=6975, 99=25599, 99.9=135679, 99.99=192895] [UPDATE: Count=262105, Max=24191, Min=474, Avg=2392.5, 90=3473, 99=5811, 99.9=9135, 99.99=10983] 
2023-06-05 13:01:11:303 1730 sec: 95937219 operations; 52811.8 current ops/sec; [READ: Count=264114, Max=158975, Min=588, Avg=5127.18, 90=7107, 99=21503, 99.9=98303, 99.99=124415] [UPDATE: Count=263837, Max=214655, Min=502, Avg=2442.98, 90=3505, 99=5811, 99.9=8719, 99.99=11375] 
2023-06-05 13:01:21:303 1740 sec: 96466300 operations; 52908.1 current ops/sec; [READ: Count=264201, Max=161919, Min=573, Avg=5135.39, 90=7183, 99=21071, 99.9=84607, 99.99=132223] [UPDATE: Count=264931, Max=17391, Min=481, Avg=2425.93, 90=3529, 99=5763, 99.9=8591, 99.99=10503] 
2023-06-05 13:01:31:303 1750 sec: 97001508 operations; 53520.8 current ops/sec; [READ: Count=267692, Max=164223, Min=609, Avg=5035.29, 90=7167, 99=16975, 99.9=84031, 99.99=137855] [UPDATE: Count=267640, Max=13743, Min=480, Avg=2435.57, 90=3537, 99=5547, 99.9=8439, 99.99=10359] 
2023-06-05 13:01:41:303 1760 sec: 97551931 operations; 55042.3 current ops/sec; [READ: Count=274972, Max=49887, Min=582, Avg=4808.58, 90=7175, 99=12783, 99.9=33471, 99.99=40383] [UPDATE: Count=275196, Max=14423, Min=495, Avg=2457.81, 90=3553, 99=5267, 99.9=7835, 99.99=10199] 
2023-06-05 13:01:51:303 1770 sec: 98099491 operations; 54756 current ops/sec; [READ: Count=273482, Max=43967, Min=510, Avg=4842.48, 90=7167, 99=15943, 99.9=31375, 99.99=37791] [UPDATE: Count=274213, Max=20559, Min=485, Avg=2461.34, 90=3551, 99=5531, 99.9=8879, 99.99=12343] 
2023-06-05 13:02:01:303 1780 sec: 98644205 operations; 54471.4 current ops/sec; [READ: Count=271673, Max=71167, Min=577, Avg=4868.44, 90=7159, 99=16375, 99.9=29631, 99.99=36159] [UPDATE: Count=272999, Max=16023, Min=476, Avg=2477.85, 90=3551, 99=5587, 99.9=8839, 99.99=10703] 
2023-06-05 13:02:11:303 1790 sec: 99181931 operations; 53772.6 current ops/sec; [READ: Count=269360, Max=138751, Min=562, Avg=4955.75, 90=7167, 99=18575, 99.9=50655, 99.99=107455] [UPDATE: Count=268431, Max=23951, Min=486, Avg=2470.74, 90=3547, 99=5859, 99.9=8991, 99.99=14039] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:21:303 1800 sec: 99716769 operations; 53483.8 current ops/sec; [READ: Count=267266, Max=311807, Min=552, Avg=5099.07, 90=6555, 99=14479, 99.9=163071, 99.99=198911] [UPDATE: Count=267137, Max=213631, Min=446, Avg=2382.98, 90=3405, 99=5103, 99.9=8503, 99.99=78463] 
Still waiting for thread Thread-175 to complete. Workload status: true
2023-06-05 13:02:23:555 1802 sec: 99718020 operations; 555.51 current ops/sec; [READ: Count=673, Max=9527, Min=674, Avg=4041.43, 90=6099, 99=7443, 99.9=9111, 99.99=9527] [CLEANUP: Count=200, Max=2226175, Min=0, Avg=11127.1, 90=2, 99=8, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802251
[OVERALL], Throughput(ops/sec), 55329.707127364614
[TOTAL_GCS_PS_Scavenge], Count, 6801
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17410
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9660141678378871
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 147
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008156466552106226
[TOTAL_GCs], Count, 6804
[TOTAL_GC_TIME], Time(ms), 17557
[TOTAL_GC_TIME_%], Time(%), 0.9741706343899934
[READ], Operations, 49858715
[READ], AverageLatency(us), 4598.518457545486
[READ], MinLatency(us), 490
[READ], MaxLatency(us), 591359
[READ], 95thPercentileLatency(us), 8007
[READ], 99thPercentileLatency(us), 16151
[READ], Return=OK, 49858715
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11127.105
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 8
[UPDATE], Operations, 49859305
[UPDATE], AverageLatency(us), 2281.8243560555047
[UPDATE], MinLatency(us), 436
[UPDATE], MaxLatency(us), 229887
[UPDATE], 95thPercentileLatency(us), 3795
[UPDATE], 99thPercentileLatency(us), 5403
[UPDATE], Return=OK, 49859305
