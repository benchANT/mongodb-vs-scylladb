bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:25:979 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:35:963 10 sec: 508421 operations; 50842.1 current ops/sec; [READ: Count=253243, Max=67647, Min=410, Avg=3710.37, 90=5863, 99=17631, 99.9=23951, 99.99=57631] [UPDATE: Count=256644, Max=64511, Min=310, Avg=1951.06, 90=2883, 99=6935, 99.9=17439, 99.99=56223] 
2023-06-05 12:32:45:963 20 sec: 1070801 operations; 56238 current ops/sec; [READ: Count=281335, Max=40543, Min=378, Avg=3681.62, 90=5679, 99=17167, 99.9=23727, 99.99=32799] [UPDATE: Count=280696, Max=16671, Min=310, Avg=1857.92, 90=2801, 99=5699, 99.9=7935, 99.99=9359] 
2023-06-05 12:32:55:963 30 sec: 1633381 operations; 56258 current ops/sec; [READ: Count=281083, Max=39103, Min=398, Avg=3834.99, 90=5915, 99=18191, 99.9=32623, 99.99=36127] [UPDATE: Count=281499, Max=19583, Min=333, Avg=1897.89, 90=2873, 99=5815, 99.9=7999, 99.99=9487] 
2023-06-05 12:33:05:963 40 sec: 2195692 operations; 56231.1 current ops/sec; [READ: Count=281175, Max=49375, Min=383, Avg=3894.6, 90=6051, 99=18079, 99.9=29199, 99.99=33471] [UPDATE: Count=281207, Max=20303, Min=319, Avg=1928.28, 90=2921, 99=5855, 99.9=8063, 99.99=9855] 
2023-06-05 12:33:15:963 50 sec: 2756035 operations; 56034.3 current ops/sec; [READ: Count=279911, Max=150015, Min=373, Avg=4431.25, 90=6667, 99=25823, 99.9=80639, 99.99=89535] [UPDATE: Count=280488, Max=13071, Min=332, Avg=1995.93, 90=3049, 99=6259, 99.9=8359, 99.99=9767] 
2023-06-05 12:33:25:963 60 sec: 3320656 operations; 56462.1 current ops/sec; [READ: Count=282000, Max=132991, Min=405, Avg=4357.63, 90=6535, 99=22655, 99.9=68223, 99.99=87423] [UPDATE: Count=282637, Max=12855, Min=334, Avg=2021.03, 90=3077, 99=6175, 99.9=8183, 99.99=9615] 
2023-06-05 12:33:35:963 70 sec: 3883088 operations; 56243.2 current ops/sec; [READ: Count=281719, Max=56191, Min=398, Avg=4135.43, 90=6535, 99=18607, 99.9=25743, 99.99=33855] [UPDATE: Count=280580, Max=14615, Min=313, Avg=2032.61, 90=3107, 99=6047, 99.9=8079, 99.99=9783] 
2023-06-05 12:33:45:963 80 sec: 4445610 operations; 56252.2 current ops/sec; [READ: Count=281063, Max=78399, Min=391, Avg=4216.23, 90=6567, 99=19119, 99.9=38879, 99.99=46591] [UPDATE: Count=281538, Max=27119, Min=338, Avg=2039.15, 90=3131, 99=6091, 99.9=8123, 99.99=9671] 
2023-06-05 12:33:55:963 90 sec: 5008081 operations; 56247.1 current ops/sec; [READ: Count=281609, Max=46303, Min=385, Avg=4171.12, 90=6599, 99=18799, 99.9=30447, 99.99=35679] [UPDATE: Count=280919, Max=17567, Min=326, Avg=2037.42, 90=3137, 99=6071, 99.9=8147, 99.99=12655] 
2023-06-05 12:34:05:963 100 sec: 5568297 operations; 56021.6 current ops/sec; [READ: Count=280060, Max=129919, Min=381, Avg=4273.43, 90=6707, 99=21279, 99.9=32351, 99.99=73471] [UPDATE: Count=280092, Max=16079, Min=341, Avg=2036.55, 90=3121, 99=6419, 99.9=8735, 99.99=11055] 
2023-06-05 12:34:15:963 110 sec: 6130047 operations; 56175 current ops/sec; [READ: Count=281342, Max=156927, Min=405, Avg=4640.02, 90=6627, 99=26895, 99.9=98559, 99.99=115519] [UPDATE: Count=280509, Max=25935, Min=330, Avg=2036.2, 90=3103, 99=6523, 99.9=8951, 99.99=10711] 
2023-06-05 12:34:25:963 120 sec: 6695403 operations; 56535.6 current ops/sec; [READ: Count=282699, Max=99967, Min=397, Avg=4427.93, 90=6763, 99=22783, 99.9=39167, 99.99=95999] [UPDATE: Count=282484, Max=13031, Min=332, Avg=2070.82, 90=3125, 99=6655, 99.9=9071, 99.99=10735] 
2023-06-05 12:34:35:963 130 sec: 7244454 operations; 54905.1 current ops/sec; [READ: Count=274727, Max=300543, Min=405, Avg=4835.84, 90=6971, 99=22351, 99.9=160255, 99.99=268543] [UPDATE: Count=274408, Max=69311, Min=316, Avg=2073.43, 90=3109, 99=7071, 99.9=9615, 99.99=64383] 
2023-06-05 12:34:45:963 140 sec: 7800356 operations; 55590.2 current ops/sec; [READ: Count=278563, Max=652287, Min=387, Avg=5009.35, 90=6755, 99=25407, 99.9=162559, 99.99=222079] [UPDATE: Count=277395, Max=18031, Min=316, Avg=2056.84, 90=3103, 99=6915, 99.9=9599, 99.99=14175] 
2023-06-05 12:34:55:963 150 sec: 8353669 operations; 55331.3 current ops/sec; [READ: Count=276588, Max=343295, Min=414, Avg=5113.3, 90=6391, 99=24351, 99.9=189695, 99.99=304639] [UPDATE: Count=276715, Max=16087, Min=317, Avg=2015.65, 90=3047, 99=6631, 99.9=9255, 99.99=11455] 
2023-06-05 12:35:05:963 160 sec: 8924845 operations; 57117.6 current ops/sec; [READ: Count=285005, Max=222591, Min=393, Avg=4799.1, 90=6519, 99=20511, 99.9=190591, 99.99=195967] [UPDATE: Count=285810, Max=26863, Min=313, Avg=2083.97, 90=3143, 99=6159, 99.9=9111, 99.99=14535] 
2023-06-05 12:35:15:963 170 sec: 9469876 operations; 54503.1 current ops/sec; [READ: Count=273066, Max=371711, Min=379, Avg=5183.59, 90=6351, 99=28271, 99.9=224511, 99.99=274943] [UPDATE: Count=272100, Max=14895, Min=320, Avg=2049.99, 90=3123, 99=6023, 99.9=8423, 99.99=11815] 
2023-06-05 12:35:25:963 180 sec: 10054089 operations; 58421.3 current ops/sec; [READ: Count=292034, Max=226943, Min=416, Avg=4609.67, 90=6411, 99=21679, 99.9=159359, 99.99=194303] [UPDATE: Count=292260, Max=16751, Min=343, Avg=2104.61, 90=3137, 99=5307, 99.9=8255, 99.99=10623] 
2023-06-05 12:35:35:963 190 sec: 10624206 operations; 57011.7 current ops/sec; [READ: Count=284863, Max=306943, Min=404, Avg=4559.63, 90=6087, 99=23743, 99.9=188031, 99.99=210815] [UPDATE: Count=285370, Max=14047, Min=317, Avg=2055.93, 90=3081, 99=5207, 99.9=8543, 99.99=10231] 
2023-06-05 12:35:45:963 200 sec: 11191626 operations; 56742 current ops/sec; [READ: Count=283412, Max=205695, Min=413, Avg=4559.26, 90=6159, 99=21183, 99.9=161663, 99.99=169599] [UPDATE: Count=283871, Max=16975, Min=330, Avg=2077.35, 90=3109, 99=5371, 99.9=8503, 99.99=11255] 
2023-06-05 12:35:55:963 210 sec: 11758212 operations; 56658.6 current ops/sec; [READ: Count=283068, Max=159871, Min=400, Avg=4238.49, 90=6111, 99=19247, 99.9=95359, 99.99=132223] [UPDATE: Count=283554, Max=28207, Min=328, Avg=2066.58, 90=3079, 99=5287, 99.9=8791, 99.99=11551] 
2023-06-05 12:36:05:963 220 sec: 12320725 operations; 56251.3 current ops/sec; [READ: Count=281402, Max=151807, Min=388, Avg=4086.44, 90=5919, 99=18799, 99.9=55231, 99.99=84927] [UPDATE: Count=281135, Max=17375, Min=318, Avg=2023.43, 90=3025, 99=5343, 99.9=8383, 99.99=10615] 
2023-06-05 12:36:15:963 230 sec: 12883466 operations; 56274.1 current ops/sec; [READ: Count=280992, Max=60575, Min=428, Avg=3780.98, 90=5623, 99=13847, 99.9=31663, 99.99=46143] [UPDATE: Count=281721, Max=15959, Min=347, Avg=1970.7, 90=2975, 99=4683, 99.9=7403, 99.99=9231] 
2023-06-05 12:36:25:963 240 sec: 13446022 operations; 56255.6 current ops/sec; [READ: Count=280787, Max=32767, Min=424, Avg=3514.89, 90=5375, 99=7771, 99.9=15343, 99.99=21983] [UPDATE: Count=281554, Max=10679, Min=310, Avg=1918.38, 90=2897, 99=4039, 99.9=6243, 99.99=7807] 
2023-06-05 12:36:35:963 250 sec: 14008526 operations; 56250.4 current ops/sec; [READ: Count=281074, Max=35295, Min=412, Avg=3559.14, 90=5451, 99=7943, 99.9=12487, 99.99=19663] [UPDATE: Count=281410, Max=11719, Min=318, Avg=1943.23, 90=2955, 99=4085, 99.9=6095, 99.99=7955] 
2023-06-05 12:36:45:963 260 sec: 14570970 operations; 56244.4 current ops/sec; [READ: Count=281419, Max=25743, Min=410, Avg=3543.03, 90=5447, 99=8051, 99.9=12591, 99.99=20671] [UPDATE: Count=281047, Max=20575, Min=325, Avg=1932.37, 90=2939, 99=4191, 99.9=6455, 99.99=9559] 
2023-06-05 12:36:55:963 270 sec: 15133494 operations; 56252.4 current ops/sec; [READ: Count=281746, Max=28239, Min=361, Avg=3595.11, 90=5543, 99=8407, 99.9=13999, 99.99=22847] [UPDATE: Count=280839, Max=25391, Min=311, Avg=1949.53, 90=2981, 99=4211, 99.9=6355, 99.99=8279] 
2023-06-05 12:37:05:963 280 sec: 15695976 operations; 56248.2 current ops/sec; [READ: Count=280961, Max=27791, Min=379, Avg=3517.26, 90=5455, 99=8183, 99.9=12903, 99.99=22815] [UPDATE: Count=281471, Max=17503, Min=313, Avg=1914.33, 90=2937, 99=4183, 99.9=6363, 99.99=9399] 
2023-06-05 12:37:15:963 290 sec: 16258500 operations; 56252.4 current ops/sec; [READ: Count=281649, Max=105087, Min=404, Avg=3588.7, 90=5511, 99=8767, 99.9=20863, 99.99=42527] [UPDATE: Count=280942, Max=14143, Min=341, Avg=1928.36, 90=2955, 99=4351, 99.9=6723, 99.99=9023] 
2023-06-05 12:37:25:963 300 sec: 16821033 operations; 56253.3 current ops/sec; [READ: Count=281316, Max=21679, Min=429, Avg=3489.67, 90=5387, 99=8019, 99.9=11199, 99.99=15735] [UPDATE: Count=281111, Max=10055, Min=329, Avg=1897.79, 90=2905, 99=4099, 99.9=5983, 99.99=7227] 
2023-06-05 12:37:35:963 310 sec: 17383503 operations; 56247 current ops/sec; [READ: Count=281458, Max=77055, Min=382, Avg=3528.31, 90=5371, 99=8807, 99.9=24591, 99.99=47775] [UPDATE: Count=281174, Max=12247, Min=334, Avg=1892.45, 90=2893, 99=4323, 99.9=6927, 99.99=8911] 
2023-06-05 12:37:45:963 320 sec: 17945993 operations; 56249 current ops/sec; [READ: Count=281172, Max=27759, Min=377, Avg=3437.57, 90=5295, 99=8575, 99.9=18783, 99.99=23679] [UPDATE: Count=281277, Max=16847, Min=335, Avg=1857.7, 90=2825, 99=4251, 99.9=7527, 99.99=10103] 
2023-06-05 12:37:55:963 330 sec: 18508519 operations; 56252.6 current ops/sec; [READ: Count=280743, Max=34175, Min=370, Avg=3413.7, 90=5231, 99=9287, 99.9=21535, 99.99=25823] [UPDATE: Count=281351, Max=21375, Min=332, Avg=1838.5, 90=2785, 99=4407, 99.9=8043, 99.99=12959] 
2023-06-05 12:38:05:963 340 sec: 19071001 operations; 56248.2 current ops/sec; [READ: Count=281220, Max=31311, Min=391, Avg=3410.36, 90=5219, 99=9287, 99.9=21391, 99.99=25167] [UPDATE: Count=281708, Max=23023, Min=323, Avg=1838.66, 90=2771, 99=4299, 99.9=7991, 99.99=12671] 
2023-06-05 12:38:15:963 350 sec: 19633463 operations; 56246.2 current ops/sec; [READ: Count=281189, Max=28399, Min=382, Avg=3373.16, 90=5139, 99=8271, 99.9=19695, 99.99=23183] [UPDATE: Count=281279, Max=17711, Min=334, Avg=1835.13, 90=2767, 99=4175, 99.9=6779, 99.99=9623] 
2023-06-05 12:38:25:963 360 sec: 20196045 operations; 56258.2 current ops/sec; [READ: Count=280652, Max=18351, Min=412, Avg=3294.33, 90=5051, 99=7299, 99.9=9519, 99.99=11999] [UPDATE: Count=281777, Max=10759, Min=319, Avg=1816.75, 90=2747, 99=3897, 99.9=5819, 99.99=7003] 
2023-06-05 12:38:35:963 370 sec: 20758552 operations; 56250.7 current ops/sec; [READ: Count=281515, Max=51039, Min=418, Avg=3310.97, 90=5087, 99=7551, 99.9=11631, 99.99=27471] [UPDATE: Count=281014, Max=11815, Min=337, Avg=1816.12, 90=2749, 99=3967, 99.9=6219, 99.99=8075] 
2023-06-05 12:38:45:963 380 sec: 21321048 operations; 56249.6 current ops/sec; [READ: Count=281068, Max=16527, Min=382, Avg=3303.67, 90=5091, 99=7459, 99.9=9943, 99.99=13239] [UPDATE: Count=280993, Max=21471, Min=326, Avg=1820.7, 90=2757, 99=3935, 99.9=6331, 99.99=14207] 
2023-06-05 12:38:55:963 390 sec: 21883527 operations; 56247.9 current ops/sec; [READ: Count=281598, Max=22351, Min=406, Avg=3362.12, 90=5179, 99=7623, 99.9=10543, 99.99=17359] [UPDATE: Count=281322, Max=20543, Min=326, Avg=1846.92, 90=2809, 99=4013, 99.9=6115, 99.99=10375] 
2023-06-05 12:39:05:963 400 sec: 22446025 operations; 56249.8 current ops/sec; [READ: Count=281327, Max=25759, Min=416, Avg=3484.53, 90=5371, 99=8007, 99.9=12759, 99.99=20623] [UPDATE: Count=281145, Max=18271, Min=310, Avg=1896.27, 90=2901, 99=4135, 99.9=6383, 99.99=9335] 
2023-06-05 12:39:15:963 410 sec: 23008509 operations; 56248.4 current ops/sec; [READ: Count=281018, Max=23791, Min=358, Avg=3508.09, 90=5431, 99=8095, 99.9=11535, 99.99=19023] [UPDATE: Count=281444, Max=10111, Min=326, Avg=1903.84, 90=2907, 99=4127, 99.9=6171, 99.99=7687] 
2023-06-05 12:39:25:963 420 sec: 23570990 operations; 56248.1 current ops/sec; [READ: Count=282131, Max=22463, Min=389, Avg=3582.29, 90=5519, 99=8159, 99.9=11311, 99.99=16199] [UPDATE: Count=279965, Max=20607, Min=308, Avg=1938.61, 90=2953, 99=4227, 99.9=6435, 99.99=12775] 
2023-06-05 12:39:35:963 430 sec: 24133503 operations; 56251.3 current ops/sec; [READ: Count=281169, Max=25247, Min=409, Avg=3605.69, 90=5567, 99=8303, 99.9=11695, 99.99=18543] [UPDATE: Count=281700, Max=19919, Min=334, Avg=1946.54, 90=2981, 99=4203, 99.9=6147, 99.99=8407] 
2023-06-05 12:39:45:963 440 sec: 24696018 operations; 56251.5 current ops/sec; [READ: Count=281570, Max=23807, Min=391, Avg=3592.94, 90=5551, 99=8099, 99.9=10951, 99.99=16159] [UPDATE: Count=280942, Max=19167, Min=323, Avg=1944, 90=2973, 99=4195, 99.9=6179, 99.99=8463] 
2023-06-05 12:39:55:963 450 sec: 25258497 operations; 56247.9 current ops/sec; [READ: Count=281349, Max=31887, Min=420, Avg=3629.3, 90=5615, 99=8647, 99.9=15855, 99.99=23023] [UPDATE: Count=281203, Max=15807, Min=298, Avg=1950.51, 90=2991, 99=4287, 99.9=6595, 99.99=9103] 
2023-06-05 12:40:05:963 460 sec: 25820894 operations; 56239.7 current ops/sec; [READ: Count=281903, Max=40639, Min=383, Avg=3742.92, 90=5707, 99=10479, 99.9=29519, 99.99=35423] [UPDATE: Count=280497, Max=17807, Min=313, Avg=1968.71, 90=3005, 99=4627, 99.9=7311, 99.99=10167] 
2023-06-05 12:40:15:963 470 sec: 26374858 operations; 55396.4 current ops/sec; [READ: Count=277279, Max=279807, Min=355, Avg=4575.16, 90=6347, 99=24335, 99.9=141183, 99.99=237951] [UPDATE: Count=277068, Max=13311, Min=302, Avg=2076.16, 90=3153, 99=5987, 99.9=8687, 99.99=10463] 
2023-06-05 12:40:25:963 480 sec: 26946018 operations; 57116 current ops/sec; [READ: Count=285410, Max=201215, Min=402, Avg=4191.73, 90=5867, 99=17807, 99.9=101119, 99.99=121791] [UPDATE: Count=285532, Max=14487, Min=320, Avg=2014.9, 90=3043, 99=5011, 99.9=8359, 99.99=10343] 
2023-06-05 12:40:35:963 490 sec: 27508502 operations; 56248.4 current ops/sec; [READ: Count=280853, Max=29631, Min=400, Avg=3629.31, 90=5607, 99=8815, 99.9=15407, 99.99=22159] [UPDATE: Count=281472, Max=10639, Min=323, Avg=1949.17, 90=2981, 99=4319, 99.9=6443, 99.99=8359] 
2023-06-05 12:40:45:963 500 sec: 28071040 operations; 56253.8 current ops/sec; [READ: Count=281044, Max=33887, Min=412, Avg=3636.24, 90=5615, 99=9063, 99.9=19519, 99.99=28815] [UPDATE: Count=281515, Max=17055, Min=342, Avg=1933.96, 90=2959, 99=4211, 99.9=6839, 99.99=10047] 
2023-06-05 12:40:55:963 510 sec: 28633480 operations; 56244 current ops/sec; [READ: Count=280944, Max=77759, Min=399, Avg=3657.55, 90=5611, 99=9327, 99.9=31391, 99.99=44703] [UPDATE: Count=281528, Max=14615, Min=318, Avg=1928.17, 90=2955, 99=4327, 99.9=7255, 99.99=10159] 
2023-06-05 12:41:05:963 520 sec: 29195955 operations; 56247.5 current ops/sec; [READ: Count=281418, Max=26703, Min=417, Avg=3628.21, 90=5659, 99=8535, 99.9=12591, 99.99=18671] [UPDATE: Count=280975, Max=17951, Min=328, Avg=1947.72, 90=2987, 99=4379, 99.9=6439, 99.99=9167] 
2023-06-05 12:41:15:963 530 sec: 29758495 operations; 56254 current ops/sec; [READ: Count=280629, Max=25855, Min=374, Avg=3682.43, 90=5727, 99=9167, 99.9=17791, 99.99=21711] [UPDATE: Count=281905, Max=11215, Min=317, Avg=1954.95, 90=2997, 99=4455, 99.9=7007, 99.99=9407] 
2023-06-05 12:41:25:963 540 sec: 30320929 operations; 56243.4 current ops/sec; [READ: Count=281420, Max=32607, Min=382, Avg=3720.18, 90=5779, 99=9087, 99.9=15511, 99.99=23151] [UPDATE: Count=281055, Max=13575, Min=325, Avg=1975.93, 90=3037, 99=4423, 99.9=6663, 99.99=8831] 
2023-06-05 12:41:35:963 550 sec: 30883403 operations; 56247.4 current ops/sec; [READ: Count=281455, Max=41791, Min=429, Avg=3801.41, 90=5847, 99=10255, 99.9=23727, 99.99=28687] [UPDATE: Count=281065, Max=12111, Min=332, Avg=1986.87, 90=3045, 99=4591, 99.9=7535, 99.99=10039] 
2023-06-05 12:41:45:963 560 sec: 31440896 operations; 55749.3 current ops/sec; [READ: Count=278573, Max=322047, Min=394, Avg=4052.67, 90=5831, 99=12791, 99.9=134271, 99.99=166271] [UPDATE: Count=279051, Max=28687, Min=324, Avg=1997.68, 90=3049, 99=4987, 99.9=8991, 99.99=24767] 
2023-06-05 12:41:55:963 570 sec: 31987591 operations; 54669.5 current ops/sec; [READ: Count=273467, Max=409855, Min=400, Avg=4934.64, 90=5647, 99=13471, 99.9=228607, 99.99=364031] [UPDATE: Count=273252, Max=15815, Min=318, Avg=1943.64, 90=2985, 99=4715, 99.9=8059, 99.99=10239] 
2023-06-05 12:42:05:963 580 sec: 32545136 operations; 55754.5 current ops/sec; [READ: Count=278219, Max=311551, Min=398, Avg=4949.7, 90=5971, 99=23455, 99.9=228095, 99.99=265727] [UPDATE: Count=279324, Max=18719, Min=308, Avg=2024.27, 90=3089, 99=4827, 99.9=8039, 99.99=10543] 
2023-06-05 12:42:15:963 590 sec: 33064419 operations; 51928.3 current ops/sec; [READ: Count=259565, Max=403967, Min=395, Avg=5513.47, 90=7235, 99=29567, 99.9=191871, 99.99=323839] [UPDATE: Count=259594, Max=13351, Min=308, Avg=2118.67, 90=3275, 99=6679, 99.9=8903, 99.99=10775] 
2023-06-05 12:42:25:963 600 sec: 33563380 operations; 49896.1 current ops/sec; [READ: Count=249662, Max=347135, Min=387, Avg=5960.71, 90=6623, 99=41855, 99.9=326143, 99.99=329727] [UPDATE: Count=249235, Max=12135, Min=305, Avg=2057.12, 90=3197, 99=6159, 99.9=8687, 99.99=10271] 
2023-06-05 12:42:35:963 610 sec: 34098342 operations; 53496.2 current ops/sec; [READ: Count=267272, Max=337151, Min=407, Avg=5361.73, 90=6939, 99=33887, 99.9=194047, 99.99=322047] [UPDATE: Count=267903, Max=13607, Min=333, Avg=2135.78, 90=3295, 99=6135, 99.9=8599, 99.99=10519] 
2023-06-05 12:42:45:963 620 sec: 34652113 operations; 55377.1 current ops/sec; [READ: Count=276741, Max=236159, Min=368, Avg=5040.98, 90=7155, 99=30255, 99.9=137855, 99.99=166015] [UPDATE: Count=276847, Max=17311, Min=330, Avg=2184.16, 90=3347, 99=6155, 99.9=8367, 99.99=10903] 
2023-06-05 12:42:55:963 630 sec: 35218867 operations; 56675.4 current ops/sec; [READ: Count=283892, Max=222463, Min=368, Avg=4904.21, 90=6619, 99=29743, 99.9=135551, 99.99=150783] [UPDATE: Count=283139, Max=25791, Min=332, Avg=2140.78, 90=3255, 99=5635, 99.9=8255, 99.99=10943] 
2023-06-05 12:43:05:963 640 sec: 35795361 operations; 57649.4 current ops/sec; [READ: Count=288153, Max=157055, Min=412, Avg=4768.17, 90=6691, 99=19039, 99.9=117375, 99.99=136063] [UPDATE: Count=288253, Max=19343, Min=348, Avg=2170.45, 90=3285, 99=5415, 99.9=7959, 99.99=10023] 
2023-06-05 12:43:15:963 650 sec: 36365663 operations; 57030.2 current ops/sec; [READ: Count=285506, Max=270591, Min=386, Avg=4830.28, 90=6675, 99=19279, 99.9=160639, 99.99=179967] [UPDATE: Count=284844, Max=15727, Min=321, Avg=2174.87, 90=3285, 99=5483, 99.9=8095, 99.99=9919] 
2023-06-05 12:43:25:963 660 sec: 36941532 operations; 57586.9 current ops/sec; [READ: Count=287903, Max=252543, Min=364, Avg=4741.05, 90=6771, 99=18271, 99.9=112511, 99.99=210815] [UPDATE: Count=287984, Max=19887, Min=324, Avg=2195.73, 90=3317, 99=5391, 99.9=8031, 99.99=9855] 
2023-06-05 12:43:35:963 670 sec: 37534536 operations; 59300.4 current ops/sec; [READ: Count=296368, Max=33535, Min=396, Avg=4471.82, 90=6927, 99=12295, 99.9=21119, 99.99=24959] [UPDATE: Count=296363, Max=11591, Min=336, Avg=2251.43, 90=3367, 99=5007, 99.9=7251, 99.99=8871] 
2023-06-05 12:43:45:963 680 sec: 38121594 operations; 58705.8 current ops/sec; [READ: Count=293098, Max=81215, Min=414, Avg=4499.62, 90=6919, 99=12423, 99.9=21631, 99.99=28175] [UPDATE: Count=293967, Max=26911, Min=340, Avg=2273.68, 90=3387, 99=5071, 99.9=7947, 99.99=16447] 
2023-06-05 12:43:55:963 690 sec: 38697480 operations; 57588.6 current ops/sec; [READ: Count=288676, Max=120831, Min=392, Avg=4631.45, 90=6695, 99=14215, 99.9=83199, 99.99=90495] [UPDATE: Count=287366, Max=27375, Min=338, Avg=2251.11, 90=3343, 99=5115, 99.9=8099, 99.99=10167] 
2023-06-05 12:44:05:963 700 sec: 39270615 operations; 57313.5 current ops/sec; [READ: Count=286575, Max=82495, Min=402, Avg=4628.38, 90=6823, 99=15359, 99.9=49375, 99.99=70975] [UPDATE: Count=286506, Max=18863, Min=316, Avg=2291.52, 90=3393, 99=5347, 99.9=8791, 99.99=11039] 
2023-06-05 12:44:15:963 710 sec: 39837690 operations; 56707.5 current ops/sec; [READ: Count=283936, Max=209407, Min=402, Avg=4678.97, 90=6799, 99=16927, 99.9=47711, 99.99=116927] [UPDATE: Count=283084, Max=12703, Min=331, Avg=2299.91, 90=3391, 99=5415, 99.9=8615, 99.99=10535] 
2023-06-05 12:44:25:963 720 sec: 40391644 operations; 55395.4 current ops/sec; [READ: Count=276799, Max=221823, Min=405, Avg=4901.02, 90=6779, 99=19695, 99.9=134655, 99.99=141567] [UPDATE: Count=277206, Max=15319, Min=332, Avg=2300.16, 90=3397, 99=5743, 99.9=8751, 99.99=10895] 
2023-06-05 12:44:35:963 730 sec: 40956521 operations; 56487.7 current ops/sec; [READ: Count=283132, Max=47711, Min=345, Avg=4713.99, 90=7019, 99=16247, 99.9=33119, 99.99=37951] [UPDATE: Count=281728, Max=13919, Min=314, Avg=2345.77, 90=3465, 99=5519, 99.9=8647, 99.99=10527] 
2023-06-05 12:44:45:963 740 sec: 41520959 operations; 56443.8 current ops/sec; [READ: Count=281685, Max=39775, Min=412, Avg=4732.28, 90=7027, 99=18191, 99.9=30479, 99.99=35391] [UPDATE: Count=282752, Max=18655, Min=308, Avg=2342.54, 90=3461, 99=5751, 99.9=8951, 99.99=11007] 
2023-06-05 12:44:55:963 750 sec: 42090255 operations; 56929.6 current ops/sec; [READ: Count=284717, Max=38079, Min=417, Avg=4666.76, 90=6959, 99=16831, 99.9=26255, 99.99=32559] [UPDATE: Count=284573, Max=32991, Min=344, Avg=2329.21, 90=3437, 99=5579, 99.9=8679, 99.99=11039] 
2023-06-05 12:45:05:963 760 sec: 42657112 operations; 56685.7 current ops/sec; [READ: Count=283672, Max=42527, Min=403, Avg=4684.62, 90=6895, 99=18111, 99.9=27503, 99.99=32127] [UPDATE: Count=283182, Max=18815, Min=315, Avg=2338.3, 90=3429, 99=5639, 99.9=8951, 99.99=11471] 
2023-06-05 12:45:15:963 770 sec: 43189922 operations; 53281 current ops/sec; [READ: Count=266278, Max=515583, Min=407, Avg=5172.45, 90=6739, 99=23087, 99.9=269311, 99.99=277759] [UPDATE: Count=266632, Max=14951, Min=325, Avg=2296.49, 90=3403, 99=5843, 99.9=9007, 99.99=10783] 
2023-06-05 12:45:25:963 780 sec: 43729499 operations; 53957.7 current ops/sec; [READ: Count=269896, Max=283135, Min=410, Avg=5172.55, 90=6367, 99=17903, 99.9=272895, 99.99=276991] [UPDATE: Count=269496, Max=12983, Min=323, Avg=2220.97, 90=3299, 99=5195, 99.9=7895, 99.99=9831] 
2023-06-05 12:45:35:963 790 sec: 44298624 operations; 56912.5 current ops/sec; [READ: Count=284124, Max=275199, Min=416, Avg=4755.75, 90=6727, 99=12303, 99.9=161023, 99.99=271871] [UPDATE: Count=285135, Max=14439, Min=336, Avg=2279.77, 90=3367, 99=4911, 99.9=7359, 99.99=9327] 
2023-06-05 12:45:45:963 800 sec: 44878626 operations; 58000.2 current ops/sec; [READ: Count=289883, Max=55071, Min=435, Avg=4545.72, 90=6883, 99=10719, 99.9=18015, 99.99=27535] [UPDATE: Count=290025, Max=16591, Min=340, Avg=2326.41, 90=3413, 99=4855, 99.9=6923, 99.99=9567] 
2023-06-05 12:45:55:963 810 sec: 45454830 operations; 57620.4 current ops/sec; [READ: Count=287425, Max=37983, Min=421, Avg=4568.97, 90=6887, 99=11047, 99.9=18319, 99.99=29807] [UPDATE: Count=288817, Max=22111, Min=322, Avg=2335.48, 90=3419, 99=4887, 99.9=6963, 99.99=8871] 
2023-06-05 12:46:05:963 820 sec: 46030428 operations; 57559.8 current ops/sec; [READ: Count=287219, Max=27407, Min=414, Avg=4536.01, 90=6791, 99=10351, 99.9=15183, 99.99=21231] [UPDATE: Count=288225, Max=20079, Min=331, Avg=2345.78, 90=3413, 99=4767, 99.9=6727, 99.99=8607] 
2023-06-05 12:46:15:963 830 sec: 46603815 operations; 57338.7 current ops/sec; [READ: Count=286722, Max=117119, Min=409, Avg=4536.81, 90=6755, 99=10527, 99.9=22015, 99.99=49823] [UPDATE: Count=286801, Max=12455, Min=346, Avg=2330.49, 90=3397, 99=4771, 99.9=6863, 99.99=8831] 
2023-06-05 12:46:25:963 840 sec: 47173019 operations; 56920.4 current ops/sec; [READ: Count=284640, Max=31167, Min=415, Avg=4546.79, 90=6759, 99=10039, 99.9=14975, 99.99=22271] [UPDATE: Count=284465, Max=13831, Min=307, Avg=2359.46, 90=3423, 99=4715, 99.9=6603, 99.99=8303] 
2023-06-05 12:46:35:963 850 sec: 47733500 operations; 56048.1 current ops/sec; [READ: Count=279858, Max=86783, Min=417, Avg=4691.8, 90=6811, 99=12743, 99.9=31919, 99.99=55647] [UPDATE: Count=280753, Max=13255, Min=335, Avg=2395.76, 90=3453, 99=5143, 99.9=8131, 99.99=10567] 
2023-06-05 12:46:45:963 860 sec: 48295523 operations; 56202.3 current ops/sec; [READ: Count=280862, Max=45407, Min=401, Avg=4684.35, 90=6843, 99=12095, 99.9=25135, 99.99=29903] [UPDATE: Count=281110, Max=17855, Min=358, Avg=2410.31, 90=3469, 99=5023, 99.9=8071, 99.99=10847] 
2023-06-05 12:46:55:963 870 sec: 48859472 operations; 56394.9 current ops/sec; [READ: Count=281438, Max=34623, Min=414, Avg=4670.4, 90=6839, 99=11511, 99.9=25087, 99.99=29103] [UPDATE: Count=282481, Max=17679, Min=329, Avg=2400.16, 90=3453, 99=5027, 99.9=7943, 99.99=10471] 
2023-06-05 12:47:05:963 880 sec: 49420960 operations; 56148.8 current ops/sec; [READ: Count=281169, Max=34847, Min=435, Avg=4700.19, 90=6943, 99=13327, 99.9=23999, 99.99=28751] [UPDATE: Count=280286, Max=20719, Min=317, Avg=2395.36, 90=3463, 99=5219, 99.9=8079, 99.99=11191] 
2023-06-05 12:47:15:963 890 sec: 49979311 operations; 55835.1 current ops/sec; [READ: Count=279595, Max=74303, Min=444, Avg=4750.73, 90=6919, 99=15503, 99.9=37055, 99.99=55775] [UPDATE: Count=278869, Max=12983, Min=350, Avg=2391.77, 90=3441, 99=5479, 99.9=8591, 99.99=10719] 
2023-06-05 12:47:25:963 900 sec: 50540758 operations; 56144.7 current ops/sec; [READ: Count=280502, Max=61887, Min=361, Avg=4730.78, 90=6871, 99=16895, 99.9=25855, 99.99=45311] [UPDATE: Count=280844, Max=11823, Min=351, Avg=2384.75, 90=3433, 99=5499, 99.9=8543, 99.99=10279] 
2023-06-05 12:47:35:963 910 sec: 51099589 operations; 55883.1 current ops/sec; [READ: Count=279600, Max=38815, Min=460, Avg=4740.98, 90=6835, 99=15215, 99.9=25871, 99.99=30175] [UPDATE: Count=279219, Max=13871, Min=337, Avg=2407.28, 90=3441, 99=5263, 99.9=8119, 99.99=10071] 
2023-06-05 12:47:45:963 920 sec: 51662163 operations; 56257.4 current ops/sec; [READ: Count=281521, Max=35199, Min=434, Avg=4700.9, 90=6771, 99=13471, 99.9=26303, 99.99=31599] [UPDATE: Count=281074, Max=17983, Min=332, Avg=2399.35, 90=3423, 99=5107, 99.9=7643, 99.99=10295] 
2023-06-05 12:47:55:963 930 sec: 52225782 operations; 56361.9 current ops/sec; [READ: Count=282073, Max=39423, Min=419, Avg=4687.67, 90=6759, 99=13047, 99.9=23759, 99.99=27407] [UPDATE: Count=281563, Max=26831, Min=352, Avg=2400.32, 90=3427, 99=4951, 99.9=7235, 99.99=8647] 
2023-06-05 12:48:05:963 940 sec: 52791880 operations; 56609.8 current ops/sec; [READ: Count=282799, Max=28847, Min=407, Avg=4653.58, 90=6831, 99=11327, 99.9=20927, 99.99=24831] [UPDATE: Count=283303, Max=17823, Min=341, Avg=2399.12, 90=3449, 99=4943, 99.9=7147, 99.99=9191] 
2023-06-05 12:48:15:963 950 sec: 53357714 operations; 56583.4 current ops/sec; [READ: Count=283137, Max=30831, Min=448, Avg=4661.37, 90=6879, 99=11671, 99.9=20831, 99.99=24831] [UPDATE: Count=282681, Max=9871, Min=335, Avg=2384.42, 90=3445, 99=4915, 99.9=7047, 99.99=8415] 
2023-06-05 12:48:25:963 960 sec: 53926503 operations; 56878.9 current ops/sec; [READ: Count=284992, Max=36127, Min=419, Avg=4605.2, 90=6807, 99=11015, 99.9=19903, 99.99=23855] [UPDATE: Count=283739, Max=11847, Min=333, Avg=2369, 90=3417, 99=4859, 99.9=7131, 99.99=9351] 
2023-06-05 12:48:35:963 970 sec: 54493481 operations; 56697.8 current ops/sec; [READ: Count=283481, Max=41343, Min=405, Avg=4594.16, 90=6803, 99=10887, 99.9=22159, 99.99=30623] [UPDATE: Count=283405, Max=12375, Min=337, Avg=2363.76, 90=3421, 99=4911, 99.9=7247, 99.99=9839] 
2023-06-05 12:48:45:963 980 sec: 55054697 operations; 56121.6 current ops/sec; [READ: Count=280789, Max=128255, Min=411, Avg=4681.54, 90=6699, 99=12327, 99.9=61631, 99.99=77055] [UPDATE: Count=280461, Max=16415, Min=324, Avg=2345.6, 90=3393, 99=4991, 99.9=8023, 99.99=11687] 
2023-06-05 12:48:55:963 990 sec: 55617670 operations; 56297.3 current ops/sec; [READ: Count=281151, Max=81407, Min=408, Avg=4702.09, 90=6707, 99=11807, 99.9=63967, 99.99=74495] [UPDATE: Count=281955, Max=31919, Min=325, Avg=2348.64, 90=3389, 99=4931, 99.9=7783, 99.99=10527] 
2023-06-05 12:49:05:963 1000 sec: 56182063 operations; 56439.3 current ops/sec; [READ: Count=282197, Max=103295, Min=412, Avg=4665.86, 90=6791, 99=12095, 99.9=43647, 99.99=60159] [UPDATE: Count=282234, Max=59327, Min=357, Avg=2361.63, 90=3405, 99=4903, 99.9=7651, 99.99=56895] 
2023-06-05 12:49:15:963 1010 sec: 56748193 operations; 56613 current ops/sec; [READ: Count=283285, Max=41119, Min=419, Avg=4630.22, 90=6867, 99=12735, 99.9=27119, 99.99=31919] [UPDATE: Count=282769, Max=12983, Min=328, Avg=2333.48, 90=3407, 99=4919, 99.9=7135, 99.99=9191] 
2023-06-05 12:49:25:963 1020 sec: 57313888 operations; 56569.5 current ops/sec; [READ: Count=282961, Max=34879, Min=412, Avg=4519.08, 90=6759, 99=10495, 99.9=17599, 99.99=27807] [UPDATE: Count=282569, Max=11615, Min=336, Avg=2326.56, 90=3399, 99=4771, 99.9=6783, 99.99=9007] 
2023-06-05 12:49:35:963 1030 sec: 57877428 operations; 56354 current ops/sec; [READ: Count=282251, Max=28815, Min=405, Avg=4565.5, 90=6779, 99=10495, 99.9=17615, 99.99=24255] [UPDATE: Count=281448, Max=12487, Min=350, Avg=2358.03, 90=3417, 99=4807, 99.9=6975, 99.99=9215] 
2023-06-05 12:49:45:963 1040 sec: 58438293 operations; 56086.5 current ops/sec; [READ: Count=280666, Max=35327, Min=386, Avg=4629.66, 90=6831, 99=13127, 99.9=25135, 99.99=29647] [UPDATE: Count=280211, Max=17695, Min=337, Avg=2347.56, 90=3423, 99=5011, 99.9=7963, 99.99=10231] 
2023-06-05 12:49:55:963 1050 sec: 59003272 operations; 56497.9 current ops/sec; [READ: Count=282599, Max=38527, Min=409, Avg=4609.43, 90=6835, 99=12015, 99.9=25071, 99.99=30095] [UPDATE: Count=282383, Max=12071, Min=346, Avg=2343.6, 90=3411, 99=4907, 99.9=7587, 99.99=9887] 
2023-06-05 12:50:05:963 1060 sec: 59566223 operations; 56295.1 current ops/sec; [READ: Count=281606, Max=42367, Min=404, Avg=4600.28, 90=6855, 99=12287, 99.9=25023, 99.99=29871] [UPDATE: Count=281354, Max=19647, Min=342, Avg=2334.18, 90=3393, 99=4967, 99.9=7519, 99.99=10551] 
2023-06-05 12:50:15:963 1070 sec: 60104296 operations; 53807.3 current ops/sec; [READ: Count=269040, Max=202751, Min=409, Avg=5062.82, 90=6971, 99=23583, 99.9=112959, 99.99=145663] [UPDATE: Count=269222, Max=12775, Min=319, Avg=2321.43, 90=3405, 99=5675, 99.9=8327, 99.99=10351] 
2023-06-05 12:50:25:963 1080 sec: 60678458 operations; 57416.2 current ops/sec; [READ: Count=286950, Max=39807, Min=418, Avg=4614.83, 90=6907, 99=12383, 99.9=25855, 99.99=30223] [UPDATE: Count=287049, Max=15591, Min=316, Avg=2331.57, 90=3391, 99=4963, 99.9=7959, 99.99=9839] 
2023-06-05 12:50:35:963 1090 sec: 61244913 operations; 56645.5 current ops/sec; [READ: Count=283362, Max=34495, Min=436, Avg=4661.21, 90=6907, 99=13287, 99.9=26143, 99.99=30287] [UPDATE: Count=283078, Max=20047, Min=335, Avg=2354.49, 90=3413, 99=5043, 99.9=8039, 99.99=9935] 
2023-06-05 12:50:45:963 1100 sec: 61812619 operations; 56770.6 current ops/sec; [READ: Count=283095, Max=47743, Min=379, Avg=4633.78, 90=6887, 99=12247, 99.9=25119, 99.99=30111] [UPDATE: Count=284575, Max=16623, Min=341, Avg=2349.46, 90=3407, 99=4931, 99.9=7423, 99.99=10471] 
2023-06-05 12:50:55:963 1110 sec: 62377281 operations; 56466.2 current ops/sec; [READ: Count=281951, Max=124031, Min=400, Avg=4628.07, 90=6851, 99=12111, 99.9=31551, 99.99=74175] [UPDATE: Count=282865, Max=15135, Min=327, Avg=2332.44, 90=3395, 99=4951, 99.9=7667, 99.99=10071] 
2023-06-05 12:51:05:963 1120 sec: 62938046 operations; 56076.5 current ops/sec; [READ: Count=280733, Max=118911, Min=400, Avg=4720.08, 90=6791, 99=12415, 99.9=66175, 99.99=75647] [UPDATE: Count=279514, Max=28015, Min=340, Avg=2334.87, 90=3385, 99=4915, 99.9=9255, 99.99=17999] 
2023-06-05 12:51:15:963 1130 sec: 63499752 operations; 56170.6 current ops/sec; [READ: Count=280781, Max=185855, Min=430, Avg=4694.89, 90=6847, 99=15007, 99.9=51455, 99.99=88831] [UPDATE: Count=281326, Max=28223, Min=318, Avg=2321.28, 90=3379, 99=5187, 99.9=8823, 99.99=11471] 
2023-06-05 12:51:25:963 1140 sec: 64062263 operations; 56251.1 current ops/sec; [READ: Count=281396, Max=124479, Min=422, Avg=4746.16, 90=6855, 99=17775, 99.9=81791, 99.99=116351] [UPDATE: Count=281229, Max=16895, Min=308, Avg=2309.76, 90=3367, 99=5599, 99.9=8951, 99.99=10647] 
2023-06-05 12:51:35:963 1150 sec: 64629150 operations; 56688.7 current ops/sec; [READ: Count=283297, Max=41823, Min=448, Avg=4625.87, 90=6883, 99=16279, 99.9=27023, 99.99=31999] [UPDATE: Count=283501, Max=12655, Min=333, Avg=2315.07, 90=3393, 99=5531, 99.9=9063, 99.99=10767] 
2023-06-05 12:51:45:963 1160 sec: 65194725 operations; 56557.5 current ops/sec; [READ: Count=282674, Max=43103, Min=407, Avg=4554.1, 90=6791, 99=14663, 99.9=25375, 99.99=28911] [UPDATE: Count=282937, Max=16575, Min=331, Avg=2291.2, 90=3373, 99=5303, 99.9=8327, 99.99=11023] 
2023-06-05 12:51:55:963 1170 sec: 65757763 operations; 56303.8 current ops/sec; [READ: Count=281522, Max=34175, Min=453, Avg=4429.94, 90=6659, 99=13263, 99.9=22831, 99.99=26783] [UPDATE: Count=281184, Max=24207, Min=332, Avg=2268.01, 90=3339, 99=5195, 99.9=9135, 99.99=16895] 
2023-06-05 12:52:05:963 1180 sec: 66319873 operations; 56211 current ops/sec; [READ: Count=280727, Max=46655, Min=427, Avg=4476.02, 90=6699, 99=14871, 99.9=25503, 99.99=30415] [UPDATE: Count=281656, Max=20255, Min=310, Avg=2254.12, 90=3317, 99=5131, 99.9=8287, 99.99=11159] 
2023-06-05 12:52:15:963 1190 sec: 66881253 operations; 56138 current ops/sec; [READ: Count=280644, Max=128127, Min=399, Avg=4630.13, 90=6671, 99=15807, 99.9=82239, 99.99=90623] [UPDATE: Count=280861, Max=11303, Min=315, Avg=2251.43, 90=3323, 99=5115, 99.9=8063, 99.99=10007] 
2023-06-05 12:52:25:963 1200 sec: 67445692 operations; 56443.9 current ops/sec; [READ: Count=281808, Max=33407, Min=425, Avg=4346.77, 90=6615, 99=10783, 99.9=19663, 99.99=26447] [UPDATE: Count=282519, Max=18895, Min=340, Avg=2239.2, 90=3307, 99=4807, 99.9=6771, 99.99=8271] 
2023-06-05 12:52:35:963 1210 sec: 68008210 operations; 56251.8 current ops/sec; [READ: Count=281159, Max=30799, Min=424, Avg=4309.28, 90=6571, 99=10487, 99.9=16479, 99.99=24543] [UPDATE: Count=281279, Max=15295, Min=343, Avg=2214.63, 90=3281, 99=4707, 99.9=6595, 99.99=8791] 
2023-06-05 12:52:45:963 1220 sec: 68570747 operations; 56253.7 current ops/sec; [READ: Count=280946, Max=36159, Min=428, Avg=4372.87, 90=6715, 99=11055, 99.9=17855, 99.99=25135] [UPDATE: Count=281621, Max=19855, Min=350, Avg=2224.93, 90=3293, 99=4759, 99.9=6743, 99.99=9231] 
2023-06-05 12:52:55:963 1230 sec: 69132988 operations; 56224.1 current ops/sec; [READ: Count=281185, Max=233855, Min=409, Avg=4505.46, 90=6643, 99=11439, 99.9=65119, 99.99=173567] [UPDATE: Count=281179, Max=33119, Min=328, Avg=2227.85, 90=3297, 99=4831, 99.9=7055, 99.99=9279] 
2023-06-05 12:53:05:963 1240 sec: 69695484 operations; 56249.6 current ops/sec; [READ: Count=281090, Max=39743, Min=416, Avg=4402.84, 90=6711, 99=11183, 99.9=27327, 99.99=33503] [UPDATE: Count=281260, Max=21119, Min=315, Avg=2236.22, 90=3309, 99=4835, 99.9=7131, 99.99=10191] 
2023-06-05 12:53:15:963 1250 sec: 70258227 operations; 56274.3 current ops/sec; [READ: Count=281061, Max=31551, Min=413, Avg=4418.77, 90=6743, 99=11847, 99.9=19599, 99.99=27887] [UPDATE: Count=281749, Max=12175, Min=338, Avg=2248.78, 90=3327, 99=4887, 99.9=7139, 99.99=9143] 
2023-06-05 12:53:25:963 1260 sec: 70820490 operations; 56226.3 current ops/sec; [READ: Count=281228, Max=55711, Min=446, Avg=4415.79, 90=6707, 99=11367, 99.9=22495, 99.99=44927] [UPDATE: Count=281013, Max=13199, Min=348, Avg=2251.61, 90=3333, 99=4923, 99.9=7547, 99.99=10055] 
2023-06-05 12:53:35:963 1270 sec: 71377923 operations; 55743.3 current ops/sec; [READ: Count=278170, Max=307199, Min=414, Avg=4555.74, 90=6739, 99=13871, 99.9=39359, 99.99=158847] [UPDATE: Count=279378, Max=14215, Min=338, Avg=2252.13, 90=3343, 99=5163, 99.9=8335, 99.99=10407] 
2023-06-05 12:53:45:963 1280 sec: 71936761 operations; 55883.8 current ops/sec; [READ: Count=279548, Max=205951, Min=402, Avg=4768.86, 90=6643, 99=12095, 99.9=157183, 99.99=165503] [UPDATE: Count=279246, Max=24463, Min=332, Avg=2231.14, 90=3315, 99=4907, 99.9=7867, 99.99=10311] 
2023-06-05 12:53:55:963 1290 sec: 72505661 operations; 56890 current ops/sec; [READ: Count=284228, Max=133759, Min=462, Avg=4589.6, 90=6807, 99=13535, 99.9=49631, 99.99=109567] [UPDATE: Count=284736, Max=29535, Min=338, Avg=2264, 90=3357, 99=5103, 99.9=7891, 99.99=10183] 
2023-06-05 12:54:05:963 1300 sec: 73069364 operations; 56370.3 current ops/sec; [READ: Count=281805, Max=94655, Min=404, Avg=4561.93, 90=6683, 99=14615, 99.9=61983, 99.99=80063] [UPDATE: Count=281187, Max=54687, Min=315, Avg=2223.99, 90=3303, 99=5163, 99.9=8591, 99.99=11047] 
2023-06-05 12:54:15:963 1310 sec: 73622297 operations; 55293.3 current ops/sec; [READ: Count=275959, Max=274687, Min=434, Avg=4873.52, 90=6663, 99=21247, 99.9=161663, 99.99=269567] [UPDATE: Count=277679, Max=274687, Min=345, Avg=2281.04, 90=3273, 99=5631, 99.9=10087, 99.99=268031] 
2023-06-05 12:54:25:963 1320 sec: 74178246 operations; 55594.9 current ops/sec; [READ: Count=277896, Max=159103, Min=419, Avg=4910.42, 90=6875, 99=24895, 99.9=100735, 99.99=137727] [UPDATE: Count=278234, Max=15191, Min=331, Avg=2222.92, 90=3323, 99=5943, 99.9=9127, 99.99=10983] 
2023-06-05 12:54:35:963 1330 sec: 74741984 operations; 56373.8 current ops/sec; [READ: Count=281474, Max=86975, Min=394, Avg=4815.66, 90=7083, 99=23871, 99.9=57759, 99.99=66751] [UPDATE: Count=282109, Max=18607, Min=350, Avg=2241.27, 90=3347, 99=6003, 99.9=9191, 99.99=11359] 
2023-06-05 12:54:45:963 1340 sec: 75306485 operations; 56450.1 current ops/sec; [READ: Count=282013, Max=188927, Min=412, Avg=4793.24, 90=7019, 99=21871, 99.9=95423, 99.99=109567] [UPDATE: Count=282543, Max=18159, Min=332, Avg=2239.64, 90=3351, 99=5619, 99.9=8695, 99.99=10935] 
2023-06-05 12:54:55:963 1350 sec: 75876620 operations; 57013.5 current ops/sec; [READ: Count=285260, Max=139647, Min=377, Avg=4655.21, 90=7051, 99=15159, 99.9=40447, 99.99=100863] [UPDATE: Count=284330, Max=22687, Min=318, Avg=2260.81, 90=3369, 99=5351, 99.9=8359, 99.99=14871] 
2023-06-05 12:55:05:963 1360 sec: 76443146 operations; 56652.6 current ops/sec; [READ: Count=283430, Max=60415, Min=361, Avg=4587.63, 90=7015, 99=13903, 99.9=27919, 99.99=35647] [UPDATE: Count=283535, Max=17119, Min=353, Avg=2265.07, 90=3361, 99=5151, 99.9=7899, 99.99=10831] 
2023-06-05 12:55:15:963 1370 sec: 76987990 operations; 54484.4 current ops/sec; [READ: Count=272673, Max=129215, Min=401, Avg=4983.22, 90=7283, 99=23663, 99.9=81599, 99.99=87423] [UPDATE: Count=272217, Max=17599, Min=331, Avg=2290.37, 90=3419, 99=6087, 99.9=8991, 99.99=11079] 
2023-06-05 12:55:25:963 1380 sec: 77554047 operations; 56605.7 current ops/sec; [READ: Count=283347, Max=136319, Min=410, Avg=4778.6, 90=6999, 99=19135, 99.9=71807, 99.99=84927] [UPDATE: Count=282780, Max=16511, Min=347, Avg=2262.55, 90=3371, 99=5359, 99.9=8855, 99.99=10943] 
2023-06-05 12:55:35:963 1390 sec: 78078205 operations; 52415.8 current ops/sec; [READ: Count=261890, Max=542207, Min=394, Avg=5436.09, 90=6239, 99=18415, 99.9=342527, 99.99=425983] [UPDATE: Count=262120, Max=12343, Min=309, Avg=2097.11, 90=3177, 99=5195, 99.9=8719, 99.99=10711] 
2023-06-05 12:55:45:963 1400 sec: 78608152 operations; 52994.7 current ops/sec; [READ: Count=265677, Max=407295, Min=401, Avg=5407.98, 90=6375, 99=19535, 99.9=371199, 99.99=396799] [UPDATE: Count=264414, Max=36511, Min=313, Avg=2111.87, 90=3205, 99=5355, 99.9=8623, 99.99=29567] 
2023-06-05 12:55:55:963 1410 sec: 79156875 operations; 54872.3 current ops/sec; [READ: Count=274102, Max=463871, Min=391, Avg=5138.56, 90=6595, 99=14631, 99.9=380159, 99.99=448767] [UPDATE: Count=274488, Max=15959, Min=331, Avg=2138.58, 90=3251, 99=5035, 99.9=7987, 99.99=9999] 
2023-06-05 12:56:05:963 1420 sec: 79724681 operations; 56780.6 current ops/sec; [READ: Count=283539, Max=119103, Min=448, Avg=4784.9, 90=7295, 99=20895, 99.9=49791, 99.99=89855] [UPDATE: Count=284375, Max=17503, Min=313, Avg=2257.01, 90=3409, 99=5755, 99.9=8695, 99.99=12015] 
2023-06-05 12:56:15:963 1430 sec: 80296064 operations; 57138.3 current ops/sec; [READ: Count=285509, Max=169599, Min=421, Avg=4740.09, 90=7191, 99=18383, 99.9=54047, 99.99=101247] [UPDATE: Count=285820, Max=12871, Min=349, Avg=2252.31, 90=3399, 99=5463, 99.9=8487, 99.99=10415] 
2023-06-05 12:56:25:963 1440 sec: 80857245 operations; 56118.1 current ops/sec; [READ: Count=280733, Max=182143, Min=403, Avg=4879.86, 90=7139, 99=23311, 99.9=86271, 99.99=138367] [UPDATE: Count=280697, Max=22559, Min=334, Avg=2233.61, 90=3377, 99=5755, 99.9=8759, 99.99=13799] 
2023-06-05 12:56:35:963 1450 sec: 81427693 operations; 57044.8 current ops/sec; [READ: Count=285332, Max=97599, Min=394, Avg=4746.18, 90=7303, 99=17167, 99.9=47903, 99.99=82879] [UPDATE: Count=284941, Max=13319, Min=341, Avg=2249.32, 90=3395, 99=5455, 99.9=8223, 99.99=10159] 
2023-06-05 12:56:45:963 1460 sec: 81997125 operations; 56943.2 current ops/sec; [READ: Count=285086, Max=59871, Min=394, Avg=4766.76, 90=7491, 99=17071, 99.9=32831, 99.99=40127] [UPDATE: Count=284231, Max=16767, Min=332, Avg=2235.12, 90=3393, 99=5291, 99.9=7783, 99.99=10311] 
2023-06-05 12:56:55:963 1470 sec: 82557570 operations; 56044.5 current ops/sec; [READ: Count=280305, Max=252415, Min=408, Avg=4888.89, 90=7183, 99=22927, 99.9=91071, 99.99=133503] [UPDATE: Count=280306, Max=28863, Min=311, Avg=2223.2, 90=3375, 99=5639, 99.9=8343, 99.99=10103] 
2023-06-05 12:57:05:963 1480 sec: 83114705 operations; 55713.5 current ops/sec; [READ: Count=278026, Max=284159, Min=389, Avg=4976.66, 90=6799, 99=18047, 99.9=163071, 99.99=202751] [UPDATE: Count=278954, Max=19903, Min=327, Avg=2182.08, 90=3313, 99=5123, 99.9=8111, 99.99=12959] 
2023-06-05 12:57:15:963 1490 sec: 83678645 operations; 56394 current ops/sec; [READ: Count=281809, Max=172415, Min=385, Avg=4851.28, 90=7067, 99=15263, 99.9=134015, 99.99=160767] [UPDATE: Count=282195, Max=11967, Min=335, Avg=2230.3, 90=3373, 99=5231, 99.9=7471, 99.99=9383] 
2023-06-05 12:57:25:963 1500 sec: 84250932 operations; 57228.7 current ops/sec; [READ: Count=285992, Max=118335, Min=420, Avg=4713.44, 90=7127, 99=14287, 99.9=62431, 99.99=95103] [UPDATE: Count=286294, Max=14983, Min=349, Avg=2259.61, 90=3395, 99=5107, 99.9=7215, 99.99=9071] 
2023-06-05 12:57:35:963 1510 sec: 84813717 operations; 56278.5 current ops/sec; [READ: Count=281960, Max=321535, Min=430, Avg=4809.09, 90=7067, 99=18399, 99.9=76543, 99.99=214655] [UPDATE: Count=280890, Max=21887, Min=316, Avg=2271.86, 90=3391, 99=5379, 99.9=8263, 99.99=10399] 
2023-06-05 12:57:45:963 1520 sec: 85374131 operations; 56041.4 current ops/sec; [READ: Count=280843, Max=124351, Min=430, Avg=4852.28, 90=7139, 99=21215, 99.9=81087, 99.99=89791] [UPDATE: Count=279645, Max=16511, Min=321, Avg=2265.05, 90=3385, 99=5731, 99.9=8871, 99.99=12399] 
2023-06-05 12:57:55:963 1530 sec: 85937353 operations; 56322.2 current ops/sec; [READ: Count=281365, Max=97855, Min=420, Avg=4827.72, 90=7211, 99=20415, 99.9=68479, 99.99=75519] [UPDATE: Count=281810, Max=30399, Min=325, Avg=2266.89, 90=3387, 99=5743, 99.9=8687, 99.99=10591] 
2023-06-05 12:58:05:963 1540 sec: 86497830 operations; 56047.7 current ops/sec; [READ: Count=280357, Max=74751, Min=370, Avg=4836.26, 90=7371, 99=21487, 99.9=42527, 99.99=54111] [UPDATE: Count=280077, Max=21599, Min=325, Avg=2288.34, 90=3429, 99=5835, 99.9=8783, 99.99=10775] 
2023-06-05 12:58:15:963 1550 sec: 87055285 operations; 55745.5 current ops/sec; [READ: Count=278277, Max=135935, Min=407, Avg=4901.58, 90=7119, 99=24831, 99.9=110591, 99.99=118847] [UPDATE: Count=279105, Max=12455, Min=341, Avg=2268.15, 90=3397, 99=5643, 99.9=8687, 99.99=10255] 
2023-06-05 12:58:25:963 1560 sec: 87615363 operations; 56007.8 current ops/sec; [READ: Count=280532, Max=103295, Min=421, Avg=4854.78, 90=7163, 99=24287, 99.9=60479, 99.99=99071] [UPDATE: Count=279649, Max=15583, Min=315, Avg=2278.65, 90=3405, 99=6011, 99.9=9319, 99.99=11215] 
2023-06-05 12:58:35:963 1570 sec: 88155417 operations; 54005.4 current ops/sec; [READ: Count=269777, Max=188415, Min=391, Avg=5157.83, 90=7087, 99=27567, 99.9=131455, 99.99=143231] [UPDATE: Count=270344, Max=13183, Min=327, Avg=2246.69, 90=3381, 99=6335, 99.9=9351, 99.99=11231] 
2023-06-05 12:58:45:963 1580 sec: 88703861 operations; 54844.4 current ops/sec; [READ: Count=274170, Max=114751, Min=409, Avg=5002.86, 90=7383, 99=25775, 99.9=53119, 99.99=69055] [UPDATE: Count=273618, Max=30799, Min=332, Avg=2294.75, 90=3443, 99=6611, 99.9=9751, 99.99=16303] 
2023-06-05 12:58:55:963 1590 sec: 89251765 operations; 54790.4 current ops/sec; [READ: Count=274172, Max=77119, Min=383, Avg=4994.17, 90=7379, 99=24831, 99.9=49311, 99.99=63775] [UPDATE: Count=274306, Max=30847, Min=346, Avg=2294.55, 90=3425, 99=6383, 99.9=9311, 99.99=12223] 
2023-06-05 12:59:05:963 1600 sec: 89784996 operations; 53323.1 current ops/sec; [READ: Count=266240, Max=369407, Min=404, Avg=5255.56, 90=6835, 99=26575, 99.9=159743, 99.99=229503] [UPDATE: Count=266950, Max=16511, Min=327, Avg=2235.49, 90=3335, 99=6243, 99.9=9119, 99.99=11335] 
2023-06-05 12:59:15:963 1610 sec: 90300041 operations; 51504.5 current ops/sec; [READ: Count=257748, Max=597503, Min=393, Avg=5598.92, 90=6235, 99=19951, 99.9=324863, 99.99=424703] [UPDATE: Count=257253, Max=14551, Min=331, Avg=2156.84, 90=3229, 99=5227, 99.9=8199, 99.99=10399] 
2023-06-05 12:59:25:963 1620 sec: 90846906 operations; 54686.5 current ops/sec; [READ: Count=273094, Max=357375, Min=414, Avg=5088.61, 90=6687, 99=15663, 99.9=321791, 99.99=329471] [UPDATE: Count=273792, Max=11935, Min=302, Avg=2243.64, 90=3325, 99=5035, 99.9=7743, 99.99=9927] 
2023-06-05 12:59:35:963 1630 sec: 91415868 operations; 56896.2 current ops/sec; [READ: Count=284105, Max=125183, Min=408, Avg=4714.47, 90=7071, 99=14087, 99.9=50655, 99.99=74943] [UPDATE: Count=284857, Max=12839, Min=338, Avg=2315.87, 90=3417, 99=5251, 99.9=8023, 99.99=10103] 
2023-06-05 12:59:45:963 1640 sec: 91985648 operations; 56978 current ops/sec; [READ: Count=285216, Max=116991, Min=422, Avg=4696.82, 90=7051, 99=13903, 99.9=37439, 99.99=97023] [UPDATE: Count=284588, Max=17551, Min=342, Avg=2317.25, 90=3409, 99=5231, 99.9=8335, 99.99=10599] 
2023-06-05 12:59:55:963 1650 sec: 92552695 operations; 56704.7 current ops/sec; [READ: Count=283828, Max=113663, Min=421, Avg=4741.08, 90=6967, 99=14759, 99.9=80127, 99.99=88127] [UPDATE: Count=283160, Max=17327, Min=349, Avg=2306.11, 90=3395, 99=5207, 99.9=8631, 99.99=10975] 
2023-06-05 13:00:05:963 1660 sec: 93122530 operations; 56983.5 current ops/sec; [READ: Count=285119, Max=84799, Min=422, Avg=4692.18, 90=7007, 99=14055, 99.9=31487, 99.99=73983] [UPDATE: Count=284837, Max=18383, Min=345, Avg=2324.18, 90=3413, 99=5091, 99.9=7567, 99.99=9911] 
2023-06-05 13:00:15:963 1670 sec: 93674910 operations; 55238 current ops/sec; [READ: Count=276003, Max=327679, Min=419, Avg=4925.48, 90=6887, 99=17343, 99.9=100543, 99.99=269567] [UPDATE: Count=276397, Max=16463, Min=337, Avg=2314.07, 90=3389, 99=5339, 99.9=8187, 99.99=11943] 
2023-06-05 13:00:25:963 1680 sec: 94239859 operations; 56494.9 current ops/sec; [READ: Count=282362, Max=29983, Min=443, Avg=4717.83, 90=7127, 99=13383, 99.9=21999, 99.99=26735] [UPDATE: Count=282422, Max=12607, Min=362, Avg=2360.96, 90=3439, 99=5107, 99.9=7355, 99.99=9143] 
2023-06-05 13:00:35:963 1690 sec: 94780511 operations; 54065.2 current ops/sec; [READ: Count=270448, Max=268287, Min=433, Avg=5053.79, 90=7155, 99=18367, 99.9=149759, 99.99=185215] [UPDATE: Count=270311, Max=14247, Min=349, Avg=2340.3, 90=3425, 99=5755, 99.9=8735, 99.99=10879] 
2023-06-05 13:00:45:963 1700 sec: 95330638 operations; 55012.7 current ops/sec; [READ: Count=275859, Max=127295, Min=388, Avg=4905.21, 90=7235, 99=19247, 99.9=50719, 99.99=99711] [UPDATE: Count=274286, Max=20303, Min=346, Avg=2355.39, 90=3461, 99=5743, 99.9=9103, 99.99=11567] 
2023-06-05 13:00:55:963 1710 sec: 95868641 operations; 53800.3 current ops/sec; [READ: Count=269217, Max=232447, Min=427, Avg=5131.96, 90=6931, 99=28239, 99.9=134527, 99.99=193279] [UPDATE: Count=268838, Max=19023, Min=341, Avg=2297.11, 90=3385, 99=5823, 99.9=9287, 99.99=11423] 
2023-06-05 13:01:05:963 1720 sec: 96414807 operations; 54616.6 current ops/sec; [READ: Count=272677, Max=179583, Min=434, Avg=5008.52, 90=6963, 99=19967, 99.9=98623, 99.99=133631] [UPDATE: Count=273385, Max=18303, Min=349, Avg=2315.11, 90=3391, 99=5479, 99.9=8575, 99.99=10983] 
2023-06-05 13:01:15:963 1730 sec: 96953364 operations; 53855.7 current ops/sec; [READ: Count=269496, Max=161151, Min=426, Avg=5101.98, 90=7039, 99=22847, 99.9=95743, 99.99=155519] [UPDATE: Count=269097, Max=21695, Min=344, Avg=2321.07, 90=3407, 99=5719, 99.9=8927, 99.99=13343] 
2023-06-05 13:01:25:963 1740 sec: 97496549 operations; 54318.5 current ops/sec; [READ: Count=271692, Max=164607, Min=422, Avg=5041.48, 90=7055, 99=21807, 99.9=87807, 99.99=137087] [UPDATE: Count=271436, Max=18511, Min=335, Avg=2318.44, 90=3419, 99=5627, 99.9=8431, 99.99=10399] 
2023-06-05 13:01:35:963 1750 sec: 98060012 operations; 56346.3 current ops/sec; [READ: Count=281805, Max=99071, Min=418, Avg=4740.2, 90=7123, 99=12799, 99.9=38783, 99.99=76991] [UPDATE: Count=281673, Max=11967, Min=348, Avg=2356.89, 90=3457, 99=5155, 99.9=7503, 99.99=9847] 
2023-06-05 13:01:45:963 1760 sec: 98625784 operations; 56577.2 current ops/sec; [READ: Count=283335, Max=50847, Min=403, Avg=4718.88, 90=7027, 99=14319, 99.9=33567, 99.99=40031] [UPDATE: Count=282373, Max=22927, Min=348, Avg=2344.28, 90=3417, 99=5111, 99.9=8823, 99.99=14607] 
2023-06-05 13:01:55:963 1770 sec: 99185572 operations; 55978.8 current ops/sec; [READ: Count=279542, Max=89855, Min=413, Avg=4770.48, 90=7035, 99=16943, 99.9=31263, 99.99=73855] [UPDATE: Count=280328, Max=74751, Min=332, Avg=2375.29, 90=3423, 99=5299, 99.9=9071, 99.99=71295] 
2023-06-05 13:02:05:963 1780 sec: 99741665 operations; 55609.3 current ops/sec; [READ: Count=278054, Max=110207, Min=436, Avg=4821.95, 90=7027, 99=17871, 99.9=37759, 99.99=99135] [UPDATE: Count=278020, Max=19647, Min=352, Avg=2368.29, 90=3435, 99=5459, 99.9=8831, 99.99=10919] 
2023-06-05 13:02:15:963 1790 sec: 100287710 operations; 54604.5 current ops/sec; [READ: Count=272800, Max=290047, Min=405, Avg=5000.2, 90=6811, 99=17487, 99.9=159487, 99.99=191487] [UPDATE: Count=273314, Max=33375, Min=341, Avg=2319.17, 90=3383, 99=5323, 99.9=8107, 99.99=10183] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:25:963 1800 sec: 100944556 operations; 65684.6 current ops/sec; [READ: Count=328294, Max=203519, Min=388, Avg=4032.44, 90=5823, 99=8999, 99.9=156927, 99.99=167167] [UPDATE: Count=328098, Max=15071, Min=311, Avg=2058.49, 90=3129, 99=4419, 99.9=7003, 99.99=9783] 
Still waiting for thread Thread-92 to complete. Workload status: true
2023-06-05 13:02:28:207 1802 sec: 100946078 operations; 677.95 current ops/sec; [READ: Count=807, Max=7755, Min=586, Avg=3217.71, 90=4951, 99=6271, 99.9=6839, 99.99=7755] [CLEANUP: Count=200, Max=2222079, Min=0, Avg=11106.39, 90=2, 99=7, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802244
[OVERALL], Throughput(ops/sec), 56011.32699013008
[TOTAL_GCS_PS_Scavenge], Count, 6701
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 16841
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.934446168221395
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 136
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.007546148024351863
[TOTAL_GCs], Count, 6704
[TOTAL_GC_TIME], Time(ms), 16977
[TOTAL_GC_TIME_%], Time(%), 0.941992316245747
[READ], Operations, 50471421
[READ], AverageLatency(us), 4505.6271159672715
[READ], MinLatency(us), 345
[READ], MaxLatency(us), 652287
[READ], 95thPercentileLatency(us), 7903
[READ], 99thPercentileLatency(us), 16071
[READ], Return=OK, 50471421
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11106.39
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 7
[UPDATE], Operations, 50474657
[UPDATE], AverageLatency(us), 2181.9206527743218
[UPDATE], MinLatency(us), 298
[UPDATE], MaxLatency(us), 274687
[UPDATE], 95thPercentileLatency(us), 3689
[UPDATE], 99thPercentileLatency(us), 5251
[UPDATE], Return=OK, 50474657
