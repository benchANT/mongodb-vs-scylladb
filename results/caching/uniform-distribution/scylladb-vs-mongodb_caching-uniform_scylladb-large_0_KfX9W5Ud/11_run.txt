bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:25:399 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
2023-06-05 12:32:35:383 10 sec: 510070 operations; 51007 current ops/sec; [READ: Count=255256, Max=91967, Min=401, Avg=3666.93, 90=5767, 99=17775, 99.9=29759, 99.99=76607] [UPDATE: Count=256276, Max=96255, Min=323, Avg=1959.41, 90=2857, 99=7295, 99.9=23743, 99.99=74559] 
2023-06-05 12:32:45:382 20 sec: 1072551 operations; 56248.1 current ops/sec; [READ: Count=281306, Max=45791, Min=398, Avg=3670.7, 90=5655, 99=17199, 99.9=23119, 99.99=29231] [UPDATE: Count=280800, Max=14607, Min=318, Avg=1854.22, 90=2801, 99=5675, 99.9=7887, 99.99=9519] 
2023-06-05 12:32:55:382 30 sec: 1634976 operations; 56242.5 current ops/sec; [READ: Count=281195, Max=41983, Min=389, Avg=3828.87, 90=5911, 99=18127, 99.9=32319, 99.99=36095] [UPDATE: Count=281247, Max=17215, Min=313, Avg=1899.37, 90=2883, 99=5887, 99.9=8035, 99.99=9479] 
2023-06-05 12:33:05:382 40 sec: 2197409 operations; 56243.3 current ops/sec; [READ: Count=281080, Max=43871, Min=385, Avg=3869.18, 90=6003, 99=17935, 99.9=28927, 99.99=32959] [UPDATE: Count=281400, Max=15519, Min=311, Avg=1924.31, 90=2929, 99=5871, 99.9=7975, 99.99=9943] 
2023-06-05 12:33:15:383 50 sec: 2758376 operations; 56096.7 current ops/sec; [READ: Count=280001, Max=148095, Min=375, Avg=4383.89, 90=6599, 99=24719, 99.9=80063, 99.99=86143] [UPDATE: Count=281070, Max=18223, Min=294, Avg=1996.89, 90=3055, 99=6203, 99.9=8215, 99.99=9783] 
2023-06-05 12:33:25:382 60 sec: 3322308 operations; 56393.2 current ops/sec; [READ: Count=281254, Max=126143, Min=414, Avg=4398.64, 90=6551, 99=23631, 99.9=69631, 99.99=87935] [UPDATE: Count=282081, Max=25359, Min=289, Avg=2029.98, 90=3091, 99=6275, 99.9=8687, 99.99=17967] 
2023-06-05 12:33:35:382 70 sec: 3884674 operations; 56236.6 current ops/sec; [READ: Count=281108, Max=57119, Min=415, Avg=4155.96, 90=6567, 99=18783, 99.9=26047, 99.99=34367] [UPDATE: Count=281722, Max=11135, Min=333, Avg=2031.92, 90=3107, 99=6059, 99.9=8155, 99.99=9647] 
2023-06-05 12:33:45:385 80 sec: 4447088 operations; 56230.15 current ops/sec; [READ: Count=281506, Max=64639, Min=368, Avg=4207.28, 90=6579, 99=19023, 99.9=38367, 99.99=44799] [UPDATE: Count=281206, Max=18511, Min=309, Avg=2044.64, 90=3141, 99=6095, 99.9=8167, 99.99=10119] 
2023-06-05 12:33:55:382 90 sec: 5009852 operations; 56287.66 current ops/sec; [READ: Count=281303, Max=42175, Min=401, Avg=4175.74, 90=6591, 99=18879, 99.9=31279, 99.99=36127] [UPDATE: Count=280694, Max=27455, Min=322, Avg=2044.89, 90=3149, 99=6099, 99.9=8399, 99.99=14575] 
2023-06-05 12:34:05:383 100 sec: 5571407 operations; 56155.5 current ops/sec; [READ: Count=280930, Max=52511, Min=391, Avg=4241.35, 90=6655, 99=20847, 99.9=31039, 99.99=38655] [UPDATE: Count=281194, Max=21679, Min=308, Avg=2028.44, 90=3105, 99=6343, 99.9=8623, 99.99=11207] 
2023-06-05 12:34:15:382 110 sec: 6131729 operations; 56032.2 current ops/sec; [READ: Count=280748, Max=180351, Min=380, Avg=4660.47, 90=6719, 99=27007, 99.9=98367, 99.99=115775] [UPDATE: Count=279594, Max=12415, Min=314, Avg=2050.24, 90=3123, 99=6615, 99.9=8983, 99.99=10871] 
2023-06-05 12:34:25:382 120 sec: 6697061 operations; 56533.2 current ops/sec; [READ: Count=283498, Max=102527, Min=400, Avg=4460.12, 90=6751, 99=23023, 99.9=58367, 99.99=97279] [UPDATE: Count=281766, Max=19391, Min=318, Avg=2083.47, 90=3151, 99=6627, 99.9=9511, 99.99=13063] 
2023-06-05 12:34:35:382 130 sec: 7246113 operations; 54905.2 current ops/sec; [READ: Count=274920, Max=305407, Min=378, Avg=4797.67, 90=6975, 99=22271, 99.9=160383, 99.99=270591] [UPDATE: Count=274167, Max=13911, Min=309, Avg=2062.9, 90=3121, 99=7071, 99.9=9415, 99.99=11447] 
2023-06-05 12:34:45:382 140 sec: 7802456 operations; 55634.3 current ops/sec; [READ: Count=278630, Max=275967, Min=368, Avg=5006.53, 90=6747, 99=24815, 99.9=162687, 99.99=229375] [UPDATE: Count=277733, Max=21023, Min=310, Avg=2061.85, 90=3121, 99=6875, 99.9=9383, 99.99=12167] 
2023-06-05 12:34:55:382 150 sec: 8354363 operations; 55190.7 current ops/sec; [READ: Count=275584, Max=346623, Min=363, Avg=5107.9, 90=6407, 99=24559, 99.9=188927, 99.99=291071] [UPDATE: Count=276197, Max=20559, Min=316, Avg=2027.64, 90=3075, 99=6743, 99.9=9191, 99.99=11095] 
2023-06-05 12:35:05:382 160 sec: 8923627 operations; 56926.4 current ops/sec; [READ: Count=284380, Max=214015, Min=388, Avg=4828.81, 90=6523, 99=20607, 99.9=190847, 99.99=194815] [UPDATE: Count=284995, Max=17039, Min=310, Avg=2077.64, 90=3147, 99=6107, 99.9=8559, 99.99=11055] 
2023-06-05 12:35:15:383 170 sec: 9469169 operations; 54554.2 current ops/sec; [READ: Count=273336, Max=372223, Min=361, Avg=5154.69, 90=6347, 99=28079, 99.9=222591, 99.99=268031] [UPDATE: Count=272067, Max=17295, Min=318, Avg=2053.44, 90=3135, 99=6063, 99.9=8439, 99.99=11095] 
2023-06-05 12:35:25:383 180 sec: 10052104 operations; 58293.5 current ops/sec; [READ: Count=291831, Max=228479, Min=392, Avg=4582.15, 90=6431, 99=20703, 99.9=158719, 99.99=193279] [UPDATE: Count=291285, Max=14967, Min=299, Avg=2119.7, 90=3163, 99=5491, 99.9=8311, 99.99=10399] 
2023-06-05 12:35:35:382 190 sec: 10623847 operations; 57174.3 current ops/sec; [READ: Count=285807, Max=301567, Min=369, Avg=4552.56, 90=6151, 99=23791, 99.9=154751, 99.99=200319] [UPDATE: Count=285878, Max=13599, Min=287, Avg=2079.81, 90=3113, 99=5507, 99.9=8607, 99.99=10487] 
2023-06-05 12:35:45:382 200 sec: 11192502 operations; 56865.5 current ops/sec; [READ: Count=283216, Max=201727, Min=387, Avg=4577.04, 90=6163, 99=21087, 99.9=162175, 99.99=192127] [UPDATE: Count=285282, Max=15527, Min=299, Avg=2086.52, 90=3121, 99=5491, 99.9=8591, 99.99=10703] 
2023-06-05 12:35:55:382 210 sec: 11759982 operations; 56748 current ops/sec; [READ: Count=284076, Max=156671, Min=409, Avg=4289.55, 90=6175, 99=19631, 99.9=98751, 99.99=135423] [UPDATE: Count=282879, Max=29103, Min=304, Avg=2089.17, 90=3115, 99=5575, 99.9=9295, 99.99=16135] 
2023-06-05 12:36:05:382 220 sec: 12322430 operations; 56244.8 current ops/sec; [READ: Count=280884, Max=142591, Min=409, Avg=4128.87, 90=5971, 99=19343, 99.9=56031, 99.99=84735] [UPDATE: Count=282236, Max=16943, Min=294, Avg=2035.42, 90=3051, 99=5503, 99.9=8455, 99.99=10791] 
2023-06-05 12:36:15:383 230 sec: 12885135 operations; 56270.5 current ops/sec; [READ: Count=281159, Max=55231, Min=389, Avg=3800.48, 90=5655, 99=14303, 99.9=35679, 99.99=50335] [UPDATE: Count=281457, Max=12087, Min=320, Avg=1976.97, 90=2985, 99=4811, 99.9=7635, 99.99=9575] 
2023-06-05 12:36:25:382 240 sec: 13447687 operations; 56255.2 current ops/sec; [READ: Count=281366, Max=30911, Min=391, Avg=3515.31, 90=5371, 99=7863, 99.9=16431, 99.99=23087] [UPDATE: Count=281052, Max=12695, Min=301, Avg=1915.6, 90=2905, 99=4085, 99.9=6251, 99.99=7911] 
2023-06-05 12:36:35:382 250 sec: 14010181 operations; 56249.4 current ops/sec; [READ: Count=281312, Max=49951, Min=429, Avg=3585.5, 90=5475, 99=8023, 99.9=14247, 99.99=46175] [UPDATE: Count=281092, Max=46879, Min=302, Avg=1952.05, 90=2961, 99=4135, 99.9=6415, 99.99=44447] 
2023-06-05 12:36:45:382 260 sec: 14572685 operations; 56250.4 current ops/sec; [READ: Count=281800, Max=23279, Min=361, Avg=3537.25, 90=5455, 99=8015, 99.9=11919, 99.99=19599] [UPDATE: Count=280687, Max=17871, Min=281, Avg=1925.83, 90=2945, 99=4151, 99.9=6455, 99.99=8767] 
2023-06-05 12:36:55:382 270 sec: 15135052 operations; 56236.7 current ops/sec; [READ: Count=281137, Max=32703, Min=351, Avg=3596.45, 90=5559, 99=8463, 99.9=13631, 99.99=23791] [UPDATE: Count=281337, Max=24623, Min=318, Avg=1947.87, 90=2995, 99=4299, 99.9=6523, 99.99=8903] 
2023-06-05 12:37:05:382 280 sec: 15697591 operations; 56253.9 current ops/sec; [READ: Count=281091, Max=30239, Min=399, Avg=3514.4, 90=5443, 99=8139, 99.9=12695, 99.99=22095] [UPDATE: Count=281375, Max=18063, Min=302, Avg=1912.54, 90=2953, 99=4191, 99.9=6387, 99.99=9831] 
2023-06-05 12:37:15:383 290 sec: 16260198 operations; 56260.7 current ops/sec; [READ: Count=281033, Max=107519, Min=382, Avg=3592.94, 90=5515, 99=8855, 99.9=20911, 99.99=41183] [UPDATE: Count=281160, Max=24591, Min=322, Avg=1931.44, 90=2965, 99=4411, 99.9=7451, 99.99=15463] 
2023-06-05 12:37:25:382 300 sec: 16822693 operations; 56249.5 current ops/sec; [READ: Count=281409, Max=37695, Min=353, Avg=3494.67, 90=5399, 99=8127, 99.9=11935, 99.99=19855] [UPDATE: Count=281457, Max=23759, Min=316, Avg=1897.75, 90=2919, 99=4139, 99.9=6299, 99.99=9551] 
2023-06-05 12:37:35:383 310 sec: 17385201 operations; 56250.8 current ops/sec; [READ: Count=281463, Max=85375, Min=384, Avg=3527.13, 90=5371, 99=8807, 99.9=24319, 99.99=45311] [UPDATE: Count=281154, Max=18479, Min=303, Avg=1890.78, 90=2907, 99=4303, 99.9=7039, 99.99=9167] 
2023-06-05 12:37:45:382 320 sec: 17947698 operations; 56249.7 current ops/sec; [READ: Count=281693, Max=26591, Min=363, Avg=3424.02, 90=5275, 99=8487, 99.9=18799, 99.99=22943] [UPDATE: Count=280727, Max=15951, Min=317, Avg=1849.09, 90=2829, 99=4235, 99.9=7247, 99.99=10535] 
2023-06-05 12:37:55:383 330 sec: 18510205 operations; 56250.7 current ops/sec; [READ: Count=281218, Max=30063, Min=385, Avg=3417.43, 90=5243, 99=9391, 99.9=21487, 99.99=25471] [UPDATE: Count=281342, Max=14159, Min=285, Avg=1833.1, 90=2795, 99=4451, 99.9=7923, 99.99=10255] 
2023-06-05 12:38:05:383 340 sec: 19072697 operations; 56249.2 current ops/sec; [READ: Count=280839, Max=30815, Min=390, Avg=3388.61, 90=5179, 99=8927, 99.9=21407, 99.99=25247] [UPDATE: Count=281646, Max=17663, Min=303, Avg=1824.71, 90=2771, 99=4319, 99.9=7735, 99.99=10495] 
2023-06-05 12:38:15:382 350 sec: 19635228 operations; 56253.1 current ops/sec; [READ: Count=280672, Max=26287, Min=393, Avg=3379.77, 90=5155, 99=8423, 99.9=19887, 99.99=23439] [UPDATE: Count=281846, Max=17487, Min=324, Avg=1822.72, 90=2761, 99=4099, 99.9=6803, 99.99=8775] 
2023-06-05 12:38:25:382 360 sec: 20197717 operations; 56248.9 current ops/sec; [READ: Count=281244, Max=16239, Min=386, Avg=3288.77, 90=5043, 99=7359, 99.9=9663, 99.99=12223] [UPDATE: Count=281156, Max=9367, Min=295, Avg=1806.24, 90=2753, 99=3905, 99.9=5723, 99.99=7259] 
2023-06-05 12:38:35:382 370 sec: 20760223 operations; 56250.6 current ops/sec; [READ: Count=280722, Max=53919, Min=379, Avg=3304.15, 90=5079, 99=7591, 99.9=12319, 99.99=24735] [UPDATE: Count=281821, Max=10463, Min=300, Avg=1805.97, 90=2755, 99=3967, 99.9=6071, 99.99=8255] 
2023-06-05 12:38:45:382 380 sec: 21322716 operations; 56249.3 current ops/sec; [READ: Count=280797, Max=18959, Min=371, Avg=3291.87, 90=5083, 99=7463, 99.9=10087, 99.99=13167] [UPDATE: Count=281624, Max=16063, Min=310, Avg=1806.9, 90=2767, 99=3905, 99.9=5919, 99.99=7615] 
2023-06-05 12:38:55:382 390 sec: 21885184 operations; 56246.8 current ops/sec; [READ: Count=280654, Max=20639, Min=358, Avg=3346.82, 90=5155, 99=7531, 99.9=10079, 99.99=14079] [UPDATE: Count=281802, Max=16207, Min=309, Avg=1834.68, 90=2809, 99=3987, 99.9=5915, 99.99=7783] 
2023-06-05 12:39:05:382 400 sec: 22447677 operations; 56249.3 current ops/sec; [READ: Count=281601, Max=27199, Min=408, Avg=3469.31, 90=5351, 99=7935, 99.9=11839, 99.99=18831] [UPDATE: Count=281004, Max=18399, Min=320, Avg=1886.63, 90=2903, 99=4135, 99.9=6243, 99.99=8951] 
2023-06-05 12:39:15:382 410 sec: 23010189 operations; 56251.2 current ops/sec; [READ: Count=280736, Max=27695, Min=345, Avg=3527.24, 90=5459, 99=8239, 99.9=13567, 99.99=21551] [UPDATE: Count=281768, Max=22895, Min=322, Avg=1907.12, 90=2925, 99=4215, 99.9=6875, 99.99=13863] 
2023-06-05 12:39:25:382 420 sec: 23572700 operations; 56251.1 current ops/sec; [READ: Count=280770, Max=21775, Min=396, Avg=3572.6, 90=5515, 99=8179, 99.9=11311, 99.99=16015] [UPDATE: Count=281674, Max=11287, Min=300, Avg=1926.95, 90=2957, 99=4215, 99.9=6215, 99.99=7719] 
2023-06-05 12:39:35:382 430 sec: 24135177 operations; 56247.7 current ops/sec; [READ: Count=281350, Max=21071, Min=390, Avg=3598.72, 90=5571, 99=8271, 99.9=10999, 99.99=14383] [UPDATE: Count=281175, Max=11399, Min=323, Avg=1942.04, 90=2997, 99=4207, 99.9=6111, 99.99=7647] 
2023-06-05 12:39:45:382 440 sec: 24697676 operations; 56249.9 current ops/sec; [READ: Count=280651, Max=23439, Min=383, Avg=3581.52, 90=5531, 99=8083, 99.9=11183, 99.99=15959] [UPDATE: Count=281840, Max=16751, Min=323, Avg=1939.28, 90=2987, 99=4183, 99.9=6347, 99.99=8359] 
2023-06-05 12:39:55:383 450 sec: 25260186 operations; 56251 current ops/sec; [READ: Count=281142, Max=28975, Min=395, Avg=3625.77, 90=5615, 99=8599, 99.9=15207, 99.99=22815] [UPDATE: Count=281457, Max=17647, Min=310, Avg=1947.58, 90=3007, 99=4339, 99.9=6671, 99.99=9199] 
2023-06-05 12:40:05:383 460 sec: 25822539 operations; 56235.3 current ops/sec; [READ: Count=281204, Max=42047, Min=409, Avg=3735.83, 90=5703, 99=10383, 99.9=29007, 99.99=34559] [UPDATE: Count=281254, Max=18735, Min=285, Avg=1961.86, 90=3009, 99=4579, 99.9=7331, 99.99=9799] 
2023-06-05 12:40:15:382 470 sec: 26376058 operations; 55351.9 current ops/sec; [READ: Count=276797, Max=278783, Min=375, Avg=4521.97, 90=6303, 99=23903, 99.9=139775, 99.99=232959] [UPDATE: Count=276910, Max=14215, Min=316, Avg=2074.17, 90=3155, 99=6159, 99.9=9031, 99.99=11311] 
2023-06-05 12:40:25:382 480 sec: 26947632 operations; 57157.4 current ops/sec; [READ: Count=286405, Max=199295, Min=396, Avg=4222.3, 90=5899, 99=19295, 99.9=100863, 99.99=120255] [UPDATE: Count=285075, Max=14935, Min=305, Avg=2019.55, 90=3047, 99=4895, 99.9=8535, 99.99=10823] 
2023-06-05 12:40:35:383 490 sec: 27510191 operations; 56255.9 current ops/sec; [READ: Count=281160, Max=35039, Min=374, Avg=3627.74, 90=5595, 99=8767, 99.9=15495, 99.99=22719] [UPDATE: Count=281235, Max=13303, Min=302, Avg=1939.04, 90=2973, 99=4239, 99.9=6559, 99.99=8727] 
2023-06-05 12:40:45:382 500 sec: 28072689 operations; 56249.8 current ops/sec; [READ: Count=281365, Max=37823, Min=386, Avg=3652.57, 90=5655, 99=9159, 99.9=18895, 99.99=28591] [UPDATE: Count=280918, Max=14903, Min=315, Avg=1945, 90=2989, 99=4471, 99.9=7159, 99.99=11183] 
2023-06-05 12:40:55:382 510 sec: 28635090 operations; 56240.1 current ops/sec; [READ: Count=280854, Max=76351, Min=362, Avg=3660.98, 90=5639, 99=9383, 99.9=30831, 99.99=42463] [UPDATE: Count=281141, Max=31119, Min=295, Avg=1935.69, 90=2973, 99=4523, 99.9=8367, 99.99=18671] 
2023-06-05 12:41:05:382 520 sec: 29197669 operations; 56257.9 current ops/sec; [READ: Count=280761, Max=28479, Min=361, Avg=3641.75, 90=5679, 99=8647, 99.9=13719, 99.99=21727] [UPDATE: Count=282421, Max=18959, Min=305, Avg=1942.58, 90=2999, 99=4371, 99.9=6503, 99.99=11559] 
2023-06-05 12:41:15:383 530 sec: 29760165 operations; 56249.6 current ops/sec; [READ: Count=281515, Max=23247, Min=351, Avg=3679.63, 90=5711, 99=9095, 99.9=17759, 99.99=21679] [UPDATE: Count=280987, Max=12695, Min=287, Avg=1954.66, 90=3007, 99=4519, 99.9=7251, 99.99=9599] 
2023-06-05 12:41:25:382 540 sec: 30322600 operations; 56243.5 current ops/sec; [READ: Count=280581, Max=32895, Min=373, Avg=3706.54, 90=5759, 99=8935, 99.9=14959, 99.99=21471] [UPDATE: Count=281845, Max=11991, Min=308, Avg=1972.4, 90=3039, 99=4419, 99.9=6639, 99.99=8327] 
2023-06-05 12:41:35:382 550 sec: 30885082 operations; 56248.2 current ops/sec; [READ: Count=281369, Max=40351, Min=398, Avg=3805.87, 90=5863, 99=10215, 99.9=23919, 99.99=29295] [UPDATE: Count=281167, Max=12047, Min=302, Avg=1992.11, 90=3063, 99=4671, 99.9=7563, 99.99=9647] 
2023-06-05 12:41:45:382 560 sec: 31442613 operations; 55753.1 current ops/sec; [READ: Count=278941, Max=303359, Min=404, Avg=4002.8, 90=5839, 99=12447, 99.9=113279, 99.99=164991] [UPDATE: Count=278544, Max=17999, Min=313, Avg=1991.21, 90=3059, 99=4955, 99.9=8671, 99.99=10927] 
2023-06-05 12:41:55:383 570 sec: 31989640 operations; 54702.7 current ops/sec; [READ: Count=272977, Max=404991, Min=372, Avg=4975.13, 90=5655, 99=13663, 99.9=228479, 99.99=367359] [UPDATE: Count=274130, Max=16719, Min=306, Avg=1943.27, 90=2999, 99=4671, 99.9=8159, 99.99=10287] 
2023-06-05 12:42:05:382 580 sec: 32549306 operations; 55966.6 current ops/sec; [READ: Count=279841, Max=311551, Min=381, Avg=4917.3, 90=5991, 99=23087, 99.9=228095, 99.99=271615] [UPDATE: Count=279876, Max=16495, Min=306, Avg=2029.9, 90=3095, 99=4915, 99.9=7987, 99.99=10135] 
2023-06-05 12:42:15:383 590 sec: 33073437 operations; 52407.86 current ops/sec; [READ: Count=261822, Max=385279, Min=372, Avg=5438.07, 90=7143, 99=27935, 99.9=191871, 99.99=304639] [UPDATE: Count=262205, Max=13487, Min=306, Avg=2126.68, 90=3287, 99=6659, 99.9=8951, 99.99=10743] 
2023-06-05 12:42:25:382 600 sec: 33569101 operations; 49571.36 current ops/sec; [READ: Count=248071, Max=557055, Min=360, Avg=6009.11, 90=6635, 99=43231, 99.9=325887, 99.99=330495] [UPDATE: Count=247838, Max=14807, Min=295, Avg=2055.35, 90=3213, 99=6231, 99.9=8647, 99.99=10823] 
2023-06-05 12:42:35:383 610 sec: 34101985 operations; 53288.4 current ops/sec; [READ: Count=266479, Max=341247, Min=400, Avg=5374.58, 90=6991, 99=34047, 99.9=194047, 99.99=322815] [UPDATE: Count=266517, Max=11999, Min=304, Avg=2139.18, 90=3309, 99=6183, 99.9=8567, 99.99=10463] 
2023-06-05 12:42:45:382 620 sec: 34653697 operations; 55171.2 current ops/sec; [READ: Count=276000, Max=271359, Min=381, Avg=5068.85, 90=7091, 99=30351, 99.9=158207, 99.99=166527] [UPDATE: Count=275630, Max=16463, Min=313, Avg=2180.3, 90=3335, 99=6079, 99.9=8187, 99.99=10183] 
2023-06-05 12:42:55:382 630 sec: 35219784 operations; 56608.7 current ops/sec; [READ: Count=283113, Max=260351, Min=390, Avg=4908.37, 90=6659, 99=30175, 99.9=134783, 99.99=151551] [UPDATE: Count=282838, Max=16655, Min=324, Avg=2150.51, 90=3279, 99=5707, 99.9=8171, 99.99=10175] 
2023-06-05 12:43:05:383 640 sec: 35798565 operations; 57878.1 current ops/sec; [READ: Count=289555, Max=160383, Min=404, Avg=4741.7, 90=6679, 99=18575, 99.9=118015, 99.99=138239] [UPDATE: Count=289225, Max=17023, Min=318, Avg=2167.76, 90=3283, 99=5375, 99.9=7871, 99.99=10263] 
2023-06-05 12:43:15:382 650 sec: 36365203 operations; 56663.8 current ops/sec; [READ: Count=282974, Max=262399, Min=350, Avg=4884.87, 90=6683, 99=21103, 99.9=161023, 99.99=176127] [UPDATE: Count=283784, Max=11367, Min=318, Avg=2175.4, 90=3293, 99=5519, 99.9=8003, 99.99=9815] 
2023-06-05 12:43:25:382 660 sec: 36940968 operations; 57576.5 current ops/sec; [READ: Count=287298, Max=264191, Min=346, Avg=4746.31, 90=6791, 99=18111, 99.9=112959, 99.99=207743] [UPDATE: Count=288439, Max=17423, Min=312, Avg=2198.17, 90=3329, 99=5463, 99.9=8043, 99.99=9615] 
2023-06-05 12:43:35:382 670 sec: 37532808 operations; 59184 current ops/sec; [READ: Count=295435, Max=36639, Min=404, Avg=4486.41, 90=6959, 99=12351, 99.9=21263, 99.99=25855] [UPDATE: Count=296165, Max=17999, Min=314, Avg=2256.74, 90=3377, 99=5155, 99.9=7635, 99.99=12791] 
2023-06-05 12:43:45:382 680 sec: 38121232 operations; 58842.4 current ops/sec; [READ: Count=293837, Max=32287, Min=373, Avg=4489.17, 90=6915, 99=12239, 99.9=21215, 99.99=25183] [UPDATE: Count=294490, Max=21711, Min=312, Avg=2273.87, 90=3385, 99=5111, 99.9=7967, 99.99=14583] 
2023-06-05 12:43:55:382 690 sec: 38696773 operations; 57554.1 current ops/sec; [READ: Count=287349, Max=125951, Min=399, Avg=4647.79, 90=6727, 99=14431, 99.9=83263, 99.99=90047] [UPDATE: Count=288329, Max=16279, Min=324, Avg=2261.22, 90=3361, 99=5251, 99.9=8115, 99.99=10239] 
2023-06-05 12:44:05:382 700 sec: 39271312 operations; 57453.9 current ops/sec; [READ: Count=287320, Max=82687, Min=409, Avg=4621.62, 90=6803, 99=15183, 99.9=50975, 99.99=72575] [UPDATE: Count=287246, Max=15943, Min=313, Avg=2290.87, 90=3391, 99=5307, 99.9=8775, 99.99=10751] 
2023-06-05 12:44:15:382 710 sec: 39840310 operations; 56899.8 current ops/sec; [READ: Count=284864, Max=185727, Min=390, Avg=4660.49, 90=6823, 99=16247, 99.9=42143, 99.99=106687] [UPDATE: Count=284124, Max=14263, Min=321, Avg=2311.1, 90=3403, 99=5431, 99.9=8647, 99.99=10607] 
2023-06-05 12:44:25:382 720 sec: 40393084 operations; 55277.4 current ops/sec; [READ: Count=276232, Max=220927, Min=353, Avg=4911.35, 90=6727, 99=20047, 99.9=134783, 99.99=150015] [UPDATE: Count=276614, Max=13391, Min=311, Avg=2298.58, 90=3389, 99=5775, 99.9=8871, 99.99=10831] 
2023-06-05 12:44:35:382 730 sec: 40956905 operations; 56382.1 current ops/sec; [READ: Count=282799, Max=51743, Min=396, Avg=4719.64, 90=7039, 99=16159, 99.9=33151, 99.99=37407] [UPDATE: Count=280887, Max=13815, Min=302, Avg=2354.09, 90=3469, 99=5675, 99.9=8863, 99.99=10695] 
2023-06-05 12:44:45:386 740 sec: 41520609 operations; 56353.49 current ops/sec; [READ: Count=281660, Max=45407, Min=398, Avg=4737.04, 90=7039, 99=17759, 99.9=30959, 99.99=36063] [UPDATE: Count=282169, Max=19487, Min=316, Avg=2347.74, 90=3469, 99=5747, 99.9=8879, 99.99=11175] 
2023-06-05 12:44:55:382 750 sec: 42089004 operations; 56856.56 current ops/sec; [READ: Count=284851, Max=46527, Min=404, Avg=4676.11, 90=6971, 99=16543, 99.9=27199, 99.99=33407] [UPDATE: Count=283459, Max=30575, Min=298, Avg=2335.69, 90=3445, 99=5539, 99.9=8671, 99.99=11135] 
2023-06-05 12:45:05:382 760 sec: 42654549 operations; 56554.5 current ops/sec; [READ: Count=283196, Max=52799, Min=376, Avg=4697.6, 90=6919, 99=18207, 99.9=27295, 99.99=32191] [UPDATE: Count=282355, Max=20159, Min=301, Avg=2346.52, 90=3441, 99=5715, 99.9=9199, 99.99=12903] 
2023-06-05 12:45:15:382 770 sec: 43185607 operations; 53105.8 current ops/sec; [READ: Count=265119, Max=534527, Min=389, Avg=5189.99, 90=6807, 99=23135, 99.9=260863, 99.99=277247] [UPDATE: Count=265840, Max=12751, Min=295, Avg=2306.87, 90=3415, 99=5799, 99.9=9015, 99.99=10799] 
2023-06-05 12:45:25:382 780 sec: 43718192 operations; 53258.5 current ops/sec; [READ: Count=266477, Max=307967, Min=397, Avg=5276.85, 90=6391, 99=18543, 99.9=273151, 99.99=276735] [UPDATE: Count=266194, Max=12447, Min=310, Avg=2230.8, 90=3307, 99=5267, 99.9=8223, 99.99=10279] 
2023-06-05 12:45:35:382 790 sec: 44284446 operations; 56625.4 current ops/sec; [READ: Count=282881, Max=279039, Min=408, Avg=4795.68, 90=6683, 99=12495, 99.9=226431, 99.99=273407] [UPDATE: Count=283436, Max=11647, Min=311, Avg=2278.31, 90=3359, 99=5023, 99.9=7543, 99.99=9663] 
2023-06-05 12:45:45:382 800 sec: 44865446 operations; 58100 current ops/sec; [READ: Count=290526, Max=51519, Min=424, Avg=4551.15, 90=6907, 99=10791, 99.9=18127, 99.99=26639] [UPDATE: Count=290386, Max=18959, Min=317, Avg=2325.28, 90=3415, 99=4859, 99.9=7019, 99.99=9047] 
2023-06-05 12:45:55:382 810 sec: 45442695 operations; 57724.9 current ops/sec; [READ: Count=288947, Max=37567, Min=349, Avg=4570.72, 90=6907, 99=11047, 99.9=18687, 99.99=29519] [UPDATE: Count=288288, Max=14647, Min=323, Avg=2338.23, 90=3427, 99=4891, 99.9=7023, 99.99=8671] 
2023-06-05 12:46:05:382 820 sec: 46019907 operations; 57721.2 current ops/sec; [READ: Count=288682, Max=27087, Min=391, Avg=4537.37, 90=6803, 99=10391, 99.9=15407, 99.99=21183] [UPDATE: Count=288494, Max=17551, Min=290, Avg=2352.52, 90=3427, 99=4823, 99.9=6947, 99.99=8831] 
2023-06-05 12:46:15:382 830 sec: 46594891 operations; 57498.4 current ops/sec; [READ: Count=287784, Max=107967, Min=373, Avg=4549.83, 90=6787, 99=10575, 99.9=21279, 99.99=51551] [UPDATE: Count=287008, Max=17823, Min=306, Avg=2344.43, 90=3415, 99=4907, 99.9=7259, 99.99=12303] 
2023-06-05 12:46:25:382 840 sec: 47165936 operations; 57104.5 current ops/sec; [READ: Count=285406, Max=31343, Min=404, Avg=4559.41, 90=6779, 99=10095, 99.9=15015, 99.99=21023] [UPDATE: Count=285829, Max=21087, Min=304, Avg=2362.69, 90=3427, 99=4783, 99.9=6971, 99.99=9447] 
2023-06-05 12:46:35:382 850 sec: 47727854 operations; 56191.8 current ops/sec; [READ: Count=280677, Max=93247, Min=412, Avg=4675.54, 90=6799, 99=12439, 99.9=32191, 99.99=51583] [UPDATE: Count=281344, Max=13439, Min=301, Avg=2397.2, 90=3463, 99=5147, 99.9=8139, 99.99=10415] 
2023-06-05 12:46:45:383 860 sec: 48290137 operations; 56228.3 current ops/sec; [READ: Count=281350, Max=37311, Min=394, Avg=4683.68, 90=6847, 99=11967, 99.9=25071, 99.99=29535] [UPDATE: Count=280988, Max=18943, Min=313, Avg=2411.1, 90=3471, 99=5043, 99.9=8055, 99.99=10815] 
2023-06-05 12:46:55:382 870 sec: 48853740 operations; 56360.3 current ops/sec; [READ: Count=281793, Max=37855, Min=380, Avg=4678.37, 90=6843, 99=11687, 99.9=25391, 99.99=30095] [UPDATE: Count=281695, Max=26239, Min=346, Avg=2403.36, 90=3463, 99=5031, 99.9=7891, 99.99=10335] 
2023-06-05 12:47:05:382 880 sec: 49414431 operations; 56069.1 current ops/sec; [READ: Count=280270, Max=39295, Min=410, Avg=4714.48, 90=6951, 99=13295, 99.9=24191, 99.99=28975] [UPDATE: Count=280490, Max=17935, Min=326, Avg=2402.77, 90=3479, 99=5283, 99.9=8123, 99.99=10367] 
2023-06-05 12:47:15:382 890 sec: 49972135 operations; 55770.4 current ops/sec; [READ: Count=279183, Max=76863, Min=407, Avg=4757.7, 90=6951, 99=15199, 99.9=30623, 99.99=54911] [UPDATE: Count=278526, Max=19311, Min=340, Avg=2400.25, 90=3459, 99=5519, 99.9=8479, 99.99=10567] 
2023-06-05 12:47:25:382 900 sec: 50530946 operations; 55881.1 current ops/sec; [READ: Count=279591, Max=68863, Min=385, Avg=4759.04, 90=6907, 99=17247, 99.9=27231, 99.99=50015] [UPDATE: Count=279294, Max=25327, Min=316, Avg=2392.04, 90=3443, 99=5707, 99.9=9111, 99.99=15567] 
2023-06-05 12:47:35:382 910 sec: 51089459 operations; 55851.3 current ops/sec; [READ: Count=279132, Max=36863, Min=421, Avg=4743.21, 90=6843, 99=15327, 99.9=26143, 99.99=29935] [UPDATE: Count=279255, Max=12879, Min=341, Avg=2414.37, 90=3459, 99=5319, 99.9=8335, 99.99=10215] 
2023-06-05 12:47:45:382 920 sec: 51651055 operations; 56159.6 current ops/sec; [READ: Count=280357, Max=37599, Min=455, Avg=4713.26, 90=6783, 99=13671, 99.9=26655, 99.99=31663] [UPDATE: Count=281184, Max=16255, Min=331, Avg=2408.37, 90=3435, 99=5083, 99.9=7663, 99.99=10047] 
2023-06-05 12:47:55:382 930 sec: 52214218 operations; 56316.3 current ops/sec; [READ: Count=281191, Max=37151, Min=415, Avg=4692.84, 90=6775, 99=13223, 99.9=23807, 99.99=27135] [UPDATE: Count=282136, Max=12287, Min=328, Avg=2407.57, 90=3445, 99=5047, 99.9=7311, 99.99=8831] 
2023-06-05 12:48:05:382 940 sec: 52780642 operations; 56642.4 current ops/sec; [READ: Count=283007, Max=30239, Min=427, Avg=4654.52, 90=6811, 99=11343, 99.9=21391, 99.99=25407] [UPDATE: Count=283332, Max=18127, Min=318, Avg=2402.28, 90=3455, 99=4951, 99.9=7267, 99.99=9391] 
2023-06-05 12:48:15:382 950 sec: 53345859 operations; 56521.7 current ops/sec; [READ: Count=282493, Max=27295, Min=430, Avg=4672.34, 90=6907, 99=11639, 99.9=21007, 99.99=24255] [UPDATE: Count=282672, Max=11855, Min=321, Avg=2393.32, 90=3455, 99=5027, 99.9=7275, 99.99=8719] 
2023-06-05 12:48:25:382 960 sec: 53915056 operations; 56919.7 current ops/sec; [READ: Count=284258, Max=38719, Min=397, Avg=4626.85, 90=6835, 99=11159, 99.9=20207, 99.99=24319] [UPDATE: Count=284976, Max=12535, Min=312, Avg=2377.5, 90=3431, 99=4935, 99.9=7263, 99.99=9655] 
2023-06-05 12:48:35:382 970 sec: 54484660 operations; 56960.4 current ops/sec; [READ: Count=283879, Max=41695, Min=433, Avg=4593.13, 90=6807, 99=10871, 99.9=21999, 99.99=30415] [UPDATE: Count=285733, Max=11231, Min=328, Avg=2365.79, 90=3425, 99=4887, 99.9=7223, 99.99=9135] 
2023-06-05 12:48:45:382 980 sec: 55048364 operations; 56370.4 current ops/sec; [READ: Count=281727, Max=121087, Min=429, Avg=4665.54, 90=6707, 99=12047, 99.9=55487, 99.99=76927] [UPDATE: Count=281937, Max=16463, Min=303, Avg=2348.09, 90=3391, 99=5035, 99.9=7683, 99.99=10111] 
2023-06-05 12:48:55:382 990 sec: 55609338 operations; 56097.4 current ops/sec; [READ: Count=280378, Max=98239, Min=402, Avg=4730.44, 90=6711, 99=12007, 99.9=66751, 99.99=75775] [UPDATE: Count=280596, Max=60511, Min=325, Avg=2364.19, 90=3405, 99=4927, 99.9=7775, 99.99=56799] 
2023-06-05 12:49:05:382 1000 sec: 56177485 operations; 56814.7 current ops/sec; [READ: Count=283509, Max=63231, Min=411, Avg=4639.35, 90=6775, 99=11671, 99.9=41087, 99.99=54015] [UPDATE: Count=284679, Max=18303, Min=343, Avg=2346.46, 90=3407, 99=4887, 99.9=7343, 99.99=9703] 
2023-06-05 12:49:15:382 1010 sec: 56743471 operations; 56598.6 current ops/sec; [READ: Count=282836, Max=37343, Min=379, Avg=4640.83, 90=6887, 99=12839, 99.9=27471, 99.99=33567] [UPDATE: Count=283053, Max=12615, Min=329, Avg=2342.42, 90=3419, 99=5039, 99.9=7335, 99.99=9479] 
2023-06-05 12:49:25:382 1020 sec: 57311692 operations; 56822.1 current ops/sec; [READ: Count=283843, Max=33599, Min=380, Avg=4527.06, 90=6771, 99=10551, 99.9=18239, 99.99=27535] [UPDATE: Count=284339, Max=11127, Min=304, Avg=2332.26, 90=3409, 99=4835, 99.9=6671, 99.99=8751] 
2023-06-05 12:49:35:382 1030 sec: 57876222 operations; 56453 current ops/sec; [READ: Count=283061, Max=29775, Min=375, Avg=4572.09, 90=6799, 99=10479, 99.9=17471, 99.99=23791] [UPDATE: Count=281460, Max=13471, Min=320, Avg=2367.08, 90=3435, 99=4843, 99.9=6995, 99.99=9215] 
2023-06-05 12:49:45:382 1040 sec: 58437866 operations; 56164.4 current ops/sec; [READ: Count=280670, Max=35103, Min=377, Avg=4626.24, 90=6839, 99=12631, 99.9=24863, 99.99=30063] [UPDATE: Count=281058, Max=16383, Min=321, Avg=2356.8, 90=3423, 99=5099, 99.9=7991, 99.99=10087] 
2023-06-05 12:49:55:382 1050 sec: 59003646 operations; 56578 current ops/sec; [READ: Count=282920, Max=37023, Min=416, Avg=4627.49, 90=6855, 99=12479, 99.9=25359, 99.99=30063] [UPDATE: Count=282857, Max=12831, Min=320, Avg=2351.8, 90=3421, 99=5043, 99.9=7899, 99.99=10279] 
2023-06-05 12:50:05:382 1060 sec: 59567569 operations; 56392.3 current ops/sec; [READ: Count=282082, Max=34751, Min=419, Avg=4595.62, 90=6855, 99=11943, 99.9=24495, 99.99=29327] [UPDATE: Count=281806, Max=19103, Min=309, Avg=2340.8, 90=3405, 99=4971, 99.9=7475, 99.99=10175] 
2023-06-05 12:50:15:382 1070 sec: 60103203 operations; 53563.4 current ops/sec; [READ: Count=268144, Max=205439, Min=393, Avg=5085.77, 90=6987, 99=23807, 99.9=113663, 99.99=151679] [UPDATE: Count=267454, Max=18159, Min=317, Avg=2336.34, 90=3433, 99=5751, 99.9=8543, 99.99=11767] 
2023-06-05 12:50:25:382 1080 sec: 60676441 operations; 57323.8 current ops/sec; [READ: Count=287210, Max=126271, Min=402, Avg=4638.24, 90=6903, 99=12687, 99.9=26927, 99.99=77375] [UPDATE: Count=286180, Max=19519, Min=305, Avg=2325.14, 90=3373, 99=4871, 99.9=7903, 99.99=10439] 
2023-06-05 12:50:35:382 1090 sec: 61244927 operations; 56848.6 current ops/sec; [READ: Count=283996, Max=35071, Min=394, Avg=4655.16, 90=6899, 99=13375, 99.9=26239, 99.99=30191] [UPDATE: Count=284455, Max=11927, Min=317, Avg=2353.49, 90=3411, 99=5043, 99.9=7975, 99.99=9943] 
2023-06-05 12:50:45:382 1100 sec: 61813029 operations; 56810.2 current ops/sec; [READ: Count=283476, Max=50303, Min=432, Avg=4638.03, 90=6887, 99=12231, 99.9=25087, 99.99=29727] [UPDATE: Count=284572, Max=23007, Min=328, Avg=2354.83, 90=3413, 99=4991, 99.9=7635, 99.99=10119] 
2023-06-05 12:50:55:382 1110 sec: 62377176 operations; 56414.7 current ops/sec; [READ: Count=281757, Max=111999, Min=412, Avg=4647.59, 90=6887, 99=12375, 99.9=28687, 99.99=73407] [UPDATE: Count=282529, Max=19887, Min=330, Avg=2343.04, 90=3405, 99=5103, 99.9=8147, 99.99=13079] 
2023-06-05 12:51:05:382 1120 sec: 62937166 operations; 55999 current ops/sec; [READ: Count=279580, Max=114943, Min=432, Avg=4729.44, 90=6803, 99=12279, 99.9=68863, 99.99=75519] [UPDATE: Count=280236, Max=17455, Min=316, Avg=2336.16, 90=3403, 99=5003, 99.9=8027, 99.99=11215] 
2023-06-05 12:51:15:382 1130 sec: 63500083 operations; 56291.7 current ops/sec; [READ: Count=281151, Max=150015, Min=415, Avg=4683.48, 90=6887, 99=14311, 99.9=50815, 99.99=63327] [UPDATE: Count=281779, Max=12631, Min=320, Avg=2339.48, 90=3415, 99=5299, 99.9=8679, 99.99=10751] 
2023-06-05 12:51:25:382 1140 sec: 64061327 operations; 56124.4 current ops/sec; [READ: Count=280839, Max=194303, Min=390, Avg=4767.32, 90=6855, 99=18255, 99.9=83135, 99.99=118015] [UPDATE: Count=280558, Max=13831, Min=308, Avg=2320.23, 90=3379, 99=5711, 99.9=9159, 99.99=10903] 
2023-06-05 12:51:35:382 1150 sec: 64628384 operations; 56705.7 current ops/sec; [READ: Count=283448, Max=39359, Min=432, Avg=4640.91, 90=6899, 99=16135, 99.9=27375, 99.99=32239] [UPDATE: Count=283547, Max=22991, Min=312, Avg=2329.67, 90=3401, 99=5683, 99.9=9351, 99.99=14799] 
2023-06-05 12:51:45:382 1160 sec: 65195506 operations; 56712.2 current ops/sec; [READ: Count=282816, Max=33215, Min=408, Avg=4564.16, 90=6827, 99=14599, 99.9=25087, 99.99=28719] [UPDATE: Count=284263, Max=16303, Min=334, Avg=2294.95, 90=3369, 99=5267, 99.9=8383, 99.99=10783] 
2023-06-05 12:51:55:382 1170 sec: 65759412 operations; 56390.6 current ops/sec; [READ: Count=282281, Max=35455, Min=421, Avg=4437.59, 90=6679, 99=13215, 99.9=23119, 99.99=26799] [UPDATE: Count=281566, Max=16895, Min=321, Avg=2259.47, 90=3335, 99=5103, 99.9=8035, 99.99=9863] 
2023-06-05 12:52:05:382 1180 sec: 66321620 operations; 56220.8 current ops/sec; [READ: Count=280640, Max=40959, Min=371, Avg=4480.91, 90=6711, 99=14727, 99.9=25343, 99.99=29967] [UPDATE: Count=281688, Max=17407, Min=337, Avg=2267.1, 90=3345, 99=5223, 99.9=8383, 99.99=10903] 
2023-06-05 12:52:15:382 1190 sec: 66882304 operations; 56068.4 current ops/sec; [READ: Count=279732, Max=145535, Min=394, Avg=4641.3, 90=6707, 99=15783, 99.9=82687, 99.99=88703] [UPDATE: Count=281031, Max=11559, Min=331, Avg=2261.92, 90=3341, 99=5187, 99.9=8159, 99.99=9863] 
2023-06-05 12:52:25:382 1200 sec: 67447355 operations; 56505.1 current ops/sec; [READ: Count=282321, Max=40479, Min=429, Avg=4361.32, 90=6623, 99=10751, 99.9=21375, 99.99=27039] [UPDATE: Count=282560, Max=12199, Min=314, Avg=2245.35, 90=3315, 99=4831, 99.9=6899, 99.99=8679] 
2023-06-05 12:52:35:382 1210 sec: 68009904 operations; 56254.9 current ops/sec; [READ: Count=281645, Max=32671, Min=391, Avg=4314.67, 90=6583, 99=10527, 99.9=16359, 99.99=24015] [UPDATE: Count=280839, Max=12175, Min=310, Avg=2220.58, 90=3283, 99=4743, 99.9=6719, 99.99=8647] 
2023-06-05 12:52:45:382 1220 sec: 68572371 operations; 56246.7 current ops/sec; [READ: Count=282012, Max=34047, Min=400, Avg=4380.47, 90=6719, 99=11159, 99.9=17775, 99.99=25679] [UPDATE: Count=280450, Max=34079, Min=331, Avg=2234.3, 90=3303, 99=4859, 99.9=6923, 99.99=9207] 
2023-06-05 12:52:55:382 1230 sec: 69134281 operations; 56191 current ops/sec; [READ: Count=281753, Max=206847, Min=395, Avg=4494.3, 90=6631, 99=11447, 99.9=58335, 99.99=174847] [UPDATE: Count=280423, Max=30175, Min=333, Avg=2233.89, 90=3309, 99=4899, 99.9=7151, 99.99=9119] 
2023-06-05 12:53:05:382 1240 sec: 69697340 operations; 56305.9 current ops/sec; [READ: Count=281372, Max=42655, Min=432, Avg=4405.94, 90=6699, 99=11103, 99.9=26767, 99.99=34111] [UPDATE: Count=281531, Max=18159, Min=319, Avg=2242.72, 90=3319, 99=4835, 99.9=7339, 99.99=10231] 
2023-06-05 12:53:15:382 1250 sec: 70259883 operations; 56254.3 current ops/sec; [READ: Count=281160, Max=36959, Min=423, Avg=4425.21, 90=6763, 99=11863, 99.9=19471, 99.99=27375] [UPDATE: Count=281345, Max=14511, Min=331, Avg=2254, 90=3335, 99=4935, 99.9=7351, 99.99=9039] 
2023-06-05 12:53:25:382 1260 sec: 70822206 operations; 56232.3 current ops/sec; [READ: Count=281364, Max=56927, Min=378, Avg=4414.69, 90=6695, 99=11207, 99.9=22735, 99.99=43967] [UPDATE: Count=281035, Max=13791, Min=343, Avg=2254.7, 90=3347, 99=4939, 99.9=7543, 99.99=10031] 
2023-06-05 12:53:35:382 1270 sec: 71380211 operations; 55800.5 current ops/sec; [READ: Count=279514, Max=294655, Min=391, Avg=4541.77, 90=6787, 99=13455, 99.9=32895, 99.99=142207] [UPDATE: Count=278502, Max=12767, Min=328, Avg=2261.93, 90=3361, 99=5231, 99.9=8287, 99.99=10327] 
2023-06-05 12:53:45:383 1280 sec: 71938235 operations; 55802.4 current ops/sec; [READ: Count=278281, Max=232319, Min=393, Avg=4760.2, 90=6639, 99=12279, 99.9=140415, 99.99=165247] [UPDATE: Count=279708, Max=16431, Min=330, Avg=2236.65, 90=3331, 99=5051, 99.9=7991, 99.99=10239] 
2023-06-05 12:53:55:382 1290 sec: 72506822 operations; 56858.7 current ops/sec; [READ: Count=284017, Max=134015, Min=396, Avg=4591.31, 90=6815, 99=13287, 99.9=51295, 99.99=109119] [UPDATE: Count=283935, Max=32479, Min=316, Avg=2278.98, 90=3385, 99=5203, 99.9=8343, 99.99=17663] 
2023-06-05 12:54:05:382 1300 sec: 73070476 operations; 56365.4 current ops/sec; [READ: Count=282155, Max=104255, Min=379, Avg=4574.43, 90=6703, 99=14879, 99.9=61887, 99.99=84159] [UPDATE: Count=282286, Max=22207, Min=318, Avg=2226.06, 90=3315, 99=5139, 99.9=8487, 99.99=11855] 
2023-06-05 12:54:15:382 1310 sec: 73625522 operations; 55504.6 current ops/sec; [READ: Count=277181, Max=260351, Min=385, Avg=4752.5, 90=6679, 99=20511, 99.9=159231, 99.99=173311] [UPDATE: Count=277407, Max=25183, Min=319, Avg=2214.27, 90=3301, 99=5763, 99.9=9671, 99.99=15567] 
2023-06-05 12:54:25:384 1320 sec: 74179929 operations; 55429.61 current ops/sec; [READ: Count=277588, Max=169983, Min=413, Avg=4921.09, 90=6883, 99=24911, 99.9=102271, 99.99=161407] [UPDATE: Count=277541, Max=15759, Min=306, Avg=2210.95, 90=3309, 99=5875, 99.9=9351, 99.99=11407] 
2023-06-05 12:54:35:382 1330 sec: 74745970 operations; 56615.42 current ops/sec; [READ: Count=283283, Max=95999, Min=438, Avg=4792.12, 90=7023, 99=23759, 99.9=59103, 99.99=71295] [UPDATE: Count=282420, Max=14207, Min=313, Avg=2231.32, 90=3337, 99=5811, 99.9=9215, 99.99=11495] 
2023-06-05 12:54:45:382 1340 sec: 75308885 operations; 56291.5 current ops/sec; [READ: Count=281970, Max=180095, Min=418, Avg=4814.49, 90=7043, 99=22847, 99.9=95103, 99.99=110207] [UPDATE: Count=281123, Max=16575, Min=317, Avg=2238.9, 90=3355, 99=5775, 99.9=8687, 99.99=10543] 
2023-06-05 12:54:55:382 1350 sec: 75878515 operations; 56963 current ops/sec; [READ: Count=284671, Max=134783, Min=431, Avg=4665.92, 90=7083, 99=15551, 99.9=38431, 99.99=99903] [UPDATE: Count=284802, Max=25151, Min=323, Avg=2266.06, 90=3387, 99=5419, 99.9=8255, 99.99=10471] 
2023-06-05 12:55:05:382 1360 sec: 76445588 operations; 56707.3 current ops/sec; [READ: Count=283949, Max=65919, Min=397, Avg=4581.57, 90=7015, 99=13551, 99.9=28639, 99.99=35103] [UPDATE: Count=283077, Max=19279, Min=318, Avg=2269.43, 90=3379, 99=5175, 99.9=7819, 99.99=10951] 
2023-06-05 12:55:15:382 1370 sec: 76990211 operations; 54462.3 current ops/sec; [READ: Count=272365, Max=135551, Min=370, Avg=4965.57, 90=7291, 99=23343, 99.9=80447, 99.99=90303] [UPDATE: Count=272383, Max=16943, Min=324, Avg=2300.71, 90=3447, 99=6087, 99.9=8815, 99.99=10711] 
2023-06-05 12:55:25:382 1380 sec: 77555059 operations; 56484.8 current ops/sec; [READ: Count=282419, Max=90367, Min=397, Avg=4785.76, 90=7023, 99=18575, 99.9=75519, 99.99=84479] [UPDATE: Count=282458, Max=13239, Min=298, Avg=2278.99, 90=3411, 99=5519, 99.9=8815, 99.99=10679] 
2023-06-05 12:55:35:382 1390 sec: 78072114 operations; 51705.5 current ops/sec; [READ: Count=258341, Max=543743, Min=371, Avg=5529.96, 90=6295, 99=19663, 99.9=343039, 99.99=431359] [UPDATE: Count=258695, Max=16719, Min=299, Avg=2115.44, 90=3217, 99=5247, 99.9=8727, 99.99=10639] 
2023-06-05 12:55:45:382 1400 sec: 78597845 operations; 52573.1 current ops/sec; [READ: Count=262935, Max=406015, Min=376, Avg=5481.51, 90=6375, 99=19087, 99.9=373247, 99.99=398847] [UPDATE: Count=262450, Max=21119, Min=299, Avg=2109.61, 90=3217, 99=5355, 99.9=8799, 99.99=13407] 
2023-06-05 12:55:55:382 1410 sec: 79140538 operations; 54269.3 current ops/sec; [READ: Count=271145, Max=463359, Min=392, Avg=5222.17, 90=6571, 99=14407, 99.9=383999, 99.99=450559] [UPDATE: Count=271899, Max=22095, Min=293, Avg=2137.91, 90=3261, 99=5095, 99.9=8055, 99.99=10647] 
2023-06-05 12:56:05:382 1420 sec: 79705602 operations; 56506.4 current ops/sec; [READ: Count=282398, Max=120383, Min=385, Avg=4813.7, 90=7303, 99=21583, 99.9=50783, 99.99=106495] [UPDATE: Count=282634, Max=32223, Min=326, Avg=2263.2, 90=3419, 99=5855, 99.9=8863, 99.99=29103] 
2023-06-05 12:56:15:382 1430 sec: 80276811 operations; 57120.9 current ops/sec; [READ: Count=285891, Max=173567, Min=381, Avg=4737.58, 90=7179, 99=18287, 99.9=52991, 99.99=102591] [UPDATE: Count=285347, Max=12511, Min=335, Avg=2256.36, 90=3413, 99=5515, 99.9=8407, 99.99=10439] 
2023-06-05 12:56:25:382 1440 sec: 80836897 operations; 56008.6 current ops/sec; [READ: Count=280630, Max=185599, Min=369, Avg=4890.71, 90=7135, 99=23391, 99.9=95679, 99.99=138367] [UPDATE: Count=279523, Max=18831, Min=317, Avg=2237.97, 90=3399, 99=5663, 99.9=8383, 99.99=10119] 
2023-06-05 12:56:35:382 1450 sec: 81406714 operations; 56981.7 current ops/sec; [READ: Count=283978, Max=94847, Min=375, Avg=4760.01, 90=7311, 99=17503, 99.9=45055, 99.99=83199] [UPDATE: Count=285789, Max=33791, Min=314, Avg=2259.66, 90=3419, 99=5415, 99.9=8431, 99.99=31679] 
2023-06-05 12:56:45:382 1460 sec: 81977404 operations; 57069 current ops/sec; [READ: Count=285490, Max=56767, Min=385, Avg=4760.12, 90=7459, 99=16767, 99.9=32735, 99.99=41023] [UPDATE: Count=284734, Max=21583, Min=325, Avg=2243.38, 90=3405, 99=5343, 99.9=8087, 99.99=14407] 
2023-06-05 12:56:55:382 1470 sec: 82537222 operations; 55981.8 current ops/sec; [READ: Count=279440, Max=202111, Min=355, Avg=4894.53, 90=7251, 99=22751, 99.9=72063, 99.99=117375] [UPDATE: Count=280420, Max=30751, Min=293, Avg=2240.82, 90=3407, 99=5743, 99.9=8823, 99.99=15647] 
2023-06-05 12:57:05:382 1480 sec: 83091013 operations; 55379.1 current ops/sec; [READ: Count=276742, Max=290047, Min=400, Avg=5023.83, 90=6843, 99=18527, 99.9=162687, 99.99=215295] [UPDATE: Count=277517, Max=19167, Min=302, Avg=2188.73, 90=3329, 99=5211, 99.9=7955, 99.99=11999] 
2023-06-05 12:57:15:382 1490 sec: 83650901 operations; 55988.8 current ops/sec; [READ: Count=279691, Max=171007, Min=373, Avg=4899.37, 90=7087, 99=15487, 99.9=135039, 99.99=162559] [UPDATE: Count=279782, Max=17583, Min=307, Avg=2238.26, 90=3387, 99=5275, 99.9=7651, 99.99=11023] 
2023-06-05 12:57:25:382 1500 sec: 84221678 operations; 57077.7 current ops/sec; [READ: Count=285244, Max=136063, Min=395, Avg=4735.2, 90=7155, 99=14655, 99.9=67455, 99.99=94143] [UPDATE: Count=285944, Max=20959, Min=329, Avg=2265.46, 90=3403, 99=5211, 99.9=7471, 99.99=10511] 
2023-06-05 12:57:35:382 1510 sec: 84783395 operations; 56171.7 current ops/sec; [READ: Count=281499, Max=326143, Min=404, Avg=4830.77, 90=7083, 99=18191, 99.9=81407, 99.99=229631] [UPDATE: Count=280170, Max=13495, Min=317, Avg=2275.45, 90=3407, 99=5407, 99.9=8183, 99.99=10455] 
2023-06-05 12:57:45:382 1520 sec: 85343439 operations; 56004.4 current ops/sec; [READ: Count=279544, Max=128191, Min=377, Avg=4866.68, 90=7167, 99=21087, 99.9=81215, 99.99=91775] [UPDATE: Count=280503, Max=21103, Min=325, Avg=2273.11, 90=3405, 99=5683, 99.9=8935, 99.99=11095] 
2023-06-05 12:57:55:382 1530 sec: 85905787 operations; 56234.8 current ops/sec; [READ: Count=281785, Max=100223, Min=398, Avg=4831.79, 90=7203, 99=20543, 99.9=69119, 99.99=78527] [UPDATE: Count=280463, Max=34143, Min=308, Avg=2271.26, 90=3403, 99=5719, 99.9=8751, 99.99=10719] 
2023-06-05 12:58:05:382 1540 sec: 86467264 operations; 56147.7 current ops/sec; [READ: Count=280144, Max=64447, Min=388, Avg=4832.84, 90=7375, 99=21007, 99.9=42783, 99.99=50687] [UPDATE: Count=281218, Max=16111, Min=300, Avg=2290.36, 90=3433, 99=5859, 99.9=8775, 99.99=10871] 
2023-06-05 12:58:15:382 1550 sec: 87024412 operations; 55714.8 current ops/sec; [READ: Count=278253, Max=138367, Min=394, Avg=4902.93, 90=7135, 99=24719, 99.9=110783, 99.99=118719] [UPDATE: Count=279148, Max=13191, Min=322, Avg=2273.46, 90=3409, 99=5747, 99.9=8751, 99.99=10575] 
2023-06-05 12:58:25:382 1560 sec: 87580827 operations; 55641.5 current ops/sec; [READ: Count=278720, Max=105023, Min=404, Avg=4899.27, 90=7175, 99=24783, 99.9=72511, 99.99=100671] [UPDATE: Count=276979, Max=29279, Min=324, Avg=2286.97, 90=3419, 99=6063, 99.9=9631, 99.99=16703] 
2023-06-05 12:58:35:382 1570 sec: 88119929 operations; 53910.2 current ops/sec; [READ: Count=269687, Max=196735, Min=388, Avg=5157.2, 90=7091, 99=27199, 99.9=133375, 99.99=153471] [UPDATE: Count=270081, Max=25871, Min=324, Avg=2251.46, 90=3391, 99=6387, 99.9=9463, 99.99=11879] 
2023-06-05 12:58:45:382 1580 sec: 88666720 operations; 54679.1 current ops/sec; [READ: Count=273246, Max=115583, Min=365, Avg=5016.53, 90=7391, 99=26015, 99.9=54335, 99.99=69695] [UPDATE: Count=273470, Max=19823, Min=329, Avg=2296.8, 90=3453, 99=6599, 99.9=9351, 99.99=11503] 
2023-06-05 12:58:55:382 1590 sec: 89212137 operations; 54541.7 current ops/sec; [READ: Count=272903, Max=77247, Min=400, Avg=5017.98, 90=7407, 99=25103, 99.9=51455, 99.99=64287] [UPDATE: Count=272598, Max=16623, Min=317, Avg=2311.08, 90=3463, 99=6511, 99.9=9199, 99.99=11295] 
2023-06-05 12:59:05:382 1600 sec: 89744635 operations; 53249.8 current ops/sec; [READ: Count=266368, Max=276223, Min=368, Avg=5235.57, 90=6911, 99=26367, 99.9=158463, 99.99=240895] [UPDATE: Count=266005, Max=19199, Min=310, Avg=2258.78, 90=3369, 99=6411, 99.9=9271, 99.99=11551] 
2023-06-05 12:59:15:382 1610 sec: 90255708 operations; 51107.3 current ops/sec; [READ: Count=255434, Max=776703, Min=353, Avg=5654.21, 90=6243, 99=20671, 99.9=324607, 99.99=444927] [UPDATE: Count=255644, Max=11743, Min=291, Avg=2161.93, 90=3239, 99=5291, 99.9=8303, 99.99=10247] 
2023-06-05 12:59:25:382 1620 sec: 90800969 operations; 54526.1 current ops/sec; [READ: Count=272445, Max=362495, Min=398, Avg=5111.79, 90=6655, 99=15223, 99.9=322303, 99.99=329215] [UPDATE: Count=272930, Max=13199, Min=316, Avg=2244.31, 90=3329, 99=5107, 99.9=7871, 99.99=10119] 
2023-06-05 12:59:35:382 1630 sec: 91368664 operations; 56769.5 current ops/sec; [READ: Count=284126, Max=85311, Min=394, Avg=4717.5, 90=7087, 99=14231, 99.9=47839, 99.99=72831] [UPDATE: Count=283210, Max=17695, Min=321, Avg=2324.96, 90=3429, 99=5355, 99.9=8311, 99.99=11383] 
2023-06-05 12:59:45:382 1640 sec: 91938536 operations; 56987.2 current ops/sec; [READ: Count=284814, Max=120063, Min=413, Avg=4692.37, 90=7083, 99=13807, 99.9=31391, 99.99=97087] [UPDATE: Count=285302, Max=17295, Min=307, Avg=2320.27, 90=3419, 99=5247, 99.9=8431, 99.99=10935] 
2023-06-05 12:59:55:382 1650 sec: 92504431 operations; 56589.5 current ops/sec; [READ: Count=282779, Max=114239, Min=421, Avg=4756.37, 90=6995, 99=14919, 99.9=80383, 99.99=89279] [UPDATE: Count=282554, Max=29647, Min=320, Avg=2317.85, 90=3407, 99=5367, 99.9=8991, 99.99=17487] 
2023-06-05 13:00:05:382 1660 sec: 93070950 operations; 56651.9 current ops/sec; [READ: Count=283387, Max=89535, Min=397, Avg=4715.14, 90=7051, 99=14407, 99.9=34783, 99.99=82111] [UPDATE: Count=283677, Max=19695, Min=339, Avg=2336.01, 90=3433, 99=5299, 99.9=7883, 99.99=12463] 
2023-06-05 13:00:15:382 1670 sec: 93622481 operations; 55153.1 current ops/sec; [READ: Count=275855, Max=321535, Min=404, Avg=4935.68, 90=6883, 99=17151, 99.9=100607, 99.99=269567] [UPDATE: Count=275850, Max=12591, Min=336, Avg=2312.79, 90=3393, 99=5287, 99.9=7855, 99.99=9903] 
2023-06-05 13:00:25:382 1680 sec: 94186535 operations; 56405.4 current ops/sec; [READ: Count=281321, Max=37087, Min=436, Avg=4730.36, 90=7159, 99=13391, 99.9=21839, 99.99=25823] [UPDATE: Count=282462, Max=11511, Min=331, Avg=2364.38, 90=3449, 99=5219, 99.9=7487, 99.99=9223] 
2023-06-05 13:00:35:382 1690 sec: 94725736 operations; 53920.1 current ops/sec; [READ: Count=269744, Max=268799, Min=403, Avg=5063.62, 90=7179, 99=18655, 99.9=138367, 99.99=185471] [UPDATE: Count=269758, Max=13455, Min=341, Avg=2349.55, 90=3441, 99=5839, 99.9=8591, 99.99=10367] 
2023-06-05 13:00:45:382 1700 sec: 95276561 operations; 55082.5 current ops/sec; [READ: Count=274873, Max=124543, Min=425, Avg=4901.08, 90=7243, 99=18831, 99.9=50143, 99.99=98879] [UPDATE: Count=275671, Max=18095, Min=335, Avg=2362.04, 90=3473, 99=5839, 99.9=9287, 99.99=11951] 
2023-06-05 13:00:55:382 1710 sec: 95813511 operations; 53695 current ops/sec; [READ: Count=268673, Max=226047, Min=390, Avg=5144.05, 90=6955, 99=29919, 99.9=134655, 99.99=193279] [UPDATE: Count=268503, Max=19871, Min=328, Avg=2300.11, 90=3395, 99=5943, 99.9=9327, 99.99=12023] 
2023-06-05 13:01:05:382 1720 sec: 96361159 operations; 54764.8 current ops/sec; [READ: Count=273193, Max=166783, Min=397, Avg=4983.02, 90=6991, 99=19535, 99.9=97855, 99.99=137983] [UPDATE: Count=274399, Max=25039, Min=317, Avg=2322.43, 90=3407, 99=5467, 99.9=8711, 99.99=10831] 
2023-06-05 13:01:15:382 1730 sec: 96900942 operations; 53978.3 current ops/sec; [READ: Count=269970, Max=163071, Min=387, Avg=5081.63, 90=7031, 99=22495, 99.9=95871, 99.99=145535] [UPDATE: Count=269760, Max=34015, Min=317, Avg=2325.1, 90=3421, 99=5759, 99.9=8679, 99.99=10663] 
2023-06-05 13:01:25:382 1740 sec: 97444732 operations; 54379 current ops/sec; [READ: Count=271786, Max=198271, Min=411, Avg=5029.92, 90=7039, 99=21199, 99.9=86911, 99.99=136575] [UPDATE: Count=272092, Max=17823, Min=331, Avg=2324.52, 90=3431, 99=5699, 99.9=8399, 99.99=10311] 
2023-06-05 13:01:35:382 1750 sec: 98007326 operations; 56259.4 current ops/sec; [READ: Count=281676, Max=97407, Min=430, Avg=4746.75, 90=7139, 99=13095, 99.9=38687, 99.99=72959] [UPDATE: Count=280804, Max=21679, Min=333, Avg=2358.14, 90=3469, 99=5223, 99.9=7739, 99.99=10143] 
2023-06-05 13:01:45:382 1760 sec: 98571319 operations; 56399.3 current ops/sec; [READ: Count=282630, Max=51071, Min=413, Avg=4724.96, 90=7063, 99=13791, 99.9=34047, 99.99=40607] [UPDATE: Count=281314, Max=16879, Min=345, Avg=2358.51, 90=3455, 99=5291, 99.9=8447, 99.99=11391] 
2023-06-05 13:01:55:382 1770 sec: 99130611 operations; 55929.2 current ops/sec; [READ: Count=279703, Max=44831, Min=400, Avg=4773.57, 90=7107, 99=16943, 99.9=30175, 99.99=36031] [UPDATE: Count=279559, Max=21535, Min=341, Avg=2374.87, 90=3471, 99=5487, 99.9=8967, 99.99=13215] 
2023-06-05 13:02:05:382 1780 sec: 99685046 operations; 55443.5 current ops/sec; [READ: Count=276948, Max=104383, Min=382, Avg=4832.74, 90=7059, 99=17647, 99.9=37151, 99.99=98239] [UPDATE: Count=277585, Max=17119, Min=315, Avg=2379.97, 90=3461, 99=5603, 99.9=8815, 99.99=11031] 
2023-06-05 13:02:15:382 1790 sec: 100228424 operations; 54337.8 current ops/sec; [READ: Count=271343, Max=310527, Min=358, Avg=5033.84, 90=6851, 99=18415, 99.9=159231, 99.99=204031] [UPDATE: Count=272138, Max=12575, Min=320, Avg=2324.76, 90=3397, 99=5395, 99.9=8247, 99.99=9999] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:25:382 1800 sec: 100867261 operations; 63883.7 current ops/sec; [READ: Count=319159, Max=205183, Min=394, Avg=4160.35, 90=5931, 99=9391, 99.9=159359, 99.99=168831] [UPDATE: Count=319174, Max=17679, Min=297, Avg=2102.02, 90=3161, 99=4555, 99.9=7411, 99.99=9951] 
Still waiting for thread Thread-66 to complete. Workload status: true
2023-06-05 13:02:27:653 1802 sec: 100868703 operations; 634.96 current ops/sec; [READ: Count=756, Max=10239, Min=567, Avg=3568.43, 90=5771, 99=8179, 99.9=9359, 99.99=10239] [CLEANUP: Count=200, Max=2248703, Min=0, Avg=11305.49, 90=2, 99=3193, 99.9=2248703, 99.99=2248703] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802270
[OVERALL], Throughput(ops/sec), 55967.586987521296
[TOTAL_GCS_PS_Scavenge], Count, 6566
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17436
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9674466089986518
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 73
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004050447491219407
[TOTAL_GCs], Count, 6568
[TOTAL_GC_TIME], Time(ms), 17509
[TOTAL_GC_TIME_%], Time(%), 0.9714970564898711
[READ], Operations, 50427141
[READ], AverageLatency(us), 4511.445871936305
[READ], MinLatency(us), 345
[READ], MaxLatency(us), 776703
[READ], 95thPercentileLatency(us), 7919
[READ], 99thPercentileLatency(us), 16079
[READ], Return=OK, 50427141
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11305.49
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2248703
[CLEANUP], 95thPercentileLatency(us), 9
[CLEANUP], 99thPercentileLatency(us), 3193
[UPDATE], Operations, 50441562
[UPDATE], AverageLatency(us), 2185.7261988635482
[UPDATE], MinLatency(us), 281
[UPDATE], MaxLatency(us), 96255
[UPDATE], 95thPercentileLatency(us), 3705
[UPDATE], 99thPercentileLatency(us), 5311
[UPDATE], Return=OK, 50441562
