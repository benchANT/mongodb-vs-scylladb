bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:20:164 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
2023-06-05 12:32:30:147 10 sec: 511675 operations; 51167.5 current ops/sec; [READ: Count=255605, Max=76607, Min=347, Avg=2765.56, 90=4375, 99=12903, 99.9=33471, 99.99=61919] [UPDATE: Count=257547, Max=76543, Min=284, Avg=1670.89, 90=2419, 99=7987, 99.9=25071, 99.99=57631] 
2023-06-05 12:32:40:147 20 sec: 1074221 operations; 56254.6 current ops/sec; [READ: Count=281733, Max=41439, Min=379, Avg=3679.52, 90=5607, 99=17775, 99.9=22655, 99.99=26735] [UPDATE: Count=280509, Max=10527, Min=344, Avg=1858.78, 90=2795, 99=5823, 99.9=7863, 99.99=9127] 
2023-06-05 12:32:50:147 30 sec: 1636573 operations; 56235.2 current ops/sec; [READ: Count=281280, Max=46367, Min=383, Avg=3763.79, 90=5783, 99=17503, 99.9=31007, 99.99=35167] [UPDATE: Count=281040, Max=23631, Min=334, Avg=1890.61, 90=2859, 99=5731, 99.9=7975, 99.99=10215] 
2023-06-05 12:33:00:147 40 sec: 2199126 operations; 56255.3 current ops/sec; [READ: Count=281243, Max=40127, Min=414, Avg=3865.89, 90=5975, 99=18047, 99.9=31151, 99.99=35167] [UPDATE: Count=281367, Max=17215, Min=327, Avg=1920.77, 90=2911, 99=5931, 99.9=8075, 99.99=9863] 
2023-06-05 12:33:10:147 50 sec: 2759668 operations; 56054.2 current ops/sec; [READ: Count=280177, Max=146815, Min=376, Avg=4127.38, 90=6415, 99=19631, 99.9=56191, 99.99=81343] [UPDATE: Count=280332, Max=15247, Min=337, Avg=1979.01, 90=3017, 99=6127, 99.9=8099, 99.99=9839] 
2023-06-05 12:33:20:147 60 sec: 3322884 operations; 56321.6 current ops/sec; [READ: Count=281396, Max=116095, Min=393, Avg=4482.14, 90=6527, 99=27439, 99.9=80767, 99.99=89727] [UPDATE: Count=281922, Max=12023, Min=335, Avg=2009.45, 90=3059, 99=6203, 99.9=8311, 99.99=9871] 
2023-06-05 12:33:30:147 70 sec: 3886513 operations; 56362.9 current ops/sec; [READ: Count=281466, Max=67903, Min=399, Avg=4194.63, 90=6487, 99=19455, 99.9=50015, 99.99=62591] [UPDATE: Count=282136, Max=13607, Min=340, Avg=2029.67, 90=3095, 99=6087, 99.9=8119, 99.99=9623] 
2023-06-05 12:33:40:147 80 sec: 4448887 operations; 56237.4 current ops/sec; [READ: Count=281572, Max=87807, Min=395, Avg=4197.52, 90=6607, 99=19119, 99.9=30159, 99.99=42783] [UPDATE: Count=280712, Max=13855, Min=333, Avg=2048.52, 90=3135, 99=6151, 99.9=8183, 99.99=9823] 
2023-06-05 12:33:50:147 90 sec: 5011529 operations; 56264.2 current ops/sec; [READ: Count=281627, Max=48607, Min=387, Avg=4227.6, 90=6615, 99=18847, 99.9=37439, 99.99=44735] [UPDATE: Count=281080, Max=16175, Min=327, Avg=2052.78, 90=3151, 99=6035, 99.9=8111, 99.99=10175] 
2023-06-05 12:34:00:147 100 sec: 5573754 operations; 56222.5 current ops/sec; [READ: Count=281133, Max=55999, Min=398, Avg=4206.39, 90=6667, 99=19743, 99.9=29295, 99.99=37375] [UPDATE: Count=281135, Max=18239, Min=324, Avg=2037.64, 90=3141, 99=6115, 99.9=8223, 99.99=10207] 
2023-06-05 12:34:10:147 110 sec: 6133929 operations; 56017.5 current ops/sec; [READ: Count=280318, Max=150271, Min=378, Avg=4433.66, 90=6719, 99=23215, 99.9=88831, 99.99=104191] [UPDATE: Count=279872, Max=14815, Min=302, Avg=2045.95, 90=3119, 99=6575, 99.9=9023, 99.99=10679] 
2023-06-05 12:34:20:147 120 sec: 6697877 operations; 56394.8 current ops/sec; [READ: Count=281735, Max=188031, Min=374, Avg=4614.21, 90=6683, 99=25007, 99.9=95999, 99.99=115391] [UPDATE: Count=282266, Max=15439, Min=331, Avg=2058.5, 90=3123, 99=6491, 99.9=9039, 99.99=10927] 
2023-06-05 12:34:30:147 130 sec: 7259807 operations; 56193 current ops/sec; [READ: Count=281082, Max=167551, Min=416, Avg=4408.12, 90=6795, 99=22479, 99.9=30463, 99.99=111679] [UPDATE: Count=280657, Max=15031, Min=335, Avg=2077.16, 90=3131, 99=6839, 99.9=9319, 99.99=10871] 
2023-06-05 12:34:40:147 140 sec: 7805566 operations; 54575.9 current ops/sec; [READ: Count=272764, Max=298239, Min=389, Avg=5090.47, 90=6831, 99=22991, 99.9=162303, 99.99=265215] [UPDATE: Count=273173, Max=12599, Min=327, Avg=2043.28, 90=3085, 99=6927, 99.9=9239, 99.99=10919] 
2023-06-05 12:34:50:147 150 sec: 8360278 operations; 55471.2 current ops/sec; [READ: Count=276950, Max=321535, Min=402, Avg=5065.67, 90=6747, 99=25855, 99.9=161407, 99.99=223103] [UPDATE: Count=277726, Max=19503, Min=318, Avg=2052.61, 90=3101, 99=6843, 99.9=9383, 99.99=12359] 
2023-06-05 12:35:00:147 160 sec: 8919604 operations; 55932.6 current ops/sec; [READ: Count=279659, Max=345343, Min=384, Avg=5017.12, 90=6383, 99=21807, 99.9=191231, 99.99=280831] [UPDATE: Count=278886, Max=26687, Min=328, Avg=2046.21, 90=3081, 99=6603, 99.9=9719, 99.99=15911] 
2023-06-05 12:35:10:147 170 sec: 9483756 operations; 56415.2 current ops/sec; [READ: Count=281834, Max=290559, Min=387, Avg=4869.26, 90=6571, 99=21071, 99.9=188415, 99.99=210943] [UPDATE: Count=282804, Max=25279, Min=289, Avg=2083.87, 90=3155, 99=6019, 99.9=8247, 99.99=10231] 
2023-06-05 12:35:20:147 180 sec: 10040284 operations; 55652.8 current ops/sec; [READ: Count=278882, Max=372223, Min=422, Avg=5051.77, 90=6311, 99=25775, 99.9=223359, 99.99=284671] [UPDATE: Count=277910, Max=13311, Min=330, Avg=2062.57, 90=3129, 99=5623, 99.9=8263, 99.99=10039] 
2023-06-05 12:35:30:147 190 sec: 10625955 operations; 58567.1 current ops/sec; [READ: Count=292655, Max=197759, Min=403, Avg=4474.35, 90=6367, 99=22047, 99.9=105791, 99.99=155903] [UPDATE: Count=292839, Max=14431, Min=347, Avg=2123.92, 90=3161, 99=5599, 99.9=8527, 99.99=10527] 
2023-06-05 12:35:40:147 200 sec: 11188963 operations; 56300.8 current ops/sec; [READ: Count=281572, Max=301055, Min=433, Avg=4672.23, 90=6055, 99=23231, 99.9=188415, 99.99=208511] [UPDATE: Count=281469, Max=15423, Min=330, Avg=2061.38, 90=3095, 99=5303, 99.9=8487, 99.99=10271] 
2023-06-05 12:35:50:147 210 sec: 11758387 operations; 56942.4 current ops/sec; [READ: Count=284681, Max=177535, Min=403, Avg=4505.77, 90=6203, 99=20399, 99.9=158591, 99.99=165759] [UPDATE: Count=284758, Max=21039, Min=324, Avg=2092.22, 90=3127, 99=5451, 99.9=8551, 99.99=11127] 
2023-06-05 12:36:00:147 220 sec: 12323932 operations; 56554.5 current ops/sec; [READ: Count=282706, Max=133375, Min=394, Avg=4097.27, 90=6031, 99=18703, 99.9=49119, 99.99=93055] [UPDATE: Count=282818, Max=17919, Min=338, Avg=2058.72, 90=3073, 99=5383, 99.9=8591, 99.99=10975] 
2023-06-05 12:36:10:147 230 sec: 12886713 operations; 56278.1 current ops/sec; [READ: Count=281772, Max=142335, Min=374, Avg=4052.11, 90=5851, 99=17999, 99.9=54879, 99.99=83839] [UPDATE: Count=280293, Max=33311, Min=336, Avg=2028.62, 90=3033, 99=5327, 99.9=8831, 99.99=16815] 
2023-06-05 12:36:20:147 240 sec: 13449326 operations; 56261.3 current ops/sec; [READ: Count=281056, Max=39519, Min=410, Avg=3671.12, 90=5511, 99=10743, 99.9=24159, 99.99=30399] [UPDATE: Count=282135, Max=17343, Min=338, Avg=1953.18, 90=2945, 99=4471, 99.9=7159, 99.99=9647] 
2023-06-05 12:36:30:147 250 sec: 14011783 operations; 56245.7 current ops/sec; [READ: Count=280627, Max=34719, Min=387, Avg=3550.41, 90=5415, 99=7811, 99.9=12159, 99.99=19503] [UPDATE: Count=281434, Max=20031, Min=287, Avg=1942.55, 90=2935, 99=4065, 99.9=6503, 99.99=14327] 
2023-06-05 12:36:40:147 260 sec: 14574291 operations; 56250.8 current ops/sec; [READ: Count=280803, Max=21087, Min=387, Avg=3561.64, 90=5435, 99=7875, 99.9=11831, 99.99=18207] [UPDATE: Count=281937, Max=20591, Min=330, Avg=1950.25, 90=2967, 99=4107, 99.9=6071, 99.99=10879] 
2023-06-05 12:36:50:147 270 sec: 15136789 operations; 56249.8 current ops/sec; [READ: Count=281249, Max=30879, Min=407, Avg=3590.22, 90=5503, 99=8335, 99.9=14063, 99.99=21327] [UPDATE: Count=281352, Max=22639, Min=337, Avg=1952.67, 90=2979, 99=4179, 99.9=6431, 99.99=10055] 
2023-06-05 12:37:00:147 280 sec: 15699311 operations; 56252.2 current ops/sec; [READ: Count=281526, Max=30639, Min=399, Avg=3594.1, 90=5531, 99=8271, 99.9=12991, 99.99=25567] [UPDATE: Count=280953, Max=20255, Min=340, Avg=1954.31, 90=2993, 99=4147, 99.9=6319, 99.99=9695] 
2023-06-05 12:37:10:147 290 sec: 16261409 operations; 56209.8 current ops/sec; [READ: Count=280675, Max=80703, Min=416, Avg=3561.11, 90=5471, 99=8599, 99.9=18751, 99.99=36223] [UPDATE: Count=281500, Max=14759, Min=322, Avg=1926.32, 90=2957, 99=4255, 99.9=7015, 99.99=9567] 
2023-06-05 12:37:20:147 300 sec: 16824307 operations; 56289.8 current ops/sec; [READ: Count=281202, Max=111231, Min=382, Avg=3565.97, 90=5471, 99=8359, 99.9=14071, 99.99=39135] [UPDATE: Count=281260, Max=22079, Min=324, Avg=1930.45, 90=2947, 99=4235, 99.9=6711, 99.99=13295] 
2023-06-05 12:37:30:147 310 sec: 17386601 operations; 56229.4 current ops/sec; [READ: Count=280911, Max=78783, Min=384, Avg=3543.89, 90=5419, 99=8399, 99.9=18735, 99.99=26831] [UPDATE: Count=281743, Max=20303, Min=333, Avg=1915.58, 90=2927, 99=4171, 99.9=6739, 99.99=10327] 
2023-06-05 12:37:40:147 320 sec: 17949274 operations; 56267.3 current ops/sec; [READ: Count=281977, Max=85631, Min=411, Avg=3485.96, 90=5299, 99=8447, 99.9=23743, 99.99=47935] [UPDATE: Count=280802, Max=12919, Min=334, Avg=1880.08, 90=2869, 99=4147, 99.9=6971, 99.99=9199] 
2023-06-05 12:37:50:147 330 sec: 18511760 operations; 56248.6 current ops/sec; [READ: Count=281564, Max=27503, Min=402, Avg=3460.01, 90=5287, 99=9023, 99.9=20383, 99.99=24511] [UPDATE: Count=280903, Max=16783, Min=327, Avg=1863.02, 90=2827, 99=4287, 99.9=7827, 99.99=10687] 
2023-06-05 12:38:00:147 340 sec: 19074342 operations; 56258.2 current ops/sec; [READ: Count=281209, Max=30223, Min=371, Avg=3427.44, 90=5215, 99=9271, 99.9=21535, 99.99=25071] [UPDATE: Count=281302, Max=16911, Min=324, Avg=1849.83, 90=2795, 99=4375, 99.9=8103, 99.99=10431] 
2023-06-05 12:38:10:147 350 sec: 19636782 operations; 56244 current ops/sec; [READ: Count=281481, Max=29631, Min=412, Avg=3425.7, 90=5183, 99=9071, 99.9=20943, 99.99=24799] [UPDATE: Count=281017, Max=15319, Min=338, Avg=1845.56, 90=2781, 99=4073, 99.9=7663, 99.99=12359] 
2023-06-05 12:38:20:147 360 sec: 20199334 operations; 56255.2 current ops/sec; [READ: Count=281702, Max=24463, Min=395, Avg=3335.11, 90=5051, 99=7579, 99.9=18127, 99.99=21839] [UPDATE: Count=280768, Max=10527, Min=329, Avg=1824.84, 90=2753, 99=3841, 99.9=6259, 99.99=7839] 
2023-06-05 12:38:30:147 370 sec: 20761790 operations; 56245.6 current ops/sec; [READ: Count=280637, Max=22191, Min=404, Avg=3316.03, 90=5055, 99=7383, 99.9=9695, 99.99=12703] [UPDATE: Count=281789, Max=10271, Min=339, Avg=1829.07, 90=2767, 99=3859, 99.9=6031, 99.99=7551] 
2023-06-05 12:38:40:147 380 sec: 21324337 operations; 56254.7 current ops/sec; [READ: Count=280783, Max=46591, Min=393, Avg=3327.48, 90=5075, 99=7619, 99.9=12095, 99.99=29327] [UPDATE: Count=281803, Max=11879, Min=331, Avg=1821.64, 90=2757, 99=3927, 99.9=6263, 99.99=8179] 
2023-06-05 12:38:50:147 390 sec: 21886802 operations; 56246.5 current ops/sec; [READ: Count=281818, Max=30191, Min=389, Avg=3354.46, 90=5135, 99=7559, 99.9=10199, 99.99=15847] [UPDATE: Count=280661, Max=18175, Min=333, Avg=1844.26, 90=2797, 99=3921, 99.9=6083, 99.99=9727] 
2023-06-05 12:39:00:147 400 sec: 22449313 operations; 56251.1 current ops/sec; [READ: Count=281498, Max=22895, Min=418, Avg=3436.38, 90=5271, 99=7767, 99.9=11103, 99.99=17215] [UPDATE: Count=281000, Max=20575, Min=337, Avg=1883.76, 90=2873, 99=4077, 99.9=6539, 99.99=14839] 
2023-06-05 12:39:10:147 410 sec: 23011780 operations; 56246.7 current ops/sec; [READ: Count=281636, Max=26415, Min=408, Avg=3530.73, 90=5427, 99=8159, 99.9=13815, 99.99=21359] [UPDATE: Count=280853, Max=12223, Min=333, Avg=1914.2, 90=2927, 99=4151, 99.9=6455, 99.99=8583] 
2023-06-05 12:39:20:147 420 sec: 23574280 operations; 56250 current ops/sec; [READ: Count=280398, Max=23247, Min=403, Avg=3551.18, 90=5467, 99=8007, 99.9=11119, 99.99=15231] [UPDATE: Count=282041, Max=11759, Min=334, Avg=1927.76, 90=2941, 99=4143, 99.9=5967, 99.99=7447] 
2023-06-05 12:39:30:147 430 sec: 24136772 operations; 56249.2 current ops/sec; [READ: Count=281143, Max=20383, Min=405, Avg=3618.92, 90=5583, 99=8279, 99.9=11271, 99.99=15335] [UPDATE: Count=281401, Max=12543, Min=333, Avg=1953.53, 90=2981, 99=4239, 99.9=6359, 99.99=7823] 
2023-06-05 12:39:40:147 440 sec: 24699304 operations; 56253.2 current ops/sec; [READ: Count=280346, Max=21391, Min=410, Avg=3620.42, 90=5587, 99=8191, 99.9=11135, 99.99=15175] [UPDATE: Count=282171, Max=10207, Min=340, Avg=1960.72, 90=3005, 99=4219, 99.9=6195, 99.99=7771] 
2023-06-05 12:39:50:147 450 sec: 25261774 operations; 56247 current ops/sec; [READ: Count=280887, Max=28287, Min=389, Avg=3609.99, 90=5563, 99=8147, 99.9=11607, 99.99=16495] [UPDATE: Count=281573, Max=21535, Min=330, Avg=1957.52, 90=3001, 99=4207, 99.9=6231, 99.99=8231] 
2023-06-05 12:40:00:147 460 sec: 25824305 operations; 56253.1 current ops/sec; [READ: Count=280488, Max=27951, Min=389, Avg=3664.3, 90=5659, 99=8975, 99.9=16847, 99.99=23471] [UPDATE: Count=282060, Max=19263, Min=317, Avg=1962.27, 90=3013, 99=4351, 99.9=6747, 99.99=9663] 
2023-06-05 12:40:10:147 470 sec: 26385536 operations; 56123.1 current ops/sec; [READ: Count=280269, Max=55615, Min=337, Avg=3955.11, 90=5955, 99=14263, 99.9=31471, 99.99=36287] [UPDATE: Count=281083, Max=12919, Min=332, Avg=2021.82, 90=3079, 99=5119, 99.9=8083, 99.99=9895] 
2023-06-05 12:40:20:147 480 sec: 26945857 operations; 56032.1 current ops/sec; [READ: Count=280490, Max=501759, Min=405, Avg=4707.65, 90=6255, 99=25983, 99.9=141055, 99.99=242687] [UPDATE: Count=279312, Max=28399, Min=333, Avg=2084.04, 90=3137, 99=6127, 99.9=9463, 99.99=17951] 
2023-06-05 12:40:30:147 490 sec: 27511788 operations; 56593.1 current ops/sec; [READ: Count=283095, Max=184703, Min=420, Avg=3880.02, 90=5707, 99=10295, 99.9=79999, 99.99=115327] [UPDATE: Count=283491, Max=21103, Min=320, Avg=1985.99, 90=3011, 99=4499, 99.9=7399, 99.99=10143] 
2023-06-05 12:40:40:147 500 sec: 28074267 operations; 56247.9 current ops/sec; [READ: Count=280700, Max=40351, Min=425, Avg=3666.72, 90=5643, 99=9143, 99.9=17935, 99.99=26111] [UPDATE: Count=281638, Max=10799, Min=326, Avg=1962.08, 90=3001, 99=4419, 99.9=6635, 99.99=8695] 
2023-06-05 12:40:50:147 510 sec: 28636769 operations; 56250.2 current ops/sec; [READ: Count=281150, Max=33247, Min=401, Avg=3620.51, 90=5607, 99=8791, 99.9=15815, 99.99=27791] [UPDATE: Count=281368, Max=20431, Min=346, Avg=1941.4, 90=2971, 99=4327, 99.9=6819, 99.99=10279] 
2023-06-05 12:41:00:147 520 sec: 29199315 operations; 56254.6 current ops/sec; [READ: Count=281667, Max=75007, Min=397, Avg=3699.96, 90=5687, 99=9271, 99.9=30719, 99.99=43423] [UPDATE: Count=280910, Max=16799, Min=331, Avg=1955.05, 90=3001, 99=4447, 99.9=7299, 99.99=10335] 
2023-06-05 12:41:10:147 530 sec: 29761726 operations; 56241.1 current ops/sec; [READ: Count=280937, Max=27007, Min=399, Avg=3678.3, 90=5723, 99=8831, 99.9=16327, 99.99=21199] [UPDATE: Count=281403, Max=11223, Min=337, Avg=1959.48, 90=3007, 99=4375, 99.9=6739, 99.99=8943] 
2023-06-05 12:41:20:147 540 sec: 30324292 operations; 56256.6 current ops/sec; [READ: Count=280976, Max=23679, Min=398, Avg=3686.24, 90=5707, 99=8895, 99.9=16263, 99.99=20959] [UPDATE: Count=281577, Max=13847, Min=331, Avg=1970.29, 90=3017, 99=4403, 99.9=6951, 99.99=10495] 
2023-06-05 12:41:30:147 550 sec: 30886721 operations; 56242.9 current ops/sec; [READ: Count=281572, Max=35839, Min=414, Avg=3784.95, 90=5859, 99=9599, 99.9=20047, 99.99=25519] [UPDATE: Count=280960, Max=13623, Min=324, Avg=1998.47, 90=3063, 99=4503, 99.9=7111, 99.99=9647] 
2023-06-05 12:41:40:147 560 sec: 31449196 operations; 56247.5 current ops/sec; [READ: Count=281765, Max=226431, Min=389, Avg=3934.88, 90=5907, 99=11095, 99.9=26831, 99.99=205055] [UPDATE: Count=280808, Max=221311, Min=337, Avg=2074.23, 90=3077, 99=4747, 99.9=8855, 99.99=196223] 
2023-06-05 12:41:50:147 570 sec: 31997027 operations; 54783.1 current ops/sec; [READ: Count=273611, Max=399871, Min=391, Avg=4518.2, 90=5727, 99=13335, 99.9=192127, 99.99=344831] [UPDATE: Count=274241, Max=20831, Min=321, Avg=1970.28, 90=3017, 99=4999, 99.9=9167, 99.99=15263] 
2023-06-05 12:42:00:147 580 sec: 32554304 operations; 55727.7 current ops/sec; [READ: Count=278314, Max=384511, Min=383, Avg=4937.51, 90=5795, 99=15559, 99.9=229759, 99.99=323839] [UPDATE: Count=278958, Max=20079, Min=324, Avg=1986.01, 90=3031, 99=4727, 99.9=7915, 99.99=10319] 
2023-06-05 12:42:10:147 590 sec: 33102041 operations; 54773.7 current ops/sec; [READ: Count=273877, Max=317183, Min=405, Avg=5103.47, 90=6219, 99=28847, 99.9=196735, 99.99=285951] [UPDATE: Count=273940, Max=13879, Min=330, Avg=2058.61, 90=3139, 99=5467, 99.9=8199, 99.99=10159] 
2023-06-05 12:42:20:147 600 sec: 33604510 operations; 50246.9 current ops/sec; [READ: Count=250731, Max=523007, Min=359, Avg=5844.49, 90=7243, 99=41471, 99.9=323327, 99.99=328703] [UPDATE: Count=251715, Max=12927, Min=306, Avg=2097.93, 90=3257, 99=6723, 99.9=8983, 99.99=10735] 
2023-06-05 12:42:30:147 610 sec: 34109603 operations; 50509.3 current ops/sec; [READ: Count=252580, Max=333311, Min=393, Avg=5830.22, 90=6875, 99=40735, 99.9=324607, 99.99=328703] [UPDATE: Count=252465, Max=13663, Min=304, Avg=2100.15, 90=3255, 99=6291, 99.9=8807, 99.99=10679] 
2023-06-05 12:42:40:147 620 sec: 34656837 operations; 54723.4 current ops/sec; [READ: Count=273483, Max=326911, Min=389, Avg=5150.79, 90=6915, 99=32143, 99.9=162303, 99.99=320511] [UPDATE: Count=273802, Max=12695, Min=299, Avg=2159.05, 90=3303, 99=5987, 99.9=8303, 99.99=10015] 
2023-06-05 12:42:50:147 630 sec: 35216752 operations; 55991.5 current ops/sec; [READ: Count=280450, Max=172543, Min=415, Avg=4942.51, 90=7099, 99=29487, 99.9=106239, 99.99=138239] [UPDATE: Count=279404, Max=25295, Min=330, Avg=2190.46, 90=3345, 99=6155, 99.9=8575, 99.99=11815] 
2023-06-05 12:43:00:147 640 sec: 35790165 operations; 57341.3 current ops/sec; [READ: Count=286577, Max=233983, Min=396, Avg=4842.11, 90=6539, 99=22335, 99.9=135807, 99.99=151167] [UPDATE: Count=286992, Max=25839, Min=324, Avg=2133.4, 90=3231, 99=5263, 99.9=8035, 99.99=16231] 
2023-06-05 12:43:10:147 650 sec: 36359626 operations; 56946.1 current ops/sec; [READ: Count=284810, Max=282367, Min=383, Avg=4841.03, 90=6739, 99=21263, 99.9=117119, 99.99=168447] [UPDATE: Count=284535, Max=11791, Min=345, Avg=2174.57, 90=3285, 99=5623, 99.9=8303, 99.99=9935] 
2023-06-05 12:43:20:147 660 sec: 36935814 operations; 57618.8 current ops/sec; [READ: Count=287779, Max=254591, Min=405, Avg=4754.87, 90=6683, 99=16623, 99.9=161151, 99.99=206591] [UPDATE: Count=287690, Max=193279, Min=327, Avg=2232.15, 90=3297, 99=5327, 99.9=8551, 99.99=171903] 
2023-06-05 12:43:30:147 670 sec: 37507487 operations; 57167.3 current ops/sec; [READ: Count=285568, Max=403967, Min=394, Avg=4720.42, 90=6891, 99=16215, 99.9=103679, 99.99=206719] [UPDATE: Count=287019, Max=22783, Min=329, Avg=2231.37, 90=3359, 99=5339, 99.9=7919, 99.99=10759] 
2023-06-05 12:43:40:147 680 sec: 38097728 operations; 59024.1 current ops/sec; [READ: Count=295586, Max=31391, Min=398, Avg=4486.5, 90=6939, 99=12095, 99.9=20815, 99.99=24815] [UPDATE: Count=294272, Max=12503, Min=327, Avg=2264.42, 90=3381, 99=5023, 99.9=7195, 99.99=8767] 
2023-06-05 12:43:50:147 690 sec: 38678789 operations; 58106.1 current ops/sec; [READ: Count=290497, Max=119423, Min=415, Avg=4579.88, 90=6839, 99=13543, 99.9=72511, 99.99=87039] [UPDATE: Count=290561, Max=17695, Min=335, Avg=2268.07, 90=3371, 99=5191, 99.9=7895, 99.99=10527] 
2023-06-05 12:44:00:147 700 sec: 39256337 operations; 57754.8 current ops/sec; [READ: Count=289223, Max=97343, Min=421, Avg=4616.7, 90=6711, 99=13951, 99.9=80895, 99.99=87551] [UPDATE: Count=288308, Max=18687, Min=341, Avg=2269.02, 90=3363, 99=5115, 99.9=8367, 99.99=10479] 
2023-06-05 12:44:10:147 710 sec: 39829328 operations; 57299.1 current ops/sec; [READ: Count=286797, Max=61183, Min=404, Avg=4628.78, 90=6823, 99=15215, 99.9=43231, 99.99=52511] [UPDATE: Count=286213, Max=14807, Min=345, Avg=2308.2, 90=3407, 99=5363, 99.9=8543, 99.99=10607] 
2023-06-05 12:44:20:147 720 sec: 40386231 operations; 55690.3 current ops/sec; [READ: Count=278074, Max=230399, Min=383, Avg=4855.36, 90=6751, 99=20047, 99.9=132863, 99.99=154495] [UPDATE: Count=278883, Max=14575, Min=338, Avg=2293.22, 90=3381, 99=5639, 99.9=8967, 99.99=10895] 
2023-06-05 12:44:30:147 730 sec: 40947892 operations; 56166.1 current ops/sec; [READ: Count=280139, Max=158079, Min=388, Avg=4776.74, 90=6943, 99=16623, 99.9=96319, 99.99=137727] [UPDATE: Count=281519, Max=13407, Min=334, Avg=2339.91, 90=3445, 99=5587, 99.9=8655, 99.99=10719] 
2023-06-05 12:44:40:147 740 sec: 41510806 operations; 56291.4 current ops/sec; [READ: Count=281290, Max=55071, Min=416, Avg=4747.99, 90=7047, 99=18207, 99.9=33343, 99.99=37311] [UPDATE: Count=281562, Max=13567, Min=338, Avg=2350.2, 90=3455, 99=5891, 99.9=9007, 99.99=10999] 
2023-06-05 12:44:50:147 750 sec: 42076275 operations; 56546.9 current ops/sec; [READ: Count=283016, Max=47839, Min=381, Avg=4717.1, 90=7019, 99=16847, 99.9=29407, 99.99=34047] [UPDATE: Count=282476, Max=32143, Min=322, Avg=2341.65, 90=3451, 99=5571, 99.9=8735, 99.99=11127] 
2023-06-05 12:45:00:147 760 sec: 42644128 operations; 56785.3 current ops/sec; [READ: Count=284268, Max=46047, Min=405, Avg=4681.57, 90=6927, 99=17743, 99.9=25935, 99.99=30671] [UPDATE: Count=283606, Max=18383, Min=333, Avg=2341.43, 90=3437, 99=5683, 99.9=9007, 99.99=11343] 
2023-06-05 12:45:10:147 770 sec: 43207350 operations; 56322.2 current ops/sec; [READ: Count=281175, Max=74047, Min=411, Avg=4725.99, 90=6907, 99=19327, 99.9=30383, 99.99=54687] [UPDATE: Count=282118, Max=53471, Min=347, Avg=2357.48, 90=3439, 99=5583, 99.9=9087, 99.99=51519] 
2023-06-05 12:45:20:147 780 sec: 43725414 operations; 51806.4 current ops/sec; [READ: Count=258853, Max=540671, Min=354, Avg=5454.18, 90=6471, 99=24095, 99.9=273151, 99.99=279551] [UPDATE: Count=258926, Max=18463, Min=312, Avg=2250.08, 90=3339, 99=5771, 99.9=9095, 99.99=12263] 
2023-06-05 12:45:30:147 790 sec: 44267530 operations; 54211.6 current ops/sec; [READ: Count=271318, Max=280831, Min=405, Avg=5147.56, 90=6407, 99=16279, 99.9=271615, 99.99=275199] [UPDATE: Count=271121, Max=22127, Min=344, Avg=2230.35, 90=3307, 99=5111, 99.9=7647, 99.99=9967] 
2023-06-05 12:45:40:147 800 sec: 44847058 operations; 57952.8 current ops/sec; [READ: Count=289826, Max=115391, Min=390, Avg=4574.83, 90=6931, 99=11359, 99.9=22847, 99.99=57119] [UPDATE: Count=289637, Max=12479, Min=332, Avg=2321.47, 90=3413, 99=4971, 99.9=7295, 99.99=9591] 
2023-06-05 12:45:50:147 810 sec: 45423655 operations; 57659.7 current ops/sec; [READ: Count=287840, Max=42271, Min=402, Avg=4583.23, 90=6935, 99=11183, 99.9=18383, 99.99=25359] [UPDATE: Count=288731, Max=24847, Min=351, Avg=2344.35, 90=3431, 99=4987, 99.9=7519, 99.99=14663] 
2023-06-05 12:46:00:147 820 sec: 46002298 operations; 57864.3 current ops/sec; [READ: Count=289034, Max=36191, Min=381, Avg=4543.13, 90=6823, 99=10487, 99.9=16271, 99.99=29039] [UPDATE: Count=289505, Max=18031, Min=335, Avg=2340.68, 90=3415, 99=4763, 99.9=6811, 99.99=9055] 
2023-06-05 12:46:10:147 830 sec: 46578152 operations; 57585.4 current ops/sec; [READ: Count=288223, Max=35455, Min=435, Avg=4545.27, 90=6799, 99=10495, 99.9=16255, 99.99=22639] [UPDATE: Count=287733, Max=11599, Min=352, Avg=2351.17, 90=3423, 99=4875, 99.9=6967, 99.99=8607] 
2023-06-05 12:46:20:147 840 sec: 47146257 operations; 56810.5 current ops/sec; [READ: Count=283930, Max=177407, Min=360, Avg=4613.04, 90=6763, 99=10455, 99.9=32463, 99.99=172415] [UPDATE: Count=283778, Max=174207, Min=350, Avg=2393.46, 90=3415, 99=4867, 99.9=8035, 99.99=167551] 
2023-06-05 12:46:30:147 850 sec: 47715463 operations; 56920.6 current ops/sec; [READ: Count=285108, Max=39519, Min=365, Avg=4591.63, 90=6783, 99=10415, 99.9=18351, 99.99=26447] [UPDATE: Count=284368, Max=14759, Min=340, Avg=2383.68, 90=3443, 99=4827, 99.9=7047, 99.99=9527] 
2023-06-05 12:46:40:147 860 sec: 48274737 operations; 55927.4 current ops/sec; [READ: Count=279601, Max=88319, Min=440, Avg=4726.34, 90=6835, 99=13599, 99.9=31135, 99.99=48479] [UPDATE: Count=279797, Max=13671, Min=327, Avg=2410.06, 90=3465, 99=5235, 99.9=8503, 99.99=10887] 
2023-06-05 12:46:50:147 870 sec: 48837876 operations; 56313.9 current ops/sec; [READ: Count=281300, Max=35327, Min=427, Avg=4678.11, 90=6839, 99=11503, 99.9=25359, 99.99=29583] [UPDATE: Count=281773, Max=19807, Min=340, Avg=2414.9, 90=3469, 99=5027, 99.9=8231, 99.99=10711] 
2023-06-05 12:47:00:147 880 sec: 49400436 operations; 56256 current ops/sec; [READ: Count=281947, Max=39327, Min=406, Avg=4686.21, 90=6883, 99=12287, 99.9=25023, 99.99=29263] [UPDATE: Count=280613, Max=18623, Min=339, Avg=2404.16, 90=3465, 99=5143, 99.9=8035, 99.99=10447] 
2023-06-05 12:47:10:147 890 sec: 49961152 operations; 56071.6 current ops/sec; [READ: Count=280597, Max=33471, Min=442, Avg=4719.89, 90=6959, 99=13647, 99.9=22831, 99.99=27391] [UPDATE: Count=280066, Max=13447, Min=339, Avg=2402.85, 90=3471, 99=5299, 99.9=8007, 99.99=9871] 
2023-06-05 12:47:20:147 900 sec: 50519278 operations; 55812.6 current ops/sec; [READ: Count=279161, Max=72895, Min=398, Avg=4771.57, 90=6895, 99=17359, 99.9=43519, 99.99=56735] [UPDATE: Count=279040, Max=11807, Min=337, Avg=2386.26, 90=3435, 99=5691, 99.9=8671, 99.99=10519] 
2023-06-05 12:47:30:147 910 sec: 51079202 operations; 55992.4 current ops/sec; [READ: Count=280119, Max=36447, Min=388, Avg=4738.61, 90=6887, 99=16607, 99.9=25295, 99.99=29855] [UPDATE: Count=279829, Max=19839, Min=337, Avg=2398.1, 90=3451, 99=5499, 99.9=8383, 99.99=10311] 
2023-06-05 12:47:40:147 920 sec: 51638581 operations; 55937.9 current ops/sec; [READ: Count=279696, Max=39103, Min=410, Avg=4731.13, 90=6791, 99=14599, 99.9=26415, 99.99=31215] [UPDATE: Count=279644, Max=13767, Min=331, Avg=2415.95, 90=3443, 99=5195, 99.9=8139, 99.99=10159] 
2023-06-05 12:47:50:147 930 sec: 52201373 operations; 56279.2 current ops/sec; [READ: Count=281167, Max=38463, Min=434, Avg=4699.33, 90=6755, 99=13759, 99.9=25327, 99.99=29823] [UPDATE: Count=281336, Max=27103, Min=355, Avg=2408.44, 90=3427, 99=5119, 99.9=7619, 99.99=13583] 
2023-06-05 12:48:00:147 940 sec: 52763959 operations; 56258.6 current ops/sec; [READ: Count=281969, Max=36223, Min=434, Avg=4684.93, 90=6799, 99=12471, 99.9=22783, 99.99=26751] [UPDATE: Count=280929, Max=18527, Min=333, Avg=2411.23, 90=3445, 99=5039, 99.9=7483, 99.99=11455] 
2023-06-05 12:48:10:147 950 sec: 53328765 operations; 56480.6 current ops/sec; [READ: Count=282602, Max=28415, Min=410, Avg=4673.52, 90=6895, 99=11639, 99.9=20943, 99.99=24255] [UPDATE: Count=282160, Max=11111, Min=327, Avg=2401.19, 90=3457, 99=4987, 99.9=7215, 99.99=8727] 
2023-06-05 12:48:20:147 960 sec: 53896305 operations; 56754 current ops/sec; [READ: Count=283835, Max=34527, Min=449, Avg=4649.34, 90=6863, 99=11519, 99.9=20863, 99.99=24527] [UPDATE: Count=283696, Max=12527, Min=355, Avg=2391.13, 90=3445, 99=5007, 99.9=7415, 99.99=9087] 
2023-06-05 12:48:30:147 970 sec: 54469166 operations; 57286.1 current ops/sec; [READ: Count=286579, Max=35871, Min=358, Avg=4585.67, 90=6791, 99=10599, 99.9=18671, 99.99=25359] [UPDATE: Count=286232, Max=14223, Min=351, Avg=2370.19, 90=3419, 99=4831, 99.9=7007, 99.99=8831] 
2023-06-05 12:48:40:147 980 sec: 55039155 operations; 56998.9 current ops/sec; [READ: Count=284901, Max=62015, Min=410, Avg=4602, 90=6767, 99=11191, 99.9=29983, 99.99=41951] [UPDATE: Count=285128, Max=11351, Min=348, Avg=2360.24, 90=3413, 99=4899, 99.9=7267, 99.99=9455] 
2023-06-05 12:48:50:147 990 sec: 55599374 operations; 56021.9 current ops/sec; [READ: Count=279780, Max=127615, Min=396, Avg=4748.95, 90=6703, 99=12887, 99.9=70463, 99.99=80319] [UPDATE: Count=280504, Max=55903, Min=326, Avg=2355.15, 90=3395, 99=4971, 99.9=8135, 99.99=53311] 
2023-06-05 12:49:00:147 1000 sec: 56165113 operations; 56573.9 current ops/sec; [READ: Count=283353, Max=71167, Min=391, Avg=4683.05, 90=6727, 99=11623, 99.9=54719, 99.99=64031] [UPDATE: Count=281875, Max=24767, Min=310, Avg=2358.85, 90=3411, 99=4907, 99.9=7759, 99.99=16223] 
2023-06-05 12:49:10:147 1010 sec: 56731631 operations; 56651.8 current ops/sec; [READ: Count=282963, Max=51583, Min=388, Avg=4664.44, 90=6863, 99=12735, 99.9=31759, 99.99=41023] [UPDATE: Count=284068, Max=20655, Min=339, Avg=2350.72, 90=3421, 99=4955, 99.9=7239, 99.99=10239] 
2023-06-05 12:49:20:147 1020 sec: 57301547 operations; 56991.6 current ops/sec; [READ: Count=285091, Max=35743, Min=430, Avg=4581.58, 90=6839, 99=11623, 99.9=24383, 99.99=30063] [UPDATE: Count=284184, Max=25983, Min=344, Avg=2344.56, 90=3415, 99=4999, 99.9=7583, 99.99=15655] 
2023-06-05 12:49:30:147 1030 sec: 57869716 operations; 56816.9 current ops/sec; [READ: Count=283368, Max=31119, Min=406, Avg=4547.31, 90=6787, 99=10463, 99.9=16639, 99.99=23951] [UPDATE: Count=285398, Max=26239, Min=333, Avg=2351.5, 90=3419, 99=4819, 99.9=7011, 99.99=9863] 
2023-06-05 12:49:40:147 1040 sec: 58435301 operations; 56558.5 current ops/sec; [READ: Count=283116, Max=32959, Min=407, Avg=4588.13, 90=6803, 99=10983, 99.9=22319, 99.99=28271] [UPDATE: Count=282463, Max=14999, Min=354, Avg=2366.04, 90=3433, 99=4891, 99.9=7323, 99.99=9599] 
2023-06-05 12:49:50:147 1050 sec: 58998726 operations; 56342.5 current ops/sec; [READ: Count=281851, Max=37887, Min=422, Avg=4648.88, 90=6875, 99=13175, 99.9=25407, 99.99=30335] [UPDATE: Count=281580, Max=19695, Min=343, Avg=2359.82, 90=3437, 99=5151, 99.9=7839, 99.99=10359] 
2023-06-05 12:50:00:151 1060 sec: 59564740 operations; 56584.42 current ops/sec; [READ: Count=282926, Max=37183, Min=419, Avg=4597.46, 90=6827, 99=11735, 99.9=24639, 99.99=29999] [UPDATE: Count=283179, Max=18367, Min=335, Avg=2351.29, 90=3413, 99=4999, 99.9=7831, 99.99=10279] 
2023-06-05 12:50:10:147 1070 sec: 60119487 operations; 55491.35 current ops/sec; [READ: Count=277382, Max=172671, Min=390, Avg=4759.91, 90=6879, 99=14735, 99.9=70911, 99.99=112063] [UPDATE: Count=277330, Max=12919, Min=338, Avg=2331.9, 90=3405, 99=5159, 99.9=7599, 99.99=9367] 
2023-06-05 12:50:20:147 1080 sec: 60666689 operations; 54720.2 current ops/sec; [READ: Count=274293, Max=200575, Min=422, Avg=4961.41, 90=7015, 99=18991, 99.9=113279, 99.99=134655] [UPDATE: Count=273119, Max=13767, Min=338, Avg=2338.52, 90=3421, 99=5559, 99.9=8383, 99.99=10815] 
2023-06-05 12:50:30:147 1090 sec: 61237624 operations; 57093.5 current ops/sec; [READ: Count=285163, Max=38847, Min=438, Avg=4644.59, 90=6927, 99=12791, 99.9=26223, 99.99=30575] [UPDATE: Count=285491, Max=14791, Min=338, Avg=2349.06, 90=3407, 99=5079, 99.9=8091, 99.99=10159] 
2023-06-05 12:50:40:147 1100 sec: 61803444 operations; 56582 current ops/sec; [READ: Count=282977, Max=48255, Min=410, Avg=4675.78, 90=6923, 99=13159, 99.9=26223, 99.99=30639] [UPDATE: Count=282945, Max=13223, Min=320, Avg=2371.3, 90=3423, 99=5155, 99.9=8083, 99.99=10287] 
2023-06-05 12:50:50:147 1110 sec: 62372449 operations; 56900.5 current ops/sec; [READ: Count=284199, Max=36159, Min=431, Avg=4631.35, 90=6883, 99=12255, 99.9=24559, 99.99=28991] [UPDATE: Count=284718, Max=17807, Min=329, Avg=2353.9, 90=3417, 99=4999, 99.9=7411, 99.99=9687] 
2023-06-05 12:51:00:147 1120 sec: 62936928 operations; 56447.9 current ops/sec; [READ: Count=281923, Max=128447, Min=414, Avg=4669.16, 90=6815, 99=12159, 99.9=62495, 99.99=75519] [UPDATE: Count=282570, Max=16175, Min=343, Avg=2336.92, 90=3399, 99=5067, 99.9=8163, 99.99=10791] 
2023-06-05 12:51:10:147 1130 sec: 63499170 operations; 56224.2 current ops/sec; [READ: Count=280877, Max=119807, Min=429, Avg=4720.99, 90=6823, 99=12415, 99.9=63423, 99.99=74815] [UPDATE: Count=281408, Max=12479, Min=335, Avg=2338.03, 90=3403, 99=5051, 99.9=7959, 99.99=9999] 
2023-06-05 12:51:20:147 1140 sec: 64055839 operations; 55666.9 current ops/sec; [READ: Count=278140, Max=188671, Min=436, Avg=4798.97, 90=6895, 99=17455, 99.9=82495, 99.99=117375] [UPDATE: Count=278681, Max=22255, Min=319, Avg=2333.17, 90=3395, 99=5863, 99.9=9095, 99.99=11143] 
2023-06-05 12:51:30:147 1150 sec: 64624566 operations; 56872.7 current ops/sec; [READ: Count=284282, Max=111807, Min=442, Avg=4664.43, 90=6887, 99=17535, 99.9=28783, 99.99=82239] [UPDATE: Count=284379, Max=27679, Min=323, Avg=2322.65, 90=3387, 99=5647, 99.9=9007, 99.99=11007] 
2023-06-05 12:51:40:147 1160 sec: 65192480 operations; 56791.4 current ops/sec; [READ: Count=283965, Max=46335, Min=437, Avg=4626.25, 90=6883, 99=16559, 99.9=26239, 99.99=30271] [UPDATE: Count=283861, Max=16623, Min=343, Avg=2315.73, 90=3387, 99=5495, 99.9=8767, 99.99=10399] 
2023-06-05 12:51:50:147 1170 sec: 65759537 operations; 56705.7 current ops/sec; [READ: Count=283996, Max=34079, Min=452, Avg=4482.39, 90=6727, 99=13367, 99.9=23871, 99.99=28111] [UPDATE: Count=282974, Max=17263, Min=355, Avg=2272.06, 90=3349, 99=5055, 99.9=7711, 99.99=9943] 
2023-06-05 12:52:00:147 1180 sec: 66322951 operations; 56341.4 current ops/sec; [READ: Count=281797, Max=36671, Min=438, Avg=4459.38, 90=6691, 99=14487, 99.9=23855, 99.99=27951] [UPDATE: Count=281615, Max=18559, Min=322, Avg=2267.46, 90=3341, 99=5323, 99.9=8231, 99.99=10823] 
2023-06-05 12:52:10:147 1190 sec: 66883317 operations; 56036.6 current ops/sec; [READ: Count=281091, Max=129087, Min=429, Avg=4585.9, 90=6759, 99=15431, 99.9=47903, 99.99=89215] [UPDATE: Count=278950, Max=23391, Min=355, Avg=2281.32, 90=3359, 99=5355, 99.9=8639, 99.99=13063] 
2023-06-05 12:52:20:147 1200 sec: 67448510 operations; 56519.3 current ops/sec; [READ: Count=282225, Max=90431, Min=418, Avg=4523.37, 90=6687, 99=13151, 99.9=79935, 99.99=85695] [UPDATE: Count=283484, Max=23199, Min=330, Avg=2258.48, 90=3335, 99=5043, 99.9=7611, 99.99=9983] 
2023-06-05 12:52:30:147 1210 sec: 68011352 operations; 56284.2 current ops/sec; [READ: Count=281655, Max=30255, Min=426, Avg=4325.65, 90=6575, 99=10415, 99.9=16263, 99.99=24623] [UPDATE: Count=281012, Max=19855, Min=334, Avg=2235.44, 90=3295, 99=4815, 99.9=6799, 99.99=8711] 
2023-06-05 12:52:40:147 1220 sec: 68573929 operations; 56257.7 current ops/sec; [READ: Count=281488, Max=29423, Min=408, Avg=4343.27, 90=6647, 99=10831, 99.9=16975, 99.99=24335] [UPDATE: Count=281120, Max=14519, Min=328, Avg=2227.94, 90=3293, 99=4823, 99.9=7051, 99.99=9951] 
2023-06-05 12:52:50:147 1230 sec: 69132265 operations; 55833.6 current ops/sec; [READ: Count=279282, Max=227455, Min=424, Avg=4455.51, 90=6647, 99=11471, 99.9=39039, 99.99=170623] [UPDATE: Count=279152, Max=31583, Min=346, Avg=2224.74, 90=3289, 99=4867, 99.9=7187, 99.99=10007] 
2023-06-05 12:53:00:147 1240 sec: 69698688 operations; 56642.3 current ops/sec; [READ: Count=283950, Max=177279, Min=401, Avg=4461.9, 90=6759, 99=11399, 99.9=28671, 99.99=112895] [UPDATE: Count=282448, Max=26159, Min=326, Avg=2260.22, 90=3335, 99=4939, 99.9=7299, 99.99=11567] 
2023-06-05 12:53:10:147 1250 sec: 70261564 operations; 56287.6 current ops/sec; [READ: Count=281598, Max=40159, Min=441, Avg=4392.43, 90=6699, 99=10871, 99.9=18175, 99.99=31023] [UPDATE: Count=281219, Max=16703, Min=336, Avg=2244.88, 90=3321, 99=4831, 99.9=7191, 99.99=12823] 
2023-06-05 12:53:20:147 1260 sec: 70823807 operations; 56224.3 current ops/sec; [READ: Count=280968, Max=58495, Min=462, Avg=4440.63, 90=6763, 99=12191, 99.9=22559, 99.99=44351] [UPDATE: Count=281408, Max=12959, Min=330, Avg=2257.98, 90=3349, 99=5051, 99.9=7371, 99.99=9335] 
2023-06-05 12:53:30:147 1270 sec: 71386391 operations; 56258.4 current ops/sec; [READ: Count=281586, Max=33087, Min=436, Avg=4425.47, 90=6731, 99=11399, 99.9=22015, 99.99=25999] [UPDATE: Count=280885, Max=15431, Min=327, Avg=2270.06, 90=3359, 99=4951, 99.9=7843, 99.99=10639] 
2023-06-05 12:53:40:147 1280 sec: 71940269 operations; 55387.8 current ops/sec; [READ: Count=277478, Max=218111, Min=406, Avg=4726.21, 90=6703, 99=14255, 99.9=157951, 99.99=173439] [UPDATE: Count=276476, Max=12487, Min=347, Avg=2246.48, 90=3339, 99=5223, 99.9=8279, 99.99=10279] 
2023-06-05 12:53:50:147 1290 sec: 72505846 operations; 56557.7 current ops/sec; [READ: Count=282859, Max=161407, Min=412, Avg=4683.88, 90=6751, 99=12311, 99.9=122623, 99.99=139391] [UPDATE: Count=282727, Max=21247, Min=319, Avg=2267.08, 90=3371, 99=5075, 99.9=7911, 99.99=10967] 
2023-06-05 12:54:00:147 1300 sec: 73072317 operations; 56647.1 current ops/sec; [READ: Count=283254, Max=114879, Min=414, Avg=4557.91, 90=6731, 99=13911, 99.9=57791, 99.99=77247] [UPDATE: Count=283239, Max=17327, Min=355, Avg=2247.62, 90=3335, 99=5135, 99.9=8191, 99.99=10671] 
2023-06-05 12:54:10:147 1310 sec: 73633511 operations; 56119.4 current ops/sec; [READ: Count=280909, Max=97343, Min=413, Avg=4621.11, 90=6783, 99=18095, 99.9=60223, 99.99=72319] [UPDATE: Count=280280, Max=16007, Min=348, Avg=2235.56, 90=3329, 99=5475, 99.9=8943, 99.99=11191] 
2023-06-05 12:54:20:147 1320 sec: 74185047 operations; 55153.6 current ops/sec; [READ: Count=275039, Max=264447, Min=398, Avg=4892.1, 90=6635, 99=21967, 99.9=159999, 99.99=169087] [UPDATE: Count=276393, Max=14135, Min=336, Avg=2199.36, 90=3279, 99=5711, 99.9=9327, 99.99=11207] 
2023-06-05 12:54:30:147 1330 sec: 74743688 operations; 55864.1 current ops/sec; [READ: Count=279047, Max=133247, Min=396, Avg=4895.72, 90=7063, 99=25199, 99.9=70847, 99.99=110015] [UPDATE: Count=279812, Max=15903, Min=340, Avg=2241.83, 90=3351, 99=6199, 99.9=9351, 99.99=11023] 
2023-06-05 12:54:40:147 1340 sec: 75305954 operations; 56226.6 current ops/sec; [READ: Count=281043, Max=190975, Min=408, Avg=4828.97, 90=7167, 99=23583, 99.9=52223, 99.99=84671] [UPDATE: Count=280548, Max=28479, Min=342, Avg=2260.29, 90=3379, 99=6119, 99.9=9527, 99.99=17311] 
2023-06-05 12:54:50:147 1350 sec: 75872123 operations; 56616.9 current ops/sec; [READ: Count=283075, Max=177663, Min=395, Avg=4757, 90=7103, 99=18159, 99.9=94847, 99.99=102463] [UPDATE: Count=283645, Max=27055, Min=324, Avg=2258.61, 90=3369, 99=5567, 99.9=8567, 99.99=12823] 
2023-06-05 12:55:00:149 1360 sec: 76442278 operations; 57004.1 current ops/sec; [READ: Count=284598, Max=131327, Min=352, Avg=4639.49, 90=7007, 99=14247, 99.9=39647, 99.99=100671] [UPDATE: Count=285640, Max=19583, Min=325, Avg=2265.73, 90=3373, 99=5195, 99.9=7807, 99.99=10815] 
2023-06-05 12:55:10:147 1370 sec: 77002707 operations; 56054.11 current ops/sec; [READ: Count=280330, Max=119487, Min=424, Avg=4677.14, 90=7119, 99=16127, 99.9=28895, 99.99=64895] [UPDATE: Count=279884, Max=17967, Min=314, Avg=2293.88, 90=3399, 99=5567, 99.9=8511, 99.99=10855] 
2023-06-05 12:55:20:147 1380 sec: 77554129 operations; 55142.2 current ops/sec; [READ: Count=275648, Max=138367, Min=408, Avg=4961.08, 90=7103, 99=24847, 99.9=82431, 99.99=89471] [UPDATE: Count=275990, Max=12399, Min=327, Avg=2284.18, 90=3407, 99=5879, 99.9=8791, 99.99=10615] 
2023-06-05 12:55:30:147 1390 sec: 78097089 operations; 54296 current ops/sec; [READ: Count=271771, Max=552447, Min=372, Avg=5086.23, 90=6739, 99=20207, 99.9=323839, 99.99=423679] [UPDATE: Count=271026, Max=14599, Min=324, Avg=2206.4, 90=3321, 99=5611, 99.9=9111, 99.99=11151] 
2023-06-05 12:55:40:147 1400 sec: 78627409 operations; 53032 current ops/sec; [READ: Count=265738, Max=410367, Min=406, Avg=5387.34, 90=6363, 99=15663, 99.9=369407, 99.99=397311] [UPDATE: Count=264630, Max=12207, Min=337, Avg=2127.36, 90=3217, 99=5155, 99.9=8223, 99.99=10375] 
2023-06-05 12:55:50:147 1410 sec: 79160573 operations; 53316.4 current ops/sec; [READ: Count=266412, Max=421119, Min=401, Avg=5366.85, 90=6407, 99=18655, 99.9=351487, 99.99=398335] [UPDATE: Count=266711, Max=27615, Min=305, Avg=2110.35, 90=3207, 99=5299, 99.9=8711, 99.99=24655] 
2023-06-05 12:56:00:147 1420 sec: 79718126 operations; 55755.3 current ops/sec; [READ: Count=279256, Max=466687, Min=394, Avg=4986.32, 90=6959, 99=16879, 99.9=269055, 99.99=449535] [UPDATE: Count=278395, Max=17663, Min=346, Avg=2209.34, 90=3343, 99=5471, 99.9=8367, 99.99=11103] 
2023-06-05 12:56:10:147 1430 sec: 80285633 operations; 56750.7 current ops/sec; [READ: Count=283947, Max=83071, Min=407, Avg=4767.92, 90=7331, 99=19711, 99.9=40767, 99.99=55487] [UPDATE: Count=283440, Max=13295, Min=306, Avg=2272.75, 90=3421, 99=5779, 99.9=8639, 99.99=10391] 
2023-06-05 12:56:20:147 1440 sec: 80849056 operations; 56342.3 current ops/sec; [READ: Count=281518, Max=168703, Min=452, Avg=4836.93, 90=7211, 99=21295, 99.9=63295, 99.99=102207] [UPDATE: Count=282008, Max=19631, Min=322, Avg=2255.11, 90=3409, 99=5747, 99.9=8479, 99.99=10479] 
2023-06-05 12:56:30:147 1450 sec: 81413787 operations; 56473.1 current ops/sec; [READ: Count=282324, Max=183295, Min=377, Avg=4835.36, 90=7159, 99=19839, 99.9=99135, 99.99=141951] [UPDATE: Count=282402, Max=13007, Min=322, Avg=2242.84, 90=3387, 99=5443, 99.9=8207, 99.99=10079] 
2023-06-05 12:56:40:147 1460 sec: 81982983 operations; 56919.6 current ops/sec; [READ: Count=284392, Max=102527, Min=419, Avg=4777.78, 90=7407, 99=17391, 99.9=39551, 99.99=83519] [UPDATE: Count=284431, Max=20191, Min=329, Avg=2248.37, 90=3397, 99=5403, 99.9=8271, 99.99=13087] 
2023-06-05 12:56:50:147 1470 sec: 82546617 operations; 56363.4 current ops/sec; [READ: Count=281932, Max=95935, Min=417, Avg=4832.09, 90=7435, 99=20047, 99.9=47711, 99.99=63775] [UPDATE: Count=282054, Max=17983, Min=326, Avg=2250.15, 90=3413, 99=5599, 99.9=8183, 99.99=11823] 
2023-06-05 12:57:00:147 1480 sec: 83105418 operations; 55880.1 current ops/sec; [READ: Count=279321, Max=285695, Min=393, Avg=4940.48, 90=6931, 99=21119, 99.9=152959, 99.99=228735] [UPDATE: Count=279492, Max=26463, Min=342, Avg=2204.74, 90=3341, 99=5467, 99.9=8727, 99.99=15423] 
2023-06-05 12:57:10:147 1490 sec: 83667641 operations; 56222.3 current ops/sec; [READ: Count=281032, Max=219647, Min=383, Avg=4902.68, 90=6931, 99=15847, 99.9=161151, 99.99=169343] [UPDATE: Count=281140, Max=16327, Min=331, Avg=2208.46, 90=3341, 99=5075, 99.9=7923, 99.99=12447] 
2023-06-05 12:57:20:147 1500 sec: 84235947 operations; 56830.6 current ops/sec; [READ: Count=284151, Max=139647, Min=375, Avg=4780.89, 90=7115, 99=15223, 99.9=97343, 99.99=130367] [UPDATE: Count=284171, Max=10951, Min=318, Avg=2248.55, 90=3393, 99=5211, 99.9=7483, 99.99=9231] 
2023-06-05 12:57:30:147 1510 sec: 84807347 operations; 57140 current ops/sec; [READ: Count=285561, Max=95167, Min=381, Avg=4700.62, 90=7163, 99=14415, 99.9=45343, 99.99=78079] [UPDATE: Count=285724, Max=13663, Min=349, Avg=2283.99, 90=3419, 99=5179, 99.9=7483, 99.99=9335] 
2023-06-05 12:57:40:147 1520 sec: 85365387 operations; 55804 current ops/sec; [READ: Count=278937, Max=310015, Min=424, Avg=4884.86, 90=7023, 99=21167, 99.9=96639, 99.99=208639] [UPDATE: Count=279321, Max=16847, Min=333, Avg=2273.47, 90=3379, 99=5499, 99.9=8855, 99.99=13351] 
2023-06-05 12:57:50:147 1530 sec: 85928723 operations; 56333.6 current ops/sec; [READ: Count=281128, Max=98367, Min=409, Avg=4837.55, 90=7127, 99=20975, 99.9=79743, 99.99=88831] [UPDATE: Count=282103, Max=28767, Min=337, Avg=2259.96, 90=3375, 99=5843, 99.9=8903, 99.99=11839] 
2023-06-05 12:58:00:147 1540 sec: 86491986 operations; 56326.3 current ops/sec; [READ: Count=281318, Max=97727, Min=448, Avg=4814.38, 90=7303, 99=20255, 99.9=55583, 99.99=67199] [UPDATE: Count=281900, Max=18303, Min=332, Avg=2282.39, 90=3401, 99=5791, 99.9=8839, 99.99=11799] 
2023-06-05 12:58:10:147 1550 sec: 87050396 operations; 55841 current ops/sec; [READ: Count=278946, Max=93055, Min=385, Avg=4860.26, 90=7335, 99=23215, 99.9=46719, 99.99=56863] [UPDATE: Count=279491, Max=11887, Min=346, Avg=2298.98, 90=3441, 99=5799, 99.9=8679, 99.99=10407] 
2023-06-05 12:58:20:147 1560 sec: 87605793 operations; 55539.7 current ops/sec; [READ: Count=278429, Max=132735, Min=403, Avg=4918.42, 90=7043, 99=24975, 99.9=106495, 99.99=118847] [UPDATE: Count=276993, Max=12567, Min=337, Avg=2268.72, 90=3391, 99=5811, 99.9=9031, 99.99=10911] 
2023-06-05 12:58:30:147 1570 sec: 88154081 operations; 54828.8 current ops/sec; [READ: Count=274609, Max=198271, Min=387, Avg=5000.02, 90=7259, 99=25855, 99.9=68863, 99.99=142591] [UPDATE: Count=273581, Max=14375, Min=340, Avg=2279.87, 90=3413, 99=6347, 99.9=9463, 99.99=11359] 
2023-06-05 12:58:40:147 1580 sec: 88702203 operations; 54812.2 current ops/sec; [READ: Count=273887, Max=143359, Min=374, Avg=5031.89, 90=7151, 99=24975, 99.9=113727, 99.99=136831] [UPDATE: Count=274347, Max=18799, Min=336, Avg=2270.91, 90=3413, 99=6207, 99.9=9559, 99.99=12039] 
2023-06-05 12:58:50:147 1590 sec: 89244805 operations; 54260.2 current ops/sec; [READ: Count=271857, Max=102591, Min=397, Avg=5062.88, 90=7415, 99=26351, 99.9=59071, 99.99=72383] [UPDATE: Count=270767, Max=19087, Min=339, Avg=2300.15, 90=3449, 99=6651, 99.9=9415, 99.99=11447] 
2023-06-05 12:59:00:147 1600 sec: 89785553 operations; 54074.8 current ops/sec; [READ: Count=270384, Max=240255, Min=391, Avg=5093.94, 90=7243, 99=25279, 99.9=97215, 99.99=152703] [UPDATE: Count=270365, Max=18239, Min=343, Avg=2293.65, 90=3431, 99=6351, 99.9=9119, 99.99=11247] 
2023-06-05 12:59:10:148 1610 sec: 90303302 operations; 51769.72 current ops/sec; [READ: Count=259232, Max=822783, Min=391, Avg=5517.53, 90=6447, 99=25455, 99.9=288767, 99.99=495871] [UPDATE: Count=258656, Max=12551, Min=322, Avg=2189.56, 90=3273, 99=5935, 99.9=9047, 99.99=10847] 
2023-06-05 12:59:20:147 1620 sec: 90835244 operations; 53199.52 current ops/sec; [READ: Count=266202, Max=461823, Min=389, Avg=5328.7, 90=6323, 99=16783, 99.9=324607, 99.99=345855] [UPDATE: Count=265389, Max=11375, Min=313, Avg=2190.19, 90=3267, 99=5003, 99.9=7747, 99.99=9575] 
2023-06-05 12:59:30:147 1630 sec: 91397069 operations; 56182.5 current ops/sec; [READ: Count=281134, Max=325631, Min=396, Avg=4826.25, 90=6947, 99=15343, 99.9=73663, 99.99=271871] [UPDATE: Count=280525, Max=19055, Min=345, Avg=2302.73, 90=3399, 99=5319, 99.9=8343, 99.99=11959] 
2023-06-05 12:59:40:147 1640 sec: 91967928 operations; 57085.9 current ops/sec; [READ: Count=285196, Max=44127, Min=406, Avg=4673.92, 90=7119, 99=13367, 99.9=25487, 99.99=31679] [UPDATE: Count=285934, Max=15703, Min=346, Avg=2329.68, 90=3425, 99=5239, 99.9=8035, 99.99=10231] 
2023-06-05 12:59:50:147 1650 sec: 92535871 operations; 56794.3 current ops/sec; [READ: Count=283895, Max=112575, Min=408, Avg=4716.3, 90=7083, 99=14343, 99.9=38431, 99.99=96191] [UPDATE: Count=283986, Max=27487, Min=339, Avg=2324.07, 90=3419, 99=5267, 99.9=8399, 99.99=11191] 
2023-06-05 13:00:00:147 1660 sec: 93099879 operations; 56400.8 current ops/sec; [READ: Count=281648, Max=114751, Min=404, Avg=4786.09, 90=6931, 99=16607, 99.9=81023, 99.99=89663] [UPDATE: Count=282458, Max=20015, Min=334, Avg=2306.45, 90=3389, 99=5259, 99.9=8223, 99.99=10863] 
2023-06-05 13:00:10:147 1670 sec: 93670058 operations; 57017.9 current ops/sec; [READ: Count=285084, Max=44895, Min=422, Avg=4674.79, 90=7063, 99=13351, 99.9=22831, 99.99=27391] [UPDATE: Count=285000, Max=12439, Min=344, Avg=2337.17, 90=3423, 99=5007, 99.9=7575, 99.99=9391] 
2023-06-05 13:00:20:147 1680 sec: 94220994 operations; 55093.6 current ops/sec; [READ: Count=275190, Max=321023, Min=432, Avg=4948.37, 90=6895, 99=17039, 99.9=102719, 99.99=269055] [UPDATE: Count=275888, Max=12471, Min=342, Avg=2312.15, 90=3377, 99=5207, 99.9=7807, 99.99=9799] 
2023-06-05 13:00:30:147 1690 sec: 94768833 operations; 54783.9 current ops/sec; [READ: Count=274397, Max=224767, Min=402, Avg=4916.73, 90=7239, 99=16799, 99.9=78399, 99.99=126911] [UPDATE: Count=273308, Max=12695, Min=340, Avg=2372.09, 90=3461, 99=5607, 99.9=8155, 99.99=10119] 
2023-06-05 13:00:40:147 1700 sec: 95323891 operations; 55505.8 current ops/sec; [READ: Count=277007, Max=264703, Min=447, Avg=4872.59, 90=7027, 99=15631, 99.9=100031, 99.99=184191] [UPDATE: Count=278137, Max=14575, Min=363, Avg=2340.55, 90=3415, 99=5451, 99.9=8687, 99.99=11191] 
2023-06-05 13:00:50:147 1710 sec: 95870743 operations; 54685.2 current ops/sec; [READ: Count=273414, Max=122559, Min=438, Avg=4959.63, 90=7279, 99=22111, 99.9=53087, 99.99=105727] [UPDATE: Count=273492, Max=20399, Min=355, Avg=2351.18, 90=3471, 99=6079, 99.9=9255, 99.99=12271] 
2023-06-05 13:01:00:147 1720 sec: 96408193 operations; 53745 current ops/sec; [READ: Count=268154, Max=219775, Min=424, Avg=5159.01, 90=6871, 99=27791, 99.9=136063, 99.99=193279] [UPDATE: Count=269364, Max=17519, Min=332, Avg=2286.31, 90=3369, 99=5667, 99.9=9263, 99.99=11135] 
2023-06-05 13:01:10:147 1730 sec: 96952557 operations; 54436.4 current ops/sec; [READ: Count=272385, Max=156799, Min=409, Avg=5010.81, 90=7003, 99=20927, 99.9=98367, 99.99=116927] [UPDATE: Count=271952, Max=20015, Min=335, Avg=2331.9, 90=3411, 99=5651, 99.9=8679, 99.99=13039] 
2023-06-05 13:01:20:147 1740 sec: 97491748 operations; 53919.1 current ops/sec; [READ: Count=269705, Max=163327, Min=442, Avg=5085.4, 90=7095, 99=21983, 99.9=85119, 99.99=136191] [UPDATE: Count=269469, Max=18543, Min=347, Avg=2329.95, 90=3439, 99=5699, 99.9=8503, 99.99=10375] 
2023-06-05 13:01:30:147 1750 sec: 98041077 operations; 54932.9 current ops/sec; [READ: Count=274436, Max=189823, Min=433, Avg=4947.01, 90=7059, 99=17359, 99.9=84735, 99.99=140159] [UPDATE: Count=274909, Max=12991, Min=374, Avg=2334.56, 90=3439, 99=5531, 99.9=8399, 99.99=10247] 
2023-06-05 13:01:40:147 1760 sec: 98608498 operations; 56742.1 current ops/sec; [READ: Count=283574, Max=49023, Min=442, Avg=4687.31, 90=7063, 99=12255, 99.9=31775, 99.99=40447] [UPDATE: Count=283640, Max=12463, Min=359, Avg=2360.07, 90=3461, 99=5115, 99.9=7491, 99.99=10247] 
2023-06-05 13:01:50:147 1770 sec: 99170883 operations; 56238.5 current ops/sec; [READ: Count=280441, Max=50591, Min=377, Avg=4752.43, 90=7067, 99=15647, 99.9=31759, 99.99=37343] [UPDATE: Count=281990, Max=24735, Min=352, Avg=2363.55, 90=3455, 99=5359, 99.9=8599, 99.99=11319] 
2023-06-05 13:02:00:147 1780 sec: 99729769 operations; 55888.6 current ops/sec; [READ: Count=279702, Max=38975, Min=448, Avg=4772.03, 90=7091, 99=16271, 99.9=29087, 99.99=33663] [UPDATE: Count=279124, Max=22207, Min=359, Avg=2379.76, 90=3459, 99=5503, 99.9=8895, 99.99=11511] 
2023-06-05 13:02:10:147 1790 sec: 100278648 operations; 54887.9 current ops/sec; [READ: Count=274116, Max=119231, Min=429, Avg=4890.45, 90=7107, 99=18703, 99.9=66367, 99.99=99455] [UPDATE: Count=274733, Max=78015, Min=344, Avg=2398.21, 90=3459, 99=5655, 99.9=8951, 99.99=69887] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:20:147 1800 sec: 100818519 operations; 53987.1 current ops/sec; [READ: Count=269494, Max=268031, Min=400, Avg=5126.63, 90=6571, 99=16847, 99.9=163071, 99.99=194175] [UPDATE: Count=269807, Max=16191, Min=346, Avg=2285.1, 90=3339, 99=5127, 99.9=8647, 99.99=12111] 
Still waiting for thread Thread-72 to complete. Workload status: true
2023-06-05 13:02:22:428 1802 sec: 100819209 operations; 302.5 current ops/sec; [READ: Count=371, Max=79679, Min=759, Avg=9903.74, 90=15383, 99=67199, 99.9=79679, 99.99=79679] [CLEANUP: Count=200, Max=2226175, Min=0, Avg=11126.74, 90=1, 99=6, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802281
[OVERALL], Throughput(ops/sec), 55939.78352987131
[TOTAL_GCS_PS_Scavenge], Count, 6646
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17326
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9613373275310564
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 131
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0072685668882932234
[TOTAL_GCs], Count, 6649
[TOTAL_GC_TIME], Time(ms), 17457
[TOTAL_GC_TIME_%], Time(%), 0.9686058944193496
[READ], Operations, 50407722
[READ], AverageLatency(us), 4514.235666571086
[READ], MinLatency(us), 337
[READ], MaxLatency(us), 822783
[READ], 95thPercentileLatency(us), 7919
[READ], 99thPercentileLatency(us), 16135
[READ], Return=OK, 50407722
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11126.74
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 6
[UPDATE], Operations, 50411487
[UPDATE], AverageLatency(us), 2189.51492232316
[UPDATE], MinLatency(us), 284
[UPDATE], MaxLatency(us), 221311
[UPDATE], 95thPercentileLatency(us), 3701
[UPDATE], 99thPercentileLatency(us), 5307
[UPDATE], Return=OK, 50411487
