bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:26:592 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
2023-06-05 12:32:36:577 10 sec: 509342 operations; 50934.2 current ops/sec; [READ: Count=254990, Max=96447, Min=414, Avg=3781.57, 90=5939, 99=18111, 99.9=27247, 99.99=66687] [UPDATE: Count=255875, Max=91519, Min=313, Avg=1966.5, 90=2869, 99=6991, 99.9=22879, 99.99=66559] 
2023-06-05 12:32:46:577 20 sec: 1071797 operations; 56245.5 current ops/sec; [READ: Count=281178, Max=42495, Min=410, Avg=3679.14, 90=5675, 99=17087, 99.9=23551, 99.99=33503] [UPDATE: Count=280891, Max=28975, Min=314, Avg=1861.43, 90=2805, 99=5667, 99.9=7943, 99.99=9543] 
2023-06-05 12:32:56:577 30 sec: 1634256 operations; 56245.9 current ops/sec; [READ: Count=281609, Max=46463, Min=363, Avg=3830.02, 90=5923, 99=18111, 99.9=32207, 99.99=35903] [UPDATE: Count=280736, Max=19823, Min=335, Avg=1903.32, 90=2877, 99=5887, 99.9=8011, 99.99=9695] 
2023-06-05 12:33:06:577 40 sec: 2196660 operations; 56240.4 current ops/sec; [READ: Count=280744, Max=50015, Min=389, Avg=3901.48, 90=6075, 99=18079, 99.9=29119, 99.99=33407] [UPDATE: Count=281742, Max=17951, Min=320, Avg=1930.76, 90=2927, 99=5911, 99.9=8051, 99.99=10079] 
2023-06-05 12:33:16:577 50 sec: 2756240 operations; 55958 current ops/sec; [READ: Count=279838, Max=145535, Min=394, Avg=4479.07, 90=6663, 99=27087, 99.9=81279, 99.99=94335] [UPDATE: Count=279916, Max=20079, Min=334, Avg=1997.64, 90=3047, 99=6287, 99.9=8359, 99.99=9855] 
2023-06-05 12:33:26:577 60 sec: 3321627 operations; 56538.7 current ops/sec; [READ: Count=283230, Max=108671, Min=423, Avg=4322.99, 90=6539, 99=21711, 99.9=64319, 99.99=81727] [UPDATE: Count=282107, Max=22223, Min=341, Avg=2023.01, 90=3075, 99=6139, 99.9=8199, 99.99=9655] 
2023-06-05 12:33:36:577 70 sec: 3883995 operations; 56236.8 current ops/sec; [READ: Count=281525, Max=56063, Min=404, Avg=4129.87, 90=6491, 99=18767, 99.9=26095, 99.99=33311] [UPDATE: Count=280731, Max=11527, Min=310, Avg=2033.67, 90=3109, 99=6071, 99.9=8167, 99.99=9687] 
2023-06-05 12:33:46:577 80 sec: 4446592 operations; 56259.7 current ops/sec; [READ: Count=281667, Max=80063, Min=418, Avg=4206.28, 90=6563, 99=19023, 99.9=38655, 99.99=45759] [UPDATE: Count=280891, Max=14495, Min=323, Avg=2039.19, 90=3125, 99=6071, 99.9=8103, 99.99=9871] 
2023-06-05 12:33:56:577 90 sec: 5008976 operations; 56238.4 current ops/sec; [READ: Count=282056, Max=46431, Min=387, Avg=4168.29, 90=6583, 99=18975, 99.9=30607, 99.99=36639] [UPDATE: Count=280322, Max=13199, Min=307, Avg=2030.87, 90=3137, 99=6023, 99.9=8043, 99.99=9687] 
2023-06-05 12:34:06:577 100 sec: 5568666 operations; 55969 current ops/sec; [READ: Count=280363, Max=139135, Min=401, Avg=4320.14, 90=6759, 99=21807, 99.9=35583, 99.99=86719] [UPDATE: Count=279597, Max=17087, Min=326, Avg=2035.38, 90=3117, 99=6439, 99.9=8943, 99.99=10871] 
2023-06-05 12:34:16:577 110 sec: 6130922 operations; 56225.6 current ops/sec; [READ: Count=281121, Max=188287, Min=403, Avg=4646.51, 90=6579, 99=26799, 99.9=98879, 99.99=115007] [UPDATE: Count=281034, Max=16111, Min=331, Avg=2035.72, 90=3093, 99=6507, 99.9=9039, 99.99=11983] 
2023-06-05 12:34:26:577 120 sec: 6696271 operations; 56534.9 current ops/sec; [READ: Count=282587, Max=105343, Min=377, Avg=4422.54, 90=6767, 99=22975, 99.9=35871, 99.99=94527] [UPDATE: Count=282669, Max=15503, Min=322, Avg=2078.73, 90=3135, 99=6727, 99.9=9359, 99.99=12375] 
2023-06-05 12:34:36:577 130 sec: 7244922 operations; 54865.1 current ops/sec; [READ: Count=274315, Max=299007, Min=406, Avg=4857.11, 90=6963, 99=22239, 99.9=160639, 99.99=263423] [UPDATE: Count=274252, Max=14199, Min=311, Avg=2057.01, 90=3105, 99=7011, 99.9=9471, 99.99=11151] 
2023-06-05 12:34:46:577 140 sec: 7799890 operations; 55496.8 current ops/sec; [READ: Count=277852, Max=262655, Min=418, Avg=5037.78, 90=6791, 99=25583, 99.9=162559, 99.99=223743] [UPDATE: Count=277273, Max=19103, Min=328, Avg=2055.1, 90=3109, 99=6903, 99.9=9351, 99.99=11911] 
2023-06-05 12:34:56:577 150 sec: 8352786 operations; 55289.6 current ops/sec; [READ: Count=276377, Max=346367, Min=382, Avg=5114.81, 90=6351, 99=23855, 99.9=190719, 99.99=281599] [UPDATE: Count=276601, Max=15983, Min=322, Avg=2024.25, 90=3055, 99=6707, 99.9=9399, 99.99=12111] 
2023-06-05 12:35:06:577 160 sec: 8925838 operations; 57305.2 current ops/sec; [READ: Count=286322, Max=206847, Min=408, Avg=4763.76, 90=6503, 99=20239, 99.9=190335, 99.99=194431] [UPDATE: Count=286574, Max=17407, Min=336, Avg=2075.76, 90=3141, 99=5991, 99.9=8383, 99.99=10591] 
2023-06-05 12:35:16:577 170 sec: 9471810 operations; 54597.2 current ops/sec; [READ: Count=272710, Max=378111, Min=423, Avg=5181.81, 90=6343, 99=28223, 99.9=217983, 99.99=293631] [UPDATE: Count=273482, Max=15591, Min=304, Avg=2047.1, 90=3119, 99=5987, 99.9=8303, 99.99=10015] 
2023-06-05 12:35:26:577 180 sec: 10056651 operations; 58484.1 current ops/sec; [READ: Count=292054, Max=222975, Min=383, Avg=4574.73, 90=6407, 99=21503, 99.9=137727, 99.99=190847] [UPDATE: Count=292673, Max=14647, Min=341, Avg=2116.41, 90=3153, 99=5467, 99.9=8327, 99.99=10127] 
2023-06-05 12:35:36:577 190 sec: 10624327 operations; 56767.6 current ops/sec; [READ: Count=283725, Max=299263, Min=431, Avg=4585.62, 90=6119, 99=23407, 99.9=188671, 99.99=218367] [UPDATE: Count=283310, Max=30031, Min=349, Avg=2074.72, 90=3109, 99=5559, 99.9=9031, 99.99=15951] 
2023-06-05 12:35:46:577 200 sec: 11190468 operations; 56614.1 current ops/sec; [READ: Count=283379, Max=176511, Min=438, Avg=4578.73, 90=6191, 99=21183, 99.9=161535, 99.99=167039] [UPDATE: Count=283210, Max=18879, Min=310, Avg=2082.43, 90=3115, 99=5479, 99.9=8567, 99.99=11199] 
2023-06-05 12:35:56:577 210 sec: 11759194 operations; 56872.6 current ops/sec; [READ: Count=284690, Max=153343, Min=398, Avg=4221.67, 90=6123, 99=19103, 99.9=81919, 99.99=128767] [UPDATE: Count=284050, Max=21759, Min=343, Avg=2068.19, 90=3091, 99=5343, 99.9=8599, 99.99=11039] 
2023-06-05 12:36:06:577 220 sec: 12321651 operations; 56245.7 current ops/sec; [READ: Count=281382, Max=133631, Min=407, Avg=4090.87, 90=5907, 99=18847, 99.9=63263, 99.99=84031] [UPDATE: Count=281046, Max=17487, Min=328, Avg=2029.45, 90=3039, 99=5403, 99.9=8487, 99.99=10743] 
2023-06-05 12:36:16:577 230 sec: 12884385 operations; 56273.4 current ops/sec; [READ: Count=281531, Max=53375, Min=440, Avg=3771.06, 90=5627, 99=13439, 99.9=30367, 99.99=45055] [UPDATE: Count=281159, Max=13503, Min=342, Avg=1971.26, 90=2965, 99=4799, 99.9=7467, 99.99=9207] 
2023-06-05 12:36:26:577 240 sec: 13446917 operations; 56253.2 current ops/sec; [READ: Count=281629, Max=25343, Min=397, Avg=3502.45, 90=5351, 99=7675, 99.9=12615, 99.99=19359] [UPDATE: Count=280793, Max=11871, Min=329, Avg=1918.61, 90=2891, 99=4007, 99.9=6115, 99.99=7495] 
2023-06-05 12:36:36:577 250 sec: 14009418 operations; 56250.1 current ops/sec; [READ: Count=281259, Max=33567, Min=400, Avg=3571.72, 90=5479, 99=7959, 99.9=12391, 99.99=20383] [UPDATE: Count=281283, Max=10735, Min=344, Avg=1947.32, 90=2959, 99=4139, 99.9=6087, 99.99=7927] 
2023-06-05 12:36:46:577 260 sec: 14571912 operations; 56249.4 current ops/sec; [READ: Count=282005, Max=29519, Min=376, Avg=3553.46, 90=5467, 99=8127, 99.9=13631, 99.99=21663] [UPDATE: Count=280483, Max=18271, Min=345, Avg=1933.98, 90=2943, 99=4191, 99.9=6539, 99.99=8903] 
2023-06-05 12:36:56:577 270 sec: 15134410 operations; 56249.8 current ops/sec; [READ: Count=281473, Max=37439, Min=412, Avg=3594.66, 90=5551, 99=8455, 99.9=13407, 99.99=21887] [UPDATE: Count=281059, Max=24639, Min=327, Avg=1949.22, 90=2981, 99=4247, 99.9=6427, 99.99=8399] 
2023-06-05 12:37:06:577 280 sec: 15696869 operations; 56245.9 current ops/sec; [READ: Count=280954, Max=31455, Min=385, Avg=3524.01, 90=5447, 99=8263, 99.9=14207, 99.99=23519] [UPDATE: Count=281457, Max=17807, Min=320, Avg=1919.4, 90=2943, 99=4227, 99.9=6727, 99.99=10367] 
2023-06-05 12:37:16:577 290 sec: 16259431 operations; 56256.2 current ops/sec; [READ: Count=281730, Max=85631, Min=425, Avg=3579.76, 90=5503, 99=8671, 99.9=20015, 99.99=41343] [UPDATE: Count=280910, Max=12943, Min=331, Avg=1928.44, 90=2951, 99=4331, 99.9=6707, 99.99=8983] 
2023-06-05 12:37:26:577 300 sec: 16821918 operations; 56248.7 current ops/sec; [READ: Count=281223, Max=22655, Min=427, Avg=3495.26, 90=5391, 99=8079, 99.9=11487, 99.99=16375] [UPDATE: Count=281094, Max=11191, Min=325, Avg=1901.86, 90=2909, 99=4163, 99.9=6303, 99.99=8271] 
2023-06-05 12:37:36:577 310 sec: 17384442 operations; 56252.4 current ops/sec; [READ: Count=281080, Max=84031, Min=421, Avg=3533.33, 90=5383, 99=9087, 99.9=24687, 99.99=51359] [UPDATE: Count=281636, Max=11479, Min=331, Avg=1891.18, 90=2887, 99=4319, 99.9=6963, 99.99=9239] 
2023-06-05 12:37:46:577 320 sec: 17946874 operations; 56243.2 current ops/sec; [READ: Count=280690, Max=30351, Min=362, Avg=3436.56, 90=5287, 99=8663, 99.9=19183, 99.99=23487] [UPDATE: Count=281645, Max=18575, Min=332, Avg=1858.92, 90=2827, 99=4259, 99.9=7571, 99.99=10527] 
2023-06-05 12:37:56:577 330 sec: 18509435 operations; 56256.1 current ops/sec; [READ: Count=281229, Max=31055, Min=389, Avg=3411.34, 90=5231, 99=9175, 99.9=21599, 99.99=25391] [UPDATE: Count=281369, Max=15367, Min=320, Avg=1834.76, 90=2775, 99=4451, 99.9=7799, 99.99=9983] 
2023-06-05 12:38:06:577 340 sec: 19071926 operations; 56249.1 current ops/sec; [READ: Count=281301, Max=30943, Min=398, Avg=3418.68, 90=5235, 99=9207, 99.9=21487, 99.99=25487] [UPDATE: Count=281218, Max=22127, Min=335, Avg=1841.87, 90=2779, 99=4347, 99.9=7683, 99.99=10903] 
2023-06-05 12:38:16:577 350 sec: 19634455 operations; 56252.9 current ops/sec; [READ: Count=282430, Max=27855, Min=429, Avg=3374.04, 90=5131, 99=8271, 99.9=19679, 99.99=23743] [UPDATE: Count=280013, Max=25407, Min=330, Avg=1834.72, 90=2755, 99=4163, 99.9=7155, 99.99=15319] 
2023-06-05 12:38:26:577 360 sec: 20196950 operations; 56249.5 current ops/sec; [READ: Count=280995, Max=19359, Min=387, Avg=3297.07, 90=5055, 99=7339, 99.9=9655, 99.99=12503] [UPDATE: Count=281412, Max=8631, Min=305, Avg=1821.24, 90=2747, 99=3915, 99.9=5923, 99.99=7163] 
2023-06-05 12:38:36:577 370 sec: 20759459 operations; 56250.9 current ops/sec; [READ: Count=282072, Max=52543, Min=345, Avg=3304.47, 90=5079, 99=7535, 99.9=11807, 99.99=25647] [UPDATE: Count=280513, Max=10535, Min=306, Avg=1814.51, 90=2749, 99=3959, 99.9=6159, 99.99=8087] 
2023-06-05 12:38:46:577 380 sec: 21321950 operations; 56249.1 current ops/sec; [READ: Count=281568, Max=19711, Min=375, Avg=3303.58, 90=5083, 99=7439, 99.9=9951, 99.99=13287] [UPDATE: Count=280849, Max=16751, Min=329, Avg=1821.79, 90=2763, 99=3965, 99.9=5927, 99.99=7715] 
2023-06-05 12:38:56:577 390 sec: 21884429 operations; 56247.9 current ops/sec; [READ: Count=281230, Max=28255, Min=376, Avg=3373.45, 90=5207, 99=7579, 99.9=10167, 99.99=15607] [UPDATE: Count=281229, Max=15671, Min=328, Avg=1847.8, 90=2817, 99=3979, 99.9=5863, 99.99=7399] 
2023-06-05 12:39:06:577 400 sec: 22446928 operations; 56249.9 current ops/sec; [READ: Count=281388, Max=31135, Min=383, Avg=3490.1, 90=5383, 99=8039, 99.9=13287, 99.99=21231] [UPDATE: Count=281169, Max=17167, Min=329, Avg=1898.09, 90=2899, 99=4139, 99.9=6515, 99.99=9663] 
2023-06-05 12:39:16:577 410 sec: 23009438 operations; 56251 current ops/sec; [READ: Count=281572, Max=25839, Min=393, Avg=3518.5, 90=5443, 99=8051, 99.9=11607, 99.99=18767] [UPDATE: Count=280893, Max=10791, Min=306, Avg=1910.07, 90=2915, 99=4143, 99.9=6067, 99.99=7671] 
2023-06-05 12:39:26:577 420 sec: 23571937 operations; 56249.9 current ops/sec; [READ: Count=281615, Max=21215, Min=441, Avg=3592.14, 90=5543, 99=8223, 99.9=11519, 99.99=15575] [UPDATE: Count=280531, Max=24047, Min=321, Avg=1941.68, 90=2955, 99=4243, 99.9=6467, 99.99=14303] 
2023-06-05 12:39:36:577 430 sec: 24134417 operations; 56248 current ops/sec; [READ: Count=280931, Max=26527, Min=406, Avg=3612.21, 90=5595, 99=8359, 99.9=11951, 99.99=19999] [UPDATE: Count=281939, Max=23039, Min=324, Avg=1947.23, 90=2977, 99=4223, 99.9=6243, 99.99=11895] 
2023-06-05 12:39:46:577 440 sec: 24696905 operations; 56248.8 current ops/sec; [READ: Count=281417, Max=21007, Min=401, Avg=3588.35, 90=5547, 99=8095, 99.9=11047, 99.99=15391] [UPDATE: Count=281071, Max=22143, Min=327, Avg=1942.75, 90=2977, 99=4155, 99.9=6099, 99.99=8111] 
2023-06-05 12:39:56:577 450 sec: 25259394 operations; 56248.9 current ops/sec; [READ: Count=281427, Max=30111, Min=369, Avg=3638, 90=5643, 99=8687, 99.9=16447, 99.99=22815] [UPDATE: Count=281123, Max=27279, Min=316, Avg=1951.38, 90=2993, 99=4347, 99.9=6723, 99.99=9383] 
2023-06-05 12:40:06:577 460 sec: 25821817 operations; 56242.3 current ops/sec; [READ: Count=281885, Max=43519, Min=386, Avg=3753.39, 90=5723, 99=10639, 99.9=29471, 99.99=35647] [UPDATE: Count=280574, Max=17279, Min=334, Avg=1967.99, 90=3007, 99=4627, 99.9=7259, 99.99=9767] 
2023-06-05 12:40:16:577 470 sec: 26379247 operations; 55743 current ops/sec; [READ: Count=278865, Max=279039, Min=408, Avg=4558.12, 90=6391, 99=23711, 99.9=138367, 99.99=218367] [UPDATE: Count=278784, Max=13575, Min=327, Avg=2083.29, 90=3161, 99=6059, 99.9=8799, 99.99=10599] 
2023-06-05 12:40:26:577 480 sec: 26946920 operations; 56767.3 current ops/sec; [READ: Count=283987, Max=205695, Min=394, Avg=4135.09, 90=5803, 99=15335, 99.9=100031, 99.99=120255] [UPDATE: Count=283513, Max=15367, Min=338, Avg=2001.16, 90=3023, 99=4855, 99.9=8055, 99.99=10167] 
2023-06-05 12:40:36:577 490 sec: 27509361 operations; 56244.1 current ops/sec; [READ: Count=280947, Max=35167, Min=384, Avg=3638.86, 90=5623, 99=8839, 99.9=15199, 99.99=23247] [UPDATE: Count=281480, Max=10159, Min=321, Avg=1951.29, 90=2985, 99=4391, 99.9=6459, 99.99=8199] 
2023-06-05 12:40:46:577 500 sec: 28071901 operations; 56254 current ops/sec; [READ: Count=281322, Max=36383, Min=398, Avg=3629.12, 90=5623, 99=9047, 99.9=18399, 99.99=27487] [UPDATE: Count=281307, Max=18527, Min=329, Avg=1935.58, 90=2955, 99=4207, 99.9=7195, 99.99=14047] 
2023-06-05 12:40:56:577 510 sec: 28634421 operations; 56252 current ops/sec; [READ: Count=281124, Max=81087, Min=371, Avg=3658.7, 90=5615, 99=9383, 99.9=30831, 99.99=43551] [UPDATE: Count=281282, Max=22303, Min=296, Avg=1927.35, 90=2953, 99=4299, 99.9=7251, 99.99=10351] 
2023-06-05 12:41:06:577 520 sec: 29196908 operations; 56248.7 current ops/sec; [READ: Count=280987, Max=26239, Min=381, Avg=3640.65, 90=5687, 99=8663, 99.9=13039, 99.99=19455] [UPDATE: Count=281410, Max=17855, Min=343, Avg=1947.01, 90=2989, 99=4359, 99.9=6663, 99.99=9055] 
2023-06-05 12:41:16:577 530 sec: 29759363 operations; 56245.5 current ops/sec; [READ: Count=281031, Max=24431, Min=413, Avg=3686.04, 90=5715, 99=9095, 99.9=17583, 99.99=21887] [UPDATE: Count=281488, Max=10695, Min=297, Avg=1961.76, 90=3001, 99=4507, 99.9=7075, 99.99=9199] 
2023-06-05 12:41:26:577 540 sec: 30321831 operations; 56246.8 current ops/sec; [READ: Count=280584, Max=29039, Min=404, Avg=3727.11, 90=5783, 99=9127, 99.9=16263, 99.99=23039] [UPDATE: Count=281748, Max=16991, Min=333, Avg=1976.67, 90=3035, 99=4407, 99.9=6879, 99.99=9743] 
2023-06-05 12:41:36:577 550 sec: 30884314 operations; 56248.3 current ops/sec; [READ: Count=281544, Max=35679, Min=365, Avg=3808.02, 90=5855, 99=10487, 99.9=24271, 99.99=28431] [UPDATE: Count=281231, Max=13167, Min=318, Avg=1992.33, 90=3057, 99=4655, 99.9=7755, 99.99=10679] 
2023-06-05 12:41:46:577 560 sec: 31439867 operations; 55555.3 current ops/sec; [READ: Count=277929, Max=355839, Min=409, Avg=4103.64, 90=5831, 99=12319, 99.9=157055, 99.99=194431] [UPDATE: Count=277564, Max=17839, Min=333, Avg=1983.67, 90=3043, 99=4903, 99.9=8495, 99.99=10799] 
2023-06-05 12:41:56:577 570 sec: 31989680 operations; 54981.3 current ops/sec; [READ: Count=274972, Max=400383, Min=398, Avg=4933.08, 90=5675, 99=13727, 99.9=228735, 99.99=361215] [UPDATE: Count=274985, Max=16031, Min=314, Avg=1953.59, 90=2997, 99=4739, 99.9=7995, 99.99=10039] 
2023-06-05 12:42:06:577 580 sec: 32545293 operations; 55561.3 current ops/sec; [READ: Count=277694, Max=307711, Min=387, Avg=4967.31, 90=5995, 99=25007, 99.9=227839, 99.99=277759] [UPDATE: Count=277784, Max=19439, Min=320, Avg=2028.24, 90=3089, 99=4887, 99.9=8055, 99.99=10959] 
2023-06-05 12:42:16:577 590 sec: 33057658 operations; 51236.5 current ops/sec; [READ: Count=256599, Max=544255, Min=370, Avg=5629.14, 90=7367, 99=33567, 99.9=193535, 99.99=326399] [UPDATE: Count=255785, Max=13839, Min=316, Avg=2117.03, 90=3277, 99=6775, 99.9=9047, 99.99=11255] 
2023-06-05 12:42:26:577 600 sec: 33558438 operations; 50078 current ops/sec; [READ: Count=250361, Max=449535, Min=377, Avg=5926.88, 90=6623, 99=41119, 99.9=326143, 99.99=330239] [UPDATE: Count=250341, Max=13343, Min=304, Avg=2067.07, 90=3207, 99=6215, 99.9=8631, 99.99=10463] 
2023-06-05 12:42:36:577 610 sec: 34100310 operations; 54187.2 current ops/sec; [READ: Count=270352, Max=325887, Min=399, Avg=5257.88, 90=6907, 99=33535, 99.9=165119, 99.99=322047] [UPDATE: Count=271661, Max=12599, Min=331, Avg=2137.99, 90=3285, 99=6091, 99.9=8495, 99.99=10175] 
2023-06-05 12:42:46:577 620 sec: 34655455 operations; 55514.5 current ops/sec; [READ: Count=277524, Max=226175, Min=391, Avg=5013.95, 90=7191, 99=29503, 99.9=135935, 99.99=162815] [UPDATE: Count=277626, Max=16511, Min=337, Avg=2192.19, 90=3353, 99=6155, 99.9=8359, 99.99=10207] 
2023-06-05 12:42:56:577 630 sec: 35222533 operations; 56707.8 current ops/sec; [READ: Count=283807, Max=258943, Min=413, Avg=4906, 90=6599, 99=30063, 99.9=135551, 99.99=156671] [UPDATE: Count=283314, Max=21935, Min=324, Avg=2136.56, 90=3243, 99=5631, 99.9=8067, 99.99=9759] 
2023-06-05 12:43:06:577 640 sec: 35799938 operations; 57740.5 current ops/sec; [READ: Count=288449, Max=160383, Min=418, Avg=4750.02, 90=6719, 99=19183, 99.9=116095, 99.99=134271] [UPDATE: Count=288796, Max=19103, Min=319, Avg=2173.46, 90=3281, 99=5439, 99.9=8255, 99.99=12903] 
2023-06-05 12:43:16:577 650 sec: 36373988 operations; 57405 current ops/sec; [READ: Count=287235, Max=280831, Min=416, Avg=4790.67, 90=6631, 99=18287, 99.9=160639, 99.99=180223] [UPDATE: Count=286991, Max=18799, Min=325, Avg=2170.58, 90=3271, 99=5319, 99.9=7883, 99.99=9575] 
2023-06-05 12:43:26:577 660 sec: 36949713 operations; 57572.5 current ops/sec; [READ: Count=287784, Max=249727, Min=409, Avg=4740.48, 90=6787, 99=17935, 99.9=113407, 99.99=206719] [UPDATE: Count=288036, Max=14959, Min=325, Avg=2194.13, 90=3313, 99=5527, 99.9=8091, 99.99=10159] 
2023-06-05 12:43:36:577 670 sec: 37541266 operations; 59155.3 current ops/sec; [READ: Count=295508, Max=32399, Min=446, Avg=4473.99, 90=6935, 99=12215, 99.9=21183, 99.99=25759] [UPDATE: Count=295711, Max=11735, Min=334, Avg=2252.53, 90=3361, 99=5051, 99.9=7379, 99.99=9023] 
2023-06-05 12:43:46:577 680 sec: 38126337 operations; 58507.1 current ops/sec; [READ: Count=292630, Max=81151, Min=435, Avg=4499.86, 90=6887, 99=12479, 99.9=22767, 99.99=46463] [UPDATE: Count=292513, Max=16183, Min=342, Avg=2267, 90=3373, 99=5007, 99.9=7475, 99.99=9871] 
2023-06-05 12:43:56:577 690 sec: 38702361 operations; 57602.4 current ops/sec; [READ: Count=288167, Max=114943, Min=424, Avg=4628.75, 90=6679, 99=13903, 99.9=83071, 99.99=89023] [UPDATE: Count=287951, Max=16327, Min=341, Avg=2252.58, 90=3345, 99=5059, 99.9=8059, 99.99=10095] 
2023-06-05 12:44:06:577 700 sec: 39276419 operations; 57405.8 current ops/sec; [READ: Count=286897, Max=75455, Min=416, Avg=4613.38, 90=6807, 99=15223, 99.9=46943, 99.99=58335] [UPDATE: Count=287110, Max=16911, Min=338, Avg=2289.8, 90=3385, 99=5255, 99.9=8487, 99.99=10759] 
2023-06-05 12:44:16:577 710 sec: 39842536 operations; 56611.7 current ops/sec; [READ: Count=283390, Max=218623, Min=422, Avg=4701.27, 90=6783, 99=16863, 99.9=57887, 99.99=118207] [UPDATE: Count=282759, Max=13895, Min=340, Avg=2294.62, 90=3379, 99=5439, 99.9=8655, 99.99=10343] 
2023-06-05 12:44:26:577 720 sec: 40397100 operations; 55456.4 current ops/sec; [READ: Count=277142, Max=201727, Min=400, Avg=4891.72, 90=6831, 99=19423, 99.9=134911, 99.99=141951] [UPDATE: Count=277416, Max=14607, Min=316, Avg=2303.04, 90=3393, 99=5703, 99.9=8751, 99.99=10775] 
2023-06-05 12:44:36:577 730 sec: 40961817 operations; 56471.7 current ops/sec; [READ: Count=283115, Max=44191, Min=417, Avg=4710.79, 90=7007, 99=16327, 99.9=33279, 99.99=37727] [UPDATE: Count=281576, Max=18735, Min=318, Avg=2352.31, 90=3461, 99=5731, 99.9=9191, 99.99=12783] 
2023-06-05 12:44:46:577 740 sec: 41526233 operations; 56441.6 current ops/sec; [READ: Count=282661, Max=40127, Min=383, Avg=4728.63, 90=7011, 99=18143, 99.9=30303, 99.99=35167] [UPDATE: Count=281705, Max=18543, Min=328, Avg=2341.75, 90=3447, 99=5715, 99.9=8967, 99.99=10967] 
2023-06-05 12:44:56:577 750 sec: 42094603 operations; 56837 current ops/sec; [READ: Count=284194, Max=47295, Min=424, Avg=4674.93, 90=6979, 99=16959, 99.9=26111, 99.99=31551] [UPDATE: Count=284143, Max=24207, Min=347, Avg=2333.61, 90=3433, 99=5623, 99.9=8831, 99.99=11135] 
2023-06-05 12:45:06:577 760 sec: 42661546 operations; 56694.3 current ops/sec; [READ: Count=283268, Max=38399, Min=425, Avg=4676.43, 90=6879, 99=17983, 99.9=27503, 99.99=31807] [UPDATE: Count=283746, Max=20015, Min=339, Avg=2337.85, 90=3421, 99=5595, 99.9=9023, 99.99=10959] 
2023-06-05 12:45:16:577 770 sec: 43187957 operations; 52641.1 current ops/sec; [READ: Count=263206, Max=525823, Min=408, Avg=5273.08, 90=6739, 99=23567, 99.9=271359, 99.99=368895] [UPDATE: Count=263197, Max=13807, Min=308, Avg=2289.02, 90=3381, 99=5763, 99.9=9055, 99.99=10919] 
2023-06-05 12:45:26:577 780 sec: 43725835 operations; 53787.8 current ops/sec; [READ: Count=268550, Max=280319, Min=399, Avg=5206.76, 90=6347, 99=17823, 99.9=272895, 99.99=276479] [UPDATE: Count=268895, Max=18143, Min=339, Avg=2225.94, 90=3295, 99=5255, 99.9=8191, 99.99=11663] 
2023-06-05 12:45:36:577 790 sec: 44298607 operations; 57277.2 current ops/sec; [READ: Count=286119, Max=275711, Min=430, Avg=4700.05, 90=6771, 99=12215, 99.9=117503, 99.99=267519] [UPDATE: Count=287127, Max=17567, Min=333, Avg=2286.61, 90=3373, 99=4947, 99.9=7415, 99.99=10239] 
2023-06-05 12:45:46:577 800 sec: 44879963 operations; 58135.6 current ops/sec; [READ: Count=290534, Max=46047, Min=410, Avg=4541.5, 90=6867, 99=10783, 99.9=18463, 99.99=27823] [UPDATE: Count=290693, Max=16911, Min=354, Avg=2321.28, 90=3401, 99=4831, 99.9=6927, 99.99=8719] 
2023-06-05 12:45:56:577 810 sec: 45456565 operations; 57660.2 current ops/sec; [READ: Count=288472, Max=34079, Min=411, Avg=4567, 90=6899, 99=10983, 99.9=18607, 99.99=29007] [UPDATE: Count=288172, Max=17183, Min=348, Avg=2336.75, 90=3417, 99=4919, 99.9=7039, 99.99=8535] 
2023-06-05 12:46:06:577 820 sec: 46031651 operations; 57508.6 current ops/sec; [READ: Count=287900, Max=26239, Min=426, Avg=4536.58, 90=6791, 99=10375, 99.9=15103, 99.99=19919] [UPDATE: Count=287106, Max=20943, Min=352, Avg=2347.56, 90=3411, 99=4791, 99.9=6783, 99.99=9031] 
2023-06-05 12:46:16:577 830 sec: 46606706 operations; 57505.5 current ops/sec; [READ: Count=287076, Max=106943, Min=405, Avg=4522.52, 90=6747, 99=10471, 99.9=20415, 99.99=40415] [UPDATE: Count=288053, Max=12751, Min=327, Avg=2333.86, 90=3403, 99=4827, 99.9=7015, 99.99=8847] 
2023-06-05 12:46:26:577 840 sec: 47175728 operations; 56902.2 current ops/sec; [READ: Count=284400, Max=33023, Min=409, Avg=4562.3, 90=6771, 99=10151, 99.9=15623, 99.99=22911] [UPDATE: Count=284548, Max=21327, Min=337, Avg=2365.26, 90=3423, 99=4775, 99.9=7191, 99.99=14735] 
2023-06-05 12:46:36:577 850 sec: 47735492 operations; 55976.4 current ops/sec; [READ: Count=280332, Max=89535, Min=435, Avg=4706.39, 90=6831, 99=13183, 99.9=32927, 99.99=54015] [UPDATE: Count=279311, Max=16039, Min=332, Avg=2397.32, 90=3453, 99=5191, 99.9=8647, 99.99=12863] 
2023-06-05 12:46:46:577 860 sec: 48297501 operations; 56200.9 current ops/sec; [READ: Count=280670, Max=39007, Min=396, Avg=4692.01, 90=6851, 99=12095, 99.9=25423, 99.99=30159] [UPDATE: Count=281508, Max=15783, Min=344, Avg=2409.1, 90=3461, 99=5063, 99.9=8151, 99.99=11231] 
2023-06-05 12:46:56:577 870 sec: 48861570 operations; 56406.9 current ops/sec; [READ: Count=281453, Max=34527, Min=426, Avg=4669.82, 90=6835, 99=11575, 99.9=25263, 99.99=29663] [UPDATE: Count=282661, Max=13079, Min=345, Avg=2400.5, 90=3455, 99=5019, 99.9=7827, 99.99=10247] 
2023-06-05 12:47:06:577 880 sec: 49423183 operations; 56161.3 current ops/sec; [READ: Count=280863, Max=37983, Min=422, Avg=4702.51, 90=6931, 99=13439, 99.9=23807, 99.99=28527] [UPDATE: Count=280703, Max=17407, Min=336, Avg=2397.46, 90=3465, 99=5299, 99.9=8043, 99.99=10991] 
2023-06-05 12:47:16:577 890 sec: 49980710 operations; 55752.7 current ops/sec; [READ: Count=278965, Max=71615, Min=426, Avg=4767.83, 90=6927, 99=16151, 99.9=42271, 99.99=56511] [UPDATE: Count=278633, Max=13431, Min=342, Avg=2386.88, 90=3441, 99=5463, 99.9=8631, 99.99=10415] 
2023-06-05 12:47:26:577 900 sec: 50542530 operations; 56182 current ops/sec; [READ: Count=281022, Max=55359, Min=438, Avg=4725.41, 90=6883, 99=16591, 99.9=25663, 99.99=42847] [UPDATE: Count=280766, Max=11799, Min=353, Avg=2383.85, 90=3429, 99=5495, 99.9=8495, 99.99=10039] 
2023-06-05 12:47:36:577 910 sec: 51102330 operations; 55980 current ops/sec; [READ: Count=279639, Max=37727, Min=444, Avg=4732.89, 90=6819, 99=15039, 99.9=25935, 99.99=30943] [UPDATE: Count=280111, Max=46015, Min=341, Avg=2407.82, 90=3435, 99=5299, 99.9=8295, 99.99=10223] 
2023-06-05 12:47:46:577 920 sec: 51665621 operations; 56329.1 current ops/sec; [READ: Count=281412, Max=37535, Min=417, Avg=4691.35, 90=6755, 99=13463, 99.9=26047, 99.99=30447] [UPDATE: Count=281271, Max=31135, Min=332, Avg=2406.2, 90=3431, 99=5119, 99.9=8087, 99.99=15895] 
2023-06-05 12:47:56:577 930 sec: 52228162 operations; 56254.1 current ops/sec; [READ: Count=281116, Max=31119, Min=391, Avg=4693.5, 90=6759, 99=13287, 99.9=23807, 99.99=27071] [UPDATE: Count=281604, Max=22639, Min=347, Avg=2404.94, 90=3427, 99=5083, 99.9=7627, 99.99=13999] 
2023-06-05 12:48:06:577 940 sec: 52793696 operations; 56553.4 current ops/sec; [READ: Count=282011, Max=30991, Min=423, Avg=4659.98, 90=6843, 99=11519, 99.9=20991, 99.99=24927] [UPDATE: Count=283930, Max=17839, Min=351, Avg=2394.71, 90=3441, 99=4939, 99.9=7203, 99.99=11799] 
2023-06-05 12:48:16:577 950 sec: 53358810 operations; 56511.4 current ops/sec; [READ: Count=282991, Max=32751, Min=446, Avg=4659.24, 90=6891, 99=11471, 99.9=20943, 99.99=24287] [UPDATE: Count=282132, Max=12559, Min=328, Avg=2389.22, 90=3445, 99=4967, 99.9=7107, 99.99=8487] 
2023-06-05 12:48:26:577 960 sec: 53928438 operations; 56962.8 current ops/sec; [READ: Count=284243, Max=38687, Min=448, Avg=4601.53, 90=6803, 99=10983, 99.9=19855, 99.99=24015] [UPDATE: Count=285366, Max=13031, Min=338, Avg=2369.85, 90=3411, 99=4959, 99.9=7351, 99.99=9599] 
2023-06-05 12:48:36:577 970 sec: 54493184 operations; 56474.6 current ops/sec; [READ: Count=282824, Max=72831, Min=411, Avg=4612.55, 90=6799, 99=10919, 99.9=24911, 99.99=61663] [UPDATE: Count=282029, Max=61023, Min=349, Avg=2373.22, 90=3417, 99=4851, 99.9=7451, 99.99=59455] 
2023-06-05 12:48:46:577 980 sec: 55056700 operations; 56351.6 current ops/sec; [READ: Count=281822, Max=125951, Min=434, Avg=4673.97, 90=6683, 99=12415, 99.9=64319, 99.99=78591] [UPDATE: Count=281664, Max=17327, Min=315, Avg=2337.72, 90=3381, 99=4871, 99.9=7699, 99.99=10351] 
2023-06-05 12:48:56:577 990 sec: 55620102 operations; 56340.2 current ops/sec; [READ: Count=281825, Max=82623, Min=419, Avg=4695.39, 90=6711, 99=11447, 99.9=62271, 99.99=74239] [UPDATE: Count=281655, Max=26239, Min=347, Avg=2342.64, 90=3385, 99=4867, 99.9=7435, 99.99=9511] 
2023-06-05 12:49:06:577 1000 sec: 56186097 operations; 56599.5 current ops/sec; [READ: Count=282319, Max=57279, Min=423, Avg=4649.66, 90=6815, 99=12127, 99.9=38783, 99.99=49567] [UPDATE: Count=283629, Max=19919, Min=349, Avg=2346.33, 90=3407, 99=4903, 99.9=7279, 99.99=9791] 
2023-06-05 12:49:16:577 1010 sec: 56752140 operations; 56604.3 current ops/sec; [READ: Count=283019, Max=38591, Min=409, Avg=4607.5, 90=6839, 99=12367, 99.9=26735, 99.99=31327] [UPDATE: Count=283027, Max=11223, Min=314, Avg=2330.16, 90=3407, 99=4935, 99.9=7167, 99.99=9335] 
2023-06-05 12:49:26:577 1020 sec: 57316726 operations; 56458.6 current ops/sec; [READ: Count=282379, Max=38943, Min=454, Avg=4522.29, 90=6759, 99=10615, 99.9=18095, 99.99=28015] [UPDATE: Count=282184, Max=20543, Min=339, Avg=2329.01, 90=3399, 99=4807, 99.9=7219, 99.99=14239] 
2023-06-05 12:49:36:577 1030 sec: 57880343 operations; 56361.7 current ops/sec; [READ: Count=281614, Max=31791, Min=440, Avg=4562.8, 90=6771, 99=10471, 99.9=18447, 99.99=25327] [UPDATE: Count=281740, Max=15015, Min=344, Avg=2356.34, 90=3421, 99=4783, 99.9=7011, 99.99=10663] 
2023-06-05 12:49:46:577 1040 sec: 58440621 operations; 56027.8 current ops/sec; [READ: Count=280028, Max=40447, Min=384, Avg=4640.31, 90=6855, 99=13247, 99.9=25551, 99.99=29679] [UPDATE: Count=280541, Max=17279, Min=342, Avg=2348.23, 90=3423, 99=5083, 99.9=8103, 99.99=11479] 
2023-06-05 12:49:56:577 1050 sec: 59006120 operations; 56549.9 current ops/sec; [READ: Count=282759, Max=39231, Min=419, Avg=4598.49, 90=6839, 99=11703, 99.9=24847, 99.99=29455] [UPDATE: Count=282732, Max=27023, Min=325, Avg=2345.64, 90=3415, 99=4955, 99.9=7571, 99.99=10231] 
2023-06-05 12:50:06:577 1060 sec: 59568219 operations; 56209.9 current ops/sec; [READ: Count=281215, Max=39903, Min=438, Avg=4613.85, 90=6875, 99=12535, 99.9=25167, 99.99=29663] [UPDATE: Count=280857, Max=20351, Min=339, Avg=2333.66, 90=3391, 99=5011, 99.9=7579, 99.99=10263] 
2023-06-05 12:50:16:577 1070 sec: 60107054 operations; 53883.5 current ops/sec; [READ: Count=269820, Max=188287, Min=396, Avg=5063.14, 90=6979, 99=23567, 99.9=113215, 99.99=149631] [UPDATE: Count=269267, Max=14207, Min=335, Avg=2320.31, 90=3409, 99=5631, 99.9=8351, 99.99=10287] 
2023-06-05 12:50:26:579 1080 sec: 60680703 operations; 57347.7 current ops/sec; [READ: Count=287380, Max=33567, Min=441, Avg=4616.54, 90=6903, 99=12471, 99.9=26079, 99.99=30671] [UPDATE: Count=286148, Max=13199, Min=327, Avg=2331.86, 90=3389, 99=5007, 99.9=8119, 99.99=10423] 
2023-06-05 12:50:36:577 1090 sec: 61247650 operations; 56711.71 current ops/sec; [READ: Count=283354, Max=47455, Min=418, Avg=4661.16, 90=6911, 99=13359, 99.9=26255, 99.99=30431] [UPDATE: Count=283543, Max=12647, Min=343, Avg=2354.11, 90=3413, 99=5079, 99.9=8147, 99.99=10399] 
2023-06-05 12:50:46:577 1100 sec: 61815298 operations; 56764.8 current ops/sec; [READ: Count=283981, Max=34815, Min=406, Avg=4627.54, 90=6871, 99=12391, 99.9=25183, 99.99=29551] [UPDATE: Count=283646, Max=17503, Min=341, Avg=2348.2, 90=3403, 99=5003, 99.9=7567, 99.99=10351] 
2023-06-05 12:50:56:577 1110 sec: 62379654 operations; 56435.6 current ops/sec; [READ: Count=281679, Max=117247, Min=421, Avg=4629.56, 90=6831, 99=12007, 99.9=45087, 99.99=75967] [UPDATE: Count=282723, Max=17855, Min=325, Avg=2331.99, 90=3397, 99=4915, 99.9=7803, 99.99=9999] 
2023-06-05 12:51:06:577 1120 sec: 62940385 operations; 56073.1 current ops/sec; [READ: Count=280221, Max=113919, Min=412, Avg=4714.17, 90=6807, 99=12191, 99.9=65343, 99.99=75391] [UPDATE: Count=280406, Max=18287, Min=337, Avg=2331.83, 90=3395, 99=5003, 99.9=8107, 99.99=10583] 
2023-06-05 12:51:16:577 1130 sec: 63499413 operations; 55902.8 current ops/sec; [READ: Count=279666, Max=213503, Min=424, Avg=4730.66, 90=6871, 99=15391, 99.9=52607, 99.99=137855] [UPDATE: Count=279464, Max=209663, Min=343, Avg=2339.54, 90=3397, 99=5419, 99.9=8863, 99.99=12287] 
2023-06-05 12:51:26:577 1140 sec: 64063475 operations; 56406.2 current ops/sec; [READ: Count=282166, Max=122431, Min=403, Avg=4735.34, 90=6859, 99=17791, 99.9=83071, 99.99=115647] [UPDATE: Count=282007, Max=28159, Min=335, Avg=2308.76, 90=3375, 99=5571, 99.9=8975, 99.99=10879] 
2023-06-05 12:51:36:577 1150 sec: 64630776 operations; 56730.1 current ops/sec; [READ: Count=284230, Max=39007, Min=441, Avg=4624.69, 90=6887, 99=16431, 99.9=27199, 99.99=30863] [UPDATE: Count=282894, Max=15143, Min=329, Avg=2311.21, 90=3383, 99=5527, 99.9=9183, 99.99=11047] 
2023-06-05 12:51:46:577 1160 sec: 65196225 operations; 56544.9 current ops/sec; [READ: Count=282553, Max=47839, Min=438, Avg=4548.67, 90=6807, 99=14735, 99.9=25071, 99.99=28927] [UPDATE: Count=282879, Max=26351, Min=324, Avg=2288.05, 90=3361, 99=5303, 99.9=8495, 99.99=16399] 
2023-06-05 12:51:56:577 1170 sec: 65758754 operations; 56252.9 current ops/sec; [READ: Count=281536, Max=36575, Min=428, Avg=4426.89, 90=6671, 99=13215, 99.9=22847, 99.99=26415] [UPDATE: Count=280928, Max=14839, Min=331, Avg=2252.23, 90=3325, 99=5071, 99.9=7987, 99.99=9943] 
2023-06-05 12:52:06:577 1180 sec: 66320476 operations; 56172.2 current ops/sec; [READ: Count=281304, Max=40991, Min=389, Avg=4489.23, 90=6735, 99=14855, 99.9=25871, 99.99=30463] [UPDATE: Count=280396, Max=25935, Min=332, Avg=2271.32, 90=3351, 99=5315, 99.9=8831, 99.99=15671] 
2023-06-05 12:52:16:577 1190 sec: 66882754 operations; 56227.8 current ops/sec; [READ: Count=281557, Max=143999, Min=443, Avg=4647.87, 90=6707, 99=15791, 99.9=82367, 99.99=87487] [UPDATE: Count=280692, Max=20463, Min=349, Avg=2258.04, 90=3331, 99=5263, 99.9=8455, 99.99=13271] 
2023-06-05 12:52:26:577 1200 sec: 67446698 operations; 56394.4 current ops/sec; [READ: Count=281741, Max=32239, Min=432, Avg=4338.56, 90=6607, 99=10543, 99.9=19151, 99.99=26607] [UPDATE: Count=281950, Max=17391, Min=346, Avg=2235.18, 90=3303, 99=4803, 99.9=6927, 99.99=10751] 
2023-06-05 12:52:36:577 1210 sec: 68009147 operations; 56244.9 current ops/sec; [READ: Count=280675, Max=29327, Min=437, Avg=4315.61, 90=6595, 99=10623, 99.9=16703, 99.99=25071] [UPDATE: Count=281992, Max=17711, Min=325, Avg=2215.33, 90=3279, 99=4739, 99.9=6843, 99.99=9319] 
2023-06-05 12:52:46:577 1220 sec: 68571722 operations; 56257.5 current ops/sec; [READ: Count=281943, Max=34239, Min=404, Avg=4363.77, 90=6691, 99=10967, 99.9=18015, 99.99=25951] [UPDATE: Count=280671, Max=17103, Min=336, Avg=2225.83, 90=3295, 99=4783, 99.9=6803, 99.99=8559] 
2023-06-05 12:52:56:577 1230 sec: 69133905 operations; 56218.3 current ops/sec; [READ: Count=280870, Max=221439, Min=406, Avg=4498.83, 90=6647, 99=11495, 99.9=55903, 99.99=172159] [UPDATE: Count=281439, Max=32671, Min=334, Avg=2232.08, 90=3307, 99=4871, 99.9=7155, 99.99=9663] 
2023-06-05 12:53:06:577 1240 sec: 69696192 operations; 56228.7 current ops/sec; [READ: Count=281490, Max=46911, Min=410, Avg=4424.16, 90=6747, 99=11415, 99.9=26991, 99.99=33535] [UPDATE: Count=280689, Max=17279, Min=336, Avg=2243.14, 90=3329, 99=4895, 99.9=7287, 99.99=9631] 
2023-06-05 12:53:16:577 1250 sec: 70259067 operations; 56287.5 current ops/sec; [READ: Count=281387, Max=32719, Min=409, Avg=4416.13, 90=6735, 99=11759, 99.9=19807, 99.99=27951] [UPDATE: Count=281474, Max=25887, Min=328, Avg=2251.64, 90=3337, 99=4991, 99.9=7615, 99.99=15039] 
2023-06-05 12:53:26:577 1260 sec: 70821401 operations; 56233.4 current ops/sec; [READ: Count=281113, Max=48479, Min=452, Avg=4410.83, 90=6699, 99=11383, 99.9=22815, 99.99=43455] [UPDATE: Count=281238, Max=13199, Min=360, Avg=2252.64, 90=3343, 99=4895, 99.9=7667, 99.99=9935] 
2023-06-05 12:53:36:577 1270 sec: 71378504 operations; 55710.3 current ops/sec; [READ: Count=278582, Max=246527, Min=423, Avg=4585.15, 90=6759, 99=14063, 99.9=45151, 99.99=165119] [UPDATE: Count=278601, Max=20911, Min=347, Avg=2250.5, 90=3349, 99=5171, 99.9=8207, 99.99=10335] 
2023-06-05 12:53:46:577 1280 sec: 71938058 operations; 55955.4 current ops/sec; [READ: Count=279435, Max=172159, Min=416, Avg=4740.9, 90=6647, 99=11879, 99.9=138239, 99.99=164479] [UPDATE: Count=280076, Max=17343, Min=312, Avg=2237.91, 90=3333, 99=4907, 99.9=8091, 99.99=10767] 
2023-06-05 12:53:56:577 1290 sec: 72507055 operations; 56899.7 current ops/sec; [READ: Count=284068, Max=137727, Min=445, Avg=4578.3, 90=6811, 99=13511, 99.9=49727, 99.99=86207] [UPDATE: Count=285044, Max=25119, Min=329, Avg=2261.32, 90=3363, 99=5179, 99.9=7987, 99.99=11447] 
2023-06-05 12:54:06:577 1300 sec: 73070354 operations; 56329.9 current ops/sec; [READ: Count=281349, Max=109759, Min=420, Avg=4553.85, 90=6687, 99=14807, 99.9=61439, 99.99=79039] [UPDATE: Count=281889, Max=18079, Min=335, Avg=2215.73, 90=3303, 99=5135, 99.9=8519, 99.99=11111] 
2023-06-05 12:54:16:577 1310 sec: 73623967 operations; 55361.3 current ops/sec; [READ: Count=277437, Max=244991, Min=385, Avg=4794.08, 90=6655, 99=20687, 99.9=160255, 99.99=167167] [UPDATE: Count=276220, Max=13951, Min=335, Avg=2197.5, 90=3279, 99=5587, 99.9=9399, 99.99=11295] 
2023-06-05 12:54:26:577 1320 sec: 74179941 operations; 55597.4 current ops/sec; [READ: Count=278006, Max=159615, Min=397, Avg=4918.59, 90=6951, 99=25311, 99.9=98047, 99.99=135551] [UPDATE: Count=278127, Max=13375, Min=319, Avg=2223.56, 90=3321, 99=6063, 99.9=9375, 99.99=11295] 
2023-06-05 12:54:36:577 1330 sec: 74744473 operations; 56453.2 current ops/sec; [READ: Count=282005, Max=86463, Min=436, Avg=4808.28, 90=7099, 99=23711, 99.9=57407, 99.99=65183] [UPDATE: Count=282467, Max=15335, Min=347, Avg=2239.07, 90=3345, 99=5939, 99.9=9079, 99.99=11071] 
2023-06-05 12:54:46:577 1340 sec: 75309457 operations; 56498.4 current ops/sec; [READ: Count=282259, Max=157183, Min=376, Avg=4787, 90=7051, 99=21535, 99.9=95039, 99.99=105599] [UPDATE: Count=282705, Max=18511, Min=331, Avg=2241.47, 90=3359, 99=5687, 99.9=8655, 99.99=10959] 
2023-06-05 12:54:56:577 1350 sec: 75878258 operations; 56880.1 current ops/sec; [READ: Count=284009, Max=128639, Min=384, Avg=4664.86, 90=7071, 99=15439, 99.9=40479, 99.99=101439] [UPDATE: Count=284687, Max=21487, Min=327, Avg=2258.47, 90=3371, 99=5315, 99.9=8031, 99.99=10383] 
2023-06-05 12:55:06:577 1360 sec: 76444991 operations; 56673.3 current ops/sec; [READ: Count=284058, Max=54655, Min=412, Avg=4571.79, 90=6999, 99=13711, 99.9=27871, 99.99=34847] [UPDATE: Count=282629, Max=19423, Min=335, Avg=2261.49, 90=3361, 99=5171, 99.9=7827, 99.99=11047] 
2023-06-05 12:55:16:577 1370 sec: 76991325 operations; 54633.4 current ops/sec; [READ: Count=272863, Max=131199, Min=373, Avg=4975.59, 90=7231, 99=24191, 99.9=81535, 99.99=89727] [UPDATE: Count=273306, Max=18767, Min=316, Avg=2292.79, 90=3429, 99=6099, 99.9=8983, 99.99=11007] 
2023-06-05 12:55:26:577 1380 sec: 77556735 operations; 56541 current ops/sec; [READ: Count=282198, Max=210943, Min=382, Avg=4777.69, 90=6999, 99=18847, 99.9=70463, 99.99=87999] [UPDATE: Count=283544, Max=19327, Min=320, Avg=2263.77, 90=3387, 99=5543, 99.9=8943, 99.99=11223] 
2023-06-05 12:55:36:577 1390 sec: 78077346 operations; 52061.1 current ops/sec; [READ: Count=260487, Max=544767, Min=400, Avg=5459.87, 90=6223, 99=18447, 99.9=348159, 99.99=419327] [UPDATE: Count=260032, Max=39807, Min=315, Avg=2097.37, 90=3185, 99=5159, 99.9=8615, 99.99=33087] 
2023-06-05 12:55:46:577 1400 sec: 78611026 operations; 53368 current ops/sec; [READ: Count=266836, Max=413183, Min=375, Avg=5359.82, 90=6375, 99=18783, 99.9=369151, 99.99=397823] [UPDATE: Count=266953, Max=16559, Min=327, Avg=2103.45, 90=3207, 99=5195, 99.9=8519, 99.99=10647] 
2023-06-05 12:55:56:577 1410 sec: 79156909 operations; 54588.3 current ops/sec; [READ: Count=272710, Max=464383, Min=420, Avg=5176.79, 90=6615, 99=15543, 99.9=381951, 99.99=452095] [UPDATE: Count=273329, Max=16671, Min=321, Avg=2144.83, 90=3259, 99=5067, 99.9=8131, 99.99=10319] 
2023-06-05 12:56:06:577 1420 sec: 79726332 operations; 56942.3 current ops/sec; [READ: Count=284633, Max=94207, Min=409, Avg=4765.94, 90=7299, 99=20095, 99.9=49087, 99.99=76223] [UPDATE: Count=284596, Max=19711, Min=334, Avg=2253.42, 90=3403, 99=5679, 99.9=8631, 99.99=11359] 
2023-06-05 12:56:16:577 1430 sec: 80293597 operations; 56726.5 current ops/sec; [READ: Count=283420, Max=176127, Min=440, Avg=4779.9, 90=7263, 99=19535, 99.9=55743, 99.99=103039] [UPDATE: Count=283791, Max=15199, Min=334, Avg=2258.78, 90=3411, 99=5651, 99.9=8599, 99.99=10511] 
2023-06-05 12:56:26:577 1440 sec: 80858291 operations; 56469.4 current ops/sec; [READ: Count=282131, Max=189823, Min=411, Avg=4852.46, 90=7119, 99=22591, 99.9=93055, 99.99=138751] [UPDATE: Count=282803, Max=14799, Min=347, Avg=2228.23, 90=3377, 99=5523, 99.9=8163, 99.99=9815] 
2023-06-05 12:56:36:577 1450 sec: 81429192 operations; 57090.1 current ops/sec; [READ: Count=285119, Max=98815, Min=406, Avg=4747.51, 90=7291, 99=17439, 99.9=46591, 99.99=83775] [UPDATE: Count=284907, Max=23583, Min=355, Avg=2254.69, 90=3405, 99=5463, 99.9=8735, 99.99=16247] 
2023-06-05 12:56:46:577 1460 sec: 81994046 operations; 56485.4 current ops/sec; [READ: Count=282247, Max=111167, Min=416, Avg=4813.44, 90=7571, 99=18143, 99.9=34015, 99.99=60255] [UPDATE: Count=283288, Max=22575, Min=328, Avg=2245.29, 90=3411, 99=5531, 99.9=8175, 99.99=12655] 
2023-06-05 12:56:56:577 1470 sec: 82558931 operations; 56488.5 current ops/sec; [READ: Count=281819, Max=279551, Min=409, Avg=4846.96, 90=7079, 99=21727, 99.9=97919, 99.99=153727] [UPDATE: Count=282583, Max=21231, Min=342, Avg=2221.55, 90=3377, 99=5543, 99.9=8559, 99.99=13735] 
2023-06-05 12:57:06:577 1480 sec: 83117186 operations; 55825.5 current ops/sec; [READ: Count=278982, Max=278015, Min=428, Avg=4959.56, 90=6839, 99=17407, 99.9=162559, 99.99=198783] [UPDATE: Count=279747, Max=18351, Min=302, Avg=2188.86, 90=3321, 99=5195, 99.9=7847, 99.99=10847] 
2023-06-05 12:57:16:577 1490 sec: 83680277 operations; 56309.1 current ops/sec; [READ: Count=281914, Max=174079, Min=392, Avg=4845.96, 90=7071, 99=16047, 99.9=132351, 99.99=144127] [UPDATE: Count=281295, Max=11439, Min=331, Avg=2234.68, 90=3379, 99=5243, 99.9=7451, 99.99=9159] 
2023-06-05 12:57:26:577 1500 sec: 84251205 operations; 57092.8 current ops/sec; [READ: Count=285316, Max=115071, Min=405, Avg=4719.64, 90=7155, 99=14647, 99.9=59391, 99.99=93503] [UPDATE: Count=285612, Max=22479, Min=334, Avg=2264.98, 90=3395, 99=5203, 99.9=7679, 99.99=14967] 
2023-06-05 12:57:36:577 1510 sec: 84813713 operations; 56250.8 current ops/sec; [READ: Count=280977, Max=332031, Min=399, Avg=4820.16, 90=7075, 99=18319, 99.9=76415, 99.99=200831] [UPDATE: Count=281445, Max=24895, Min=312, Avg=2271.28, 90=3393, 99=5371, 99.9=8359, 99.99=10487] 
2023-06-05 12:57:46:577 1520 sec: 85375793 operations; 56208 current ops/sec; [READ: Count=280368, Max=132607, Min=402, Avg=4844.72, 90=7139, 99=21199, 99.9=80831, 99.99=92287] [UPDATE: Count=281663, Max=17919, Min=329, Avg=2262.33, 90=3389, 99=5699, 99.9=8815, 99.99=10815] 
2023-06-05 12:57:56:577 1530 sec: 85939720 operations; 56392.7 current ops/sec; [READ: Count=282168, Max=95551, Min=402, Avg=4811.65, 90=7199, 99=20303, 99.9=67199, 99.99=75071] [UPDATE: Count=281785, Max=19551, Min=316, Avg=2267.42, 90=3383, 99=5719, 99.9=8727, 99.99=10823] 
2023-06-05 12:58:06:577 1540 sec: 86498088 operations; 55836.8 current ops/sec; [READ: Count=279706, Max=89407, Min=409, Avg=4859.36, 90=7391, 99=21887, 99.9=42335, 99.99=55615] [UPDATE: Count=278617, Max=18639, Min=314, Avg=2291.66, 90=3433, 99=5927, 99.9=8775, 99.99=10711] 
2023-06-05 12:58:16:577 1550 sec: 87054901 operations; 55681.3 current ops/sec; [READ: Count=278677, Max=130111, Min=416, Avg=4903.95, 90=7095, 99=24607, 99.9=110463, 99.99=118975] [UPDATE: Count=278130, Max=14935, Min=312, Avg=2267.5, 90=3393, 99=5675, 99.9=8791, 99.99=10759] 
2023-06-05 12:58:26:577 1560 sec: 87613819 operations; 55891.8 current ops/sec; [READ: Count=279372, Max=104767, Min=398, Avg=4874.67, 90=7191, 99=24479, 99.9=59295, 99.99=97791] [UPDATE: Count=279492, Max=13399, Min=340, Avg=2279.92, 90=3411, 99=6051, 99.9=9263, 99.99=11351] 
2023-06-05 12:58:36:577 1570 sec: 88152645 operations; 53882.6 current ops/sec; [READ: Count=269585, Max=212095, Min=408, Avg=5174.81, 90=7107, 99=27503, 99.9=132607, 99.99=144383] [UPDATE: Count=269251, Max=13879, Min=299, Avg=2243.45, 90=3383, 99=6351, 99.9=9431, 99.99=11287] 
2023-06-05 12:58:46:576 1580 sec: 88700859 operations; 54821.4 current ops/sec; [READ: Count=273574, Max=103999, Min=386, Avg=5009.25, 90=7371, 99=25903, 99.9=58015, 99.99=68543] [UPDATE: Count=274500, Max=18319, Min=338, Avg=2289.32, 90=3437, 99=6555, 99.9=9431, 99.99=11503] 
2023-06-05 12:58:56:577 1590 sec: 89247061 operations; 54620.2 current ops/sec; [READ: Count=272696, Max=96127, Min=424, Avg=5014.04, 90=7399, 99=24959, 99.9=49375, 99.99=68287] [UPDATE: Count=273624, Max=14279, Min=326, Avg=2309.28, 90=3455, 99=6539, 99.9=9335, 99.99=11215] 
2023-06-05 12:59:06:577 1600 sec: 89776884 operations; 52982.3 current ops/sec; [READ: Count=265078, Max=413183, Min=372, Avg=5289.43, 90=6751, 99=26719, 99.9=161791, 99.99=254847] [UPDATE: Count=264747, Max=17535, Min=325, Avg=2232.98, 90=3341, 99=6223, 99.9=9111, 99.99=11031] 
2023-06-05 12:59:16:577 1610 sec: 90293833 operations; 51694.9 current ops/sec; [READ: Count=258646, Max=584703, Min=412, Avg=5577.83, 90=6235, 99=19295, 99.9=324863, 99.99=416255] [UPDATE: Count=258367, Max=13383, Min=300, Avg=2161.1, 90=3227, 99=5251, 99.9=8175, 99.99=10079] 
2023-06-05 12:59:26:577 1620 sec: 90845525 operations; 55169.2 current ops/sec; [READ: Count=275750, Max=368383, Min=400, Avg=5013.94, 90=6727, 99=15031, 99.9=274175, 99.99=328447] [UPDATE: Count=276016, Max=12535, Min=344, Avg=2251.47, 90=3339, 99=5127, 99.9=7731, 99.99=9831] 
2023-06-05 12:59:36:577 1630 sec: 91415026 operations; 56950.1 current ops/sec; [READ: Count=285059, Max=86143, Min=425, Avg=4702.02, 90=7055, 99=13951, 99.9=50655, 99.99=73279] [UPDATE: Count=284479, Max=12279, Min=339, Avg=2316.43, 90=3411, 99=5239, 99.9=8055, 99.99=10047] 
2023-06-05 12:59:46:577 1640 sec: 91984237 operations; 56921.1 current ops/sec; [READ: Count=284302, Max=113599, Min=456, Avg=4704.73, 90=7067, 99=13871, 99.9=38271, 99.99=97023] [UPDATE: Count=284778, Max=17071, Min=339, Avg=2321.71, 90=3419, 99=5307, 99.9=8375, 99.99=10575] 
2023-06-05 12:59:56:577 1650 sec: 92551228 operations; 56699.1 current ops/sec; [READ: Count=283079, Max=115199, Min=419, Avg=4752.81, 90=6983, 99=14855, 99.9=80383, 99.99=86783] [UPDATE: Count=283886, Max=21343, Min=340, Avg=2301.85, 90=3391, 99=5251, 99.9=8415, 99.99=10695] 
2023-06-05 13:00:06:577 1660 sec: 93120556 operations; 56932.8 current ops/sec; [READ: Count=284957, Max=76671, Min=466, Avg=4688.74, 90=7031, 99=13951, 99.9=28719, 99.99=69823] [UPDATE: Count=284322, Max=17807, Min=304, Avg=2332.61, 90=3427, 99=5171, 99.9=7651, 99.99=9551] 
2023-06-05 13:00:16:577 1670 sec: 93672210 operations; 55165.4 current ops/sec; [READ: Count=275741, Max=327423, Min=455, Avg=4938.73, 90=6891, 99=17535, 99.9=103039, 99.99=272895] [UPDATE: Count=276126, Max=11759, Min=328, Avg=2310.52, 90=3387, 99=5323, 99.9=7935, 99.99=9751] 
2023-06-05 13:00:26:577 1680 sec: 94236862 operations; 56465.2 current ops/sec; [READ: Count=282728, Max=34271, Min=431, Avg=4717.59, 90=7135, 99=13319, 99.9=21631, 99.99=26111] [UPDATE: Count=281438, Max=16799, Min=348, Avg=2362.57, 90=3443, 99=5219, 99.9=7675, 99.99=11399] 
2023-06-05 13:00:36:577 1690 sec: 94777886 operations; 54102.4 current ops/sec; [READ: Count=271312, Max=307967, Min=413, Avg=5047.5, 90=7123, 99=18959, 99.9=152319, 99.99=190079] [UPDATE: Count=270169, Max=18783, Min=335, Avg=2332.23, 90=3415, 99=5735, 99.9=8783, 99.99=11399] 
2023-06-05 13:00:46:577 1700 sec: 95328527 operations; 55064.1 current ops/sec; [READ: Count=274977, Max=127423, Min=462, Avg=4917.09, 90=7223, 99=19823, 99.9=51871, 99.99=105471] [UPDATE: Count=275720, Max=19279, Min=342, Avg=2346.85, 90=3451, 99=5779, 99.9=8951, 99.99=11647] 
2023-06-05 13:00:56:577 1710 sec: 95867879 operations; 53935.2 current ops/sec; [READ: Count=269411, Max=216063, Min=406, Avg=5120.95, 90=6935, 99=28559, 99.9=135039, 99.99=192895] [UPDATE: Count=269836, Max=14359, Min=340, Avg=2294.36, 90=3387, 99=5859, 99.9=9359, 99.99=11831] 
2023-06-05 13:01:06:577 1720 sec: 96415343 operations; 54746.4 current ops/sec; [READ: Count=273354, Max=175999, Min=425, Avg=4993.14, 90=6935, 99=19903, 99.9=98495, 99.99=134271] [UPDATE: Count=274054, Max=17119, Min=332, Avg=2314.11, 90=3393, 99=5487, 99.9=8535, 99.99=10935] 
2023-06-05 13:01:16:577 1730 sec: 96956929 operations; 54158.6 current ops/sec; [READ: Count=270644, Max=162559, Min=398, Avg=5062.94, 90=7043, 99=21855, 99.9=93503, 99.99=146175] [UPDATE: Count=270919, Max=18127, Min=354, Avg=2320.93, 90=3405, 99=5767, 99.9=8639, 99.99=10503] 
2023-06-05 13:01:26:577 1740 sec: 97497923 operations; 54099.4 current ops/sec; [READ: Count=270245, Max=168063, Min=419, Avg=5072.64, 90=7051, 99=23119, 99.9=88063, 99.99=142719] [UPDATE: Count=270809, Max=14591, Min=326, Avg=2320.71, 90=3419, 99=5727, 99.9=8423, 99.99=10415] 
2023-06-05 13:01:36:577 1750 sec: 98064435 operations; 56651.2 current ops/sec; [READ: Count=283052, Max=90943, Min=419, Avg=4706.77, 90=7119, 99=12535, 99.9=30815, 99.99=71295] [UPDATE: Count=283358, Max=19247, Min=356, Avg=2354.21, 90=3455, 99=5159, 99.9=7559, 99.99=9943] 
2023-06-05 13:01:46:577 1760 sec: 98629986 operations; 56555.1 current ops/sec; [READ: Count=282305, Max=49311, Min=418, Avg=4717.63, 90=7031, 99=14151, 99.9=33087, 99.99=38847] [UPDATE: Count=282719, Max=26623, Min=355, Avg=2362.6, 90=3449, 99=5343, 99.9=9535, 99.99=17263] 
2023-06-05 13:01:56:577 1770 sec: 99189288 operations; 55930.2 current ops/sec; [READ: Count=279664, Max=43231, Min=471, Avg=4770.24, 90=7087, 99=16703, 99.9=29839, 99.99=35615] [UPDATE: Count=280162, Max=28831, Min=364, Avg=2371.86, 90=3449, 99=5591, 99.9=8911, 99.99=11687] 
2023-06-05 13:02:06:577 1780 sec: 99739810 operations; 55052.2 current ops/sec; [READ: Count=274961, Max=122431, Min=450, Avg=4875.57, 90=7051, 99=18639, 99.9=72639, 99.99=100863] [UPDATE: Count=275743, Max=87935, Min=323, Avg=2390.75, 90=3447, 99=5659, 99.9=9079, 99.99=85759] 
2023-06-05 13:02:16:577 1790 sec: 100283972 operations; 54416.2 current ops/sec; [READ: Count=271613, Max=312063, Min=403, Avg=5030.63, 90=6779, 99=17791, 99.9=161279, 99.99=214015] [UPDATE: Count=272461, Max=14487, Min=326, Avg=2315.26, 90=3377, 99=5283, 99.9=8171, 99.99=10175] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:26:577 1800 sec: 100959389 operations; 67541.7 current ops/sec; [READ: Count=337429, Max=179455, Min=387, Avg=3904.19, 90=5707, 99=8623, 99.9=129919, 99.99=166655] [UPDATE: Count=337680, Max=14663, Min=291, Avg=2019.9, 90=3093, 99=4347, 99.9=6915, 99.99=8895] 
Still waiting for thread Thread-80 to complete. Workload status: true
2023-06-05 13:02:28:823 1802 sec: 100960940 operations; 690.25 current ops/sec; [READ: Count=788, Max=9135, Min=623, Avg=3152.33, 90=5035, 99=6219, 99.9=7431, 99.99=9135] [CLEANUP: Count=200, Max=2222079, Min=0, Avg=11106.92, 90=2, 99=37, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802246
[OVERALL], Throughput(ops/sec), 56019.51120990142
[TOTAL_GCS_PS_Scavenge], Count, 6839
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17541
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.973285555911901
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 158
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008766838711252516
[TOTAL_GCs], Count, 6842
[TOTAL_GC_TIME], Time(ms), 17699
[TOTAL_GC_TIME_%], Time(%), 0.9820523946231535
[READ], Operations, 50481962
[READ], AverageLatency(us), 4505.224641764122
[READ], MinLatency(us), 345
[READ], MaxLatency(us), 584703
[READ], 95thPercentileLatency(us), 7907
[READ], 99thPercentileLatency(us), 16071
[READ], Return=OK, 50481962
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11106.915
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 37
[UPDATE], Operations, 50478978
[UPDATE], AverageLatency(us), 2182.2426562201795
[UPDATE], MinLatency(us), 291
[UPDATE], MaxLatency(us), 209663
[UPDATE], 95thPercentileLatency(us), 3693
[UPDATE], 99thPercentileLatency(us), 5283
[UPDATE], Return=OK, 50478978
