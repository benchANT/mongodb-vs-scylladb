bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:27:183 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-06-05 12:32:37:168 10 sec: 503796 operations; 50379.6 current ops/sec; [READ: Count=252140, Max=89087, Min=400, Avg=3789.22, 90=5915, 99=18127, 99.9=23455, 99.99=82111] [UPDATE: Count=253353, Max=88063, Min=322, Avg=1960.86, 90=2885, 99=6819, 99.9=16751, 99.99=80767] 
2023-06-05 12:32:47:168 20 sec: 1066194 operations; 56239.8 current ops/sec; [READ: Count=280826, Max=39679, Min=396, Avg=3703.59, 90=5711, 99=17359, 99.9=24815, 99.99=33983] [UPDATE: Count=281040, Max=16575, Min=300, Avg=1866.93, 90=2829, 99=5755, 99.9=7959, 99.99=9743] 
2023-06-05 12:32:57:168 30 sec: 1628719 operations; 56252.5 current ops/sec; [READ: Count=281705, Max=46047, Min=388, Avg=3836.99, 90=5931, 99=17999, 99.9=32207, 99.99=35711] [UPDATE: Count=280876, Max=26303, Min=321, Avg=1904.78, 90=2891, 99=5879, 99.9=8043, 99.99=9991] 
2023-06-05 12:33:07:168 40 sec: 2191124 operations; 56240.5 current ops/sec; [READ: Count=281277, Max=45791, Min=382, Avg=3908.81, 90=6075, 99=18159, 99.9=29023, 99.99=32991] [UPDATE: Count=281102, Max=11751, Min=317, Avg=1937.36, 90=2941, 99=5975, 99.9=8035, 99.99=9303] 
2023-06-05 12:33:17:168 50 sec: 2750857 operations; 55973.3 current ops/sec; [READ: Count=279886, Max=147327, Min=415, Avg=4513.11, 90=6687, 99=27759, 99.9=80959, 99.99=92863] [UPDATE: Count=280074, Max=13215, Min=326, Avg=2003.94, 90=3067, 99=6339, 99.9=8415, 99.99=9999] 
2023-06-05 12:33:27:168 60 sec: 3315980 operations; 56512.3 current ops/sec; [READ: Count=282766, Max=84543, Min=402, Avg=4288.14, 90=6551, 99=21119, 99.9=59775, 99.99=72063] [UPDATE: Count=282278, Max=23711, Min=306, Avg=2026.29, 90=3089, 99=6147, 99.9=8215, 99.99=9975] 
2023-06-05 12:33:37:168 70 sec: 3878431 operations; 56245.1 current ops/sec; [READ: Count=281644, Max=58367, Min=408, Avg=4163.42, 90=6579, 99=18895, 99.9=26655, 99.99=33151] [UPDATE: Count=280635, Max=12327, Min=308, Avg=2038.79, 90=3127, 99=6139, 99.9=8163, 99.99=9679] 
2023-06-05 12:33:47:168 80 sec: 4440829 operations; 56239.8 current ops/sec; [READ: Count=281420, Max=78015, Min=401, Avg=4216.91, 90=6591, 99=18991, 99.9=37951, 99.99=45567] [UPDATE: Count=280543, Max=21215, Min=314, Avg=2047.12, 90=3141, 99=6107, 99.9=8271, 99.99=12615] 
2023-06-05 12:33:57:168 90 sec: 5003425 operations; 56259.6 current ops/sec; [READ: Count=280849, Max=50559, Min=390, Avg=4187.47, 90=6663, 99=19103, 99.9=29135, 99.99=35103] [UPDATE: Count=282117, Max=22943, Min=315, Avg=2033.27, 90=3135, 99=6035, 99.9=8231, 99.99=12375] 
2023-06-05 12:34:07:168 100 sec: 5563166 operations; 55974.1 current ops/sec; [READ: Count=280126, Max=147967, Min=360, Avg=4339.89, 90=6767, 99=22079, 99.9=39551, 99.99=98815] [UPDATE: Count=279675, Max=13487, Min=323, Avg=2040.68, 90=3121, 99=6523, 99.9=8847, 99.99=10703] 
2023-06-05 12:34:17:168 110 sec: 6125454 operations; 56228.8 current ops/sec; [READ: Count=281948, Max=155007, Min=370, Avg=4657.87, 90=6571, 99=26751, 99.9=98559, 99.99=115007] [UPDATE: Count=280341, Max=14023, Min=323, Avg=2036.62, 90=3097, 99=6459, 99.9=8871, 99.99=10719] 
2023-06-05 12:34:27:168 120 sec: 6690812 operations; 56535.8 current ops/sec; [READ: Count=282918, Max=89343, Min=376, Avg=4402.29, 90=6779, 99=22543, 99.9=33855, 99.99=80703] [UPDATE: Count=282178, Max=20815, Min=321, Avg=2078.48, 90=3135, 99=6739, 99.9=9319, 99.99=11583] 
2023-06-05 12:34:37:168 130 sec: 7237685 operations; 54687.3 current ops/sec; [READ: Count=273222, Max=299007, Min=395, Avg=4900.46, 90=6947, 99=22015, 99.9=161535, 99.99=271359] [UPDATE: Count=273865, Max=20255, Min=304, Avg=2058.19, 90=3107, 99=7079, 99.9=9447, 99.99=11695] 
2023-06-05 12:34:47:168 140 sec: 7795880 operations; 55819.5 current ops/sec; [READ: Count=279137, Max=251007, Min=397, Avg=4991.73, 90=6751, 99=25567, 99.9=161919, 99.99=219007] [UPDATE: Count=278392, Max=33023, Min=318, Avg=2068.28, 90=3113, 99=7055, 99.9=10007, 99.99=16863] 
2023-06-05 12:34:57:168 150 sec: 8350568 operations; 55468.8 current ops/sec; [READ: Count=277395, Max=347391, Min=387, Avg=5064.89, 90=6403, 99=23167, 99.9=190207, 99.99=286207] [UPDATE: Count=278161, Max=19263, Min=299, Avg=2028.14, 90=3067, 99=6695, 99.9=9367, 99.99=12175] 
2023-06-05 12:35:07:168 160 sec: 8920223 operations; 56965.5 current ops/sec; [READ: Count=284616, Max=224639, Min=377, Avg=4771.73, 90=6511, 99=19999, 99.9=189951, 99.99=195199] [UPDATE: Count=284912, Max=13279, Min=296, Avg=2080.12, 90=3147, 99=6055, 99.9=8327, 99.99=10351] 
2023-06-05 12:35:17:168 170 sec: 9465454 operations; 54523.1 current ops/sec; [READ: Count=272664, Max=366591, Min=375, Avg=5180.48, 90=6323, 99=28527, 99.9=224383, 99.99=284927] [UPDATE: Count=272799, Max=14775, Min=306, Avg=2053.27, 90=3135, 99=5975, 99.9=8231, 99.99=9863] 
2023-06-05 12:35:27:168 180 sec: 10049768 operations; 58431.4 current ops/sec; [READ: Count=291507, Max=223103, Min=408, Avg=4571.28, 90=6423, 99=21583, 99.9=135423, 99.99=185983] [UPDATE: Count=292527, Max=17247, Min=324, Avg=2124.25, 90=3167, 99=5523, 99.9=8391, 99.99=10551] 
2023-06-05 12:35:37:168 190 sec: 10616920 operations; 56715.2 current ops/sec; [READ: Count=283734, Max=300287, Min=354, Avg=4605.1, 90=6079, 99=23727, 99.9=189055, 99.99=200575] [UPDATE: Count=283582, Max=13439, Min=309, Avg=2062.53, 90=3099, 99=5355, 99.9=8671, 99.99=10559] 
2023-06-05 12:35:47:168 200 sec: 11185756 operations; 56883.6 current ops/sec; [READ: Count=284837, Max=175487, Min=386, Avg=4558.95, 90=6179, 99=20991, 99.9=160895, 99.99=167423] [UPDATE: Count=283884, Max=15247, Min=312, Avg=2083.66, 90=3119, 99=5467, 99.9=8527, 99.99=10743] 
2023-06-05 12:35:57:168 210 sec: 11753666 operations; 56791 current ops/sec; [READ: Count=283716, Max=140415, Min=400, Avg=4202.47, 90=6127, 99=19103, 99.9=77631, 99.99=117887] [UPDATE: Count=284036, Max=25567, Min=319, Avg=2070.74, 90=3095, 99=5403, 99.9=9007, 99.99=15047] 
2023-06-05 12:36:07:168 220 sec: 12316232 operations; 56256.6 current ops/sec; [READ: Count=281014, Max=134015, Min=381, Avg=4104.28, 90=5919, 99=19263, 99.9=56479, 99.99=84735] [UPDATE: Count=281616, Max=12975, Min=308, Avg=2025.19, 90=3039, 99=5423, 99.9=8263, 99.99=10223] 
2023-06-05 12:36:17:168 230 sec: 12878915 operations; 56268.3 current ops/sec; [READ: Count=281041, Max=52031, Min=391, Avg=3747.7, 90=5599, 99=12911, 99.9=28223, 99.99=43487] [UPDATE: Count=281546, Max=13599, Min=309, Avg=1959.9, 90=2963, 99=4703, 99.9=7475, 99.99=9319] 
2023-06-05 12:36:27:168 240 sec: 13441402 operations; 56248.7 current ops/sec; [READ: Count=280959, Max=24847, Min=385, Avg=3504.73, 90=5363, 99=7695, 99.9=11599, 99.99=19023] [UPDATE: Count=281383, Max=8631, Min=304, Avg=1915.6, 90=2903, 99=4017, 99.9=5987, 99.99=7231] 
2023-06-05 12:36:37:168 250 sec: 14003926 operations; 56252.4 current ops/sec; [READ: Count=280961, Max=39391, Min=402, Avg=3563.31, 90=5463, 99=7947, 99.9=12551, 99.99=20527] [UPDATE: Count=281528, Max=11967, Min=293, Avg=1940.69, 90=2959, 99=4093, 99.9=6287, 99.99=8887] 
2023-06-05 12:36:47:168 260 sec: 14566417 operations; 56249.1 current ops/sec; [READ: Count=281454, Max=27647, Min=375, Avg=3546.86, 90=5463, 99=8143, 99.9=13199, 99.99=20879] [UPDATE: Count=281164, Max=18079, Min=321, Avg=1933.26, 90=2957, 99=4199, 99.9=6599, 99.99=9151] 
2023-06-05 12:36:57:168 270 sec: 15128848 operations; 56243.1 current ops/sec; [READ: Count=281088, Max=33151, Min=390, Avg=3594.03, 90=5567, 99=8463, 99.9=13831, 99.99=24559] [UPDATE: Count=281299, Max=22559, Min=318, Avg=1953.23, 90=2997, 99=4279, 99.9=6487, 99.99=11367] 
2023-06-05 12:37:07:168 280 sec: 15691383 operations; 56253.5 current ops/sec; [READ: Count=281508, Max=30863, Min=355, Avg=3523.73, 90=5459, 99=8303, 99.9=15095, 99.99=22863] [UPDATE: Count=281018, Max=17631, Min=323, Avg=1913.3, 90=2945, 99=4223, 99.9=6555, 99.99=8575] 
2023-06-05 12:37:17:168 290 sec: 16253902 operations; 56251.9 current ops/sec; [READ: Count=280657, Max=80511, Min=375, Avg=3571.66, 90=5499, 99=8615, 99.9=19295, 99.99=41695] [UPDATE: Count=281786, Max=11271, Min=316, Avg=1928.84, 90=2961, 99=4347, 99.9=6587, 99.99=9015] 
2023-06-05 12:37:27:168 300 sec: 16816416 operations; 56251.4 current ops/sec; [READ: Count=280894, Max=24063, Min=360, Avg=3491.92, 90=5391, 99=8067, 99.9=11351, 99.99=17471] [UPDATE: Count=281681, Max=10047, Min=326, Avg=1899.68, 90=2907, 99=4159, 99.9=6231, 99.99=8231] 
2023-06-05 12:37:37:168 310 sec: 17378920 operations; 56250.4 current ops/sec; [READ: Count=281355, Max=84991, Min=416, Avg=3527.47, 90=5379, 99=8927, 99.9=24751, 99.99=47039] [UPDATE: Count=281212, Max=12415, Min=316, Avg=1889.5, 90=2891, 99=4295, 99.9=6943, 99.99=8911] 
2023-06-05 12:37:47:168 320 sec: 17941416 operations; 56249.6 current ops/sec; [READ: Count=281739, Max=30751, Min=336, Avg=3435.37, 90=5279, 99=8791, 99.9=19407, 99.99=23567] [UPDATE: Count=280816, Max=16863, Min=294, Avg=1856, 90=2823, 99=4295, 99.9=7563, 99.99=10319] 
2023-06-05 12:37:57:168 330 sec: 18503808 operations; 56239.2 current ops/sec; [READ: Count=281139, Max=29647, Min=366, Avg=3410.92, 90=5235, 99=9399, 99.9=21343, 99.99=25071] [UPDATE: Count=281323, Max=17359, Min=310, Avg=1836.34, 90=2789, 99=4415, 99.9=8051, 99.99=10855] 
2023-06-05 12:38:07:168 340 sec: 19066427 operations; 56261.9 current ops/sec; [READ: Count=281980, Max=30767, Min=359, Avg=3410.09, 90=5223, 99=8967, 99.9=21343, 99.99=25039] [UPDATE: Count=280522, Max=12439, Min=309, Avg=1838.96, 90=2781, 99=4307, 99.9=7547, 99.99=9855] 
2023-06-05 12:38:17:168 350 sec: 19628932 operations; 56250.5 current ops/sec; [READ: Count=280757, Max=27215, Min=391, Avg=3360.41, 90=5123, 99=8099, 99.9=19471, 99.99=22783] [UPDATE: Count=281664, Max=12031, Min=313, Avg=1828.54, 90=2761, 99=4155, 99.9=6803, 99.99=9183] 
2023-06-05 12:38:27:168 360 sec: 20191437 operations; 56250.5 current ops/sec; [READ: Count=281392, Max=15367, Min=367, Avg=3297.61, 90=5063, 99=7351, 99.9=9615, 99.99=11935] [UPDATE: Count=281061, Max=9079, Min=313, Avg=1817.29, 90=2753, 99=3905, 99.9=5919, 99.99=7151] 
2023-06-05 12:38:37:168 370 sec: 20753928 operations; 56249.1 current ops/sec; [READ: Count=281604, Max=47295, Min=396, Avg=3301.4, 90=5071, 99=7555, 99.9=11759, 99.99=25279] [UPDATE: Count=280925, Max=10727, Min=291, Avg=1813.05, 90=2755, 99=3967, 99.9=6211, 99.99=8247] 
2023-06-05 12:38:47:168 380 sec: 21316432 operations; 56250.4 current ops/sec; [READ: Count=281288, Max=25407, Min=386, Avg=3313.46, 90=5107, 99=7575, 99.9=10111, 99.99=14207] [UPDATE: Count=281207, Max=17455, Min=305, Avg=1820.27, 90=2771, 99=3981, 99.9=6419, 99.99=8879] 
2023-06-05 12:38:57:168 390 sec: 21878912 operations; 56248 current ops/sec; [READ: Count=280459, Max=24783, Min=378, Avg=3376.58, 90=5203, 99=7671, 99.9=10367, 99.99=15511] [UPDATE: Count=282026, Max=18095, Min=318, Avg=1845.74, 90=2815, 99=3985, 99.9=6223, 99.99=8911] 
2023-06-05 12:39:07:168 400 sec: 22441418 operations; 56250.6 current ops/sec; [READ: Count=281495, Max=25199, Min=378, Avg=3492.38, 90=5379, 99=8035, 99.9=13039, 99.99=20527] [UPDATE: Count=281017, Max=23359, Min=299, Avg=1897.2, 90=2909, 99=4179, 99.9=6267, 99.99=8351] 
2023-06-05 12:39:17:168 410 sec: 23003910 operations; 56249.2 current ops/sec; [READ: Count=281657, Max=25359, Min=360, Avg=3513.93, 90=5435, 99=8007, 99.9=11215, 99.99=19055] [UPDATE: Count=280894, Max=9719, Min=331, Avg=1905.38, 90=2917, 99=4127, 99.9=6291, 99.99=7803] 
2023-06-05 12:39:27:168 420 sec: 23566406 operations; 56249.6 current ops/sec; [READ: Count=281343, Max=21471, Min=391, Avg=3592.27, 90=5539, 99=8223, 99.9=11375, 99.99=16511] [UPDATE: Count=280386, Max=20975, Min=292, Avg=1935.81, 90=2961, 99=4239, 99.9=6227, 99.99=7683] 
2023-06-05 12:39:37:168 430 sec: 24128731 operations; 56232.5 current ops/sec; [READ: Count=281098, Max=301055, Min=372, Avg=3736.56, 90=5611, 99=8351, 99.9=12343, 99.99=296703] [UPDATE: Count=282220, Max=299775, Min=287, Avg=2037.67, 90=2991, 99=4299, 99.9=6591, 99.99=295167] 
2023-06-05 12:39:47:168 440 sec: 24691396 operations; 56266.5 current ops/sec; [READ: Count=281695, Max=24847, Min=394, Avg=3588, 90=5555, 99=8119, 99.9=11055, 99.99=16511] [UPDATE: Count=280748, Max=16375, Min=304, Avg=1940.19, 90=2977, 99=4179, 99.9=6215, 99.99=8087] 
2023-06-05 12:39:57:168 450 sec: 25253861 operations; 56246.5 current ops/sec; [READ: Count=281060, Max=27247, Min=372, Avg=3643.82, 90=5647, 99=8775, 99.9=16991, 99.99=23279] [UPDATE: Count=281450, Max=16767, Min=324, Avg=1950.73, 90=3001, 99=4367, 99.9=6763, 99.99=10863] 
2023-06-05 12:40:07:168 460 sec: 25816265 operations; 56240.4 current ops/sec; [READ: Count=280870, Max=41535, Min=377, Avg=3769.3, 90=5743, 99=10935, 99.9=29743, 99.99=35775] [UPDATE: Count=281670, Max=10927, Min=310, Avg=1969.09, 90=3013, 99=4695, 99.9=7327, 99.99=8967] 
2023-06-05 12:40:17:168 470 sec: 26372028 operations; 55576.3 current ops/sec; [READ: Count=278576, Max=277247, Min=391, Avg=4627.87, 90=6439, 99=24367, 99.9=142463, 99.99=235391] [UPDATE: Count=277390, Max=15559, Min=306, Avg=2092.28, 90=3173, 99=6163, 99.9=8775, 99.99=10423] 
2023-06-05 12:40:27:168 480 sec: 26941399 operations; 56937.1 current ops/sec; [READ: Count=284621, Max=211583, Min=399, Avg=4103.06, 90=5791, 99=13703, 99.9=101119, 99.99=121215] [UPDATE: Count=284557, Max=11247, Min=313, Avg=2000, 90=3031, 99=4843, 99.9=7887, 99.99=9823] 
2023-06-05 12:40:37:168 490 sec: 27503888 operations; 56248.9 current ops/sec; [READ: Count=281899, Max=31199, Min=354, Avg=3646.2, 90=5635, 99=9031, 99.9=15943, 99.99=22687] [UPDATE: Count=280082, Max=19471, Min=316, Avg=1954.32, 90=2985, 99=4491, 99.9=7203, 99.99=14135] 
2023-06-05 12:40:47:168 500 sec: 28066422 operations; 56253.4 current ops/sec; [READ: Count=281352, Max=37599, Min=404, Avg=3640.79, 90=5647, 99=9111, 99.9=19135, 99.99=28415] [UPDATE: Count=281551, Max=21967, Min=323, Avg=1944.54, 90=2979, 99=4419, 99.9=7031, 99.99=12231] 
2023-06-05 12:40:57:168 510 sec: 28628869 operations; 56244.7 current ops/sec; [READ: Count=281169, Max=76095, Min=376, Avg=3678.31, 90=5671, 99=9463, 99.9=31743, 99.99=45631] [UPDATE: Count=281308, Max=26863, Min=302, Avg=1940.66, 90=2981, 99=4543, 99.9=7487, 99.99=10823] 
2023-06-05 12:41:07:168 520 sec: 29191378 operations; 56250.9 current ops/sec; [READ: Count=281260, Max=22815, Min=390, Avg=3644.59, 90=5695, 99=8607, 99.9=13151, 99.99=19599] [UPDATE: Count=281226, Max=12367, Min=317, Avg=1947.11, 90=2995, 99=4383, 99.9=6615, 99.99=8559] 
2023-06-05 12:41:17:168 530 sec: 29753902 operations; 56252.4 current ops/sec; [READ: Count=281171, Max=24767, Min=378, Avg=3680.65, 90=5707, 99=9103, 99.9=17423, 99.99=21279] [UPDATE: Count=281155, Max=12695, Min=313, Avg=1960.34, 90=3003, 99=4499, 99.9=7327, 99.99=9863] 
2023-06-05 12:41:27:170 540 sec: 30316164 operations; 56214.96 current ops/sec; [READ: Count=281311, Max=38463, Min=382, Avg=3732.61, 90=5791, 99=9199, 99.9=16863, 99.99=23279] [UPDATE: Count=281295, Max=14615, Min=308, Avg=1982.61, 90=3047, 99=4491, 99.9=6987, 99.99=10551] 
2023-06-05 12:41:37:168 550 sec: 30878790 operations; 56273.85 current ops/sec; [READ: Count=281084, Max=37599, Min=373, Avg=3814.94, 90=5871, 99=10455, 99.9=23999, 99.99=29071] [UPDATE: Count=281466, Max=12951, Min=324, Avg=1991.19, 90=3053, 99=4651, 99.9=7611, 99.99=9959] 
2023-06-05 12:41:47:168 560 sec: 31434077 operations; 55528.7 current ops/sec; [READ: Count=277761, Max=354047, Min=368, Avg=4164.52, 90=5815, 99=12719, 99.9=160255, 99.99=258303] [UPDATE: Count=277631, Max=17919, Min=317, Avg=1985.31, 90=3041, 99=5059, 99.9=8543, 99.99=10927] 
2023-06-05 12:41:57:168 570 sec: 31986134 operations; 55205.7 current ops/sec; [READ: Count=276014, Max=403967, Min=353, Avg=4921.86, 90=5699, 99=14015, 99.9=228991, 99.99=365311] [UPDATE: Count=276141, Max=20591, Min=292, Avg=1957.06, 90=2995, 99=4771, 99.9=8303, 99.99=11055] 
2023-06-05 12:42:07:168 580 sec: 32543531 operations; 55739.7 current ops/sec; [READ: Count=278634, Max=318719, Min=381, Avg=4926.1, 90=5983, 99=24047, 99.9=227327, 99.99=273151] [UPDATE: Count=278721, Max=12335, Min=314, Avg=2021.8, 90=3089, 99=4883, 99.9=7975, 99.99=9679] 
2023-06-05 12:42:17:168 590 sec: 33053572 operations; 51004.1 current ops/sec; [READ: Count=254861, Max=556543, Min=369, Avg=5671.77, 90=7451, 99=34463, 99.9=196863, 99.99=328191] [UPDATE: Count=255175, Max=15519, Min=309, Avg=2125.08, 90=3299, 99=6831, 99.9=9159, 99.99=11399] 
2023-06-05 12:42:27:168 600 sec: 33559813 operations; 50624.1 current ops/sec; [READ: Count=252370, Max=350207, Min=363, Avg=5846.17, 90=6691, 99=36543, 99.9=325631, 99.99=329471] [UPDATE: Count=253640, Max=13807, Min=291, Avg=2071.11, 90=3217, 99=6231, 99.9=8615, 99.99=10583] 
2023-06-05 12:42:37:168 610 sec: 34101519 operations; 54170.6 current ops/sec; [READ: Count=270994, Max=330239, Min=374, Avg=5249.96, 90=6895, 99=34591, 99.9=164479, 99.99=322303] [UPDATE: Count=270985, Max=12599, Min=307, Avg=2138.13, 90=3287, 99=6071, 99.9=8423, 99.99=10039] 
2023-06-05 12:42:47:168 620 sec: 34656385 operations; 55486.6 current ops/sec; [READ: Count=277467, Max=166783, Min=387, Avg=5011.13, 90=7231, 99=29455, 99.9=135423, 99.99=162559] [UPDATE: Count=277145, Max=16863, Min=322, Avg=2198.11, 90=3361, 99=6235, 99.9=8559, 99.99=12095] 
2023-06-05 12:42:57:168 630 sec: 35224150 operations; 56776.5 current ops/sec; [READ: Count=284256, Max=241023, Min=354, Avg=4897.31, 90=6599, 99=29359, 99.9=135551, 99.99=155135] [UPDATE: Count=283826, Max=18607, Min=284, Avg=2136.57, 90=3255, 99=5687, 99.9=8199, 99.99=11327] 
2023-06-05 12:43:07:168 640 sec: 35799634 operations; 57548.4 current ops/sec; [READ: Count=286648, Max=151167, Min=378, Avg=4769.46, 90=6795, 99=19487, 99.9=115967, 99.99=134143] [UPDATE: Count=288738, Max=20159, Min=314, Avg=2185.94, 90=3315, 99=5723, 99.9=8471, 99.99=12967] 
2023-06-05 12:43:17:168 650 sec: 36376983 operations; 57734.9 current ops/sec; [READ: Count=288366, Max=277759, Min=395, Avg=4747.73, 90=6635, 99=16279, 99.9=160511, 99.99=170623] [UPDATE: Count=289055, Max=19055, Min=313, Avg=2175.24, 90=3287, 99=5255, 99.9=7799, 99.99=9519] 
2023-06-05 12:43:27:168 660 sec: 36950872 operations; 57388.9 current ops/sec; [READ: Count=287173, Max=252927, Min=374, Avg=4752.52, 90=6811, 99=18351, 99.9=113599, 99.99=207231] [UPDATE: Count=286749, Max=14383, Min=298, Avg=2202.1, 90=3331, 99=5539, 99.9=8223, 99.99=10303] 
2023-06-05 12:43:37:168 670 sec: 37542689 operations; 59181.7 current ops/sec; [READ: Count=295355, Max=34879, Min=426, Avg=4477.16, 90=6931, 99=12239, 99.9=21039, 99.99=26015] [UPDATE: Count=296212, Max=14663, Min=312, Avg=2256.17, 90=3373, 99=5119, 99.9=7483, 99.99=9087] 
2023-06-05 12:43:47:168 680 sec: 38128240 operations; 58555.1 current ops/sec; [READ: Count=292052, Max=115647, Min=404, Avg=4509.48, 90=6883, 99=12727, 99.9=23935, 99.99=66623] [UPDATE: Count=293231, Max=23823, Min=324, Avg=2273.99, 90=3389, 99=5119, 99.9=7947, 99.99=14039] 
2023-06-05 12:43:57:168 690 sec: 38704556 operations; 57631.6 current ops/sec; [READ: Count=287817, Max=126015, Min=373, Avg=4623.04, 90=6675, 99=14015, 99.9=82687, 99.99=88959] [UPDATE: Count=288803, Max=24159, Min=311, Avg=2247.77, 90=3339, 99=4891, 99.9=8239, 99.99=12279] 
2023-06-05 12:44:07:168 700 sec: 39276958 operations; 57240.2 current ops/sec; [READ: Count=286747, Max=89023, Min=379, Avg=4617.38, 90=6811, 99=15215, 99.9=46687, 99.99=60095] [UPDATE: Count=285655, Max=12655, Min=311, Avg=2292.08, 90=3395, 99=5247, 99.9=8623, 99.99=10583] 
2023-06-05 12:44:17:168 710 sec: 39839449 operations; 56249.1 current ops/sec; [READ: Count=281515, Max=220287, Min=350, Avg=4726.85, 90=6763, 99=17439, 99.9=85311, 99.99=136063] [UPDATE: Count=280949, Max=13551, Min=303, Avg=2301.18, 90=3395, 99=5467, 99.9=8767, 99.99=10543] 
2023-06-05 12:44:27:168 720 sec: 40395781 operations; 55633.2 current ops/sec; [READ: Count=278408, Max=180095, Min=369, Avg=4856.8, 90=6843, 99=19039, 99.9=134015, 99.99=140927] [UPDATE: Count=278046, Max=14687, Min=309, Avg=2315.3, 90=3415, 99=5743, 99.9=8863, 99.99=10727] 
2023-06-05 12:44:37:168 730 sec: 40960002 operations; 56422.1 current ops/sec; [READ: Count=281818, Max=52255, Min=390, Avg=4730.49, 90=7035, 99=16799, 99.9=33727, 99.99=37503] [UPDATE: Count=282199, Max=14047, Min=305, Avg=2347.25, 90=3463, 99=5723, 99.9=8903, 99.99=10887] 
2023-06-05 12:44:47:168 740 sec: 41523974 operations; 56397.2 current ops/sec; [READ: Count=282202, Max=42655, Min=383, Avg=4733.18, 90=7035, 99=18159, 99.9=30303, 99.99=35103] [UPDATE: Count=281873, Max=20719, Min=307, Avg=2345.43, 90=3467, 99=5755, 99.9=8959, 99.99=11367] 
2023-06-05 12:44:57:168 750 sec: 42091350 operations; 56737.6 current ops/sec; [READ: Count=283871, Max=44927, Min=407, Avg=4683.38, 90=6975, 99=17423, 99.9=25823, 99.99=30415] [UPDATE: Count=283430, Max=19535, Min=308, Avg=2336.62, 90=3447, 99=5607, 99.9=8831, 99.99=11639] 
2023-06-05 12:45:07:168 760 sec: 42657002 operations; 56565.2 current ops/sec; [READ: Count=283175, Max=39423, Min=403, Avg=4687.99, 90=6903, 99=17599, 99.9=27727, 99.99=32367] [UPDATE: Count=282546, Max=16767, Min=336, Avg=2342.61, 90=3435, 99=5699, 99.9=9111, 99.99=11879] 
2023-06-05 12:45:17:168 770 sec: 43185212 operations; 52821 current ops/sec; [READ: Count=264518, Max=538623, Min=386, Avg=5253.2, 90=6691, 99=23071, 99.9=271103, 99.99=278015] [UPDATE: Count=263695, Max=12671, Min=308, Avg=2281.81, 90=3385, 99=5827, 99.9=8919, 99.99=10799] 
2023-06-05 12:45:27:168 780 sec: 43722408 operations; 53719.6 current ops/sec; [READ: Count=268907, Max=283647, Min=361, Avg=5209.63, 90=6351, 99=17535, 99.9=272895, 99.99=275967] [UPDATE: Count=268278, Max=11959, Min=308, Avg=2221.62, 90=3295, 99=5131, 99.9=7935, 99.99=9919] 
2023-06-05 12:45:37:168 790 sec: 44293148 operations; 57074 current ops/sec; [READ: Count=285519, Max=269823, Min=414, Avg=4711.93, 90=6803, 99=11887, 99.9=131327, 99.99=230783] [UPDATE: Count=285240, Max=11391, Min=327, Avg=2297.2, 90=3385, 99=5019, 99.9=7455, 99.99=9215] 
2023-06-05 12:45:47:168 800 sec: 44872612 operations; 57946.4 current ops/sec; [READ: Count=289703, Max=56127, Min=395, Avg=4554.6, 90=6907, 99=10775, 99.9=18127, 99.99=28047] [UPDATE: Count=289687, Max=18079, Min=309, Avg=2330.22, 90=3415, 99=4887, 99.9=7091, 99.99=8895] 
2023-06-05 12:45:57:168 810 sec: 45449716 operations; 57710.4 current ops/sec; [READ: Count=288283, Max=40095, Min=393, Avg=4558.47, 90=6863, 99=10951, 99.9=18287, 99.99=29455] [UPDATE: Count=288905, Max=27679, Min=328, Avg=2338.29, 90=3423, 99=4915, 99.9=7067, 99.99=10503] 
2023-06-05 12:46:07:168 820 sec: 46025112 operations; 57539.6 current ops/sec; [READ: Count=287557, Max=26463, Min=383, Avg=4540.27, 90=6803, 99=10351, 99.9=14799, 99.99=20127] [UPDATE: Count=287452, Max=15663, Min=310, Avg=2352, 90=3421, 99=4843, 99.9=7023, 99.99=9407] 
2023-06-05 12:46:17:168 830 sec: 46599511 operations; 57439.9 current ops/sec; [READ: Count=286799, Max=108671, Min=401, Avg=4544.23, 90=6783, 99=10631, 99.9=20671, 99.99=41343] [UPDATE: Count=287923, Max=15583, Min=316, Avg=2334.63, 90=3411, 99=4843, 99.9=7267, 99.99=9775] 
2023-06-05 12:46:27:168 840 sec: 47168519 operations; 56900.8 current ops/sec; [READ: Count=283925, Max=29023, Min=411, Avg=4557.31, 90=6771, 99=10063, 99.9=14519, 99.99=20639] [UPDATE: Count=285012, Max=14791, Min=312, Avg=2370.88, 90=3441, 99=4783, 99.9=6927, 99.99=8431] 
2023-06-05 12:46:37:168 850 sec: 47728406 operations; 55988.7 current ops/sec; [READ: Count=280318, Max=86463, Min=392, Avg=4706.62, 90=6827, 99=13383, 99.9=33311, 99.99=52671] [UPDATE: Count=279641, Max=13991, Min=294, Avg=2396.79, 90=3459, 99=5135, 99.9=8271, 99.99=10631] 
2023-06-05 12:46:47:168 860 sec: 48290438 operations; 56203.2 current ops/sec; [READ: Count=280829, Max=41247, Min=406, Avg=4687.46, 90=6855, 99=11991, 99.9=25327, 99.99=29695] [UPDATE: Count=281175, Max=19679, Min=313, Avg=2411.88, 90=3469, 99=5083, 99.9=8223, 99.99=11455] 
2023-06-05 12:46:57:168 870 sec: 48854198 operations; 56376 current ops/sec; [READ: Count=281651, Max=37375, Min=421, Avg=4673.11, 90=6855, 99=11631, 99.9=25263, 99.99=29647] [UPDATE: Count=282057, Max=19759, Min=313, Avg=2404.18, 90=3461, 99=5087, 99.9=8027, 99.99=11399] 
2023-06-05 12:47:07:168 880 sec: 49414563 operations; 56036.5 current ops/sec; [READ: Count=280642, Max=37119, Min=356, Avg=4718.3, 90=6971, 99=13567, 99.9=23775, 99.99=29151] [UPDATE: Count=279740, Max=15327, Min=311, Avg=2400.16, 90=3473, 99=5335, 99.9=8003, 99.99=10071] 
2023-06-05 12:47:17:168 890 sec: 49971265 operations; 55670.2 current ops/sec; [READ: Count=278698, Max=81919, Min=419, Avg=4780.89, 90=6935, 99=16591, 99.9=43519, 99.99=57599] [UPDATE: Count=277976, Max=12463, Min=321, Avg=2392.43, 90=3453, 99=5527, 99.9=8655, 99.99=10375] 
2023-06-05 12:47:27:168 900 sec: 50523426 operations; 55216.1 current ops/sec; [READ: Count=276554, Max=165375, Min=392, Avg=4806.33, 90=6919, 99=17487, 99.9=26623, 99.99=156031] [UPDATE: Count=275623, Max=157823, Min=309, Avg=2430.7, 90=3449, 99=5523, 99.9=8871, 99.99=154111] 
2023-06-05 12:47:37:168 910 sec: 51082700 operations; 55927.4 current ops/sec; [READ: Count=279866, Max=36703, Min=417, Avg=4734.17, 90=6807, 99=14951, 99.9=26511, 99.99=31311] [UPDATE: Count=279349, Max=12783, Min=341, Avg=2413.2, 90=3449, 99=5295, 99.9=8215, 99.99=10279] 
2023-06-05 12:47:47:168 920 sec: 51645903 operations; 56320.3 current ops/sec; [READ: Count=281521, Max=35679, Min=417, Avg=4698.72, 90=6767, 99=13311, 99.9=25855, 99.99=30591] [UPDATE: Count=281734, Max=16831, Min=320, Avg=2400.43, 90=3431, 99=5071, 99.9=7523, 99.99=9735] 
2023-06-05 12:47:57:168 930 sec: 52208839 operations; 56293.6 current ops/sec; [READ: Count=281886, Max=42527, Min=412, Avg=4692.85, 90=6783, 99=13087, 99.9=23919, 99.99=27823] [UPDATE: Count=281015, Max=18351, Min=334, Avg=2405.04, 90=3439, 99=5091, 99.9=7487, 99.99=10367] 
2023-06-05 12:48:07:168 940 sec: 52774536 operations; 56569.7 current ops/sec; [READ: Count=282803, Max=36031, Min=417, Avg=4666.46, 90=6863, 99=11503, 99.9=21055, 99.99=24479] [UPDATE: Count=282944, Max=14007, Min=352, Avg=2397.83, 90=3453, 99=4995, 99.9=7159, 99.99=8695] 
2023-06-05 12:48:17:168 950 sec: 53341095 operations; 56655.9 current ops/sec; [READ: Count=283192, Max=31599, Min=403, Avg=4654.87, 90=6883, 99=11439, 99.9=20767, 99.99=23983] [UPDATE: Count=283367, Max=11095, Min=342, Avg=2394.19, 90=3457, 99=5015, 99.9=7167, 99.99=8439] 
2023-06-05 12:48:27:168 960 sec: 53913541 operations; 57244.6 current ops/sec; [READ: Count=286086, Max=28911, Min=429, Avg=4588.04, 90=6787, 99=10847, 99.9=19375, 99.99=24111] [UPDATE: Count=285844, Max=26591, Min=328, Avg=2374.17, 90=3425, 99=4951, 99.9=7511, 99.99=12311] 
2023-06-05 12:48:37:168 970 sec: 54483163 operations; 56962.2 current ops/sec; [READ: Count=284772, Max=46623, Min=444, Avg=4591.03, 90=6803, 99=11007, 99.9=22127, 99.99=33375] [UPDATE: Count=285432, Max=29711, Min=304, Avg=2363.92, 90=3425, 99=4931, 99.9=7459, 99.99=10207] 
2023-06-05 12:48:47:168 980 sec: 55046069 operations; 56290.6 current ops/sec; [READ: Count=281349, Max=118207, Min=415, Avg=4689, 90=6703, 99=12551, 99.9=67903, 99.99=77183] [UPDATE: Count=281522, Max=18031, Min=313, Avg=2341.62, 90=3393, 99=4995, 99.9=7779, 99.99=10335] 
2023-06-05 12:48:57:168 990 sec: 55608488 operations; 56241.9 current ops/sec; [READ: Count=281364, Max=110719, Min=412, Avg=4706.61, 90=6711, 99=11695, 99.9=60895, 99.99=72383] [UPDATE: Count=281024, Max=62015, Min=318, Avg=2367.42, 90=3405, 99=4995, 99.9=7991, 99.99=59103] 
2023-06-05 12:49:07:168 1000 sec: 56175213 operations; 56672.5 current ops/sec; [READ: Count=282904, Max=62079, Min=383, Avg=4650.89, 90=6831, 99=12279, 99.9=37759, 99.99=46079] [UPDATE: Count=283474, Max=18767, Min=343, Avg=2350.51, 90=3419, 99=5015, 99.9=7439, 99.99=11183] 
2023-06-05 12:49:17:168 1010 sec: 56742545 operations; 56733.2 current ops/sec; [READ: Count=283495, Max=34367, Min=401, Avg=4613.58, 90=6859, 99=12535, 99.9=26255, 99.99=30815] [UPDATE: Count=284102, Max=19887, Min=317, Avg=2334.29, 90=3417, 99=4939, 99.9=7191, 99.99=10383] 
2023-06-05 12:49:27:168 1020 sec: 57308783 operations; 56623.8 current ops/sec; [READ: Count=282895, Max=36767, Min=411, Avg=4525.59, 90=6779, 99=10511, 99.9=17279, 99.99=28031] [UPDATE: Count=283402, Max=12495, Min=316, Avg=2335.13, 90=3411, 99=4807, 99.9=6735, 99.99=8423] 
2023-06-05 12:49:37:168 1030 sec: 57872438 operations; 56365.5 current ops/sec; [READ: Count=281824, Max=28335, Min=376, Avg=4568.61, 90=6775, 99=10495, 99.9=19215, 99.99=25519] [UPDATE: Count=281793, Max=11087, Min=325, Avg=2363.41, 90=3427, 99=4775, 99.9=6783, 99.99=8879] 
2023-06-05 12:49:47:168 1040 sec: 58433531 operations; 56109.3 current ops/sec; [READ: Count=279959, Max=35199, Min=434, Avg=4639.61, 90=6871, 99=13175, 99.9=25247, 99.99=29887] [UPDATE: Count=281195, Max=17439, Min=296, Avg=2357.44, 90=3437, 99=5131, 99.9=7863, 99.99=9959] 
2023-06-05 12:49:57:168 1050 sec: 58998903 operations; 56537.2 current ops/sec; [READ: Count=282827, Max=35743, Min=413, Avg=4600.39, 90=6827, 99=11695, 99.9=24767, 99.99=29391] [UPDATE: Count=282460, Max=21823, Min=310, Avg=2344.87, 90=3409, 99=4931, 99.9=7623, 99.99=10495] 
2023-06-05 12:50:07:168 1060 sec: 59561316 operations; 56241.3 current ops/sec; [READ: Count=281758, Max=50239, Min=421, Avg=4624.04, 90=6887, 99=12679, 99.9=25359, 99.99=31535] [UPDATE: Count=280625, Max=12695, Min=327, Avg=2337.55, 90=3405, 99=5023, 99.9=7483, 99.99=9551] 
2023-06-05 12:50:17:168 1070 sec: 60097805 operations; 53648.9 current ops/sec; [READ: Count=268708, Max=201599, Min=375, Avg=5094.05, 90=6971, 99=23423, 99.9=113983, 99.99=146175] [UPDATE: Count=268057, Max=13487, Min=310, Avg=2325.56, 90=3419, 99=5647, 99.9=8415, 99.99=10439] 
2023-06-05 12:50:27:168 1080 sec: 60670976 operations; 57317.1 current ops/sec; [READ: Count=286568, Max=33887, Min=394, Avg=4630.3, 90=6915, 99=12479, 99.9=25791, 99.99=30367] [UPDATE: Count=286371, Max=15007, Min=319, Avg=2336.98, 90=3407, 99=4975, 99.9=7843, 99.99=10327] 
2023-06-05 12:50:37:168 1090 sec: 61237177 operations; 56620.1 current ops/sec; [READ: Count=283744, Max=49535, Min=430, Avg=4676.05, 90=6915, 99=13375, 99.9=26191, 99.99=30447] [UPDATE: Count=282267, Max=17967, Min=307, Avg=2365.78, 90=3427, 99=5199, 99.9=8367, 99.99=11903] 
2023-06-05 12:50:47:168 1100 sec: 61805642 operations; 56846.5 current ops/sec; [READ: Count=284286, Max=42431, Min=388, Avg=4634.26, 90=6895, 99=12367, 99.9=25199, 99.99=29263] [UPDATE: Count=284382, Max=18783, Min=332, Avg=2352.59, 90=3409, 99=4995, 99.9=7663, 99.99=11799] 
2023-06-05 12:50:57:168 1110 sec: 62370010 operations; 56436.8 current ops/sec; [READ: Count=282125, Max=117439, Min=401, Avg=4660.54, 90=6859, 99=12351, 99.9=54687, 99.99=74879] [UPDATE: Count=282306, Max=18335, Min=306, Avg=2342.15, 90=3403, 99=5035, 99.9=8335, 99.99=12807] 
2023-06-05 12:51:07:168 1120 sec: 62931857 operations; 56184.7 current ops/sec; [READ: Count=280678, Max=118847, Min=362, Avg=4719.5, 90=6803, 99=11951, 99.9=64959, 99.99=74751] [UPDATE: Count=281148, Max=12559, Min=325, Avg=2334.95, 90=3393, 99=5059, 99.9=8059, 99.99=10247] 
2023-06-05 12:51:17:168 1130 sec: 63493643 operations; 56178.6 current ops/sec; [READ: Count=280283, Max=173439, Min=412, Avg=4710.25, 90=6871, 99=15543, 99.9=52031, 99.99=115199] [UPDATE: Count=281486, Max=12759, Min=315, Avg=2332.71, 90=3395, 99=5495, 99.9=9055, 99.99=10775] 
2023-06-05 12:51:27:168 1140 sec: 64057900 operations; 56425.7 current ops/sec; [READ: Count=282163, Max=119039, Min=399, Avg=4719.54, 90=6855, 99=17551, 99.9=80191, 99.99=114431] [UPDATE: Count=282199, Max=21167, Min=318, Avg=2311.01, 90=3367, 99=5599, 99.9=9031, 99.99=10855] 
2023-06-05 12:51:37:168 1150 sec: 64624421 operations; 56652.1 current ops/sec; [READ: Count=283643, Max=44063, Min=404, Avg=4623.03, 90=6883, 99=15983, 99.9=26511, 99.99=31055] [UPDATE: Count=282835, Max=13951, Min=325, Avg=2320.55, 90=3387, 99=5651, 99.9=9175, 99.99=10983] 
2023-06-05 12:51:47:168 1160 sec: 65190138 operations; 56571.7 current ops/sec; [READ: Count=282875, Max=40575, Min=402, Avg=4543.81, 90=6799, 99=14343, 99.9=25151, 99.99=28959] [UPDATE: Count=282744, Max=16911, Min=291, Avg=2287.87, 90=3365, 99=5279, 99.9=8223, 99.99=10711] 
2023-06-05 12:51:57:168 1170 sec: 65753035 operations; 56289.7 current ops/sec; [READ: Count=281449, Max=40543, Min=427, Avg=4441.81, 90=6687, 99=13767, 99.9=23183, 99.99=27199] [UPDATE: Count=281462, Max=18191, Min=305, Avg=2264.25, 90=3339, 99=5255, 99.9=8367, 99.99=11679] 
2023-06-05 12:52:07:168 1180 sec: 66314508 operations; 56147.3 current ops/sec; [READ: Count=280780, Max=106495, Min=421, Avg=4506, 90=6751, 99=14815, 99.9=27087, 99.99=38335] [UPDATE: Count=280870, Max=23151, Min=312, Avg=2270.49, 90=3349, 99=5267, 99.9=8223, 99.99=10087] 
2023-06-05 12:52:17:168 1190 sec: 66877407 operations; 56289.9 current ops/sec; [READ: Count=281780, Max=128895, Min=426, Avg=4622.6, 90=6695, 99=14967, 99.9=82367, 99.99=89983] [UPDATE: Count=281054, Max=16431, Min=316, Avg=2258.03, 90=3335, 99=5163, 99.9=8035, 99.99=9823] 
2023-06-05 12:52:27:168 1200 sec: 67441190 operations; 56378.3 current ops/sec; [READ: Count=282577, Max=30415, Min=386, Avg=4332.24, 90=6591, 99=10503, 99.9=18239, 99.99=24927] [UPDATE: Count=281137, Max=24495, Min=311, Avg=2237.3, 90=3307, 99=4755, 99.9=6723, 99.99=8359] 
2023-06-05 12:52:37:168 1210 sec: 68003615 operations; 56242.5 current ops/sec; [READ: Count=281165, Max=35231, Min=411, Avg=4308.4, 90=6579, 99=10591, 99.9=16527, 99.99=24543] [UPDATE: Count=281198, Max=12311, Min=321, Avg=2214.02, 90=3281, 99=4715, 99.9=6571, 99.99=8799] 
2023-06-05 12:52:47:168 1220 sec: 68566190 operations; 56257.5 current ops/sec; [READ: Count=282345, Max=32591, Min=403, Avg=4365.65, 90=6703, 99=10935, 99.9=17711, 99.99=25951] [UPDATE: Count=280183, Max=17295, Min=332, Avg=2232.57, 90=3301, 99=4811, 99.9=6831, 99.99=9063] 
2023-06-05 12:52:57:168 1230 sec: 69128215 operations; 56202.5 current ops/sec; [READ: Count=280199, Max=231551, Min=395, Avg=4508.58, 90=6663, 99=11655, 99.9=58207, 99.99=172543] [UPDATE: Count=281944, Max=22415, Min=335, Avg=2237.48, 90=3315, 99=4899, 99.9=7207, 99.99=10119] 
2023-06-05 12:53:07:168 1240 sec: 69690904 operations; 56268.9 current ops/sec; [READ: Count=280849, Max=40543, Min=404, Avg=4418.85, 90=6747, 99=11295, 99.9=26959, 99.99=33471] [UPDATE: Count=281780, Max=12215, Min=319, Avg=2241.21, 90=3319, 99=4911, 99.9=7263, 99.99=9247] 
2023-06-05 12:53:17:168 1250 sec: 70253626 operations; 56272.2 current ops/sec; [READ: Count=281741, Max=33983, Min=376, Avg=4401.44, 90=6707, 99=11583, 99.9=18991, 99.99=27199] [UPDATE: Count=281077, Max=12503, Min=319, Avg=2245.61, 90=3331, 99=4883, 99.9=7151, 99.99=9207] 
2023-06-05 12:53:27:168 1260 sec: 70815934 operations; 56230.8 current ops/sec; [READ: Count=281825, Max=51359, Min=376, Avg=4422.94, 90=6707, 99=11335, 99.9=22847, 99.99=43487] [UPDATE: Count=279934, Max=25791, Min=330, Avg=2263.48, 90=3353, 99=4951, 99.9=8231, 99.99=14607] 
2023-06-05 12:53:37:168 1270 sec: 71371423 operations; 55548.9 current ops/sec; [READ: Count=277622, Max=304383, Min=396, Avg=4631.85, 90=6759, 99=14399, 99.9=113599, 99.99=165887] [UPDATE: Count=278508, Max=21567, Min=313, Avg=2253.11, 90=3351, 99=5211, 99.9=8671, 99.99=11103] 
2023-06-05 12:53:47:168 1280 sec: 71931724 operations; 56030.1 current ops/sec; [READ: Count=280348, Max=171007, Min=377, Avg=4751.89, 90=6679, 99=12039, 99.9=137215, 99.99=164095] [UPDATE: Count=279378, Max=24799, Min=322, Avg=2246.4, 90=3345, 99=4995, 99.9=8351, 99.99=14543] 
2023-06-05 12:53:57:168 1290 sec: 72500517 operations; 56879.3 current ops/sec; [READ: Count=284743, Max=111679, Min=399, Avg=4583.19, 90=6803, 99=13903, 99.9=49087, 99.99=78719] [UPDATE: Count=284640, Max=22079, Min=320, Avg=2266.79, 90=3377, 99=5167, 99.9=8199, 99.99=11879] 
2023-06-05 12:54:07:168 1300 sec: 73064440 operations; 56392.3 current ops/sec; [READ: Count=281808, Max=104127, Min=394, Avg=4562.82, 90=6691, 99=15391, 99.9=61375, 99.99=81919] [UPDATE: Count=282029, Max=13935, Min=290, Avg=2219.57, 90=3311, 99=5123, 99.9=8631, 99.99=10735] 
2023-06-05 12:54:17:168 1310 sec: 73617317 operations; 55287.7 current ops/sec; [READ: Count=276669, Max=264447, Min=409, Avg=4818.66, 90=6655, 99=21007, 99.9=160383, 99.99=168575] [UPDATE: Count=276358, Max=12623, Min=307, Avg=2198.87, 90=3279, 99=5603, 99.9=9271, 99.99=11079] 
2023-06-05 12:54:27:168 1320 sec: 74172443 operations; 55512.6 current ops/sec; [READ: Count=277563, Max=163071, Min=385, Avg=4924.35, 90=6979, 99=25663, 99.9=94527, 99.99=130175] [UPDATE: Count=277507, Max=18767, Min=324, Avg=2235.72, 90=3345, 99=6031, 99.9=9455, 99.99=11335] 
2023-06-05 12:54:37:168 1330 sec: 74736882 operations; 56443.9 current ops/sec; [READ: Count=282916, Max=76479, Min=419, Avg=4800.77, 90=7135, 99=23167, 99.9=56479, 99.99=64895] [UPDATE: Count=280858, Max=27167, Min=328, Avg=2255.05, 90=3379, 99=6067, 99.9=9423, 99.99=13903] 
2023-06-05 12:54:47:168 1340 sec: 75302187 operations; 56530.5 current ops/sec; [READ: Count=283354, Max=182015, Min=361, Avg=4784.59, 90=7019, 99=21007, 99.9=95423, 99.99=109375] [UPDATE: Count=282582, Max=25791, Min=329, Avg=2241.78, 90=3361, 99=5547, 99.9=8711, 99.99=11983] 
2023-06-05 12:54:57:168 1350 sec: 75872395 operations; 57020.8 current ops/sec; [READ: Count=284329, Max=122239, Min=390, Avg=4664.36, 90=7063, 99=15095, 99.9=40351, 99.99=99839] [UPDATE: Count=285173, Max=34719, Min=331, Avg=2266.58, 90=3383, 99=5303, 99.9=8711, 99.99=17327] 
2023-06-05 12:55:07:168 1360 sec: 76439148 operations; 56675.3 current ops/sec; [READ: Count=283354, Max=43231, Min=402, Avg=4593.85, 90=7031, 99=13839, 99.9=28095, 99.99=35359] [UPDATE: Count=283999, Max=37855, Min=334, Avg=2271.28, 90=3379, 99=5231, 99.9=7983, 99.99=11071] 
2023-06-05 12:55:17:168 1370 sec: 76984449 operations; 54530.1 current ops/sec; [READ: Count=272524, Max=134655, Min=386, Avg=5002.42, 90=7267, 99=24559, 99.9=81983, 99.99=88959] [UPDATE: Count=272774, Max=13599, Min=323, Avg=2290.53, 90=3425, 99=6083, 99.9=8911, 99.99=10623] 
2023-06-05 12:55:27:168 1380 sec: 77546339 operations; 56189 current ops/sec; [READ: Count=280489, Max=326399, Min=372, Avg=4820.59, 90=7011, 99=19679, 99.9=71295, 99.99=173567] [UPDATE: Count=281550, Max=14935, Min=316, Avg=2264.92, 90=3393, 99=5523, 99.9=8895, 99.99=10935] 
2023-06-05 12:55:37:168 1390 sec: 78071486 operations; 52514.7 current ops/sec; [READ: Count=263152, Max=543231, Min=376, Avg=5428.77, 90=6215, 99=16943, 99.9=354303, 99.99=417535] [UPDATE: Count=261917, Max=11927, Min=297, Avg=2095.85, 90=3191, 99=5071, 99.9=8335, 99.99=10463] 
2023-06-05 12:55:47:168 1400 sec: 78605279 operations; 53379.3 current ops/sec; [READ: Count=266861, Max=405503, Min=385, Avg=5363.54, 90=6403, 99=18703, 99.9=363519, 99.99=396799] [UPDATE: Count=267097, Max=15991, Min=311, Avg=2106.02, 90=3209, 99=5335, 99.9=8503, 99.99=10895] 
2023-06-05 12:55:57:168 1410 sec: 79157337 operations; 55205.8 current ops/sec; [READ: Count=275984, Max=463615, Min=374, Avg=5087.14, 90=6675, 99=16223, 99.9=374015, 99.99=445695] [UPDATE: Count=275957, Max=33311, Min=308, Avg=2158.53, 90=3277, 99=5179, 99.9=8463, 99.99=29695] 
2023-06-05 12:56:07:168 1420 sec: 79726422 operations; 56908.5 current ops/sec; [READ: Count=284111, Max=71551, Min=402, Avg=4763.9, 90=7339, 99=19647, 99.9=45535, 99.99=55103] [UPDATE: Count=284904, Max=12919, Min=318, Avg=2263.28, 90=3419, 99=5659, 99.9=8535, 99.99=10335] 
2023-06-05 12:56:17:168 1430 sec: 80294601 operations; 56817.9 current ops/sec; [READ: Count=284576, Max=180351, Min=409, Avg=4766.62, 90=7231, 99=19647, 99.9=52991, 99.99=101311] [UPDATE: Count=283625, Max=13351, Min=320, Avg=2256.72, 90=3403, 99=5647, 99.9=8551, 99.99=10575] 
2023-06-05 12:56:27:168 1440 sec: 80858975 operations; 56437.4 current ops/sec; [READ: Count=282104, Max=182527, Min=396, Avg=4849.53, 90=7111, 99=21775, 99.9=92735, 99.99=141823] [UPDATE: Count=282389, Max=12463, Min=300, Avg=2232.8, 90=3377, 99=5471, 99.9=8151, 99.99=10039] 
2023-06-05 12:56:37:168 1450 sec: 81430250 operations; 57127.5 current ops/sec; [READ: Count=285554, Max=97471, Min=372, Avg=4739.95, 90=7315, 99=17471, 99.9=41951, 99.99=80639] [UPDATE: Count=285637, Max=13151, Min=331, Avg=2252.46, 90=3409, 99=5391, 99.9=8135, 99.99=10207] 
2023-06-05 12:56:47:168 1460 sec: 81996886 operations; 56663.6 current ops/sec; [READ: Count=283468, Max=111487, Min=409, Avg=4808.31, 90=7499, 99=18767, 99.9=35615, 99.99=63583] [UPDATE: Count=283177, Max=15551, Min=305, Avg=2234.78, 90=3391, 99=5419, 99.9=8199, 99.99=12367] 
2023-06-05 12:56:57:168 1470 sec: 82558292 operations; 56140.6 current ops/sec; [READ: Count=279877, Max=292607, Min=410, Avg=4892.49, 90=7079, 99=22143, 99.9=113599, 99.99=157183] [UPDATE: Count=280821, Max=36351, Min=319, Avg=2222.67, 90=3365, 99=5547, 99.9=9375, 99.99=16223] 
2023-06-05 12:57:07:168 1480 sec: 83113861 operations; 55556.9 current ops/sec; [READ: Count=277743, Max=261887, Min=411, Avg=4978.8, 90=6891, 99=17519, 99.9=162815, 99.99=193535] [UPDATE: Count=278549, Max=22959, Min=287, Avg=2200.14, 90=3343, 99=5175, 99.9=7683, 99.99=9951] 
2023-06-05 12:57:17:168 1490 sec: 83676295 operations; 56243.4 current ops/sec; [READ: Count=281140, Max=167807, Min=379, Avg=4863.09, 90=7087, 99=15967, 99.9=131967, 99.99=141695] [UPDATE: Count=281323, Max=11623, Min=311, Avg=2237.49, 90=3383, 99=5307, 99.9=7603, 99.99=9327] 
2023-06-05 12:57:27:168 1500 sec: 84248834 operations; 57253.9 current ops/sec; [READ: Count=286134, Max=113279, Min=386, Avg=4703.13, 90=7131, 99=14359, 99.9=56543, 99.99=80767] [UPDATE: Count=286311, Max=25503, Min=329, Avg=2266.57, 90=3393, 99=5079, 99.9=7979, 99.99=16399] 
2023-06-05 12:57:37:168 1510 sec: 84810478 operations; 56164.4 current ops/sec; [READ: Count=280217, Max=300799, Min=397, Avg=4829.78, 90=7095, 99=18863, 99.9=75519, 99.99=213759] [UPDATE: Count=281483, Max=18495, Min=308, Avg=2278.26, 90=3409, 99=5363, 99.9=8383, 99.99=10519] 
2023-06-05 12:57:47:168 1520 sec: 85370637 operations; 56015.9 current ops/sec; [READ: Count=279812, Max=135935, Min=404, Avg=4872.61, 90=7139, 99=21407, 99.9=81727, 99.99=90367] [UPDATE: Count=280361, Max=17999, Min=306, Avg=2259.55, 90=3391, 99=5643, 99.9=8847, 99.99=11031] 
2023-06-05 12:57:57:168 1530 sec: 85932526 operations; 56188.9 current ops/sec; [READ: Count=280930, Max=97919, Min=360, Avg=4834.9, 90=7251, 99=20559, 99.9=66303, 99.99=74559] [UPDATE: Count=280901, Max=25983, Min=312, Avg=2275.88, 90=3397, 99=5811, 99.9=8895, 99.99=11879] 
2023-06-05 12:58:07:168 1540 sec: 86491667 operations; 55914.1 current ops/sec; [READ: Count=279403, Max=87487, Min=350, Avg=4855.21, 90=7403, 99=22335, 99.9=41759, 99.99=53247] [UPDATE: Count=279738, Max=12783, Min=313, Avg=2291.56, 90=3437, 99=5927, 99.9=8871, 99.99=10703] 
2023-06-05 12:58:17:168 1550 sec: 87047999 operations; 55633.2 current ops/sec; [READ: Count=277361, Max=143871, Min=391, Avg=4920.36, 90=7095, 99=24991, 99.9=110783, 99.99=119359] [UPDATE: Count=278971, Max=12455, Min=329, Avg=2267.5, 90=3395, 99=5719, 99.9=8855, 99.99=10743] 
2023-06-05 12:58:27:168 1560 sec: 87608395 operations; 56039.6 current ops/sec; [READ: Count=279712, Max=90367, Min=397, Avg=4851.39, 90=7179, 99=24271, 99.9=40991, 99.99=82879] [UPDATE: Count=280702, Max=13223, Min=293, Avg=2286.09, 90=3411, 99=6107, 99.9=9351, 99.99=11351] 
2023-06-05 12:58:37:168 1570 sec: 88149140 operations; 54074.5 current ops/sec; [READ: Count=270688, Max=209407, Min=387, Avg=5142.91, 90=7067, 99=27327, 99.9=131967, 99.99=144383] [UPDATE: Count=270147, Max=15823, Min=318, Avg=2247.69, 90=3383, 99=6423, 99.9=9439, 99.99=11207] 
2023-06-05 12:58:47:168 1580 sec: 88694018 operations; 54487.8 current ops/sec; [READ: Count=272658, Max=115775, Min=413, Avg=5038.47, 90=7391, 99=26223, 99.9=58047, 99.99=71999] [UPDATE: Count=272109, Max=18159, Min=315, Avg=2296.02, 90=3443, 99=6595, 99.9=9455, 99.99=11607] 
2023-06-05 12:58:57:168 1590 sec: 89240609 operations; 54659.1 current ops/sec; [READ: Count=273708, Max=109823, Min=396, Avg=4999.53, 90=7359, 99=24895, 99.9=49247, 99.99=69375] [UPDATE: Count=272590, Max=30959, Min=316, Avg=2313.51, 90=3467, 99=6499, 99.9=9407, 99.99=14047] 
2023-06-05 12:59:07:168 1600 sec: 89771182 operations; 53057.3 current ops/sec; [READ: Count=265401, Max=528383, Min=368, Avg=5280.56, 90=6735, 99=26095, 99.9=163327, 99.99=278271] [UPDATE: Count=265477, Max=15039, Min=299, Avg=2230.1, 90=3337, 99=6179, 99.9=9055, 99.99=10975] 
2023-06-05 12:59:17:168 1610 sec: 90288367 operations; 51718.5 current ops/sec; [READ: Count=258195, Max=592895, Min=411, Avg=5579.86, 90=6227, 99=18975, 99.9=325375, 99.99=459007] [UPDATE: Count=258997, Max=12783, Min=284, Avg=2164.14, 90=3233, 99=5167, 99.9=8215, 99.99=10303] 
2023-06-05 12:59:27:168 1620 sec: 90838760 operations; 55039.3 current ops/sec; [READ: Count=274776, Max=364031, Min=360, Avg=5002.43, 90=6787, 99=15535, 99.9=270847, 99.99=328959] [UPDATE: Count=275630, Max=43999, Min=317, Avg=2281.21, 90=3363, 99=5239, 99.9=8199, 99.99=41727] 
2023-06-05 12:59:37:168 1630 sec: 91405992 operations; 56723.2 current ops/sec; [READ: Count=283418, Max=88959, Min=370, Avg=4731.45, 90=7083, 99=14111, 99.9=54943, 99.99=75135] [UPDATE: Count=283863, Max=31487, Min=340, Avg=2318.9, 90=3415, 99=5239, 99.9=8179, 99.99=10535] 
2023-06-05 12:59:47:168 1640 sec: 91975348 operations; 56935.6 current ops/sec; [READ: Count=284753, Max=109951, Min=406, Avg=4700.88, 90=7063, 99=13799, 99.9=37791, 99.99=96959] [UPDATE: Count=284571, Max=17087, Min=315, Avg=2320.77, 90=3419, 99=5235, 99.9=8171, 99.99=10895] 
2023-06-05 12:59:57:168 1650 sec: 92540211 operations; 56486.3 current ops/sec; [READ: Count=282448, Max=115903, Min=406, Avg=4769.05, 90=6987, 99=15087, 99.9=80575, 99.99=89407] [UPDATE: Count=282054, Max=27487, Min=323, Avg=2310.54, 90=3399, 99=5263, 99.9=8631, 99.99=13879] 
2023-06-05 13:00:07:168 1660 sec: 93109331 operations; 56912 current ops/sec; [READ: Count=284825, Max=77503, Min=405, Avg=4683.07, 90=7059, 99=13607, 99.9=25535, 99.99=54783] [UPDATE: Count=284552, Max=15663, Min=333, Avg=2338.59, 90=3439, 99=5147, 99.9=7663, 99.99=9743] 
2023-06-05 13:00:17:168 1670 sec: 93660914 operations; 55158.3 current ops/sec; [READ: Count=275621, Max=323583, Min=397, Avg=4939.29, 90=6891, 99=17119, 99.9=105343, 99.99=269823] [UPDATE: Count=276104, Max=13511, Min=306, Avg=2310.82, 90=3385, 99=5319, 99.9=7931, 99.99=9783] 
2023-06-05 13:00:27:168 1680 sec: 94223900 operations; 56298.6 current ops/sec; [READ: Count=281850, Max=41215, Min=372, Avg=4732.94, 90=7143, 99=13375, 99.9=21807, 99.99=26703] [UPDATE: Count=280898, Max=12447, Min=334, Avg=2366.2, 90=3451, 99=5199, 99.9=7399, 99.99=9015] 
2023-06-05 13:00:37:168 1690 sec: 94765003 operations; 54110.3 current ops/sec; [READ: Count=270422, Max=339967, Min=406, Avg=5041.43, 90=7143, 99=18831, 99.9=125439, 99.99=189567] [UPDATE: Count=270856, Max=18047, Min=326, Avg=2348.73, 90=3441, 99=5883, 99.9=9111, 99.99=12623] 
2023-06-05 13:00:47:168 1700 sec: 95313667 operations; 54866.4 current ops/sec; [READ: Count=273832, Max=211967, Min=373, Avg=4932, 90=7251, 99=20431, 99.9=52127, 99.99=106111] [UPDATE: Count=274755, Max=215167, Min=326, Avg=2359.42, 90=3459, 99=5879, 99.9=9223, 99.99=13031] 
2023-06-05 13:00:57:168 1710 sec: 95852532 operations; 53886.5 current ops/sec; [READ: Count=269287, Max=227455, Min=401, Avg=5122.95, 90=6931, 99=28063, 99.9=135167, 99.99=193663] [UPDATE: Count=269175, Max=28351, Min=322, Avg=2301.86, 90=3391, 99=5927, 99.9=9719, 99.99=15247] 
2023-06-05 13:01:07:168 1720 sec: 96394308 operations; 54177.6 current ops/sec; [READ: Count=271238, Max=169343, Min=390, Avg=5046.87, 90=7031, 99=20959, 99.9=98687, 99.99=134143] [UPDATE: Count=271002, Max=29855, Min=340, Avg=2324, 90=3401, 99=5715, 99.9=8855, 99.99=11223] 
2023-06-05 13:01:17:168 1730 sec: 96937479 operations; 54317.1 current ops/sec; [READ: Count=271216, Max=161919, Min=399, Avg=5042.04, 90=7003, 99=21311, 99.9=89151, 99.99=140159] [UPDATE: Count=271911, Max=18127, Min=332, Avg=2323.88, 90=3411, 99=5599, 99.9=8487, 99.99=10735] 
2023-06-05 13:01:27:168 1740 sec: 97478072 operations; 54059.3 current ops/sec; [READ: Count=270233, Max=204415, Min=406, Avg=5064.96, 90=7047, 99=23807, 99.9=87423, 99.99=139391] [UPDATE: Count=270471, Max=212479, Min=337, Avg=2332.4, 90=3427, 99=5751, 99.9=8671, 99.99=11615] 
2023-06-05 13:01:37:168 1750 sec: 98044090 operations; 56601.8 current ops/sec; [READ: Count=282825, Max=73983, Min=389, Avg=4704.61, 90=7147, 99=12343, 99.9=27855, 99.99=54911] [UPDATE: Count=283029, Max=13119, Min=338, Avg=2360.97, 90=3463, 99=5143, 99.9=7519, 99.99=9967] 
2023-06-05 13:01:47:168 1760 sec: 98606607 operations; 56251.7 current ops/sec; [READ: Count=280992, Max=46143, Min=394, Avg=4743.16, 90=7087, 99=14303, 99.9=33183, 99.99=39007] [UPDATE: Count=281529, Max=16991, Min=315, Avg=2366.65, 90=3463, 99=5383, 99.9=8599, 99.99=11327] 
2023-06-05 13:01:57:168 1770 sec: 99166114 operations; 55950.7 current ops/sec; [READ: Count=280145, Max=41919, Min=434, Avg=4767.56, 90=7083, 99=16751, 99.9=29535, 99.99=34271] [UPDATE: Count=279387, Max=19519, Min=324, Avg=2375.29, 90=3459, 99=5547, 99.9=8831, 99.99=11279] 
2023-06-05 13:02:07:168 1780 sec: 99715112 operations; 54899.8 current ops/sec; [READ: Count=274694, Max=166911, Min=426, Avg=4887.68, 90=7071, 99=18559, 99.9=70783, 99.99=100351] [UPDATE: Count=274348, Max=87679, Min=359, Avg=2393.55, 90=3457, 99=5711, 99.9=9055, 99.99=85055] 
2023-06-05 13:02:17:168 1790 sec: 100255832 operations; 54072 current ops/sec; [READ: Count=271656, Max=264191, Min=423, Avg=5064.49, 90=6763, 99=17999, 99.9=161919, 99.99=192639] [UPDATE: Count=269151, Max=21023, Min=314, Avg=2312.59, 90=3377, 99=5263, 99.9=8231, 99.99=10279] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:27:168 1800 sec: 100950858 operations; 69502.6 current ops/sec; [READ: Count=347485, Max=181887, Min=363, Avg=3768, 90=5627, 99=8303, 99.9=59487, 99.99=166143] [UPDATE: Count=347171, Max=16039, Min=290, Avg=1986.12, 90=3073, 99=4283, 99.9=6851, 99.99=9167] 
Still waiting for thread Thread-55 to complete. Workload status: true
2023-06-05 13:02:29:416 1802 sec: 100952442 operations; 704.63 current ops/sec; [READ: Count=816, Max=9575, Min=458, Avg=3001.5, 90=4815, 99=6143, 99.9=7255, 99.99=9575] [CLEANUP: Count=200, Max=2224127, Min=0, Avg=11116.83, 90=2, 99=9, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802247
[OVERALL], Throughput(ops/sec), 56014.76490181423
[TOTAL_GCS_PS_Scavenge], Count, 6718
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17462
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9689015989484238
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 152
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008433916105838988
[TOTAL_GCs], Count, 6721
[TOTAL_GC_TIME], Time(ms), 17614
[TOTAL_GC_TIME_%], Time(%), 0.9773355150542627
[READ], Operations, 50478014
[READ], AverageLatency(us), 4508.219142318079
[READ], MinLatency(us), 336
[READ], MaxLatency(us), 592895
[READ], 95thPercentileLatency(us), 7915
[READ], 99thPercentileLatency(us), 16071
[READ], Return=OK, 50478014
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11116.825
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 9
[UPDATE], Operations, 50474428
[UPDATE], AverageLatency(us), 2185.652970490324
[UPDATE], MinLatency(us), 284
[UPDATE], MaxLatency(us), 299775
[UPDATE], 95thPercentileLatency(us), 3701
[UPDATE], 99thPercentileLatency(us), 5307
[UPDATE], Return=OK, 50474428
