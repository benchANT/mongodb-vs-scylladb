bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:22:489 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
2023-06-05 12:32:32:473 10 sec: 510814 operations; 51076.29 current ops/sec; [READ: Count=255291, Max=106047, Min=386, Avg=3249.57, 90=5159, 99=15751, 99.9=41631, 99.99=88447] [UPDATE: Count=257082, Max=103423, Min=300, Avg=1860.66, 90=2701, 99=7579, 99.9=38111, 99.99=87039] 
2023-06-05 12:32:42:473 20 sec: 1073376 operations; 56256.2 current ops/sec; [READ: Count=281169, Max=43903, Min=410, Avg=3666.3, 90=5611, 99=17663, 99.9=23103, 99.99=27055] [UPDATE: Count=280971, Max=24271, Min=331, Avg=1855.43, 90=2797, 99=5719, 99.9=7903, 99.99=9295] 
2023-06-05 12:32:52:473 30 sec: 1635786 operations; 56241 current ops/sec; [READ: Count=280746, Max=39487, Min=381, Avg=3800.93, 90=5871, 99=17679, 99.9=31935, 99.99=35615] [UPDATE: Count=281617, Max=23951, Min=334, Avg=1902.94, 90=2877, 99=5919, 99.9=8103, 99.99=10039] 
2023-06-05 12:33:02:473 40 sec: 2198228 operations; 56244.2 current ops/sec; [READ: Count=280767, Max=43455, Min=373, Avg=3871.44, 90=5991, 99=18015, 99.9=30047, 99.99=34111] [UPDATE: Count=281709, Max=15567, Min=337, Avg=1925.56, 90=2921, 99=5887, 99.9=8083, 99.99=9935] 
2023-06-05 12:33:12:473 50 sec: 2759727 operations; 56149.9 current ops/sec; [READ: Count=280887, Max=135679, Min=397, Avg=4254.9, 90=6523, 99=21295, 99.9=69823, 99.99=85631] [UPDATE: Count=280666, Max=12423, Min=304, Avg=1994.76, 90=3037, 99=6179, 99.9=8139, 99.99=9815] 
2023-06-05 12:33:22:473 60 sec: 3322555 operations; 56282.8 current ops/sec; [READ: Count=281196, Max=132607, Min=402, Avg=4469.89, 90=6591, 99=26463, 99.9=78079, 99.99=87039] [UPDATE: Count=281397, Max=20255, Min=344, Avg=2024.25, 90=3081, 99=6335, 99.9=8495, 99.99=13623] 
2023-06-05 12:33:32:473 70 sec: 3885688 operations; 56313.3 current ops/sec; [READ: Count=282195, Max=67263, Min=410, Avg=4134.79, 90=6479, 99=18927, 99.9=28975, 99.99=46239] [UPDATE: Count=281062, Max=16895, Min=353, Avg=2024.22, 90=3079, 99=5967, 99.9=8051, 99.99=9527] 
2023-06-05 12:33:42:473 80 sec: 4447919 operations; 56223.1 current ops/sec; [READ: Count=280760, Max=75519, Min=390, Avg=4193.79, 90=6539, 99=19183, 99.9=36671, 99.99=45023] [UPDATE: Count=281545, Max=13367, Min=336, Avg=2028.8, 90=3101, 99=6035, 99.9=8043, 99.99=9535] 
2023-06-05 12:33:52:473 90 sec: 5010602 operations; 56268.3 current ops/sec; [READ: Count=280922, Max=49215, Min=397, Avg=4184.72, 90=6523, 99=18831, 99.9=34559, 99.99=39423] [UPDATE: Count=281691, Max=17391, Min=324, Avg=2036.69, 90=3123, 99=5927, 99.9=8035, 99.99=11519] 
2023-06-05 12:34:02:473 100 sec: 5573264 operations; 56266.2 current ops/sec; [READ: Count=280626, Max=42079, Min=391, Avg=4161.24, 90=6499, 99=19935, 99.9=29487, 99.99=37983] [UPDATE: Count=281954, Max=17855, Min=336, Avg=2010.96, 90=3085, 99=6091, 99.9=8171, 99.99=10335] 
2023-06-05 12:34:12:473 110 sec: 6132659 operations; 55939.5 current ops/sec; [READ: Count=279283, Max=184831, Min=394, Avg=4568.73, 90=6791, 99=25759, 99.9=95679, 99.99=113919] [UPDATE: Count=280291, Max=13415, Min=321, Avg=2047.87, 90=3121, 99=6599, 99.9=9015, 99.99=10751] 
2023-06-05 12:34:22:473 120 sec: 6697848 operations; 56518.9 current ops/sec; [READ: Count=282808, Max=116671, Min=415, Avg=4547.88, 90=6731, 99=23855, 99.9=94335, 99.99=113919] [UPDATE: Count=282354, Max=13519, Min=331, Avg=2075.09, 90=3129, 99=6655, 99.9=9079, 99.99=11111] 
2023-06-05 12:34:32:473 130 sec: 7252392 operations; 55454.4 current ops/sec; [READ: Count=277860, Max=289023, Min=399, Avg=4591.55, 90=6915, 99=22639, 99.9=116671, 99.99=163327] [UPDATE: Count=276594, Max=16447, Min=325, Avg=2077.48, 90=3127, 99=6955, 99.9=9575, 99.99=12503] 
2023-06-05 12:34:42:474 140 sec: 7794189 operations; 54174.28 current ops/sec; [READ: Count=270538, Max=709631, Min=410, Avg=5094.24, 90=6839, 99=23471, 99.9=163327, 99.99=402431] [UPDATE: Count=271300, Max=709119, Min=327, Avg=2123.7, 90=3113, 99=6959, 99.9=9455, 99.99=294399] 
2023-06-05 12:34:52:473 150 sec: 8318899 operations; 52476.25 current ops/sec; [READ: Count=262480, Max=1508351, Min=393, Avg=5350.29, 90=6595, 99=25999, 99.9=164351, 99.99=1144831] [UPDATE: Count=262406, Max=1500159, Min=329, Avg=2249.28, 90=3075, 99=6823, 99.9=9631, 99.99=972799] 
2023-06-05 12:35:02:473 160 sec: 8887695 operations; 56879.6 current ops/sec; [READ: Count=284126, Max=337663, Min=426, Avg=4940.78, 90=6463, 99=21135, 99.9=191487, 99.99=210815] [UPDATE: Count=284560, Max=215295, Min=312, Avg=2073.17, 90=3123, 99=6367, 99.9=8927, 99.99=11375] 
2023-06-05 12:35:12:473 170 sec: 9444341 operations; 55664.6 current ops/sec; [READ: Count=279026, Max=369151, Min=391, Avg=5037.23, 90=6551, 99=23919, 99.9=189183, 99.99=273407] [UPDATE: Count=277606, Max=12807, Min=334, Avg=2082.04, 90=3165, 99=6107, 99.9=8311, 99.99=9951] 
2023-06-05 12:35:22:473 180 sec: 10020187 operations; 57584.6 current ops/sec; [READ: Count=287696, Max=319487, Min=398, Avg=4810.07, 90=6327, 99=22879, 99.9=191231, 99.99=230143] [UPDATE: Count=288248, Max=17391, Min=344, Avg=2095.62, 90=3141, 99=5683, 99.9=8543, 99.99=12751] 
2023-06-05 12:35:32:473 190 sec: 10604511 operations; 58432.4 current ops/sec; [READ: Count=292464, Max=293631, Min=411, Avg=4554.62, 90=6255, 99=23903, 99.9=129343, 99.99=191743] [UPDATE: Count=291765, Max=16399, Min=344, Avg=2105.88, 90=3135, 99=5703, 99.9=8671, 99.99=10399] 
2023-06-05 12:35:42:473 200 sec: 11180515 operations; 57600.4 current ops/sec; [READ: Count=287685, Max=265983, Min=394, Avg=4622.62, 90=6147, 99=21807, 99.9=187647, 99.99=195071] [UPDATE: Count=288351, Max=12599, Min=335, Avg=2085.54, 90=3123, 99=5499, 99.9=8511, 99.99=10503] 
2023-06-05 12:35:52:473 210 sec: 11756251 operations; 57573.6 current ops/sec; [READ: Count=287971, Max=170239, Min=436, Avg=4436.76, 90=6223, 99=20207, 99.9=133119, 99.99=163455] [UPDATE: Count=287651, Max=29007, Min=320, Avg=2097.3, 90=3125, 99=5543, 99.9=8711, 99.99=11111] 
2023-06-05 12:36:02:473 220 sec: 12322302 operations; 56605.1 current ops/sec; [READ: Count=282764, Max=147967, Min=392, Avg=4135.08, 90=6071, 99=18751, 99.9=49439, 99.99=91327] [UPDATE: Count=283325, Max=16783, Min=312, Avg=2057.89, 90=3073, 99=5579, 99.9=8503, 99.99=11263] 
2023-06-05 12:36:12:473 230 sec: 12885812 operations; 56351 current ops/sec; [READ: Count=281724, Max=90623, Min=426, Avg=3939.22, 90=5739, 99=16847, 99.9=51071, 99.99=83391] [UPDATE: Count=281718, Max=11759, Min=327, Avg=2002.82, 90=3005, 99=5007, 99.9=7779, 99.99=9815] 
2023-06-05 12:36:22:473 240 sec: 13448464 operations; 56265.2 current ops/sec; [READ: Count=281366, Max=32079, Min=412, Avg=3591.06, 90=5439, 99=8831, 99.9=21135, 99.99=26207] [UPDATE: Count=281241, Max=10527, Min=335, Avg=1932.57, 90=2911, 99=4255, 99.9=6843, 99.99=8535] 
2023-06-05 12:36:32:473 250 sec: 14010851 operations; 56238.7 current ops/sec; [READ: Count=281277, Max=39359, Min=420, Avg=3569.28, 90=5463, 99=7915, 99.9=12727, 99.99=22191] [UPDATE: Count=281036, Max=11079, Min=341, Avg=1948.76, 90=2943, 99=4123, 99.9=6279, 99.99=7999] 
2023-06-05 12:36:42:473 260 sec: 14573444 operations; 56259.3 current ops/sec; [READ: Count=281700, Max=24159, Min=389, Avg=3537.11, 90=5439, 99=7907, 99.9=11551, 99.99=18831] [UPDATE: Count=280821, Max=12167, Min=322, Avg=1937.26, 90=2939, 99=4091, 99.9=6523, 99.99=8011] 
2023-06-05 12:36:52:473 270 sec: 15135941 operations; 56249.7 current ops/sec; [READ: Count=281818, Max=33183, Min=406, Avg=3609.25, 90=5567, 99=8511, 99.9=14151, 99.99=23743] [UPDATE: Count=280761, Max=21087, Min=340, Avg=1959.02, 90=2985, 99=4323, 99.9=6619, 99.99=9671] 
2023-06-05 12:37:02:473 280 sec: 15698462 operations; 56252.1 current ops/sec; [READ: Count=281601, Max=31919, Min=389, Avg=3563.79, 90=5511, 99=8327, 99.9=13847, 99.99=23871] [UPDATE: Count=280844, Max=25615, Min=323, Avg=1945.16, 90=2965, 99=4335, 99.9=7335, 99.99=16719] 
2023-06-05 12:37:12:473 290 sec: 16260942 operations; 56248 current ops/sec; [READ: Count=280835, Max=105983, Min=415, Avg=3593.22, 90=5515, 99=8815, 99.9=21199, 99.99=43903] [UPDATE: Count=281770, Max=16375, Min=312, Avg=1936.89, 90=2967, 99=4423, 99.9=7015, 99.99=9175] 
2023-06-05 12:37:22:473 300 sec: 16823444 operations; 56250.2 current ops/sec; [READ: Count=280685, Max=21135, Min=385, Avg=3519.93, 90=5439, 99=8223, 99.9=11759, 99.99=17247] [UPDATE: Count=281780, Max=10991, Min=322, Avg=1915.12, 90=2929, 99=4235, 99.9=6395, 99.99=7731] 
2023-06-05 12:37:32:473 310 sec: 17385938 operations; 56249.4 current ops/sec; [READ: Count=281053, Max=91455, Min=382, Avg=3565.56, 90=5427, 99=8847, 99.9=24319, 99.99=48639] [UPDATE: Count=281524, Max=13527, Min=331, Avg=1915.64, 90=2919, 99=4351, 99.9=6943, 99.99=8991] 
2023-06-05 12:37:42:473 320 sec: 17948427 operations; 56248.9 current ops/sec; [READ: Count=281376, Max=36031, Min=410, Avg=3444.6, 90=5295, 99=8359, 99.9=19519, 99.99=25775] [UPDATE: Count=281104, Max=12359, Min=332, Avg=1869.14, 90=2845, 99=4279, 99.9=7031, 99.99=9631] 
2023-06-05 12:37:52:473 330 sec: 18510916 operations; 56248.9 current ops/sec; [READ: Count=281284, Max=28847, Min=408, Avg=3441.16, 90=5275, 99=9231, 99.9=20959, 99.99=24687] [UPDATE: Count=281110, Max=17759, Min=320, Avg=1858.73, 90=2815, 99=4527, 99.9=8143, 99.99=11439] 
2023-06-05 12:38:02:473 340 sec: 19073428 operations; 56251.2 current ops/sec; [READ: Count=281968, Max=29871, Min=383, Avg=3397.91, 90=5207, 99=9063, 99.9=21423, 99.99=25423] [UPDATE: Count=280057, Max=26863, Min=342, Avg=1849.32, 90=2777, 99=4555, 99.9=8559, 99.99=16039] 
2023-06-05 12:38:12:473 350 sec: 19635947 operations; 56251.9 current ops/sec; [READ: Count=281352, Max=30415, Min=410, Avg=3429.32, 90=5227, 99=9015, 99.9=20959, 99.99=25135] [UPDATE: Count=281746, Max=18831, Min=324, Avg=1851.25, 90=2781, 99=4343, 99.9=7343, 99.99=10207] 
2023-06-05 12:38:22:473 360 sec: 20198456 operations; 56250.9 current ops/sec; [READ: Count=280559, Max=24495, Min=372, Avg=3318.79, 90=5075, 99=7503, 99.9=11879, 99.99=21631] [UPDATE: Count=281897, Max=15719, Min=338, Avg=1827.25, 90=2751, 99=3949, 99.9=6351, 99.99=7791] 
2023-06-05 12:38:32:473 370 sec: 20760975 operations; 56251.9 current ops/sec; [READ: Count=281097, Max=51679, Min=372, Avg=3318.34, 90=5099, 99=7567, 99.9=11863, 99.99=25327] [UPDATE: Count=281400, Max=11983, Min=332, Avg=1827.58, 90=2763, 99=3999, 99.9=6319, 99.99=8199] 
2023-06-05 12:38:42:474 380 sec: 21323337 operations; 56230.58 current ops/sec; [READ: Count=280854, Max=24047, Min=413, Avg=3285.67, 90=5059, 99=7435, 99.9=9839, 99.99=12511] [UPDATE: Count=281620, Max=10695, Min=324, Avg=1814.98, 90=2751, 99=3937, 99.9=6095, 99.99=7479] 
2023-06-05 12:38:52:473 390 sec: 21885949 operations; 56266.83 current ops/sec; [READ: Count=281275, Max=28447, Min=406, Avg=3354.54, 90=5163, 99=7627, 99.9=10431, 99.99=15527] [UPDATE: Count=281230, Max=17007, Min=328, Avg=1843.54, 90=2797, 99=3997, 99.9=6375, 99.99=9663] 
2023-06-05 12:39:02:473 400 sec: 22448427 operations; 56247.8 current ops/sec; [READ: Count=281345, Max=19055, Min=396, Avg=3443.59, 90=5315, 99=7759, 99.9=10655, 99.99=14855] [UPDATE: Count=281113, Max=17215, Min=335, Avg=1887.97, 90=2875, 99=4099, 99.9=6335, 99.99=9343] 
2023-06-05 12:39:12:473 410 sec: 23010934 operations; 56250.7 current ops/sec; [READ: Count=281778, Max=25343, Min=390, Avg=3539.26, 90=5471, 99=8335, 99.9=14255, 99.99=21503] [UPDATE: Count=280747, Max=12263, Min=297, Avg=1918.56, 90=2931, 99=4271, 99.9=6567, 99.99=9191] 
2023-06-05 12:39:22:473 420 sec: 23573406 operations; 56247.2 current ops/sec; [READ: Count=280598, Max=19887, Min=396, Avg=3553.27, 90=5491, 99=8155, 99.9=11231, 99.99=15327] [UPDATE: Count=281858, Max=10543, Min=336, Avg=1927.83, 90=2939, 99=4199, 99.9=6423, 99.99=7995] 
2023-06-05 12:39:32:473 430 sec: 24135929 operations; 56252.3 current ops/sec; [READ: Count=280807, Max=21295, Min=410, Avg=3614.06, 90=5579, 99=8263, 99.9=11175, 99.99=15159] [UPDATE: Count=281685, Max=17055, Min=331, Avg=1955.61, 90=2997, 99=4275, 99.9=6419, 99.99=7811] 
2023-06-05 12:39:42:473 440 sec: 24698427 operations; 56249.8 current ops/sec; [READ: Count=281033, Max=19071, Min=399, Avg=3604.02, 90=5563, 99=8207, 99.9=11007, 99.99=14511] [UPDATE: Count=281484, Max=9223, Min=333, Avg=1949.71, 90=2989, 99=4203, 99.9=6247, 99.99=7687] 
2023-06-05 12:39:52:473 450 sec: 25260882 operations; 56245.5 current ops/sec; [READ: Count=281640, Max=31503, Min=397, Avg=3631.55, 90=5615, 99=8471, 99.9=13847, 99.99=22191] [UPDATE: Count=280626, Max=23359, Min=329, Avg=1965.9, 90=3005, 99=4399, 99.9=7523, 99.99=16831] 
2023-06-05 12:40:02:473 460 sec: 25823293 operations; 56241.1 current ops/sec; [READ: Count=281182, Max=38719, Min=410, Avg=3683.03, 90=5683, 99=9431, 99.9=20287, 99.99=31119] [UPDATE: Count=281472, Max=16703, Min=337, Avg=1966.16, 90=3009, 99=4575, 99.9=7223, 99.99=11671] 
2023-06-05 12:40:12:473 470 sec: 26381891 operations; 55859.8 current ops/sec; [READ: Count=278944, Max=184319, Min=403, Avg=4187.42, 90=6227, 99=20095, 99.9=36543, 99.99=122303] [UPDATE: Count=279819, Max=14055, Min=301, Avg=2063.55, 90=3133, 99=5859, 99.9=8647, 99.99=10375] 
2023-06-05 12:40:22:473 480 sec: 26947137 operations; 56524.6 current ops/sec; [READ: Count=283664, Max=321279, Min=412, Avg=4555.65, 90=6015, 99=23871, 99.9=138111, 99.99=244351] [UPDATE: Count=281570, Max=15175, Min=321, Avg=2046.68, 90=3083, 99=5655, 99.9=8863, 99.99=11415] 
2023-06-05 12:40:32:473 490 sec: 27510938 operations; 56380.1 current ops/sec; [READ: Count=282584, Max=82751, Min=390, Avg=3729.76, 90=5679, 99=9367, 99.9=23967, 99.99=74431] [UPDATE: Count=280574, Max=31391, Min=324, Avg=1985.87, 90=3011, 99=4627, 99.9=8439, 99.99=19247] 
2023-06-05 12:40:42:473 500 sec: 28073420 operations; 56248.2 current ops/sec; [READ: Count=280828, Max=36671, Min=403, Avg=3661.86, 90=5651, 99=9439, 99.9=19551, 99.99=29567] [UPDATE: Count=282109, Max=15167, Min=332, Avg=1950.29, 90=2983, 99=4263, 99.9=6835, 99.99=9527] 
2023-06-05 12:40:52:473 510 sec: 28635845 operations; 56242.5 current ops/sec; [READ: Count=281431, Max=38079, Min=396, Avg=3609.41, 90=5579, 99=8895, 99.9=23327, 99.99=32799] [UPDATE: Count=280999, Max=18271, Min=333, Avg=1927.85, 90=2953, 99=4287, 99.9=6979, 99.99=10047] 
2023-06-05 12:41:02:473 520 sec: 29198424 operations; 56257.9 current ops/sec; [READ: Count=280542, Max=84415, Min=404, Avg=3683.18, 90=5691, 99=8959, 99.9=25615, 99.99=43551] [UPDATE: Count=282133, Max=16639, Min=344, Avg=1957.12, 90=2999, 99=4479, 99.9=7155, 99.99=9695] 
2023-06-05 12:41:12:473 530 sec: 29760907 operations; 56248.3 current ops/sec; [READ: Count=281865, Max=24399, Min=406, Avg=3692.18, 90=5735, 99=9087, 99.9=17375, 99.99=21103] [UPDATE: Count=280525, Max=11591, Min=343, Avg=1965.65, 90=3007, 99=4543, 99.9=7267, 99.99=9439] 
2023-06-05 12:41:22:473 540 sec: 30323411 operations; 56250.4 current ops/sec; [READ: Count=280364, Max=26687, Min=403, Avg=3680.18, 90=5731, 99=8831, 99.9=13847, 99.99=20975] [UPDATE: Count=282153, Max=11983, Min=334, Avg=1968.74, 90=3015, 99=4459, 99.9=6883, 99.99=8839] 
2023-06-05 12:41:32:473 550 sec: 30885847 operations; 56243.6 current ops/sec; [READ: Count=281048, Max=36415, Min=432, Avg=3806.99, 90=5883, 99=10031, 99.9=22143, 99.99=27471] [UPDATE: Count=281422, Max=12671, Min=326, Avg=2005.19, 90=3075, 99=4671, 99.9=7499, 99.99=9375] 
2023-06-05 12:41:42:473 560 sec: 31448256 operations; 56240.9 current ops/sec; [READ: Count=281479, Max=111743, Min=402, Avg=3853.98, 90=5899, 99=11351, 99.9=25295, 99.99=33023] [UPDATE: Count=280964, Max=12815, Min=312, Avg=2012.44, 90=3077, 99=4955, 99.9=8279, 99.99=10191] 
2023-06-05 12:41:52:473 570 sec: 31992230 operations; 54397.4 current ops/sec; [READ: Count=271405, Max=403199, Min=408, Avg=4759.03, 90=5651, 99=13215, 99.9=226687, 99.99=369663] [UPDATE: Count=272645, Max=18623, Min=322, Avg=1948.78, 90=2993, 99=4915, 99.9=8567, 99.99=10655] 
2023-06-05 12:42:02:473 580 sec: 32548899 operations; 55666.9 current ops/sec; [READ: Count=278608, Max=371711, Min=414, Avg=4970.95, 90=5903, 99=19231, 99.9=229247, 99.99=281343] [UPDATE: Count=278079, Max=18975, Min=336, Avg=2012.07, 90=3063, 99=4919, 99.9=8083, 99.99=10775] 
2023-06-05 12:42:12:473 590 sec: 33092761 operations; 54386.2 current ops/sec; [READ: Count=271964, Max=313855, Min=390, Avg=5158.49, 90=6555, 99=23567, 99.9=192127, 99.99=255871] [UPDATE: Count=271841, Max=13143, Min=311, Avg=2099.1, 90=3197, 99=6039, 99.9=8527, 99.99=10431] 
2023-06-05 12:42:22:473 600 sec: 33584508 operations; 49174.7 current ops/sec; [READ: Count=245430, Max=553471, Min=378, Avg=6033.01, 90=7031, 99=48735, 99.9=325119, 99.99=329727] [UPDATE: Count=246305, Max=17583, Min=318, Avg=2091.38, 90=3249, 99=6691, 99.9=8999, 99.99=10775] 
2023-06-05 12:42:32:473 610 sec: 34103616 operations; 51910.8 current ops/sec; [READ: Count=259909, Max=331519, Min=397, Avg=5582.79, 90=6983, 99=34047, 99.9=321535, 99.99=327935] [UPDATE: Count=259310, Max=13687, Min=315, Avg=2130.47, 90=3293, 99=6311, 99.9=8751, 99.99=10807] 
2023-06-05 12:42:42:473 620 sec: 34654691 operations; 55107.5 current ops/sec; [READ: Count=274931, Max=319743, Min=416, Avg=5098.66, 90=6935, 99=31487, 99.9=160895, 99.99=267007] [UPDATE: Count=276013, Max=11543, Min=346, Avg=2166.17, 90=3321, 99=6003, 99.9=8099, 99.99=9567] 
2023-06-05 12:42:52:473 630 sec: 35214457 operations; 55976.6 current ops/sec; [READ: Count=280527, Max=233599, Min=404, Avg=4957.14, 90=6883, 99=30383, 99.9=132735, 99.99=152703] [UPDATE: Count=279322, Max=25583, Min=321, Avg=2178.48, 90=3323, 99=6163, 99.9=8591, 99.99=11311] 
2023-06-05 12:43:02:473 640 sec: 35788973 operations; 57451.6 current ops/sec; [READ: Count=287949, Max=150655, Min=402, Avg=4792.69, 90=6643, 99=18911, 99.9=134015, 99.99=140927] [UPDATE: Count=286768, Max=18383, Min=338, Avg=2160.89, 90=3273, 99=5391, 99.9=7867, 99.99=10479] 
2023-06-05 12:43:12:473 650 sec: 36356292 operations; 56731.9 current ops/sec; [READ: Count=283742, Max=280063, Min=420, Avg=4857.76, 90=6735, 99=20959, 99.9=144767, 99.99=178047] [UPDATE: Count=283447, Max=15167, Min=325, Avg=2186.18, 90=3309, 99=5691, 99.9=8255, 99.99=10095] 
2023-06-05 12:43:22:473 660 sec: 36933032 operations; 57674 current ops/sec; [READ: Count=288636, Max=259071, Min=408, Avg=4730.47, 90=6707, 99=16191, 99.9=158207, 99.99=211071] [UPDATE: Count=288075, Max=16671, Min=341, Avg=2195.94, 90=3315, 99=5319, 99.9=7867, 99.99=9583] 
2023-06-05 12:43:32:473 670 sec: 37517572 operations; 58454 current ops/sec; [READ: Count=292468, Max=174335, Min=416, Avg=4575.31, 90=6971, 99=14287, 99.9=48415, 99.99=113087] [UPDATE: Count=292075, Max=15631, Min=336, Avg=2255.68, 90=3387, 99=5411, 99.9=8019, 99.99=10103] 
2023-06-05 12:43:42:473 680 sec: 38105287 operations; 58771.5 current ops/sec; [READ: Count=294015, Max=30895, Min=429, Avg=4499.11, 90=6943, 99=12191, 99.9=20911, 99.99=25359] [UPDATE: Count=293596, Max=23679, Min=331, Avg=2278.54, 90=3397, 99=5095, 99.9=7747, 99.99=14439] 
2023-06-05 12:43:52:473 690 sec: 38683953 operations; 57866.6 current ops/sec; [READ: Count=289156, Max=125119, Min=422, Avg=4605.37, 90=6799, 99=14023, 99.9=81599, 99.99=88703] [UPDATE: Count=289521, Max=18383, Min=353, Avg=2268.75, 90=3367, 99=5275, 99.9=8167, 99.99=10951] 
2023-06-05 12:44:02:473 700 sec: 39259017 operations; 57506.4 current ops/sec; [READ: Count=287036, Max=104063, Min=424, Avg=4631.96, 90=6763, 99=14111, 99.9=71423, 99.99=86079] [UPDATE: Count=288010, Max=17807, Min=325, Avg=2284.62, 90=3377, 99=5279, 99.9=8655, 99.99=10887] 
2023-06-05 12:44:12:473 710 sec: 39829128 operations; 57011.1 current ops/sec; [READ: Count=285154, Max=66943, Min=421, Avg=4652.38, 90=6859, 99=16015, 99.9=40479, 99.99=49119] [UPDATE: Count=284996, Max=13079, Min=335, Avg=2320.01, 90=3417, 99=5423, 99.9=8743, 99.99=10799] 
2023-06-05 12:44:22:473 720 sec: 40380020 operations; 55089.2 current ops/sec; [READ: Count=275408, Max=224767, Min=413, Avg=4935.26, 90=6731, 99=21615, 99.9=134399, 99.99=153983] [UPDATE: Count=275577, Max=13303, Min=334, Avg=2297.11, 90=3387, 99=5903, 99.9=8967, 99.99=10935] 
2023-06-05 12:44:32:473 730 sec: 40943502 operations; 56348.2 current ops/sec; [READ: Count=281565, Max=134911, Min=414, Avg=4735.28, 90=7039, 99=15471, 99.9=33023, 99.99=114751] [UPDATE: Count=281848, Max=13999, Min=344, Avg=2360.33, 90=3471, 99=5695, 99.9=8799, 99.99=10759] 
2023-06-05 12:44:42:473 740 sec: 41504783 operations; 56128.1 current ops/sec; [READ: Count=280899, Max=45407, Min=374, Avg=4762.41, 90=7063, 99=18927, 99.9=32463, 99.99=36991] [UPDATE: Count=280378, Max=13287, Min=322, Avg=2355.82, 90=3471, 99=5959, 99.9=9135, 99.99=11135] 
2023-06-05 12:44:52:473 750 sec: 42072522 operations; 56773.9 current ops/sec; [READ: Count=283537, Max=46111, Min=396, Avg=4693.82, 90=6999, 99=16295, 99.9=27759, 99.99=33663] [UPDATE: Count=284171, Max=24671, Min=347, Avg=2344.73, 90=3451, 99=5607, 99.9=8727, 99.99=11983] 
2023-06-05 12:45:02:473 760 sec: 42639156 operations; 56663.4 current ops/sec; [READ: Count=283122, Max=38559, Min=423, Avg=4690.58, 90=6943, 99=17759, 99.9=26079, 99.99=30863] [UPDATE: Count=283482, Max=18015, Min=342, Avg=2351.51, 90=3441, 99=5907, 99.9=9167, 99.99=11871] 
2023-06-05 12:45:12:473 770 sec: 43194160 operations; 55500.4 current ops/sec; [READ: Count=277685, Max=387071, Min=413, Avg=4831.5, 90=6947, 99=21359, 99.9=34911, 99.99=243583] [UPDATE: Count=276903, Max=18367, Min=350, Avg=2350.86, 90=3445, 99=5983, 99.9=9295, 99.99=12151] 
2023-06-05 12:45:22:474 780 sec: 43715050 operations; 52083.79 current ops/sec; [READ: Count=260310, Max=523519, Min=411, Avg=5431.82, 90=6383, 99=20975, 99.9=273407, 99.99=278527] [UPDATE: Count=261042, Max=19439, Min=330, Avg=2234.72, 90=3311, 99=5503, 99.9=8607, 99.99=10855] 
2023-06-05 12:45:32:473 790 sec: 44269155 operations; 55416.04 current ops/sec; [READ: Count=277191, Max=284159, Min=381, Avg=4969.63, 90=6527, 99=14599, 99.9=270335, 99.99=275199] [UPDATE: Count=276920, Max=11727, Min=333, Avg=2254.67, 90=3327, 99=5131, 99.9=7627, 99.99=9303] 
2023-06-05 12:45:42:473 800 sec: 44848287 operations; 57913.2 current ops/sec; [READ: Count=290423, Max=56927, Min=440, Avg=4562.78, 90=6935, 99=10935, 99.9=20063, 99.99=31663] [UPDATE: Count=288702, Max=12607, Min=344, Avg=2329.17, 90=3419, 99=4935, 99.9=7235, 99.99=9615] 
2023-06-05 12:45:52:473 810 sec: 45423873 operations; 57558.6 current ops/sec; [READ: Count=287633, Max=39295, Min=442, Avg=4588.15, 90=6927, 99=11199, 99.9=19535, 99.99=29663] [UPDATE: Count=287931, Max=22431, Min=343, Avg=2346.6, 90=3431, 99=4983, 99.9=7279, 99.99=9671] 
2023-06-05 12:46:02:473 820 sec: 46000988 operations; 57711.5 current ops/sec; [READ: Count=288677, Max=28239, Min=428, Avg=4545.01, 90=6807, 99=10359, 99.9=14959, 99.99=20479] [UPDATE: Count=288404, Max=18991, Min=321, Avg=2352.71, 90=3425, 99=4923, 99.9=7207, 99.99=9039] 
2023-06-05 12:46:12:473 830 sec: 46575880 operations; 57489.2 current ops/sec; [READ: Count=287442, Max=110463, Min=398, Avg=4563.07, 90=6795, 99=10639, 99.9=20783, 99.99=52127] [UPDATE: Count=287424, Max=13951, Min=349, Avg=2352.71, 90=3421, 99=4911, 99.9=7175, 99.99=8943] 
2023-06-05 12:46:22:473 840 sec: 47150691 operations; 57481.1 current ops/sec; [READ: Count=286981, Max=31087, Min=426, Avg=4538.96, 90=6783, 99=10183, 99.9=14991, 99.99=21423] [UPDATE: Count=287734, Max=12103, Min=321, Avg=2355.91, 90=3429, 99=4843, 99.9=7039, 99.99=8527] 
2023-06-05 12:46:32:473 850 sec: 47714800 operations; 56410.9 current ops/sec; [READ: Count=282057, Max=90559, Min=420, Avg=4651.12, 90=6795, 99=11375, 99.9=28959, 99.99=55647] [UPDATE: Count=282129, Max=16511, Min=328, Avg=2391.92, 90=3451, 99=4979, 99.9=7771, 99.99=10615] 
2023-06-05 12:46:42:473 860 sec: 48274349 operations; 55954.9 current ops/sec; [READ: Count=280217, Max=52415, Min=422, Avg=4715.78, 90=6887, 99=12551, 99.9=25823, 99.99=37631] [UPDATE: Count=279319, Max=14487, Min=330, Avg=2417.85, 90=3475, 99=5243, 99.9=8447, 99.99=10439] 
2023-06-05 12:46:52:473 870 sec: 48836898 operations; 56254.9 current ops/sec; [READ: Count=281496, Max=35743, Min=409, Avg=4682.36, 90=6859, 99=11599, 99.9=25295, 99.99=29743] [UPDATE: Count=280940, Max=26479, Min=322, Avg=2412.68, 90=3467, 99=5107, 99.9=8067, 99.99=10839] 
2023-06-05 12:47:02:473 880 sec: 49397957 operations; 56105.9 current ops/sec; [READ: Count=280367, Max=35839, Min=424, Avg=4708.26, 90=6927, 99=12759, 99.9=25183, 99.99=29743] [UPDATE: Count=280798, Max=19487, Min=339, Avg=2410.07, 90=3473, 99=5335, 99.9=8319, 99.99=10631] 
2023-06-05 12:47:12:473 890 sec: 49957158 operations; 55920.1 current ops/sec; [READ: Count=279038, Max=62079, Min=419, Avg=4740.36, 90=6991, 99=14031, 99.9=23055, 99.99=30991] [UPDATE: Count=279860, Max=18463, Min=317, Avg=2412.33, 90=3475, 99=5483, 99.9=8375, 99.99=11935] 
2023-06-05 12:47:22:473 900 sec: 50512914 operations; 55575.6 current ops/sec; [READ: Count=278147, Max=82623, Min=437, Avg=4795.38, 90=6935, 99=17807, 99.9=42463, 99.99=55807] [UPDATE: Count=277966, Max=21679, Min=330, Avg=2393.29, 90=3443, 99=5791, 99.9=8823, 99.99=11423] 
2023-06-05 12:47:32:473 910 sec: 51070767 operations; 55785.3 current ops/sec; [READ: Count=278956, Max=45183, Min=439, Avg=4753.97, 90=6899, 99=16231, 99.9=25663, 99.99=30255] [UPDATE: Count=278835, Max=12391, Min=344, Avg=2412.68, 90=3459, 99=5655, 99.9=8591, 99.99=10479] 
2023-06-05 12:47:42:473 920 sec: 51631153 operations; 56038.6 current ops/sec; [READ: Count=280616, Max=38431, Min=418, Avg=4714.37, 90=6779, 99=13471, 99.9=26639, 99.99=31247] [UPDATE: Count=279802, Max=13695, Min=328, Avg=2416.74, 90=3447, 99=5159, 99.9=8011, 99.99=10007] 
2023-06-05 12:47:52:473 930 sec: 52192606 operations; 56145.3 current ops/sec; [READ: Count=281003, Max=39199, Min=393, Avg=4707.82, 90=6779, 99=13527, 99.9=24415, 99.99=28415] [UPDATE: Count=280365, Max=18415, Min=340, Avg=2411.05, 90=3431, 99=5151, 99.9=7711, 99.99=11191] 
2023-06-05 12:48:02:473 940 sec: 52756551 operations; 56394.5 current ops/sec; [READ: Count=281984, Max=30143, Min=410, Avg=4677.62, 90=6831, 99=11887, 99.9=22335, 99.99=26127] [UPDATE: Count=282003, Max=18719, Min=354, Avg=2410.85, 90=3453, 99=5043, 99.9=7555, 99.99=9479] 
2023-06-05 12:48:12:473 950 sec: 53321018 operations; 56446.7 current ops/sec; [READ: Count=282593, Max=30159, Min=417, Avg=4675.09, 90=6907, 99=11471, 99.9=21055, 99.99=25103] [UPDATE: Count=281874, Max=12303, Min=347, Avg=2402.18, 90=3461, 99=5023, 99.9=7331, 99.99=8543] 
2023-06-05 12:48:22:474 960 sec: 53889077 operations; 56800.22 current ops/sec; [READ: Count=284316, Max=33631, Min=409, Avg=4638.66, 90=6831, 99=11503, 99.9=20719, 99.99=24095] [UPDATE: Count=283842, Max=14575, Min=342, Avg=2390.56, 90=3441, 99=5031, 99.9=7547, 99.99=9591] 
2023-06-05 12:48:32:473 970 sec: 54461993 operations; 57297.33 current ops/sec; [READ: Count=286910, Max=44095, Min=419, Avg=4579.13, 90=6795, 99=10503, 99.9=17743, 99.99=30159] [UPDATE: Count=285917, Max=11943, Min=344, Avg=2374.16, 90=3429, 99=4947, 99.9=7315, 99.99=8951] 
2023-06-05 12:48:42:473 980 sec: 55030567 operations; 56857.4 current ops/sec; [READ: Count=284558, Max=89215, Min=421, Avg=4634.11, 90=6763, 99=11679, 99.9=38655, 99.99=51839] [UPDATE: Count=284123, Max=13543, Min=339, Avg=2361.96, 90=3417, 99=5019, 99.9=7591, 99.99=9447] 
2023-06-05 12:48:52:473 990 sec: 55591888 operations; 56132.1 current ops/sec; [READ: Count=280450, Max=122303, Min=395, Avg=4749.79, 90=6735, 99=12183, 99.9=70399, 99.99=77759] [UPDATE: Count=280821, Max=31375, Min=335, Avg=2353.23, 90=3405, 99=5059, 99.9=7727, 99.99=10383] 
2023-06-05 12:49:02:473 1000 sec: 56158738 operations; 56685 current ops/sec; [READ: Count=283113, Max=64575, Min=429, Avg=4672.27, 90=6779, 99=11655, 99.9=49759, 99.99=58911] [UPDATE: Count=283099, Max=26543, Min=329, Avg=2365.54, 90=3413, 99=5099, 99.9=8271, 99.99=16559] 
2023-06-05 12:49:12:473 1010 sec: 56724977 operations; 56623.9 current ops/sec; [READ: Count=283244, Max=48159, Min=406, Avg=4670.23, 90=6895, 99=13199, 99.9=29183, 99.99=35071] [UPDATE: Count=283672, Max=18879, Min=324, Avg=2350.52, 90=3419, 99=5127, 99.9=7579, 99.99=10215] 
2023-06-05 12:49:22:473 1020 sec: 57296847 operations; 57187 current ops/sec; [READ: Count=285958, Max=32799, Min=406, Avg=4557.15, 90=6811, 99=11095, 99.9=22031, 99.99=28127] [UPDATE: Count=285764, Max=11079, Min=337, Avg=2339.38, 90=3411, 99=4939, 99.9=7339, 99.99=8999] 
2023-06-05 12:49:32:473 1030 sec: 57864397 operations; 56755 current ops/sec; [READ: Count=283583, Max=29167, Min=415, Avg=4565.96, 90=6791, 99=10479, 99.9=16815, 99.99=23103] [UPDATE: Count=283915, Max=22223, Min=334, Avg=2367.07, 90=3427, 99=4903, 99.9=7519, 99.99=14111] 
2023-06-05 12:49:42:473 1040 sec: 58427399 operations; 56300.2 current ops/sec; [READ: Count=281268, Max=76159, Min=414, Avg=4620.44, 90=6823, 99=11407, 99.9=25615, 99.99=62463] [UPDATE: Count=281997, Max=64287, Min=333, Avg=2371.26, 90=3427, 99=5007, 99.9=7795, 99.99=59039] 
2023-06-05 12:49:52:473 1050 sec: 58992967 operations; 56556.8 current ops/sec; [READ: Count=282830, Max=38175, Min=422, Avg=4653.8, 90=6891, 99=13207, 99.9=25487, 99.99=29647] [UPDATE: Count=282601, Max=15479, Min=335, Avg=2359.99, 90=3431, 99=5207, 99.9=7971, 99.99=10527] 
2023-06-05 12:50:02:473 1060 sec: 59559187 operations; 56622 current ops/sec; [READ: Count=283988, Max=41663, Min=406, Avg=4600.53, 90=6851, 99=11823, 99.9=24735, 99.99=29487] [UPDATE: Count=282196, Max=18239, Min=334, Avg=2346.58, 90=3411, 99=5051, 99.9=7755, 99.99=10151] 
2023-06-05 12:50:12:473 1070 sec: 60105733 operations; 54654.6 current ops/sec; [READ: Count=273582, Max=190719, Min=386, Avg=4906.41, 90=6927, 99=17599, 99.9=97087, 99.99=152831] [UPDATE: Count=273010, Max=13791, Min=329, Avg=2335.16, 90=3417, 99=5459, 99.9=7883, 99.99=9647] 
2023-06-05 12:50:22:475 1080 sec: 60662931 operations; 55708.66 current ops/sec; [READ: Count=278921, Max=142975, Min=401, Avg=4834.69, 90=7039, 99=16055, 99.9=80191, 99.99=117439] [UPDATE: Count=278553, Max=13071, Min=327, Avg=2338.24, 90=3413, 99=5411, 99.9=8303, 99.99=10263] 
2023-06-05 12:50:32:473 1090 sec: 61233727 operations; 57091.02 current ops/sec; [READ: Count=285325, Max=36223, Min=441, Avg=4640.69, 90=6907, 99=12391, 99.9=25887, 99.99=29855] [UPDATE: Count=285200, Max=13639, Min=347, Avg=2354.3, 90=3411, 99=5035, 99.9=8127, 99.99=10295] 
2023-06-05 12:50:42:473 1100 sec: 61800947 operations; 56722 current ops/sec; [READ: Count=283515, Max=42591, Min=440, Avg=4661.79, 90=6915, 99=13055, 99.9=25711, 99.99=29951] [UPDATE: Count=283739, Max=12871, Min=326, Avg=2365.38, 90=3419, 99=5139, 99.9=8059, 99.99=10351] 
2023-06-05 12:50:52:473 1110 sec: 62368721 operations; 56777.4 current ops/sec; [READ: Count=283668, Max=37759, Min=422, Avg=4630.46, 90=6915, 99=12247, 99.9=23759, 99.99=28799] [UPDATE: Count=284157, Max=17839, Min=332, Avg=2357.09, 90=3417, 99=5083, 99.9=7807, 99.99=12127] 
2023-06-05 12:51:02:473 1120 sec: 62930661 operations; 56194 current ops/sec; [READ: Count=281003, Max=126911, Min=425, Avg=4716.9, 90=6815, 99=12831, 99.9=66943, 99.99=78079] [UPDATE: Count=280922, Max=15767, Min=335, Avg=2331.74, 90=3393, 99=5071, 99.9=8231, 99.99=10479] 
2023-06-05 12:51:12:473 1130 sec: 63496215 operations; 56555.4 current ops/sec; [READ: Count=282480, Max=78335, Min=430, Avg=4682.57, 90=6827, 99=12391, 99.9=60447, 99.99=72575] [UPDATE: Count=283053, Max=14287, Min=341, Avg=2337.94, 90=3401, 99=5083, 99.9=8171, 99.99=10535] 
2023-06-05 12:51:22:473 1140 sec: 64054174 operations; 55795.9 current ops/sec; [READ: Count=279079, Max=187135, Min=399, Avg=4802.52, 90=6907, 99=18351, 99.9=82687, 99.99=116991] [UPDATE: Count=278897, Max=12647, Min=329, Avg=2328.94, 90=3393, 99=5855, 99.9=9215, 99.99=10959] 
2023-06-05 12:51:32:473 1150 sec: 64622266 operations; 56809.2 current ops/sec; [READ: Count=284660, Max=50719, Min=429, Avg=4654.43, 90=6899, 99=17199, 99.9=28303, 99.99=32831] [UPDATE: Count=283401, Max=14599, Min=349, Avg=2325.24, 90=3393, 99=5695, 99.9=9079, 99.99=11287] 
2023-06-05 12:51:42:476 1160 sec: 65190515 operations; 56807.86 current ops/sec; [READ: Count=283985, Max=39039, Min=407, Avg=4608.16, 90=6879, 99=15887, 99.9=25375, 99.99=29423] [UPDATE: Count=284377, Max=16735, Min=342, Avg=2309.23, 90=3383, 99=5495, 99.9=8671, 99.99=10607] 
2023-06-05 12:51:52:473 1170 sec: 65757486 operations; 56714.11 current ops/sec; [READ: Count=283594, Max=35935, Min=409, Avg=4452.04, 90=6703, 99=13111, 99.9=23215, 99.99=27887] [UPDATE: Count=283281, Max=18399, Min=362, Avg=2264.9, 90=3343, 99=5103, 99.9=7963, 99.99=10807] 
2023-06-05 12:52:02:473 1180 sec: 66321547 operations; 56406.1 current ops/sec; [READ: Count=282546, Max=37855, Min=404, Avg=4469.12, 90=6707, 99=14215, 99.9=24207, 99.99=28607] [UPDATE: Count=281411, Max=19647, Min=342, Avg=2265.02, 90=3337, 99=5391, 99.9=8431, 99.99=10983] 
2023-06-05 12:52:12:473 1190 sec: 66881622 operations; 56007.5 current ops/sec; [READ: Count=279777, Max=127615, Min=369, Avg=4635.41, 90=6743, 99=16111, 99.9=81983, 99.99=88063] [UPDATE: Count=280324, Max=18607, Min=311, Avg=2277.83, 90=3355, 99=5379, 99.9=8375, 99.99=10135] 
2023-06-05 12:52:22:473 1200 sec: 67447926 operations; 56630.4 current ops/sec; [READ: Count=283458, Max=91455, Min=435, Avg=4456.71, 90=6679, 99=11823, 99.9=26991, 99.99=84607] [UPDATE: Count=282940, Max=13239, Min=330, Avg=2254.45, 90=3329, 99=4991, 99.9=7331, 99.99=9127] 
2023-06-05 12:52:32:473 1210 sec: 68010748 operations; 56282.2 current ops/sec; [READ: Count=280988, Max=32991, Min=418, Avg=4323.1, 90=6583, 99=10431, 99.9=16639, 99.99=25295] [UPDATE: Count=281747, Max=11287, Min=339, Avg=2228.72, 90=3285, 99=4779, 99.9=6887, 99.99=8519] 
2023-06-05 12:52:42:473 1220 sec: 68572971 operations; 56222.3 current ops/sec; [READ: Count=281587, Max=35775, Min=403, Avg=4376.71, 90=6711, 99=11063, 99.9=17599, 99.99=24735] [UPDATE: Count=280555, Max=14463, Min=336, Avg=2234.66, 90=3305, 99=4927, 99.9=7099, 99.99=8575] 
2023-06-05 12:52:52:473 1230 sec: 69132767 operations; 55979.6 current ops/sec; [READ: Count=279924, Max=227711, Min=434, Avg=4496.81, 90=6635, 99=11575, 99.9=69951, 99.99=171007] [UPDATE: Count=280045, Max=17871, Min=346, Avg=2227.44, 90=3291, 99=4895, 99.9=7223, 99.99=10239] 
2023-06-05 12:53:02:473 1240 sec: 69698070 operations; 56530.3 current ops/sec; [READ: Count=282303, Max=38751, Min=439, Avg=4431.91, 90=6751, 99=11223, 99.9=27279, 99.99=33855] [UPDATE: Count=282828, Max=19743, Min=329, Avg=2254.79, 90=3331, 99=4943, 99.9=7403, 99.99=10095] 
2023-06-05 12:53:12:473 1250 sec: 70258438 operations; 56036.8 current ops/sec; [READ: Count=280635, Max=35295, Min=425, Avg=4427.43, 90=6763, 99=12127, 99.9=19919, 99.99=28575] [UPDATE: Count=279377, Max=26335, Min=342, Avg=2260.31, 90=3347, 99=5087, 99.9=7819, 99.99=15159] 
2023-06-05 12:53:22:473 1260 sec: 70823043 operations; 56460.5 current ops/sec; [READ: Count=282144, Max=57439, Min=385, Avg=4396.83, 90=6687, 99=10967, 99.9=21391, 99.99=45535] [UPDATE: Count=282875, Max=25199, Min=346, Avg=2249.52, 90=3337, 99=4839, 99.9=7219, 99.99=10063] 
2023-06-05 12:53:32:473 1270 sec: 71385308 operations; 56226.5 current ops/sec; [READ: Count=280612, Max=37631, Min=434, Avg=4452.56, 90=6771, 99=11791, 99.9=22607, 99.99=27007] [UPDATE: Count=281693, Max=12639, Min=346, Avg=2266.95, 90=3357, 99=5035, 99.9=8095, 99.99=10207] 
2023-06-05 12:53:42:473 1280 sec: 71937391 operations; 55208.3 current ops/sec; [READ: Count=276266, Max=290559, Min=428, Avg=4816.04, 90=6699, 99=14631, 99.9=158207, 99.99=167039] [UPDATE: Count=275896, Max=15023, Min=334, Avg=2244.19, 90=3337, 99=5335, 99.9=8327, 99.99=10463] 
2023-06-05 12:53:52:473 1290 sec: 72505945 operations; 56855.4 current ops/sec; [READ: Count=283355, Max=142079, Min=437, Avg=4648.27, 90=6787, 99=12591, 99.9=89279, 99.99=135039] [UPDATE: Count=285167, Max=26271, Min=322, Avg=2274.14, 90=3371, 99=5091, 99.9=7831, 99.99=10463] 
2023-06-05 12:54:02:473 1300 sec: 73071399 operations; 56545.4 current ops/sec; [READ: Count=282158, Max=108031, Min=395, Avg=4563.75, 90=6703, 99=14119, 99.9=61023, 99.99=78591] [UPDATE: Count=283290, Max=19167, Min=326, Avg=2235.71, 90=3319, 99=5251, 99.9=8487, 99.99=11375] 
2023-06-05 12:54:12:473 1310 sec: 73629939 operations; 55854 current ops/sec; [READ: Count=279454, Max=260991, Min=414, Avg=4687.62, 90=6787, 99=19727, 99.9=60351, 99.99=165375] [UPDATE: Count=279099, Max=26479, Min=335, Avg=2236.69, 90=3331, 99=5699, 99.9=9391, 99.99=11271] 
2023-06-05 12:54:22:473 1320 sec: 74180949 operations; 55101 current ops/sec; [READ: Count=275367, Max=171391, Min=403, Avg=4935.71, 90=6755, 99=22127, 99.9=159231, 99.99=165247] [UPDATE: Count=275678, Max=13119, Min=338, Avg=2210.03, 90=3303, 99=5999, 99.9=9231, 99.99=11111] 
2023-06-05 12:54:32:473 1330 sec: 74742351 operations; 56140.2 current ops/sec; [READ: Count=281004, Max=111231, Min=408, Avg=4845.58, 90=7023, 99=24943, 99.9=66239, 99.99=86783] [UPDATE: Count=280377, Max=18623, Min=328, Avg=2250.4, 90=3361, 99=6051, 99.9=9351, 99.99=11607] 
2023-06-05 12:54:42:473 1340 sec: 75304352 operations; 56200.1 current ops/sec; [READ: Count=280038, Max=188415, Min=395, Avg=4848.09, 90=7099, 99=23935, 99.9=80959, 99.99=103935] [UPDATE: Count=282001, Max=13127, Min=342, Avg=2246.31, 90=3367, 99=5907, 99.9=8807, 99.99=10711] 
2023-06-05 12:54:52:473 1350 sec: 75872266 operations; 56791.4 current ops/sec; [READ: Count=284546, Max=130879, Min=407, Avg=4726.16, 90=7083, 99=17263, 99.9=83327, 99.99=102399] [UPDATE: Count=283347, Max=19807, Min=344, Avg=2261.05, 90=3371, 99=5519, 99.9=8503, 99.99=10895] 
2023-06-05 12:55:02:473 1360 sec: 76443111 operations; 57084.5 current ops/sec; [READ: Count=286074, Max=67839, Min=425, Avg=4588.16, 90=7035, 99=13471, 99.9=28047, 99.99=35999] [UPDATE: Count=284642, Max=18399, Min=348, Avg=2274.72, 90=3383, 99=5227, 99.9=7719, 99.99=10335] 
2023-06-05 12:55:12:473 1370 sec: 76992909 operations; 54979.8 current ops/sec; [READ: Count=275026, Max=128639, Min=407, Avg=4848.39, 90=7211, 99=20127, 99.9=62015, 99.99=85695] [UPDATE: Count=274880, Max=17071, Min=343, Avg=2301.42, 90=3423, 99=5987, 99.9=8759, 99.99=10783] 
2023-06-05 12:55:22:473 1380 sec: 77552516 operations; 55960.7 current ops/sec; [READ: Count=279808, Max=98559, Min=415, Avg=4858.02, 90=7067, 99=20799, 99.9=81535, 99.99=86591] [UPDATE: Count=279858, Max=14671, Min=324, Avg=2282.45, 90=3397, 99=5671, 99.9=8671, 99.99=10799] 
2023-06-05 12:55:32:473 1390 sec: 78078456 operations; 52594 current ops/sec; [READ: Count=263621, Max=544255, Min=404, Avg=5369.93, 90=6531, 99=21151, 99.9=327423, 99.99=429567] [UPDATE: Count=262285, Max=15447, Min=339, Avg=2164.78, 90=3277, 99=5631, 99.9=9095, 99.99=10967] 
2023-06-05 12:55:42:473 1400 sec: 78612124 operations; 53366.8 current ops/sec; [READ: Count=266689, Max=406271, Min=414, Avg=5335.32, 90=6423, 99=16295, 99.9=372991, 99.99=398335] [UPDATE: Count=266887, Max=14175, Min=322, Avg=2126.16, 90=3223, 99=5283, 99.9=8295, 99.99=10239] 
2023-06-05 12:55:52:473 1410 sec: 79150398 operations; 53827.4 current ops/sec; [READ: Count=270063, Max=465663, Min=414, Avg=5301.56, 90=6387, 99=14823, 99.9=380927, 99.99=450559] [UPDATE: Count=268363, Max=28271, Min=325, Avg=2104.68, 90=3209, 99=5051, 99.9=8163, 99.99=12151] 
2023-06-05 12:56:02:473 1420 sec: 79714970 operations; 56457.2 current ops/sec; [READ: Count=281795, Max=371711, Min=401, Avg=4847.44, 90=7243, 99=18623, 99.9=81599, 99.99=313855] [UPDATE: Count=282755, Max=17311, Min=315, Avg=2252.72, 90=3401, 99=5703, 99.9=8607, 99.99=11487] 
2023-06-05 12:56:12:473 1430 sec: 80281808 operations; 56683.8 current ops/sec; [READ: Count=283717, Max=130815, Min=367, Avg=4773.36, 90=7307, 99=19775, 99.9=49343, 99.99=71615] [UPDATE: Count=283039, Max=13575, Min=341, Avg=2270.82, 90=3423, 99=5843, 99.9=8727, 99.99=10463] 
2023-06-05 12:56:22:473 1440 sec: 80841679 operations; 55987.1 current ops/sec; [READ: Count=280291, Max=184447, Min=419, Avg=4887.34, 90=7151, 99=23087, 99.9=93183, 99.99=137727] [UPDATE: Count=279674, Max=12487, Min=352, Avg=2242.38, 90=3393, 99=5843, 99.9=8375, 99.99=10047] 
2023-06-05 12:56:32:473 1450 sec: 81409258 operations; 56757.9 current ops/sec; [READ: Count=284408, Max=144895, Min=411, Avg=4784.29, 90=7227, 99=17711, 99.9=68223, 99.99=136575] [UPDATE: Count=283182, Max=12015, Min=335, Avg=2254.35, 90=3405, 99=5515, 99.9=8191, 99.99=10175] 
2023-06-05 12:56:42:473 1460 sec: 81977923 operations; 56866.5 current ops/sec; [READ: Count=283926, Max=66943, Min=412, Avg=4787.87, 90=7487, 99=17615, 99.9=33599, 99.99=54335] [UPDATE: Count=284699, Max=12095, Min=334, Avg=2243.05, 90=3397, 99=5443, 99.9=8087, 99.99=10087] 
2023-06-05 12:56:52:473 1470 sec: 82543684 operations; 56576.1 current ops/sec; [READ: Count=282810, Max=110463, Min=404, Avg=4802.4, 90=7355, 99=19711, 99.9=52223, 99.99=65535] [UPDATE: Count=282869, Max=31215, Min=306, Avg=2260.92, 90=3421, 99=5743, 99.9=8199, 99.99=10479] 
2023-06-05 12:57:02:473 1480 sec: 83099894 operations; 55621 current ops/sec; [READ: Count=277791, Max=278783, Min=402, Avg=4997.16, 90=6871, 99=21679, 99.9=161151, 99.99=202111] [UPDATE: Count=278528, Max=17759, Min=348, Avg=2186.51, 90=3313, 99=5423, 99.9=8175, 99.99=10343] 
2023-06-05 12:57:12:473 1490 sec: 83658590 operations; 55869.6 current ops/sec; [READ: Count=279214, Max=193407, Min=437, Avg=4917.47, 90=7023, 99=15663, 99.9=158591, 99.99=167167] [UPDATE: Count=279425, Max=11207, Min=342, Avg=2233.93, 90=3379, 99=5303, 99.9=7503, 99.99=9647] 
2023-06-05 12:57:22:473 1500 sec: 84226835 operations; 56824.5 current ops/sec; [READ: Count=284060, Max=141183, Min=402, Avg=4770.96, 90=7135, 99=14911, 99.9=83071, 99.99=113727] [UPDATE: Count=284203, Max=10759, Min=327, Avg=2260.08, 90=3397, 99=5255, 99.9=7451, 99.99=9015] 
2023-06-05 12:57:32:473 1510 sec: 84790520 operations; 56368.5 current ops/sec; [READ: Count=282045, Max=318463, Min=422, Avg=4805.74, 90=7059, 99=16751, 99.9=82943, 99.99=211711] [UPDATE: Count=281656, Max=15263, Min=326, Avg=2271.31, 90=3399, 99=5331, 99.9=7807, 99.99=9999] 
2023-06-05 12:57:42:473 1520 sec: 85349991 operations; 55947.1 current ops/sec; [READ: Count=280267, Max=133887, Min=446, Avg=4840.62, 90=7195, 99=20431, 99.9=78399, 99.99=97663] [UPDATE: Count=278813, Max=34495, Min=326, Avg=2304.55, 90=3419, 99=5775, 99.9=9143, 99.99=32479] 
2023-06-05 12:57:52:473 1530 sec: 85911353 operations; 56136.2 current ops/sec; [READ: Count=279761, Max=99647, Min=431, Avg=4856.6, 90=7191, 99=21119, 99.9=71871, 99.99=86271] [UPDATE: Count=281339, Max=28191, Min=321, Avg=2274.41, 90=3397, 99=5935, 99.9=9263, 99.99=15551] 
2023-06-05 12:58:02:473 1540 sec: 86471647 operations; 56029.4 current ops/sec; [READ: Count=279403, Max=67775, Min=412, Avg=4843.74, 90=7379, 99=20367, 99.9=47711, 99.99=60895] [UPDATE: Count=281478, Max=17247, Min=330, Avg=2292.06, 90=3421, 99=5847, 99.9=8831, 99.99=11415] 
2023-06-05 12:58:12:473 1550 sec: 87028394 operations; 55674.7 current ops/sec; [READ: Count=278436, Max=140159, Min=401, Avg=4879.3, 90=7287, 99=24271, 99.9=49887, 99.99=114495] [UPDATE: Count=278321, Max=13191, Min=331, Avg=2296.75, 90=3441, 99=5847, 99.9=8807, 99.99=10671] 
2023-06-05 12:58:22:473 1560 sec: 87584640 operations; 55624.6 current ops/sec; [READ: Count=278171, Max=125887, Min=399, Avg=4914.78, 90=7091, 99=24783, 99.9=98047, 99.99=117439] [UPDATE: Count=277897, Max=13671, Min=326, Avg=2274.98, 90=3397, 99=5971, 99.9=9255, 99.99=11039] 
2023-06-05 12:58:32:473 1570 sec: 88128229 operations; 54358.9 current ops/sec; [READ: Count=271932, Max=210047, Min=390, Avg=5080.78, 90=7123, 99=26495, 99.9=131967, 99.99=156543] [UPDATE: Count=271866, Max=15639, Min=331, Avg=2267.32, 90=3391, 99=6487, 99.9=9607, 99.99=11679] 
2023-06-05 12:58:42:473 1580 sec: 88676835 operations; 54860.6 current ops/sec; [READ: Count=274196, Max=121855, Min=424, Avg=5008.09, 90=7275, 99=25807, 99.9=85439, 99.99=115391] [UPDATE: Count=274392, Max=14663, Min=323, Avg=2283.88, 90=3423, 99=6467, 99.9=9247, 99.99=11071] 
2023-06-05 12:58:52:473 1590 sec: 89219674 operations; 54283.9 current ops/sec; [READ: Count=271413, Max=98559, Min=405, Avg=5053.82, 90=7427, 99=25583, 99.9=57919, 99.99=66879] [UPDATE: Count=271413, Max=23935, Min=336, Avg=2313.37, 90=3459, 99=6659, 99.9=9503, 99.99=11935] 
2023-06-05 12:59:02:473 1600 sec: 89756764 operations; 53709 current ops/sec; [READ: Count=268422, Max=269823, Min=416, Avg=5152.72, 90=7091, 99=25759, 99.9=116543, 99.99=218111] [UPDATE: Count=268849, Max=18447, Min=308, Avg=2288.67, 90=3417, 99=6471, 99.9=9183, 99.99=11951] 
2023-06-05 12:59:12:473 1610 sec: 90269927 operations; 51316.3 current ops/sec; [READ: Count=256281, Max=587263, Min=397, Avg=5605.08, 90=6363, 99=24095, 99.9=323071, 99.99=460287] [UPDATE: Count=256756, Max=13343, Min=307, Avg=2179.35, 90=3251, 99=5735, 99.9=8871, 99.99=10839] 
2023-06-05 12:59:22:473 1620 sec: 90798384 operations; 52845.7 current ops/sec; [READ: Count=264540, Max=379903, Min=408, Avg=5370.24, 90=6419, 99=17039, 99.9=324095, 99.99=339967] [UPDATE: Count=263975, Max=14567, Min=333, Avg=2207.51, 90=3281, 99=5099, 99.9=7619, 99.99=10111] 
2023-06-05 12:59:32:473 1630 sec: 91364235 operations; 56585.1 current ops/sec; [READ: Count=283327, Max=80831, Min=426, Avg=4735.07, 90=7099, 99=14703, 99.9=48127, 99.99=73663] [UPDATE: Count=281731, Max=57215, Min=332, Avg=2329.77, 90=3435, 99=5383, 99.9=8183, 99.99=10159] 
2023-06-05 12:59:42:473 1640 sec: 91926359 operations; 56212.4 current ops/sec; [READ: Count=281149, Max=163583, Min=421, Avg=4733.45, 90=7115, 99=13479, 99.9=26479, 99.99=154879] [UPDATE: Count=281532, Max=160511, Min=356, Avg=2376.46, 90=3437, 99=5299, 99.9=9151, 99.99=151295] 
2023-06-05 12:59:52:473 1650 sec: 92492278 operations; 56591.9 current ops/sec; [READ: Count=282333, Max=112575, Min=383, Avg=4755.07, 90=7031, 99=15479, 99.9=60863, 99.99=97215] [UPDATE: Count=283852, Max=26847, Min=341, Avg=2313.4, 90=3399, 99=5243, 99.9=8519, 99.99=11207] 
2023-06-05 13:00:02:473 1660 sec: 93058023 operations; 56574.5 current ops/sec; [READ: Count=283495, Max=90687, Min=423, Avg=4747.93, 90=6963, 99=14655, 99.9=79679, 99.99=85119] [UPDATE: Count=282181, Max=18463, Min=330, Avg=2314.16, 90=3397, 99=5155, 99.9=7899, 99.99=10727] 
2023-06-05 13:00:12:473 1670 sec: 93617296 operations; 55927.3 current ops/sec; [READ: Count=279778, Max=326143, Min=401, Avg=4809.13, 90=6991, 99=15311, 99.9=65311, 99.99=238463] [UPDATE: Count=279452, Max=12271, Min=342, Avg=2331.04, 90=3419, 99=5339, 99.9=7799, 99.99=9487] 
2023-06-05 13:00:22:473 1680 sec: 94174942 operations; 55764.6 current ops/sec; [READ: Count=278855, Max=304639, Min=433, Avg=4832.45, 90=7035, 99=14063, 99.9=66047, 99.99=259327] [UPDATE: Count=278868, Max=11799, Min=351, Avg=2345.42, 90=3423, 99=5239, 99.9=7595, 99.99=9519] 
2023-06-05 13:00:32:473 1690 sec: 94713677 operations; 53873.5 current ops/sec; [READ: Count=269411, Max=295679, Min=405, Avg=5065.51, 90=7155, 99=17407, 99.9=152319, 99.99=192511] [UPDATE: Count=269208, Max=13559, Min=336, Avg=2355.06, 90=3451, 99=5675, 99.9=8295, 99.99=10407] 
2023-06-05 13:00:42:473 1700 sec: 95272222 operations; 55854.5 current ops/sec; [READ: Count=279733, Max=72191, Min=431, Avg=4790.03, 90=7179, 99=15583, 99.9=42975, 99.99=55295] [UPDATE: Count=278330, Max=22895, Min=350, Avg=2368.34, 90=3461, 99=5695, 99.9=9711, 99.99=15543] 
2023-06-05 13:00:52:473 1710 sec: 95811040 operations; 53881.8 current ops/sec; [READ: Count=269942, Max=201087, Min=422, Avg=5058.43, 90=7199, 99=25535, 99.9=73791, 99.99=139647] [UPDATE: Count=269410, Max=20655, Min=326, Avg=2341.09, 90=3453, 99=6315, 99.9=9503, 99.99=12471] 
2023-06-05 13:01:02:473 1720 sec: 96351102 operations; 54006.2 current ops/sec; [READ: Count=269968, Max=225279, Min=395, Avg=5108.76, 90=6923, 99=23039, 99.9=133375, 99.99=191999] [UPDATE: Count=270175, Max=19055, Min=327, Avg=2304.92, 90=3391, 99=5751, 99.9=9023, 99.99=11103] 
2023-06-05 13:01:12:473 1730 sec: 96892225 operations; 54112.3 current ops/sec; [READ: Count=270756, Max=163455, Min=414, Avg=5052.75, 90=7019, 99=21935, 99.9=97791, 99.99=141055] [UPDATE: Count=270319, Max=12551, Min=325, Avg=2333.26, 90=3413, 99=5795, 99.9=8687, 99.99=10511] 
2023-06-05 13:01:22:473 1740 sec: 97434954 operations; 54272.9 current ops/sec; [READ: Count=271628, Max=157055, Min=435, Avg=5022.02, 90=7131, 99=20367, 99.9=83967, 99.99=112831] [UPDATE: Count=271132, Max=24799, Min=359, Avg=2343.68, 90=3455, 99=5899, 99.9=8815, 99.99=13127] 
2023-06-05 13:01:32:473 1750 sec: 97987052 operations; 55209.8 current ops/sec; [READ: Count=275833, Max=274175, Min=438, Avg=4899.2, 90=7103, 99=15495, 99.9=81535, 99.99=125567] [UPDATE: Count=276324, Max=21983, Min=348, Avg=2346.8, 90=3451, 99=5543, 99.9=8487, 99.99=12223] 
2023-06-05 13:01:42:473 1760 sec: 98552654 operations; 56560.2 current ops/sec; [READ: Count=282293, Max=48479, Min=437, Avg=4708.45, 90=7075, 99=12855, 99.9=32927, 99.99=40223] [UPDATE: Count=283152, Max=13591, Min=327, Avg=2364.55, 90=3461, 99=5299, 99.9=8207, 99.99=10887] 
2023-06-05 13:01:52:473 1770 sec: 99113789 operations; 56113.5 current ops/sec; [READ: Count=280304, Max=46463, Min=387, Avg=4759.29, 90=7087, 99=16703, 99.9=31279, 99.99=36255] [UPDATE: Count=280768, Max=19983, Min=344, Avg=2368.75, 90=3449, 99=5559, 99.9=8799, 99.99=11287] 
2023-06-05 13:02:02:473 1780 sec: 99671660 operations; 55787.1 current ops/sec; [READ: Count=278904, Max=107327, Min=429, Avg=4784.22, 90=7051, 99=16367, 99.9=30719, 99.99=79359] [UPDATE: Count=279065, Max=18687, Min=335, Avg=2379.6, 90=3449, 99=5523, 99.9=8943, 99.99=11207] 
2023-06-05 13:02:12:473 1790 sec: 100218981 operations; 54732.1 current ops/sec; [READ: Count=273636, Max=261631, Min=412, Avg=4937.03, 90=7047, 99=18719, 99.9=101503, 99.99=165247] [UPDATE: Count=273666, Max=14071, Min=347, Avg=2359.91, 90=3441, 99=5703, 99.9=8455, 99.99=10367] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:22:473 1800 sec: 100789164 operations; 57018.3 current ops/sec; [READ: Count=285566, Max=282879, Min=405, Avg=4781.78, 90=6363, 99=11455, 99.9=162175, 99.99=184447] [UPDATE: Count=284238, Max=20943, Min=335, Avg=2237.48, 90=3283, 99=4963, 99.9=7831, 99.99=9967] 
Still waiting for thread Thread-176 to complete. Workload status: true
2023-06-05 13:02:24:720 1802 sec: 100790576 operations; 628.39 current ops/sec; [READ: Count=719, Max=10399, Min=868, Avg=3752.84, 90=5555, 99=8051, 99.9=10159, 99.99=10399] [CLEANUP: Count=200, Max=2222079, Min=0, Avg=11106.74, 90=2, 99=31, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802247
[OVERALL], Throughput(ops/sec), 55924.95146336767
[TOTAL_GCS_PS_Scavenge], Count, 6051
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 17489
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9703997287830137
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 79
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004383416923429475
[TOTAL_GCs], Count, 6053
[TOTAL_GC_TIME], Time(ms), 17568
[TOTAL_GC_TIME_%], Time(%), 0.9747831457064432
[READ], Operations, 50398475
[READ], AverageLatency(us), 4518.605380480262
[READ], MinLatency(us), 367
[READ], MaxLatency(us), 1508351
[READ], 95thPercentileLatency(us), 7939
[READ], 99thPercentileLatency(us), 16095
[READ], Return=OK, 50398475
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11106.74
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 31
[UPDATE], Operations, 50392101
[UPDATE], AverageLatency(us), 2193.622207536058
[UPDATE], MinLatency(us), 297
[UPDATE], MaxLatency(us), 1500159
[UPDATE], 95thPercentileLatency(us), 3705
[UPDATE], 99thPercentileLatency(us), 5391
[UPDATE], Return=OK, 50392101
