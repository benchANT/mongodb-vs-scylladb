bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
2023-06-05 12:32:24:237 0 sec: 0 operations; 
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
2023-06-05 12:32:34:220 10 sec: 511493 operations; 51149.3 current ops/sec; [READ: Count=255840, Max=143359, Min=397, Avg=3552.31, 90=5539, 99=17071, 99.9=44127, 99.99=125951] [UPDATE: Count=257153, Max=137215, Min=317, Avg=1956.67, 90=2801, 99=7431, 99.9=37855, 99.99=120063] 
2023-06-05 12:32:44:219 20 sec: 1073952 operations; 56245.9 current ops/sec; [READ: Count=281581, Max=42879, Min=378, Avg=3662.49, 90=5635, 99=17087, 99.9=22783, 99.99=27839] [UPDATE: Count=280507, Max=12839, Min=318, Avg=1867.29, 90=2813, 99=5735, 99.9=7791, 99.99=9055] 
2023-06-05 12:32:54:220 30 sec: 1636290 operations; 56233.8 current ops/sec; [READ: Count=281156, Max=41567, Min=394, Avg=3846.73, 90=5947, 99=18239, 99.9=32831, 99.99=36415] [UPDATE: Count=281209, Max=20959, Min=318, Avg=1912.57, 90=2895, 99=5867, 99.9=8023, 99.99=9799] 
2023-06-05 12:33:04:219 40 sec: 2198801 operations; 56251.1 current ops/sec; [READ: Count=280759, Max=49311, Min=366, Avg=3872.6, 90=6003, 99=17999, 99.9=29311, 99.99=33535] [UPDATE: Count=281698, Max=18575, Min=330, Avg=1930.77, 90=2923, 99=5867, 99.9=8027, 99.99=9871] 
2023-06-05 12:33:14:220 50 sec: 2760421 operations; 56162 current ops/sec; [READ: Count=280422, Max=126079, Min=397, Avg=4338.39, 90=6603, 99=23167, 99.9=79551, 99.99=85759] [UPDATE: Count=281287, Max=13895, Min=332, Avg=1996.9, 90=3051, 99=6127, 99.9=8155, 99.99=9703] 
2023-06-05 12:33:24:220 60 sec: 3323837 operations; 56341.6 current ops/sec; [READ: Count=282622, Max=126207, Min=366, Avg=4406.95, 90=6559, 99=24367, 99.9=70399, 99.99=89919] [UPDATE: Count=280805, Max=11911, Min=312, Avg=2022.42, 90=3081, 99=6187, 99.9=8263, 99.99=9727] 
2023-06-05 12:33:34:220 70 sec: 3886243 operations; 56240.6 current ops/sec; [READ: Count=281131, Max=58591, Min=360, Avg=4151.5, 90=6539, 99=18783, 99.9=27407, 99.99=35999] [UPDATE: Count=281198, Max=12815, Min=305, Avg=2042.17, 90=3117, 99=6075, 99.9=8163, 99.99=9791] 
2023-06-05 12:33:44:219 80 sec: 4448699 operations; 56245.6 current ops/sec; [READ: Count=281718, Max=92863, Min=366, Avg=4230.46, 90=6635, 99=19343, 99.9=37855, 99.99=45119] [UPDATE: Count=280704, Max=23583, Min=313, Avg=2052.05, 90=3143, 99=6151, 99.9=8455, 99.99=14303] 
2023-06-05 12:33:54:219 90 sec: 5011259 operations; 56256 current ops/sec; [READ: Count=281307, Max=43295, Min=407, Avg=4198.22, 90=6619, 99=18959, 99.9=31999, 99.99=37887] [UPDATE: Count=281234, Max=16527, Min=318, Avg=2047.92, 90=3149, 99=6043, 99.9=8047, 99.99=10351] 
2023-06-05 12:34:04:220 100 sec: 5573339 operations; 56208 current ops/sec; [READ: Count=280807, Max=44543, Min=373, Avg=4196.25, 90=6587, 99=20335, 99.9=30399, 99.99=37663] [UPDATE: Count=281266, Max=17407, Min=312, Avg=2026.03, 90=3111, 99=6195, 99.9=8359, 99.99=10327] 
2023-06-05 12:34:14:220 110 sec: 6132751 operations; 55941.2 current ops/sec; [READ: Count=280117, Max=174335, Min=378, Avg=4642.54, 90=6779, 99=26399, 99.9=99263, 99.99=116607] [UPDATE: Count=279416, Max=17807, Min=297, Avg=2058.01, 90=3141, 99=6627, 99.9=9263, 99.99=12823] 
2023-06-05 12:34:24:219 120 sec: 6698299 operations; 56554.8 current ops/sec; [READ: Count=283051, Max=102527, Min=360, Avg=4509.78, 90=6779, 99=23631, 99.9=78719, 99.99=98303] [UPDATE: Count=282429, Max=13703, Min=309, Avg=2078.41, 90=3145, 99=6611, 99.9=9151, 99.99=10863] 
2023-06-05 12:34:34:219 130 sec: 7248129 operations; 54983 current ops/sec; [READ: Count=275024, Max=305919, Min=339, Avg=4716.76, 90=6951, 99=22383, 99.9=157567, 99.99=252159] [UPDATE: Count=274765, Max=13319, Min=306, Avg=2070.81, 90=3131, 99=6979, 99.9=9471, 99.99=11311] 
2023-06-05 12:34:44:220 140 sec: 7805414 operations; 55728.5 current ops/sec; [READ: Count=278511, Max=600575, Min=370, Avg=5005.5, 90=6727, 99=24319, 99.9=162815, 99.99=245119] [UPDATE: Count=278700, Max=18111, Min=326, Avg=2060.93, 90=3113, 99=6935, 99.9=9527, 99.99=12919] 
2023-06-05 12:34:54:220 150 sec: 8356525 operations; 55111.1 current ops/sec; [READ: Count=275249, Max=349183, Min=396, Avg=5119.62, 90=6387, 99=25663, 99.9=180095, 99.99=316415] [UPDATE: Count=276066, Max=17887, Min=308, Avg=2013.56, 90=3037, 99=6731, 99.9=9279, 99.99=11615] 
2023-06-05 12:35:04:220 160 sec: 8925950 operations; 56942.5 current ops/sec; [READ: Count=284991, Max=207615, Min=376, Avg=4814.3, 90=6479, 99=20495, 99.9=190975, 99.99=194815] [UPDATE: Count=284504, Max=18639, Min=323, Avg=2064.12, 90=3113, 99=6147, 99.9=8639, 99.99=10687] 
2023-06-05 12:35:14:220 170 sec: 9470983 operations; 54503.3 current ops/sec; [READ: Count=272778, Max=372991, Min=373, Avg=5148.36, 90=6415, 99=27039, 99.9=222847, 99.99=276223] [UPDATE: Count=272062, Max=15567, Min=312, Avg=2057.07, 90=3131, 99=6123, 99.9=8383, 99.99=11255] 
2023-06-05 12:35:24:220 180 sec: 10051270 operations; 58028.7 current ops/sec; [READ: Count=290380, Max=230015, Min=408, Avg=4665.47, 90=6391, 99=21103, 99.9=187007, 99.99=195839] [UPDATE: Count=290039, Max=23983, Min=318, Avg=2113.32, 90=3165, 99=5435, 99.9=8207, 99.99=10263] 
2023-06-05 12:35:34:220 190 sec: 10623468 operations; 57219.8 current ops/sec; [READ: Count=285649, Max=282623, Min=401, Avg=4567.56, 90=6211, 99=23903, 99.9=137727, 99.99=197247] [UPDATE: Count=286498, Max=16863, Min=301, Avg=2094.51, 90=3129, 99=5559, 99.9=8639, 99.99=10463] 
2023-06-05 12:35:44:220 200 sec: 11191821 operations; 56835.3 current ops/sec; [READ: Count=283519, Max=203647, Min=409, Avg=4573.9, 90=6135, 99=21055, 99.9=163455, 99.99=194047] [UPDATE: Count=284890, Max=18015, Min=307, Avg=2079.63, 90=3119, 99=5363, 99.9=8415, 99.99=10391] 
2023-06-05 12:35:54:220 210 sec: 11761047 operations; 56922.6 current ops/sec; [READ: Count=284581, Max=159231, Min=389, Avg=4362.44, 90=6207, 99=20239, 99.9=114239, 99.99=138751] [UPDATE: Count=284512, Max=29567, Min=302, Avg=2092.72, 90=3121, 99=5515, 99.9=8735, 99.99=11263] 
2023-06-05 12:36:04:220 220 sec: 12323367 operations; 56232 current ops/sec; [READ: Count=281774, Max=148863, Min=381, Avg=4143.26, 90=6003, 99=19263, 99.9=52319, 99.99=85183] [UPDATE: Count=280545, Max=16847, Min=277, Avg=2049.27, 90=3067, 99=5419, 99.9=8471, 99.99=10599] 
2023-06-05 12:36:14:220 230 sec: 12886496 operations; 56312.9 current ops/sec; [READ: Count=281319, Max=76415, Min=415, Avg=3849.74, 90=5699, 99=14695, 99.9=41119, 99.99=70719] [UPDATE: Count=281749, Max=11327, Min=315, Avg=1994.47, 90=2995, 99=4759, 99.9=7715, 99.99=9471] 
2023-06-05 12:36:24:219 240 sec: 13449110 operations; 56261.4 current ops/sec; [READ: Count=281666, Max=31119, Min=382, Avg=3555.99, 90=5415, 99=8179, 99.9=18735, 99.99=24543] [UPDATE: Count=280818, Max=13071, Min=318, Avg=1934.57, 90=2913, 99=4069, 99.9=6303, 99.99=7863] 
2023-06-05 12:36:34:220 250 sec: 14011593 operations; 56248.3 current ops/sec; [READ: Count=281365, Max=31151, Min=390, Avg=3578.45, 90=5479, 99=7955, 99.9=12247, 99.99=20703] [UPDATE: Count=281056, Max=12287, Min=300, Avg=1958.02, 90=2963, 99=4087, 99.9=6335, 99.99=8055] 
2023-06-05 12:36:44:220 260 sec: 14574086 operations; 56249.3 current ops/sec; [READ: Count=281017, Max=22911, Min=394, Avg=3552.43, 90=5467, 99=7939, 99.9=11879, 99.99=19247] [UPDATE: Count=281486, Max=10175, Min=303, Avg=1943.48, 90=2953, 99=4075, 99.9=6055, 99.99=8207] 
2023-06-05 12:36:54:220 270 sec: 15136576 operations; 56249 current ops/sec; [READ: Count=280630, Max=32575, Min=390, Avg=3603.58, 90=5559, 99=8423, 99.9=14183, 99.99=23247] [UPDATE: Count=281906, Max=18095, Min=319, Avg=1963.01, 90=2997, 99=4199, 99.9=6471, 99.99=9135] 
2023-06-05 12:37:04:219 280 sec: 15699091 operations; 56251.5 current ops/sec; [READ: Count=281018, Max=31007, Min=377, Avg=3538.33, 90=5475, 99=8155, 99.9=12399, 99.99=22687] [UPDATE: Count=281479, Max=17967, Min=305, Avg=1935.07, 90=2963, 99=4163, 99.9=6267, 99.99=9175] 
2023-06-05 12:37:14:219 290 sec: 16261580 operations; 56248.9 current ops/sec; [READ: Count=281115, Max=79167, Min=343, Avg=3611.38, 90=5543, 99=8863, 99.9=21023, 99.99=42335] [UPDATE: Count=281410, Max=12311, Min=322, Avg=1942.86, 90=2971, 99=4331, 99.9=6747, 99.99=9319] 
2023-06-05 12:37:24:219 300 sec: 16824097 operations; 56251.7 current ops/sec; [READ: Count=281654, Max=21919, Min=375, Avg=3510.07, 90=5423, 99=8111, 99.9=11343, 99.99=16639] [UPDATE: Count=280805, Max=10359, Min=323, Avg=1918.8, 90=2923, 99=4159, 99.9=6055, 99.99=7395] 
2023-06-05 12:37:34:220 310 sec: 17386532 operations; 56243.5 current ops/sec; [READ: Count=281848, Max=85055, Min=400, Avg=3567.13, 90=5415, 99=8911, 99.9=24559, 99.99=53279] [UPDATE: Count=280692, Max=12231, Min=319, Avg=1917.96, 90=2919, 99=4363, 99.9=6959, 99.99=9159] 
2023-06-05 12:37:44:219 320 sec: 17949105 operations; 56257.3 current ops/sec; [READ: Count=281785, Max=30719, Min=381, Avg=3431.64, 90=5287, 99=8391, 99.9=18031, 99.99=22799] [UPDATE: Count=280693, Max=12015, Min=320, Avg=1874.2, 90=2841, 99=4119, 99.9=7003, 99.99=9431] 
2023-06-05 12:37:54:219 330 sec: 18511587 operations; 56248.2 current ops/sec; [READ: Count=282030, Max=29151, Min=412, Avg=3437.75, 90=5279, 99=9343, 99.9=21247, 99.99=25551] [UPDATE: Count=279918, Max=30703, Min=309, Avg=1870.38, 90=2817, 99=4531, 99.9=8807, 99.99=15055] 
2023-06-05 12:38:04:219 340 sec: 19074078 operations; 56249.1 current ops/sec; [READ: Count=281451, Max=32863, Min=381, Avg=3418.72, 90=5231, 99=9175, 99.9=21647, 99.99=25663] [UPDATE: Count=281638, Max=31423, Min=307, Avg=1853.87, 90=2787, 99=4311, 99.9=7827, 99.99=12551] 
2023-06-05 12:38:14:219 350 sec: 19636574 operations; 56249.6 current ops/sec; [READ: Count=281426, Max=27503, Min=366, Avg=3407.38, 90=5187, 99=8623, 99.9=20303, 99.99=24127] [UPDATE: Count=281024, Max=17503, Min=316, Avg=1856.11, 90=2785, 99=4215, 99.9=6735, 99.99=8959] 
2023-06-05 12:38:24:220 360 sec: 20199137 operations; 56256.3 current ops/sec; [READ: Count=281324, Max=22687, Min=420, Avg=3312.64, 90=5075, 99=7347, 99.9=9655, 99.99=17231] [UPDATE: Count=281163, Max=9223, Min=313, Avg=1837.59, 90=2759, 99=3855, 99.9=5923, 99.99=7363] 
2023-06-05 12:38:34:219 370 sec: 20761604 operations; 56246.7 current ops/sec; [READ: Count=281600, Max=44127, Min=385, Avg=3329.13, 90=5111, 99=7583, 99.9=11431, 99.99=26127] [UPDATE: Count=280925, Max=10847, Min=329, Avg=1839.02, 90=2763, 99=3953, 99.9=6107, 99.99=7939] 
2023-06-05 12:38:44:219 380 sec: 21324128 operations; 56252.4 current ops/sec; [READ: Count=281195, Max=18431, Min=404, Avg=3300.54, 90=5087, 99=7455, 99.9=9791, 99.99=12631] [UPDATE: Count=281241, Max=12231, Min=315, Avg=1830.78, 90=2761, 99=3879, 99.9=6107, 99.99=7567] 
2023-06-05 12:38:54:219 390 sec: 21886600 operations; 56247.2 current ops/sec; [READ: Count=280978, Max=25279, Min=382, Avg=3357.65, 90=5171, 99=7559, 99.9=10183, 99.99=14759] [UPDATE: Count=281538, Max=18703, Min=300, Avg=1857.22, 90=2811, 99=3937, 99.9=5959, 99.99=8751] 
2023-06-05 12:39:04:219 400 sec: 22449067 operations; 56246.7 current ops/sec; [READ: Count=281842, Max=21039, Min=380, Avg=3460.96, 90=5327, 99=7775, 99.9=10639, 99.99=15759] [UPDATE: Count=280613, Max=16783, Min=308, Avg=1901.65, 90=2885, 99=4033, 99.9=6103, 99.99=7859] 
2023-06-05 12:39:14:219 410 sec: 23011565 operations; 56249.8 current ops/sec; [READ: Count=281803, Max=27711, Min=401, Avg=3539.45, 90=5479, 99=8239, 99.9=14039, 99.99=21999] [UPDATE: Count=280796, Max=11783, Min=297, Avg=1925.56, 90=2927, 99=4159, 99.9=6379, 99.99=8815] 
2023-06-05 12:39:24:219 420 sec: 23574059 operations; 56249.4 current ops/sec; [READ: Count=281216, Max=21023, Min=379, Avg=3580.11, 90=5527, 99=8159, 99.9=11471, 99.99=16327] [UPDATE: Count=280854, Max=19535, Min=322, Avg=1950.79, 90=2961, 99=4231, 99.9=6307, 99.99=13607] 
2023-06-05 12:39:34:219 430 sec: 24136567 operations; 56250.8 current ops/sec; [READ: Count=281406, Max=19599, Min=384, Avg=3623.02, 90=5599, 99=8295, 99.9=11583, 99.99=17615] [UPDATE: Count=281479, Max=19567, Min=320, Avg=1958.88, 90=2989, 99=4195, 99.9=6023, 99.99=8311] 
2023-06-05 12:39:44:219 440 sec: 24699077 operations; 56251 current ops/sec; [READ: Count=281262, Max=19567, Min=400, Avg=3595.73, 90=5559, 99=8091, 99.9=10919, 99.99=14503] [UPDATE: Count=281248, Max=12703, Min=323, Avg=1954.51, 90=2985, 99=4143, 99.9=5955, 99.99=7339] 
2023-06-05 12:39:54:219 450 sec: 25261553 operations; 56247.6 current ops/sec; [READ: Count=281139, Max=27855, Min=373, Avg=3639.37, 90=5635, 99=8527, 99.9=13535, 99.99=23343] [UPDATE: Count=280942, Max=24175, Min=321, Avg=1968.54, 90=3005, 99=4307, 99.9=7195, 99.99=15519] 
2023-06-05 12:40:04:219 460 sec: 25823885 operations; 56233.2 current ops/sec; [READ: Count=280631, Max=38527, Min=389, Avg=3731, 90=5711, 99=10127, 99.9=28191, 99.99=34751] [UPDATE: Count=282154, Max=22719, Min=298, Avg=1976.1, 90=3013, 99=4587, 99.9=7315, 99.99=11407] 
2023-06-05 12:40:14:219 470 sec: 26375730 operations; 55184.5 current ops/sec; [READ: Count=276269, Max=531455, Min=382, Avg=4415.43, 90=6271, 99=22719, 99.9=128703, 99.99=205183] [UPDATE: Count=275829, Max=20607, Min=311, Avg=2069.01, 90=3149, 99=5863, 99.9=8655, 99.99=10567] 
2023-06-05 12:40:24:219 480 sec: 26948956 operations; 57322.6 current ops/sec; [READ: Count=286664, Max=263935, Min=390, Avg=4355.48, 90=5971, 99=21999, 99.9=105215, 99.99=194943] [UPDATE: Count=286495, Max=13391, Min=287, Avg=2046.18, 90=3079, 99=5243, 99.9=8431, 99.99=10359] 
2023-06-05 12:40:34:219 490 sec: 27511555 operations; 56259.9 current ops/sec; [READ: Count=280946, Max=27919, Min=388, Avg=3651.97, 90=5627, 99=8831, 99.9=16431, 99.99=24095] [UPDATE: Count=281419, Max=14367, Min=319, Avg=1969.1, 90=2997, 99=4371, 99.9=6519, 99.99=8463] 
2023-06-05 12:40:44:219 500 sec: 28074026 operations; 56247.1 current ops/sec; [READ: Count=280799, Max=40383, Min=374, Avg=3664.27, 90=5663, 99=9263, 99.9=18687, 99.99=27711] [UPDATE: Count=281684, Max=12647, Min=333, Avg=1964.21, 90=2995, 99=4427, 99.9=6891, 99.99=9151] 
2023-06-05 12:40:54:219 510 sec: 28636482 operations; 56245.6 current ops/sec; [READ: Count=281950, Max=77119, Min=407, Avg=3660.57, 90=5647, 99=9367, 99.9=28351, 99.99=38335] [UPDATE: Count=280580, Max=26303, Min=310, Avg=1951.77, 90=2973, 99=4515, 99.9=8463, 99.99=16263] 
2023-06-05 12:41:04:219 520 sec: 29199085 operations; 56260.3 current ops/sec; [READ: Count=281527, Max=53791, Min=385, Avg=3659.76, 90=5683, 99=8687, 99.9=15511, 99.99=40735] [UPDATE: Count=280972, Max=15575, Min=327, Avg=1957.59, 90=2995, 99=4335, 99.9=6615, 99.99=8951] 
2023-06-05 12:41:14:220 530 sec: 29761559 operations; 56247.4 current ops/sec; [READ: Count=281440, Max=24415, Min=409, Avg=3691.08, 90=5727, 99=9127, 99.9=17855, 99.99=21535] [UPDATE: Count=281156, Max=10631, Min=277, Avg=1967.63, 90=3005, 99=4407, 99.9=7083, 99.99=9407] 
2023-06-05 12:41:24:219 540 sec: 30324039 operations; 56248 current ops/sec; [READ: Count=281492, Max=27471, Min=390, Avg=3703.98, 90=5747, 99=8879, 99.9=14031, 99.99=21567] [UPDATE: Count=280939, Max=27391, Min=320, Avg=1986.95, 90=3035, 99=4407, 99.9=6999, 99.99=14951] 
2023-06-05 12:41:34:219 550 sec: 30886497 operations; 56245.8 current ops/sec; [READ: Count=280867, Max=45759, Min=411, Avg=3822.4, 90=5899, 99=10391, 99.9=23375, 99.99=28207] [UPDATE: Count=281437, Max=25087, Min=309, Avg=2017.5, 90=3073, 99=4715, 99.9=8903, 99.99=17535] 
2023-06-05 12:41:44:219 560 sec: 31446414 operations; 55991.7 current ops/sec; [READ: Count=280166, Max=274431, Min=382, Avg=3925.99, 90=5887, 99=11991, 99.9=32207, 99.99=146687] [UPDATE: Count=280024, Max=18591, Min=325, Avg=2005.19, 90=3059, 99=4871, 99.9=8391, 99.99=10911] 
2023-06-05 12:41:54:220 570 sec: 31990465 operations; 54405.1 current ops/sec; [READ: Count=272500, Max=409087, Min=355, Avg=4920.97, 90=5635, 99=13311, 99.9=228735, 99.99=371455] [UPDATE: Count=271672, Max=16479, Min=304, Avg=1947.01, 90=2995, 99=4727, 99.9=8471, 99.99=11167] 
2023-06-05 12:42:04:220 580 sec: 32551721 operations; 56125.6 current ops/sec; [READ: Count=281029, Max=301823, Min=374, Avg=4889.81, 90=5955, 99=18351, 99.9=228607, 99.99=264959] [UPDATE: Count=280135, Max=20479, Min=293, Avg=2023.55, 90=3077, 99=4847, 99.9=7895, 99.99=10591] 
2023-06-05 12:42:14:219 590 sec: 33082907 operations; 53118.6 current ops/sec; [READ: Count=265173, Max=311039, Min=365, Avg=5332.58, 90=6963, 99=25711, 99.9=191615, 99.99=232959] [UPDATE: Count=265879, Max=22927, Min=301, Avg=2125.65, 90=3261, 99=6479, 99.9=9135, 99.99=13023] 
2023-06-05 12:42:24:219 600 sec: 33577039 operations; 49413.2 current ops/sec; [READ: Count=247726, Max=558079, Min=349, Avg=6011.1, 90=6675, 99=47775, 99.9=325631, 99.99=330751] [UPDATE: Count=246503, Max=12639, Min=303, Avg=2056.79, 90=3205, 99=6363, 99.9=8791, 99.99=10791] 
2023-06-05 12:42:34:219 610 sec: 34103528 operations; 52648.9 current ops/sec; [READ: Count=263126, Max=341503, Min=348, Avg=5476.58, 90=7035, 99=34207, 99.9=268543, 99.99=326655] [UPDATE: Count=263435, Max=12319, Min=309, Avg=2136.5, 90=3309, 99=6303, 99.9=8743, 99.99=10527] 
2023-06-05 12:42:44:219 620 sec: 34659418 operations; 55589 current ops/sec; [READ: Count=278054, Max=273407, Min=339, Avg=5024.03, 90=6967, 99=29695, 99.9=159359, 99.99=188159] [UPDATE: Count=277729, Max=11607, Min=306, Avg=2172.25, 90=3325, 99=5955, 99.9=8143, 99.99=9639] 
2023-06-05 12:42:54:219 630 sec: 35222109 operations; 56269.1 current ops/sec; [READ: Count=282273, Max=230271, Min=393, Avg=4929.3, 90=6763, 99=30623, 99.9=134015, 99.99=147583] [UPDATE: Count=280519, Max=25071, Min=326, Avg=2163.85, 90=3289, 99=5943, 99.9=8383, 99.99=10655] 
2023-06-05 12:43:04:220 640 sec: 35798151 operations; 57604.2 current ops/sec; [READ: Count=288291, Max=149631, Min=418, Avg=4775, 90=6651, 99=18911, 99.9=130047, 99.99=140415] [UPDATE: Count=287703, Max=20159, Min=322, Avg=2164.87, 90=3281, 99=5271, 99.9=7831, 99.99=10079] 
2023-06-05 12:43:14:220 650 sec: 36364300 operations; 56614.9 current ops/sec; [READ: Count=283514, Max=278015, Min=369, Avg=4871.59, 90=6671, 99=20959, 99.9=160639, 99.99=197887] [UPDATE: Count=282723, Max=18847, Min=307, Avg=2182.88, 90=3299, 99=5587, 99.9=8351, 99.99=11703] 
2023-06-05 12:43:24:219 660 sec: 36937401 operations; 57310.1 current ops/sec; [READ: Count=287964, Max=257279, Min=393, Avg=4760.27, 90=6779, 99=18031, 99.9=115263, 99.99=208127] [UPDATE: Count=284469, Max=20351, Min=334, Avg=2202.46, 90=3325, 99=5559, 99.9=8423, 99.99=15207] 
2023-06-05 12:43:34:219 670 sec: 37526287 operations; 58888.6 current ops/sec; [READ: Count=294606, Max=107711, Min=400, Avg=4513.09, 90=6979, 99=12775, 99.9=23055, 99.99=60031] [UPDATE: Count=294972, Max=23151, Min=290, Avg=2262.3, 90=3385, 99=5091, 99.9=7491, 99.99=9847] 
2023-06-05 12:43:44:219 680 sec: 38114559 operations; 58827.2 current ops/sec; [READ: Count=294358, Max=39263, Min=402, Avg=4489, 90=6919, 99=12007, 99.9=20815, 99.99=24303] [UPDATE: Count=293631, Max=13727, Min=337, Avg=2276.63, 90=3395, 99=5019, 99.9=7263, 99.99=9535] 
2023-06-05 12:43:54:219 690 sec: 38689783 operations; 57522.4 current ops/sec; [READ: Count=287707, Max=115839, Min=372, Avg=4647.66, 90=6755, 99=14295, 99.9=83135, 99.99=88703] [UPDATE: Count=287680, Max=24719, Min=313, Avg=2265.45, 90=3367, 99=5247, 99.9=8367, 99.99=11447] 
2023-06-05 12:44:04:219 700 sec: 39264982 operations; 57519.9 current ops/sec; [READ: Count=286859, Max=96575, Min=402, Avg=4611.88, 90=6787, 99=14647, 99.9=54239, 99.99=76799] [UPDATE: Count=288306, Max=16207, Min=326, Avg=2295.47, 90=3399, 99=5331, 99.9=8799, 99.99=10991] 
2023-06-05 12:44:14:219 710 sec: 39835359 operations; 57037.7 current ops/sec; [READ: Count=285113, Max=73599, Min=393, Avg=4648.58, 90=6855, 99=15823, 99.9=40127, 99.99=49983] [UPDATE: Count=285226, Max=12743, Min=327, Avg=2316.55, 90=3409, 99=5395, 99.9=8783, 99.99=10471] 
2023-06-05 12:44:24:219 720 sec: 40386143 operations; 55078.4 current ops/sec; [READ: Count=275579, Max=226303, Min=381, Avg=4943.61, 90=6703, 99=20847, 99.9=135167, 99.99=156927] [UPDATE: Count=275293, Max=13911, Min=301, Avg=2294.56, 90=3383, 99=5751, 99.9=8895, 99.99=10663] 
2023-06-05 12:44:34:219 730 sec: 40950958 operations; 56481.5 current ops/sec; [READ: Count=282087, Max=41887, Min=398, Avg=4719.99, 90=7043, 99=15903, 99.9=32431, 99.99=37087] [UPDATE: Count=282709, Max=14375, Min=304, Avg=2356.99, 90=3479, 99=5583, 99.9=8775, 99.99=10767] 
2023-06-05 12:44:44:220 740 sec: 41514458 operations; 56350 current ops/sec; [READ: Count=282156, Max=40415, Min=382, Avg=4737.84, 90=7039, 99=18271, 99.9=31615, 99.99=36703] [UPDATE: Count=281302, Max=14327, Min=322, Avg=2346.02, 90=3463, 99=5687, 99.9=8975, 99.99=10807] 
2023-06-05 12:44:54:219 750 sec: 42081565 operations; 56710.7 current ops/sec; [READ: Count=283381, Max=48703, Min=407, Avg=4696.28, 90=7011, 99=16671, 99.9=27647, 99.99=33823] [UPDATE: Count=283752, Max=31727, Min=309, Avg=2347.07, 90=3459, 99=5655, 99.9=8911, 99.99=14447] 
2023-06-05 12:45:04:220 760 sec: 42647692 operations; 56612.7 current ops/sec; [READ: Count=283573, Max=42431, Min=416, Avg=4690.84, 90=6923, 99=18191, 99.9=26479, 99.99=30495] [UPDATE: Count=282530, Max=19007, Min=280, Avg=2349.61, 90=3449, 99=5743, 99.9=9135, 99.99=12063] 
2023-06-05 12:45:14:219 770 sec: 43189754 operations; 54206.2 current ops/sec; [READ: Count=270827, Max=521727, Min=405, Avg=5020.11, 90=6859, 99=22191, 99.9=222079, 99.99=274943] [UPDATE: Count=271257, Max=14167, Min=314, Avg=2325.26, 90=3435, 99=5779, 99.9=9087, 99.99=10895] 
2023-06-05 12:45:24:219 780 sec: 43719725 operations; 52997.1 current ops/sec; [READ: Count=264539, Max=468991, Min=374, Avg=5314.25, 90=6355, 99=19583, 99.9=273151, 99.99=277503] [UPDATE: Count=265396, Max=11935, Min=309, Avg=2232.95, 90=3313, 99=5191, 99.9=8367, 99.99=10759] 
2023-06-05 12:45:34:219 790 sec: 44278695 operations; 55897 current ops/sec; [READ: Count=279847, Max=278015, Min=403, Avg=4887.3, 90=6631, 99=13327, 99.9=230143, 99.99=273919] [UPDATE: Count=279200, Max=13295, Min=313, Avg=2271.46, 90=3357, 99=5051, 99.9=7595, 99.99=9727] 
2023-06-05 12:45:44:219 800 sec: 44859124 operations; 58042.9 current ops/sec; [READ: Count=289973, Max=54623, Min=382, Avg=4553.21, 90=6911, 99=10767, 99.9=17455, 99.99=27055] [UPDATE: Count=290267, Max=11103, Min=332, Avg=2329.54, 90=3425, 99=4919, 99.9=6927, 99.99=8415] 
2023-06-05 12:45:54:219 810 sec: 45434286 operations; 57516.2 current ops/sec; [READ: Count=287823, Max=34815, Min=381, Avg=4584.92, 90=6919, 99=11159, 99.9=19023, 99.99=29919] [UPDATE: Count=287388, Max=23823, Min=324, Avg=2347.83, 90=3433, 99=4967, 99.9=7611, 99.99=15087] 
2023-06-05 12:46:04:219 820 sec: 46011883 operations; 57759.7 current ops/sec; [READ: Count=288263, Max=27663, Min=408, Avg=4540.56, 90=6799, 99=10327, 99.9=15279, 99.99=20831] [UPDATE: Count=289374, Max=16479, Min=319, Avg=2350.67, 90=3423, 99=4819, 99.9=6847, 99.99=8399] 
2023-06-05 12:46:14:219 830 sec: 46586679 operations; 57479.6 current ops/sec; [READ: Count=287148, Max=112127, Min=414, Avg=4561.9, 90=6791, 99=10703, 99.9=20879, 99.99=43135] [UPDATE: Count=287586, Max=11135, Min=320, Avg=2345.21, 90=3417, 99=4799, 99.9=6903, 99.99=8727] 
2023-06-05 12:46:24:219 840 sec: 47159574 operations; 57289.5 current ops/sec; [READ: Count=286832, Max=35039, Min=426, Avg=4549.07, 90=6779, 99=10055, 99.9=14791, 99.99=20991] [UPDATE: Count=286035, Max=19599, Min=339, Avg=2367.13, 90=3441, 99=4799, 99.9=6935, 99.99=13479] 
2023-06-05 12:46:34:220 850 sec: 47721289 operations; 56171.5 current ops/sec; [READ: Count=281241, Max=92671, Min=390, Avg=4684.33, 90=6803, 99=12551, 99.9=32863, 99.99=53951] [UPDATE: Count=280593, Max=12327, Min=310, Avg=2393.15, 90=3455, 99=5047, 99.9=7947, 99.99=10271] 
2023-06-05 12:46:44:219 860 sec: 48282809 operations; 56152 current ops/sec; [READ: Count=280676, Max=38463, Min=419, Avg=4693.84, 90=6851, 99=12007, 99.9=24895, 99.99=29311] [UPDATE: Count=280839, Max=12351, Min=320, Avg=2419.47, 90=3481, 99=5063, 99.9=8083, 99.99=10367] 
2023-06-05 12:46:54:219 870 sec: 48846320 operations; 56351.1 current ops/sec; [READ: Count=281756, Max=35743, Min=379, Avg=4678.72, 90=6855, 99=11575, 99.9=25215, 99.99=29903] [UPDATE: Count=281680, Max=17887, Min=329, Avg=2407.58, 90=3467, 99=5027, 99.9=8175, 99.99=10959] 
2023-06-05 12:47:04:219 880 sec: 49408050 operations; 56173 current ops/sec; [READ: Count=280821, Max=38239, Min=417, Avg=4704.12, 90=6935, 99=13175, 99.9=24383, 99.99=29327] [UPDATE: Count=280927, Max=19439, Min=326, Avg=2404.94, 90=3481, 99=5279, 99.9=8067, 99.99=10407] 
2023-06-05 12:47:14:219 890 sec: 49966991 operations; 55894.1 current ops/sec; [READ: Count=279924, Max=79679, Min=373, Avg=4743.37, 90=6963, 99=14511, 99.9=24959, 99.99=53471] [UPDATE: Count=279058, Max=12951, Min=325, Avg=2400.62, 90=3471, 99=5371, 99.9=8295, 99.99=10223] 
2023-06-05 12:47:24:219 900 sec: 50525460 operations; 55846.9 current ops/sec; [READ: Count=279801, Max=61983, Min=397, Avg=4761.75, 90=6907, 99=17311, 99.9=30287, 99.99=54719] [UPDATE: Count=278656, Max=20063, Min=312, Avg=2391.21, 90=3451, 99=5579, 99.9=8679, 99.99=10623] 
2023-06-05 12:47:34:219 910 sec: 51083945 operations; 55848.5 current ops/sec; [READ: Count=279110, Max=47871, Min=419, Avg=4747.5, 90=6851, 99=15791, 99.9=26047, 99.99=30959] [UPDATE: Count=279376, Max=13695, Min=344, Avg=2411.44, 90=3459, 99=5363, 99.9=8463, 99.99=10503] 
2023-06-05 12:47:44:219 920 sec: 51643751 operations; 55980.6 current ops/sec; [READ: Count=280276, Max=44159, Min=429, Avg=4725.83, 90=6799, 99=13919, 99.9=26447, 99.99=31311] [UPDATE: Count=279519, Max=17119, Min=327, Avg=2412.17, 90=3443, 99=5091, 99.9=7791, 99.99=11919] 
2023-06-05 12:47:54:222 930 sec: 52205929 operations; 56200.94 current ops/sec; [READ: Count=281123, Max=38495, Min=366, Avg=4700.34, 90=6771, 99=13647, 99.9=24111, 99.99=27343] [UPDATE: Count=281089, Max=19183, Min=339, Avg=2411.34, 90=3437, 99=5011, 99.9=7479, 99.99=11343] 
2023-06-05 12:48:04:219 940 sec: 52770379 operations; 56461.94 current ops/sec; [READ: Count=282843, Max=28863, Min=414, Avg=4669.3, 90=6831, 99=11463, 99.9=21503, 99.99=25327] [UPDATE: Count=281582, Max=18815, Min=335, Avg=2406.25, 90=3451, 99=4943, 99.9=7271, 99.99=9543] 
2023-06-05 12:48:14:220 950 sec: 53333184 operations; 56280.5 current ops/sec; [READ: Count=281348, Max=67967, Min=416, Avg=4693.29, 90=6899, 99=11807, 99.9=22015, 99.99=60991] [UPDATE: Count=281488, Max=62207, Min=329, Avg=2407.54, 90=3463, 99=4919, 99.9=7159, 99.99=57887] 
2023-06-05 12:48:24:219 960 sec: 53903003 operations; 56981.9 current ops/sec; [READ: Count=284511, Max=37727, Min=432, Avg=4626.75, 90=6827, 99=11335, 99.9=20159, 99.99=24511] [UPDATE: Count=285322, Max=13607, Min=339, Avg=2382.77, 90=3445, 99=4891, 99.9=7187, 99.99=9831] 
2023-06-05 12:48:34:219 970 sec: 54474526 operations; 57152.3 current ops/sec; [READ: Count=285929, Max=46239, Min=407, Avg=4591.2, 90=6799, 99=10695, 99.9=19951, 99.99=29695] [UPDATE: Count=285651, Max=17103, Min=335, Avg=2370.81, 90=3437, 99=4819, 99.9=6927, 99.99=9143] 
2023-06-05 12:48:44:219 980 sec: 55040156 operations; 56563 current ops/sec; [READ: Count=282279, Max=123967, Min=408, Avg=4663.33, 90=6727, 99=12151, 99.9=44063, 99.99=76159] [UPDATE: Count=283317, Max=12527, Min=326, Avg=2357.63, 90=3413, 99=4955, 99.9=7651, 99.99=9623] 
2023-06-05 12:48:54:219 990 sec: 55603330 operations; 56317.4 current ops/sec; [READ: Count=282110, Max=98175, Min=400, Avg=4712.07, 90=6727, 99=11711, 99.9=68927, 99.99=74943] [UPDATE: Count=281104, Max=27375, Min=295, Avg=2349.92, 90=3407, 99=4871, 99.9=7431, 99.99=10655] 
2023-06-05 12:49:04:220 1000 sec: 56170966 operations; 56763.6 current ops/sec; [READ: Count=283759, Max=62239, Min=415, Avg=4652.58, 90=6779, 99=11639, 99.9=45855, 99.99=55327] [UPDATE: Count=283874, Max=17535, Min=318, Avg=2353.75, 90=3417, 99=4855, 99.9=7139, 99.99=9311] 
2023-06-05 12:49:14:220 1010 sec: 56739159 operations; 56819.3 current ops/sec; [READ: Count=283889, Max=41119, Min=393, Avg=4645.23, 90=6863, 99=12991, 99.9=28191, 99.99=33631] [UPDATE: Count=283821, Max=23711, Min=331, Avg=2347.17, 90=3429, 99=5023, 99.9=7715, 99.99=14887] 
2023-06-05 12:49:24:219 1020 sec: 57309100 operations; 56994.1 current ops/sec; [READ: Count=284644, Max=40639, Min=387, Avg=4550.01, 90=6803, 99=10887, 99.9=21231, 99.99=29119] [UPDATE: Count=285783, Max=23711, Min=308, Avg=2338.7, 90=3421, 99=4863, 99.9=6911, 99.99=9303] 
2023-06-05 12:49:34:220 1030 sec: 57875672 operations; 56657.2 current ops/sec; [READ: Count=283168, Max=31423, Min=442, Avg=4555.7, 90=6767, 99=10247, 99.9=15855, 99.99=22495] [UPDATE: Count=282756, Max=26175, Min=326, Avg=2368.51, 90=3437, 99=4799, 99.9=7111, 99.99=13535] 
2023-06-05 12:49:44:219 1040 sec: 58440515 operations; 56484.3 current ops/sec; [READ: Count=282073, Max=37375, Min=384, Avg=4594.52, 90=6803, 99=11711, 99.9=24447, 99.99=28991] [UPDATE: Count=283285, Max=24031, Min=309, Avg=2354.89, 90=3431, 99=4963, 99.9=7707, 99.99=10975] 
2023-06-05 12:49:54:219 1050 sec: 59004006 operations; 56349.1 current ops/sec; [READ: Count=281693, Max=34975, Min=418, Avg=4651.95, 90=6895, 99=13215, 99.9=25439, 99.99=30559] [UPDATE: Count=281797, Max=18655, Min=306, Avg=2356.03, 90=3433, 99=5163, 99.9=7979, 99.99=10615] 
2023-06-05 12:50:04:219 1060 sec: 59568613 operations; 56460.7 current ops/sec; [READ: Count=281913, Max=36767, Min=391, Avg=4603.66, 90=6867, 99=11847, 99.9=24687, 99.99=29695] [UPDATE: Count=282851, Max=19871, Min=303, Avg=2340.44, 90=3409, 99=4935, 99.9=7363, 99.99=10231] 
2023-06-05 12:50:14:219 1070 sec: 60107403 operations; 53879 current ops/sec; [READ: Count=268938, Max=196479, Min=412, Avg=5023.66, 90=6983, 99=21679, 99.9=112255, 99.99=147199] [UPDATE: Count=269544, Max=21487, Min=293, Avg=2340.73, 90=3437, 99=5683, 99.9=8415, 99.99=11279] 
2023-06-05 12:50:24:219 1080 sec: 60675054 operations; 56765.1 current ops/sec; [READ: Count=283590, Max=126783, Min=380, Avg=4705.96, 90=6939, 99=13567, 99.9=33119, 99.99=115327] [UPDATE: Count=284326, Max=17231, Min=314, Avg=2335.32, 90=3407, 99=5115, 99.9=8319, 99.99=10559] 
2023-06-05 12:50:34:219 1090 sec: 61242499 operations; 56744.5 current ops/sec; [READ: Count=284066, Max=33727, Min=425, Avg=4660, 90=6915, 99=13055, 99.9=26223, 99.99=30207] [UPDATE: Count=283212, Max=17167, Min=318, Avg=2357.2, 90=3425, 99=5071, 99.9=7975, 99.99=9919] 
2023-06-05 12:50:44:219 1100 sec: 61810437 operations; 56793.8 current ops/sec; [READ: Count=284381, Max=46559, Min=411, Avg=4635.77, 90=6879, 99=12103, 99.9=25119, 99.99=29247] [UPDATE: Count=283583, Max=13359, Min=312, Avg=2363.55, 90=3429, 99=5019, 99.9=7571, 99.99=9647] 
2023-06-05 12:50:54:219 1110 sec: 62377592 operations; 56715.5 current ops/sec; [READ: Count=283487, Max=103359, Min=413, Avg=4624.78, 90=6871, 99=12231, 99.9=24703, 99.99=61055] [UPDATE: Count=283689, Max=19119, Min=304, Avg=2344.92, 90=3415, 99=4947, 99.9=7619, 99.99=10455] 
2023-06-05 12:51:04:219 1120 sec: 62938503 operations; 56091.1 current ops/sec; [READ: Count=281401, Max=115839, Min=410, Avg=4723.45, 90=6807, 99=12207, 99.9=69503, 99.99=75519] [UPDATE: Count=279608, Max=28383, Min=329, Avg=2334.24, 90=3401, 99=4971, 99.9=8287, 99.99=10799] 
2023-06-05 12:51:14:219 1130 sec: 63503301 operations; 56479.8 current ops/sec; [READ: Count=282491, Max=70975, Min=387, Avg=4688.26, 90=6863, 99=13319, 99.9=57055, 99.99=66047] [UPDATE: Count=282342, Max=13719, Min=324, Avg=2332.5, 90=3403, 99=5087, 99.9=8407, 99.99=10383] 
2023-06-05 12:51:24:219 1140 sec: 64061377 operations; 55807.6 current ops/sec; [READ: Count=278949, Max=196991, Min=413, Avg=4803.21, 90=6891, 99=18383, 99.9=84415, 99.99=120511] [UPDATE: Count=279105, Max=14151, Min=310, Avg=2324.27, 90=3395, 99=5807, 99.9=9023, 99.99=10759] 
2023-06-05 12:51:34:219 1150 sec: 64629951 operations; 56857.4 current ops/sec; [READ: Count=283549, Max=54079, Min=376, Avg=4642.06, 90=6887, 99=16687, 99.9=28207, 99.99=33375] [UPDATE: Count=285001, Max=18031, Min=297, Avg=2317.59, 90=3387, 99=5559, 99.9=8991, 99.99=11055] 
2023-06-05 12:51:44:219 1160 sec: 65196475 operations; 56652.4 current ops/sec; [READ: Count=283546, Max=43775, Min=372, Avg=4585.26, 90=6843, 99=15071, 99.9=25631, 99.99=29663] [UPDATE: Count=282970, Max=14727, Min=307, Avg=2302.87, 90=3379, 99=5347, 99.9=8359, 99.99=10367] 
2023-06-05 12:51:54:219 1170 sec: 65760688 operations; 56421.3 current ops/sec; [READ: Count=282174, Max=32591, Min=388, Avg=4436.9, 90=6683, 99=13199, 99.9=23311, 99.99=27311] [UPDATE: Count=281892, Max=16175, Min=329, Avg=2262.37, 90=3339, 99=5127, 99.9=7979, 99.99=10487] 
2023-06-05 12:52:04:219 1180 sec: 66323255 operations; 56256.7 current ops/sec; [READ: Count=281196, Max=40191, Min=410, Avg=4473.14, 90=6707, 99=14519, 99.9=24911, 99.99=29823] [UPDATE: Count=281481, Max=18287, Min=329, Avg=2263.05, 90=3335, 99=5295, 99.9=8295, 99.99=10655] 
2023-06-05 12:52:14:219 1190 sec: 66883339 operations; 56008.4 current ops/sec; [READ: Count=280889, Max=127295, Min=380, Avg=4652.71, 90=6739, 99=16055, 99.9=82367, 99.99=89087] [UPDATE: Count=279278, Max=17871, Min=326, Avg=2269.91, 90=3357, 99=5271, 99.9=8247, 99.99=10135] 
2023-06-05 12:52:24:219 1200 sec: 67448830 operations; 56549.1 current ops/sec; [READ: Count=283288, Max=78335, Min=405, Avg=4400.34, 90=6635, 99=11151, 99.9=23903, 99.99=71679] [UPDATE: Count=282101, Max=12487, Min=328, Avg=2248.53, 90=3317, 99=4803, 99.9=6951, 99.99=8743] 
2023-06-05 12:52:34:219 1210 sec: 68011244 operations; 56241.4 current ops/sec; [READ: Count=281378, Max=32287, Min=432, Avg=4325.13, 90=6587, 99=10447, 99.9=16783, 99.99=24815] [UPDATE: Count=281007, Max=12735, Min=314, Avg=2227.51, 90=3291, 99=4719, 99.9=6727, 99.99=8479] 
2023-06-05 12:52:44:219 1220 sec: 68573873 operations; 56262.9 current ops/sec; [READ: Count=280751, Max=35775, Min=427, Avg=4371.86, 90=6711, 99=11055, 99.9=17503, 99.99=24607] [UPDATE: Count=281854, Max=18639, Min=306, Avg=2234.31, 90=3301, 99=4815, 99.9=6911, 99.99=8767] 
2023-06-05 12:52:54:219 1230 sec: 69135598 operations; 56172.5 current ops/sec; [READ: Count=280650, Max=230527, Min=422, Avg=4484.57, 90=6647, 99=11487, 99.9=45823, 99.99=163967] [UPDATE: Count=281220, Max=30639, Min=304, Avg=2232.38, 90=3303, 99=4879, 99.9=7163, 99.99=9863] 
2023-06-05 12:53:04:219 1240 sec: 69698896 operations; 56329.8 current ops/sec; [READ: Count=281876, Max=43871, Min=374, Avg=4411.04, 90=6719, 99=11087, 99.9=26895, 99.99=33663] [UPDATE: Count=280836, Max=25919, Min=327, Avg=2255.48, 90=3333, 99=4919, 99.9=7811, 99.99=14847] 
2023-06-05 12:53:14:219 1250 sec: 70261184 operations; 56228.8 current ops/sec; [READ: Count=281040, Max=32191, Min=422, Avg=4440.71, 90=6783, 99=12047, 99.9=19807, 99.99=27231] [UPDATE: Count=281775, Max=22719, Min=332, Avg=2257.96, 90=3343, 99=4983, 99.9=7431, 99.99=9759] 
2023-06-05 12:53:24:219 1260 sec: 70823616 operations; 56243.2 current ops/sec; [READ: Count=282147, Max=53375, Min=387, Avg=4398.84, 90=6691, 99=11031, 99.9=21903, 99.99=44191] [UPDATE: Count=280209, Max=12751, Min=293, Avg=2252.34, 90=3341, 99=4863, 99.9=7407, 99.99=9879] 
2023-06-05 12:53:34:219 1270 sec: 71383504 operations; 55988.8 current ops/sec; [READ: Count=280413, Max=135039, Min=355, Avg=4501.13, 90=6791, 99=13191, 99.9=27487, 99.99=73023] [UPDATE: Count=279573, Max=13159, Min=320, Avg=2271.89, 90=3371, 99=5187, 99.9=8223, 99.99=10343] 
2023-06-05 12:53:44:220 1280 sec: 71939622 operations; 55611.8 current ops/sec; [READ: Count=277603, Max=294399, Min=392, Avg=4786.32, 90=6651, 99=12751, 99.9=158079, 99.99=166527] [UPDATE: Count=278523, Max=12935, Min=301, Avg=2232.66, 90=3327, 99=5019, 99.9=8099, 99.99=9951] 
2023-06-05 12:53:54:219 1290 sec: 72507855 operations; 56823.3 current ops/sec; [READ: Count=283894, Max=135423, Min=415, Avg=4605.73, 90=6807, 99=13079, 99.9=58431, 99.99=115647] [UPDATE: Count=284397, Max=26879, Min=314, Avg=2278.9, 90=3391, 99=5099, 99.9=7831, 99.99=10951] 
2023-06-05 12:54:04:219 1300 sec: 73071881 operations; 56402.6 current ops/sec; [READ: Count=282002, Max=106047, Min=371, Avg=4556.31, 90=6639, 99=14655, 99.9=61919, 99.99=80255] [UPDATE: Count=282051, Max=20847, Min=323, Avg=2223.84, 90=3311, 99=5123, 99.9=8551, 99.99=10951] 
2023-06-05 12:54:14:219 1310 sec: 73629173 operations; 55729.2 current ops/sec; [READ: Count=277917, Max=235647, Min=396, Avg=4716.78, 90=6715, 99=20287, 99.9=70719, 99.99=166527] [UPDATE: Count=279354, Max=15047, Min=307, Avg=2221.15, 90=3309, 99=5651, 99.9=9439, 99.99=11287] 
2023-06-05 12:54:24:219 1320 sec: 74182206 operations; 55303.3 current ops/sec; [READ: Count=276283, Max=167167, Min=388, Avg=4935.53, 90=6811, 99=23791, 99.9=131583, 99.99=164095] [UPDATE: Count=276833, Max=14663, Min=299, Avg=2208.8, 90=3297, 99=5951, 99.9=9495, 99.99=12119] 
2023-06-05 12:54:34:219 1330 sec: 74745522 operations; 56331.6 current ops/sec; [READ: Count=281465, Max=106239, Min=437, Avg=4821.27, 90=7023, 99=24511, 99.9=60895, 99.99=75647] [UPDATE: Count=281815, Max=20959, Min=324, Avg=2241.83, 90=3343, 99=5923, 99.9=9423, 99.99=11271] 
2023-06-05 12:54:44:219 1340 sec: 75307791 operations; 56226.9 current ops/sec; [READ: Count=280692, Max=183679, Min=397, Avg=4821.2, 90=7039, 99=22943, 99.9=95359, 99.99=109631] [UPDATE: Count=281595, Max=14999, Min=334, Avg=2241.44, 90=3359, 99=5831, 99.9=8815, 99.99=10815] 
2023-06-05 12:54:54:219 1350 sec: 75876823 operations; 56903.2 current ops/sec; [READ: Count=284328, Max=127487, Min=406, Avg=4697.14, 90=7115, 99=16639, 99.9=40607, 99.99=99007] [UPDATE: Count=284589, Max=27823, Min=322, Avg=2267.48, 90=3389, 99=5403, 99.9=8367, 99.99=11623] 
2023-06-05 12:55:04:219 1360 sec: 76445770 operations; 56894.7 current ops/sec; [READ: Count=284455, Max=66879, Min=360, Avg=4581.86, 90=7015, 99=13535, 99.9=28447, 99.99=35743] [UPDATE: Count=284404, Max=17935, Min=327, Avg=2270.19, 90=3381, 99=5215, 99.9=7755, 99.99=10671] 
2023-06-05 12:55:14:219 1370 sec: 76990856 operations; 54508.6 current ops/sec; [READ: Count=272332, Max=134655, Min=372, Avg=4932.04, 90=7255, 99=22207, 99.9=79423, 99.99=90879] [UPDATE: Count=272927, Max=16495, Min=325, Avg=2300.62, 90=3433, 99=6087, 99.9=8839, 99.99=10775] 
2023-06-05 12:55:24:219 1380 sec: 77555127 operations; 56427.1 current ops/sec; [READ: Count=282492, Max=90751, Min=385, Avg=4792.68, 90=7019, 99=18863, 99.9=79871, 99.99=86079] [UPDATE: Count=281714, Max=17999, Min=304, Avg=2280, 90=3409, 99=5451, 99.9=8599, 99.99=10623] 
2023-06-05 12:55:34:219 1390 sec: 78079311 operations; 52418.4 current ops/sec; [READ: Count=261695, Max=545279, Min=362, Avg=5412.06, 90=6391, 99=20239, 99.9=326399, 99.99=421375] [UPDATE: Count=262548, Max=33183, Min=286, Avg=2146.47, 90=3243, 99=5539, 99.9=9535, 99.99=31311] 
2023-06-05 12:55:44:219 1400 sec: 78605218 operations; 52590.7 current ops/sec; [READ: Count=262620, Max=406015, Min=374, Avg=5488.88, 90=6323, 99=18463, 99.9=374271, 99.99=398335] [UPDATE: Count=263265, Max=12199, Min=312, Avg=2107.32, 90=3217, 99=5167, 99.9=8415, 99.99=10391] 
2023-06-05 12:55:54:219 1410 sec: 79152737 operations; 54751.9 current ops/sec; [READ: Count=273624, Max=463615, Min=356, Avg=5170.89, 90=6503, 99=13295, 99.9=380671, 99.99=450815] [UPDATE: Count=273933, Max=21999, Min=312, Avg=2124.98, 90=3239, 99=4899, 99.9=7767, 99.99=10287] 
2023-06-05 12:56:04:219 1420 sec: 79718830 operations; 56609.3 current ops/sec; [READ: Count=282583, Max=122239, Min=408, Avg=4801.87, 90=7295, 99=21055, 99.9=50655, 99.99=107199] [UPDATE: Count=283021, Max=22111, Min=307, Avg=2264.72, 90=3417, 99=5855, 99.9=9063, 99.99=13975] 
2023-06-05 12:56:14:219 1430 sec: 80285832 operations; 56700.2 current ops/sec; [READ: Count=283299, Max=178431, Min=390, Avg=4786.49, 90=7243, 99=19887, 99.9=52991, 99.99=103103] [UPDATE: Count=284229, Max=22927, Min=319, Avg=2259.22, 90=3413, 99=5591, 99.9=8655, 99.99=10551] 
2023-06-05 12:56:24:219 1440 sec: 80847468 operations; 56163.6 current ops/sec; [READ: Count=280290, Max=182783, Min=401, Avg=4881.74, 90=7115, 99=23231, 99.9=93439, 99.99=137343] [UPDATE: Count=281340, Max=24735, Min=302, Avg=2233.73, 90=3373, 99=5639, 99.9=8887, 99.99=15839] 
2023-06-05 12:56:34:219 1450 sec: 81420180 operations; 57271.2 current ops/sec; [READ: Count=285913, Max=91007, Min=383, Avg=4720.84, 90=7275, 99=16655, 99.9=40447, 99.99=82879] [UPDATE: Count=286802, Max=13119, Min=312, Avg=2253.35, 90=3393, 99=5347, 99.9=8139, 99.99=10047] 
2023-06-05 12:56:44:219 1460 sec: 81988391 operations; 56821.1 current ops/sec; [READ: Count=284047, Max=69439, Min=408, Avg=4782.06, 90=7499, 99=17407, 99.9=33631, 99.99=59071] [UPDATE: Count=284189, Max=15279, Min=328, Avg=2244.7, 90=3411, 99=5451, 99.9=8035, 99.99=9999] 
2023-06-05 12:56:54:219 1470 sec: 82551571 operations; 56318 current ops/sec; [READ: Count=281822, Max=142463, Min=376, Avg=4827.25, 90=7267, 99=21647, 99.9=60255, 99.99=84927] [UPDATE: Count=281218, Max=31855, Min=318, Avg=2254.1, 90=3417, 99=5739, 99.9=8527, 99.99=12055] 
2023-06-05 12:57:04:219 1480 sec: 83108047 operations; 55647.6 current ops/sec; [READ: Count=278153, Max=277503, Min=412, Avg=4985.43, 90=6795, 99=19439, 99.9=162175, 99.99=201343] [UPDATE: Count=278515, Max=18431, Min=311, Avg=2168.91, 90=3295, 99=5051, 99.9=7955, 99.99=10887] 
2023-06-05 12:57:14:219 1490 sec: 83671673 operations; 56362.6 current ops/sec; [READ: Count=281022, Max=185983, Min=420, Avg=4864.28, 90=7027, 99=15351, 99.9=137343, 99.99=164735] [UPDATE: Count=282583, Max=12303, Min=291, Avg=2222.8, 90=3365, 99=5095, 99.9=7519, 99.99=9543] 
2023-06-05 12:57:24:219 1500 sec: 84239552 operations; 56787.9 current ops/sec; [READ: Count=284069, Max=138239, Min=402, Avg=4762.75, 90=7171, 99=14607, 99.9=79167, 99.99=110911] [UPDATE: Count=283845, Max=16119, Min=319, Avg=2263.79, 90=3413, 99=5203, 99.9=7279, 99.99=8959] 
2023-06-05 12:57:34:219 1510 sec: 84801398 operations; 56184.6 current ops/sec; [READ: Count=280975, Max=321279, Min=383, Avg=4826.2, 90=7071, 99=17887, 99.9=80639, 99.99=212735] [UPDATE: Count=280445, Max=20271, Min=314, Avg=2276.94, 90=3405, 99=5311, 99.9=8335, 99.99=13263] 
2023-06-05 12:57:44:219 1520 sec: 85361697 operations; 56029.9 current ops/sec; [READ: Count=280360, Max=132351, Min=414, Avg=4840.01, 90=7175, 99=20591, 99.9=80703, 99.99=91711] [UPDATE: Count=280248, Max=15831, Min=304, Avg=2282.55, 90=3407, 99=5695, 99.9=8775, 99.99=11095] 
2023-06-05 12:57:54:219 1530 sec: 85923202 operations; 56150.5 current ops/sec; [READ: Count=281233, Max=103999, Min=385, Avg=4842.48, 90=7199, 99=20863, 99.9=70207, 99.99=78463] [UPDATE: Count=280362, Max=29247, Min=333, Avg=2267.22, 90=3389, 99=5779, 99.9=8903, 99.99=11183] 
2023-06-05 12:58:04:219 1540 sec: 86484551 operations; 56134.9 current ops/sec; [READ: Count=281100, Max=73535, Min=397, Avg=4825.54, 90=7367, 99=20623, 99.9=43935, 99.99=54399] [UPDATE: Count=279984, Max=17631, Min=316, Avg=2290.41, 90=3429, 99=5919, 99.9=9127, 99.99=11863] 
2023-06-05 12:58:14:219 1550 sec: 87043643 operations; 55909.2 current ops/sec; [READ: Count=279122, Max=140031, Min=392, Avg=4873.97, 90=7163, 99=24367, 99.9=55391, 99.99=118399] [UPDATE: Count=280125, Max=17775, Min=324, Avg=2274.26, 90=3403, 99=5615, 99.9=8791, 99.99=10663] 
2023-06-05 12:58:24:219 1560 sec: 87601315 operations; 55767.2 current ops/sec; [READ: Count=278400, Max=122047, Min=376, Avg=4894.59, 90=7127, 99=24495, 99.9=83007, 99.99=116799] [UPDATE: Count=278781, Max=26479, Min=328, Avg=2279.29, 90=3405, 99=6027, 99.9=9663, 99.99=12903] 
2023-06-05 12:58:34:219 1570 sec: 88141776 operations; 54046.1 current ops/sec; [READ: Count=270166, Max=197631, Min=388, Avg=5134.53, 90=7103, 99=26751, 99.9=131839, 99.99=142207] [UPDATE: Count=270407, Max=21247, Min=324, Avg=2260.44, 90=3395, 99=6539, 99.9=9807, 99.99=14287] 
2023-06-05 12:58:44:219 1580 sec: 88688753 operations; 54697.7 current ops/sec; [READ: Count=273508, Max=103359, Min=375, Avg=5012.42, 90=7371, 99=25935, 99.9=56543, 99.99=86079] [UPDATE: Count=273373, Max=22767, Min=320, Avg=2297.11, 90=3449, 99=6527, 99.9=9631, 99.99=13271] 
2023-06-05 12:58:54:219 1590 sec: 89233145 operations; 54439.2 current ops/sec; [READ: Count=272094, Max=79167, Min=378, Avg=5028.25, 90=7415, 99=25295, 99.9=56159, 99.99=65791] [UPDATE: Count=272666, Max=33119, Min=317, Avg=2313.74, 90=3465, 99=6507, 99.9=9367, 99.99=12199] 
2023-06-05 12:59:04:219 1600 sec: 89769434 operations; 53628.9 current ops/sec; [READ: Count=268496, Max=269823, Min=357, Avg=5181.87, 90=6991, 99=25823, 99.9=137087, 99.99=215679] [UPDATE: Count=267571, Max=19087, Min=312, Avg=2271.49, 90=3393, 99=6387, 99.9=9391, 99.99=13735] 
2023-06-05 12:59:14:219 1610 sec: 90284349 operations; 51491.5 current ops/sec; [READ: Count=257188, Max=595967, Min=411, Avg=5599.83, 90=6223, 99=22303, 99.9=324095, 99.99=460031] [UPDATE: Count=258159, Max=18911, Min=312, Avg=2152.24, 90=3211, 99=5343, 99.9=8679, 99.99=10871] 
2023-06-05 12:59:24:219 1620 sec: 90828959 operations; 54461 current ops/sec; [READ: Count=272446, Max=367615, Min=389, Avg=5133.87, 90=6523, 99=15743, 99.9=322815, 99.99=329983] [UPDATE: Count=272102, Max=12951, Min=311, Avg=2221.13, 90=3293, 99=4915, 99.9=7799, 99.99=9935] 
2023-06-05 12:59:34:219 1630 sec: 91396059 operations; 56710 current ops/sec; [READ: Count=283698, Max=122111, Min=437, Avg=4723.24, 90=7087, 99=14071, 99.9=51263, 99.99=74239] [UPDATE: Count=283246, Max=12791, Min=295, Avg=2325.72, 90=3429, 99=5299, 99.9=8111, 99.99=10167] 
2023-06-05 12:59:44:219 1640 sec: 91967522 operations; 57146.3 current ops/sec; [READ: Count=285329, Max=69247, Min=400, Avg=4670.98, 90=7099, 99=13231, 99.9=25007, 99.99=39295] [UPDATE: Count=286201, Max=12407, Min=311, Avg=2327.14, 90=3419, 99=5163, 99.9=8091, 99.99=10167] 
2023-06-05 12:59:54:219 1650 sec: 92531016 operations; 56349.4 current ops/sec; [READ: Count=281653, Max=117951, Min=393, Avg=4780.07, 90=7011, 99=15551, 99.9=79935, 99.99=96255] [UPDATE: Count=281962, Max=17823, Min=322, Avg=2315.34, 90=3407, 99=5327, 99.9=8527, 99.99=12103] 
2023-06-05 13:00:04:219 1660 sec: 93097526 operations; 56651 current ops/sec; [READ: Count=282795, Max=97087, Min=412, Avg=4730.06, 90=7007, 99=14423, 99.9=65279, 99.99=83711] [UPDATE: Count=283529, Max=24879, Min=308, Avg=2332.25, 90=3423, 99=5255, 99.9=8255, 99.99=16183] 
2023-06-05 13:00:14:219 1670 sec: 93650427 operations; 55290.1 current ops/sec; [READ: Count=276643, Max=328959, Min=377, Avg=4915.48, 90=6899, 99=16623, 99.9=99327, 99.99=271359] [UPDATE: Count=276508, Max=11415, Min=308, Avg=2311.27, 90=3397, 99=5327, 99.9=7747, 99.99=9607] 
2023-06-05 13:00:24:219 1680 sec: 94214164 operations; 56373.7 current ops/sec; [READ: Count=281913, Max=73663, Min=392, Avg=4731.99, 90=7123, 99=13647, 99.9=22639, 99.99=55519] [UPDATE: Count=281522, Max=13351, Min=321, Avg=2361.84, 90=3445, 99=5227, 99.9=7567, 99.99=9183] 
2023-06-05 13:00:34:219 1690 sec: 94752889 operations; 53872.5 current ops/sec; [READ: Count=268928, Max=268287, Min=398, Avg=5070.85, 90=7183, 99=18271, 99.9=143231, 99.99=189311] [UPDATE: Count=269938, Max=13719, Min=321, Avg=2355.55, 90=3447, 99=5759, 99.9=8471, 99.99=10623] 
2023-06-05 13:00:44:219 1700 sec: 95305704 operations; 55281.5 current ops/sec; [READ: Count=276353, Max=94271, Min=407, Avg=4859.73, 90=7199, 99=17487, 99.9=50943, 99.99=79295] [UPDATE: Count=276407, Max=80703, Min=324, Avg=2369.85, 90=3445, 99=5503, 99.9=9391, 99.99=75583] 
2023-06-05 13:00:54:219 1710 sec: 95845856 operations; 54015.2 current ops/sec; [READ: Count=269331, Max=223103, Min=422, Avg=5114.7, 90=6943, 99=28511, 99.9=134143, 99.99=193407] [UPDATE: Count=270903, Max=19375, Min=326, Avg=2290.83, 90=3367, 99=5891, 99.9=9431, 99.99=11663] 
2023-06-05 13:01:04:219 1720 sec: 96392178 operations; 54632.2 current ops/sec; [READ: Count=273928, Max=171519, Min=369, Avg=4996.47, 90=6947, 99=20623, 99.9=98431, 99.99=138751] [UPDATE: Count=272381, Max=16247, Min=344, Avg=2317.88, 90=3397, 99=5443, 99.9=8887, 99.99=10903] 
2023-06-05 13:01:14:219 1730 sec: 96931943 operations; 53976.5 current ops/sec; [READ: Count=270040, Max=164223, Min=395, Avg=5079.09, 90=7015, 99=22287, 99.9=98047, 99.99=156287] [UPDATE: Count=269741, Max=21951, Min=337, Avg=2326.92, 90=3413, 99=5647, 99.9=8743, 99.99=10791] 
2023-06-05 13:01:24:219 1740 sec: 97473805 operations; 54186.2 current ops/sec; [READ: Count=271072, Max=294399, Min=439, Avg=5050.41, 90=7027, 99=21311, 99.9=88639, 99.99=143359] [UPDATE: Count=270855, Max=12015, Min=356, Avg=2326.26, 90=3431, 99=5655, 99.9=8471, 99.99=10471] 
2023-06-05 13:01:34:219 1750 sec: 98033243 operations; 55943.8 current ops/sec; [READ: Count=279580, Max=120319, Min=374, Avg=4792.96, 90=7143, 99=13791, 99.9=61407, 99.99=80191] [UPDATE: Count=279813, Max=11775, Min=351, Avg=2357.91, 90=3463, 99=5211, 99.9=7747, 99.99=10007] 
2023-06-05 13:01:44:219 1760 sec: 98598279 operations; 56503.6 current ops/sec; [READ: Count=281984, Max=48383, Min=406, Avg=4721.35, 90=7047, 99=13519, 99.9=34047, 99.99=39775] [UPDATE: Count=282906, Max=13791, Min=332, Avg=2358.93, 90=3447, 99=5191, 99.9=8223, 99.99=10687] 
2023-06-05 13:01:54:219 1770 sec: 99159448 operations; 56116.9 current ops/sec; [READ: Count=280661, Max=50015, Min=386, Avg=4755.82, 90=7071, 99=16479, 99.9=30271, 99.99=35167] [UPDATE: Count=280531, Max=15983, Min=343, Avg=2368.81, 90=3453, 99=5403, 99.9=8655, 99.99=10703] 
2023-06-05 13:02:04:219 1780 sec: 99715912 operations; 55646.4 current ops/sec; [READ: Count=277896, Max=110207, Min=402, Avg=4810.58, 90=7011, 99=17183, 99.9=34399, 99.99=99519] [UPDATE: Count=278285, Max=22671, Min=332, Avg=2380.6, 90=3445, 99=5479, 99.9=8983, 99.99=15559] 
2023-06-05 13:02:14:219 1790 sec: 100260812 operations; 54490 current ops/sec; [READ: Count=272760, Max=306943, Min=418, Avg=4989.96, 90=6927, 99=19199, 99.9=123647, 99.99=188031] [UPDATE: Count=272503, Max=19119, Min=319, Avg=2336.52, 90=3409, 99=5479, 99.9=8295, 99.99=10807] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:24:219 1800 sec: 100871364 operations; 61055.2 current ops/sec; [READ: Count=305179, Max=196991, Min=418, Avg=4387.09, 90=6119, 99=9855, 99.9=160639, 99.99=169727] [UPDATE: Count=305005, Max=18671, Min=329, Avg=2165.47, 90=3213, 99=4615, 99.9=7347, 99.99=9783] 
Still waiting for thread Thread-66 to complete. Workload status: true
2023-06-05 13:02:26:484 1802 sec: 100872849 operations; 655.92 current ops/sec; [READ: Count=760, Max=11415, Min=419, Avg=3877.79, 90=6307, 99=8719, 99.9=11119, 99.99=11415] [CLEANUP: Count=200, Max=2236415, Min=0, Avg=11197.81, 90=2, 99=23, 99.9=2236415, 99.99=2236415] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802264
[OVERALL], Throughput(ops/sec), 55970.07375168122
[TOTAL_GCS_PS_Scavenge], Count, 6678
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 16923
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9389856314058318
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 135
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0074905785167988705
[TOTAL_GCs], Count, 6681
[TOTAL_GC_TIME], Time(ms), 17058
[TOTAL_GC_TIME_%], Time(%), 0.9464762099226306
[READ], Operations, 50441406
[READ], AverageLatency(us), 4513.446023193723
[READ], MinLatency(us), 339
[READ], MaxLatency(us), 600575
[READ], 95thPercentileLatency(us), 7919
[READ], 99thPercentileLatency(us), 16071
[READ], Return=OK, 50441406
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11197.805
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2236415
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 23
[UPDATE], Operations, 50431443
[UPDATE], AverageLatency(us), 2191.363366759107
[UPDATE], MinLatency(us), 277
[UPDATE], MaxLatency(us), 137215
[UPDATE], 95thPercentileLatency(us), 3705
[UPDATE], 99thPercentileLatency(us), 5279
[UPDATE], Return=OK, 50431443
