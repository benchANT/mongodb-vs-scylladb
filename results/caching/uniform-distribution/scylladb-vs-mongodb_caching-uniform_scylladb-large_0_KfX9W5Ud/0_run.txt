bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=44.228.51.231,54.187.99.16,54.185.70.238 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=6pdPV1kaRuAv0eL -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 200 -p recordcount=10000000000 -target 56250 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.5 -p updateproportion=0.5 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-06-05 12:32:18:891 0 sec: 0 operations; 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.153.11:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.185.70.238:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.16.5:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.214.79.183:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.212.13.4:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.51.231:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.217.225:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.244.174.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.187.99.16:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.226.165.53:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.47.3:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.231.75.191:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 90998677-b175-448a-9955-55a48c1a3f83

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.212.13.4; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.226.165.53; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.244.174.45; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.153.11; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.16.5; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.217.225; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.231.75.191; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.185.70.238; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.187.99.16; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.51.231; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.47.3; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.214.79.183; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
2023-06-05 12:32:28:876 10 sec: 512567 operations; 51256.7 current ops/sec; [READ: Count=256848, Max=133759, Min=341, Avg=2361.78, 90=3627, 99=9887, 99.9=22575, 99.99=84159] [UPDATE: Count=257145, Max=137599, Min=267, Avg=1479.98, 90=2087, 99=6487, 99.9=21615, 99.99=86463] 
2023-06-05 12:32:38:876 20 sec: 1075078 operations; 56251.1 current ops/sec; [READ: Count=281299, Max=45279, Min=378, Avg=3649.29, 90=5575, 99=17743, 99.9=22463, 99.99=26911] [UPDATE: Count=281025, Max=12127, Min=339, Avg=1844.16, 90=2767, 99=5759, 99.9=7903, 99.99=9191] 
2023-06-05 12:32:48:876 30 sec: 1637455 operations; 56237.7 current ops/sec; [READ: Count=281327, Max=41535, Min=406, Avg=3725.62, 90=5739, 99=17327, 99.9=29295, 99.99=35071] [UPDATE: Count=281032, Max=16463, Min=326, Avg=1877.12, 90=2833, 99=5743, 99.9=7907, 99.99=9583] 
2023-06-05 12:32:58:876 40 sec: 2200010 operations; 56255.5 current ops/sec; [READ: Count=281520, Max=39743, Min=403, Avg=3843.04, 90=5943, 99=18175, 99.9=31567, 99.99=35551] [UPDATE: Count=280992, Max=16639, Min=333, Avg=1910.62, 90=2893, 99=5891, 99.9=8047, 99.99=9983] 
2023-06-05 12:33:08:876 50 sec: 2760957 operations; 56094.7 current ops/sec; [READ: Count=281040, Max=97791, Min=421, Avg=4018.67, 90=6271, 99=18991, 99.9=31743, 99.99=65023] [UPDATE: Count=279982, Max=11983, Min=315, Avg=1955.12, 90=2969, 99=6059, 99.9=8055, 99.99=9311] 
2023-06-05 12:33:18:876 60 sec: 3324048 operations; 56309.1 current ops/sec; [READ: Count=281548, Max=156799, Min=390, Avg=4512.78, 90=6599, 99=27935, 99.9=81151, 99.99=98751] [UPDATE: Count=281608, Max=12487, Min=324, Avg=1990.09, 90=3033, 99=6151, 99.9=8207, 99.99=9703] 
2023-06-05 12:33:28:876 70 sec: 3887450 operations; 56340.2 current ops/sec; [READ: Count=281740, Max=79743, Min=399, Avg=4210.36, 90=6467, 99=19791, 99.9=56415, 99.99=65407] [UPDATE: Count=281584, Max=13855, Min=330, Avg=2005.81, 90=3049, 99=5967, 99.9=8059, 99.99=9671] 
2023-06-05 12:33:38:876 80 sec: 4449817 operations; 56236.7 current ops/sec; [READ: Count=281588, Max=51839, Min=398, Avg=4142.02, 90=6503, 99=18959, 99.9=27855, 99.99=33663] [UPDATE: Count=280534, Max=14855, Min=342, Avg=2023, 90=3091, 99=6027, 99.9=8135, 99.99=9543] 
2023-06-05 12:33:48:876 90 sec: 5012265 operations; 56244.8 current ops/sec; [READ: Count=281570, Max=65983, Min=409, Avg=4226.48, 90=6595, 99=19215, 99.9=38431, 99.99=44799] [UPDATE: Count=280908, Max=16543, Min=339, Avg=2037.37, 90=3119, 99=6083, 99.9=8171, 99.99=10479] 
2023-06-05 12:33:58:876 100 sec: 5574573 operations; 56230.8 current ops/sec; [READ: Count=280355, Max=48191, Min=405, Avg=4155.58, 90=6567, 99=19167, 99.9=28207, 99.99=32735] [UPDATE: Count=281687, Max=22847, Min=341, Avg=2027.31, 90=3113, 99=6063, 99.9=8311, 99.99=15999] 
2023-06-05 12:34:08:876 110 sec: 6134864 operations; 56029.1 current ops/sec; [READ: Count=280314, Max=149503, Min=407, Avg=4389.93, 90=6727, 99=22671, 99.9=59679, 99.99=104511] [UPDATE: Count=280438, Max=20319, Min=300, Avg=2030.3, 90=3093, 99=6467, 99.9=8895, 99.99=10919] 
2023-06-05 12:34:18:876 120 sec: 6697982 operations; 56311.8 current ops/sec; [READ: Count=281460, Max=169727, Min=409, Avg=4644.94, 90=6619, 99=26063, 99.9=97151, 99.99=115519] [UPDATE: Count=281850, Max=21647, Min=337, Avg=2045.44, 90=3101, 99=6459, 99.9=8903, 99.99=10671] 
2023-06-05 12:34:28:876 130 sec: 7261570 operations; 56358.8 current ops/sec; [READ: Count=281923, Max=86015, Min=395, Avg=4395.63, 90=6811, 99=22431, 99.9=30623, 99.99=37343] [UPDATE: Count=281430, Max=15271, Min=335, Avg=2079.18, 90=3125, 99=6743, 99.9=9167, 99.99=10895] 
2023-06-05 12:34:38:876 140 sec: 7808231 operations; 54666.1 current ops/sec; [READ: Count=273313, Max=295423, Min=396, Avg=4991.96, 90=6863, 99=22175, 99.9=162175, 99.99=265215] [UPDATE: Count=272958, Max=23439, Min=327, Avg=2050.78, 90=3095, 99=7015, 99.9=9511, 99.99=12615] 
2023-06-05 12:34:48:876 150 sec: 8366650 operations; 55841.9 current ops/sec; [READ: Count=278913, Max=419839, Min=417, Avg=4985.12, 90=6735, 99=25647, 99.9=161151, 99.99=217855] [UPDATE: Count=280138, Max=18575, Min=337, Avg=2057.06, 90=3103, 99=6871, 99.9=9463, 99.99=12543] 
2023-06-05 12:34:58:876 160 sec: 8923541 operations; 55689.1 current ops/sec; [READ: Count=277859, Max=337151, Min=401, Avg=5046.15, 90=6351, 99=22367, 99.9=190719, 99.99=286719] [UPDATE: Count=278904, Max=16879, Min=323, Avg=2030.33, 90=3069, 99=6535, 99.9=9191, 99.99=11471] 
2023-06-05 12:35:08:876 170 sec: 9492364 operations; 56882.3 current ops/sec; [READ: Count=284253, Max=234623, Min=387, Avg=4786.12, 90=6547, 99=20495, 99.9=188543, 99.99=194943] [UPDATE: Count=284292, Max=13207, Min=316, Avg=2087.24, 90=3163, 99=5963, 99.9=8231, 99.99=10143] 
2023-06-05 12:35:18:876 180 sec: 10042819 operations; 55045.5 current ops/sec; [READ: Count=274853, Max=372991, Min=400, Avg=5142.96, 90=6279, 99=27631, 99.9=224383, 99.99=279551] [UPDATE: Count=275840, Max=17183, Min=312, Avg=2052.17, 90=3123, 99=5811, 99.9=8223, 99.99=10119] 
2023-06-05 12:35:28:876 190 sec: 10627582 operations; 58476.3 current ops/sec; [READ: Count=291941, Max=191743, Min=394, Avg=4502.91, 90=6419, 99=21823, 99.9=115455, 99.99=185727] [UPDATE: Count=292751, Max=16943, Min=334, Avg=2125.87, 90=3163, 99=5555, 99.9=8511, 99.99=10407] 
2023-06-05 12:35:38:876 200 sec: 11191709 operations; 56412.7 current ops/sec; [READ: Count=281827, Max=293631, Min=409, Avg=4659.61, 90=6075, 99=23695, 99.9=189311, 99.99=205823] [UPDATE: Count=282293, Max=13207, Min=331, Avg=2064.95, 90=3097, 99=5475, 99.9=8599, 99.99=10543] 
2023-06-05 12:35:48:876 210 sec: 11759318 operations; 56760.9 current ops/sec; [READ: Count=283688, Max=179071, Min=377, Avg=4512.54, 90=6191, 99=20671, 99.9=160127, 99.99=166015] [UPDATE: Count=283820, Max=18015, Min=333, Avg=2091.42, 90=3129, 99=5483, 99.9=8535, 99.99=10727] 
2023-06-05 12:35:58:876 220 sec: 12324651 operations; 56533.3 current ops/sec; [READ: Count=282432, Max=134527, Min=418, Avg=4148.9, 90=6071, 99=19007, 99.9=52927, 99.99=111359] [UPDATE: Count=282445, Max=27407, Min=338, Avg=2066.13, 90=3079, 99=5467, 99.9=8991, 99.99=16071] 
2023-06-05 12:36:08:876 230 sec: 12887496 operations; 56284.5 current ops/sec; [READ: Count=281504, Max=156415, Min=415, Avg=4059.22, 90=5847, 99=18607, 99.9=52543, 99.99=85887] [UPDATE: Count=281767, Max=22111, Min=344, Avg=2015.12, 90=3015, 99=5079, 99.9=8239, 99.99=11151] 
2023-06-05 12:36:18:876 240 sec: 13450177 operations; 56268.1 current ops/sec; [READ: Count=281575, Max=40479, Min=424, Avg=3682.21, 90=5531, 99=11119, 99.9=25727, 99.99=35039] [UPDATE: Count=281040, Max=14183, Min=328, Avg=1953.75, 90=2941, 99=4543, 99.9=7127, 99.99=9055] 
2023-06-05 12:36:28:876 250 sec: 14012594 operations; 56241.7 current ops/sec; [READ: Count=281306, Max=23295, Min=396, Avg=3511.79, 90=5375, 99=7675, 99.9=10535, 99.99=17183] [UPDATE: Count=280995, Max=26143, Min=321, Avg=1925.67, 90=2907, 99=3995, 99.9=6323, 99.99=7679] 
2023-06-05 12:36:38:876 260 sec: 14575156 operations; 56256.2 current ops/sec; [READ: Count=281380, Max=31711, Min=380, Avg=3561.73, 90=5459, 99=7927, 99.9=12247, 99.99=19791] [UPDATE: Count=281155, Max=12015, Min=334, Avg=1942.39, 90=2951, 99=4093, 99.9=6247, 99.99=8623] 
2023-06-05 12:36:48:876 270 sec: 15137671 operations; 56251.5 current ops/sec; [READ: Count=281464, Max=26895, Min=393, Avg=3565.88, 90=5491, 99=8187, 99.9=13951, 99.99=22175] [UPDATE: Count=280596, Max=25871, Min=330, Avg=1943.6, 90=2961, 99=4243, 99.9=6907, 99.99=15295] 
2023-06-05 12:36:58:876 280 sec: 15700147 operations; 56247.6 current ops/sec; [READ: Count=281459, Max=33311, Min=364, Avg=3614.14, 90=5567, 99=8575, 99.9=14687, 99.99=25247] [UPDATE: Count=281621, Max=24959, Min=326, Avg=1957.28, 90=2993, 99=4271, 99.9=6715, 99.99=13575] 
2023-06-05 12:37:08:876 290 sec: 16262664 operations; 56251.7 current ops/sec; [READ: Count=281469, Max=27567, Min=417, Avg=3521.72, 90=5447, 99=8295, 99.9=14615, 99.99=21407] [UPDATE: Count=281018, Max=13479, Min=322, Avg=1915.18, 90=2939, 99=4239, 99.9=6539, 99.99=9015] 
2023-06-05 12:37:18:876 300 sec: 16825173 operations; 56250.9 current ops/sec; [READ: Count=281141, Max=100543, Min=387, Avg=3580.89, 90=5503, 99=8567, 99.9=19871, 99.99=40639] [UPDATE: Count=281461, Max=11727, Min=350, Avg=1931.76, 90=2953, 99=4327, 99.9=6603, 99.99=8719] 
2023-06-05 12:37:28:876 310 sec: 17387613 operations; 56244 current ops/sec; [READ: Count=281260, Max=30015, Min=410, Avg=3503.15, 90=5395, 99=8123, 99.9=12743, 99.99=24159] [UPDATE: Count=281089, Max=11031, Min=318, Avg=1900.13, 90=2905, 99=4123, 99.9=5943, 99.99=7715] 
2023-06-05 12:37:38:876 320 sec: 17950190 operations; 56257.7 current ops/sec; [READ: Count=280887, Max=96639, Min=396, Avg=3496.93, 90=5331, 99=8567, 99.9=24399, 99.99=50527] [UPDATE: Count=281772, Max=11007, Min=339, Avg=1879.97, 90=2871, 99=4215, 99.9=6879, 99.99=8783] 
2023-06-05 12:37:48:876 330 sec: 18512670 operations; 56248 current ops/sec; [READ: Count=282044, Max=28607, Min=417, Avg=3456.26, 90=5299, 99=8991, 99.9=20143, 99.99=24495] [UPDATE: Count=280376, Max=18303, Min=324, Avg=1861.9, 90=2823, 99=4367, 99.9=7923, 99.99=10983] 
2023-06-05 12:37:58:876 340 sec: 19074968 operations; 56229.8 current ops/sec; [READ: Count=280773, Max=34463, Min=413, Avg=3415.85, 90=5231, 99=9327, 99.9=21487, 99.99=25343] [UPDATE: Count=281653, Max=16271, Min=330, Avg=1839.98, 90=2785, 99=4503, 99.9=7919, 99.99=10871] 
2023-06-05 12:38:08:876 350 sec: 19637546 operations; 56257.8 current ops/sec; [READ: Count=281716, Max=28879, Min=397, Avg=3416.09, 90=5215, 99=8967, 99.9=21167, 99.99=25135] [UPDATE: Count=280668, Max=17375, Min=336, Avg=1841.42, 90=2781, 99=4311, 99.9=7331, 99.99=9919] 
2023-06-05 12:38:18:876 360 sec: 20200200 operations; 56265.4 current ops/sec; [READ: Count=281851, Max=26175, Min=400, Avg=3335.66, 90=5083, 99=7747, 99.9=18287, 99.99=22431] [UPDATE: Count=280794, Max=9887, Min=301, Avg=1826.93, 90=2755, 99=4029, 99.9=6263, 99.99=7855] 
2023-06-05 12:38:28:876 370 sec: 20762691 operations; 56249.1 current ops/sec; [READ: Count=281120, Max=19183, Min=406, Avg=3299.75, 90=5067, 99=7379, 99.9=9695, 99.99=11687] [UPDATE: Count=281352, Max=9151, Min=325, Avg=1818.75, 90=2747, 99=3881, 99.9=5983, 99.99=7263] 
2023-06-05 12:38:38:876 380 sec: 21325192 operations; 56250.1 current ops/sec; [READ: Count=280776, Max=54591, Min=374, Avg=3308.33, 90=5083, 99=7611, 99.9=12111, 99.99=25631] [UPDATE: Count=281804, Max=12455, Min=331, Avg=1818.24, 90=2757, 99=4029, 99.9=6407, 99.99=8599] 
2023-06-05 12:38:48:876 390 sec: 21887689 operations; 56249.7 current ops/sec; [READ: Count=281046, Max=26415, Min=432, Avg=3325.37, 90=5107, 99=7491, 99.9=10151, 99.99=15271] [UPDATE: Count=281394, Max=20079, Min=324, Avg=1830.89, 90=2785, 99=3957, 99.9=5991, 99.99=10263] 
2023-06-05 12:38:58:876 400 sec: 22450165 operations; 56247.6 current ops/sec; [READ: Count=281044, Max=23007, Min=355, Avg=3391.28, 90=5231, 99=7651, 99.9=10407, 99.99=14527] [UPDATE: Count=281364, Max=17407, Min=329, Avg=1862.73, 90=2841, 99=4061, 99.9=6171, 99.99=9279] 
2023-06-05 12:39:08:876 410 sec: 23012697 operations; 56253.2 current ops/sec; [READ: Count=281546, Max=27583, Min=398, Avg=3508.13, 90=5407, 99=8199, 99.9=13823, 99.99=21183] [UPDATE: Count=281045, Max=12551, Min=313, Avg=1904.87, 90=2911, 99=4223, 99.9=6571, 99.99=8687] 
2023-06-05 12:39:18:876 420 sec: 23575177 operations; 56248 current ops/sec; [READ: Count=280855, Max=24303, Min=392, Avg=3530.28, 90=5463, 99=8027, 99.9=10999, 99.99=15951] [UPDATE: Count=281523, Max=10007, Min=328, Avg=1914.77, 90=2927, 99=4123, 99.9=6171, 99.99=7527] 
2023-06-05 12:39:28:876 430 sec: 24137643 operations; 56246.6 current ops/sec; [READ: Count=281885, Max=21711, Min=423, Avg=3604.96, 90=5567, 99=8287, 99.9=11551, 99.99=16479] [UPDATE: Count=280741, Max=12215, Min=337, Avg=1945.81, 90=2971, 99=4219, 99.9=6403, 99.99=8511] 
2023-06-05 12:39:38:876 440 sec: 24700168 operations; 56252.5 current ops/sec; [READ: Count=281118, Max=17391, Min=403, Avg=3603.96, 90=5583, 99=8199, 99.9=11015, 99.99=14479] [UPDATE: Count=281127, Max=18399, Min=313, Avg=1950.79, 90=2989, 99=4255, 99.9=6319, 99.99=8511] 
2023-06-05 12:39:48:876 450 sec: 25262660 operations; 56249.2 current ops/sec; [READ: Count=281387, Max=21151, Min=404, Avg=3596.61, 90=5559, 99=8135, 99.9=11575, 99.99=16031] [UPDATE: Count=281262, Max=24703, Min=315, Avg=1951, 90=2991, 99=4231, 99.9=6443, 99.99=11831] 
2023-06-05 12:39:58:876 460 sec: 25825163 operations; 56250.3 current ops/sec; [READ: Count=280821, Max=29119, Min=383, Avg=3646.46, 90=5647, 99=8935, 99.9=17503, 99.99=23455] [UPDATE: Count=281741, Max=18335, Min=319, Avg=1953.48, 90=3003, 99=4423, 99.9=6919, 99.99=9823] 
2023-06-05 12:40:08:876 470 sec: 26387245 operations; 56208.2 current ops/sec; [READ: Count=281013, Max=48223, Min=382, Avg=3838.3, 90=5795, 99=12319, 99.9=30831, 99.99=35743] [UPDATE: Count=281120, Max=11343, Min=331, Avg=1991.18, 90=3039, 99=4855, 99.9=7795, 99.99=9639] 
2023-06-05 12:40:18:876 480 sec: 26945878 operations; 55863.3 current ops/sec; [READ: Count=279869, Max=277503, Min=389, Avg=4688.7, 90=6387, 99=25231, 99.9=138495, 99.99=233727] [UPDATE: Count=279094, Max=14543, Min=316, Avg=2084.17, 90=3163, 99=6131, 99.9=8775, 99.99=10623] 
2023-06-05 12:40:28:876 490 sec: 27512644 operations; 56676.6 current ops/sec; [READ: Count=284139, Max=234111, Min=366, Avg=3943.31, 90=5731, 99=10791, 99.9=94207, 99.99=120063] [UPDATE: Count=282390, Max=12047, Min=329, Avg=1987.92, 90=3019, 99=4707, 99.9=7463, 99.99=9759] 
2023-06-05 12:40:38:876 500 sec: 28075165 operations; 56252.1 current ops/sec; [READ: Count=281822, Max=32575, Min=385, Avg=3654.73, 90=5659, 99=9087, 99.9=17231, 99.99=24143] [UPDATE: Count=280583, Max=10935, Min=346, Avg=1957.4, 90=2997, 99=4459, 99.9=6775, 99.99=9111] 
2023-06-05 12:40:48:876 510 sec: 28637681 operations; 56251.6 current ops/sec; [READ: Count=281406, Max=41407, Min=410, Avg=3622.87, 90=5619, 99=8975, 99.9=16687, 99.99=27727] [UPDATE: Count=281111, Max=16991, Min=320, Avg=1935.65, 90=2967, 99=4399, 99.9=6983, 99.99=10271] 
2023-06-05 12:40:58:876 520 sec: 29200162 operations; 56248.1 current ops/sec; [READ: Count=281384, Max=83199, Min=419, Avg=3679.59, 90=5663, 99=9303, 99.9=30831, 99.99=44831] [UPDATE: Count=281300, Max=18783, Min=295, Avg=1948.12, 90=2987, 99=4527, 99.9=7391, 99.99=10855] 
2023-06-05 12:41:08:876 530 sec: 29762602 operations; 56244 current ops/sec; [READ: Count=281338, Max=23599, Min=401, Avg=3657.17, 90=5691, 99=8719, 99.9=15055, 99.99=20559] [UPDATE: Count=280908, Max=11671, Min=330, Avg=1952.73, 90=2999, 99=4383, 99.9=6639, 99.99=8775] 
2023-06-05 12:41:18:876 540 sec: 30325144 operations; 56254.2 current ops/sec; [READ: Count=281395, Max=24543, Min=380, Avg=3676.4, 90=5711, 99=8975, 99.9=16991, 99.99=21423] [UPDATE: Count=281074, Max=14335, Min=332, Avg=1961.71, 90=3005, 99=4475, 99.9=6955, 99.99=9055] 
2023-06-05 12:41:28:876 550 sec: 30887601 operations; 56245.7 current ops/sec; [READ: Count=281681, Max=38111, Min=380, Avg=3764.48, 90=5839, 99=9471, 99.9=18447, 99.99=25119] [UPDATE: Count=280914, Max=11551, Min=338, Avg=1989.91, 90=3055, 99=4515, 99.9=7011, 99.99=9199] 
2023-06-05 12:41:38:876 560 sec: 31450079 operations; 56247.8 current ops/sec; [READ: Count=280921, Max=36575, Min=411, Avg=3825.37, 90=5871, 99=10687, 99.9=24767, 99.99=29311] [UPDATE: Count=281658, Max=16447, Min=321, Avg=1995.24, 90=3053, 99=4691, 99.9=7931, 99.99=10223] 
2023-06-05 12:41:48:876 570 sec: 32001888 operations; 55180.9 current ops/sec; [READ: Count=275966, Max=395519, Min=387, Avg=4357.06, 90=5759, 99=12975, 99.9=188671, 99.99=322303] [UPDATE: Count=275297, Max=27119, Min=327, Avg=1979.15, 90=3031, 99=5039, 99.9=9087, 99.99=16111] 
2023-06-05 12:41:58:876 580 sec: 32556070 operations; 55418.2 current ops/sec; [READ: Count=276801, Max=412159, Min=393, Avg=4954.66, 90=5759, 99=14471, 99.9=229503, 99.99=359167] [UPDATE: Count=278013, Max=20655, Min=319, Avg=1964, 90=3001, 99=4523, 99.9=7947, 99.99=11111] 
2023-06-05 12:42:08:876 590 sec: 33107290 operations; 55122 current ops/sec; [READ: Count=275517, Max=322815, Min=412, Avg=5051.51, 90=6067, 99=37599, 99.9=226175, 99.99=289279] [UPDATE: Count=275598, Max=13127, Min=310, Avg=2034.47, 90=3101, 99=5151, 99.9=8191, 99.99=10295] 
2023-06-05 12:42:18:876 600 sec: 33611122 operations; 50383.2 current ops/sec; [READ: Count=251616, Max=399871, Min=388, Avg=5805.62, 90=7439, 99=34431, 99.9=320767, 99.99=328703] [UPDATE: Count=252311, Max=15687, Min=313, Avg=2112.26, 90=3279, 99=6739, 99.9=8999, 99.99=10895] 
2023-06-05 12:42:28:876 610 sec: 34125028 operations; 51390.6 current ops/sec; [READ: Count=257054, Max=348671, Min=387, Avg=5705.7, 90=6767, 99=31247, 99.9=324863, 99.99=329215] [UPDATE: Count=256922, Max=12951, Min=328, Avg=2084.59, 90=3239, 99=6235, 99.9=8679, 99.99=10631] 
2023-06-05 12:42:38:876 620 sec: 34670951 operations; 54592.3 current ops/sec; [READ: Count=272791, Max=326655, Min=388, Avg=5182.81, 90=6879, 99=33471, 99.9=162559, 99.99=321279] [UPDATE: Count=273122, Max=21407, Min=325, Avg=2152.13, 90=3301, 99=5951, 99.9=8583, 99.99=13415] 
2023-06-05 12:42:48:876 630 sec: 35229329 operations; 55837.8 current ops/sec; [READ: Count=278666, Max=143231, Min=402, Avg=4966.02, 90=7223, 99=28831, 99.9=133503, 99.99=138367] [UPDATE: Count=279636, Max=17359, Min=300, Avg=2199.5, 90=3365, 99=6191, 99.9=8287, 99.99=11135] 
2023-06-05 12:42:58:876 640 sec: 35794163 operations; 56483.4 current ops/sec; [READ: Count=282341, Max=248703, Min=404, Avg=4949.34, 90=6539, 99=38943, 99.9=136191, 99.99=171007] [UPDATE: Count=282619, Max=18447, Min=329, Avg=2129.5, 90=3245, 99=5435, 99.9=7995, 99.99=10271] 
2023-06-05 12:43:08:876 650 sec: 36365124 operations; 57096.1 current ops/sec; [READ: Count=285208, Max=228351, Min=406, Avg=4813.76, 90=6807, 99=20671, 99.9=115455, 99.99=134911] [UPDATE: Count=285612, Max=12191, Min=331, Avg=2186.74, 90=3303, 99=5707, 99.9=8263, 99.99=10031] 
2023-06-05 12:43:18:876 660 sec: 36946352 operations; 58122.8 current ops/sec; [READ: Count=290698, Max=259967, Min=434, Avg=4689.79, 90=6655, 99=15199, 99.9=160383, 99.99=172671] [UPDATE: Count=290505, Max=13791, Min=331, Avg=2188.1, 90=3295, 99=5215, 99.9=7759, 99.99=9687] 
2023-06-05 12:43:28:876 670 sec: 37522201 operations; 57584.9 current ops/sec; [READ: Count=288340, Max=250495, Min=408, Avg=4731.69, 90=6799, 99=17551, 99.9=113535, 99.99=207103] [UPDATE: Count=287653, Max=17599, Min=314, Avg=2204.68, 90=3325, 99=5375, 99.9=7915, 99.99=9479] 
2023-06-05 12:43:38:876 680 sec: 38112529 operations; 59032.8 current ops/sec; [READ: Count=294851, Max=38399, Min=438, Avg=4489.63, 90=6943, 99=12223, 99.9=21071, 99.99=25439] [UPDATE: Count=295232, Max=11415, Min=333, Avg=2255.61, 90=3369, 99=5051, 99.9=7243, 99.99=8871] 
2023-06-05 12:43:48:876 690 sec: 38694649 operations; 58212 current ops/sec; [READ: Count=290799, Max=111359, Min=407, Avg=4549.29, 90=6843, 99=13167, 99.9=41631, 99.99=85119] [UPDATE: Count=291315, Max=28943, Min=324, Avg=2265.16, 90=3375, 99=5127, 99.9=7799, 99.99=10559] 
2023-06-05 12:43:58:876 700 sec: 39270233 operations; 57558.4 current ops/sec; [READ: Count=287734, Max=97087, Min=394, Avg=4629.31, 90=6703, 99=13887, 99.9=82111, 99.99=87423] [UPDATE: Count=287877, Max=19327, Min=334, Avg=2263.86, 90=3357, 99=5131, 99.9=8207, 99.99=11311] 
2023-06-05 12:44:08:876 710 sec: 39842846 operations; 57261.3 current ops/sec; [READ: Count=286568, Max=65055, Min=394, Avg=4626.43, 90=6823, 99=15215, 99.9=44351, 99.99=57599] [UPDATE: Count=286141, Max=14215, Min=339, Avg=2300.18, 90=3403, 99=5275, 99.9=8527, 99.99=10415] 
2023-06-05 12:44:18:876 720 sec: 40402871 operations; 56002.5 current ops/sec; [READ: Count=279124, Max=221183, Min=429, Avg=4793.52, 90=6747, 99=19103, 99.9=111039, 99.99=153343] [UPDATE: Count=280919, Max=13591, Min=310, Avg=2293.3, 90=3379, 99=5595, 99.9=8839, 99.99=10727] 
2023-06-05 12:44:28:876 730 sec: 40962377 operations; 55950.6 current ops/sec; [READ: Count=279473, Max=160767, Min=391, Avg=4808.26, 90=6915, 99=17407, 99.9=131583, 99.99=139775] [UPDATE: Count=280097, Max=14079, Min=326, Avg=2327.78, 90=3435, 99=5643, 99.9=8783, 99.99=10911] 
2023-06-05 12:44:38:876 740 sec: 41526353 operations; 56397.6 current ops/sec; [READ: Count=281778, Max=44223, Min=403, Avg=4734.03, 90=7019, 99=17615, 99.9=33791, 99.99=38207] [UPDATE: Count=282114, Max=15567, Min=310, Avg=2347.52, 90=3461, 99=5767, 99.9=8991, 99.99=10471] 
2023-06-05 12:44:48:876 750 sec: 42091957 operations; 56560.4 current ops/sec; [READ: Count=282570, Max=41055, Min=413, Avg=4718.39, 90=7019, 99=17391, 99.9=29887, 99.99=34719] [UPDATE: Count=282448, Max=26287, Min=336, Avg=2344.56, 90=3459, 99=5675, 99.9=9191, 99.99=15143] 
2023-06-05 12:44:58:876 760 sec: 42658237 operations; 56628 current ops/sec; [READ: Count=283512, Max=34335, Min=412, Avg=4692.15, 90=6975, 99=17807, 99.9=25839, 99.99=30447] [UPDATE: Count=283243, Max=26255, Min=327, Avg=2340.89, 90=3439, 99=5759, 99.9=9039, 99.99=13199] 
2023-06-05 12:45:08:876 770 sec: 43224611 operations; 56637.4 current ops/sec; [READ: Count=282769, Max=50111, Min=408, Avg=4686.57, 90=6883, 99=18367, 99.9=28175, 99.99=32479] [UPDATE: Count=283598, Max=13719, Min=320, Avg=2344.17, 90=3435, 99=5603, 99.9=8815, 99.99=10743] 
2023-06-05 12:45:18:876 780 sec: 43744974 operations; 52036.3 current ops/sec; [READ: Count=260826, Max=530431, Min=369, Avg=5390.69, 90=6587, 99=24015, 99.9=272639, 99.99=315647] [UPDATE: Count=259627, Max=13095, Min=323, Avg=2265.65, 90=3365, 99=5771, 99.9=8967, 99.99=10815] 
2023-06-05 12:45:28:876 790 sec: 44283838 operations; 53886.4 current ops/sec; [READ: Count=268838, Max=284927, Min=410, Avg=5205.01, 90=6375, 99=16671, 99.9=272127, 99.99=275967] [UPDATE: Count=269908, Max=11359, Min=334, Avg=2219.69, 90=3293, 99=5067, 99.9=7615, 99.99=9383] 
2023-06-05 12:45:38:876 800 sec: 44862264 operations; 57842.6 current ops/sec; [READ: Count=288521, Max=270847, Min=400, Avg=4609.18, 90=6875, 99=11631, 99.9=27455, 99.99=161023] [UPDATE: Count=289976, Max=12135, Min=335, Avg=2311.7, 90=3403, 99=4951, 99.9=7419, 99.99=9399] 
2023-06-05 12:45:48:876 810 sec: 45440470 operations; 57820.6 current ops/sec; [READ: Count=288917, Max=45759, Min=430, Avg=4570.3, 90=6919, 99=10991, 99.9=18479, 99.99=25391] [UPDATE: Count=289168, Max=20335, Min=329, Avg=2333.89, 90=3427, 99=4931, 99.9=7043, 99.99=9879] 
2023-06-05 12:45:58:876 820 sec: 46019168 operations; 57869.8 current ops/sec; [READ: Count=289507, Max=33183, Min=390, Avg=4540.16, 90=6823, 99=10527, 99.9=16303, 99.99=28975] [UPDATE: Count=289201, Max=17743, Min=349, Avg=2337.41, 90=3411, 99=4803, 99.9=6871, 99.99=9279] 
2023-06-05 12:46:08:876 830 sec: 46595294 operations; 57612.6 current ops/sec; [READ: Count=287872, Max=27839, Min=405, Avg=4537.12, 90=6791, 99=10343, 99.9=15039, 99.99=20239] [UPDATE: Count=288306, Max=9919, Min=347, Avg=2346.04, 90=3419, 99=4807, 99.9=6783, 99.99=8175] 
2023-06-05 12:46:18:876 840 sec: 47169445 operations; 57415.1 current ops/sec; [READ: Count=286642, Max=117375, Min=405, Avg=4533.38, 90=6759, 99=10439, 99.9=21327, 99.99=47423] [UPDATE: Count=287532, Max=12343, Min=324, Avg=2336.29, 90=3411, 99=4859, 99.9=7071, 99.99=8735] 
2023-06-05 12:46:28:876 850 sec: 47737978 operations; 56853.3 current ops/sec; [READ: Count=284687, Max=33023, Min=435, Avg=4570, 90=6763, 99=10215, 99.9=16927, 99.99=24415] [UPDATE: Count=283899, Max=13815, Min=348, Avg=2371.34, 90=3433, 99=4759, 99.9=6871, 99.99=8695] 
2023-06-05 12:46:38:876 860 sec: 48297427 operations; 55944.9 current ops/sec; [READ: Count=279814, Max=91391, Min=399, Avg=4715.26, 90=6827, 99=13231, 99.9=30879, 99.99=54559] [UPDATE: Count=279653, Max=14511, Min=347, Avg=2405.62, 90=3465, 99=5211, 99.9=8295, 99.99=10927] 
2023-06-05 12:46:48:876 870 sec: 48860143 operations; 56271.6 current ops/sec; [READ: Count=281233, Max=39455, Min=403, Avg=4679.52, 90=6843, 99=11775, 99.9=25215, 99.99=29855] [UPDATE: Count=281113, Max=18127, Min=337, Avg=2416.91, 90=3469, 99=5143, 99.9=8511, 99.99=13967] 
2023-06-05 12:46:58:876 880 sec: 49422974 operations; 56283.1 current ops/sec; [READ: Count=281178, Max=36927, Min=423, Avg=4688.31, 90=6891, 99=11967, 99.9=25183, 99.99=29695] [UPDATE: Count=281962, Max=18143, Min=331, Avg=2402.79, 90=3463, 99=5091, 99.9=8147, 99.99=12007] 
2023-06-05 12:47:08:876 890 sec: 49984077 operations; 56110.3 current ops/sec; [READ: Count=280838, Max=39839, Min=433, Avg=4712.83, 90=6959, 99=13639, 99.9=23279, 99.99=27759] [UPDATE: Count=280254, Max=12687, Min=351, Avg=2399.76, 90=3473, 99=5307, 99.9=7995, 99.99=9719] 
2023-06-05 12:47:18:876 900 sec: 50541507 operations; 55743 current ops/sec; [READ: Count=278858, Max=81599, Min=417, Avg=4775.14, 90=6923, 99=16943, 99.9=42943, 99.99=55999] [UPDATE: Count=278695, Max=24719, Min=350, Avg=2389.68, 90=3441, 99=5627, 99.9=8711, 99.99=10791] 
2023-06-05 12:47:28:876 910 sec: 51102416 operations; 56090.9 current ops/sec; [READ: Count=280416, Max=41631, Min=362, Avg=4732.51, 90=6887, 99=16847, 99.9=25183, 99.99=30207] [UPDATE: Count=280426, Max=13823, Min=347, Avg=2391.92, 90=3441, 99=5567, 99.9=8551, 99.99=10247] 
2023-06-05 12:47:38:876 920 sec: 51661813 operations; 55939.7 current ops/sec; [READ: Count=279024, Max=39391, Min=417, Avg=4738.05, 90=6799, 99=15031, 99.9=26799, 99.99=31167] [UPDATE: Count=280370, Max=15807, Min=349, Avg=2414.26, 90=3449, 99=5235, 99.9=8327, 99.99=10695] 
2023-06-05 12:47:48:876 930 sec: 52224951 operations; 56313.8 current ops/sec; [READ: Count=281800, Max=45247, Min=417, Avg=4694.34, 90=6751, 99=13503, 99.9=25775, 99.99=29823] [UPDATE: Count=281234, Max=16207, Min=370, Avg=2400.93, 90=3425, 99=5075, 99.9=7479, 99.99=9783] 
2023-06-05 12:47:58:876 940 sec: 52789101 operations; 56415 current ops/sec; [READ: Count=282058, Max=30607, Min=384, Avg=4679.84, 90=6775, 99=12551, 99.9=23439, 99.99=26671] [UPDATE: Count=281509, Max=28815, Min=353, Avg=2409.08, 90=3433, 99=5023, 99.9=7631, 99.99=17391] 
2023-06-05 12:48:08:876 950 sec: 53353461 operations; 56436 current ops/sec; [READ: Count=281862, Max=28511, Min=426, Avg=4676.21, 90=6895, 99=11735, 99.9=21135, 99.99=25135] [UPDATE: Count=283111, Max=19183, Min=342, Avg=2399.57, 90=3451, 99=4999, 99.9=7223, 99.99=9159] 
2023-06-05 12:48:18:876 960 sec: 53920278 operations; 56681.7 current ops/sec; [READ: Count=283712, Max=28383, Min=440, Avg=4650, 90=6863, 99=11567, 99.9=20911, 99.99=24207] [UPDATE: Count=283039, Max=11887, Min=344, Avg=2389.51, 90=3443, 99=4967, 99.9=7171, 99.99=8447] 
2023-06-05 12:48:28:876 970 sec: 54490765 operations; 57048.7 current ops/sec; [READ: Count=285791, Max=33055, Min=405, Avg=4591.29, 90=6803, 99=10647, 99.9=18479, 99.99=23695] [UPDATE: Count=284668, Max=13527, Min=345, Avg=2371.54, 90=3423, 99=4915, 99.9=7263, 99.99=9367] 
2023-06-05 12:48:38:876 980 sec: 55058050 operations; 56728.5 current ops/sec; [READ: Count=284165, Max=47903, Min=437, Avg=4599.04, 90=6783, 99=11151, 99.9=25967, 99.99=40863] [UPDATE: Count=283179, Max=13591, Min=340, Avg=2362.5, 90=3419, 99=4963, 99.9=7363, 99.99=9415] 
2023-06-05 12:48:48:876 990 sec: 55618596 operations; 56054.6 current ops/sec; [READ: Count=280600, Max=128447, Min=421, Avg=4710.93, 90=6687, 99=12935, 99.9=70527, 99.99=79103] [UPDATE: Count=279994, Max=19743, Min=330, Avg=2342.72, 90=3391, 99=5071, 99.9=7747, 99.99=10335] 
2023-06-05 12:48:58:876 1000 sec: 56183452 operations; 56485.6 current ops/sec; [READ: Count=282847, Max=69247, Min=402, Avg=4680.33, 90=6723, 99=11495, 99.9=58239, 99.99=64639] [UPDATE: Count=281976, Max=18463, Min=332, Avg=2352.6, 90=3399, 99=4907, 99.9=7507, 99.99=10287] 
2023-06-05 12:49:08:876 1010 sec: 56749144 operations; 56569.2 current ops/sec; [READ: Count=282555, Max=53151, Min=418, Avg=4657.1, 90=6851, 99=12423, 99.9=32959, 99.99=41215] [UPDATE: Count=283217, Max=11463, Min=345, Avg=2345.72, 90=3405, 99=4963, 99.9=7287, 99.99=9127] 
2023-06-05 12:49:18:876 1020 sec: 57315929 operations; 56678.5 current ops/sec; [READ: Count=284006, Max=79167, Min=398, Avg=4606.02, 90=6839, 99=11751, 99.9=26639, 99.99=61087] [UPDATE: Count=282726, Max=60767, Min=330, Avg=2344.9, 90=3409, 99=4911, 99.9=7187, 99.99=57631] 
2023-06-05 12:49:28:876 1030 sec: 57881094 operations; 56516.5 current ops/sec; [READ: Count=282587, Max=30015, Min=428, Avg=4530.69, 90=6759, 99=10447, 99.9=16087, 99.99=22383] [UPDATE: Count=282456, Max=12135, Min=328, Avg=2342.3, 90=3413, 99=4811, 99.9=6903, 99.99=8815] 
2023-06-05 12:49:38:876 1040 sec: 58444226 operations; 56313.2 current ops/sec; [READ: Count=281908, Max=32079, Min=398, Avg=4579.43, 90=6775, 99=10807, 99.9=21343, 99.99=27455] [UPDATE: Count=281251, Max=11447, Min=316, Avg=2361.43, 90=3425, 99=4811, 99.9=7167, 99.99=9375] 
2023-06-05 12:49:48:876 1050 sec: 59006210 operations; 56198.4 current ops/sec; [READ: Count=281068, Max=38815, Min=440, Avg=4641.79, 90=6859, 99=13287, 99.9=25487, 99.99=30031] [UPDATE: Count=281017, Max=17391, Min=331, Avg=2356.92, 90=3431, 99=5127, 99.9=8143, 99.99=10671] 
2023-06-05 12:49:58:876 1060 sec: 59570984 operations; 56477.4 current ops/sec; [READ: Count=282269, Max=39167, Min=390, Avg=4591.62, 90=6819, 99=11615, 99.9=24495, 99.99=29183] [UPDATE: Count=282400, Max=19295, Min=317, Avg=2343.86, 90=3407, 99=4923, 99.9=7727, 99.99=10167] 
2023-06-05 12:50:08:876 1070 sec: 60129486 operations; 55850.2 current ops/sec; [READ: Count=279025, Max=179711, Min=391, Avg=4690.4, 90=6855, 99=13791, 99.9=57119, 99.99=99519] [UPDATE: Count=279595, Max=11919, Min=327, Avg=2329.81, 90=3393, 99=5071, 99.9=7527, 99.99=9327] 
2023-06-05 12:50:18:876 1080 sec: 60672668 operations; 54318.2 current ops/sec; [READ: Count=271735, Max=208255, Min=406, Avg=5025.72, 90=7027, 99=21295, 99.9=113599, 99.99=140415] [UPDATE: Count=271689, Max=13279, Min=323, Avg=2328.82, 90=3411, 99=5603, 99.9=8367, 99.99=10399] 
2023-06-05 12:50:28:876 1090 sec: 61244874 operations; 57220.6 current ops/sec; [READ: Count=286116, Max=36255, Min=407, Avg=4635.45, 90=6907, 99=12671, 99.9=26143, 99.99=30959] [UPDATE: Count=285796, Max=12079, Min=331, Avg=2338.9, 90=3395, 99=5007, 99.9=7975, 99.99=10151] 
2023-06-05 12:50:38:876 1100 sec: 61810953 operations; 56607.9 current ops/sec; [READ: Count=282942, Max=57695, Min=397, Avg=4672.03, 90=6919, 99=13159, 99.9=26383, 99.99=30847] [UPDATE: Count=283243, Max=19103, Min=322, Avg=2363.08, 90=3419, 99=5091, 99.9=8123, 99.99=10215] 
2023-06-05 12:50:48:876 1110 sec: 62378233 operations; 56728 current ops/sec; [READ: Count=283813, Max=37887, Min=418, Avg=4636.51, 90=6895, 99=12407, 99.9=24751, 99.99=28959] [UPDATE: Count=283491, Max=17295, Min=336, Avg=2348.3, 90=3409, 99=5083, 99.9=7471, 99.99=9975] 
2023-06-05 12:50:58:876 1120 sec: 62943162 operations; 56492.9 current ops/sec; [READ: Count=283128, Max=117119, Min=385, Avg=4645.31, 90=6799, 99=11919, 99.9=62111, 99.99=75903] [UPDATE: Count=281711, Max=18815, Min=330, Avg=2316.68, 90=3367, 99=4755, 99.9=7995, 99.99=10599] 
2023-06-05 12:51:08:876 1130 sec: 63505303 operations; 56214.1 current ops/sec; [READ: Count=281119, Max=118847, Min=429, Avg=4698.04, 90=6771, 99=12271, 99.9=64991, 99.99=75391] [UPDATE: Count=280976, Max=13191, Min=340, Avg=2327.5, 90=3379, 99=4791, 99.9=8123, 99.99=10679] 
2023-06-05 12:51:18:876 1140 sec: 64062878 operations; 55757.5 current ops/sec; [READ: Count=279655, Max=207231, Min=407, Avg=4765.86, 90=6875, 99=16719, 99.9=69951, 99.99=118143] [UPDATE: Count=278042, Max=12415, Min=351, Avg=2330.41, 90=3389, 99=5667, 99.9=8999, 99.99=10807] 
2023-06-05 12:51:28:876 1150 sec: 64630959 operations; 56808.1 current ops/sec; [READ: Count=283042, Max=115071, Min=414, Avg=4673.89, 90=6867, 99=16927, 99.9=30495, 99.99=85439] [UPDATE: Count=284979, Max=13079, Min=326, Avg=2312.49, 90=3375, 99=5579, 99.9=8959, 99.99=10775] 
2023-06-05 12:51:38:876 1160 sec: 65196916 operations; 56595.7 current ops/sec; [READ: Count=283017, Max=35615, Min=460, Avg=4625.84, 90=6899, 99=15903, 99.9=26255, 99.99=31135] [UPDATE: Count=283026, Max=14479, Min=332, Avg=2316.64, 90=3385, 99=5595, 99.9=8999, 99.99=10935] 
2023-06-05 12:51:48:876 1170 sec: 65762215 operations; 56529.9 current ops/sec; [READ: Count=282639, Max=33727, Min=427, Avg=4494.22, 90=6735, 99=13359, 99.9=24047, 99.99=28239] [UPDATE: Count=282584, Max=18783, Min=335, Avg=2276.11, 90=3355, 99=5147, 99.9=7851, 99.99=11031] 
2023-06-05 12:51:58:876 1180 sec: 66324539 operations; 56232.4 current ops/sec; [READ: Count=281098, Max=33727, Min=401, Avg=4456.12, 90=6691, 99=14119, 99.9=23311, 99.99=27071] [UPDATE: Count=281169, Max=18671, Min=330, Avg=2258.88, 90=3329, 99=5243, 99.9=8319, 99.99=10919] 
2023-06-05 12:52:08:876 1190 sec: 66884034 operations; 55949.5 current ops/sec; [READ: Count=280033, Max=134143, Min=403, Avg=4560.76, 90=6735, 99=15759, 99.9=34527, 99.99=87167] [UPDATE: Count=279577, Max=12047, Min=339, Avg=2268.73, 90=3345, 99=5291, 99.9=8167, 99.99=9943] 
2023-06-05 12:52:18:876 1200 sec: 67449670 operations; 56563.6 current ops/sec; [READ: Count=282528, Max=94143, Min=412, Avg=4569.27, 90=6687, 99=13759, 99.9=81599, 99.99=86015] [UPDATE: Count=283003, Max=20047, Min=302, Avg=2255.22, 90=3327, 99=5067, 99.9=7715, 99.99=9847] 
2023-06-05 12:52:28:876 1210 sec: 68012406 operations; 56273.6 current ops/sec; [READ: Count=281095, Max=31679, Min=421, Avg=4314.53, 90=6563, 99=10231, 99.9=16039, 99.99=23727] [UPDATE: Count=281537, Max=15663, Min=332, Avg=2229.54, 90=3287, 99=4699, 99.9=6743, 99.99=8255] 
2023-06-05 12:52:38:876 1220 sec: 68574905 operations; 56249.9 current ops/sec; [READ: Count=281912, Max=37887, Min=392, Avg=4307.35, 90=6575, 99=10647, 99.9=16735, 99.99=24831] [UPDATE: Count=280674, Max=11103, Min=344, Avg=2214.33, 90=3275, 99=4743, 99.9=6839, 99.99=8671] 
2023-06-05 12:52:48:876 1230 sec: 69135276 operations; 56037.1 current ops/sec; [READ: Count=280538, Max=212991, Min=424, Avg=4411.75, 90=6695, 99=11519, 99.9=24991, 99.99=131327] [UPDATE: Count=279779, Max=35359, Min=351, Avg=2231.33, 90=3297, 99=4851, 99.9=7131, 99.99=9663] 
2023-06-05 12:52:58:876 1240 sec: 69699387 operations; 56411.1 current ops/sec; [READ: Count=281372, Max=227327, Min=422, Avg=4510.35, 90=6707, 99=11519, 99.9=43903, 99.99=161663] [UPDATE: Count=282917, Max=17023, Min=346, Avg=2243.52, 90=3321, 99=4899, 99.9=7159, 99.99=9591] 
2023-06-05 12:53:08:876 1250 sec: 70262404 operations; 56301.7 current ops/sec; [READ: Count=281618, Max=43455, Min=438, Avg=4394.57, 90=6719, 99=10855, 99.9=20031, 99.99=32927] [UPDATE: Count=281283, Max=32287, Min=337, Avg=2240.03, 90=3317, 99=4839, 99.9=6891, 99.99=8671] 
2023-06-05 12:53:18:876 1260 sec: 70824331 operations; 56192.7 current ops/sec; [READ: Count=281099, Max=50239, Min=434, Avg=4416.09, 90=6731, 99=11871, 99.9=21279, 99.99=39583] [UPDATE: Count=280771, Max=11551, Min=340, Avg=2243.91, 90=3323, 99=4951, 99.9=7451, 99.99=9551] 
2023-06-05 12:53:28:876 1270 sec: 71387060 operations; 56272.9 current ops/sec; [READ: Count=280733, Max=52799, Min=450, Avg=4430.51, 90=6739, 99=11343, 99.9=21903, 99.99=41471] [UPDATE: Count=282031, Max=16799, Min=326, Avg=2265.18, 90=3357, 99=4999, 99.9=7883, 99.99=10063] 
2023-06-05 12:53:38:876 1280 sec: 71941712 operations; 55465.2 current ops/sec; [READ: Count=277392, Max=292095, Min=424, Avg=4669.29, 90=6711, 99=14071, 99.9=152831, 99.99=167807] [UPDATE: Count=277391, Max=13599, Min=345, Avg=2243.31, 90=3331, 99=5243, 99.9=8479, 99.99=10543] 
2023-06-05 12:53:48:876 1290 sec: 72504919 operations; 56320.7 current ops/sec; [READ: Count=282061, Max=170495, Min=410, Avg=4714.85, 90=6755, 99=12575, 99.9=134143, 99.99=143359] [UPDATE: Count=281248, Max=21711, Min=335, Avg=2255.74, 90=3347, 99=5051, 99.9=8003, 99.99=10991] 
2023-06-05 12:53:58:876 1300 sec: 73072492 operations; 56757.3 current ops/sec; [READ: Count=283544, Max=111807, Min=405, Avg=4564.31, 90=6747, 99=13751, 99.9=54271, 99.99=84927] [UPDATE: Count=283971, Max=28287, Min=349, Avg=2254.77, 90=3353, 99=5179, 99.9=8255, 99.99=10967] 
2023-06-05 12:54:08:876 1310 sec: 73635713 operations; 56322.1 current ops/sec; [READ: Count=281327, Max=101567, Min=379, Avg=4581.74, 90=6715, 99=16511, 99.9=61343, 99.99=78143] [UPDATE: Count=281829, Max=14487, Min=328, Avg=2226.71, 90=3317, 99=5271, 99.9=8983, 99.99=10999] 
2023-06-05 12:54:18:876 1320 sec: 74188142 operations; 55242.9 current ops/sec; [READ: Count=276857, Max=206207, Min=423, Avg=4857.88, 90=6619, 99=21567, 99.9=160383, 99.99=170751] [UPDATE: Count=275567, Max=15391, Min=347, Avg=2196.49, 90=3273, 99=5695, 99.9=9471, 99.99=11311] 
2023-06-05 12:54:28:876 1330 sec: 74746777 operations; 55863.5 current ops/sec; [READ: Count=279470, Max=135807, Min=420, Avg=4882.84, 90=7023, 99=25295, 99.9=73663, 99.99=117055] [UPDATE: Count=279252, Max=17423, Min=340, Avg=2239.09, 90=3353, 99=6199, 99.9=9455, 99.99=11271] 
2023-06-05 12:54:38:876 1340 sec: 75309863 operations; 56308.6 current ops/sec; [READ: Count=281587, Max=96063, Min=420, Avg=4813.68, 90=7199, 99=23183, 99.9=51231, 99.99=66879] [UPDATE: Count=281433, Max=13999, Min=344, Avg=2247.86, 90=3365, 99=6035, 99.9=9119, 99.99=11135] 
2023-06-05 12:54:48:876 1350 sec: 75875629 operations; 56576.6 current ops/sec; [READ: Count=283047, Max=176255, Min=401, Avg=4774.79, 90=7043, 99=19775, 99.9=95423, 99.99=116095] [UPDATE: Count=282758, Max=19647, Min=345, Avg=2242.62, 90=3357, 99=5531, 99.9=8615, 99.99=11463] 
2023-06-05 12:54:58:876 1360 sec: 76444915 operations; 56928.6 current ops/sec; [READ: Count=284284, Max=129727, Min=414, Avg=4647.5, 90=7015, 99=14919, 99.9=42303, 99.99=100991] [UPDATE: Count=284667, Max=19279, Min=356, Avg=2257.65, 90=3365, 99=5279, 99.9=8095, 99.99=12015] 
2023-06-05 12:55:08:876 1370 sec: 77009115 operations; 56420 current ops/sec; [READ: Count=282417, Max=42623, Min=436, Avg=4606.69, 90=7051, 99=14303, 99.9=26575, 99.99=31231] [UPDATE: Count=282011, Max=18735, Min=335, Avg=2279.8, 90=3381, 99=5311, 99.9=8207, 99.99=11127] 
2023-06-05 12:55:18:876 1380 sec: 77555011 operations; 54589.6 current ops/sec; [READ: Count=272765, Max=133119, Min=367, Avg=5027.34, 90=7219, 99=26111, 99.9=82431, 99.99=89279] [UPDATE: Count=273379, Max=15391, Min=304, Avg=2286.33, 90=3423, 99=6107, 99.9=8879, 99.99=10631] 
2023-06-05 12:55:28:876 1390 sec: 78105431 operations; 55042 current ops/sec; [READ: Count=275782, Max=541695, Min=409, Avg=4959.03, 90=6879, 99=19999, 99.9=160511, 99.99=399359] [UPDATE: Count=274444, Max=12999, Min=320, Avg=2234.92, 90=3365, 99=5611, 99.9=9055, 99.99=11071] 
2023-06-05 12:55:38:876 1400 sec: 78636127 operations; 53069.6 current ops/sec; [READ: Count=265530, Max=487679, Min=449, Avg=5373.63, 90=6271, 99=15599, 99.9=370943, 99.99=411135] [UPDATE: Count=265167, Max=12639, Min=317, Avg=2105.87, 90=3197, 99=5083, 99.9=8247, 99.99=10119] 
2023-06-05 12:55:48:876 1410 sec: 79170692 operations; 53456.5 current ops/sec; [READ: Count=267457, Max=413183, Min=389, Avg=5359.52, 90=6395, 99=18335, 99.9=352255, 99.99=396799] [UPDATE: Count=267228, Max=17663, Min=303, Avg=2106.8, 90=3213, 99=5235, 99.9=8479, 99.99=10879] 
2023-06-05 12:55:58:876 1420 sec: 79723020 operations; 55232.8 current ops/sec; [READ: Count=276562, Max=463615, Min=389, Avg=5059.85, 90=6843, 99=17167, 99.9=373503, 99.99=450815] [UPDATE: Count=275853, Max=18175, Min=336, Avg=2180.18, 90=3311, 99=5303, 99.9=8271, 99.99=10415] 
2023-06-05 12:56:08:876 1430 sec: 80291169 operations; 56814.9 current ops/sec; [READ: Count=284305, Max=78399, Min=434, Avg=4765.06, 90=7335, 99=19743, 99.9=42527, 99.99=54303] [UPDATE: Count=283811, Max=12311, Min=347, Avg=2266.3, 90=3425, 99=5695, 99.9=8511, 99.99=10303] 
2023-06-05 12:56:18:876 1440 sec: 80858062 operations; 56689.3 current ops/sec; [READ: Count=283653, Max=184831, Min=403, Avg=4792.9, 90=7199, 99=20415, 99.9=60351, 99.99=103935] [UPDATE: Count=283237, Max=14079, Min=345, Avg=2250.58, 90=3405, 99=5687, 99.9=8479, 99.99=10223] 
2023-06-05 12:56:28:876 1450 sec: 81424514 operations; 56645.2 current ops/sec; [READ: Count=283153, Max=185983, Min=421, Avg=4819.23, 90=7131, 99=19775, 99.9=94719, 99.99=139391] [UPDATE: Count=283268, Max=11511, Min=342, Avg=2233.45, 90=3377, 99=5491, 99.9=8039, 99.99=9863] 
2023-06-05 12:56:38:876 1460 sec: 81991904 operations; 56739 current ops/sec; [READ: Count=283737, Max=96191, Min=430, Avg=4783.14, 90=7379, 99=18127, 99.9=46335, 99.99=81983] [UPDATE: Count=283620, Max=31407, Min=325, Avg=2255.36, 90=3411, 99=5511, 99.9=8623, 99.99=28527] 
2023-06-05 12:56:48:876 1470 sec: 82557955 operations; 56605.1 current ops/sec; [READ: Count=283915, Max=88575, Min=419, Avg=4810.1, 90=7427, 99=19823, 99.9=46239, 99.99=64031] [UPDATE: Count=282149, Max=25983, Min=334, Avg=2230.96, 90=3387, 99=5423, 99.9=8071, 99.99=10815] 
2023-06-05 12:56:58:876 1480 sec: 83120525 operations; 56257 current ops/sec; [READ: Count=281620, Max=290047, Min=408, Avg=4869.09, 90=6967, 99=20799, 99.9=133887, 99.99=184831] [UPDATE: Count=280850, Max=18751, Min=311, Avg=2199.9, 90=3343, 99=5295, 99.9=8159, 99.99=10495] 
2023-06-05 12:57:08:879 1490 sec: 83679452 operations; 55881.52 current ops/sec; [READ: Count=279348, Max=214655, Min=389, Avg=4933.35, 90=6931, 99=16279, 99.9=161919, 99.99=169215] [UPDATE: Count=279628, Max=11191, Min=347, Avg=2207.11, 90=3353, 99=5175, 99.9=7487, 99.99=9431] 
2023-06-05 12:57:18:876 1500 sec: 84245474 operations; 56613.52 current ops/sec; [READ: Count=283215, Max=170367, Min=396, Avg=4811.79, 90=7103, 99=15271, 99.9=113023, 99.99=137855] [UPDATE: Count=282714, Max=12223, Min=338, Avg=2242.63, 90=3389, 99=5183, 99.9=7415, 99.99=9455] 
2023-06-05 12:57:28:876 1510 sec: 84817052 operations; 57157.8 current ops/sec; [READ: Count=285447, Max=111807, Min=400, Avg=4704.11, 90=7163, 99=14415, 99.9=49919, 99.99=78335] [UPDATE: Count=286119, Max=17775, Min=338, Avg=2277.32, 90=3413, 99=5191, 99.9=7291, 99.99=9143] 
2023-06-05 12:57:38:876 1520 sec: 85375066 operations; 55801.4 current ops/sec; [READ: Count=279187, Max=325631, Min=427, Avg=4875.21, 90=7079, 99=20847, 99.9=90879, 99.99=234495] [UPDATE: Count=278967, Max=13791, Min=317, Avg=2276.47, 90=3403, 99=5607, 99.9=8711, 99.99=10535] 
2023-06-05 12:57:48:876 1530 sec: 85937410 operations; 56234.4 current ops/sec; [READ: Count=281266, Max=132863, Min=397, Avg=4845.28, 90=7131, 99=21055, 99.9=80895, 99.99=90175] [UPDATE: Count=280969, Max=33023, Min=339, Avg=2254.72, 90=3385, 99=5759, 99.9=8871, 99.99=11279] 
2023-06-05 12:57:58:876 1540 sec: 86499356 operations; 56194.6 current ops/sec; [READ: Count=280861, Max=101695, Min=421, Avg=4830.1, 90=7291, 99=20559, 99.9=59263, 99.99=72191] [UPDATE: Count=280480, Max=29519, Min=333, Avg=2285.53, 90=3417, 99=5895, 99.9=9175, 99.99=15935] 
2023-06-05 12:58:08:876 1550 sec: 87057787 operations; 55843.1 current ops/sec; [READ: Count=279190, Max=85375, Min=390, Avg=4858.46, 90=7367, 99=22799, 99.9=47135, 99.99=57791] [UPDATE: Count=279840, Max=29199, Min=327, Avg=2291.32, 90=3439, 99=5843, 99.9=8703, 99.99=11015] 
2023-06-05 12:58:18:876 1560 sec: 87615044 operations; 55725.7 current ops/sec; [READ: Count=278463, Max=139903, Min=426, Avg=4910.04, 90=7047, 99=25087, 99.9=108543, 99.99=119167] [UPDATE: Count=278839, Max=12623, Min=346, Avg=2261.85, 90=3393, 99=5823, 99.9=9031, 99.99=10823] 
2023-06-05 12:58:28:876 1570 sec: 88168825 operations; 55378.1 current ops/sec; [READ: Count=276938, Max=218623, Min=432, Avg=4924.81, 90=7263, 99=25071, 99.9=39327, 99.99=137215] [UPDATE: Count=276385, Max=21535, Min=338, Avg=2293.53, 90=3439, 99=6379, 99.9=9783, 99.99=13119] 
2023-06-05 12:58:38:876 1580 sec: 88711832 operations; 54300.7 current ops/sec; [READ: Count=271353, Max=146687, Min=401, Avg=5111.28, 90=7083, 99=26367, 99.9=117055, 99.99=138751] [UPDATE: Count=272154, Max=17151, Min=337, Avg=2251.46, 90=3395, 99=6199, 99.9=9247, 99.99=11207] 
2023-06-05 12:58:48:876 1590 sec: 89257217 operations; 54538.5 current ops/sec; [READ: Count=272647, Max=107839, Min=411, Avg=5036.96, 90=7427, 99=26015, 99.9=57599, 99.99=66815] [UPDATE: Count=272660, Max=31311, Min=324, Avg=2294.15, 90=3451, 99=6603, 99.9=9295, 99.99=11471] 
2023-06-05 12:58:58:876 1600 sec: 89802160 operations; 54494.3 current ops/sec; [READ: Count=272310, Max=214271, Min=387, Avg=5036.2, 90=7295, 99=25055, 99.9=68671, 99.99=107711] [UPDATE: Count=272576, Max=18463, Min=332, Avg=2300.93, 90=3449, 99=6407, 99.9=9151, 99.99=11743] 
2023-06-05 12:59:08:876 1610 sec: 90324980 operations; 52282 current ops/sec; [READ: Count=260908, Max=580095, Min=387, Avg=5433.64, 90=6535, 99=26015, 99.9=232191, 99.99=326655] [UPDATE: Count=262021, Max=12807, Min=337, Avg=2202.23, 90=3297, 99=6031, 99.9=9055, 99.99=10847] 
2023-06-05 12:59:18:876 1620 sec: 90846798 operations; 52181.8 current ops/sec; [READ: Count=260529, Max=495103, Min=389, Avg=5492.83, 90=6299, 99=18175, 99.9=325119, 99.99=360447] [UPDATE: Count=261156, Max=11239, Min=327, Avg=2178.58, 90=3251, 99=5111, 99.9=7855, 99.99=9903] 
2023-06-05 12:59:28:876 1630 sec: 91404492 operations; 55769.4 current ops/sec; [READ: Count=278779, Max=343295, Min=420, Avg=4902.72, 90=6895, 99=15159, 99.9=135935, 99.99=324095] [UPDATE: Count=279012, Max=11975, Min=339, Avg=2282.5, 90=3381, 99=5163, 99.9=7967, 99.99=10031] 
2023-06-05 12:59:38:876 1640 sec: 91976253 operations; 57176.1 current ops/sec; [READ: Count=285875, Max=81855, Min=425, Avg=4677.02, 90=7087, 99=13471, 99.9=27119, 99.99=68735] [UPDATE: Count=285418, Max=20975, Min=327, Avg=2320.25, 90=3411, 99=5247, 99.9=8375, 99.99=13327] 
2023-06-05 12:59:48:876 1650 sec: 92544513 operations; 56826 current ops/sec; [READ: Count=284667, Max=105663, Min=445, Avg=4709.11, 90=7079, 99=13983, 99.9=38143, 99.99=90431] [UPDATE: Count=283987, Max=21519, Min=343, Avg=2318.38, 90=3421, 99=5227, 99.9=8495, 99.99=13375] 
2023-06-05 12:59:58:879 1660 sec: 93106675 operations; 56204.96 current ops/sec; [READ: Count=280730, Max=115455, Min=403, Avg=4802.1, 90=6943, 99=17039, 99.9=80575, 99.99=87935] [UPDATE: Count=281471, Max=61471, Min=333, Avg=2313.64, 90=3389, 99=5407, 99.9=8831, 99.99=54687] 
2023-06-05 13:00:08:876 1670 sec: 93675719 operations; 56915.78 current ops/sec; [READ: Count=284998, Max=48767, Min=443, Avg=4678.65, 90=7087, 99=13175, 99.9=23247, 99.99=37663] [UPDATE: Count=283922, Max=11287, Min=315, Avg=2343.57, 90=3445, 99=5139, 99.9=7503, 99.99=9119] 
2023-06-05 13:00:18:876 1680 sec: 94226970 operations; 55125.1 current ops/sec; [READ: Count=275856, Max=323839, Min=394, Avg=4935.81, 90=6907, 99=17039, 99.9=101247, 99.99=268543] [UPDATE: Count=275579, Max=15455, Min=316, Avg=2315.16, 90=3385, 99=5331, 99.9=8303, 99.99=12271] 
2023-06-05 13:00:28:876 1690 sec: 94783055 operations; 55608.5 current ops/sec; [READ: Count=278658, Max=115071, Min=449, Avg=4813.25, 90=7243, 99=14887, 99.9=28367, 99.99=92479] [UPDATE: Count=277018, Max=15783, Min=312, Avg=2372.12, 90=3463, 99=5487, 99.9=8095, 99.99=10679] 
2023-06-05 13:00:38:876 1700 sec: 95331990 operations; 54893.5 current ops/sec; [READ: Count=273910, Max=261375, Min=409, Avg=4954.78, 90=7035, 99=16975, 99.9=122111, 99.99=183935] [UPDATE: Count=275386, Max=14967, Min=344, Avg=2332.99, 90=3417, 99=5479, 99.9=8847, 99.99=11439] 
2023-06-05 13:00:48:879 1710 sec: 95880453 operations; 54829.85 current ops/sec; [READ: Count=273819, Max=118591, Min=442, Avg=4946.31, 90=7227, 99=21535, 99.9=52575, 99.99=100415] [UPDATE: Count=274660, Max=34079, Min=356, Avg=2349.6, 90=3465, 99=5951, 99.9=9087, 99.99=12383] 
2023-06-05 13:00:58:876 1720 sec: 96418097 operations; 53780.53 current ops/sec; [READ: Count=268806, Max=230399, Min=430, Avg=5145.71, 90=6911, 99=28399, 99.9=135039, 99.99=193151] [UPDATE: Count=268872, Max=17775, Min=358, Avg=2288.27, 90=3373, 99=5803, 99.9=9215, 99.99=11999] 
2023-06-05 13:01:08:876 1730 sec: 96962914 operations; 54481.7 current ops/sec; [READ: Count=272778, Max=157823, Min=433, Avg=5006.63, 90=7003, 99=20799, 99.9=98815, 99.99=129407] [UPDATE: Count=272102, Max=12431, Min=347, Avg=2328.53, 90=3407, 99=5691, 99.9=8575, 99.99=10567] 
2023-06-05 13:01:18:876 1740 sec: 97506984 operations; 54407 current ops/sec; [READ: Count=272317, Max=158975, Min=437, Avg=5025.86, 90=7015, 99=21359, 99.9=84735, 99.99=133247] [UPDATE: Count=271682, Max=22111, Min=338, Avg=2319.71, 90=3417, 99=5675, 99.9=8471, 99.99=10455] 
2023-06-05 13:01:28:876 1750 sec: 98053245 operations; 54626.1 current ops/sec; [READ: Count=272664, Max=166271, Min=419, Avg=4996.03, 90=7071, 99=19567, 99.9=86399, 99.99=141439] [UPDATE: Count=273557, Max=17679, Min=366, Avg=2330.29, 90=3437, 99=5655, 99.9=8751, 99.99=12175] 
2023-06-05 13:01:38:876 1760 sec: 98620236 operations; 56699.1 current ops/sec; [READ: Count=283893, Max=51135, Min=424, Avg=4685.81, 90=7103, 99=12199, 99.9=29839, 99.99=39039] [UPDATE: Count=282990, Max=14279, Min=354, Avg=2363.21, 90=3465, 99=5155, 99.9=7643, 99.99=10639] 
2023-06-05 13:01:48:876 1770 sec: 99184310 operations; 56407.4 current ops/sec; [READ: Count=281747, Max=47231, Min=428, Avg=4734.23, 90=7055, 99=14991, 99.9=32207, 99.99=37375] [UPDATE: Count=282445, Max=25407, Min=349, Avg=2355.23, 90=3445, 99=5371, 99.9=8463, 99.99=11111] 
2023-06-05 13:01:58:876 1780 sec: 99744163 operations; 55985.3 current ops/sec; [READ: Count=279947, Max=39487, Min=436, Avg=4768.62, 90=7071, 99=16431, 99.9=28815, 99.99=34015] [UPDATE: Count=279785, Max=17679, Min=342, Avg=2373.59, 90=3455, 99=5515, 99.9=8807, 99.99=10983] 
2023-06-05 13:02:08:876 1790 sec: 100298427 operations; 55426.4 current ops/sec; [READ: Count=276487, Max=113599, Min=436, Avg=4845.84, 90=7083, 99=18143, 99.9=38783, 99.99=98239] [UPDATE: Count=277220, Max=26239, Min=335, Avg=2379.47, 90=3451, 99=5759, 99.9=9231, 99.99=14767] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-06-05 13:02:18:876 1800 sec: 100835101 operations; 53667.4 current ops/sec; [READ: Count=267999, Max=308223, Min=441, Avg=5147.39, 90=6707, 99=18223, 99.9=163071, 99.99=205183] [UPDATE: Count=268923, Max=25359, Min=346, Avg=2297.05, 90=3355, 99=5207, 99.9=8199, 99.99=11351] 
Still waiting for thread Thread-146 to complete. Workload status: true
2023-06-05 13:02:21:262 1802 sec: 100836401 operations; 544.84 current ops/sec; [READ: Count=658, Max=165503, Min=1136, Avg=6963.04, 90=7027, 99=157823, 99.9=164863, 99.99=165503] [CLEANUP: Count=200, Max=2224127, Min=0, Avg=11116.71, 90=2, 99=10, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802385
[OVERALL], Throughput(ops/sec), 55946.094202958855
[TOTAL_GCS_PS_Scavenge], Count, 6541
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 16918
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.9386451840200624
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 73
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.004050189055057604
[TOTAL_GCs], Count, 6543
[TOTAL_GC_TIME], Time(ms), 16991
[TOTAL_GC_TIME_%], Time(%), 0.94269537307512
[READ], Operations, 50421553
[READ], AverageLatency(us), 4501.803536832751
[READ], MinLatency(us), 341
[READ], MaxLatency(us), 580095
[READ], 95thPercentileLatency(us), 7911
[READ], 99thPercentileLatency(us), 16063
[READ], Return=OK, 50421553
[CLEANUP], Operations, 200
[CLEANUP], AverageLatency(us), 11116.71
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 10
[UPDATE], Operations, 50414848
[UPDATE], AverageLatency(us), 2181.8278498826376
[UPDATE], MinLatency(us), 267
[UPDATE], MaxLatency(us), 137599
[UPDATE], 95thPercentileLatency(us), 3695
[UPDATE], 99thPercentileLatency(us), 5295
[UPDATE], Return=OK, 50414848
