bin/ycsb load scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=125000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertcount=125000000
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=125000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertcount=125000000 -load
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=125000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertcount=125000000 -load
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-8] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-04-30 10:00:48:531 0 sec: 0 operations; est completion in 0 second 
[Thread-8] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
[Thread-8] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-8] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.224.14.50:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.25.70.101:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.236.216.15:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.155.229.124:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.69.220:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.214.116.240:9042 added
[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 04c1c4a5-1f5b-4be8-8b3b-2bc1e2431452

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.155.229.124; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.224.14.50; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.214.116.240; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.69.220; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.236.216.15; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.25.70.101; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: ONE

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
2023-04-30 10:00:58:509 10 sec: 1253701 operations; 125357.56 current ops/sec; est completion in 16 minutes [INSERT: Count=1253893, Max=88063, Min=198, Avg=1100.69, 90=1473, 99=5975, 99.9=20911, 99.99=47647] 
2023-04-30 10:01:08:509 20 sec: 2859531 operations; 160599.06 current ops/sec; est completion in 14 minutes [INSERT: Count=1605730, Max=27039, Min=188, Avg=931.75, 90=1305, 99=1872, 99.9=7615, 99.99=20783] 
2023-04-30 10:01:18:509 30 sec: 4418056 operations; 155852.5 current ops/sec; est completion in 13 minutes [INSERT: Count=1558503, Max=15879, Min=219, Avg=960.1, 90=1338, 99=1878, 99.9=7239, 99.99=13423] 
2023-04-30 10:01:28:509 40 sec: 5863042 operations; 144498.6 current ops/sec; est completion in 13 minutes [INSERT: Count=1444951, Max=28239, Min=209, Avg=1035.73, 90=1505, 99=2139, 99.9=9815, 99.99=17567] 
2023-04-30 10:01:38:509 50 sec: 6965597 operations; 110255.5 current ops/sec; est completion in 14 minutes [INSERT: Count=1102552, Max=28751, Min=209, Avg=1358.29, 90=1856, 99=2401, 99.9=7875, 99.99=19215] 
2023-04-30 10:01:48:509 60 sec: 8364359 operations; 139876.2 current ops/sec; est completion in 13 minutes [INSERT: Count=1398787, Max=15679, Min=221, Avg=1070.13, 90=1560, 99=2227, 99.9=7703, 99.99=14031] 
2023-04-30 10:01:58:509 70 sec: 9625519 operations; 126116 current ops/sec; est completion in 14 minutes [INSERT: Count=1261147, Max=29583, Min=205, Avg=1187.15, 90=1773, 99=2267, 99.9=8103, 99.99=19183] 
2023-04-30 10:02:08:509 80 sec: 10655135 operations; 102961.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1029617, Max=32687, Min=227, Avg=1454.71, 90=1882, 99=2497, 99.9=8071, 99.99=19967] 
2023-04-30 10:02:18:509 90 sec: 11729208 operations; 107407.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1074086, Max=12111, Min=226, Avg=1394.39, 90=1826, 99=2355, 99.9=7387, 99.99=9247] 
2023-04-30 10:02:28:509 100 sec: 12811539 operations; 108233.1 current ops/sec; est completion in 14 minutes [INSERT: Count=1082313, Max=32031, Min=210, Avg=1383.71, 90=1855, 99=2473, 99.9=7663, 99.99=21727] 
2023-04-30 10:02:38:509 110 sec: 13962825 operations; 115128.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1151302, Max=43679, Min=211, Avg=1300.66, 90=1839, 99=2467, 99.9=7463, 99.99=27839] 
2023-04-30 10:02:48:509 120 sec: 15368688 operations; 140586.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1405873, Max=93759, Min=201, Avg=1064.65, 90=1438, 99=2173, 99.9=9031, 99.99=19407] 
2023-04-30 10:02:58:509 130 sec: 16390869 operations; 102218.1 current ops/sec; est completion in 14 minutes [INSERT: Count=1022118, Max=477951, Min=191, Avg=1452.93, 90=1871, 99=5595, 99.9=28159, 99.99=323327] 
2023-04-30 10:03:08:509 140 sec: 17174050 operations; 78318.1 current ops/sec; est completion in 14 minutes [INSERT: Count=783223, Max=481023, Min=181, Avg=1929.16, 90=1931, 99=10783, 99.9=80447, 99.99=379391] 
2023-04-30 10:03:18:509 150 sec: 18141576 operations; 96752.6 current ops/sec; est completion in 14 minutes [INSERT: Count=967515, Max=368127, Min=220, Avg=1547.1, 90=1846, 99=3689, 99.9=28495, 99.99=255103] 
2023-04-30 10:03:28:509 160 sec: 19154810 operations; 101323.4 current ops/sec; est completion in 14 minutes [INSERT: Count=1013255, Max=379135, Min=232, Avg=1479.26, 90=1843, 99=2323, 99.9=9887, 99.99=253951] 
2023-04-30 10:03:38:509 170 sec: 20194406 operations; 103959.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1039591, Max=114431, Min=206, Avg=1440.69, 90=1848, 99=2387, 99.9=11487, 99.99=58207] 
2023-04-30 10:03:48:509 180 sec: 21299646 operations; 110524 current ops/sec; est completion in 14 minutes [INSERT: Count=1105238, Max=12447, Min=340, Avg=1354.9, 90=1835, 99=2309, 99.9=7079, 99.99=10799] 
2023-04-30 10:03:58:509 190 sec: 22380206 operations; 108056 current ops/sec; est completion in 14 minutes [INSERT: Count=1080549, Max=32015, Min=227, Avg=1385.97, 90=1852, 99=2483, 99.9=7663, 99.99=21599] 
2023-04-30 10:04:08:509 200 sec: 23462859 operations; 108265.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1082645, Max=37983, Min=208, Avg=1383.29, 90=1861, 99=2435, 99.9=7943, 99.99=21215] 
2023-04-30 10:04:18:509 210 sec: 24474568 operations; 101170.9 current ops/sec; est completion in 14 minutes [INSERT: Count=1011723, Max=112575, Min=214, Avg=1480.47, 90=1903, 99=2869, 99.9=8239, 99.99=27887] 
2023-04-30 10:04:28:509 220 sec: 25499270 operations; 102470.2 current ops/sec; est completion in 14 minutes [INSERT: Count=1024688, Max=32575, Min=218, Avg=1461.64, 90=1887, 99=2661, 99.9=7879, 99.99=20911] 
2023-04-30 10:04:38:509 230 sec: 26478525 operations; 97925.5 current ops/sec; est completion in 14 minutes [INSERT: Count=979267, Max=38687, Min=208, Avg=1529.6, 90=1969, 99=3331, 99.9=7695, 99.99=25263] 
2023-04-30 10:04:48:509 240 sec: 27477284 operations; 99875.9 current ops/sec; est completion in 14 minutes [INSERT: Count=998752, Max=215807, Min=236, Avg=1499.7, 90=1886, 99=2655, 99.9=7279, 99.99=104703] 
2023-04-30 10:04:58:509 250 sec: 28493771 operations; 101648.7 current ops/sec; est completion in 14 minutes [INSERT: Count=1016501, Max=91391, Min=244, Avg=1473.46, 90=1874, 99=2483, 99.9=7643, 99.99=30463] 
2023-04-30 10:05:08:509 260 sec: 29512247 operations; 101847.6 current ops/sec; est completion in 14 minutes [INSERT: Count=1018469, Max=100991, Min=226, Avg=1470.61, 90=1873, 99=2589, 99.9=7503, 99.99=29247] 
2023-04-30 10:05:18:509 270 sec: 30556586 operations; 104433.9 current ops/sec; est completion in 13 minutes [INSERT: Count=1044344, Max=58847, Min=224, Avg=1434.1, 90=1882, 99=2555, 99.9=8311, 99.99=10271] 
2023-04-30 10:05:28:509 280 sec: 31644362 operations; 108777.6 current ops/sec; est completion in 13 minutes [INSERT: Count=1087772, Max=38591, Min=205, Avg=1376.74, 90=1880, 99=2553, 99.9=8599, 99.99=22767] 
2023-04-30 10:05:38:509 290 sec: 32667597 operations; 102323.5 current ops/sec; est completion in 13 minutes [INSERT: Count=1023228, Max=37503, Min=198, Avg=1463.8, 90=2033, 99=3565, 99.9=7303, 99.99=22463] 
2023-04-30 10:05:48:509 300 sec: 33723182 operations; 105558.5 current ops/sec; est completion in 13 minutes [INSERT: Count=1055589, Max=117823, Min=205, Avg=1418.85, 90=1883, 99=2533, 99.9=7567, 99.99=15159] 
2023-04-30 10:05:58:509 310 sec: 34743201 operations; 102001.9 current ops/sec; est completion in 13 minutes [INSERT: Count=1020029, Max=34175, Min=238, Avg=1468.38, 90=1874, 99=2539, 99.9=7303, 99.99=22191] 
2023-04-30 10:06:08:509 320 sec: 35750254 operations; 100705.3 current ops/sec; est completion in 13 minutes [INSERT: Count=1007038, Max=107839, Min=240, Avg=1487.3, 90=1893, 99=2749, 99.9=7591, 99.99=28511] 
2023-04-30 10:06:18:509 330 sec: 36772092 operations; 102183.8 current ops/sec; est completion in 13 minutes [INSERT: Count=1021828, Max=73343, Min=244, Avg=1465.79, 90=1868, 99=2301, 99.9=7315, 99.99=23999] 
2023-04-30 10:06:28:509 340 sec: 37787163 operations; 101507.1 current ops/sec; est completion in 13 minutes [INSERT: Count=1015077, Max=42207, Min=217, Avg=1475.55, 90=1884, 99=2757, 99.9=7759, 99.99=23679] 
2023-04-30 10:06:38:509 350 sec: 38768002 operations; 98083.9 current ops/sec; est completion in 12 minutes [INSERT: Count=980881, Max=116543, Min=213, Avg=1527.15, 90=1950, 99=3337, 99.9=7527, 99.99=36383] 
2023-04-30 10:06:48:509 360 sec: 39757725 operations; 98972.3 current ops/sec; est completion in 12 minutes [INSERT: Count=989672, Max=103103, Min=382, Avg=1513.39, 90=1914, 99=3101, 99.9=7531, 99.99=60063] 
2023-04-30 10:06:58:509 370 sec: 40772246 operations; 101452.1 current ops/sec; est completion in 12 minutes [INSERT: Count=1014540, Max=32991, Min=343, Avg=1476.35, 90=1882, 99=2657, 99.9=7623, 99.99=21743] 
2023-04-30 10:07:08:509 380 sec: 41714615 operations; 94236.9 current ops/sec; est completion in 12 minutes [INSERT: Count=942360, Max=652287, Min=282, Avg=1589.58, 90=1914, 99=3149, 99.9=8767, 99.99=547327] 
2023-04-30 10:07:18:509 390 sec: 42697019 operations; 98240.4 current ops/sec; est completion in 12 minutes [INSERT: Count=982403, Max=12031, Min=228, Avg=1524.75, 90=1944, 99=3219, 99.9=7463, 99.99=8975] 
2023-04-30 10:07:28:509 400 sec: 43705082 operations; 100806.3 current ops/sec; est completion in 12 minutes [INSERT: Count=1008058, Max=32495, Min=228, Avg=1485.83, 90=1889, 99=2633, 99.9=7919, 99.99=23823] 
2023-04-30 10:07:38:509 410 sec: 44705060 operations; 99997.8 current ops/sec; est completion in 12 minutes [INSERT: Count=999980, Max=112255, Min=203, Avg=1497.85, 90=1901, 99=2973, 99.9=8727, 99.99=29887] 
2023-04-30 10:07:48:509 420 sec: 45682636 operations; 97757.6 current ops/sec; est completion in 12 minutes [INSERT: Count=977570, Max=13039, Min=348, Avg=1532.24, 90=1974, 99=3287, 99.9=7099, 99.99=9703] 
2023-04-30 10:07:58:509 430 sec: 46669844 operations; 98720.8 current ops/sec; est completion in 12 minutes [INSERT: Count=987213, Max=41215, Min=385, Avg=1517.24, 90=1921, 99=3013, 99.9=7735, 99.99=27711] 
2023-04-30 10:08:08:509 440 sec: 47669170 operations; 99932.6 current ops/sec; est completion in 11 minutes [INSERT: Count=999327, Max=78655, Min=405, Avg=1498.82, 90=1906, 99=2967, 99.9=7367, 99.99=33343] 
2023-04-30 10:08:18:509 450 sec: 48656818 operations; 98764.8 current ops/sec; est completion in 11 minutes [INSERT: Count=987656, Max=124095, Min=367, Avg=1516.57, 90=1937, 99=3179, 99.9=7791, 99.99=24335] 
2023-04-30 10:08:28:509 460 sec: 49638946 operations; 98212.8 current ops/sec; est completion in 11 minutes [INSERT: Count=982111, Max=39647, Min=364, Avg=1525.14, 90=1929, 99=3107, 99.9=7519, 99.99=25183] 
2023-04-30 10:08:38:509 470 sec: 50637884 operations; 99893.8 current ops/sec; est completion in 11 minutes [INSERT: Count=998951, Max=103999, Min=349, Avg=1499.42, 90=1904, 99=2837, 99.9=7939, 99.99=30735] 
2023-04-30 10:08:48:509 480 sec: 51635254 operations; 99737 current ops/sec; est completion in 11 minutes [INSERT: Count=997352, Max=124927, Min=230, Avg=1501.82, 90=1909, 99=2993, 99.9=7591, 99.99=41791] 
2023-04-30 10:08:58:509 490 sec: 52616249 operations; 98099.5 current ops/sec; est completion in 11 minutes [INSERT: Count=980992, Max=40575, Min=239, Avg=1526.92, 90=1942, 99=3191, 99.9=8535, 99.99=23823] 
2023-04-30 10:09:08:509 500 sec: 53609517 operations; 99326.8 current ops/sec; est completion in 11 minutes [INSERT: Count=993284, Max=93247, Min=347, Avg=1507.98, 90=1909, 99=2979, 99.9=6983, 99.99=34271] 
2023-04-30 10:09:18:509 510 sec: 54620871 operations; 101135.4 current ops/sec; est completion in 10 minutes [INSERT: Count=1011351, Max=27439, Min=373, Avg=1480.97, 90=1899, 99=2757, 99.9=7347, 99.99=11111] 
2023-04-30 10:09:28:509 520 sec: 55596457 operations; 97558.6 current ops/sec; est completion in 10 minutes [INSERT: Count=975589, Max=40095, Min=366, Avg=1535.42, 90=1973, 99=3405, 99.9=7835, 99.99=24815] 
2023-04-30 10:09:38:509 530 sec: 56579379 operations; 98292.2 current ops/sec; est completion in 10 minutes [INSERT: Count=982921, Max=105855, Min=234, Avg=1523.91, 90=1920, 99=3191, 99.9=7951, 99.99=53407] 
2023-04-30 10:09:48:509 540 sec: 57592340 operations; 101296.1 current ops/sec; est completion in 10 minutes [INSERT: Count=1012962, Max=52063, Min=355, Avg=1478.61, 90=1886, 99=2561, 99.9=8647, 99.99=11039] 
2023-04-30 10:09:58:509 550 sec: 58581610 operations; 98927 current ops/sec; est completion in 10 minutes [INSERT: Count=989257, Max=35743, Min=349, Avg=1514.12, 90=1947, 99=3249, 99.9=7875, 99.99=23871] 
2023-04-30 10:10:08:509 560 sec: 59556497 operations; 97488.7 current ops/sec; est completion in 10 minutes [INSERT: Count=974897, Max=103615, Min=255, Avg=1536.48, 90=1945, 99=3417, 99.9=7779, 99.99=39967] 
2023-04-30 10:10:18:509 570 sec: 60569340 operations; 101284.3 current ops/sec; est completion in 10 minutes [INSERT: Count=1012835, Max=82623, Min=350, Avg=1478.82, 90=1881, 99=2523, 99.9=7171, 99.99=11039] 
2023-04-30 10:10:28:509 580 sec: 61564381 operations; 99504.1 current ops/sec; est completion in 9 minutes [INSERT: Count=995044, Max=35903, Min=334, Avg=1505.3, 90=1916, 99=3103, 99.9=8351, 99.99=21951] 
2023-04-30 10:10:38:509 590 sec: 62525933 operations; 96155.2 current ops/sec; est completion in 9 minutes [INSERT: Count=961553, Max=211071, Min=190, Avg=1557.85, 90=1975, 99=3485, 99.9=7283, 99.99=88703] 
2023-04-30 10:10:48:509 600 sec: 63543499 operations; 101756.6 current ops/sec; est completion in 9 minutes [INSERT: Count=1017571, Max=12031, Min=376, Avg=1471.9, 90=1878, 99=2429, 99.9=7091, 99.99=9959] 
2023-04-30 10:10:58:509 610 sec: 64542676 operations; 99917.7 current ops/sec; est completion in 9 minutes [INSERT: Count=999166, Max=42079, Min=353, Avg=1499.05, 90=1900, 99=2897, 99.9=7975, 99.99=20815] 
2023-04-30 10:11:08:509 620 sec: 65513945 operations; 97126.9 current ops/sec; est completion in 9 minutes [INSERT: Count=971270, Max=71487, Min=372, Avg=1542.25, 90=1977, 99=3481, 99.9=7695, 99.99=30159] 
2023-04-30 10:11:18:509 630 sec: 66512113 operations; 99816.8 current ops/sec; est completion in 9 minutes [INSERT: Count=998170, Max=123775, Min=336, Avg=1500.55, 90=1893, 99=2741, 99.9=7679, 99.99=74111] 
2023-04-30 10:11:28:509 640 sec: 67518459 operations; 100634.6 current ops/sec; est completion in 9 minutes [INSERT: Count=1006348, Max=38367, Min=361, Avg=1488.37, 90=1884, 99=2655, 99.9=8039, 99.99=24975] 
2023-04-30 10:11:38:509 650 sec: 68488439 operations; 96998 current ops/sec; est completion in 8 minutes [INSERT: Count=969971, Max=130623, Min=219, Avg=1544.3, 90=1960, 99=3397, 99.9=8043, 99.99=68991] 
2023-04-30 10:11:48:509 660 sec: 69479846 operations; 99140.7 current ops/sec; est completion in 8 minutes [INSERT: Count=991419, Max=170367, Min=233, Avg=1510.85, 90=1913, 99=3019, 99.9=7143, 99.99=44831] 
2023-04-30 10:11:58:509 670 sec: 70491291 operations; 101144.5 current ops/sec; est completion in 8 minutes [INSERT: Count=1011440, Max=41279, Min=240, Avg=1480.83, 90=1880, 99=2587, 99.9=7643, 99.99=22783] 
2023-04-30 10:12:08:509 680 sec: 71465471 operations; 97418 current ops/sec; est completion in 8 minutes [INSERT: Count=974185, Max=140799, Min=374, Avg=1537.62, 90=1943, 99=3361, 99.9=8823, 99.99=54335] 
2023-04-30 10:12:18:509 690 sec: 72445874 operations; 98040.3 current ops/sec; est completion in 8 minutes [INSERT: Count=980416, Max=152447, Min=337, Avg=1527.84, 90=1932, 99=3277, 99.9=7483, 99.99=80447] 
2023-04-30 10:12:28:509 700 sec: 73455095 operations; 100922.1 current ops/sec; est completion in 8 minutes [INSERT: Count=1009195, Max=40927, Min=243, Avg=1484.1, 90=1885, 99=2675, 99.9=7559, 99.99=22063] 
2023-04-30 10:12:38:509 710 sec: 74440068 operations; 98497.3 current ops/sec; est completion in 8 minutes [INSERT: Count=984978, Max=102079, Min=217, Avg=1520.73, 90=1925, 99=3335, 99.9=7915, 99.99=34815] 
2023-04-30 10:12:48:509 720 sec: 75422184 operations; 98211.6 current ops/sec; est completion in 7 minutes [INSERT: Count=982120, Max=41055, Min=380, Avg=1525.18, 90=1950, 99=3319, 99.9=8247, 99.99=10479] 
2023-04-30 10:12:58:509 730 sec: 76424995 operations; 100281.1 current ops/sec; est completion in 7 minutes [INSERT: Count=1002818, Max=46591, Min=358, Avg=1493.66, 90=1898, 99=2827, 99.9=8091, 99.99=22463] 
2023-04-30 10:13:08:509 740 sec: 77410699 operations; 98570.4 current ops/sec; est completion in 7 minutes [INSERT: Count=985712, Max=113151, Min=231, Avg=1519.58, 90=1918, 99=3253, 99.9=8855, 99.99=43359] 
2023-04-30 10:13:18:509 750 sec: 78396180 operations; 98548.1 current ops/sec; est completion in 7 minutes [INSERT: Count=985477, Max=147327, Min=206, Avg=1519.99, 90=1948, 99=3339, 99.9=7679, 99.99=101375] 
2023-04-30 10:13:28:509 760 sec: 79387034 operations; 99085.4 current ops/sec; est completion in 7 minutes [INSERT: Count=990846, Max=38111, Min=213, Avg=1511.74, 90=1921, 99=3159, 99.9=7747, 99.99=25583] 
2023-04-30 10:13:38:509 770 sec: 80368394 operations; 98136 current ops/sec; est completion in 7 minutes [INSERT: Count=981368, Max=84607, Min=219, Avg=1526.36, 90=1912, 99=3375, 99.9=14063, 99.99=28559] 
2023-04-30 10:13:48:509 780 sec: 81358017 operations; 98962.3 current ops/sec; est completion in 6 minutes [INSERT: Count=989614, Max=46303, Min=399, Avg=1513.57, 90=1934, 99=3311, 99.9=7931, 99.99=9975] 
2023-04-30 10:13:58:509 790 sec: 82342505 operations; 98448.8 current ops/sec; est completion in 6 minutes [INSERT: Count=984485, Max=41791, Min=225, Avg=1521.51, 90=1934, 99=3171, 99.9=8415, 99.99=22767] 
2023-04-30 10:14:08:509 800 sec: 83329810 operations; 98730.5 current ops/sec; est completion in 6 minutes [INSERT: Count=987300, Max=60287, Min=222, Avg=1517.15, 90=1916, 99=3113, 99.9=8119, 99.99=58655] 
2023-04-30 10:14:18:509 810 sec: 84321028 operations; 99121.8 current ops/sec; est completion in 6 minutes [INSERT: Count=991215, Max=40575, Min=368, Avg=1511.13, 90=1928, 99=3345, 99.9=7907, 99.99=15663] 
2023-04-30 10:14:28:509 820 sec: 85306400 operations; 98537.2 current ops/sec; est completion in 6 minutes [INSERT: Count=985386, Max=39519, Min=385, Avg=1520.11, 90=1934, 99=3251, 99.9=8807, 99.99=24415] 
2023-04-30 10:14:38:509 830 sec: 86288768 operations; 98236.8 current ops/sec; est completion in 6 minutes [INSERT: Count=982363, Max=108735, Min=212, Avg=1524.79, 90=1923, 99=3193, 99.9=7563, 99.99=35999] 
2023-04-30 10:14:48:509 840 sec: 87276821 operations; 98805.3 current ops/sec; est completion in 6 minutes [INSERT: Count=988057, Max=158975, Min=260, Avg=1515.97, 90=1915, 99=3219, 99.9=7167, 99.99=55135] 
2023-04-30 10:14:58:509 850 sec: 88266667 operations; 98984.6 current ops/sec; est completion in 5 minutes [INSERT: Count=989856, Max=37727, Min=281, Avg=1513.21, 90=1926, 99=3233, 99.9=8027, 99.99=23295] 
2023-04-30 10:15:08:509 860 sec: 89240134 operations; 97346.7 current ops/sec; est completion in 5 minutes [INSERT: Count=973453, Max=154239, Min=368, Avg=1538.68, 90=1938, 99=3323, 99.9=8039, 99.99=39135] 
2023-04-30 10:15:18:509 870 sec: 90222503 operations; 98236.9 current ops/sec; est completion in 5 minutes [INSERT: Count=982371, Max=127295, Min=344, Avg=1524.77, 90=1915, 99=3279, 99.9=7795, 99.99=99519] 
2023-04-30 10:15:28:509 880 sec: 91215917 operations; 99341.4 current ops/sec; est completion in 5 minutes [INSERT: Count=993417, Max=33247, Min=371, Avg=1507.8, 90=1919, 99=3201, 99.9=8099, 99.99=22719] 
2023-04-30 10:15:38:509 890 sec: 92197087 operations; 98117 current ops/sec; est completion in 5 minutes [INSERT: Count=981160, Max=106303, Min=210, Avg=1526.64, 90=1935, 99=3325, 99.9=7979, 99.99=39199] 
2023-04-30 10:15:48:509 900 sec: 93201973 operations; 100488.6 current ops/sec; est completion in 5 minutes [INSERT: Count=1004896, Max=18543, Min=258, Avg=1490.54, 90=1896, 99=2895, 99.9=7547, 99.99=9607] 
2023-04-30 10:15:58:509 910 sec: 94210588 operations; 100861.5 current ops/sec; est completion in 4 minutes [INSERT: Count=1008610, Max=32287, Min=375, Avg=1484.96, 90=1882, 99=2669, 99.9=8799, 99.99=23103] 
2023-04-30 10:16:08:509 920 sec: 95213639 operations; 100305.1 current ops/sec; est completion in 4 minutes [INSERT: Count=1003057, Max=44127, Min=235, Avg=1493.13, 90=1903, 99=2765, 99.9=8239, 99.99=23055] 
2023-04-30 10:16:18:509 930 sec: 96220386 operations; 100674.7 current ops/sec; est completion in 4 minutes [INSERT: Count=1006744, Max=10895, Min=219, Avg=1487.78, 90=1900, 99=2837, 99.9=7279, 99.99=8719] 
2023-04-30 10:16:28:509 940 sec: 97224288 operations; 100390.2 current ops/sec; est completion in 4 minutes [INSERT: Count=1003894, Max=41503, Min=421, Avg=1492.02, 90=1891, 99=2735, 99.9=9023, 99.99=23039] 
2023-04-30 10:16:38:509 950 sec: 98203895 operations; 97960.7 current ops/sec; est completion in 4 minutes [INSERT: Count=979606, Max=163967, Min=216, Avg=1529.06, 90=1935, 99=3227, 99.9=7607, 99.99=45119] 
2023-04-30 10:16:48:509 960 sec: 99179911 operations; 97601.6 current ops/sec; est completion in 4 minutes [INSERT: Count=976018, Max=74943, Min=385, Avg=1534.69, 90=1951, 99=3491, 99.9=7551, 99.99=9231] 
2023-04-30 10:16:58:509 970 sec: 100176113 operations; 99620.2 current ops/sec; est completion in 4 minutes [INSERT: Count=996206, Max=40319, Min=407, Avg=1503.51, 90=1904, 99=3173, 99.9=7527, 99.99=22687] 
2023-04-30 10:17:08:509 980 sec: 101167611 operations; 99149.8 current ops/sec; est completion in 3 minutes [INSERT: Count=991500, Max=46431, Min=382, Avg=1510.7, 90=1919, 99=3203, 99.9=7155, 99.99=23999] 
2023-04-30 10:17:18:509 990 sec: 102140328 operations; 97271.7 current ops/sec; est completion in 3 minutes [INSERT: Count=972730, Max=59295, Min=382, Avg=1539.94, 90=1964, 99=3559, 99.9=7523, 99.99=10759] 
2023-04-30 10:17:28:509 1000 sec: 103131296 operations; 99096.8 current ops/sec; est completion in 3 minutes [INSERT: Count=990965, Max=39327, Min=334, Avg=1511.55, 90=1910, 99=3253, 99.9=8375, 99.99=24655] 
2023-04-30 10:17:38:509 1010 sec: 104135428 operations; 100413.2 current ops/sec; est completion in 3 minutes [INSERT: Count=1004117, Max=42943, Min=251, Avg=1491.68, 90=1900, 99=2893, 99.9=7951, 99.99=24655] 
2023-04-30 10:17:48:509 1020 sec: 105112439 operations; 97701.1 current ops/sec; est completion in 3 minutes [INSERT: Count=977015, Max=12295, Min=406, Avg=1533.13, 90=1958, 99=3471, 99.9=7271, 99.99=9303] 
2023-04-30 10:17:58:509 1030 sec: 106096835 operations; 98439.6 current ops/sec; est completion in 3 minutes [INSERT: Count=984396, Max=44863, Min=388, Avg=1521.69, 90=1920, 99=3361, 99.9=8063, 99.99=25215] 
2023-04-30 10:18:08:509 1040 sec: 107101271 operations; 100443.6 current ops/sec; est completion in 2 minutes [INSERT: Count=1004431, Max=47455, Min=401, Avg=1491.14, 90=1894, 99=2835, 99.9=7903, 99.99=28399] 
2023-04-30 10:18:18:509 1050 sec: 108075557 operations; 97418.86 current ops/sec; est completion in 2 minutes [INSERT: Count=974307, Max=105791, Min=404, Avg=1536.96, 90=1954, 99=3565, 99.9=7731, 99.99=14175] 
2023-04-30 10:18:28:509 1060 sec: 109052490 operations; 97703.07 current ops/sec; est completion in 2 minutes [INSERT: Count=976906, Max=41311, Min=381, Avg=1533.76, 90=1939, 99=3505, 99.9=7531, 99.99=24463] 
2023-04-30 10:18:38:509 1070 sec: 110050237 operations; 99774.7 current ops/sec; est completion in 2 minutes [INSERT: Count=997754, Max=83263, Min=194, Avg=1501.19, 90=1896, 99=2899, 99.9=7523, 99.99=32143] 
2023-04-30 10:18:48:509 1080 sec: 111030920 operations; 98068.3 current ops/sec; est completion in 2 minutes [INSERT: Count=980695, Max=99327, Min=394, Avg=1527.38, 90=1947, 99=3513, 99.9=7259, 99.99=17663] 
2023-04-30 10:18:58:509 1090 sec: 112002025 operations; 97110.5 current ops/sec; est completion in 2 minutes [INSERT: Count=971090, Max=39519, Min=370, Avg=1542.44, 90=1953, 99=3577, 99.9=7851, 99.99=25999] 
2023-04-30 10:19:08:509 1100 sec: 112999682 operations; 99765.7 current ops/sec; est completion in 1 minute [INSERT: Count=997674, Max=39775, Min=418, Avg=1501.35, 90=1901, 99=2855, 99.9=7907, 99.99=24831] 
2023-04-30 10:19:18:509 1110 sec: 113984510 operations; 98482.8 current ops/sec; est completion in 1 minute [INSERT: Count=984813, Max=142463, Min=240, Avg=1520.95, 90=1931, 99=3397, 99.9=6827, 99.99=24479] 
2023-04-30 10:19:28:509 1120 sec: 114955439 operations; 97092.9 current ops/sec; est completion in 1 minute [INSERT: Count=970939, Max=38943, Min=269, Avg=1542.75, 90=1960, 99=3637, 99.9=8367, 99.99=26207] 
2023-04-30 10:19:38:509 1130 sec: 115940484 operations; 98504.5 current ops/sec; est completion in 1 minute [INSERT: Count=985040, Max=98495, Min=236, Avg=1520.58, 90=1916, 99=3065, 99.9=8079, 99.99=31871] 
2023-04-30 10:19:48:509 1140 sec: 116928120 operations; 98763.6 current ops/sec; est completion in 1 minute [INSERT: Count=987628, Max=94911, Min=375, Avg=1516.58, 90=1925, 99=3295, 99.9=7751, 99.99=10095] 
2023-04-30 10:19:58:509 1150 sec: 117902034 operations; 97391.4 current ops/sec; est completion in 1 minute [INSERT: Count=973934, Max=37183, Min=378, Avg=1538.04, 90=1961, 99=3697, 99.9=7411, 99.99=23983] 
2023-04-30 10:20:08:509 1160 sec: 118878078 operations; 97604.4 current ops/sec; est completion in 1 minute [INSERT: Count=976030, Max=166911, Min=282, Avg=1534.63, 90=1930, 99=3241, 99.9=8359, 99.99=62495] 
2023-04-30 10:20:18:509 1170 sec: 119861656 operations; 98357.8 current ops/sec; est completion in 51 seconds [INSERT: Count=983588, Max=123391, Min=328, Avg=1522.83, 90=1918, 99=3189, 99.9=7783, 99.99=61407] 
2023-04-30 10:20:28:509 1180 sec: 120836514 operations; 97485.8 current ops/sec; est completion in 41 seconds [INSERT: Count=974843, Max=51935, Min=358, Avg=1536.55, 90=1952, 99=3709, 99.9=7663, 99.99=24751] 
2023-04-30 10:20:38:509 1190 sec: 121819345 operations; 98283.1 current ops/sec; est completion in 32 seconds [INSERT: Count=982835, Max=129087, Min=215, Avg=1524.06, 90=1934, 99=3289, 99.9=8231, 99.99=36959] 
2023-04-30 10:20:48:509 1200 sec: 122801495 operations; 98215 current ops/sec; est completion in 22 seconds [INSERT: Count=982145, Max=80959, Min=405, Avg=1525.16, 90=1926, 99=3237, 99.9=7891, 99.99=56991] 
2023-04-30 10:20:58:509 1210 sec: 123779910 operations; 97841.5 current ops/sec; est completion in 12 seconds [INSERT: Count=978414, Max=48095, Min=349, Avg=1530.94, 90=1950, 99=3573, 99.9=7423, 99.99=23599] 
2023-04-30 10:21:08:509 1220 sec: 124759869 operations; 97995.9 current ops/sec; est completion in 3 second [INSERT: Count=979971, Max=91903, Min=373, Avg=1528.49, 90=1944, 99=3415, 99.9=7319, 99.99=33087] 
2023-04-30 10:21:14:518 1226 sec: 125000000 operations; 39955.24 current ops/sec; [CLEANUP: Count=150, Max=2217983, Min=1, Avg=14781.53, 90=3, 99=19, 99.9=2217983, 99.99=2217983] [INSERT: Count=240110, Max=110399, Min=366, Avg=1530.56, 90=1925, 99=3273, 99.9=6927, 99.99=88959] 
[OVERALL], RunTime(ms), 1226009
[OVERALL], Throughput(ops/sec), 101956.83718471887
[TOTAL_GCS_PS_Scavenge], Count, 2705
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 12741
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0392256500564026
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 94
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.007667154156290859
[TOTAL_GCs], Count, 2707
[TOTAL_GC_TIME], Time(ms), 12835
[TOTAL_GC_TIME_%], Time(%), 1.0468928042126935
[CLEANUP], Operations, 150
[CLEANUP], AverageLatency(us), 14781.533333333333
[CLEANUP], MinLatency(us), 1
[CLEANUP], MaxLatency(us), 2217983
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 19
[INSERT], Operations, 125000000
[INSERT], AverageLatency(us), 1463.827518528
[INSERT], MinLatency(us), 181
[INSERT], MaxLatency(us), 652287
[INSERT], 95thPercentileLatency(us), 2032
[INSERT], 99thPercentileLatency(us), 3085
[INSERT], Return=OK, 125000000
