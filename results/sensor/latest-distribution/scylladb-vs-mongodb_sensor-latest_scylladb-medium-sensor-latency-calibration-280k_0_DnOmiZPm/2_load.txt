bin/ycsb load scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=375000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=250000000 -p insertcount=125000000
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=375000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=250000000 -p insertcount=125000000 -load
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 150 -p recordcount=375000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=250000000 -p insertcount=125000000 -load
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-8] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-8] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-04-30 10:01:08:041 0 sec: 0 operations; est completion in 0 second 
[Thread-8] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-8] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.224.14.50:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.25.70.101:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.236.216.15:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.155.229.124:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.69.220:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.214.116.240:9042 added
[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 04c1c4a5-1f5b-4be8-8b3b-2bc1e2431452

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.155.229.124; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.224.14.50; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.214.116.240; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.69.220; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.236.216.15; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.25.70.101; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: ONE

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
2023-04-30 10:01:18:026 10 sec: 1284478 operations; 128447.8 current ops/sec; est completion in 16 minutes [INSERT: Count=1284611, Max=64255, Min=230, Avg=1076.59, 90=1423, 99=4275, 99.9=19391, 99.99=55167] 
2023-04-30 10:01:28:026 20 sec: 2778396 operations; 149391.8 current ops/sec; est completion in 14 minutes [INSERT: Count=1493839, Max=45247, Min=219, Avg=1001.44, 90=1435, 99=2083, 99.9=8147, 99.99=40255] 
2023-04-30 10:01:38:026 30 sec: 3894532 operations; 111613.6 current ops/sec; est completion in 15 minutes [INSERT: Count=1116138, Max=27631, Min=222, Avg=1341.65, 90=1850, 99=2365, 99.9=6827, 99.99=18319] 
2023-04-30 10:01:48:025 40 sec: 5277149 operations; 138261.7 current ops/sec; est completion in 15 minutes [INSERT: Count=1382623, Max=14871, Min=234, Avg=1082.47, 90=1591, 99=2265, 99.9=7471, 99.99=12911] 
2023-04-30 10:01:58:025 50 sec: 6561460 operations; 128431.1 current ops/sec; est completion in 15 minutes [INSERT: Count=1284293, Max=30399, Min=211, Avg=1165.61, 90=1744, 99=2239, 99.9=8807, 99.99=22431] 
2023-04-30 10:02:08:025 60 sec: 7592985 operations; 103152.5 current ops/sec; est completion in 15 minutes [INSERT: Count=1031531, Max=33343, Min=227, Avg=1451.91, 90=1887, 99=2525, 99.9=8059, 99.99=21679] 
2023-04-30 10:02:18:025 70 sec: 8672622 operations; 107963.7 current ops/sec; est completion in 15 minutes [INSERT: Count=1079628, Max=11943, Min=235, Avg=1387.11, 90=1826, 99=2303, 99.9=7883, 99.99=10559] 
2023-04-30 10:02:28:025 80 sec: 9759318 operations; 108669.6 current ops/sec; est completion in 15 minutes [INSERT: Count=1086696, Max=31519, Min=213, Avg=1378.05, 90=1849, 99=2415, 99.9=8103, 99.99=21999] 
2023-04-30 10:02:38:025 90 sec: 10896264 operations; 113694.6 current ops/sec; est completion in 15 minutes [INSERT: Count=1136965, Max=40031, Min=215, Avg=1317.05, 90=1848, 99=2479, 99.9=8335, 99.99=28047] 
2023-04-30 10:02:48:025 100 sec: 12312377 operations; 141611.3 current ops/sec; est completion in 15 minutes [INSERT: Count=1416105, Max=97407, Min=218, Avg=1056.85, 90=1416, 99=2127, 99.9=9031, 99.99=20751] 
2023-04-30 10:02:58:025 110 sec: 13381841 operations; 106946.4 current ops/sec; est completion in 15 minutes [INSERT: Count=1069412, Max=253823, Min=193, Avg=1357.4, 90=1851, 99=5019, 99.9=22079, 99.99=123519] 
2023-04-30 10:03:08:025 120 sec: 14140597 operations; 75875.6 current ops/sec; est completion in 15 minutes [INSERT: Count=758779, Max=485631, Min=189, Avg=2035.18, 90=1968, 99=11695, 99.9=98431, 99.99=424191] 
2023-04-30 10:03:18:025 130 sec: 15112887 operations; 97229 current ops/sec; est completion in 15 minutes [INSERT: Count=972304, Max=368127, Min=238, Avg=1540.48, 90=1848, 99=3795, 99.9=25407, 99.99=260095] 
2023-04-30 10:03:28:025 140 sec: 16125046 operations; 101215.9 current ops/sec; est completion in 15 minutes [INSERT: Count=1012175, Max=377343, Min=246, Avg=1479.74, 90=1843, 99=2343, 99.9=11111, 99.99=263423] 
2023-04-30 10:03:38:025 150 sec: 17169917 operations; 104487.1 current ops/sec; est completion in 15 minutes [INSERT: Count=1044853, Max=107007, Min=226, Avg=1433.33, 90=1848, 99=2355, 99.9=9263, 99.99=61823] 
2023-04-30 10:03:48:025 160 sec: 18275166 operations; 110524.9 current ops/sec; est completion in 15 minutes [INSERT: Count=1105256, Max=10103, Min=358, Avg=1354.87, 90=1835, 99=2339, 99.9=7271, 99.99=8719] 
2023-04-30 10:03:58:025 170 sec: 19359952 operations; 108478.6 current ops/sec; est completion in 15 minutes [INSERT: Count=1084782, Max=32431, Min=244, Avg=1380.49, 90=1848, 99=2445, 99.9=7927, 99.99=22959] 
2023-04-30 10:04:08:025 180 sec: 20451220 operations; 109126.8 current ops/sec; est completion in 15 minutes [INSERT: Count=1091271, Max=38495, Min=228, Avg=1372.28, 90=1856, 99=2389, 99.9=8127, 99.99=24175] 
2023-04-30 10:04:18:025 190 sec: 21467562 operations; 101634.2 current ops/sec; est completion in 15 minutes [INSERT: Count=1016354, Max=115711, Min=222, Avg=1473.63, 90=1911, 99=2903, 99.9=7827, 99.99=18831] 
2023-04-30 10:04:28:025 200 sec: 22496864 operations; 102930.2 current ops/sec; est completion in 15 minutes [INSERT: Count=1029284, Max=31999, Min=227, Avg=1455.07, 90=1887, 99=2621, 99.9=7863, 99.99=20847] 
2023-04-30 10:04:38:025 210 sec: 23477161 operations; 98029.7 current ops/sec; est completion in 15 minutes [INSERT: Count=980296, Max=38847, Min=231, Avg=1527.92, 90=1984, 99=3367, 99.9=7591, 99.99=24671] 
2023-04-30 10:04:48:025 220 sec: 24479741 operations; 100258 current ops/sec; est completion in 15 minutes [INSERT: Count=1002601, Max=208639, Min=239, Avg=1493.9, 90=1892, 99=2667, 99.9=6999, 99.99=95871] 
2023-04-30 10:04:58:025 230 sec: 25498078 operations; 101833.7 current ops/sec; est completion in 14 minutes [INSERT: Count=1018312, Max=103679, Min=235, Avg=1470.74, 90=1874, 99=2455, 99.9=7883, 99.99=30719] 
2023-04-30 10:05:08:025 240 sec: 26519685 operations; 102160.7 current ops/sec; est completion in 14 minutes [INSERT: Count=1021613, Max=99199, Min=253, Avg=1466.04, 90=1876, 99=2567, 99.9=7355, 99.99=30079] 
2023-04-30 10:05:18:026 250 sec: 27563238 operations; 104355.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1043610, Max=59903, Min=243, Avg=1435.11, 90=1880, 99=2589, 99.9=6875, 99.99=8575] 
2023-04-30 10:05:28:025 260 sec: 28651870 operations; 108863.2 current ops/sec; est completion in 14 minutes [INSERT: Count=1088567, Max=38943, Min=213, Avg=1375.61, 90=1889, 99=2611, 99.9=8311, 99.99=20271] 
2023-04-30 10:05:38:025 270 sec: 29677028 operations; 102515.8 current ops/sec; est completion in 14 minutes [INSERT: Count=1025180, Max=41503, Min=216, Avg=1460.92, 90=2042, 99=3493, 99.9=8075, 99.99=29119] 
2023-04-30 10:05:48:025 280 sec: 30736037 operations; 105900.9 current ops/sec; est completion in 14 minutes [INSERT: Count=1058994, Max=130495, Min=216, Avg=1414.18, 90=1892, 99=2571, 99.9=7235, 99.99=15991] 
2023-04-30 10:05:58:025 290 sec: 31759890 operations; 102385.3 current ops/sec; est completion in 14 minutes [INSERT: Count=1023859, Max=31407, Min=243, Avg=1462.8, 90=1872, 99=2507, 99.9=7427, 99.99=21407] 
2023-04-30 10:06:08:025 300 sec: 32770869 operations; 101097.9 current ops/sec; est completion in 14 minutes [INSERT: Count=1010974, Max=102207, Min=244, Avg=1481.45, 90=1893, 99=2693, 99.9=7435, 99.99=28415] 
2023-04-30 10:06:18:025 310 sec: 33794463 operations; 102359.4 current ops/sec; est completion in 13 minutes [INSERT: Count=1023598, Max=76351, Min=243, Avg=1463.18, 90=1872, 99=2335, 99.9=6719, 99.99=20351] 
2023-04-30 10:06:28:025 320 sec: 34816852 operations; 102238.9 current ops/sec; est completion in 13 minutes [INSERT: Count=1022383, Max=44543, Min=232, Avg=1464.87, 90=1880, 99=2579, 99.9=8431, 99.99=23711] 
2023-04-30 10:06:38:025 330 sec: 35802940 operations; 98608.8 current ops/sec; est completion in 13 minutes [INSERT: Count=986073, Max=119999, Min=219, Avg=1518.96, 90=1959, 99=3299, 99.9=7303, 99.99=31231] 
2023-04-30 10:06:48:025 340 sec: 36794032 operations; 99109.2 current ops/sec; est completion in 13 minutes [INSERT: Count=991090, Max=104063, Min=416, Avg=1511.22, 90=1932, 99=3139, 99.9=7647, 99.99=50495] 
2023-04-30 10:06:58:025 350 sec: 37811743 operations; 101771.1 current ops/sec; est completion in 13 minutes [INSERT: Count=1017711, Max=33375, Min=354, Avg=1471.65, 90=1886, 99=2533, 99.9=8903, 99.99=22127] 
2023-04-30 10:07:08:025 360 sec: 38815036 operations; 100329.3 current ops/sec; est completion in 13 minutes [INSERT: Count=1003304, Max=35487, Min=357, Avg=1492.83, 90=1917, 99=3019, 99.9=8239, 99.99=22511] 
2023-04-30 10:07:18:025 370 sec: 39797700 operations; 98266.4 current ops/sec; est completion in 13 minutes [INSERT: Count=982673, Max=12319, Min=252, Avg=1524.25, 90=1968, 99=3285, 99.9=7167, 99.99=9863] 
2023-04-30 10:07:28:025 380 sec: 40810251 operations; 101255.1 current ops/sec; est completion in 13 minutes [INSERT: Count=1012548, Max=33503, Min=241, Avg=1479.15, 90=1894, 99=2575, 99.9=7947, 99.99=21695] 
2023-04-30 10:07:38:025 390 sec: 41811439 operations; 100118.8 current ops/sec; est completion in 12 minutes [INSERT: Count=1001171, Max=111871, Min=235, Avg=1495.99, 90=1905, 99=3009, 99.9=7827, 99.99=30911] 
2023-04-30 10:07:48:025 400 sec: 42795491 operations; 98405.2 current ops/sec; est completion in 12 minutes [INSERT: Count=984063, Max=10719, Min=395, Avg=1522.07, 90=1981, 99=3301, 99.9=6923, 99.99=8799] 
2023-04-30 10:07:58:025 410 sec: 43789332 operations; 99384.1 current ops/sec; est completion in 12 minutes [INSERT: Count=993848, Max=40639, Min=394, Avg=1507.07, 90=1919, 99=3001, 99.9=7871, 99.99=25951] 
2023-04-30 10:08:08:025 420 sec: 44792543 operations; 100321.1 current ops/sec; est completion in 12 minutes [INSERT: Count=1003203, Max=87231, Min=395, Avg=1492.96, 90=1907, 99=2893, 99.9=7611, 99.99=30463] 
2023-04-30 10:08:18:026 430 sec: 45786215 operations; 99367.2 current ops/sec; est completion in 12 minutes [INSERT: Count=993677, Max=120191, Min=408, Avg=1507.32, 90=1940, 99=3173, 99.9=7799, 99.99=14335] 
2023-04-30 10:08:28:025 440 sec: 46768883 operations; 98266.8 current ops/sec; est completion in 12 minutes [INSERT: Count=982674, Max=40607, Min=403, Avg=1524.24, 90=1943, 99=3123, 99.9=8239, 99.99=25279] 
2023-04-30 10:08:38:025 450 sec: 47770083 operations; 100120 current ops/sec; est completion in 12 minutes [INSERT: Count=1001193, Max=92287, Min=361, Avg=1495.93, 90=1908, 99=2757, 99.9=8271, 99.99=34911] 
2023-04-30 10:08:48:025 460 sec: 48773530 operations; 100344.7 current ops/sec; est completion in 11 minutes [INSERT: Count=1003429, Max=107199, Min=245, Avg=1492.65, 90=1911, 99=2895, 99.9=8159, 99.99=33439] 
2023-04-30 10:08:58:025 470 sec: 49758357 operations; 98482.7 current ops/sec; est completion in 11 minutes [INSERT: Count=984844, Max=43295, Min=247, Avg=1520.87, 90=1959, 99=3259, 99.9=7783, 99.99=22095] 
2023-04-30 10:09:08:025 480 sec: 50752307 operations; 99395 current ops/sec; est completion in 11 minutes [INSERT: Count=993942, Max=100479, Min=362, Avg=1506.9, 90=1921, 99=2939, 99.9=7535, 99.99=31759] 
2023-04-30 10:09:18:025 490 sec: 51765463 operations; 101315.6 current ops/sec; est completion in 11 minutes [INSERT: Count=1013157, Max=26783, Min=376, Avg=1478.27, 90=1904, 99=2737, 99.9=7383, 99.99=9351] 
2023-04-30 10:09:28:025 500 sec: 52741984 operations; 97652.1 current ops/sec; est completion in 11 minutes [INSERT: Count=976524, Max=36703, Min=401, Avg=1533.82, 90=1992, 99=3399, 99.9=8003, 99.99=24223] 
2023-04-30 10:09:38:025 510 sec: 53724981 operations; 98299.7 current ops/sec; est completion in 11 minutes [INSERT: Count=982988, Max=116223, Min=270, Avg=1523.73, 90=1933, 99=3121, 99.9=8031, 99.99=62463] 
2023-04-30 10:09:48:025 520 sec: 54738950 operations; 101396.9 current ops/sec; est completion in 11 minutes [INSERT: Count=1013987, Max=58463, Min=371, Avg=1477.08, 90=1895, 99=2603, 99.9=7931, 99.99=10399] 
2023-04-30 10:09:58:025 530 sec: 55731281 operations; 99233.1 current ops/sec; est completion in 10 minutes [INSERT: Count=992316, Max=36031, Min=371, Avg=1509.39, 90=1954, 99=3221, 99.9=8327, 99.99=24175] 
2023-04-30 10:10:08:025 540 sec: 56705699 operations; 97441.8 current ops/sec; est completion in 10 minutes [INSERT: Count=974432, Max=108799, Min=335, Avg=1537.15, 90=1963, 99=3329, 99.9=8903, 99.99=44799] 
2023-04-30 10:10:18:025 550 sec: 57719443 operations; 101374.4 current ops/sec; est completion in 10 minutes [INSERT: Count=1013731, Max=76031, Min=257, Avg=1477.38, 90=1888, 99=2545, 99.9=7571, 99.99=10031] 
2023-04-30 10:10:28:025 560 sec: 58716406 operations; 99696.3 current ops/sec; est completion in 10 minutes [INSERT: Count=996963, Max=32095, Min=381, Avg=1502.33, 90=1921, 99=3067, 99.9=8687, 99.99=22991] 
2023-04-30 10:10:38:025 570 sec: 59678058 operations; 96165.2 current ops/sec; est completion in 10 minutes [INSERT: Count=961650, Max=216575, Min=206, Avg=1557.61, 90=1992, 99=3397, 99.9=8399, 99.99=109567] 
2023-04-30 10:10:48:025 580 sec: 60696241 operations; 101818.3 current ops/sec; est completion in 10 minutes [INSERT: Count=1018193, Max=11247, Min=386, Avg=1470.94, 90=1881, 99=2481, 99.9=7367, 99.99=9663] 
2023-04-30 10:10:58:025 590 sec: 61701197 operations; 100495.6 current ops/sec; est completion in 10 minutes [INSERT: Count=1004935, Max=41823, Min=360, Avg=1490.39, 90=1899, 99=2777, 99.9=7947, 99.99=23119] 
2023-04-30 10:11:08:025 600 sec: 62674830 operations; 97363.3 current ops/sec; est completion in 9 minutes [INSERT: Count=973633, Max=70399, Min=416, Avg=1538.4, 90=1991, 99=3487, 99.9=7487, 99.99=27951] 
2023-04-30 10:11:18:025 610 sec: 63675626 operations; 100079.6 current ops/sec; est completion in 9 minutes [INSERT: Count=1000811, Max=115903, Min=357, Avg=1496.55, 90=1897, 99=2711, 99.9=8719, 99.99=79487] 
2023-04-30 10:11:28:026 620 sec: 64685396 operations; 100977 current ops/sec; est completion in 9 minutes [INSERT: Count=1009781, Max=38015, Min=381, Avg=1483.25, 90=1883, 99=2607, 99.9=8223, 99.99=22655] 
2023-04-30 10:11:38:025 630 sec: 65655944 operations; 97054.8 current ops/sec; est completion in 9 minutes [INSERT: Count=970528, Max=127231, Min=220, Avg=1543.31, 90=1973, 99=3405, 99.9=8015, 99.99=83647] 
2023-04-30 10:11:48:025 640 sec: 66639420 operations; 98347.6 current ops/sec; est completion in 9 minutes [INSERT: Count=983496, Max=168831, Min=230, Avg=1522.96, 90=1925, 99=3117, 99.9=7595, 99.99=71167] 
2023-04-30 10:11:58:025 650 sec: 67655244 operations; 101582.4 current ops/sec; est completion in 9 minutes [INSERT: Count=1015805, Max=42879, Min=256, Avg=1474.43, 90=1879, 99=2555, 99.9=8063, 99.99=22495] 
2023-04-30 10:12:08:025 660 sec: 68631274 operations; 97603 current ops/sec; est completion in 9 minutes [INSERT: Count=976031, Max=131455, Min=391, Avg=1534.64, 90=1951, 99=3405, 99.9=7931, 99.99=51359] 
2023-04-30 10:12:18:025 670 sec: 69613995 operations; 98272.1 current ops/sec; est completion in 8 minutes [INSERT: Count=982734, Max=142335, Min=355, Avg=1524.18, 90=1949, 99=3309, 99.9=7279, 99.99=71999] 
2023-04-30 10:12:28:025 680 sec: 70623401 operations; 100940.6 current ops/sec; est completion in 8 minutes [INSERT: Count=1009410, Max=41567, Min=249, Avg=1483.81, 90=1888, 99=2683, 99.9=7859, 99.99=23535] 
2023-04-30 10:12:38:025 690 sec: 71613102 operations; 98970.1 current ops/sec; est completion in 8 minutes [INSERT: Count=989695, Max=94719, Min=224, Avg=1513.41, 90=1925, 99=3249, 99.9=7911, 99.99=33663] 
2023-04-30 10:12:48:025 700 sec: 72598732 operations; 98563 current ops/sec; est completion in 8 minutes [INSERT: Count=985610, Max=41887, Min=388, Avg=1519.66, 90=1965, 99=3379, 99.9=6347, 99.99=9599] 
2023-04-30 10:12:58:025 710 sec: 73602839 operations; 100410.7 current ops/sec; est completion in 8 minutes [INSERT: Count=1004131, Max=44479, Min=354, Avg=1491.64, 90=1903, 99=2895, 99.9=8303, 99.99=24207] 
2023-04-30 10:13:08:025 720 sec: 74594649 operations; 99181 current ops/sec; est completion in 8 minutes [INSERT: Count=991792, Max=103743, Min=241, Avg=1510.19, 90=1914, 99=3095, 99.9=9439, 99.99=40575] 
2023-04-30 10:13:18:025 730 sec: 75577656 operations; 98300.7 current ops/sec; est completion in 7 minutes [INSERT: Count=983027, Max=141695, Min=224, Avg=1523.73, 90=1964, 99=3469, 99.9=7411, 99.99=99007] 
2023-04-30 10:13:28:025 740 sec: 76570229 operations; 99257.3 current ops/sec; est completion in 7 minutes [INSERT: Count=992557, Max=38879, Min=227, Avg=1509.02, 90=1937, 99=3159, 99.9=8103, 99.99=25935] 
2023-04-30 10:13:38:025 750 sec: 77552564 operations; 98233.5 current ops/sec; est completion in 7 minutes [INSERT: Count=982335, Max=81407, Min=220, Avg=1524.76, 90=1919, 99=3413, 99.9=13671, 99.99=30079] 
2023-04-30 10:13:48:025 760 sec: 78546137 operations; 99357.3 current ops/sec; est completion in 7 minutes [INSERT: Count=993586, Max=43135, Min=444, Avg=1507.5, 90=1939, 99=3361, 99.9=6979, 99.99=8895] 
2023-04-30 10:13:58:025 770 sec: 79534117 operations; 98798 current ops/sec; est completion in 7 minutes [INSERT: Count=987969, Max=43967, Min=236, Avg=1516.06, 90=1947, 99=3287, 99.9=6983, 99.99=20815] 
2023-04-30 10:14:08:025 780 sec: 80530080 operations; 99596.3 current ops/sec; est completion in 7 minutes [INSERT: Count=995955, Max=45887, Min=231, Avg=1503.86, 90=1918, 99=3053, 99.9=8495, 99.99=26783] 
2023-04-30 10:14:18:025 790 sec: 81526192 operations; 99611.2 current ops/sec; est completion in 7 minutes [INSERT: Count=996118, Max=40319, Min=439, Avg=1503.68, 90=1929, 99=3285, 99.9=8023, 99.99=15319] 
2023-04-30 10:14:28:025 800 sec: 82506285 operations; 98009.3 current ops/sec; est completion in 6 minutes [INSERT: Count=980095, Max=223999, Min=363, Avg=1528.26, 90=1940, 99=3215, 99.9=8647, 99.99=100095] 
2023-04-30 10:14:38:025 810 sec: 83491151 operations; 98486.6 current ops/sec; est completion in 6 minutes [INSERT: Count=984867, Max=104767, Min=223, Avg=1520.86, 90=1932, 99=3251, 99.9=7203, 99.99=34783] 
2023-04-30 10:14:48:025 820 sec: 84479890 operations; 98873.9 current ops/sec; est completion in 6 minutes [INSERT: Count=988739, Max=148607, Min=251, Avg=1514.85, 90=1919, 99=3217, 99.9=8147, 99.99=57983] 
2023-04-30 10:14:58:025 830 sec: 85475336 operations; 99544.6 current ops/sec; est completion in 6 minutes [INSERT: Count=995442, Max=39967, Min=269, Avg=1504.66, 90=1933, 99=3191, 99.9=7511, 99.99=23839] 
2023-04-30 10:15:08:025 840 sec: 86454921 operations; 97958.5 current ops/sec; est completion in 6 minutes [INSERT: Count=979584, Max=164863, Min=300, Avg=1529.05, 90=1942, 99=3293, 99.9=7547, 99.99=36511] 
2023-04-30 10:15:18:026 850 sec: 87440050 operations; 98512.9 current ops/sec; est completion in 6 minutes [INSERT: Count=985140, Max=129919, Min=359, Avg=1520.44, 90=1919, 99=3283, 99.9=7239, 99.99=83967] 
2023-04-30 10:15:28:025 860 sec: 88434788 operations; 99473.8 current ops/sec; est completion in 5 minutes [INSERT: Count=994736, Max=32991, Min=388, Avg=1505.71, 90=1926, 99=3237, 99.9=7983, 99.99=25423] 
2023-04-30 10:15:38:025 870 sec: 89421223 operations; 98643.5 current ops/sec; est completion in 5 minutes [INSERT: Count=986437, Max=99071, Min=218, Avg=1518.4, 90=1946, 99=3233, 99.9=7935, 99.99=35711] 
2023-04-30 10:15:48:026 880 sec: 90429073 operations; 100785 current ops/sec; est completion in 5 minutes [INSERT: Count=1007852, Max=15407, Min=245, Avg=1486.1, 90=1899, 99=2857, 99.9=7631, 99.99=10055] 
2023-04-30 10:15:58:025 890 sec: 91445861 operations; 101678.8 current ops/sec; est completion in 5 minutes [INSERT: Count=1016784, Max=31855, Min=408, Avg=1473.01, 90=1882, 99=2643, 99.9=7687, 99.99=19999] 
2023-04-30 10:16:08:025 900 sec: 92455313 operations; 100945.2 current ops/sec; est completion in 5 minutes [INSERT: Count=1009445, Max=44735, Min=389, Avg=1483.71, 90=1901, 99=2821, 99.9=7763, 99.99=23903] 
2023-04-30 10:16:18:025 910 sec: 93466103 operations; 101079 current ops/sec; est completion in 5 minutes [INSERT: Count=1010793, Max=11175, Min=242, Avg=1481.71, 90=1904, 99=2791, 99.9=7875, 99.99=9743] 
2023-04-30 10:16:28:025 920 sec: 94474707 operations; 100860.4 current ops/sec; est completion in 4 minutes [INSERT: Count=1008601, Max=39647, Min=426, Avg=1484.98, 90=1893, 99=2713, 99.9=8151, 99.99=22895] 
2023-04-30 10:16:38:025 930 sec: 95458988 operations; 98428.1 current ops/sec; est completion in 4 minutes [INSERT: Count=984279, Max=157823, Min=226, Avg=1521.76, 90=1940, 99=3215, 99.9=7343, 99.99=49439] 
2023-04-30 10:16:48:025 940 sec: 96437859 operations; 97887.1 current ops/sec; est completion in 4 minutes [INSERT: Count=978883, Max=82879, Min=378, Avg=1530.18, 90=1965, 99=3483, 99.9=7515, 99.99=9383] 
2023-04-30 10:16:58:025 950 sec: 97439660 operations; 100180.1 current ops/sec; est completion in 4 minutes [INSERT: Count=1001792, Max=42175, Min=432, Avg=1495.08, 90=1909, 99=3063, 99.9=7651, 99.99=22799] 
2023-04-30 10:17:08:025 960 sec: 98435226 operations; 99556.6 current ops/sec; est completion in 4 minutes [INSERT: Count=995559, Max=42623, Min=393, Avg=1504.48, 90=1926, 99=3069, 99.9=7987, 99.99=26639] 
2023-04-30 10:17:18:025 970 sec: 99411090 operations; 97586.4 current ops/sec; est completion in 4 minutes [INSERT: Count=975876, Max=55871, Min=358, Avg=1534.9, 90=1979, 99=3471, 99.9=7771, 99.99=10351] 
2023-04-30 10:17:28:025 980 sec: 100397886 operations; 98679.6 current ops/sec; est completion in 4 minutes [INSERT: Count=986797, Max=49471, Min=351, Avg=1517.84, 90=1923, 99=3351, 99.9=7743, 99.99=46463] 
2023-04-30 10:17:38:025 990 sec: 101404853 operations; 100696.7 current ops/sec; est completion in 3 minutes [INSERT: Count=1006966, Max=43743, Min=263, Avg=1487.41, 90=1904, 99=2907, 99.9=7375, 99.99=25615] 
2023-04-30 10:17:48:025 1000 sec: 102381811 operations; 97695.8 current ops/sec; est completion in 3 minutes [INSERT: Count=976949, Max=10407, Min=432, Avg=1533.17, 90=1978, 99=3515, 99.9=6863, 99.99=9127] 
2023-04-30 10:17:58:025 1010 sec: 103368092 operations; 98628.1 current ops/sec; est completion in 3 minutes [INSERT: Count=986287, Max=43551, Min=411, Avg=1518.67, 90=1935, 99=3319, 99.9=8327, 99.99=24655] 
2023-04-30 10:18:08:025 1020 sec: 104377338 operations; 100924.6 current ops/sec; est completion in 3 minutes [INSERT: Count=1009240, Max=43135, Min=400, Avg=1484.06, 90=1893, 99=2757, 99.9=7979, 99.99=25391] 
2023-04-30 10:18:18:025 1030 sec: 105358474 operations; 98113.6 current ops/sec; est completion in 3 minutes [INSERT: Count=981145, Max=101951, Min=411, Avg=1526.64, 90=1965, 99=3457, 99.9=7619, 99.99=14079] 
2023-04-30 10:18:28:025 1040 sec: 106335874 operations; 97740 current ops/sec; est completion in 3 minutes [INSERT: Count=977397, Max=40255, Min=428, Avg=1532.47, 90=1960, 99=3535, 99.9=7435, 99.99=24463] 
2023-04-30 10:18:38:025 1050 sec: 107337912 operations; 100203.8 current ops/sec; est completion in 2 minutes [INSERT: Count=1002029, Max=81151, Min=218, Avg=1494.77, 90=1901, 99=2819, 99.9=8147, 99.99=29279] 
2023-04-30 10:18:48:025 1060 sec: 108325023 operations; 98711.1 current ops/sec; est completion in 2 minutes [INSERT: Count=987113, Max=107199, Min=388, Avg=1517.39, 90=1951, 99=3357, 99.9=7439, 99.99=30271] 
2023-04-30 10:18:58:025 1070 sec: 109299509 operations; 97448.6 current ops/sec; est completion in 2 minutes [INSERT: Count=974498, Max=36863, Min=381, Avg=1537.09, 90=1973, 99=3531, 99.9=7555, 99.99=25615] 
2023-04-30 10:19:08:025 1080 sec: 110297399 operations; 99789 current ops/sec; est completion in 2 minutes [INSERT: Count=997894, Max=44127, Min=384, Avg=1500.82, 90=1912, 99=2963, 99.9=7871, 99.99=26335] 
2023-04-30 10:19:18:025 1090 sec: 111287528 operations; 99012.9 current ops/sec; est completion in 2 minutes [INSERT: Count=990115, Max=134911, Min=244, Avg=1512.89, 90=1935, 99=3307, 99.9=6903, 99.99=40575] 
2023-04-30 10:19:28:025 1100 sec: 112259125 operations; 97159.7 current ops/sec; est completion in 2 minutes [INSERT: Count=971600, Max=39007, Min=249, Avg=1541.67, 90=1982, 99=3719, 99.9=7859, 99.99=25887] 
2023-04-30 10:19:38:025 1110 sec: 113249086 operations; 98996.1 current ops/sec; est completion in 1 minute [INSERT: Count=989957, Max=93503, Min=234, Avg=1513.02, 90=1927, 99=3067, 99.9=8239, 99.99=30671] 
2023-04-30 10:19:48:025 1120 sec: 114241136 operations; 99205 current ops/sec; est completion in 1 minute [INSERT: Count=992050, Max=91711, Min=413, Avg=1509.8, 90=1930, 99=3277, 99.9=7351, 99.99=10575] 
2023-04-30 10:19:58:025 1130 sec: 115218051 operations; 97691.5 current ops/sec; est completion in 1 minute [INSERT: Count=976922, Max=38975, Min=375, Avg=1533.24, 90=1973, 99=3631, 99.9=7575, 99.99=23871] 
2023-04-30 10:20:08:025 1140 sec: 116197230 operations; 97917.9 current ops/sec; est completion in 1 minute [INSERT: Count=979170, Max=180095, Min=253, Avg=1529.71, 90=1939, 99=3217, 99.9=8623, 99.99=77567] 
2023-04-30 10:20:18:025 1150 sec: 117184023 operations; 98679.3 current ops/sec; est completion in 1 minute [INSERT: Count=986795, Max=113343, Min=330, Avg=1517.89, 90=1921, 99=3173, 99.9=7547, 99.99=66111] 
2023-04-30 10:20:28:025 1160 sec: 118163014 operations; 97899.1 current ops/sec; est completion in 1 minute [INSERT: Count=978987, Max=53343, Min=388, Avg=1530, 90=1958, 99=3559, 99.9=8847, 99.99=23839] 
2023-04-30 10:20:38:025 1170 sec: 119148781 operations; 98576.7 current ops/sec; est completion in 58 seconds [INSERT: Count=985767, Max=123391, Min=231, Avg=1519.47, 90=1945, 99=3301, 99.9=7763, 99.99=37471] 
2023-04-30 10:20:48:025 1180 sec: 120138207 operations; 98942.6 current ops/sec; est completion in 48 seconds [INSERT: Count=989433, Max=80511, Min=395, Avg=1513.83, 90=1931, 99=3231, 99.9=7311, 99.99=13887] 
2023-04-30 10:20:58:025 1190 sec: 121120063 operations; 98185.6 current ops/sec; est completion in 39 seconds [INSERT: Count=981849, Max=52319, Min=372, Avg=1525.54, 90=1957, 99=3493, 99.9=7875, 99.99=24191] 
2023-04-30 10:21:08:025 1200 sec: 122104185 operations; 98412.2 current ops/sec; est completion in 29 seconds [INSERT: Count=984129, Max=92863, Min=414, Avg=1522.02, 90=1953, 99=3327, 99.9=8231, 99.99=34079] 
2023-04-30 10:21:18:025 1210 sec: 123111221 operations; 100703.6 current ops/sec; est completion in 19 seconds [INSERT: Count=1007038, Max=145535, Min=228, Avg=1487.28, 90=1887, 99=2811, 99.9=7787, 99.99=79807] 
2023-04-30 10:21:28:026 1220 sec: 124157926 operations; 104670.5 current ops/sec; est completion in 9 second [INSERT: Count=1046710, Max=36095, Min=355, Avg=1430.86, 90=1852, 99=2281, 99.9=8231, 99.99=23135] 
2023-04-30 10:21:38:025 1230 sec: 125000000 operations; 84207.4 current ops/sec; [CLEANUP: Count=149, Max=7, Min=0, Avg=1.26, 90=2, 99=7, 99.9=7, 99.99=7] [INSERT: Count=842050, Max=125247, Min=225, Avg=1395.41, 90=1833, 99=2129, 99.9=7391, 99.99=41791] 
2023-04-30 10:21:39:554 1231 sec: 125000000 operations; 0 current ops/sec; [CLEANUP: Count=1, Max=2220031, Min=2217984, Avg=2219008, 90=2220031, 99=2220031, 99.9=2220031, 99.99=2220031] [INSERT: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1231528
[OVERALL], Throughput(ops/sec), 101499.92529605498
[TOTAL_GCS_PS_Scavenge], Count, 2742
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 12892
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0468296295333925
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 98
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.00795759414321071
[TOTAL_GCs], Count, 2744
[TOTAL_GC_TIME], Time(ms), 12990
[TOTAL_GC_TIME_%], Time(%), 1.0547872236766034
[CLEANUP], Operations, 150
[CLEANUP], AverageLatency(us), 14794.633333333333
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2220031
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 7
[INSERT], Operations, 125000000
[INSERT], AverageLatency(us), 1470.26506724
[INSERT], MinLatency(us), 189
[INSERT], MaxLatency(us), 485631
[INSERT], 95thPercentileLatency(us), 2053
[INSERT], 99thPercentileLatency(us), 3063
[INSERT], Return=OK, 125000000
