bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 150 -p recordcount=875000000 -p operationcount=999900000 -target 70000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=750000000 -p insertcount=125000000 -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 150 -p recordcount=875000000 -p operationcount=999900000 -target 70000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=750000000 -p insertcount=125000000 -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.166.69.220,44.224.14.50,44.236.216.15 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=3gbGuBn2ko0OaQX -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 150 -p recordcount=875000000 -p operationcount=999900000 -target 70000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=750000000 -p insertcount=125000000 -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-8] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
Maximum execution time specified as: 1800 secs
[Thread-8] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-04-30 10:28:40:459 0 sec: 0 operations; est completion in 0 second 
[Thread-8] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-8] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-8] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.224.14.50:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.25.70.101:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.236.216.15:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.155.229.124:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.166.69.220:9042 added
[Thread-8] INFO com.datastax.driver.core.Cluster - New Cassandra host /34.214.116.240:9042 added
[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 04c1c4a5-1f5b-4be8-8b3b-2bc1e2431452

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.155.229.124; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.224.14.50; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /34.214.116.240; Rack: us-west-2a

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.166.69.220; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.236.216.15; Rack: us-west-2c

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.25.70.101; Rack: us-west-2b

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-8] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
2023-04-30 10:28:50:442 10 sec: 647719 operations; 64771.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=40670, Max=54847, Min=550, Avg=1974.16, 90=3031, 99=5239, 99.9=17679, 99.99=26831] [INSERT: Count=585385, Max=59967, Min=469, Avg=1703.55, 90=2671, 99=4563, 99.9=17855, 99.99=49663] [READ-FAILED: Count=24434, Max=59711, Min=513, Avg=1960.97, 90=2981, 99=6507, 99.9=26095, 99.99=58079] 
2023-04-30 10:29:00:441 20 sec: 1347689 operations; 69997 current ops/sec; est completion in 4 hours 6 minutes [READ: Count=48888, Max=37023, Min=565, Avg=1976.51, 90=3029, 99=4307, 99.9=6839, 99.99=19935] [INSERT: Count=628996, Max=63935, Min=471, Avg=1679.44, 90=2635, 99=3413, 99.9=6383, 99.99=24319] [READ-FAILED: Count=21085, Max=62207, Min=526, Avg=1865.68, 90=2907, 99=3883, 99.9=6243, 99.99=20927] 
2023-04-30 10:29:10:441 30 sec: 2047677 operations; 69998.8 current ops/sec; est completion in 4 hours 3 minutes [READ: Count=50754, Max=51743, Min=574, Avg=1904.02, 90=2971, 99=4179, 99.9=6487, 99.99=20351] [INSERT: Count=630016, Max=50335, Min=471, Avg=1620.02, 90=2653, 99=3389, 99.9=6307, 99.99=20959] [READ-FAILED: Count=19021, Max=33791, Min=513, Avg=1796.92, 90=2845, 99=3777, 99.9=6211, 99.99=10455] 
2023-04-30 10:29:20:441 40 sec: 2747657 operations; 69998 current ops/sec; est completion in 4 hours 1 minute [READ: Count=51982, Max=18303, Min=572, Avg=2059.53, 90=3307, 99=4647, 99.9=6611, 99.99=8751] [INSERT: Count=630006, Max=20367, Min=473, Avg=1754.82, 90=2857, 99=3699, 99.9=6031, 99.99=8495] [READ-FAILED: Count=18090, Max=9215, Min=514, Avg=1960.04, 90=3145, 99=4271, 99.9=6591, 99.99=8439] 
2023-04-30 10:29:30:442 50 sec: 3447661 operations; 70000.4 current ops/sec; est completion in 4 hours [READ: Count=52716, Max=34911, Min=579, Avg=2119.51, 90=3283, 99=5063, 99.9=7287, 99.99=21919] [INSERT: Count=630064, Max=48671, Min=472, Avg=1798.89, 90=2801, 99=3851, 99.9=7383, 99.99=20719] [READ-FAILED: Count=17161, Max=31743, Min=529, Avg=2019.37, 90=3131, 99=4459, 99.9=7487, 99.99=16639] 
2023-04-30 10:29:40:441 60 sec: 4132934 operations; 68527.3 current ops/sec; est completion in 4 hours [READ: Count=52678, Max=29167, Min=591, Avg=2443.05, 90=3643, 99=5519, 99.9=7699, 99.99=20415] [INSERT: Count=615750, Max=42367, Min=485, Avg=2088.86, 90=3033, 99=3971, 99.9=7243, 99.99=20863] [READ-FAILED: Count=16080, Max=30367, Min=529, Avg=2342.31, 90=3491, 99=4747, 99.9=7739, 99.99=11943] 
2023-04-30 10:29:50:441 70 sec: 4780203 operations; 64726.9 current ops/sec; est completion in 4 hours 2 minutes [READ: Count=50311, Max=16783, Min=609, Avg=2646.08, 90=3805, 99=5843, 99.9=7723, 99.99=10823] [INSERT: Count=582404, Max=20303, Min=472, Avg=2281.46, 90=3263, 99=4013, 99.9=7143, 99.99=13911] [READ-FAILED: Count=14672, Max=10647, Min=573, Avg=2525.1, 90=3629, 99=4947, 99.9=7439, 99.99=8591] 
2023-04-30 10:30:00:441 80 sec: 5441236 operations; 66103.3 current ops/sec; est completion in 4 hours 3 minutes [READ: Count=51914, Max=35135, Min=571, Avg=2606.58, 90=3751, 99=5811, 99.9=8367, 99.99=23871] [INSERT: Count=595440, Max=53759, Min=485, Avg=2229.99, 90=3149, 99=4057, 99.9=7679, 99.99=24959] [READ-FAILED: Count=14276, Max=35615, Min=530, Avg=2493.61, 90=3563, 99=4971, 99.9=10063, 99.99=32111] 
2023-04-30 10:30:10:441 90 sec: 6147550 operations; 70631.4 current ops/sec; est completion in 4 hours 2 minutes [READ: Count=55820, Max=38783, Min=586, Avg=2470.23, 90=3619, 99=5703, 99.9=8199, 99.99=27855] [INSERT: Count=635710, Max=46335, Min=479, Avg=2085.42, 90=3039, 99=3901, 99.9=7347, 99.99=23999] [READ-FAILED: Count=14885, Max=30639, Min=537, Avg=2344.66, 90=3427, 99=4743, 99.9=7643, 99.99=26783] 
2023-04-30 10:30:20:441 100 sec: 6831475 operations; 68392.5 current ops/sec; est completion in 4 hours 2 minutes [READ: Count=54426, Max=15191, Min=569, Avg=2522.81, 90=3753, 99=5811, 99.9=7647, 99.99=10039] [INSERT: Count=615231, Max=19199, Min=479, Avg=2157.15, 90=3189, 99=3913, 99.9=7039, 99.99=8535] [READ-FAILED: Count=14156, Max=9167, Min=523, Avg=2406.66, 90=3591, 99=4763, 99.9=6907, 99.99=8511] 
2023-04-30 10:30:30:441 110 sec: 7501486 operations; 67001.1 current ops/sec; est completion in 4 hours 2 minutes [READ: Count=53800, Max=50335, Min=569, Avg=2575.27, 90=3779, 99=5895, 99.9=8139, 99.99=22207] [INSERT: Count=602803, Max=49823, Min=474, Avg=2201.26, 90=3219, 99=4005, 99.9=7607, 99.99=21919] [READ-FAILED: Count=13186, Max=32287, Min=539, Avg=2471.25, 90=3607, 99=5135, 99.9=7683, 99.99=28367] 
2023-04-30 10:30:40:441 120 sec: 8148836 operations; 64735 current ops/sec; est completion in 4 hours 3 minutes [READ: Count=52093, Max=89663, Min=573, Avg=2648.07, 90=3847, 99=6039, 99.9=8171, 99.99=51967] [INSERT: Count=582427, Max=107519, Min=488, Avg=2280.79, 90=3315, 99=4019, 99.9=7551, 99.99=56191] [READ-FAILED: Count=12893, Max=30751, Min=523, Avg=2533.98, 90=3665, 99=4983, 99.9=8179, 99.99=22511] 
2023-04-30 10:30:50:441 130 sec: 8780276 operations; 63144 current ops/sec; est completion in 4 hours 4 minutes [READ: Count=51099, Max=60447, Min=538, Avg=2698.7, 90=3895, 99=6019, 99.9=7927, 99.99=11199] [INSERT: Count=568076, Max=79871, Min=467, Avg=2339.73, 90=3323, 99=4015, 99.9=7103, 99.99=9439] [READ-FAILED: Count=12080, Max=56255, Min=502, Avg=2593.74, 90=3727, 99=5187, 99.9=7007, 99.99=22783] 
2023-04-30 10:31:00:441 140 sec: 9392264 operations; 61198.8 current ops/sec; est completion in 4 hours 6 minutes [READ: Count=49744, Max=39103, Min=556, Avg=2798.49, 90=3977, 99=6247, 99.9=8527, 99.99=24735] [INSERT: Count=550415, Max=37183, Min=464, Avg=2412.26, 90=3379, 99=4171, 99.9=7407, 99.99=22303] [READ-FAILED: Count=11828, Max=37439, Min=517, Avg=2684.11, 90=3785, 99=5411, 99.9=7259, 99.99=18351] 
2023-04-30 10:31:10:441 150 sec: 10032260 operations; 63999.6 current ops/sec; est completion in 4 hours 6 minutes [READ: Count=51868, Max=33279, Min=529, Avg=2708.18, 90=3861, 99=6055, 99.9=8071, 99.99=26543] [INSERT: Count=576029, Max=34431, Min=485, Avg=2304.37, 90=3247, 99=3953, 99.9=7359, 99.99=22319] [READ-FAILED: Count=11802, Max=29903, Min=539, Avg=2596.06, 90=3693, 99=5167, 99.9=7883, 99.99=29167] 
2023-04-30 10:31:20:441 160 sec: 10735448 operations; 70318.8 current ops/sec; est completion in 4 hours 5 minutes [READ: Count=57627, Max=16247, Min=554, Avg=2491.34, 90=3721, 99=5631, 99.9=7623, 99.99=12583] [INSERT: Count=633221, Max=17983, Min=485, Avg=2091.8, 90=3097, 99=3857, 99.9=6943, 99.99=11463] [READ-FAILED: Count=12808, Max=11439, Min=541, Avg=2376.73, 90=3555, 99=4923, 99.9=7183, 99.99=11415] 
2023-04-30 10:31:30:441 170 sec: 11427372 operations; 69192.4 current ops/sec; est completion in 4 hours 5 minutes [READ: Count=56874, Max=46719, Min=537, Avg=2535.25, 90=3801, 99=5871, 99.9=8271, 99.99=27455] [INSERT: Count=622494, Max=45311, Min=479, Avg=2127.97, 90=3207, 99=4005, 99.9=7639, 99.99=18847] [READ-FAILED: Count=12242, Max=18975, Min=510, Avg=2436.06, 90=3665, 99=5043, 99.9=7979, 99.99=15567] 
2023-04-30 10:31:40:441 180 sec: 12125727 operations; 69835.5 current ops/sec; est completion in 4 hours 4 minutes [READ: Count=57446, Max=188671, Min=555, Avg=2534.53, 90=3761, 99=5703, 99.9=8991, 99.99=145663] [INSERT: Count=628993, Max=192511, Min=481, Avg=2102.95, 90=3115, 99=3957, 99.9=7495, 99.99=90879] [READ-FAILED: Count=12174, Max=171519, Min=524, Avg=2454.17, 90=3599, 99=4951, 99.9=9887, 99.99=162815] 
2023-04-30 10:31:50:441 190 sec: 12754173 operations; 62844.6 current ops/sec; est completion in 4 hours 5 minutes [READ: Count=51818, Max=11775, Min=547, Avg=2782.22, 90=3953, 99=6019, 99.9=7923, 99.99=9943] [INSERT: Count=565688, Max=9823, Min=477, Avg=2343.61, 90=3279, 99=3953, 99.9=7183, 99.99=8775] [READ-FAILED: Count=10685, Max=10847, Min=525, Avg=2667.86, 90=3753, 99=5091, 99.9=7663, 99.99=9031] 
2023-04-30 10:32:00:441 200 sec: 13340496 operations; 58632.3 current ops/sec; est completion in 4 hours 6 minutes [READ: Count=48594, Max=79295, Min=582, Avg=2943.76, 90=4073, 99=6403, 99.9=8791, 99.99=30943] [INSERT: Count=527671, Max=84351, Min=492, Avg=2515.92, 90=3381, 99=4239, 99.9=7659, 99.99=27471] [READ-FAILED: Count=10039, Max=37407, Min=542, Avg=2819.74, 90=3879, 99=5439, 99.9=8127, 99.99=24543] 
2023-04-30 10:32:10:441 210 sec: 13920316 operations; 57982 current ops/sec; est completion in 4 hours 7 minutes [READ: Count=48231, Max=36383, Min=557, Avg=2994.11, 90=4123, 99=6471, 99.9=8471, 99.99=29119] [INSERT: Count=521794, Max=38623, Min=488, Avg=2542.37, 90=3425, 99=4235, 99.9=7691, 99.99=24303] [READ-FAILED: Count=9745, Max=24495, Min=558, Avg=2859.79, 90=3873, 99=5403, 99.9=7823, 99.99=19231] 
2023-04-30 10:32:20:441 220 sec: 14520229 operations; 59991.3 current ops/sec; est completion in 4 hours 8 minutes [READ: Count=49983, Max=25663, Min=576, Avg=2926.16, 90=4081, 99=6447, 99.9=8503, 99.99=14999] [INSERT: Count=540270, Max=30879, Min=504, Avg=2452.75, 90=3295, 99=4131, 99.9=7559, 99.99=15111] [READ-FAILED: Count=9714, Max=12967, Min=579, Avg=2782.16, 90=3793, 99=5435, 99.9=7663, 99.99=9535] 
2023-04-30 10:32:30:441 230 sec: 15123489 operations; 60326 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=50727, Max=34367, Min=658, Avg=2917.04, 90=4087, 99=6407, 99.9=9503, 99.99=25663] [INSERT: Count=542789, Max=34911, Min=517, Avg=2438.91, 90=3329, 99=4195, 99.9=7935, 99.99=21247] [READ-FAILED: Count=9883, Max=24511, Min=522, Avg=2769.1, 90=3831, 99=5403, 99.9=8871, 99.99=20127] 
2023-04-30 10:32:40:441 240 sec: 15718027 operations; 59453.8 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=50252, Max=122431, Min=564, Avg=2946.05, 90=4119, 99=6463, 99.9=10255, 99.99=90239] [INSERT: Count=534812, Max=140927, Min=501, Avg=2475.39, 90=3405, 99=4303, 99.9=8343, 99.99=76223] [READ-FAILED: Count=9437, Max=26159, Min=569, Avg=2798.49, 90=3885, 99=5491, 99.9=7531, 99.99=25039] 
2023-04-30 10:32:50:441 250 sec: 16372572 operations; 65454.5 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=55414, Max=43999, Min=555, Avg=2689.13, 90=3907, 99=6055, 99.9=8439, 99.99=11711] [INSERT: Count=588802, Max=46271, Min=480, Avg=2246.78, 90=3205, 99=4025, 99.9=7575, 99.99=9847] [READ-FAILED: Count=10422, Max=10655, Min=591, Avg=2564.4, 90=3713, 99=5195, 99.9=8023, 99.99=10063] 
2023-04-30 10:33:00:441 260 sec: 16991279 operations; 61870.7 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=52264, Max=30495, Min=606, Avg=2819.78, 90=3977, 99=6167, 99.9=8199, 99.99=27231] [INSERT: Count=556474, Max=31119, Min=524, Avg=2380.61, 90=3301, 99=4007, 99.9=7435, 99.99=23231] [READ-FAILED: Count=9805, Max=25231, Min=617, Avg=2703.63, 90=3773, 99=5247, 99.9=8043, 99.99=22767] 
2023-04-30 10:33:10:441 270 sec: 17603946 operations; 61266.7 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=52078, Max=48959, Min=582, Avg=2821.03, 90=3973, 99=6135, 99.9=8159, 99.99=34303] [INSERT: Count=551230, Max=66815, Min=485, Avg=2406.41, 90=3359, 99=4111, 99.9=7243, 99.99=28959] [READ-FAILED: Count=9434, Max=40063, Min=556, Avg=2701.32, 90=3779, 99=5335, 99.9=7859, 99.99=39263] 
2023-04-30 10:33:20:441 280 sec: 18220052 operations; 61610.6 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=52660, Max=63007, Min=590, Avg=2814.4, 90=3975, 99=6143, 99.9=8295, 99.99=17695] [INSERT: Count=553890, Max=67647, Min=495, Avg=2391.79, 90=3351, 99=3967, 99.9=7743, 99.99=16511] [READ-FAILED: Count=9478, Max=10175, Min=602, Avg=2693.78, 90=3809, 99=5043, 99.9=7595, 99.99=9607] 
2023-04-30 10:33:30:441 290 sec: 18851121 operations; 63106.9 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=54008, Max=26895, Min=649, Avg=2756.64, 90=3933, 99=6075, 99.9=8359, 99.99=22239] [INSERT: Count=567770, Max=38335, Min=520, Avg=2333.94, 90=3295, 99=3993, 99.9=7371, 99.99=23759] [READ-FAILED: Count=9415, Max=43807, Min=617, Avg=2628.09, 90=3725, 99=5135, 99.9=8335, 99.99=29167] 
2023-04-30 10:33:40:441 300 sec: 19543505 operations; 69238.4 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=59021, Max=110143, Min=587, Avg=2514.49, 90=3743, 99=5743, 99.9=8063, 99.99=44607] [INSERT: Count=623373, Max=116287, Min=459, Avg=2127.04, 90=3167, 99=3917, 99.9=7479, 99.99=64031] [READ-FAILED: Count=10321, Max=63903, Min=533, Avg=2395.57, 90=3579, 99=4887, 99.9=7455, 99.99=24319] 
2023-04-30 10:33:50:441 310 sec: 20238810 operations; 69530.5 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=59787, Max=109567, Min=539, Avg=2502.57, 90=3765, 99=5747, 99.9=8015, 99.99=70015] [INSERT: Count=625343, Max=103039, Min=474, Avg=2119.21, 90=3225, 99=3989, 99.9=7591, 99.99=53567] [READ-FAILED: Count=9986, Max=10799, Min=549, Avg=2377.69, 90=3627, 99=4939, 99.9=7931, 99.99=10119] 
2023-04-30 10:34:00:441 320 sec: 20940935 operations; 70212.5 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=60509, Max=64223, Min=554, Avg=2481.96, 90=3705, 99=5699, 99.9=8583, 99.99=38111] [INSERT: Count=631750, Max=66367, Min=477, Avg=2096.33, 90=3141, 99=3961, 99.9=7691, 99.99=27487] [READ-FAILED: Count=10105, Max=31439, Min=549, Avg=2373.49, 90=3545, 99=4875, 99.9=7655, 99.99=11711] 
2023-04-30 10:34:10:441 330 sec: 21589343 operations; 64840.8 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=55683, Max=48991, Min=561, Avg=2667.38, 90=3841, 99=5907, 99.9=8147, 99.99=24863] [INSERT: Count=582859, Max=48959, Min=484, Avg=2274.53, 90=3233, 99=4041, 99.9=7367, 99.99=25967] [READ-FAILED: Count=9227, Max=43295, Min=524, Avg=2559.04, 90=3651, 99=5043, 99.9=7683, 99.99=12687] 
2023-04-30 10:34:20:442 340 sec: 22200148 operations; 61074.39 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=53031, Max=61567, Min=570, Avg=2826.51, 90=3983, 99=6195, 99.9=8455, 99.99=12111] [INSERT: Count=549509, Max=62815, Min=493, Avg=2413.04, 90=3357, 99=4035, 99.9=7563, 99.99=13959] [READ-FAILED: Count=8481, Max=55135, Min=567, Avg=2708.79, 90=3795, 99=5147, 99.9=7971, 99.99=12335] 
2023-04-30 10:34:30:441 350 sec: 22820222 operations; 62013.6 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=53148, Max=46463, Min=547, Avg=2820.59, 90=3989, 99=6367, 99.9=8519, 99.99=20943] [INSERT: Count=558435, Max=45279, Min=485, Avg=2373.99, 90=3289, 99=4139, 99.9=7867, 99.99=20655] [READ-FAILED: Count=8538, Max=16895, Min=549, Avg=2704.15, 90=3767, 99=5291, 99.9=8071, 99.99=14015] 
2023-04-30 10:34:40:441 360 sec: 23467242 operations; 64702 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=55774, Max=81599, Min=559, Avg=2721.06, 90=3879, 99=6099, 99.9=8123, 99.99=33279] [INSERT: Count=582344, Max=103039, Min=496, Avg=2273.11, 90=3165, 99=3995, 99.9=7351, 99.99=30271] [READ-FAILED: Count=9021, Max=27935, Min=561, Avg=2590.92, 90=3689, 99=5159, 99.9=7479, 99.99=26511] 
2023-04-30 10:34:50:441 370 sec: 24110931 operations; 64368.9 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=55728, Max=11359, Min=581, Avg=2732.67, 90=3959, 99=6111, 99.9=7899, 99.99=9855] [INSERT: Count=579111, Max=9655, Min=483, Avg=2284.89, 90=3251, 99=4021, 99.9=6995, 99.99=8487] [READ-FAILED: Count=8731, Max=9191, Min=565, Avg=2625.73, 90=3769, 99=5303, 99.9=7639, 99.99=8471] 
2023-04-30 10:35:00:441 380 sec: 24755251 operations; 64432 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=55808, Max=52799, Min=564, Avg=2732.42, 90=3981, 99=6107, 99.9=8223, 99.99=29983] [INSERT: Count=579976, Max=42143, Min=484, Avg=2282.71, 90=3247, 99=4035, 99.9=7559, 99.99=21615] [READ-FAILED: Count=8551, Max=25983, Min=535, Avg=2608.84, 90=3745, 99=5107, 99.9=8139, 99.99=13903] 
2023-04-30 10:35:10:441 390 sec: 25427443 operations; 67219.2 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=58119, Max=66879, Min=541, Avg=2629.79, 90=3855, 99=6171, 99.9=8455, 99.99=22607] [INSERT: Count=605399, Max=72319, Min=478, Avg=2186.91, 90=3173, 99=3917, 99.9=7395, 99.99=27855] [READ-FAILED: Count=8735, Max=71231, Min=511, Avg=2505.23, 90=3639, 99=5203, 99.9=8135, 99.99=64447] 
2023-04-30 10:35:20:441 400 sec: 26066275 operations; 63883.2 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=55316, Max=60607, Min=550, Avg=2740.03, 90=3959, 99=6135, 99.9=8095, 99.99=10047] [INSERT: Count=575112, Max=65855, Min=466, Avg=2304.34, 90=3261, 99=3941, 99.9=7399, 99.99=12751] [READ-FAILED: Count=8382, Max=10719, Min=543, Avg=2622.07, 90=3757, 99=5243, 99.9=7975, 99.99=10103] 
2023-04-30 10:35:30:441 410 sec: 26653764 operations; 58748.9 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=51206, Max=32799, Min=547, Avg=2949.55, 90=4143, 99=6407, 99.9=8423, 99.99=22991] [INSERT: Count=528564, Max=32031, Min=462, Avg=2508.97, 90=3433, 99=4215, 99.9=7739, 99.99=23023] [READ-FAILED: Count=7588, Max=26319, Min=538, Avg=2835.54, 90=3929, 99=5387, 99.9=8335, 99.99=18719] 
2023-04-30 10:35:40:441 420 sec: 27246590 operations; 59282.6 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=51587, Max=110591, Min=591, Avg=2940.31, 90=4131, 99=6387, 99.9=8935, 99.99=31951] [INSERT: Count=533634, Max=149119, Min=519, Avg=2483.9, 90=3389, 99=4147, 99.9=7411, 99.99=72703] [READ-FAILED: Count=7607, Max=103295, Min=625, Avg=2813.46, 90=3889, 99=5359, 99.9=7899, 99.99=21007] 
2023-04-30 10:35:50:442 430 sec: 27875370 operations; 62878 current ops/sec; est completion in 4 hours 9 minutes [READ: Count=54901, Max=59839, Min=577, Avg=2793.51, 90=4037, 99=6215, 99.9=8059, 99.99=10047] [INSERT: Count=565929, Max=73919, Min=472, Avg=2339.82, 90=3347, 99=4111, 99.9=7247, 99.99=9527] [READ-FAILED: Count=8004, Max=10175, Min=537, Avg=2659.78, 90=3805, 99=5235, 99.9=8399, 99.99=9255] 
2023-04-30 10:36:00:441 440 sec: 28495942 operations; 62057.2 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=54468, Max=67263, Min=575, Avg=2829.68, 90=4081, 99=6303, 99.9=8311, 99.99=27711] [INSERT: Count=558571, Max=68671, Min=481, Avg=2370.59, 90=3347, 99=4127, 99.9=7787, 99.99=28767] [READ-FAILED: Count=7654, Max=58943, Min=545, Avg=2706.82, 90=3809, 99=5243, 99.9=8247, 99.99=48479] 
2023-04-30 10:36:10:441 450 sec: 29124301 operations; 62835.9 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=55716, Max=29855, Min=545, Avg=2790.04, 90=4031, 99=6387, 99.9=8567, 99.99=20415] [INSERT: Count=564826, Max=66303, Min=478, Avg=2341.45, 90=3347, 99=3973, 99.9=7775, 99.99=25311] [READ-FAILED: Count=7767, Max=27295, Min=522, Avg=2645.65, 90=3795, 99=5459, 99.9=8903, 99.99=22575] 
2023-04-30 10:36:20:441 460 sec: 29743542 operations; 61924.1 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=54253, Max=91455, Min=563, Avg=2835.45, 90=4057, 99=6483, 99.9=8439, 99.99=11279] [INSERT: Count=557281, Max=96383, Min=471, Avg=2376.45, 90=3347, 99=3957, 99.9=7431, 99.99=58527] [READ-FAILED: Count=7691, Max=87359, Min=520, Avg=2690.11, 90=3743, 99=5223, 99.9=7415, 99.99=84159] 
2023-04-30 10:36:30:441 470 sec: 30327851 operations; 58430.9 current ops/sec; est completion in 4 hours 10 minutes [READ: Count=51419, Max=53823, Min=540, Avg=2995.63, 90=4167, 99=6731, 99.9=9095, 99.99=25711] [INSERT: Count=525660, Max=41823, Min=474, Avg=2519.38, 90=3415, 99=4015, 99.9=8007, 99.99=22287] [READ-FAILED: Count=7077, Max=25599, Min=525, Avg=2844.92, 90=3853, 99=5675, 99.9=8551, 99.99=16367] 
2023-04-30 10:36:40:441 480 sec: 30886513 operations; 55866.2 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=49259, Max=100031, Min=565, Avg=3125.64, 90=4295, 99=6859, 99.9=8983, 99.99=25743] [INSERT: Count=502556, Max=120959, Min=463, Avg=2636.32, 90=3487, 99=4175, 99.9=7807, 99.99=32191] [READ-FAILED: Count=6761, Max=15647, Min=561, Avg=2960.1, 90=3929, 99=5467, 99.9=8223, 99.99=14367] 
2023-04-30 10:36:50:441 490 sec: 31423369 operations; 53685.6 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=47447, Max=12119, Min=560, Avg=3223.78, 90=4395, 99=6835, 99.9=8807, 99.99=11183] [INSERT: Count=483001, Max=47903, Min=485, Avg=2746.34, 90=3553, 99=4327, 99.9=7223, 99.99=8479] [READ-FAILED: Count=6342, Max=9823, Min=534, Avg=3050.53, 90=4051, 99=5631, 99.9=7507, 99.99=9327] 
2023-04-30 10:37:00:441 500 sec: 31957207 operations; 53383.8 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=47197, Max=32895, Min=604, Avg=3255.19, 90=4423, 99=6951, 99.9=9711, 99.99=24287] [INSERT: Count=480401, Max=38143, Min=500, Avg=2760.62, 90=3519, 99=4331, 99.9=7751, 99.99=23343] [READ-FAILED: Count=6247, Max=29487, Min=678, Avg=3070.02, 90=4043, 99=5575, 99.9=8031, 99.99=12399] 
2023-04-30 10:37:10:441 510 sec: 32477894 operations; 52068.7 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=45818, Max=94591, Min=583, Avg=3347.72, 90=4539, 99=7039, 99.9=9999, 99.99=33087] [INSERT: Count=468771, Max=89727, Min=506, Avg=2829.37, 90=3575, 99=4359, 99.9=7939, 99.99=29839] [READ-FAILED: Count=6098, Max=21743, Min=763, Avg=3156.19, 90=4075, 99=5835, 99.9=8255, 99.99=11695] 
2023-04-30 10:37:20:441 520 sec: 32996418 operations; 51852.4 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=45834, Max=73919, Min=647, Avg=3380.81, 90=4583, 99=6995, 99.9=8903, 99.99=12767] [INSERT: Count=466500, Max=95935, Min=501, Avg=2839.08, 90=3579, 99=4399, 99.9=7295, 99.99=24895] [READ-FAILED: Count=6121, Max=8799, Min=768, Avg=3185.72, 90=4131, 99=5647, 99.9=7383, 99.99=8415] 
2023-04-30 10:37:30:441 530 sec: 33531830 operations; 53541.2 current ops/sec; est completion in 4 hours 14 minutes [READ: Count=47541, Max=39455, Min=613, Avg=3293.81, 90=4495, 99=6951, 99.9=8751, 99.99=21231] [INSERT: Count=481777, Max=31231, Min=523, Avg=2746.71, 90=3541, 99=4431, 99.9=7419, 99.99=22303] [READ-FAILED: Count=6166, Max=36127, Min=743, Avg=3100.3, 90=4087, 99=5839, 99.9=8107, 99.99=28399] 
2023-04-30 10:37:40:441 540 sec: 34101512 operations; 56968.2 current ops/sec; est completion in 4 hours 14 minutes [READ: Count=50167, Max=78271, Min=624, Avg=3132.42, 90=4371, 99=6819, 99.9=9735, 99.99=58655] [INSERT: Count=513104, Max=76415, Min=514, Avg=2577.75, 90=3427, 99=4307, 99.9=7503, 99.99=34175] [READ-FAILED: Count=6565, Max=62783, Min=572, Avg=2947.35, 90=3963, 99=5751, 99.9=9607, 99.99=59583] 
2023-04-30 10:37:50:441 550 sec: 34685066 operations; 58355.4 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=51749, Max=14063, Min=626, Avg=3050.11, 90=4287, 99=6691, 99.9=8399, 99.99=10495] [INSERT: Count=525229, Max=9607, Min=512, Avg=2516.98, 90=3455, 99=4303, 99.9=6927, 99.99=8139] [READ-FAILED: Count=6541, Max=9079, Min=641, Avg=2882.18, 90=3965, 99=5431, 99.9=7091, 99.99=8455] 
2023-04-30 10:38:00:441 560 sec: 35270022 operations; 58495.6 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=52247, Max=42911, Min=652, Avg=3024.44, 90=4267, 99=6719, 99.9=9151, 99.99=28015] [INSERT: Count=526241, Max=44095, Min=530, Avg=2512.94, 90=3457, 99=4299, 99.9=7971, 99.99=24527] [READ-FAILED: Count=6476, Max=30767, Min=639, Avg=2861.92, 90=3939, 99=5543, 99.9=8903, 99.99=30671] 
2023-04-30 10:38:10:441 570 sec: 35830547 operations; 56052.5 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=49589, Max=44223, Min=577, Avg=3150.79, 90=4363, 99=6859, 99.9=9063, 99.99=26847] [INSERT: Count=504689, Max=38303, Min=486, Avg=2623.98, 90=3521, 99=4327, 99.9=7647, 99.99=23919] [READ-FAILED: Count=6198, Max=16303, Min=622, Avg=2945.33, 90=3955, 99=5627, 99.9=8047, 99.99=9783] 
2023-04-30 10:38:20:441 580 sec: 36385537 operations; 55499 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=49621, Max=83071, Min=607, Avg=3177.62, 90=4387, 99=6887, 99.9=9015, 99.99=12743] [INSERT: Count=499321, Max=85567, Min=494, Avg=2650.24, 90=3513, 99=4343, 99.9=7491, 99.99=14631] [READ-FAILED: Count=6075, Max=9055, Min=664, Avg=2954.46, 90=3935, 99=5467, 99.9=7807, 99.99=8991] 
2023-04-30 10:38:30:441 590 sec: 36969435 operations; 58389.8 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51880, Max=34879, Min=574, Avg=3014.34, 90=4239, 99=6619, 99.9=8831, 99.99=25119] [INSERT: Count=525635, Max=33631, Min=473, Avg=2519.4, 90=3469, 99=4279, 99.9=7827, 99.99=20895] [READ-FAILED: Count=6445, Max=23039, Min=620, Avg=2837.51, 90=3897, 99=5171, 99.9=8207, 99.99=14351] 
2023-04-30 10:38:40:441 600 sec: 37551540 operations; 58210.5 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=52090, Max=57471, Min=538, Avg=3010.09, 90=4231, 99=6655, 99.9=8879, 99.99=19519] [INSERT: Count=523855, Max=70591, Min=477, Avg=2528.42, 90=3469, 99=4191, 99.9=7647, 99.99=25359] [READ-FAILED: Count=6159, Max=59391, Min=520, Avg=2836.11, 90=3865, 99=5239, 99.9=7923, 99.99=9191] 
2023-04-30 10:38:50:441 610 sec: 38141478 operations; 58993.8 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=52718, Max=73279, Min=563, Avg=2985.15, 90=4235, 99=6595, 99.9=8743, 99.99=12551] [INSERT: Count=530871, Max=80447, Min=475, Avg=2493.71, 90=3441, 99=4239, 99.9=7191, 99.99=11167] [READ-FAILED: Count=6340, Max=9343, Min=563, Avg=2773.36, 90=3813, 99=5255, 99.9=7487, 99.99=8495] 
2023-04-30 10:39:00:441 620 sec: 38719555 operations; 57807.7 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51789, Max=56575, Min=559, Avg=3033.91, 90=4283, 99=6783, 99.9=9711, 99.99=28207] [INSERT: Count=520169, Max=57407, Min=475, Avg=2545.93, 90=3459, 99=4307, 99.9=7731, 99.99=24703] [READ-FAILED: Count=6180, Max=24159, Min=585, Avg=2841.71, 90=3843, 99=5415, 99.9=7815, 99.99=20943] 
2023-04-30 10:39:10:441 630 sec: 39311045 operations; 59149 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=52550, Max=112895, Min=528, Avg=2960.32, 90=4235, 99=6619, 99.9=8983, 99.99=28751] [INSERT: Count=532631, Max=119295, Min=481, Avg=2489.01, 90=3383, 99=4259, 99.9=7567, 99.99=28399] [READ-FAILED: Count=6276, Max=10271, Min=538, Avg=2775.46, 90=3859, 99=5515, 99.9=8711, 99.99=10199] 
2023-04-30 10:39:20:441 640 sec: 39889106 operations; 57806.1 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51524, Max=32255, Min=570, Avg=3029.46, 90=4307, 99=6575, 99.9=8455, 99.99=12671] [INSERT: Count=520347, Max=44703, Min=490, Avg=2547.23, 90=3417, 99=4271, 99.9=7267, 99.99=9343] [READ-FAILED: Count=6132, Max=8591, Min=542, Avg=2815.52, 90=3815, 99=5303, 99.9=7147, 99.99=7571] 
2023-04-30 10:39:30:441 650 sec: 40461205 operations; 57209.9 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51204, Max=31327, Min=628, Avg=3062.77, 90=4319, 99=6607, 99.9=9207, 99.99=25983] [INSERT: Count=514982, Max=49375, Min=504, Avg=2573.33, 90=3417, 99=4203, 99.9=7575, 99.99=23455] [READ-FAILED: Count=5846, Max=27823, Min=592, Avg=2854.02, 90=3859, 99=5303, 99.9=7363, 99.99=13175] 
2023-04-30 10:39:40:441 660 sec: 41013707 operations; 55250.2 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=49996, Max=115711, Min=736, Avg=3172.76, 90=4443, 99=6959, 99.9=10815, 99.99=82559] [INSERT: Count=496943, Max=115199, Min=609, Avg=2664.17, 90=3509, 99=4335, 99.9=7963, 99.99=60703] [READ-FAILED: Count=5613, Max=9223, Min=684, Avg=2932.46, 90=3987, 99=5415, 99.9=7399, 99.99=7571] 
2023-04-30 10:39:50:441 670 sec: 41568450 operations; 55474.3 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=49701, Max=12215, Min=608, Avg=3158.32, 90=4435, 99=6863, 99.9=8639, 99.99=11367] [INSERT: Count=499274, Max=12567, Min=499, Avg=2654.21, 90=3513, 99=4383, 99.9=7271, 99.99=8583] [READ-FAILED: Count=5657, Max=9663, Min=654, Avg=2919.91, 90=3959, 99=5367, 99.9=7595, 99.99=8575] 
2023-04-30 10:40:00:441 680 sec: 42133944 operations; 56549.4 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=51016, Max=103999, Min=629, Avg=3116.43, 90=4395, 99=6783, 99.9=9815, 99.99=48959] [INSERT: Count=508935, Max=116927, Min=483, Avg=2600.77, 90=3439, 99=4259, 99.9=7887, 99.99=32863] [READ-FAILED: Count=5792, Max=29743, Min=666, Avg=2884.54, 90=3925, 99=5231, 99.9=8071, 99.99=18079] 
2023-04-30 10:40:10:441 690 sec: 42738229 operations; 60428.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=54458, Max=65343, Min=640, Avg=2910.2, 90=4223, 99=6495, 99.9=8791, 99.99=27231] [INSERT: Count=543692, Max=89663, Min=533, Avg=2434.57, 90=3361, 99=4207, 99.9=7535, 99.99=27919] [READ-FAILED: Count=6045, Max=25327, Min=629, Avg=2722.68, 90=3789, 99=5203, 99.9=7991, 99.99=18655] 
2023-04-30 10:40:20:441 700 sec: 43335130 operations; 59690.1 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=53962, Max=49823, Min=595, Avg=2955.45, 90=4255, 99=6547, 99.9=8903, 99.99=17487] [INSERT: Count=537189, Max=48351, Min=499, Avg=2463.49, 90=3321, 99=4023, 99.9=7535, 99.99=9207] [READ-FAILED: Count=5934, Max=9567, Min=557, Avg=2755.64, 90=3805, 99=5331, 99.9=8255, 99.99=9135] 
2023-04-30 10:40:30:441 710 sec: 43932277 operations; 59714.7 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=53938, Max=38911, Min=520, Avg=2949.24, 90=4275, 99=6575, 99.9=9255, 99.99=24559] [INSERT: Count=537320, Max=39391, Min=471, Avg=2463.28, 90=3353, 99=4223, 99.9=7655, 99.99=20287] [READ-FAILED: Count=5858, Max=15895, Min=581, Avg=2747.35, 90=3841, 99=5231, 99.9=7487, 99.99=15575] 
2023-04-30 10:40:40:441 720 sec: 44518276 operations; 58599.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=53158, Max=159871, Min=562, Avg=3009.5, 90=4275, 99=6555, 99.9=9991, 99.99=111103] [INSERT: Count=527284, Max=183679, Min=480, Avg=2509.47, 90=3385, 99=4291, 99.9=8231, 99.99=117695] [READ-FAILED: Count=5560, Max=151295, Min=566, Avg=2825.74, 90=3881, 99=5315, 99.9=8863, 99.99=27583] 
2023-04-30 10:40:50:441 730 sec: 45106042 operations; 58776.6 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=52911, Max=98175, Min=649, Avg=3024.3, 90=4303, 99=6579, 99.9=8103, 99.99=11343] [INSERT: Count=528925, Max=107007, Min=514, Avg=2499.73, 90=3371, 99=4191, 99.9=7043, 99.99=9735] [READ-FAILED: Count=5697, Max=57439, Min=631, Avg=2821.29, 90=3863, 99=5179, 99.9=6879, 99.99=9231] 
2023-04-30 10:41:00:441 740 sec: 45680529 operations; 57448.7 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=52128, Max=80319, Min=589, Avg=3084.77, 90=4355, 99=6723, 99.9=8855, 99.99=28767] [INSERT: Count=516839, Max=126719, Min=489, Avg=2558.32, 90=3355, 99=4251, 99.9=8071, 99.99=34111] [READ-FAILED: Count=5522, Max=28991, Min=533, Avg=2866.69, 90=3891, 99=5443, 99.9=8623, 99.99=10927] 
2023-04-30 10:41:10:441 750 sec: 46265291 operations; 58476.2 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=52856, Max=21647, Min=563, Avg=3026.79, 90=4351, 99=6687, 99.9=8615, 99.99=13823] [INSERT: Count=526527, Max=37151, Min=472, Avg=2513.64, 90=3411, 99=4227, 99.9=7347, 99.99=21151] [READ-FAILED: Count=5442, Max=9631, Min=556, Avg=2833.54, 90=3879, 99=5359, 99.9=7763, 99.99=8999] 
2023-04-30 10:41:20:441 760 sec: 46872951 operations; 60766 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=55285, Max=54047, Min=562, Avg=2932.25, 90=4243, 99=6687, 99.9=8903, 99.99=46527] [INSERT: Count=546754, Max=73023, Min=480, Avg=2416.24, 90=3321, 99=4103, 99.9=7915, 99.99=46687] [READ-FAILED: Count=5692, Max=48447, Min=551, Avg=2724.69, 90=3807, 99=5151, 99.9=8479, 99.99=47615] 
2023-04-30 10:41:30:441 770 sec: 47481746 operations; 60879.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=55255, Max=29327, Min=537, Avg=2913.02, 90=4227, 99=6479, 99.9=8775, 99.99=19247] [INSERT: Count=547827, Max=43999, Min=483, Avg=2413.71, 90=3303, 99=4171, 99.9=7611, 99.99=21455] [READ-FAILED: Count=5690, Max=20895, Min=543, Avg=2714.19, 90=3789, 99=5343, 99.9=9503, 99.99=17711] 
2023-04-30 10:41:40:441 780 sec: 48091398 operations; 60965.2 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=55170, Max=48415, Min=574, Avg=2908.2, 90=4203, 99=6479, 99.9=8815, 99.99=14439] [INSERT: Count=549020, Max=41343, Min=486, Avg=2410.53, 90=3323, 99=4087, 99.9=7663, 99.99=20495] [READ-FAILED: Count=5489, Max=15039, Min=525, Avg=2717.09, 90=3783, 99=5299, 99.9=7783, 99.99=8407] 
2023-04-30 10:41:50:441 790 sec: 48682127 operations; 59072.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=53872, Max=11407, Min=542, Avg=2996.35, 90=4307, 99=6503, 99.9=8099, 99.99=10191] [INSERT: Count=531362, Max=10455, Min=482, Avg=2488.12, 90=3411, 99=4223, 99.9=7191, 99.99=8631] [READ-FAILED: Count=5416, Max=8455, Min=532, Avg=2794.07, 90=3871, 99=5215, 99.9=7219, 99.99=7935] 
2023-04-30 10:42:00:441 800 sec: 49265392 operations; 58326.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=52835, Max=32463, Min=579, Avg=3051.9, 90=4383, 99=6727, 99.9=8919, 99.99=23295] [INSERT: Count=525241, Max=39135, Min=482, Avg=2518.73, 90=3441, 99=4207, 99.9=7679, 99.99=21759] [READ-FAILED: Count=5311, Max=27407, Min=544, Avg=2831.66, 90=3881, 99=5191, 99.9=7555, 99.99=9983] 
2023-04-30 10:42:10:441 810 sec: 49792453 operations; 52706.1 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=47776, Max=60287, Min=586, Avg=3387.24, 90=4883, 99=7815, 99.9=24287, 99.99=48191] [INSERT: Count=474321, Max=61631, Min=508, Avg=2787.26, 90=3555, 99=4755, 99.9=22991, 99.99=39999] [READ-FAILED: Count=4676, Max=40095, Min=669, Avg=3141.4, 90=4107, 99=6075, 99.9=22591, 99.99=40095] 
2023-04-30 10:42:20:441 820 sec: 50304333 operations; 51188 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=46575, Max=20671, Min=811, Avg=3476.55, 90=5015, 99=7395, 99.9=9471, 99.99=13399] [INSERT: Count=460812, Max=19087, Min=588, Avg=2869.93, 90=3627, 99=4491, 99.9=7251, 99.99=10879] [READ-FAILED: Count=4418, Max=10559, Min=961, Avg=3233.64, 90=4203, 99=6207, 99.9=8099, 99.99=10559] 
2023-04-30 10:42:30:441 830 sec: 50841089 operations; 53675.6 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=49035, Max=33631, Min=784, Avg=3363.72, 90=4891, 99=7107, 99.9=9831, 99.99=25471] [INSERT: Count=483172, Max=38271, Min=530, Avg=2730.83, 90=3587, 99=4387, 99.9=7459, 99.99=25775] [READ-FAILED: Count=4743, Max=14607, Min=894, Avg=3100.47, 90=4219, 99=5863, 99.9=7587, 99.99=14607] 
2023-04-30 10:42:40:441 840 sec: 51440698 operations; 59960.9 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=55094, Max=29839, Min=702, Avg=3038.36, 90=4403, 99=6835, 99.9=9191, 99.99=18863] [INSERT: Count=539425, Max=32895, Min=506, Avg=2441.12, 90=3367, 99=4243, 99.9=7931, 99.99=24191] [READ-FAILED: Count=5335, Max=19871, Min=730, Avg=2813.08, 90=3865, 99=5719, 99.9=8679, 99.99=11927] 
2023-04-30 10:42:50:441 850 sec: 52070451 operations; 62975.3 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=57320, Max=95871, Min=615, Avg=2889.27, 90=4215, 99=6631, 99.9=9327, 99.99=92799] [INSERT: Count=567029, Max=95359, Min=528, Avg=2325.25, 90=3233, 99=4147, 99.9=7859, 99.99=89791] [READ-FAILED: Count=5341, Max=85503, Min=549, Avg=2693.01, 90=3781, 99=5767, 99.9=8759, 99.99=60063] 
2023-04-30 10:43:00:441 860 sec: 52736596 operations; 66614.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=60934, Max=46463, Min=641, Avg=2741.63, 90=4067, 99=6323, 99.9=8607, 99.99=26159] [INSERT: Count=599491, Max=48191, Min=514, Avg=2196.87, 90=3099, 99=3949, 99.9=7071, 99.99=21775] [READ-FAILED: Count=5763, Max=34111, Min=607, Avg=2511.45, 90=3587, 99=5203, 99.9=7067, 99.99=8479] 
2023-04-30 10:43:10:441 870 sec: 53408191 operations; 67159.5 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=61209, Max=17183, Min=621, Avg=2717.56, 90=4065, 99=6339, 99.9=8187, 99.99=10015] [INSERT: Count=604516, Max=17391, Min=510, Avg=2179.15, 90=3079, 99=3935, 99.9=6999, 99.99=8687] [READ-FAILED: Count=5777, Max=8575, Min=653, Avg=2529.89, 90=3661, 99=5299, 99.9=7023, 99.99=8335] 
2023-04-30 10:43:20:441 880 sec: 54080721 operations; 67253 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=61841, Max=48735, Min=613, Avg=2704.8, 90=4051, 99=6415, 99.9=9183, 99.99=21743] [INSERT: Count=605080, Max=30815, Min=524, Avg=2177.35, 90=3081, 99=3893, 99.9=7927, 99.99=20783] [READ-FAILED: Count=5540, Max=34367, Min=597, Avg=2506.86, 90=3609, 99=5235, 99.9=8135, 99.99=14791] 
2023-04-30 10:43:30:441 890 sec: 54644836 operations; 56411.5 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51877, Max=32527, Min=648, Avg=3163.18, 90=4663, 99=7055, 99.9=9159, 99.99=24367] [INSERT: Count=507126, Max=36383, Min=503, Avg=2603.94, 90=3481, 99=4359, 99.9=7535, 99.99=21695] [READ-FAILED: Count=4856, Max=25215, Min=628, Avg=2911.68, 90=3991, 99=5563, 99.9=8231, 99.99=25215] 
2023-04-30 10:43:40:441 900 sec: 55141325 operations; 49648.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=45643, Max=13303, Min=546, Avg=3528.64, 90=5163, 99=7203, 99.9=9079, 99.99=11639] [INSERT: Count=446706, Max=11751, Min=504, Avg=2964.82, 90=3633, 99=4447, 99.9=7343, 99.99=9023] [READ-FAILED: Count=4120, Max=10055, Min=733, Avg=3238.51, 90=4131, 99=5787, 99.9=8319, 99.99=10055] 
2023-04-30 10:43:50:441 910 sec: 55707379 operations; 56605.4 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=51833, Max=31839, Min=619, Avg=3148.86, 90=4659, 99=6995, 99.9=9791, 99.99=22719] [INSERT: Count=509945, Max=42943, Min=523, Avg=2593.73, 90=3505, 99=4347, 99.9=8043, 99.99=21983] [READ-FAILED: Count=4592, Max=24623, Min=636, Avg=2886.31, 90=3929, 99=5523, 99.9=8175, 99.99=24623] 
2023-04-30 10:44:00:441 920 sec: 56343319 operations; 63594 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=58567, Max=15223, Min=649, Avg=2856.42, 90=4279, 99=6575, 99.9=8279, 99.99=10151] [INSERT: Count=572237, Max=16447, Min=555, Avg=2302.68, 90=3253, 99=4013, 99.9=7059, 99.99=9143] [READ-FAILED: Count=5179, Max=10727, Min=629, Avg=2641.51, 90=3765, 99=5099, 99.9=7843, 99.99=8719] 
2023-04-30 10:44:10:441 930 sec: 56990928 operations; 64760.9 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=59208, Max=50751, Min=643, Avg=2804.28, 90=4179, 99=6475, 99.9=8559, 99.99=26335] [INSERT: Count=583112, Max=30447, Min=559, Avg=2261.44, 90=3195, 99=4035, 99.9=7343, 99.99=23183] [READ-FAILED: Count=5289, Max=28575, Min=627, Avg=2621.65, 90=3747, 99=5279, 99.9=7931, 99.99=9415] 
2023-04-30 10:44:20:441 940 sec: 57644924 operations; 65399.6 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=59856, Max=20191, Min=619, Avg=2774.13, 90=4123, 99=6339, 99.9=8091, 99.99=9935] [INSERT: Count=588897, Max=18751, Min=559, Avg=2239.87, 90=3207, 99=4037, 99.9=7043, 99.99=8887] [READ-FAILED: Count=5215, Max=10759, Min=614, Avg=2585.26, 90=3713, 99=5291, 99.9=7275, 99.99=9583] 
2023-04-30 10:44:30:441 950 sec: 58304676 operations; 65975.2 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=61079, Max=45279, Min=631, Avg=2751.81, 90=4069, 99=6227, 99.9=9151, 99.99=27967] [INSERT: Count=593472, Max=37183, Min=550, Avg=2219.42, 90=3135, 99=4069, 99.9=7439, 99.99=19023] [READ-FAILED: Count=5285, Max=18911, Min=628, Avg=2554.36, 90=3663, 99=5043, 99.9=7891, 99.99=14167] 
2023-04-30 10:44:40:441 960 sec: 58879236 operations; 57456 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=53077, Max=30767, Min=616, Avg=3134.03, 90=4587, 99=7023, 99.9=9087, 99.99=27231] [INSERT: Count=516676, Max=33407, Min=522, Avg=2553.54, 90=3463, 99=4283, 99.9=7299, 99.99=21455] [READ-FAILED: Count=4544, Max=9439, Min=630, Avg=2875.89, 90=3955, 99=5511, 99.9=7355, 99.99=9439] 
2023-04-30 10:44:50:441 970 sec: 59383267 operations; 50403.1 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=46563, Max=12695, Min=591, Avg=3490.36, 90=5111, 99=7155, 99.9=8967, 99.99=10799] [INSERT: Count=453368, Max=9191, Min=513, Avg=2919.04, 90=3623, 99=4435, 99.9=7015, 99.99=8239] [READ-FAILED: Count=3972, Max=8003, Min=782, Avg=3205.77, 90=4119, 99=5523, 99.9=7227, 99.99=8003] 
2023-04-30 10:45:00:441 980 sec: 59918100 operations; 53483.3 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=49122, Max=35647, Min=630, Avg=3354.57, 90=4979, 99=7319, 99.9=9543, 99.99=23135] [INSERT: Count=481855, Max=37087, Min=520, Avg=2743.96, 90=3555, 99=4435, 99.9=7659, 99.99=24431] [READ-FAILED: Count=3998, Max=13151, Min=690, Avg=3057.11, 90=4107, 99=5899, 99.9=7859, 99.99=13151] 
2023-04-30 10:45:10:441 990 sec: 60474406 operations; 55630.6 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=51261, Max=58655, Min=731, Avg=3279.12, 90=4875, 99=7263, 99.9=10031, 99.99=27551] [INSERT: Count=500708, Max=71423, Min=531, Avg=2631.5, 90=3437, 99=4291, 99.9=7475, 99.99=27439] [READ-FAILED: Count=4366, Max=36223, Min=925, Avg=3004.4, 90=3997, 99=5767, 99.9=14431, 99.99=36223] 
2023-04-30 10:45:20:441 1000 sec: 61056129 operations; 58172.3 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=53885, Max=74239, Min=632, Avg=3149.7, 90=4647, 99=6955, 99.9=8751, 99.99=13103] [INSERT: Count=523498, Max=84927, Min=501, Avg=2514.75, 90=3393, 99=4195, 99.9=7139, 99.99=11975] [READ-FAILED: Count=4347, Max=9047, Min=592, Avg=2898.5, 90=3981, 99=5655, 99.9=7947, 99.99=9047] 
2023-04-30 10:45:30:441 1010 sec: 61639349 operations; 58322 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=54104, Max=31311, Min=583, Avg=3118.68, 90=4567, 99=6843, 99.9=9751, 99.99=21839] [INSERT: Count=524765, Max=32271, Min=494, Avg=2511.02, 90=3387, 99=4319, 99.9=7903, 99.99=22047] [READ-FAILED: Count=4407, Max=9583, Min=653, Avg=2853.2, 90=3939, 99=5771, 99.9=8035, 99.99=9583] 
2023-04-30 10:45:40:441 1020 sec: 62227235 operations; 58788.6 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=53967, Max=86847, Min=606, Avg=3106.75, 90=4579, 99=6727, 99.9=8663, 99.99=61599] [INSERT: Count=529597, Max=80575, Min=555, Avg=2490.02, 90=3385, 99=4303, 99.9=6991, 99.99=8823] [READ-FAILED: Count=4322, Max=9175, Min=644, Avg=2855.7, 90=3929, 99=5463, 99.9=7727, 99.99=9175] 
2023-04-30 10:45:50:441 1030 sec: 62813005 operations; 58577 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=54449, Max=32863, Min=659, Avg=3107.72, 90=4611, 99=6883, 99.9=9151, 99.99=20863] [INSERT: Count=526819, Max=35071, Min=523, Avg=2500.25, 90=3397, 99=4175, 99.9=7287, 99.99=25375] [READ-FAILED: Count=4464, Max=8439, Min=617, Avg=2820.7, 90=3875, 99=5223, 99.9=6919, 99.99=8439] 
2023-04-30 10:46:00:441 1040 sec: 63321244 operations; 50823.9 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=47132, Max=32703, Min=676, Avg=3513.45, 90=5247, 99=7395, 99.9=10199, 99.99=26591] [INSERT: Count=457132, Max=38335, Min=542, Avg=2889.79, 90=3621, 99=4459, 99.9=7587, 99.99=23263] [READ-FAILED: Count=3816, Max=27535, Min=648, Avg=3216.51, 90=4199, 99=5731, 99.9=8967, 99.99=27535] 
2023-04-30 10:46:10:441 1050 sec: 63821545 operations; 50030.1 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=46123, Max=17919, Min=553, Avg=3560.67, 90=5303, 99=7359, 99.9=9471, 99.99=12023] [INSERT: Count=450543, Max=17903, Min=560, Avg=2937.25, 90=3607, 99=4451, 99.9=7371, 99.99=9087] [READ-FAILED: Count=3678, Max=8951, Min=665, Avg=3216.6, 90=4119, 99=5703, 99.9=7583, 99.99=8951] 
2023-04-30 10:46:20:441 1060 sec: 64346893 operations; 52534.8 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=49248, Max=32751, Min=636, Avg=3449.68, 90=5191, 99=7447, 99.9=10911, 99.99=22591] [INSERT: Count=471983, Max=38431, Min=520, Avg=2789.79, 90=3539, 99=4351, 99.9=7663, 99.99=24623] [READ-FAILED: Count=3746, Max=17951, Min=663, Avg=3105.6, 90=4099, 99=5807, 99.9=8015, 99.99=17951] 
2023-04-30 10:46:30:441 1070 sec: 64890115 operations; 54322.2 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=50362, Max=17599, Min=678, Avg=3336.79, 90=4983, 99=7227, 99.9=9783, 99.99=14703] [INSERT: Count=489378, Max=19855, Min=493, Avg=2695.47, 90=3489, 99=4315, 99.9=7483, 99.99=14951] [READ-FAILED: Count=3867, Max=9103, Min=740, Avg=3057.45, 90=4135, 99=5791, 99.9=7679, 99.99=9103] 
2023-04-30 10:46:40:441 1080 sec: 65435591 operations; 54547.6 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=50629, Max=98623, Min=684, Avg=3321.81, 90=4919, 99=7243, 99.9=11191, 99.99=38975] [INSERT: Count=491084, Max=119167, Min=500, Avg=2686.18, 90=3509, 99=4395, 99.9=7815, 99.99=44255] [READ-FAILED: Count=3888, Max=25087, Min=605, Avg=3040.56, 90=4111, 99=5843, 99.9=8487, 99.99=25087] 
2023-04-30 10:46:50:441 1090 sec: 65983006 operations; 54741.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=50631, Max=53311, Min=643, Avg=3305.5, 90=4855, 99=7055, 99.9=10415, 99.99=30559] [INSERT: Count=492866, Max=63775, Min=539, Avg=2677.53, 90=3529, 99=4391, 99.9=7695, 99.99=28271] [READ-FAILED: Count=3854, Max=24959, Min=656, Avg=3046.28, 90=4111, 99=5803, 99.9=21727, 99.99=24959] 
2023-04-30 10:47:00:441 1100 sec: 66541127 operations; 55812.1 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=51963, Max=81919, Min=654, Avg=3265.96, 90=4831, 99=7091, 99.9=9799, 99.99=30767] [INSERT: Count=502303, Max=84671, Min=540, Avg=2622.34, 90=3497, 99=4347, 99.9=7563, 99.99=19631] [READ-FAILED: Count=3949, Max=46911, Min=660, Avg=2982.41, 90=4021, 99=5691, 99.9=8091, 99.99=46911] 
2023-04-30 10:47:10:441 1110 sec: 67087930 operations; 54680.3 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=51181, Max=39423, Min=640, Avg=3295.19, 90=4875, 99=7047, 99.9=9231, 99.99=26511] [INSERT: Count=491307, Max=35615, Min=530, Avg=2683.95, 90=3491, 99=4279, 99.9=7435, 99.99=23743] [READ-FAILED: Count=3758, Max=26639, Min=655, Avg=2992.94, 90=3949, 99=5559, 99.9=8063, 99.99=26639] 
2023-04-30 10:47:20:441 1120 sec: 67602190 operations; 51426 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=47667, Max=18159, Min=626, Avg=3468.36, 90=5195, 99=7315, 99.9=9943, 99.99=14447] [INSERT: Count=463520, Max=19983, Min=494, Avg=2854.13, 90=3601, 99=4387, 99.9=7419, 99.99=13543] [READ-FAILED: Count=3489, Max=8751, Min=662, Avg=3153.69, 90=4077, 99=5635, 99.9=7915, 99.99=8751] 
2023-04-30 10:47:30:441 1130 sec: 68100306 operations; 49811.6 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=46464, Max=34143, Min=676, Avg=3570.04, 90=5351, 99=7527, 99.9=10575, 99.99=15959] [INSERT: Count=448087, Max=31567, Min=571, Avg=2949.44, 90=3623, 99=4503, 99.9=7835, 99.99=23871] [READ-FAILED: Count=3450, Max=17903, Min=913, Avg=3232.94, 90=4231, 99=5799, 99.9=8983, 99.99=17903] 
2023-04-30 10:47:40:441 1140 sec: 68633312 operations; 53300.6 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=49528, Max=47487, Min=616, Avg=3372.73, 90=5047, 99=7399, 99.9=11079, 99.99=28175] [INSERT: Count=479906, Max=40703, Min=490, Avg=2752.27, 90=3537, 99=4371, 99.9=7435, 99.99=22943] [READ-FAILED: Count=3724, Max=24415, Min=799, Avg=3041.32, 90=4073, 99=5683, 99.9=8035, 99.99=24415] 
2023-04-30 10:47:50:441 1150 sec: 69179071 operations; 54575.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=50767, Max=52959, Min=574, Avg=3320.91, 90=4987, 99=7335, 99.9=9855, 99.99=12719] [INSERT: Count=491296, Max=52095, Min=520, Avg=2685.14, 90=3489, 99=4331, 99.9=7519, 99.99=10799] [READ-FAILED: Count=3696, Max=9831, Min=806, Avg=3002.07, 90=4051, 99=5699, 99.9=7539, 99.99=9831] 
2023-04-30 10:48:00:441 1160 sec: 69712576 operations; 53350.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=49651, Max=69183, Min=682, Avg=3372.06, 90=4999, 99=7207, 99.9=9935, 99.99=35423] [INSERT: Count=480086, Max=71935, Min=532, Avg=2750.25, 90=3553, 99=4459, 99.9=7703, 99.99=29823] [READ-FAILED: Count=3560, Max=30639, Min=868, Avg=3107.49, 90=4099, 99=5767, 99.9=18319, 99.99=30639] 
2023-04-30 10:48:10:441 1170 sec: 70254390 operations; 54181.4 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=50532, Max=18287, Min=600, Avg=3312.27, 90=4911, 99=6951, 99.9=8983, 99.99=11199] [INSERT: Count=487940, Max=17663, Min=503, Avg=2706.86, 90=3521, 99=4391, 99.9=7107, 99.99=10263] [READ-FAILED: Count=3559, Max=7747, Min=580, Avg=3002.16, 90=4095, 99=5571, 99.9=6791, 99.99=7747] 
2023-04-30 10:48:20:441 1180 sec: 70824841 operations; 57045.1 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=53132, Max=34719, Min=613, Avg=3192.02, 90=4819, 99=7023, 99.9=9831, 99.99=28943] [INSERT: Count=513599, Max=34559, Min=500, Avg=2567.13, 90=3417, 99=4287, 99.9=7347, 99.99=25807] [READ-FAILED: Count=3743, Max=32671, Min=657, Avg=2888.02, 90=3927, 99=5363, 99.9=7823, 99.99=32671] 
2023-04-30 10:48:30:441 1190 sec: 71361056 operations; 53621.5 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=50161, Max=36927, Min=566, Avg=3353.17, 90=5015, 99=7107, 99.9=9751, 99.99=21599] [INSERT: Count=482413, Max=37311, Min=508, Avg=2736.04, 90=3519, 99=4395, 99.9=7579, 99.99=23711] [READ-FAILED: Count=3523, Max=12847, Min=581, Avg=3050.89, 90=4051, 99=5667, 99.9=7479, 99.99=12847] 
2023-04-30 10:48:40:441 1200 sec: 71880174 operations; 51911.8 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=48538, Max=67903, Min=603, Avg=3452.14, 90=5203, 99=7411, 99.9=9967, 99.99=33823] [INSERT: Count=467081, Max=90751, Min=502, Avg=2827.31, 90=3563, 99=4399, 99.9=7271, 99.99=41503] [READ-FAILED: Count=3439, Max=9391, Min=706, Avg=3139.69, 90=4139, 99=5783, 99.9=7879, 99.99=9391] 
2023-04-30 10:48:50:441 1210 sec: 72397559 operations; 51738.5 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=48521, Max=29583, Min=640, Avg=3482.49, 90=5231, 99=7471, 99.9=10471, 99.99=22031] [INSERT: Count=465705, Max=39199, Min=529, Avg=2833.75, 90=3587, 99=4451, 99.9=7383, 99.99=24991] [READ-FAILED: Count=3257, Max=31055, Min=563, Avg=3197.09, 90=4199, 99=5875, 99.9=9039, 99.99=31055] 
2023-04-30 10:49:00:441 1220 sec: 72935918 operations; 53835.9 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=50578, Max=17791, Min=571, Avg=3349.93, 90=5035, 99=7359, 99.9=9847, 99.99=12759] [INSERT: Count=484398, Max=16527, Min=487, Avg=2723.37, 90=3539, 99=4347, 99.9=7523, 99.99=9935] [READ-FAILED: Count=3441, Max=8327, Min=633, Avg=3021.74, 90=4065, 99=5891, 99.9=7615, 99.99=8327] 
2023-04-30 10:49:10:441 1230 sec: 73485803 operations; 54988.5 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=51690, Max=116543, Min=557, Avg=3290.37, 90=4979, 99=7183, 99.9=9879, 99.99=26927] [INSERT: Count=494866, Max=113471, Min=502, Avg=2664.92, 90=3497, 99=4351, 99.9=7707, 99.99=42911] [READ-FAILED: Count=3407, Max=15463, Min=560, Avg=2976.33, 90=4049, 99=5599, 99.9=7855, 99.99=15463] 
2023-04-30 10:49:20:441 1240 sec: 74039285 operations; 55348.2 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=51912, Max=124543, Min=623, Avg=3276.29, 90=4931, 99=7227, 99.9=9479, 99.99=13991] [INSERT: Count=498077, Max=127935, Min=511, Avg=2647.33, 90=3491, 99=4367, 99.9=7379, 99.99=17295] [READ-FAILED: Count=3413, Max=12111, Min=626, Avg=2970.33, 90=4015, 99=5639, 99.9=8115, 99.99=12111] 
2023-04-30 10:49:30:441 1250 sec: 74584202 operations; 54491.7 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=51040, Max=43807, Min=554, Avg=3313.89, 90=4971, 99=7127, 99.9=9879, 99.99=24767] [INSERT: Count=490415, Max=37055, Min=497, Avg=2690.14, 90=3531, 99=4407, 99.9=8131, 99.99=22687] [READ-FAILED: Count=3423, Max=15607, Min=591, Avg=2998.32, 90=4061, 99=5431, 99.9=7463, 99.99=15607] 
2023-04-30 10:49:40:441 1260 sec: 75131664 operations; 54746.2 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=51230, Max=36575, Min=564, Avg=3324.42, 90=5079, 99=7299, 99.9=10263, 99.99=22431] [INSERT: Count=492722, Max=36447, Min=484, Avg=2675.3, 90=3501, 99=4275, 99.9=7751, 99.99=21199] [READ-FAILED: Count=3508, Max=10599, Min=551, Avg=3009.13, 90=3987, 99=5839, 99.9=7791, 99.99=10599] 
2023-04-30 10:49:50:441 1270 sec: 75666623 operations; 53495.9 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=50260, Max=17183, Min=573, Avg=3374.04, 90=5087, 99=7179, 99.9=9503, 99.99=15415] [INSERT: Count=481546, Max=16495, Min=478, Avg=2740.16, 90=3541, 99=4327, 99.9=7215, 99.99=13679] [READ-FAILED: Count=3155, Max=8671, Min=557, Avg=3062.87, 90=4061, 99=5383, 99.9=6943, 99.99=8671] 
2023-04-30 10:50:00:441 1280 sec: 76191132 operations; 52450.9 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=49548, Max=99903, Min=569, Avg=3440.35, 90=5207, 99=7387, 99.9=10615, 99.99=33599] [INSERT: Count=471702, Max=123519, Min=487, Avg=2795.43, 90=3557, 99=4431, 99.9=7735, 99.99=73151] [READ-FAILED: Count=3222, Max=11047, Min=541, Avg=3107.47, 90=4095, 99=5899, 99.9=8799, 99.99=11047] 
2023-04-30 10:50:10:441 1290 sec: 76689464 operations; 49833.2 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=46973, Max=98047, Min=620, Avg=3620.79, 90=5431, 99=7475, 99.9=10271, 99.99=15519] [INSERT: Count=448197, Max=107583, Min=502, Avg=2942.11, 90=3617, 99=4411, 99.9=7347, 99.99=41215] [READ-FAILED: Count=3104, Max=9367, Min=564, Avg=3256.48, 90=4219, 99=5939, 99.9=8383, 99.99=9367] 
2023-04-30 10:50:20:441 1300 sec: 77202260 operations; 51279.6 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=48177, Max=73855, Min=619, Avg=3520.39, 90=5287, 99=7339, 99.9=10463, 99.99=36063] [INSERT: Count=461657, Max=81343, Min=477, Avg=2859.12, 90=3571, 99=4399, 99.9=7875, 99.99=32495] [READ-FAILED: Count=2985, Max=33439, Min=604, Avg=3189.07, 90=4203, 99=5795, 99.9=9015, 99.99=33439] 
2023-04-30 10:50:30:441 1310 sec: 77728872 operations; 52661.2 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=49580, Max=36479, Min=577, Avg=3436.33, 90=5175, 99=7279, 99.9=10607, 99.99=18831] [INSERT: Count=474016, Max=32799, Min=485, Avg=2782.49, 90=3541, 99=4651, 99.9=8151, 99.99=23407] [READ-FAILED: Count=3117, Max=12999, Min=576, Avg=3109.11, 90=4073, 99=6015, 99.9=8447, 99.99=12999] 
2023-04-30 10:50:40:441 1320 sec: 78268882 operations; 54001 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=50677, Max=141183, Min=565, Avg=3390.7, 90=5079, 99=7363, 99.9=10471, 99.99=112383] [INSERT: Count=486130, Max=137215, Min=485, Avg=2710.04, 90=3513, 99=4323, 99.9=7859, 99.99=94335] [READ-FAILED: Count=3183, Max=33663, Min=531, Avg=3048.67, 90=4037, 99=5783, 99.9=9175, 99.99=33663] 
2023-04-30 10:50:50:441 1330 sec: 78798485 operations; 52960.3 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=49870, Max=36095, Min=573, Avg=3431.74, 90=5127, 99=7227, 99.9=9751, 99.99=16143] [INSERT: Count=476649, Max=32031, Min=485, Avg=2765.77, 90=3537, 99=4391, 99.9=7647, 99.99=22559] [READ-FAILED: Count=3056, Max=25471, Min=539, Avg=3096.94, 90=4115, 99=5715, 99.9=7859, 99.99=25471] 
2023-04-30 10:51:00:441 1340 sec: 79317722 operations; 51923.7 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=49154, Max=109567, Min=581, Avg=3494.59, 90=5243, 99=7407, 99.9=11367, 99.99=53983] [INSERT: Count=467004, Max=105535, Min=495, Avg=2821.12, 90=3563, 99=4451, 99.9=7875, 99.99=27167] [READ-FAILED: Count=3026, Max=14271, Min=573, Avg=3182.37, 90=4127, 99=5731, 99.9=9495, 99.99=14271] 
2023-04-30 10:51:10:441 1350 sec: 79871274 operations; 55355.2 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=51743, Max=110143, Min=617, Avg=3280.03, 90=4943, 99=7107, 99.9=9391, 99.99=19695] [INSERT: Count=499041, Max=116159, Min=505, Avg=2646.35, 90=3465, 99=4335, 99.9=7651, 99.99=23855] [READ-FAILED: Count=3107, Max=9007, Min=529, Avg=2929.16, 90=3935, 99=5607, 99.9=8447, 99.99=9007] 
2023-04-30 10:51:20:441 1360 sec: 80443232 operations; 57195.8 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=53687, Max=47583, Min=573, Avg=3188.9, 90=4803, 99=7131, 99.9=9783, 99.99=25055] [INSERT: Count=515023, Max=28879, Min=481, Avg=2560.1, 90=3409, 99=4239, 99.9=7563, 99.99=20991] [READ-FAILED: Count=3171, Max=9823, Min=607, Avg=2865.65, 90=3893, 99=5751, 99.9=7995, 99.99=9823] 
2023-04-30 10:51:30:441 1370 sec: 80949083 operations; 50585.1 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=47610, Max=46143, Min=547, Avg=3540.13, 90=5335, 99=7447, 99.9=10695, 99.99=30031] [INSERT: Count=455205, Max=47423, Min=480, Avg=2902.52, 90=3627, 99=4463, 99.9=7987, 99.99=25167] [READ-FAILED: Count=2874, Max=8911, Min=598, Avg=3157.17, 90=4087, 99=5519, 99.9=7615, 99.99=8911] 
2023-04-30 10:51:40:441 1380 sec: 81487460 operations; 53837.7 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=50847, Max=99903, Min=589, Avg=3327.81, 90=5103, 99=7175, 99.9=9975, 99.99=17359] [INSERT: Count=484800, Max=134911, Min=498, Avg=2724.91, 90=3567, 99=4455, 99.9=7439, 99.99=51391] [READ-FAILED: Count=2954, Max=11535, Min=606, Avg=3004.77, 90=4041, 99=5979, 99.9=9807, 99.99=11535] 
2023-04-30 10:51:50:441 1390 sec: 82059994 operations; 57253.4 current ops/sec; est completion in 4 hours 19 minutes [READ: Count=54161, Max=32287, Min=566, Avg=3161.25, 90=4811, 99=6947, 99.9=9279, 99.99=21023] [INSERT: Count=515186, Max=43711, Min=481, Avg=2558.99, 90=3493, 99=4323, 99.9=7543, 99.99=22255] [READ-FAILED: Count=3208, Max=9431, Min=576, Avg=2882.63, 90=3975, 99=5407, 99.9=8639, 99.99=9431] 
2023-04-30 10:52:00:441 1400 sec: 82644667 operations; 58467.3 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=55464, Max=15711, Min=553, Avg=3130.94, 90=4747, 99=6911, 99.9=8935, 99.99=11759] [INSERT: Count=525980, Max=29039, Min=472, Avg=2502.03, 90=3435, 99=4299, 99.9=7515, 99.99=13127] [READ-FAILED: Count=3170, Max=20431, Min=525, Avg=2848.28, 90=4011, 99=5431, 99.9=8711, 99.99=20431] 
2023-04-30 10:52:10:441 1410 sec: 83209604 operations; 56493.7 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=53507, Max=87231, Min=501, Avg=3235.21, 90=4915, 99=7223, 99.9=10591, 99.99=41247] [INSERT: Count=508410, Max=111871, Min=484, Avg=2590.55, 90=3489, 99=4471, 99.9=8051, 99.99=38847] [READ-FAILED: Count=3060, Max=26511, Min=568, Avg=2904.57, 90=3983, 99=5767, 99.9=7495, 99.99=26511] 
2023-04-30 10:52:20:441 1420 sec: 83763140 operations; 55353.6 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=51941, Max=46591, Min=607, Avg=3305.86, 90=4955, 99=7063, 99.9=9527, 99.99=22143] [INSERT: Count=498609, Max=41439, Min=496, Avg=2643.53, 90=3487, 99=4327, 99.9=7655, 99.99=23375] [READ-FAILED: Count=2914, Max=23599, Min=1021, Avg=3000.36, 90=3989, 99=5475, 99.9=9119, 99.99=23599] 
2023-04-30 10:52:30:444 1430 sec: 84389240 operations; 62591.22 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=59178, Max=17391, Min=552, Avg=2927.86, 90=4455, 99=6631, 99.9=8871, 99.99=14391] [INSERT: Count=563739, Max=17711, Min=466, Avg=2336.55, 90=3313, 99=4211, 99.9=7559, 99.99=13303] [READ-FAILED: Count=3211, Max=9975, Min=552, Avg=2655.23, 90=3745, 99=5167, 99.9=7399, 99.99=9975] 
2023-04-30 10:52:40:441 1440 sec: 84982704 operations; 59364.21 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=56369, Max=101119, Min=541, Avg=3041.53, 90=4551, 99=6839, 99.9=10519, 99.99=49791] [INSERT: Count=533864, Max=106431, Min=475, Avg=2469.53, 90=3405, 99=4171, 99.9=8311, 99.99=56351] [READ-FAILED: Count=3134, Max=80639, Min=560, Avg=2797, 90=3799, 99=5471, 99.9=27215, 99.99=80639] 
2023-04-30 10:52:50:441 1450 sec: 85518204 operations; 53550 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=50987, Max=20015, Min=585, Avg=3345.17, 90=5087, 99=7215, 99.9=9231, 99.99=12415] [INSERT: Count=481744, Max=20239, Min=492, Avg=2739.85, 90=3549, 99=4447, 99.9=7291, 99.99=15015] [READ-FAILED: Count=2812, Max=7883, Min=561, Avg=3012.08, 90=4053, 99=5467, 99.9=7415, 99.99=7883] 
2023-04-30 10:53:00:441 1460 sec: 86096304 operations; 57810 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=55349, Max=50815, Min=679, Avg=3116.45, 90=4703, 99=6943, 99.9=9407, 99.99=31167] [INSERT: Count=519699, Max=77119, Min=495, Avg=2535.19, 90=3439, 99=4207, 99.9=8027, 99.99=27583] [READ-FAILED: Count=3002, Max=16767, Min=829, Avg=2849.11, 90=3943, 99=5559, 99.9=9023, 99.99=16767] 
2023-04-30 10:53:10:441 1470 sec: 86704714 operations; 60841 current ops/sec; est completion in 4 hours 18 minutes [READ: Count=58058, Max=110975, Min=552, Avg=3010.52, 90=4563, 99=6903, 99.9=8895, 99.99=14055] [INSERT: Count=547350, Max=113215, Min=469, Avg=2403.58, 90=3343, 99=3995, 99.9=7479, 99.99=32495] [READ-FAILED: Count=3126, Max=9487, Min=561, Avg=2707.46, 90=3793, 99=5383, 99.9=7035, 99.99=9487] 
2023-04-30 10:53:20:441 1480 sec: 87363544 operations; 65883 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=62245, Max=85759, Min=550, Avg=2796.47, 90=4303, 99=6683, 99.9=9559, 99.99=35039] [INSERT: Count=593423, Max=87103, Min=482, Avg=2218.34, 90=3213, 99=3961, 99.9=8143, 99.99=28639] [READ-FAILED: Count=3277, Max=9447, Min=536, Avg=2497.24, 90=3651, 99=5207, 99.9=8207, 99.99=9447] 
2023-04-30 10:53:30:441 1490 sec: 88000900 operations; 63735.6 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=60571, Max=19487, Min=559, Avg=2869.23, 90=4363, 99=6595, 99.9=8799, 99.99=14519] [INSERT: Count=573359, Max=18063, Min=481, Avg=2295.5, 90=3241, 99=4055, 99.9=7203, 99.99=14199] [READ-FAILED: Count=3245, Max=13767, Min=568, Avg=2627.61, 90=3739, 99=5527, 99.9=8431, 99.99=13767] 
2023-04-30 10:53:40:441 1500 sec: 88610195 operations; 60929.5 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=57896, Max=41919, Min=623, Avg=3025.88, 90=4535, 99=6839, 99.9=9039, 99.99=22479] [INSERT: Count=548540, Max=54239, Min=505, Avg=2398.59, 90=3311, 99=4219, 99.9=7819, 99.99=26447] [READ-FAILED: Count=2987, Max=24495, Min=639, Avg=2738.58, 90=3855, 99=5779, 99.9=7939, 99.99=24495] 
2023-04-30 10:53:50:441 1510 sec: 89202121 operations; 59192.6 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=56156, Max=87039, Min=560, Avg=3114.6, 90=4731, 99=6971, 99.9=8871, 99.99=11575] [INSERT: Count=532558, Max=110079, Min=484, Avg=2469.56, 90=3379, 99=4179, 99.9=7231, 99.99=18415] [READ-FAILED: Count=2978, Max=8655, Min=615, Avg=2805.59, 90=3891, 99=5319, 99.9=7603, 99.99=8655] 
2023-04-30 10:54:00:441 1520 sec: 89698628 operations; 49650.7 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=47383, Max=50847, Min=614, Avg=3649.29, 90=5535, 99=7451, 99.9=10647, 99.99=25647] [INSERT: Count=446522, Max=52159, Min=482, Avg=2951.79, 90=3639, 99=4479, 99.9=7431, 99.99=26031] [READ-FAILED: Count=2415, Max=24911, Min=592, Avg=3259.77, 90=4163, 99=5795, 99.9=7747, 99.99=24911] 
2023-04-30 10:54:10:441 1530 sec: 90232087 operations; 53345.9 current ops/sec; est completion in 4 hours 17 minutes [READ: Count=50552, Max=35231, Min=559, Avg=3424.87, 90=5183, 99=7103, 99.9=9399, 99.99=24207] [INSERT: Count=480404, Max=32047, Min=466, Avg=2742.74, 90=3549, 99=4339, 99.9=7327, 99.99=23903] [READ-FAILED: Count=2692, Max=15927, Min=587, Avg=3106.64, 90=4099, 99=5695, 99.9=8095, 99.99=15927] 
2023-04-30 10:54:20:441 1540 sec: 90834298 operations; 60221.1 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=57494, Max=60671, Min=570, Avg=3088.9, 90=4711, 99=6867, 99.9=8847, 99.99=14799] [INSERT: Count=542043, Max=58399, Min=479, Avg=2422.84, 90=3321, 99=4207, 99.9=7311, 99.99=14631] [READ-FAILED: Count=2884, Max=9631, Min=593, Avg=2789.97, 90=3823, 99=5575, 99.9=8103, 99.99=9631] 
2023-04-30 10:54:30:441 1550 sec: 91491104 operations; 65680.6 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=62989, Max=36159, Min=588, Avg=2860.68, 90=4411, 99=6879, 99.9=10175, 99.99=27375] [INSERT: Count=590766, Max=38239, Min=485, Avg=2218.14, 90=3151, 99=4011, 99.9=7539, 99.99=23663] [READ-FAILED: Count=3179, Max=9183, Min=567, Avg=2585.17, 90=3697, 99=5463, 99.9=7967, 99.99=9183] 
2023-04-30 10:54:40:441 1560 sec: 92186015 operations; 69491.1 current ops/sec; est completion in 4 hours 16 minutes [READ: Count=65855, Max=112511, Min=535, Avg=2667, 90=4111, 99=6495, 99.9=9071, 99.99=49183] [INSERT: Count=625948, Max=126655, Min=467, Avg=2101.06, 90=3087, 99=3927, 99.9=7327, 99.99=57439] [READ-FAILED: Count=3180, Max=8527, Min=620, Avg=2423.38, 90=3613, 99=5095, 99.9=7347, 99.99=8527] 
2023-04-30 10:54:50:441 1570 sec: 92880880 operations; 69486.5 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=66461, Max=47583, Min=563, Avg=2678.83, 90=4127, 99=6495, 99.9=9295, 99.99=30127] [INSERT: Count=625128, Max=56159, Min=484, Avg=2099.95, 90=3069, 99=3961, 99.9=7691, 99.99=23071] [READ-FAILED: Count=3192, Max=10791, Min=638, Avg=2391.99, 90=3579, 99=5167, 99.9=8711, 99.99=10791] 
2023-04-30 10:55:00:441 1580 sec: 93530424 operations; 64954.4 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=62028, Max=41407, Min=612, Avg=2865.98, 90=4387, 99=6827, 99.9=9527, 99.99=24463] [INSERT: Count=584395, Max=49119, Min=502, Avg=2247.23, 90=3221, 99=3965, 99.9=8011, 99.99=25727] [READ-FAILED: Count=2926, Max=8151, Min=687, Avg=2593.39, 90=3719, 99=5151, 99.9=7523, 99.99=8151] 
2023-04-30 10:55:10:441 1590 sec: 94063142 operations; 53271.8 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=50781, Max=91903, Min=556, Avg=3400.37, 90=5211, 99=7187, 99.9=9327, 99.99=15319] [INSERT: Count=479423, Max=113663, Min=492, Avg=2751.01, 90=3557, 99=4299, 99.9=7223, 99.99=26159] [READ-FAILED: Count=2429, Max=9055, Min=632, Avg=3091.78, 90=4075, 99=5663, 99.9=7695, 99.99=9055] 
2023-04-30 10:55:20:441 1600 sec: 94625364 operations; 56222.2 current ops/sec; est completion in 4 hours 15 minutes [READ: Count=53876, Max=33759, Min=566, Avg=3232.7, 90=4883, 99=6831, 99.9=9223, 99.99=27199] [INSERT: Count=505818, Max=44159, Min=475, Avg=2603.81, 90=3499, 99=4331, 99.9=7655, 99.99=26751] [READ-FAILED: Count=2563, Max=16183, Min=579, Avg=2914.21, 90=3967, 99=5323, 99.9=7487, 99.99=16183] 
2023-04-30 10:55:30:441 1610 sec: 95227734 operations; 60237 current ops/sec; est completion in 4 hours 14 minutes [READ: Count=57785, Max=20287, Min=558, Avg=3061.41, 90=4787, 99=6975, 99.9=9247, 99.99=15631] [INSERT: Count=542158, Max=17263, Min=468, Avg=2425.47, 90=3377, 99=4175, 99.9=7491, 99.99=13975] [READ-FAILED: Count=2652, Max=10831, Min=561, Avg=2749.3, 90=3853, 99=5555, 99.9=8671, 99.99=10831] 
2023-04-30 10:55:40:441 1620 sec: 95878547 operations; 65081.3 current ops/sec; est completion in 4 hours 14 minutes [READ: Count=62416, Max=104319, Min=557, Avg=2865.75, 90=4435, 99=6823, 99.9=9695, 99.99=56031] [INSERT: Count=585702, Max=100863, Min=461, Avg=2241.08, 90=3187, 99=3991, 99.9=7571, 99.99=51519] [READ-FAILED: Count=2868, Max=20847, Min=551, Avg=2562.03, 90=3707, 99=5259, 99.9=8099, 99.99=20847] 
2023-04-30 10:55:50:441 1630 sec: 96545791 operations; 66724.4 current ops/sec; est completion in 4 hours 14 minutes [READ: Count=63943, Max=11503, Min=553, Avg=2789.89, 90=4351, 99=6607, 99.9=8527, 99.99=9863] [INSERT: Count=600250, Max=10471, Min=458, Avg=2186.73, 90=3147, 99=3983, 99.9=6903, 99.99=8351] [READ-FAILED: Count=2833, Max=8023, Min=532, Avg=2502.47, 90=3691, 99=5059, 99.9=6503, 99.99=8023] 
2023-04-30 10:56:00:441 1640 sec: 97222647 operations; 67685.6 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=64367, Max=63039, Min=557, Avg=2746.24, 90=4235, 99=6599, 99.9=9487, 99.99=26335] [INSERT: Count=609728, Max=62943, Min=476, Avg=2156.37, 90=3135, 99=3937, 99.9=8011, 99.99=25487] [READ-FAILED: Count=2788, Max=10463, Min=566, Avg=2509.89, 90=3659, 99=5211, 99.9=8879, 99.99=10463] 
2023-04-30 10:56:10:441 1650 sec: 97838865 operations; 61621.8 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=58760, Max=36063, Min=593, Avg=3008.69, 90=4587, 99=6823, 99.9=8967, 99.99=29663] [INSERT: Count=554610, Max=39007, Min=499, Avg=2370.72, 90=3315, 99=4139, 99.9=7471, 99.99=23583] [READ-FAILED: Count=2552, Max=9055, Min=606, Avg=2726.81, 90=3827, 99=5551, 99.9=8799, 99.99=9055] 
2023-04-30 10:56:20:441 1660 sec: 98333934 operations; 49506.9 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=47320, Max=61055, Min=614, Avg=3643.75, 90=5511, 99=7427, 99.9=10071, 99.99=26031] [INSERT: Count=445521, Max=83583, Min=486, Avg=2961.59, 90=3659, 99=4511, 99.9=7967, 99.99=20623] [READ-FAILED: Count=2046, Max=12447, Min=674, Avg=3270.86, 90=4179, 99=5843, 99.9=8767, 99.99=12447] 
2023-04-30 10:56:30:441 1670 sec: 98857713 operations; 52377.9 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=50098, Max=33183, Min=541, Avg=3488.96, 90=5311, 99=7295, 99.9=11447, 99.99=21967] [INSERT: Count=471736, Max=32639, Min=488, Avg=2792.61, 90=3551, 99=4487, 99.9=9143, 99.99=24623] [READ-FAILED: Count=2151, Max=11183, Min=788, Avg=3129.49, 90=4087, 99=5703, 99.9=8527, 99.99=11183] 
2023-04-30 10:56:40:441 1680 sec: 99441325 operations; 58361.2 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=56252, Max=134911, Min=553, Avg=3170.04, 90=4863, 99=7147, 99.9=10215, 99.99=31967] [INSERT: Count=525112, Max=133631, Min=478, Avg=2502.59, 90=3371, 99=3983, 99.9=8039, 99.99=56319] [READ-FAILED: Count=2454, Max=8495, Min=553, Avg=2812.34, 90=3853, 99=5255, 99.9=7671, 99.99=8495] 
2023-04-30 10:56:50:441 1690 sec: 100034112 operations; 59278.7 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=56832, Max=13455, Min=527, Avg=3120.81, 90=4787, 99=6947, 99.9=9231, 99.99=11879] [INSERT: Count=533522, Max=23375, Min=467, Avg=2463.74, 90=3359, 99=3957, 99.9=7455, 99.99=9007] [READ-FAILED: Count=2427, Max=8655, Min=581, Avg=2799.13, 90=3841, 99=5431, 99.9=7803, 99.99=8655] 
2023-04-30 10:57:00:441 1700 sec: 100657003 operations; 62289.1 current ops/sec; est completion in 4 hours 13 minutes [READ: Count=59788, Max=73919, Min=565, Avg=2999.4, 90=4563, 99=6775, 99.9=9247, 99.99=28799] [INSERT: Count=560744, Max=94335, Min=473, Avg=2341.38, 90=3307, 99=3993, 99.9=7635, 99.99=28335] [READ-FAILED: Count=2476, Max=22991, Min=551, Avg=2688.87, 90=3765, 99=5243, 99.9=7199, 99.99=22991] 
2023-04-30 10:57:10:441 1710 sec: 101297706 operations; 64070.3 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=61406, Max=137983, Min=565, Avg=2896.48, 90=4363, 99=6515, 99.9=8575, 99.99=19615] [INSERT: Count=576779, Max=132735, Min=478, Avg=2277.85, 90=3283, 99=3963, 99.9=7167, 99.99=55199] [READ-FAILED: Count=2546, Max=122431, Min=524, Avg=2725.66, 90=3749, 99=5347, 99.9=7731, 99.99=122431] 
2023-04-30 10:57:20:441 1720 sec: 101938670 operations; 64096.4 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=61385, Max=76415, Min=561, Avg=2893.16, 90=4367, 99=6535, 99.9=9079, 99.99=28623] [INSERT: Count=577046, Max=89727, Min=472, Avg=2278, 90=3271, 99=3941, 99.9=7803, 99.99=28079] [READ-FAILED: Count=2462, Max=40223, Min=546, Avg=2686.23, 90=3763, 99=5351, 99.9=25215, 99.99=40223] 
2023-04-30 10:57:30:441 1730 sec: 102491616 operations; 55294.6 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=52812, Max=32159, Min=587, Avg=3350.66, 90=5155, 99=7243, 99.9=10391, 99.99=16495] [INSERT: Count=497638, Max=45503, Min=481, Avg=2642.69, 90=3501, 99=4367, 99.9=7575, 99.99=15351] [READ-FAILED: Count=2217, Max=8399, Min=674, Avg=2976.75, 90=4025, 99=5671, 99.9=7879, 99.99=8399] 
2023-04-30 10:57:40:441 1740 sec: 103020834 operations; 52921.8 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=50718, Max=121343, Min=536, Avg=3478.18, 90=5327, 99=7395, 99.9=10119, 99.99=98239] [INSERT: Count=476548, Max=124479, Min=484, Avg=2761.88, 90=3573, 99=4419, 99.9=7623, 99.99=42527] [READ-FAILED: Count=1920, Max=121983, Min=650, Avg=3182, 90=4119, 99=5523, 99.9=32799, 99.99=121983] 
2023-04-30 10:57:50:441 1750 sec: 103569697 operations; 54886.3 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=52871, Max=37407, Min=550, Avg=3354.74, 90=5239, 99=7315, 99.9=9543, 99.99=28623] [INSERT: Count=493888, Max=44031, Min=476, Avg=2662.97, 90=3499, 99=4247, 99.9=7375, 99.99=22671] [READ-FAILED: Count=2088, Max=34751, Min=605, Avg=3011.33, 90=3985, 99=5703, 99.9=8343, 99.99=34751] 
2023-04-30 10:58:00:441 1760 sec: 104117050 operations; 54735.3 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=52539, Max=36671, Min=551, Avg=3382.14, 90=5231, 99=7407, 99.9=11135, 99.99=34527] [INSERT: Count=492854, Max=34687, Min=475, Avg=2668.57, 90=3469, 99=4159, 99.9=7399, 99.99=32559] [READ-FAILED: Count=2045, Max=9255, Min=539, Avg=3027.64, 90=4041, 99=5807, 99.9=8743, 99.99=9255] 
2023-04-30 10:58:10:441 1770 sec: 104692172 operations; 57512.2 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=55368, Max=165887, Min=582, Avg=3244.51, 90=4951, 99=7255, 99.9=10847, 99.99=36511] [INSERT: Count=517772, Max=159231, Min=484, Avg=2535.88, 90=3435, 99=4191, 99.9=8023, 99.99=65727] [READ-FAILED: Count=2113, Max=40607, Min=631, Avg=2920.16, 90=3997, 99=6091, 99.9=8887, 99.99=40607] 
2023-04-30 10:58:20:441 1780 sec: 105307393 operations; 61522.1 current ops/sec; est completion in 4 hours 12 minutes [READ: Count=59368, Max=169983, Min=561, Avg=3028.93, 90=4559, 99=6775, 99.9=9343, 99.99=68031] [INSERT: Count=553557, Max=174847, Min=474, Avg=2371.2, 90=3377, 99=4017, 99.9=7951, 99.99=69503] [READ-FAILED: Count=2283, Max=8943, Min=524, Avg=2753.34, 90=3831, 99=5727, 99.9=8127, 99.99=8943] 
2023-04-30 10:58:30:441 1790 sec: 105946715 operations; 63932.2 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=61624, Max=40735, Min=555, Avg=2922.79, 90=4463, 99=6699, 99.9=9191, 99.99=21871] [INSERT: Count=575541, Max=38015, Min=469, Avg=2280.92, 90=3303, 99=3979, 99.9=7823, 99.99=23343] [READ-FAILED: Count=2201, Max=18223, Min=594, Avg=2650.03, 90=3743, 99=5419, 99.9=8863, 99.99=18223] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-04-30 10:58:40:441 1800 sec: 106635393 operations; 68867.8 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=66047, Max=86271, Min=561, Avg=2721.49, 90=4175, 99=6411, 99.9=8943, 99.99=29935] [INSERT: Count=620018, Max=84863, Min=453, Avg=2116.52, 90=3157, 99=3839, 99.9=7471, 99.99=24655] [READ-FAILED: Count=2505, Max=7623, Min=533, Avg=2408.93, 90=3539, 99=4979, 99.9=6407, 99.99=7623] 
Still waiting for thread Thread-65 to complete. Workload status: true
2023-04-30 10:58:42:683 1802 sec: 106636635 operations; 553.97 current ops/sec; est completion in 4 hours 11 minutes [READ: Count=118, Max=5075, Min=976, Avg=2697.6, 90=3739, 99=5023, 99.9=5075, 99.99=5075] [CLEANUP: Count=150, Max=2222079, Min=0, Avg=14808.43, 90=2, 99=14, 99.9=2222079, 99.99=2222079] [INSERT: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] [READ-FAILED: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802241
[OVERALL], Throughput(ops/sec), 59168.90970741427
[TOTAL_GCS_PS_Scavenge], Count, 5602
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18582
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0310496764861081
[TOTAL_GCS_PS_MarkSweep], Count, 4
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 126
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.00699129583668333
[TOTAL_GCs], Count, 5606
[TOTAL_GC_TIME], Time(ms), 18708
[TOTAL_GC_TIME_%], Time(%), 1.0380409723227915
[READ], Operations, 9591177
[READ], AverageLatency(us), 3019.003422311985
[READ], MinLatency(us), 501
[READ], MaxLatency(us), 188671
[READ], 95thPercentileLatency(us), 5403
[READ], 99thPercentileLatency(us), 6847
[READ], Return=OK, 9591177
[READ], Return=NOT_FOUND, 1075984
[CLEANUP], Operations, 150
[CLEANUP], AverageLatency(us), 14808.426666666666
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 5
[CLEANUP], 99thPercentileLatency(us), 14
[INSERT], Operations, 95969474
[INSERT], AverageLatency(us), 2463.300064153733
[INSERT], MinLatency(us), 453
[INSERT], MaxLatency(us), 192511
[INSERT], 95thPercentileLatency(us), 3629
[INSERT], 99thPercentileLatency(us), 4219
[INSERT], Return=OK, 95969474
[READ-FAILED], Operations, 1075984
[READ-FAILED], AverageLatency(us), 2677.2457406429835
[READ-FAILED], MinLatency(us), 502
[READ-FAILED], MaxLatency(us), 171519
[READ-FAILED], 95thPercentileLatency(us), 4203
[READ-FAILED], 99thPercentileLatency(us), 5363
