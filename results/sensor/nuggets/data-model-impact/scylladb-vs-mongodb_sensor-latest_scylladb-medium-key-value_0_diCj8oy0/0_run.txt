bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-50] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-50] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-13 22:39:25:465 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-50] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-50] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.232.245.6:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.38.243.239:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.82.114.114:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.27.158.249:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.202.37:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.25.243.215:9042 added
[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: ee765acc-598b-4d48-8eab-9235d20597b4

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.27.158.249; Rack: us-west-2c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.232.245.6; Rack: us-west-2b

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.202.37; Rack: us-west-2a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.25.243.215; Rack: us-west-2b

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.38.243.239; Rack: us-west-2a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.82.114.114; Rack: us-west-2c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
2023-03-13 22:39:35:448 10 sec: 1367492 operations; 136749.2 current ops/sec; est completion in 2 hours 1 minute [READ: Count=137213, Max=370175, Min=549, Avg=2999, 90=3805, 99=22463, 99.9=134399, 99.99=279807] [INSERT: Count=1234557, Max=414463, Min=451, Avg=2675.63, 90=3469, 99=21535, 99.9=131455, 99.99=281343] 
2023-03-13 22:39:45:447 20 sec: 3488816 operations; 212132.4 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=212693, Max=47135, Min=524, Avg=2185.59, 90=3285, 99=8187, 99.9=17295, 99.99=24895] [INSERT: Count=1906776, Max=43263, Min=453, Avg=1849.36, 90=2867, 99=7507, 99.9=17007, 99.99=24767] 
2023-03-13 22:39:55:447 30 sec: 5579435 operations; 209061.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=208431, Max=49023, Min=548, Avg=2225.2, 90=3425, 99=7151, 99.9=17407, 99.99=27263] [INSERT: Count=1880417, Max=45311, Min=465, Avg=1876.41, 90=3017, 99=6563, 99.9=16175, 99.99=25759] 
2023-03-13 22:40:05:447 40 sec: 7595539 operations; 201610.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=200917, Max=39167, Min=557, Avg=2320.64, 90=3609, 99=6571, 99.9=16543, 99.99=38015] [INSERT: Count=1815095, Max=43647, Min=464, Avg=1944.47, 90=3153, 99=5791, 99.9=14983, 99.99=37311] 
2023-03-13 22:40:15:447 50 sec: 9656010 operations; 206047.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=205754, Max=46239, Min=555, Avg=2287.69, 90=3473, 99=7003, 99.9=15735, 99.99=30879] [INSERT: Count=1854821, Max=54399, Min=452, Avg=1900.65, 90=2939, 99=6395, 99.9=14895, 99.99=29791] 
2023-03-13 22:40:25:447 60 sec: 11694500 operations; 203849 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=204291, Max=49855, Min=537, Avg=2332.68, 90=3519, 99=6671, 99.9=14559, 99.99=27647] [INSERT: Count=1834267, Max=53055, Min=469, Avg=1918.6, 90=2917, 99=5835, 99.9=13735, 99.99=27183] 
2023-03-13 22:40:35:447 70 sec: 13755221 operations; 206072.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=206150, Max=37023, Min=547, Avg=2299.01, 90=3495, 99=6731, 99.9=16359, 99.99=28015] [INSERT: Count=1854298, Max=35967, Min=467, Avg=1899.06, 90=2923, 99=6047, 99.9=15503, 99.99=27455] 
2023-03-13 22:40:45:447 80 sec: 15840085 operations; 208486.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=208193, Max=36511, Min=567, Avg=2259.33, 90=3437, 99=7307, 99.9=16687, 99.99=33471] [INSERT: Count=1876992, Max=38079, Min=450, Avg=1878.5, 90=2915, 99=6619, 99.9=15903, 99.99=32607] 
2023-03-13 22:40:55:447 90 sec: 17873799 operations; 203371.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=203120, Max=41983, Min=536, Avg=2310.61, 90=3515, 99=6863, 99.9=16607, 99.99=23599] [INSERT: Count=1830419, Max=32559, Min=458, Avg=1926.51, 90=3011, 99=6155, 99.9=16207, 99.99=21103] 
2023-03-13 22:41:05:447 100 sec: 19874888 operations; 200108.9 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=200294, Max=17919, Min=541, Avg=2371.41, 90=3561, 99=5779, 99.9=11511, 99.99=15319] [INSERT: Count=1800588, Max=20239, Min=467, Avg=1955.26, 90=2971, 99=4843, 99.9=10671, 99.99=14599] 
2023-03-13 22:41:15:447 110 sec: 21793130 operations; 191824.2 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=191535, Max=42623, Min=556, Avg=2513.89, 90=3713, 99=6171, 99.9=15039, 99.99=28447] [INSERT: Count=1726353, Max=45599, Min=460, Avg=2035.42, 90=3001, 99=4691, 99.9=13623, 99.99=28063] 
2023-03-13 22:41:25:447 120 sec: 23683309 operations; 189017.9 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=189277, Max=32159, Min=541, Avg=2547.23, 90=3857, 99=6107, 99.9=14127, 99.99=27215] [INSERT: Count=1701266, Max=39967, Min=454, Avg=2066.01, 90=3173, 99=4603, 99.9=13239, 99.99=26751] 
2023-03-13 22:41:35:447 130 sec: 25567801 operations; 188449.2 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=188753, Max=27535, Min=517, Avg=2555.49, 90=3833, 99=6591, 99.9=19983, 99.99=25199] [INSERT: Count=1695628, Max=27423, Min=463, Avg=2072.17, 90=3121, 99=4823, 99.9=16799, 99.99=24319] 
2023-03-13 22:41:45:447 140 sec: 27472821 operations; 190502 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=191066, Max=122815, Min=528, Avg=2511.06, 90=3745, 99=6499, 99.9=15903, 99.99=30239] [INSERT: Count=1714052, Max=129919, Min=456, Avg=2051.62, 90=3053, 99=5019, 99.9=14943, 99.99=34047] 
2023-03-13 22:41:55:447 150 sec: 29433532 operations; 196071.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=196243, Max=52287, Min=530, Avg=2452.55, 90=3705, 99=6019, 99.9=15471, 99.99=23407] [INSERT: Count=1764442, Max=47839, Min=454, Avg=1991.96, 90=3029, 99=4871, 99.9=14599, 99.99=20399] 
2023-03-13 22:42:05:447 160 sec: 31429211 operations; 199567.9 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=199769, Max=24335, Min=536, Avg=2426.79, 90=3717, 99=6359, 99.9=14271, 99.99=20447] [INSERT: Count=1795877, Max=29903, Min=457, Avg=1955.11, 90=3001, 99=5331, 99.9=13391, 99.99=20143] 
2023-03-13 22:42:15:447 170 sec: 33406362 operations; 197715.1 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=198404, Max=46943, Min=535, Avg=2457.51, 90=3743, 99=6455, 99.9=18063, 99.99=27087] [INSERT: Count=1778771, Max=45375, Min=461, Avg=1972.4, 90=3009, 99=5419, 99.9=16831, 99.99=25439] 
2023-03-13 22:42:25:447 180 sec: 35346016 operations; 193965.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=193780, Max=46367, Min=550, Avg=2532.36, 90=3815, 99=6259, 99.9=15583, 99.99=23839] [INSERT: Count=1745865, Max=46975, Min=472, Avg=2007.81, 90=2979, 99=4795, 99.9=14543, 99.99=20975] 
2023-03-13 22:42:35:447 190 sec: 37256164 operations; 191014.8 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=191193, Max=36639, Min=559, Avg=2597.2, 90=3857, 99=6351, 99.9=16271, 99.99=34527] [INSERT: Count=1718949, Max=37471, Min=451, Avg=2035.87, 90=2947, 99=4635, 99.9=15079, 99.99=33663] 
2023-03-13 22:42:45:447 200 sec: 39180169 operations; 192400.5 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=191733, Max=142847, Min=576, Avg=2561.05, 90=3829, 99=6479, 99.9=16783, 99.99=93055] [INSERT: Count=1732324, Max=163327, Min=472, Avg=2023.36, 90=2943, 99=4911, 99.9=15991, 99.99=96447] 
2023-03-13 22:42:55:454 210 sec: 41085313 operations; 190381.13 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=190775, Max=48639, Min=526, Avg=2562.98, 90=3891, 99=6347, 99.9=12391, 99.99=26079] [INSERT: Count=1714222, Max=51519, Min=471, Avg=2046.39, 90=3109, 99=4691, 99.9=11567, 99.99=21135] 
2023-03-13 22:43:05:447 220 sec: 43071673 operations; 198775.14 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=198203, Max=32767, Min=567, Avg=2468.03, 90=3751, 99=6363, 99.9=16279, 99.99=29295] [INSERT: Count=1788245, Max=34751, Min=456, Avg=1960.51, 90=2929, 99=5307, 99.9=14799, 99.99=28383] 
2023-03-13 22:43:15:447 230 sec: 45045303 operations; 197363 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=196543, Max=47423, Min=544, Avg=2494.36, 90=3741, 99=6331, 99.9=15879, 99.99=27375] [INSERT: Count=1777089, Max=52063, Min=464, Avg=1972.81, 90=2899, 99=5079, 99.9=14447, 99.99=25727] 
2023-03-13 22:43:25:447 240 sec: 46965771 operations; 192046.8 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=191771, Max=41343, Min=577, Avg=2585.91, 90=3805, 99=6239, 99.9=16895, 99.99=26895] [INSERT: Count=1728688, Max=47199, Min=499, Avg=2024.76, 90=2871, 99=4527, 99.9=15775, 99.99=26495] 
2023-03-13 22:43:35:447 250 sec: 48900203 operations; 193443.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=193573, Max=18143, Min=600, Avg=2566.21, 90=3815, 99=6207, 99.9=11631, 99.99=14295] [INSERT: Count=1740855, Max=17807, Min=483, Avg=2010.08, 90=2899, 99=4495, 99.9=10807, 99.99=13415] 
2023-03-13 22:43:45:447 260 sec: 50804083 operations; 190388 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=190644, Max=125631, Min=564, Avg=2590.46, 90=3799, 99=6115, 99.9=13479, 99.99=91007] [INSERT: Count=1713242, Max=123775, Min=473, Avg=2044.26, 90=2921, 99=4363, 99.9=13183, 99.99=86207] 
2023-03-13 22:43:55:447 270 sec: 52647788 operations; 184370.5 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=184580, Max=47999, Min=589, Avg=2644.43, 90=3883, 99=6119, 99.9=13431, 99.99=23599] [INSERT: Count=1659098, Max=50431, Min=469, Avg=2114.46, 90=3103, 99=4211, 99.9=12591, 99.99=21407] 
2023-03-13 22:44:05:447 280 sec: 54471349 operations; 182356.1 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=182584, Max=27487, Min=565, Avg=2697.8, 90=4037, 99=6515, 99.9=13959, 99.99=25439] [INSERT: Count=1640979, Max=27759, Min=479, Avg=2135.15, 90=3191, 99=4399, 99.9=12383, 99.99=24639] 
2023-03-13 22:44:15:447 290 sec: 56410782 operations; 193943.3 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=194010, Max=45215, Min=586, Avg=2556.97, 90=3923, 99=6439, 99.9=13015, 99.99=26063] [INSERT: Count=1745419, Max=46623, Min=488, Avg=2005.21, 90=3017, 99=4883, 99.9=11983, 99.99=23343] 
2023-03-13 22:44:25:447 300 sec: 58398018 operations; 198723.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=199043, Max=34271, Min=593, Avg=2467.27, 90=3827, 99=6387, 99.9=14287, 99.99=31839] [INSERT: Count=1788232, Max=49631, Min=495, Avg=1959.97, 90=2993, 99=5159, 99.9=13015, 99.99=31199] 
2023-03-13 22:44:35:447 310 sec: 60461709 operations; 206369.1 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=205946, Max=200447, Min=608, Avg=2341.66, 90=3511, 99=6391, 99.9=14575, 99.99=69247] [INSERT: Count=1857801, Max=197887, Min=452, Avg=1891.32, 90=2749, 99=5567, 99.9=13751, 99.99=102079] 
2023-03-13 22:44:45:447 320 sec: 62512359 operations; 205065 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=205353, Max=108927, Min=561, Avg=2356.67, 90=3493, 99=6843, 99.9=17359, 99.99=72575] [INSERT: Count=1845264, Max=110271, Min=486, Avg=1903.09, 90=2743, 99=5843, 99.9=16671, 99.99=78975] 
2023-03-13 22:44:55:447 330 sec: 64575854 operations; 206349.5 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=206515, Max=45663, Min=582, Avg=2339.28, 90=3499, 99=6635, 99.9=16095, 99.99=32335] [INSERT: Count=1856946, Max=52543, Min=486, Avg=1891.64, 90=2761, 99=5763, 99.9=15455, 99.99=31711] 
2023-03-13 22:45:05:447 340 sec: 66584715 operations; 200886.1 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=200410, Max=18831, Min=580, Avg=2402.71, 90=3591, 99=6011, 99.9=13263, 99.99=17231] [INSERT: Count=1808408, Max=19455, Min=484, Avg=1943.31, 90=2853, 99=4983, 99.9=12447, 99.99=16751] 
2023-03-13 22:45:15:447 350 sec: 68545387 operations; 196067.2 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=196338, Max=47935, Min=600, Avg=2485.58, 90=3643, 99=6091, 99.9=15151, 99.99=22479] [INSERT: Count=1764353, Max=54783, Min=489, Avg=1988.31, 90=2857, 99=4627, 99.9=14239, 99.99=20063] 
2023-03-13 22:45:25:447 360 sec: 70509406 operations; 196401.9 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=196573, Max=36159, Min=552, Avg=2471.62, 90=3689, 99=6099, 99.9=13095, 99.99=21023] [INSERT: Count=1767420, Max=52127, Min=475, Avg=1985.99, 90=2949, 99=4759, 99.9=12199, 99.99=20879] 
2023-03-13 22:45:35:447 370 sec: 72460629 operations; 195122.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=194995, Max=41119, Min=531, Avg=2471.8, 90=3903, 99=6283, 99.9=14615, 99.99=32143] [INSERT: Count=1756247, Max=44671, Min=469, Avg=2000.88, 90=3141, 99=5159, 99.9=13863, 99.99=31711] 
2023-03-13 22:45:45:447 380 sec: 74447538 operations; 198690.9 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=198785, Max=104703, Min=573, Avg=2422.13, 90=3785, 99=7015, 99.9=17375, 99.99=33055] [INSERT: Count=1788160, Max=105151, Min=481, Avg=1965.44, 90=3039, 99=5823, 99.9=16847, 99.99=41503] 
2023-03-13 22:45:55:447 390 sec: 76394984 operations; 194744.6 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=194802, Max=32303, Min=558, Avg=2453.52, 90=3803, 99=6319, 99.9=17487, 99.99=29823] [INSERT: Count=1752733, Max=40607, Min=475, Avg=2007.32, 90=3123, 99=5155, 99.9=15031, 99.99=28911] 
2023-03-13 22:46:05:447 400 sec: 78321117 operations; 192613.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=193395, Max=33023, Min=543, Avg=2470.44, 90=3831, 99=6271, 99.9=15079, 99.99=28975] [INSERT: Count=1732868, Max=32863, Min=475, Avg=2030.45, 90=3177, 99=4995, 99.9=13567, 99.99=28351] 
2023-03-13 22:46:15:447 410 sec: 80307820 operations; 198670.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=197618, Max=45247, Min=559, Avg=2396.8, 90=3525, 99=6443, 99.9=17807, 99.99=31407] [INSERT: Count=1788883, Max=34143, Min=478, Avg=1968.78, 90=2887, 99=5403, 99.9=16415, 99.99=30287] 
2023-03-13 22:46:25:447 420 sec: 82375317 operations; 206749.7 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=205866, Max=39231, Min=552, Avg=2280.36, 90=3447, 99=7131, 99.9=15871, 99.99=25759] [INSERT: Count=1861634, Max=48863, Min=463, Avg=1894.13, 90=2909, 99=6303, 99.9=15143, 99.99=24591] 
2023-03-13 22:46:35:447 430 sec: 84427045 operations; 205172.8 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=204585, Max=83583, Min=585, Avg=2309.73, 90=3483, 99=7379, 99.9=17103, 99.99=29455] [INSERT: Count=1847373, Max=82687, Min=459, Avg=1907.37, 90=2869, 99=6503, 99.9=16215, 99.99=27791] 
2023-03-13 22:46:45:447 440 sec: 86430370 operations; 200332.5 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=199876, Max=115327, Min=580, Avg=2390.01, 90=3557, 99=6543, 99.9=18543, 99.99=32511] [INSERT: Count=1803215, Max=113407, Min=466, Avg=1950.72, 90=2885, 99=5651, 99.9=17439, 99.99=33439] 
2023-03-13 22:46:55:447 450 sec: 88468487 operations; 203811.7 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=204549, Max=44703, Min=608, Avg=2348.92, 90=3501, 99=6331, 99.9=17039, 99.99=31071] [INSERT: Count=1833552, Max=48351, Min=472, Avg=1917.31, 90=2827, 99=5543, 99.9=16399, 99.99=30015] 
2023-03-13 22:47:05:447 460 sec: 90463005 operations; 199451.8 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=199741, Max=27151, Min=535, Avg=2391.74, 90=3589, 99=6535, 99.9=15263, 99.99=23823] [INSERT: Count=1794765, Max=30127, Min=460, Avg=1960.26, 90=2945, 99=5575, 99.9=14479, 99.99=23295] 
2023-03-13 22:47:15:447 470 sec: 92495110 operations; 203210.5 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=203512, Max=110015, Min=560, Avg=2314.22, 90=3473, 99=6655, 99.9=16103, 99.99=28447] [INSERT: Count=1828588, Max=109631, Min=458, Avg=1927.63, 90=2943, 99=5959, 99.9=15407, 99.99=27087] 
2023-03-13 22:47:25:447 480 sec: 94533020 operations; 203791 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=203420, Max=114687, Min=529, Avg=2305.06, 90=3523, 99=6599, 99.9=18271, 99.99=29679] [INSERT: Count=1834515, Max=115135, Min=437, Avg=1922.55, 90=3011, 99=6031, 99.9=15751, 99.99=29727] 
2023-03-13 22:47:35:447 490 sec: 96514812 operations; 198179.2 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=198218, Max=27375, Min=557, Avg=2409.55, 90=3733, 99=6099, 99.9=15127, 99.99=24607] [INSERT: Count=1783551, Max=28623, Min=479, Avg=1972.69, 90=3037, 99=5151, 99.9=14543, 99.99=24671] 
2023-03-13 22:47:45:447 500 sec: 98492873 operations; 197806.1 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=198312, Max=42719, Min=499, Avg=2432.35, 90=3695, 99=6327, 99.9=15719, 99.99=24559] [INSERT: Count=1779716, Max=45439, Min=489, Avg=1974.2, 90=2957, 99=5187, 99.9=14791, 99.99=22735] 
2023-03-13 22:47:55:447 510 sec: 100474084 operations; 198121.1 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=198473, Max=45823, Min=565, Avg=2435.75, 90=3721, 99=6103, 99.9=14015, 99.99=26879] [INSERT: Count=1782739, Max=46623, Min=477, Avg=1970.28, 90=3021, 99=5011, 99.9=13063, 99.99=26159] 
2023-03-13 22:48:05:447 520 sec: 102435454 operations; 196137 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=196557, Max=40639, Min=520, Avg=2451.86, 90=3773, 99=6347, 99.9=17519, 99.99=32591] [INSERT: Count=1764840, Max=41279, Min=471, Avg=1991.17, 90=3085, 99=5159, 99.9=15775, 99.99=31999] 
2023-03-13 22:48:15:447 530 sec: 104480714 operations; 204526 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=204431, Max=82111, Min=520, Avg=2311.97, 90=3573, 99=6947, 99.9=17007, 99.99=24927] [INSERT: Count=1840863, Max=89663, Min=422, Avg=1913.94, 90=2921, 99=6131, 99.9=16447, 99.99=24815] 
2023-03-13 22:48:25:447 540 sec: 106511622 operations; 203090.8 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=203273, Max=44415, Min=540, Avg=2337.11, 90=3555, 99=6983, 99.9=16295, 99.99=38335] [INSERT: Count=1827567, Max=45759, Min=456, Avg=1926.2, 90=2929, 99=6115, 99.9=15319, 99.99=37599] 
2023-03-13 22:48:35:447 550 sec: 108529048 operations; 201742.6 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=202204, Max=104127, Min=545, Avg=2364.21, 90=3589, 99=6491, 99.9=16287, 99.99=21711] [INSERT: Count=1815518, Max=107007, Min=472, Avg=1938.2, 90=2939, 99=5667, 99.9=15663, 99.99=24255] 
2023-03-13 22:48:45:447 560 sec: 110494378 operations; 196533 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=197037, Max=131711, Min=511, Avg=2451.36, 90=3683, 99=6407, 99.9=16975, 99.99=34911] [INSERT: Count=1768061, Max=136703, Min=454, Avg=1986.61, 90=2969, 99=5203, 99.9=15335, 99.99=37823] 
2023-03-13 22:48:55:447 570 sec: 112500954 operations; 200657.6 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=200618, Max=49631, Min=526, Avg=2384.59, 90=3671, 99=6375, 99.9=15159, 99.99=26415] [INSERT: Count=1806181, Max=35711, Min=439, Avg=1947.74, 90=2997, 99=5315, 99.9=14471, 99.99=26159] 
2023-03-13 22:49:05:447 580 sec: 114539406 operations; 203845.2 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=204129, Max=21519, Min=535, Avg=2313.54, 90=3583, 99=6639, 99.9=14679, 99.99=18607] [INSERT: Count=1834177, Max=23119, Min=461, Avg=1920.92, 90=2999, 99=5891, 99.9=14063, 99.99=18159] 
2023-03-13 22:49:15:447 590 sec: 116563882 operations; 202447.6 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=202439, Max=83583, Min=530, Avg=2296.26, 90=3511, 99=6387, 99.9=22879, 99.99=33471] [INSERT: Count=1822146, Max=82879, Min=448, Avg=1937.95, 90=2985, 99=5623, 99.9=20431, 99.99=36287] 
2023-03-13 22:49:25:447 600 sec: 118612570 operations; 204868.8 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=204822, Max=45951, Min=546, Avg=2277.64, 90=3497, 99=6839, 99.9=15071, 99.99=22607] [INSERT: Count=1843795, Max=44351, Min=452, Avg=1914.06, 90=2975, 99=6031, 99.9=14135, 99.99=20223] 
2023-03-13 22:49:35:447 610 sec: 120606964 operations; 199439.4 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=199565, Max=32191, Min=516, Avg=2391.13, 90=3741, 99=6619, 99.9=17039, 99.99=28783] [INSERT: Count=1794837, Max=31503, Min=453, Avg=1960.55, 90=3109, 99=5607, 99.9=15663, 99.99=28191] 
2023-03-13 22:49:45:447 620 sec: 122531407 operations; 192444.3 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=193254, Max=77759, Min=555, Avg=2512.37, 90=3803, 99=6419, 99.9=18015, 99.99=47711] [INSERT: Count=1731080, Max=75327, Min=458, Avg=2027.81, 90=3043, 99=5035, 99.9=16991, 99.99=47263] 
2023-03-13 22:49:55:447 630 sec: 124450274 operations; 191886.7 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=191780, Max=43871, Min=556, Avg=2540.5, 90=3895, 99=6131, 99.9=13367, 99.99=21791] [INSERT: Count=1727324, Max=52255, Min=457, Avg=2031.73, 90=3169, 99=4531, 99.9=12295, 99.99=19759] 
2023-03-13 22:50:05:447 640 sec: 126457402 operations; 200712.8 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=200666, Max=28319, Min=551, Avg=2392.54, 90=3751, 99=6267, 99.9=15095, 99.99=24671] [INSERT: Count=1806374, Max=31359, Min=460, Avg=1946.22, 90=3071, 99=5423, 99.9=14167, 99.99=24383] 
2023-03-13 22:50:15:447 650 sec: 128483809 operations; 202640.7 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=202851, Max=45375, Min=524, Avg=2323.03, 90=3609, 99=6695, 99.9=16111, 99.99=26031] [INSERT: Count=1823462, Max=45535, Min=451, Avg=1932.78, 90=2991, 99=5887, 99.9=15711, 99.99=25279] 
2023-03-13 22:50:25:447 660 sec: 130475285 operations; 199147.6 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=199039, Max=42431, Min=544, Avg=2354.3, 90=3637, 99=6487, 99.9=16479, 99.99=25055] [INSERT: Count=1792456, Max=44383, Min=457, Avg=1967.9, 90=3095, 99=5579, 99.9=15927, 99.99=24047] 
2023-03-13 22:50:35:447 670 sec: 132484028 operations; 200874.3 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=201058, Max=31407, Min=508, Avg=2372.07, 90=3629, 99=6499, 99.9=19663, 99.99=26623] [INSERT: Count=1807576, Max=29903, Min=459, Avg=1946.72, 90=3013, 99=5655, 99.9=17647, 99.99=26639] 
2023-03-13 22:50:45:447 680 sec: 134440685 operations; 195665.7 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=195621, Max=160255, Min=574, Avg=2442.55, 90=3729, 99=6419, 99.9=13871, 99.99=93183] [INSERT: Count=1761037, Max=173823, Min=447, Avg=1997.78, 90=3033, 99=5303, 99.9=13487, 99.99=111679] 
2023-03-13 22:50:55:447 690 sec: 136439072 operations; 199838.7 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=199766, Max=60799, Min=582, Avg=2385.31, 90=3619, 99=6615, 99.9=17423, 99.99=58015] [INSERT: Count=1798657, Max=60351, Min=486, Avg=1956.72, 90=2957, 99=5607, 99.9=16159, 99.99=57471] 
2023-03-13 22:51:05:447 700 sec: 138494193 operations; 205512.1 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=205895, Max=21983, Min=530, Avg=2312.81, 90=3529, 99=6355, 99.9=14151, 99.99=18399] [INSERT: Count=1849140, Max=23119, Min=476, Avg=1903.29, 90=2885, 99=5555, 99.9=12863, 99.99=17807] 
2023-03-13 22:51:15:447 710 sec: 140530437 operations; 203624.4 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=203055, Max=98239, Min=528, Avg=2297.52, 90=3481, 99=6631, 99.9=17087, 99.99=35999] [INSERT: Count=1833243, Max=93759, Min=460, Avg=1925.25, 90=2883, 99=5975, 99.9=16167, 99.99=28831] 
2023-03-13 22:51:25:447 720 sec: 142566820 operations; 203638.3 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=203473, Max=67647, Min=550, Avg=2298.09, 90=3519, 99=6771, 99.9=17023, 99.99=28319] [INSERT: Count=1832900, Max=68671, Min=477, Avg=1924.9, 90=2953, 99=6107, 99.9=16607, 99.99=26431] 
2023-03-13 22:51:35:447 730 sec: 144612614 operations; 204579.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=204069, Max=27663, Min=557, Avg=2317.37, 90=3621, 99=6771, 99.9=16719, 99.99=25279] [INSERT: Count=1841716, Max=33183, Min=453, Avg=1912.88, 90=3015, 99=6027, 99.9=15375, 99.99=24575] 
2023-03-13 22:51:45:447 740 sec: 146602956 operations; 199034.2 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=199980, Max=74047, Min=564, Avg=2396.02, 90=3729, 99=6163, 99.9=16879, 99.99=27215] [INSERT: Count=1790516, Max=74367, Min=466, Avg=1964.34, 90=3045, 99=5175, 99.9=16047, 99.99=25695] 
2023-03-13 22:51:55:447 750 sec: 148505518 operations; 190256.2 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=190093, Max=43999, Min=530, Avg=2544.73, 90=3889, 99=6191, 99.9=11751, 99.99=22255] [INSERT: Count=1712309, Max=44223, Min=512, Avg=2051.08, 90=3067, 99=4451, 99.9=10959, 99.99=20575] 
2023-03-13 22:52:05:447 760 sec: 150489422 operations; 198390.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=198400, Max=37919, Min=537, Avg=2444.54, 90=3745, 99=6567, 99.9=15295, 99.99=34815] [INSERT: Count=1785530, Max=39231, Min=469, Avg=1966.38, 90=2971, 99=5195, 99.9=13535, 99.99=34303] 
2023-03-13 22:52:15:447 770 sec: 152527987 operations; 203856.5 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=204281, Max=54911, Min=534, Avg=2307.01, 90=3553, 99=6899, 99.9=22783, 99.99=31167] [INSERT: Count=1834289, Max=54207, Min=470, Avg=1921.49, 90=2893, 99=6155, 99.9=21919, 99.99=30447] 
2023-03-13 22:52:25:447 780 sec: 154611077 operations; 208309 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=207975, Max=128063, Min=566, Avg=2234.09, 90=3411, 99=6815, 99.9=16751, 99.99=70847] [INSERT: Count=1875170, Max=136831, Min=483, Avg=1883.12, 90=2865, 99=6195, 99.9=15919, 99.99=47871] 
2023-03-13 22:52:35:447 790 sec: 156649743 operations; 203866.6 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=203668, Max=37183, Min=584, Avg=2312.3, 90=3457, 99=7067, 99.9=17631, 99.99=34271] [INSERT: Count=1834962, Max=36799, Min=484, Avg=1920.94, 90=2887, 99=6255, 99.9=16767, 99.99=33567] 
2023-03-13 22:52:45:447 800 sec: 158700394 operations; 205065.1 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=205630, Max=104447, Min=573, Avg=2297.4, 90=3447, 99=6223, 99.9=15839, 99.99=29359] [INSERT: Count=1845004, Max=108799, Min=486, Avg=1909.71, 90=2875, 99=5611, 99.9=15639, 99.99=53663] 
2023-03-13 22:52:55:447 810 sec: 160693736 operations; 199334.2 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=199778, Max=38303, Min=635, Avg=2381.86, 90=3521, 99=5887, 99.9=16343, 99.99=35679] [INSERT: Count=1793559, Max=38815, Min=483, Avg=1962.65, 90=2921, 99=5055, 99.9=15063, 99.99=35039] 
2023-03-13 22:53:05:447 820 sec: 162721590 operations; 202785.4 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=202495, Max=18943, Min=566, Avg=2322.66, 90=3527, 99=6239, 99.9=14767, 99.99=17407] [INSERT: Count=1825261, Max=19231, Min=471, Avg=1931.42, 90=2951, 99=5455, 99.9=14191, 99.99=16783] 
2023-03-13 22:53:15:447 830 sec: 164759493 operations; 203790.3 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=204119, Max=36255, Min=558, Avg=2284.39, 90=3485, 99=6555, 99.9=15295, 99.99=25887] [INSERT: Count=1833884, Max=42943, Min=463, Avg=1924.81, 90=2957, 99=5795, 99.9=15215, 99.99=26671] 
2023-03-13 22:53:25:447 840 sec: 166802092 operations; 204259.9 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=203959, Max=51103, Min=557, Avg=2262.32, 90=3471, 99=6463, 99.9=15127, 99.99=27615] [INSERT: Count=1838638, Max=54527, Min=467, Avg=1922.27, 90=2963, 99=5859, 99.9=14383, 99.99=26015] 
2023-03-13 22:53:35:447 850 sec: 168815675 operations; 201358.3 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=200620, Max=49663, Min=541, Avg=2318.66, 90=3617, 99=6767, 99.9=16143, 99.99=20223] [INSERT: Count=1812939, Max=52063, Min=449, Avg=1947.48, 90=3123, 99=5995, 99.9=15687, 99.99=19551] 
2023-03-13 22:53:45:447 860 sec: 170792137 operations; 197646.2 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=198245, Max=104511, Min=563, Avg=2399.24, 90=3789, 99=6399, 99.9=16799, 99.99=46207] [INSERT: Count=1778206, Max=104383, Min=474, Avg=1979.72, 90=3213, 99=5463, 99.9=15831, 99.99=34079] 
2023-03-13 22:53:55:447 870 sec: 172720315 operations; 192817.8 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=192482, Max=55903, Min=580, Avg=2493.87, 90=3875, 99=6099, 99.9=12351, 99.99=29775] [INSERT: Count=1735703, Max=57727, Min=471, Avg=2025.74, 90=3193, 99=4703, 99.9=11535, 99.99=27103] 
2023-03-13 22:54:05:447 880 sec: 174751534 operations; 203121.9 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=202781, Max=29903, Min=549, Avg=2331.11, 90=3661, 99=6923, 99.9=15631, 99.99=26591] [INSERT: Count=1828452, Max=31999, Min=480, Avg=1926.82, 90=3025, 99=5975, 99.9=14039, 99.99=25999] 
2023-03-13 22:54:15:447 890 sec: 176881360 operations; 212982.6 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=212719, Max=52703, Min=553, Avg=2146.04, 90=3287, 99=7275, 99.9=14671, 99.99=26335] [INSERT: Count=1917151, Max=52383, Min=467, Avg=1846.05, 90=2893, 99=6735, 99.9=14047, 99.99=22383] 
2023-03-13 22:54:25:447 900 sec: 179008697 operations; 212733.7 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=213448, Max=47295, Min=537, Avg=2123.73, 90=3225, 99=7703, 99.9=16831, 99.99=24927] [INSERT: Count=1913835, Max=45375, Min=465, Avg=1850.79, 90=2865, 99=7099, 99.9=15983, 99.99=23551] 
2023-03-13 22:54:35:447 910 sec: 181110730 operations; 210203.3 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=210130, Max=43359, Min=533, Avg=2160.76, 90=3261, 99=7943, 99.9=18463, 99.99=27711] [INSERT: Count=1891934, Max=45087, Min=466, Avg=1872.01, 90=2895, 99=7255, 99.9=17343, 99.99=27231] 
2023-03-13 22:54:45:447 920 sec: 183174976 operations; 206424.6 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=206610, Max=118335, Min=555, Avg=2243.86, 90=3379, 99=7059, 99.9=18191, 99.99=48255] [INSERT: Count=1857659, Max=117951, Min=465, Avg=1901.43, 90=2939, 99=6431, 99.9=16815, 99.99=45311] 
2023-03-13 22:54:55:447 930 sec: 185183371 operations; 200839.5 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=200230, Max=38911, Min=578, Avg=2341.17, 90=3487, 99=6175, 99.9=17183, 99.99=36991] [INSERT: Count=1808102, Max=54815, Min=468, Avg=1950.68, 90=2941, 99=5327, 99.9=16527, 99.99=36703] 
2023-03-13 22:55:05:447 940 sec: 187112291 operations; 192892 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=192728, Max=32687, Min=619, Avg=2476.98, 90=3619, 99=6135, 99.9=13991, 99.99=29743] [INSERT: Count=1736159, Max=34559, Min=473, Avg=2026.66, 90=2967, 99=4735, 99.9=12871, 99.99=28639] 
2023-03-13 22:55:15:447 950 sec: 189084756 operations; 197246.5 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=197530, Max=35391, Min=530, Avg=2443.6, 90=3633, 99=6151, 99.9=17023, 99.99=32335] [INSERT: Count=1774965, Max=40063, Min=462, Avg=1979.4, 90=2917, 99=4863, 99.9=15815, 99.99=31615] 
2023-03-13 22:55:25:447 960 sec: 191078987 operations; 199423.1 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=199845, Max=87359, Min=555, Avg=2358.14, 90=3551, 99=6455, 99.9=15831, 99.99=82111] [INSERT: Count=1794422, Max=87103, Min=472, Avg=1964.27, 90=2953, 99=5579, 99.9=15111, 99.99=82239] 
2023-03-13 22:55:35:447 970 sec: 193141506 operations; 206251.9 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=205885, Max=32575, Min=544, Avg=2281.09, 90=3563, 99=6351, 99.9=15479, 99.99=28943] [INSERT: Count=1856601, Max=33375, Min=440, Avg=1899.2, 90=3003, 99=5703, 99.9=14383, 99.99=28367] 
2023-03-13 22:55:45:447 980 sec: 195097135 operations; 195562.9 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=196756, Max=45471, Min=554, Avg=2445.23, 90=3895, 99=6335, 99.9=16735, 99.99=25103] [INSERT: Count=1758869, Max=45983, Min=438, Avg=1998.39, 90=3261, 99=5235, 99.9=15439, 99.99=24127] 
2023-03-13 22:55:55:447 990 sec: 197027445 operations; 193031 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=192569, Max=36543, Min=558, Avg=2509.04, 90=3893, 99=6195, 99.9=13599, 99.99=22927] [INSERT: Count=1737712, Max=41215, Min=445, Avg=2021.56, 90=3173, 99=4679, 99.9=12383, 99.99=20015] 
2023-03-13 22:56:05:447 1000 sec: 199010188 operations; 198274.3 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=197917, Max=27375, Min=560, Avg=2441.07, 90=3691, 99=6411, 99.9=16431, 99.99=24975] [INSERT: Count=1784833, Max=27103, Min=474, Avg=1968.16, 90=2919, 99=5267, 99.9=15719, 99.99=24031] 
2023-03-13 22:56:15:447 1010 sec: 201021677 operations; 201148.9 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=200364, Max=162943, Min=600, Avg=2394.29, 90=3641, 99=6519, 99.9=17519, 99.99=28415] [INSERT: Count=1811173, Max=168831, Min=462, Avg=1941.41, 90=2877, 99=5475, 99.9=16415, 99.99=59839] 
2023-03-13 22:56:25:447 1020 sec: 203057523 operations; 203584.6 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=204300, Max=33023, Min=557, Avg=2309.65, 90=3555, 99=6975, 99.9=18159, 99.99=29087] [INSERT: Count=1831511, Max=41023, Min=451, Avg=1924.02, 90=2897, 99=6207, 99.9=17215, 99.99=28463] 
2023-03-13 22:56:35:447 1030 sec: 205130401 operations; 207287.8 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=206806, Max=36031, Min=545, Avg=2251.94, 90=3513, 99=7227, 99.9=23615, 99.99=29407] [INSERT: Count=1866168, Max=36287, Min=465, Avg=1891.68, 90=2931, 99=6467, 99.9=17295, 99.99=28399] 
2023-03-13 22:56:45:447 1040 sec: 207193883 operations; 206348.2 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=205606, Max=152063, Min=530, Avg=2277.93, 90=3513, 99=6955, 99.9=17679, 99.99=99327] [INSERT: Count=1857873, Max=154495, Min=448, Avg=1898.61, 90=2933, 99=6327, 99.9=17055, 99.99=86911] 
2023-03-13 22:56:55:447 1050 sec: 209223031 operations; 202914.8 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=202712, Max=46943, Min=554, Avg=2356.03, 90=3623, 99=6431, 99.9=15943, 99.99=28751] [INSERT: Count=1826334, Max=45439, Min=454, Avg=1926.31, 90=2971, 99=5603, 99.9=14303, 99.99=27935] 
2023-03-13 22:57:05:447 1060 sec: 211210261 operations; 198723 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=199112, Max=23263, Min=539, Avg=2414.14, 90=3681, 99=6055, 99.9=13663, 99.99=17471] [INSERT: Count=1788089, Max=24543, Min=472, Avg=1965.94, 90=3015, 99=5015, 99.9=12831, 99.99=16911] 
2023-03-13 22:57:15:447 1070 sec: 213153105 operations; 194284.4 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=194438, Max=46911, Min=543, Avg=2453.67, 90=3699, 99=6087, 99.9=16303, 99.99=29551] [INSERT: Count=1748482, Max=47615, Min=469, Avg=2012.7, 90=3063, 99=4895, 99.9=15623, 99.99=28847] 
2023-03-13 22:57:25:447 1080 sec: 215143311 operations; 199020.6 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=198621, Max=42559, Min=539, Avg=2379.92, 90=3639, 99=6207, 99.9=13719, 99.99=26703] [INSERT: Count=1791549, Max=33215, Min=445, Avg=1966.55, 90=3007, 99=5203, 99.9=13191, 99.99=25631] 
2023-03-13 22:57:35:447 1090 sec: 217143424 operations; 200011.3 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=199474, Max=37151, Min=544, Avg=2402.47, 90=3777, 99=6367, 99.9=15271, 99.99=32575] [INSERT: Count=1800598, Max=37823, Min=441, Avg=1952.98, 90=3069, 99=5291, 99.9=14231, 99.99=32319] 
2023-03-13 22:57:45:447 1100 sec: 219067700 operations; 192427.6 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=193585, Max=207871, Min=503, Avg=2526.27, 90=3925, 99=6623, 99.9=23295, 99.99=121279] [INSERT: Count=1730785, Max=208383, Min=429, Avg=2026.43, 90=3155, 99=5215, 99.9=22287, 99.99=133119] 
2023-03-13 22:57:55:447 1110 sec: 221036954 operations; 196925.4 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=196702, Max=47743, Min=549, Avg=2499.03, 90=3863, 99=6203, 99.9=15359, 99.99=28319] [INSERT: Count=1772487, Max=47167, Min=459, Avg=1977.11, 90=3073, 99=4839, 99.9=14239, 99.99=27551] 
2023-03-13 22:58:05:447 1120 sec: 222985680 operations; 194872.6 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=195106, Max=46335, Min=540, Avg=2535.23, 90=3845, 99=6243, 99.9=14295, 99.99=43039] [INSERT: Count=1753967, Max=46015, Min=469, Avg=1996.66, 90=2979, 99=4839, 99.9=12943, 99.99=42975] 
2023-03-13 22:58:15:447 1130 sec: 224928481 operations; 194280.1 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=193931, Max=39839, Min=555, Avg=2547.7, 90=3851, 99=6391, 99.9=14463, 99.99=36607] [INSERT: Count=1748688, Max=40575, Min=452, Avg=2002.43, 90=2967, 99=4879, 99.9=13391, 99.99=36543] 
2023-03-13 22:58:25:447 1140 sec: 226917027 operations; 198854.6 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=198604, Max=37695, Min=544, Avg=2458.49, 90=3775, 99=6279, 99.9=15431, 99.99=22479] [INSERT: Count=1789866, Max=34175, Min=448, Avg=1959.61, 90=2981, 99=5183, 99.9=14271, 99.99=21439] 
2023-03-13 22:58:35:447 1150 sec: 228918644 operations; 200161.7 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=200415, Max=18751, Min=546, Avg=2418.27, 90=3775, 99=6295, 99.9=13535, 99.99=16431] [INSERT: Count=1801292, Max=18479, Min=442, Avg=1949.48, 90=3021, 99=5175, 99.9=12655, 99.99=15367] 
2023-03-13 22:58:45:447 1160 sec: 230856008 operations; 193736.4 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=194059, Max=190847, Min=534, Avg=2519.47, 90=3883, 99=6579, 99.9=14679, 99.99=99647] [INSERT: Count=1743357, Max=193663, Min=453, Avg=2011.77, 90=3125, 99=5047, 99.9=13823, 99.99=111487] 
2023-03-13 22:58:55:447 1170 sec: 232836825 operations; 198081.7 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=198465, Max=50335, Min=544, Avg=2477.81, 90=3781, 99=6491, 99.9=17791, 99.99=26671] [INSERT: Count=1782356, Max=44543, Min=441, Avg=1966.1, 90=2967, 99=5351, 99.9=17007, 99.99=25215] 
2023-03-13 22:59:05:447 1180 sec: 234778485 operations; 194166 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=194151, Max=30127, Min=553, Avg=2551.21, 90=3869, 99=6195, 99.9=13143, 99.99=27535] [INSERT: Count=1747256, Max=32831, Min=455, Avg=2003.28, 90=2971, 99=4579, 99.9=11575, 99.99=27167] 
2023-03-13 22:59:15:447 1190 sec: 236662184 operations; 188369.9 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=189204, Max=39647, Min=559, Avg=2636.87, 90=3895, 99=6267, 99.9=12543, 99.99=20463] [INSERT: Count=1694505, Max=51199, Min=467, Avg=2063.94, 90=2989, 99=4251, 99.9=11863, 99.99=19487] 
2023-03-13 22:59:25:447 1200 sec: 238554993 operations; 189280.9 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=189942, Max=64447, Min=535, Avg=2645.33, 90=3907, 99=6215, 99.9=13623, 99.99=29839] [INSERT: Count=1702882, Max=64479, Min=465, Avg=2051.67, 90=2971, 99=4207, 99.9=12567, 99.99=23887] 
2023-03-13 22:59:35:447 1210 sec: 240434819 operations; 187982.6 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=187749, Max=32303, Min=548, Avg=2647.36, 90=3903, 99=6303, 99.9=17711, 99.99=29535] [INSERT: Count=1692070, Max=31295, Min=454, Avg=2068, 90=3007, 99=4415, 99.9=16143, 99.99=28687] 
2023-03-13 22:59:45:447 1220 sec: 242315426 operations; 188060.7 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=187369, Max=135935, Min=525, Avg=2654.44, 90=3939, 99=6867, 99.9=17247, 99.99=40831] [INSERT: Count=1693260, Max=140287, Min=458, Avg=2066.34, 90=3013, 99=4559, 99.9=15847, 99.99=59743] 
2023-03-13 22:59:55:447 1230 sec: 244240827 operations; 192540.1 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=192552, Max=49055, Min=549, Avg=2598.28, 90=3921, 99=6395, 99.9=17519, 99.99=28607] [INSERT: Count=1732855, Max=44511, Min=452, Avg=2017.36, 90=2983, 99=4767, 99.9=16575, 99.99=27439] 
2023-03-13 23:00:05:447 1240 sec: 246140918 operations; 190009.1 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=190722, Max=49471, Min=571, Avg=2620.25, 90=3917, 99=6635, 99.9=16719, 99.99=25151] [INSERT: Count=1709063, Max=28991, Min=466, Avg=2039.9, 90=2997, 99=4663, 99.9=15519, 99.99=24591] 
2023-03-13 23:00:15:447 1250 sec: 248034916 operations; 189399.8 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=188912, Max=91583, Min=537, Avg=2659.84, 90=3955, 99=6679, 99.9=17103, 99.99=29423] [INSERT: Count=1705384, Max=98303, Min=462, Avg=2054.59, 90=2955, 99=4499, 99.9=16359, 99.99=30287] 
2023-03-13 23:00:25:447 1260 sec: 249879766 operations; 184485 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=184315, Max=186111, Min=571, Avg=2739.66, 90=4009, 99=6647, 99.9=15375, 99.99=136063] [INSERT: Count=1660575, Max=200831, Min=471, Avg=2102.44, 90=2943, 99=4187, 99.9=14399, 99.99=102847] 
2023-03-13 23:00:35:447 1270 sec: 251751270 operations; 187150.4 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=187531, Max=20975, Min=576, Avg=2701.08, 90=4041, 99=6691, 99.9=13263, 99.99=18447] [INSERT: Count=1683834, Max=19871, Min=483, Avg=2072.34, 90=2987, 99=4335, 99.9=12439, 99.99=17727] 
2023-03-13 23:00:45:447 1280 sec: 253570017 operations; 181874.7 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=181994, Max=45919, Min=548, Avg=2757.99, 90=4147, 99=6775, 99.9=14527, 99.99=24351] [INSERT: Count=1636818, Max=51551, Min=470, Avg=2134.92, 90=3153, 99=4275, 99.9=13391, 99.99=23679] 
2023-03-13 23:00:55:447 1290 sec: 255478297 operations; 190828 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=191011, Max=31087, Min=576, Avg=2650.53, 90=3989, 99=6843, 99.9=14847, 99.99=23759] [INSERT: Count=1717321, Max=32063, Min=484, Avg=2032.18, 90=2919, 99=4667, 99.9=13671, 99.99=20751] 
2023-03-13 23:01:05:447 1300 sec: 257420911 operations; 194261.4 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=194452, Max=29711, Min=590, Avg=2600.07, 90=3917, 99=6047, 99.9=13127, 99.99=27743] [INSERT: Count=1748334, Max=29887, Min=482, Avg=1996.62, 90=2859, 99=4327, 99.9=12199, 99.99=27295] 
2023-03-13 23:01:15:447 1310 sec: 259348167 operations; 192725.6 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=192926, Max=42591, Min=597, Avg=2622.28, 90=3933, 99=6327, 99.9=14959, 99.99=24303] [INSERT: Count=1734134, Max=44255, Min=473, Avg=2012.41, 90=2865, 99=4467, 99.9=13943, 99.99=20751] 
2023-03-13 23:01:25:447 1320 sec: 261255404 operations; 190723.7 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=190312, Max=52415, Min=576, Avg=2646.7, 90=3949, 99=6431, 99.9=15599, 99.99=31039] [INSERT: Count=1716897, Max=51519, Min=486, Avg=2034.12, 90=2889, 99=4443, 99.9=14615, 99.99=29151] 
2023-03-13 23:01:35:447 1330 sec: 263132714 operations; 187731 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=187689, Max=21439, Min=611, Avg=2673.34, 90=3971, 99=6627, 99.9=12607, 99.99=18223] [INSERT: Count=1689590, Max=19839, Min=464, Avg=2068.19, 90=2937, 99=4287, 99.9=11447, 99.99=17439] 
2023-03-13 23:01:45:447 1340 sec: 265015737 operations; 188302.3 current ops/sec; est completion in 1 hour 1 minute [READ: Count=188451, Max=195711, Min=547, Avg=2666.03, 90=3941, 99=6419, 99.9=17343, 99.99=142335] [INSERT: Count=1694648, Max=190847, Min=482, Avg=2061.7, 90=2905, 99=4371, 99.9=15303, 99.99=112127] 
2023-03-13 23:01:55:447 1350 sec: 266889158 operations; 187342.1 current ops/sec; est completion in 1 hour 1 minute [READ: Count=187780, Max=49503, Min=532, Avg=2663.21, 90=3925, 99=6251, 99.9=14407, 99.99=26511] [INSERT: Count=1685622, Max=47327, Min=489, Avg=2074.05, 90=2967, 99=4175, 99.9=13287, 99.99=25279] 
2023-03-13 23:02:05:447 1360 sec: 268754116 operations; 186495.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=186894, Max=32383, Min=572, Avg=2677.62, 90=3951, 99=6471, 99.9=14287, 99.99=28207] [INSERT: Count=1678012, Max=34463, Min=471, Avg=2083.24, 90=2969, 99=4243, 99.9=12471, 99.99=27471] 
2023-03-13 23:02:15:447 1370 sec: 270587148 operations; 183303.2 current ops/sec; est completion in 1 hour 1 minute [READ: Count=183633, Max=46623, Min=581, Avg=2721.3, 90=3975, 99=6927, 99.9=16183, 99.99=25839] [INSERT: Count=1649406, Max=34943, Min=491, Avg=2119.94, 90=2985, 99=4283, 99.9=15151, 99.99=24175] 
2023-03-13 23:02:25:447 1380 sec: 272454388 operations; 186724 current ops/sec; est completion in 1 hour 1 minute [READ: Count=186165, Max=92927, Min=567, Avg=2682.25, 90=3931, 99=6479, 99.9=17359, 99.99=89727] [INSERT: Count=1681148, Max=92991, Min=494, Avg=2080.16, 90=2943, 99=4263, 99.9=15383, 99.99=88703] 
2023-03-13 23:02:35:447 1390 sec: 274350036 operations; 189564.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=189148, Max=91327, Min=600, Avg=2652.35, 90=3935, 99=6743, 99.9=17247, 99.99=58783] [INSERT: Count=1706492, Max=89919, Min=467, Avg=2047.81, 90=2923, 99=4483, 99.9=15751, 99.99=25727] 
2023-03-13 23:02:45:447 1400 sec: 276190926 operations; 184089 current ops/sec; est completion in 1 hour 1 minute [READ: Count=183984, Max=52831, Min=586, Avg=2728.53, 90=4085, 99=6751, 99.9=15007, 99.99=23295] [INSERT: Count=1656853, Max=48447, Min=454, Avg=2108.98, 90=3097, 99=4263, 99.9=13591, 99.99=21087] 
2023-03-13 23:02:55:447 1410 sec: 278067354 operations; 187642.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=186922, Max=42239, Min=553, Avg=2686.3, 90=4043, 99=6495, 99.9=12823, 99.99=26287] [INSERT: Count=1689650, Max=51071, Min=475, Avg=2068.18, 90=3027, 99=4191, 99.9=12231, 99.99=25135] 
2023-03-13 23:03:05:447 1420 sec: 279983004 operations; 191565 current ops/sec; est completion in 1 hour [READ: Count=191832, Max=27215, Min=571, Avg=2604.66, 90=3919, 99=6635, 99.9=15295, 99.99=24175] [INSERT: Count=1723988, Max=27311, Min=472, Avg=2028.38, 90=2911, 99=4555, 99.9=13703, 99.99=23407] 
2023-03-13 23:03:15:447 1430 sec: 281919204 operations; 193620 current ops/sec; est completion in 1 hour [READ: Count=193819, Max=49279, Min=581, Avg=2558.72, 90=3855, 99=6271, 99.9=14247, 99.99=24319] [INSERT: Count=1742193, Max=49439, Min=478, Avg=2008.94, 90=2879, 99=4371, 99.9=13215, 99.99=21455] 
2023-03-13 23:03:25:447 1440 sec: 283836642 operations; 191743.8 current ops/sec; est completion in 1 hour [READ: Count=192427, Max=53695, Min=584, Avg=2578.56, 90=3847, 99=6207, 99.9=13327, 99.99=24351] [INSERT: Count=1725035, Max=54239, Min=480, Avg=2029.02, 90=2877, 99=4199, 99.9=12287, 99.99=25023] 
2023-03-13 23:03:35:447 1450 sec: 285728700 operations; 189205.8 current ops/sec; est completion in 1 hour [READ: Count=189402, Max=94655, Min=567, Avg=2624.03, 90=3883, 99=6491, 99.9=15079, 99.99=35871] [INSERT: Count=1702779, Max=96127, Min=464, Avg=2055.2, 90=2889, 99=4283, 99.9=14207, 99.99=20943] 
2023-03-13 23:03:45:447 1460 sec: 287625322 operations; 189662.2 current ops/sec; est completion in 1 hour [READ: Count=189564, Max=165759, Min=570, Avg=2600.77, 90=3863, 99=6283, 99.9=15167, 99.99=97343] [INSERT: Count=1706815, Max=163583, Min=489, Avg=2052.19, 90=2889, 99=4271, 99.9=14543, 99.99=97727] 
2023-03-13 23:03:55:447 1470 sec: 289486013 operations; 186069.1 current ops/sec; est completion in 1 hour [READ: Count=185530, Max=46463, Min=567, Avg=2644.82, 90=3907, 99=6331, 99.9=15191, 99.99=25743] [INSERT: Count=1675160, Max=49631, Min=483, Avg=2092.74, 90=2959, 99=4123, 99.9=13671, 99.99=25103] 
2023-03-13 23:04:05:447 1480 sec: 291338496 operations; 185248.3 current ops/sec; est completion in 1 hour [READ: Count=185247, Max=18927, Min=580, Avg=2667.1, 90=3935, 99=6499, 99.9=12383, 99.99=17151] [INSERT: Count=1667185, Max=20751, Min=478, Avg=2100.68, 90=2967, 99=4215, 99.9=11311, 99.99=16655] 
2023-03-13 23:04:15:447 1490 sec: 293118982 operations; 178048.6 current ops/sec; est completion in 59 minutes [READ: Count=178517, Max=50335, Min=575, Avg=2771.57, 90=3963, 99=6695, 99.9=14447, 99.99=24239] [INSERT: Count=1601983, Max=50143, Min=466, Avg=2185.92, 90=3015, 99=4017, 99.9=13255, 99.99=23663] 
2023-03-13 23:04:25:447 1500 sec: 294911065 operations; 179208.3 current ops/sec; est completion in 59 minutes [READ: Count=178617, Max=47519, Min=571, Avg=2765.79, 90=3989, 99=7003, 99.9=14991, 99.99=25535] [INSERT: Count=1613505, Max=31071, Min=473, Avg=2170.78, 90=2995, 99=4059, 99.9=11791, 99.99=22639] 
2023-03-13 23:04:35:447 1510 sec: 296738773 operations; 182770.8 current ops/sec; est completion in 59 minutes [READ: Count=183225, Max=37247, Min=595, Avg=2712.79, 90=3971, 99=6835, 99.9=11399, 99.99=16431] [INSERT: Count=1644444, Max=46527, Min=481, Avg=2127.97, 90=2963, 99=4191, 99.9=10439, 99.99=15951] 
2023-03-13 23:04:45:447 1520 sec: 298540916 operations; 180214.3 current ops/sec; est completion in 59 minutes [READ: Count=180218, Max=201343, Min=542, Avg=2747.39, 90=3965, 99=6883, 99.9=18143, 99.99=160255] [INSERT: Count=1621967, Max=197503, Min=472, Avg=2158.77, 90=2951, 99=4327, 99.9=17327, 99.99=158079] 
2023-03-13 23:04:55:447 1530 sec: 300307889 operations; 176697.3 current ops/sec; est completion in 59 minutes [READ: Count=176988, Max=39199, Min=593, Avg=2803.55, 90=4103, 99=6623, 99.9=17151, 99.99=27519] [INSERT: Count=1589968, Max=32959, Min=457, Avg=2201.48, 90=3137, 99=4123, 99.9=14111, 99.99=26671] 
2023-03-13 23:05:05:447 1540 sec: 302150758 operations; 184286.9 current ops/sec; est completion in 59 minutes [READ: Count=184207, Max=32367, Min=606, Avg=2702.92, 90=3991, 99=6587, 99.9=14575, 99.99=28335] [INSERT: Count=1658643, Max=29711, Min=480, Avg=2109.25, 90=2961, 99=4231, 99.9=13039, 99.99=27423] 
2023-03-13 23:05:15:447 1550 sec: 304015953 operations; 186519.5 current ops/sec; est completion in 59 minutes [READ: Count=187133, Max=122239, Min=578, Avg=2658.22, 90=3921, 99=6575, 99.9=15679, 99.99=61215] [INSERT: Count=1678109, Max=125823, Min=484, Avg=2085.08, 90=2885, 99=4279, 99.9=12591, 99.99=72511] 
2023-03-13 23:05:25:447 1560 sec: 305901893 operations; 188594 current ops/sec; est completion in 59 minutes [READ: Count=189025, Max=51167, Min=580, Avg=2627.8, 90=3893, 99=6315, 99.9=15223, 99.99=24735] [INSERT: Count=1696890, Max=50815, Min=491, Avg=2062.33, 90=2865, 99=4215, 99.9=12991, 99.99=21551] 
2023-03-13 23:05:35:447 1570 sec: 307778858 operations; 187696.5 current ops/sec; est completion in 58 minutes [READ: Count=187199, Max=83647, Min=576, Avg=2639.62, 90=3891, 99=6287, 99.9=14703, 99.99=40767] [INSERT: Count=1689789, Max=89983, Min=479, Avg=2072.62, 90=2865, 99=4135, 99.9=13367, 99.99=34911] 
2023-03-13 23:05:45:447 1580 sec: 309603064 operations; 182420.6 current ops/sec; est completion in 58 minutes [READ: Count=182075, Max=114943, Min=549, Avg=2731.93, 90=3957, 99=7203, 99.9=22255, 99.99=69951] [INSERT: Count=1642151, Max=114367, Min=488, Avg=2130.8, 90=2877, 99=4267, 99.9=19839, 99.99=60831] 
2023-03-13 23:05:55:447 1590 sec: 311457531 operations; 185446.7 current ops/sec; est completion in 58 minutes [READ: Count=185816, Max=48415, Min=586, Avg=2670.62, 90=3899, 99=6303, 99.9=17519, 99.99=27983] [INSERT: Count=1668627, Max=49599, Min=478, Avg=2097.57, 90=2881, 99=4065, 99.9=15639, 99.99=26415] 
2023-03-13 23:06:05:447 1600 sec: 313323960 operations; 186642.9 current ops/sec; est completion in 58 minutes [READ: Count=186404, Max=39647, Min=576, Avg=2646.61, 90=3891, 99=6371, 99.9=16591, 99.99=36191] [INSERT: Count=1680013, Max=39679, Min=484, Avg=2085.08, 90=2881, 99=4163, 99.9=13719, 99.99=36479] 
2023-03-13 23:06:15:447 1610 sec: 315186308 operations; 186234.8 current ops/sec; est completion in 58 minutes [READ: Count=185719, Max=158207, Min=579, Avg=2653.07, 90=3915, 99=6531, 99.9=14143, 99.99=29935] [INSERT: Count=1676663, Max=162559, Min=468, Avg=2089.69, 90=2893, 99=4187, 99.9=13495, 99.99=58559] 
2023-03-13 23:06:25:447 1620 sec: 317025538 operations; 183923 current ops/sec; est completion in 58 minutes [READ: Count=183235, Max=47071, Min=584, Avg=2695.05, 90=3931, 99=6559, 99.9=12799, 99.99=26447] [INSERT: Count=1656067, Max=42175, Min=481, Avg=2115.14, 90=2945, 99=4087, 99.9=11151, 99.99=26063] 
2023-03-13 23:06:35:447 1630 sec: 318818821 operations; 179328.3 current ops/sec; est completion in 58 minutes [READ: Count=179601, Max=161535, Min=577, Avg=2766.34, 90=3995, 99=6927, 99.9=18063, 99.99=71551] [INSERT: Count=1613691, Max=162175, Min=459, Avg=2168.72, 90=2961, 99=4155, 99.9=16543, 99.99=115199] 
2023-03-13 23:06:45:447 1640 sec: 320625593 operations; 180677.2 current ops/sec; est completion in 57 minutes [READ: Count=180693, Max=156927, Min=593, Avg=2750.58, 90=3983, 99=6999, 99.9=16815, 99.99=77119] [INSERT: Count=1626004, Max=158975, Min=480, Avg=2152.08, 90=2965, 99=4219, 99.9=15407, 99.99=49279] 
2023-03-13 23:06:55:447 1650 sec: 322478653 operations; 185306 current ops/sec; est completion in 57 minutes [READ: Count=184890, Max=43647, Min=535, Avg=2677.33, 90=3939, 99=6431, 99.9=12839, 99.99=22975] [INSERT: Count=1668106, Max=28575, Min=481, Avg=2098.92, 90=2953, 99=4087, 99.9=11999, 99.99=20271] 
2023-03-13 23:07:05:447 1660 sec: 324257336 operations; 177868.3 current ops/sec; est completion in 57 minutes [READ: Count=177644, Max=18175, Min=570, Avg=2768.28, 90=4099, 99=6843, 99.9=11527, 99.99=15943] [INSERT: Count=1601005, Max=16831, Min=484, Avg=2189.05, 90=3137, 99=4191, 99.9=10519, 99.99=14583] 
2023-03-13 23:07:15:447 1670 sec: 326052340 operations; 179500.4 current ops/sec; est completion in 57 minutes [READ: Count=179648, Max=131327, Min=565, Avg=2740.64, 90=4023, 99=6955, 99.9=17055, 99.99=48799] [INSERT: Count=1615428, Max=132863, Min=481, Avg=2169.28, 90=3033, 99=4211, 99.9=13871, 99.99=40575] 
2023-03-13 23:07:25:447 1680 sec: 327893867 operations; 184152.7 current ops/sec; est completion in 57 minutes [READ: Count=183823, Max=54687, Min=561, Avg=2667.24, 90=3955, 99=7087, 99.9=20175, 99.99=27311] [INSERT: Count=1657871, Max=31375, Min=485, Avg=2114.99, 90=2939, 99=4463, 99.9=18079, 99.99=26143] 
2023-03-13 23:07:35:447 1690 sec: 329747986 operations; 185411.9 current ops/sec; est completion in 57 minutes [READ: Count=184362, Max=181119, Min=565, Avg=2634.3, 90=3889, 99=6395, 99.9=13535, 99.99=49279] [INSERT: Count=1669764, Max=190847, Min=470, Avg=2102.53, 90=2903, 99=4099, 99.9=12279, 99.99=101119] 
2023-03-13 23:07:45:447 1700 sec: 331598623 operations; 185063.7 current ops/sec; est completion in 57 minutes [READ: Count=184394, Max=174335, Min=537, Avg=2654.27, 90=3895, 99=6643, 99.9=17071, 99.99=74367] [INSERT: Count=1666223, Max=171647, Min=477, Avg=2104.76, 90=2895, 99=4207, 99.9=15199, 99.99=84799] 
2023-03-13 23:07:55:447 1710 sec: 333449149 operations; 185052.6 current ops/sec; est completion in 56 minutes [READ: Count=184808, Max=31503, Min=561, Avg=2676.28, 90=3927, 99=6547, 99.9=18559, 99.99=28959] [INSERT: Count=1665622, Max=37567, Min=476, Avg=2102.28, 90=2887, 99=4191, 99.9=14063, 99.99=28367] 
2023-03-13 23:08:05:447 1720 sec: 335296817 operations; 184766.8 current ops/sec; est completion in 56 minutes [READ: Count=185732, Max=28303, Min=564, Avg=2693.68, 90=3923, 99=6423, 99.9=12639, 99.99=23807] [INSERT: Count=1661958, Max=26271, Min=493, Avg=2103.61, 90=2893, 99=3995, 99.9=11631, 99.99=23231] 
2023-03-13 23:08:15:447 1730 sec: 337149526 operations; 185270.9 current ops/sec; est completion in 56 minutes [READ: Count=185659, Max=80639, Min=612, Avg=2681.86, 90=3943, 99=6747, 99.9=14367, 99.99=28975] [INSERT: Count=1667159, Max=88383, Min=483, Avg=2098.59, 90=2901, 99=4163, 99.9=13335, 99.99=33343] 
2023-03-13 23:08:25:447 1740 sec: 339001726 operations; 185220 current ops/sec; est completion in 56 minutes [READ: Count=184748, Max=118015, Min=561, Avg=2646.1, 90=3899, 99=6423, 99.9=15967, 99.99=30335] [INSERT: Count=1667373, Max=115711, Min=463, Avg=2103.47, 90=2913, 99=4251, 99.9=14255, 99.99=30127] 
2023-03-13 23:08:35:447 1750 sec: 340870017 operations; 186829.1 current ops/sec; est completion in 56 minutes [READ: Count=186884, Max=48799, Min=562, Avg=2629.85, 90=3885, 99=6239, 99.9=13647, 99.99=18015] [INSERT: Count=1681402, Max=48703, Min=477, Avg=2084.5, 90=2911, 99=4123, 99.9=12319, 99.99=17631] 
2023-03-13 23:08:45:447 1760 sec: 342680820 operations; 181080.3 current ops/sec; est completion in 56 minutes [READ: Count=180461, Max=113343, Min=546, Avg=2729.94, 90=3971, 99=6639, 99.9=14031, 99.99=58527] [INSERT: Count=1630316, Max=122687, Min=478, Avg=2149.08, 90=2953, 99=3991, 99.9=13671, 99.99=71359] 
2023-03-13 23:08:55:447 1770 sec: 344506636 operations; 182581.6 current ops/sec; est completion in 56 minutes [READ: Count=182941, Max=46175, Min=561, Avg=2711.05, 90=3941, 99=6663, 99.9=18015, 99.99=31791] [INSERT: Count=1642878, Max=43679, Min=457, Avg=2130.71, 90=2939, 99=4111, 99.9=15127, 99.99=31151] 
2023-03-13 23:09:05:447 1780 sec: 346311218 operations; 180458.2 current ops/sec; est completion in 56 minutes [READ: Count=180635, Max=19231, Min=558, Avg=2741.97, 90=4019, 99=6763, 99.9=12031, 99.99=14791] [INSERT: Count=1623883, Max=16927, Min=480, Avg=2155.95, 90=3023, 99=4049, 99.9=11255, 99.99=13263] 
2023-03-13 23:09:15:447 1790 sec: 348126072 operations; 181485.4 current ops/sec; est completion in 55 minutes [READ: Count=182128, Max=61375, Min=566, Avg=2720.11, 90=4031, 99=6659, 99.9=12399, 99.99=27167] [INSERT: Count=1632834, Max=65727, Min=479, Avg=2144.31, 90=3057, 99=4131, 99.9=11415, 99.99=25471] 
2023-03-13 23:09:25:447 1800 sec: 349965708 operations; 183963.6 current ops/sec; est completion in 55 minutes [READ: Count=184191, Max=46655, Min=573, Avg=2676.26, 90=3987, 99=6583, 99.9=12983, 99.99=25775] [INSERT: Count=1655433, Max=38655, Min=485, Avg=2116.29, 90=2981, 99=4183, 99.9=12047, 99.99=25103] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-232 to complete. Workload status: true
2023-03-13 23:09:27:718 1802 sec: 349972605 operations; 3036.99 current ops/sec; est completion in 55 minutes [READ: Count=704, Max=10263, Min=724, Avg=2791.41, 90=4459, 99=8279, 99.9=9663, 99.99=10263] [CLEANUP: Count=400, Max=2224127, Min=0, Avg=5559.78, 90=2, 99=16, 99.9=2224127, 99.99=2224127] [INSERT: Count=5781, Max=10263, Min=580, Avg=2117.07, 90=3037, 99=5407, 99.9=9111, 99.99=9287] 
[OVERALL], RunTime(ms), 1802270
[OVERALL], Throughput(ops/sec), 194184.33697503703
[TOTAL_GCS_PS_Scavenge], Count, 2952
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 19559
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0852424997364436
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 188
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.01043128942944176
[TOTAL_GCs], Count, 2955
[TOTAL_GC_TIME], Time(ms), 19747
[TOTAL_GC_TIME_%], Time(%), 1.0956737891658852
[READ], Operations, 35000545
[READ], AverageLatency(us), 2491.4156045855857
[READ], MinLatency(us), 499
[READ], MaxLatency(us), 370175
[READ], 95thPercentileLatency(us), 4463
[READ], 99thPercentileLatency(us), 6543
[READ], Return=OK, 35000545
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5559.785
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 16
[INSERT], Operations, 314972060
[INSERT], AverageLatency(us), 2005.9437180459752
[INSERT], MinLatency(us), 422
[INSERT], MaxLatency(us), 414463
[INSERT], 95thPercentileLatency(us), 3403
[INSERT], 99thPercentileLatency(us), 5203
[INSERT], Return=OK, 314972060
