bin/ycsb load scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -load
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.82.114.114,44.228.202.37,52.25.243.215 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zbynAk65shDWa2q -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -load
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-50] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-50] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-13 21:57:28:544 0 sec: 0 operations; est completion in 0 second 
[Thread-50] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-50] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.232.245.6:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.38.243.239:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.82.114.114:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.27.158.249:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.228.202.37:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.25.243.215:9042 added
[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: ee765acc-598b-4d48-8eab-9235d20597b4

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.27.158.249; Rack: us-west-2c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.232.245.6; Rack: us-west-2b

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.228.202.37; Rack: us-west-2a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.25.243.215; Rack: us-west-2b

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.38.243.239; Rack: us-west-2a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.82.114.114; Rack: us-west-2c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: ONE

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
2023-03-13 21:57:38:526 10 sec: 1514704 operations; 151455.25 current ops/sec; est completion in 54 minutes [INSERT: Count=1514877, Max=435455, Min=274, Avg=2445.44, 90=3715, 99=22735, 99.9=127999, 99.99=259327] 
2023-03-13 21:57:48:526 20 sec: 3825895 operations; 231119.1 current ops/sec; est completion in 43 minutes [INSERT: Count=2311018, Max=71103, Min=280, Avg=1727.37, 90=3015, 99=11143, 99.9=25839, 99.99=43327] 
2023-03-13 21:57:58:526 30 sec: 6192887 operations; 236699.2 current ops/sec; est completion in 39 minutes [INSERT: Count=2367066, Max=43359, Min=278, Avg=1689.63, 90=3043, 99=9919, 99.9=19455, 99.99=29023] 
2023-03-13 21:58:08:526 40 sec: 8496557 operations; 230367 current ops/sec; est completion in 38 minutes [INSERT: Count=2303711, Max=50655, Min=277, Avg=1734.7, 90=3059, 99=11551, 99.9=23599, 99.99=42495] 
2023-03-13 21:58:18:526 50 sec: 10832899 operations; 233634.2 current ops/sec; est completion in 37 minutes [INSERT: Count=2336319, Max=51199, Min=277, Avg=1710.29, 90=3063, 99=10439, 99.9=21935, 99.99=32575] 
2023-03-13 21:58:28:526 60 sec: 13178473 operations; 234557.4 current ops/sec; est completion in 36 minutes [INSERT: Count=2345632, Max=44223, Min=279, Avg=1703.53, 90=3123, 99=9807, 99.9=19215, 99.99=29055] 
2023-03-13 21:58:38:526 70 sec: 15568677 operations; 239020.4 current ops/sec; est completion in 36 minutes [INSERT: Count=2390135, Max=33663, Min=280, Avg=1671.81, 90=3045, 99=9023, 99.9=17759, 99.99=26223] 
2023-03-13 21:58:48:526 80 sec: 17965743 operations; 239706.6 current ops/sec; est completion in 35 minutes [INSERT: Count=2397083, Max=38783, Min=268, Avg=1666.92, 90=3049, 99=8447, 99.9=17183, 99.99=29391] 
2023-03-13 21:58:58:526 90 sec: 20327785 operations; 236204.2 current ops/sec; est completion in 35 minutes [INSERT: Count=2362081, Max=50623, Min=275, Avg=1691.72, 90=3021, 99=8607, 99.9=18623, 99.99=26111] 
2023-03-13 21:59:08:526 100 sec: 22576945 operations; 224916 current ops/sec; est completion in 35 minutes [INSERT: Count=2249120, Max=50207, Min=277, Avg=1776.08, 90=2861, 99=7811, 99.9=16671, 99.99=29135] 
2023-03-13 21:59:18:526 110 sec: 24922252 operations; 234530.7 current ops/sec; est completion in 34 minutes [INSERT: Count=2345319, Max=40607, Min=255, Avg=1704.33, 90=3031, 99=9639, 99.9=19807, 99.99=26463] 
2023-03-13 21:59:28:526 120 sec: 27298262 operations; 237601 current ops/sec; est completion in 34 minutes [INSERT: Count=2376024, Max=67327, Min=270, Avg=1681.47, 90=3027, 99=9479, 99.9=19119, 99.99=53343] 
2023-03-13 21:59:38:526 130 sec: 29648637 operations; 235037.5 current ops/sec; est completion in 34 minutes [INSERT: Count=2350399, Max=41247, Min=275, Avg=1700.33, 90=3071, 99=10679, 99.9=21119, 99.99=31007] 
2023-03-13 21:59:48:526 140 sec: 32015816 operations; 236717.9 current ops/sec; est completion in 34 minutes [INSERT: Count=2367171, Max=48575, Min=280, Avg=1687.99, 90=2985, 99=10343, 99.9=21951, 99.99=37791] 
2023-03-13 21:59:58:526 150 sec: 34389305 operations; 237348.9 current ops/sec; est completion in 33 minutes [INSERT: Count=2373464, Max=41983, Min=276, Avg=1683.58, 90=3061, 99=9695, 99.9=18911, 99.99=28159] 
2023-03-13 22:00:08:526 160 sec: 36785978 operations; 239667.3 current ops/sec; est completion in 33 minutes [INSERT: Count=2396698, Max=48191, Min=262, Avg=1667.2, 90=2937, 99=9863, 99.9=19615, 99.99=39583] 
2023-03-13 22:00:18:526 170 sec: 39136035 operations; 235005.7 current ops/sec; est completion in 33 minutes [INSERT: Count=2350068, Max=65983, Min=278, Avg=1700.26, 90=3037, 99=9831, 99.9=21679, 99.99=47423] 
2023-03-13 22:00:28:526 180 sec: 41443943 operations; 230790.8 current ops/sec; est completion in 33 minutes [INSERT: Count=2307897, Max=34495, Min=276, Avg=1731.49, 90=2859, 99=7663, 99.9=17087, 99.99=28447] 
2023-03-13 22:00:38:526 190 sec: 43752507 operations; 230856.4 current ops/sec; est completion in 33 minutes [INSERT: Count=2308679, Max=35967, Min=284, Avg=1730.91, 90=2761, 99=7823, 99.9=16783, 99.99=21439] 
2023-03-13 22:00:48:526 200 sec: 46068394 operations; 231588.7 current ops/sec; est completion in 32 minutes [INSERT: Count=2315784, Max=34655, Min=279, Avg=1725.46, 90=2829, 99=7899, 99.9=16719, 99.99=26175] 
2023-03-13 22:00:58:526 210 sec: 48411545 operations; 234315.1 current ops/sec; est completion in 32 minutes [INSERT: Count=2343160, Max=97023, Min=281, Avg=1705.35, 90=2931, 99=9591, 99.9=18687, 99.99=31023] 
2023-03-13 22:01:08:526 220 sec: 50726823 operations; 231527.8 current ops/sec; est completion in 32 minutes [INSERT: Count=2315246, Max=113279, Min=272, Avg=1725.75, 90=3075, 99=9447, 99.9=20879, 99.99=47071] 
2023-03-13 22:01:18:526 230 sec: 53041161 operations; 231433.8 current ops/sec; est completion in 32 minutes [INSERT: Count=2314311, Max=70847, Min=281, Avg=1726.21, 90=3101, 99=9719, 99.9=20431, 99.99=32175] 
2023-03-13 22:01:28:526 240 sec: 55300731 operations; 225957 current ops/sec; est completion in 32 minutes [INSERT: Count=2259630, Max=117759, Min=277, Avg=1768.88, 90=3217, 99=10415, 99.9=22719, 99.99=89087] 
2023-03-13 22:01:38:526 250 sec: 57645624 operations; 234489.3 current ops/sec; est completion in 31 minutes [INSERT: Count=2344885, Max=56031, Min=277, Avg=1704.08, 90=3085, 99=9631, 99.9=21263, 99.99=38207] 
2023-03-13 22:01:48:526 260 sec: 59960843 operations; 231521.9 current ops/sec; est completion in 31 minutes [INSERT: Count=2315173, Max=40543, Min=276, Avg=1725.88, 90=3019, 99=9183, 99.9=17823, 99.99=28095] 
2023-03-13 22:01:58:526 270 sec: 62253889 operations; 229304.6 current ops/sec; est completion in 31 minutes [INSERT: Count=2293077, Max=37215, Min=271, Avg=1742.73, 90=2939, 99=9343, 99.9=19151, 99.99=26271] 
2023-03-13 22:02:08:526 280 sec: 64600234 operations; 234634.5 current ops/sec; est completion in 31 minutes [INSERT: Count=2346318, Max=52383, Min=274, Avg=1702.93, 90=2909, 99=9591, 99.9=18367, 99.99=27935] 
2023-03-13 22:02:18:526 290 sec: 66975078 operations; 237484.4 current ops/sec; est completion in 31 minutes [INSERT: Count=2374833, Max=67391, Min=276, Avg=1682.55, 90=2907, 99=8871, 99.9=19935, 99.99=58975] 
2023-03-13 22:02:28:526 300 sec: 69379885 operations; 240480.7 current ops/sec; est completion in 31 minutes [INSERT: Count=2404842, Max=77887, Min=277, Avg=1661.53, 90=2975, 99=9439, 99.9=17903, 99.99=26975] 
2023-03-13 22:02:38:526 310 sec: 71745586 operations; 236570.1 current ops/sec; est completion in 30 minutes [INSERT: Count=2365701, Max=47391, Min=278, Avg=1689.11, 90=3017, 99=10215, 99.9=22031, 99.99=33759] 
2023-03-13 22:02:48:526 320 sec: 74106382 operations; 236079.6 current ops/sec; est completion in 30 minutes [INSERT: Count=2360749, Max=41567, Min=279, Avg=1692.47, 90=3007, 99=10263, 99.9=23151, 99.99=31967] 
2023-03-13 22:02:58:526 330 sec: 76435810 operations; 232942.8 current ops/sec; est completion in 30 minutes [INSERT: Count=2329448, Max=63071, Min=275, Avg=1715.35, 90=3085, 99=10543, 99.9=22031, 99.99=39103] 
2023-03-13 22:03:08:526 340 sec: 78743289 operations; 230747.9 current ops/sec; est completion in 30 minutes [INSERT: Count=2307431, Max=46431, Min=271, Avg=1731.71, 90=3037, 99=9551, 99.9=20511, 99.99=31295] 
2023-03-13 22:03:18:526 350 sec: 81005899 operations; 226261 current ops/sec; est completion in 30 minutes [INSERT: Count=2262609, Max=64671, Min=278, Avg=1766.23, 90=2993, 99=8107, 99.9=18863, 99.99=39935] 
2023-03-13 22:03:28:526 360 sec: 83251264 operations; 224536.5 current ops/sec; est completion in 30 minutes [INSERT: Count=2245397, Max=128319, Min=268, Avg=1779.71, 90=2927, 99=8511, 99.9=17823, 99.99=42527] 
2023-03-13 22:03:38:526 370 sec: 85513077 operations; 226181.3 current ops/sec; est completion in 29 minutes [INSERT: Count=2261864, Max=71551, Min=285, Avg=1766.67, 90=2923, 99=8391, 99.9=17183, 99.99=27679] 
2023-03-13 22:03:48:526 380 sec: 87757027 operations; 224395 current ops/sec; est completion in 29 minutes [INSERT: Count=2243919, Max=98111, Min=286, Avg=1780.81, 90=2927, 99=8639, 99.9=22895, 99.99=59007] 
2023-03-13 22:03:58:526 390 sec: 90002104 operations; 224507.7 current ops/sec; est completion in 29 minutes [INSERT: Count=2245069, Max=73791, Min=291, Avg=1779.94, 90=2869, 99=8567, 99.9=18303, 99.99=39135] 
2023-03-13 22:04:08:526 400 sec: 92277817 operations; 227571.3 current ops/sec; est completion in 29 minutes [INSERT: Count=2275691, Max=61471, Min=287, Avg=1755.85, 90=2853, 99=8247, 99.9=17807, 99.99=34815] 
2023-03-13 22:04:18:526 410 sec: 94565201 operations; 228738.4 current ops/sec; est completion in 29 minutes [INSERT: Count=2287371, Max=97855, Min=288, Avg=1746.79, 90=2947, 99=8303, 99.9=17183, 99.99=26207] 
2023-03-13 22:04:28:526 420 sec: 96863566 operations; 229836.5 current ops/sec; est completion in 29 minutes [INSERT: Count=2298378, Max=136703, Min=279, Avg=1738.77, 90=2947, 99=9399, 99.9=18991, 99.99=46303] 
2023-03-13 22:04:38:526 430 sec: 99144807 operations; 228124.1 current ops/sec; est completion in 28 minutes [INSERT: Count=2281222, Max=58239, Min=272, Avg=1751.52, 90=2971, 99=10135, 99.9=19455, 99.99=40383] 
2023-03-13 22:04:48:526 440 sec: 101432182 operations; 228737.5 current ops/sec; est completion in 28 minutes [INSERT: Count=2287409, Max=141695, Min=278, Avg=1747.11, 90=2947, 99=9511, 99.9=19999, 99.99=49119] 
2023-03-13 22:04:58:526 450 sec: 103734341 operations; 230215.9 current ops/sec; est completion in 28 minutes [INSERT: Count=2302145, Max=59807, Min=271, Avg=1735.7, 90=2943, 99=9999, 99.9=22607, 99.99=31023] 
2023-03-13 22:05:08:526 460 sec: 106067338 operations; 233299.7 current ops/sec; est completion in 28 minutes [INSERT: Count=2332915, Max=112511, Min=287, Avg=1711.96, 90=2903, 99=9623, 99.9=17967, 99.99=32431] 
2023-03-13 22:05:18:526 470 sec: 108430480 operations; 236314.2 current ops/sec; est completion in 28 minutes [INSERT: Count=2363227, Max=44511, Min=271, Avg=1691.77, 90=2979, 99=9711, 99.9=20495, 99.99=31103] 
2023-03-13 22:05:28:526 480 sec: 110752530 operations; 232205 current ops/sec; est completion in 28 minutes [INSERT: Count=2322062, Max=46431, Min=271, Avg=1720.78, 90=3091, 99=9799, 99.9=19583, 99.99=29503] 
2023-03-13 22:05:38:526 490 sec: 113109448 operations; 235691.8 current ops/sec; est completion in 27 minutes [INSERT: Count=2356914, Max=53471, Min=278, Avg=1695.32, 90=3011, 99=8951, 99.9=20175, 99.99=30559] 
2023-03-13 22:05:48:526 500 sec: 115458624 operations; 234917.6 current ops/sec; est completion in 27 minutes [INSERT: Count=2349180, Max=51807, Min=274, Avg=1700.81, 90=3059, 99=10447, 99.9=21087, 99.99=30351] 
2023-03-13 22:05:58:526 510 sec: 117819095 operations; 236047.1 current ops/sec; est completion in 27 minutes [INSERT: Count=2360400, Max=47295, Min=278, Avg=1691.91, 90=3063, 99=9391, 99.9=18911, 99.99=40447] 
2023-03-13 22:06:08:526 520 sec: 120173111 operations; 235401.6 current ops/sec; est completion in 27 minutes [INSERT: Count=2354084, Max=45375, Min=271, Avg=1698.39, 90=2995, 99=9287, 99.9=18783, 99.99=35839] 
2023-03-13 22:06:18:526 530 sec: 122461971 operations; 228886 current ops/sec; est completion in 27 minutes [INSERT: Count=2288858, Max=39775, Min=274, Avg=1745.9, 90=3037, 99=9127, 99.9=18559, 99.99=32655] 
2023-03-13 22:06:28:526 540 sec: 124741516 operations; 227954.5 current ops/sec; est completion in 27 minutes [INSERT: Count=2279551, Max=42527, Min=272, Avg=1752.93, 90=2987, 99=8551, 99.9=17087, 99.99=35967] 
2023-03-13 22:06:38:526 550 sec: 127058415 operations; 231689.9 current ops/sec; est completion in 26 minutes [INSERT: Count=2316878, Max=42079, Min=267, Avg=1724.65, 90=2879, 99=7819, 99.9=16767, 99.99=25663] 
2023-03-13 22:06:48:526 560 sec: 129376048 operations; 231763.3 current ops/sec; est completion in 26 minutes [INSERT: Count=2317630, Max=36831, Min=295, Avg=1724.05, 90=2849, 99=8359, 99.9=16159, 99.99=22047] 
2023-03-13 22:06:58:526 570 sec: 131701191 operations; 232514.3 current ops/sec; est completion in 26 minutes [INSERT: Count=2325069, Max=48543, Min=285, Avg=1715.32, 90=2887, 99=9887, 99.9=19071, 99.99=28863] 
2023-03-13 22:07:08:526 580 sec: 134035721 operations; 233453 current ops/sec; est completion in 26 minutes [INSERT: Count=2334588, Max=118975, Min=286, Avg=1714.83, 90=2951, 99=9391, 99.9=22367, 99.99=69375] 
2023-03-13 22:07:18:526 590 sec: 136355937 operations; 232021.6 current ops/sec; est completion in 26 minutes [INSERT: Count=2320221, Max=117759, Min=277, Avg=1722.22, 90=2969, 99=9287, 99.9=21887, 99.99=43135] 
2023-03-13 22:07:28:526 600 sec: 138703358 operations; 234742.1 current ops/sec; est completion in 26 minutes [INSERT: Count=2347424, Max=59359, Min=258, Avg=1702.11, 90=3033, 99=9639, 99.9=18655, 99.99=26511] 
2023-03-13 22:07:38:526 610 sec: 141035345 operations; 233198.7 current ops/sec; est completion in 25 minutes [INSERT: Count=2331980, Max=53119, Min=276, Avg=1713.57, 90=2975, 99=9775, 99.9=19887, 99.99=32895] 
2023-03-13 22:07:48:526 620 sec: 143371654 operations; 233630.9 current ops/sec; est completion in 25 minutes [INSERT: Count=2336319, Max=47775, Min=269, Avg=1710.3, 90=3017, 99=9079, 99.9=19487, 99.99=36319] 
2023-03-13 22:07:58:526 630 sec: 145688473 operations; 231681.9 current ops/sec; est completion in 25 minutes [INSERT: Count=2316797, Max=121599, Min=275, Avg=1724.45, 90=2963, 99=8711, 99.9=19039, 99.99=49503] 
2023-03-13 22:08:08:526 640 sec: 148008846 operations; 232037.3 current ops/sec; est completion in 25 minutes [INSERT: Count=2320417, Max=109695, Min=273, Avg=1722.34, 90=3007, 99=9327, 99.9=24383, 99.99=34943] 
2023-03-13 22:08:18:526 650 sec: 150337808 operations; 232896.2 current ops/sec; est completion in 25 minutes [INSERT: Count=2328946, Max=35935, Min=275, Avg=1715.75, 90=2917, 99=9583, 99.9=19215, 99.99=28575] 
2023-03-13 22:08:28:526 660 sec: 152681998 operations; 234419 current ops/sec; est completion in 25 minutes [INSERT: Count=2344192, Max=32319, Min=279, Avg=1704.39, 90=2981, 99=9135, 99.9=16927, 99.99=23119] 
2023-03-13 22:08:38:526 670 sec: 155046791 operations; 236479.3 current ops/sec; est completion in 24 minutes [INSERT: Count=2364787, Max=39775, Min=271, Avg=1689.9, 90=3089, 99=9351, 99.9=18591, 99.99=25487] 
2023-03-13 22:08:48:526 680 sec: 157384605 operations; 233781.4 current ops/sec; est completion in 24 minutes [INSERT: Count=2337805, Max=37791, Min=274, Avg=1709.12, 90=3061, 99=10247, 99.9=20575, 99.99=29519] 
2023-03-13 22:08:58:526 690 sec: 159726496 operations; 234189.1 current ops/sec; est completion in 24 minutes [INSERT: Count=2341893, Max=52671, Min=272, Avg=1706.25, 90=2983, 99=9247, 99.9=20383, 99.99=32895] 
2023-03-13 22:09:08:526 700 sec: 162052018 operations; 232552.2 current ops/sec; est completion in 24 minutes [INSERT: Count=2325528, Max=108735, Min=271, Avg=1718.34, 90=2989, 99=9367, 99.9=20655, 99.99=102335] 
2023-03-13 22:09:18:526 710 sec: 164383946 operations; 233192.8 current ops/sec; est completion in 24 minutes [INSERT: Count=2331915, Max=45631, Min=277, Avg=1713.51, 90=3045, 99=9287, 99.9=18607, 99.99=27247] 
2023-03-13 22:09:28:526 720 sec: 166727934 operations; 234398.8 current ops/sec; est completion in 24 minutes [INSERT: Count=2343974, Max=37055, Min=271, Avg=1704.79, 90=2995, 99=7951, 99.9=15935, 99.99=25407] 
2023-03-13 22:09:38:526 730 sec: 169012617 operations; 228468.3 current ops/sec; est completion in 23 minutes [INSERT: Count=2284682, Max=46303, Min=279, Avg=1748.8, 90=2967, 99=8703, 99.9=20191, 99.99=39583] 
2023-03-13 22:09:48:526 740 sec: 171311391 operations; 229877.4 current ops/sec; est completion in 23 minutes [INSERT: Count=2298783, Max=40127, Min=277, Avg=1738.44, 90=2893, 99=9127, 99.9=18223, 99.99=28895] 
2023-03-13 22:09:58:526 750 sec: 173629371 operations; 231798 current ops/sec; est completion in 23 minutes [INSERT: Count=2317987, Max=28063, Min=275, Avg=1723.89, 90=2799, 99=8095, 99.9=16399, 99.99=24399] 
2023-03-13 22:10:08:526 760 sec: 175892076 operations; 226270.5 current ops/sec; est completion in 23 minutes [INSERT: Count=2262685, Max=36479, Min=280, Avg=1765.98, 90=2807, 99=9743, 99.9=17887, 99.99=28239] 
2023-03-13 22:10:18:526 770 sec: 178202643 operations; 231056.7 current ops/sec; est completion in 23 minutes [INSERT: Count=2310563, Max=40319, Min=287, Avg=1729.42, 90=2835, 99=8439, 99.9=19103, 99.99=27647] 
2023-03-13 22:10:28:526 780 sec: 180490442 operations; 228779.9 current ops/sec; est completion in 23 minutes [INSERT: Count=2287818, Max=104639, Min=286, Avg=1746.54, 90=2863, 99=8799, 99.9=19375, 99.99=42687] 
2023-03-13 22:10:38:534 790 sec: 182796973 operations; 230468.73 current ops/sec; est completion in 22 minutes [INSERT: Count=2306543, Max=42975, Min=292, Avg=1732.61, 90=2833, 99=8247, 99.9=17807, 99.99=36863] 
2023-03-13 22:10:48:526 800 sec: 185096620 operations; 230148.82 current ops/sec; est completion in 22 minutes [INSERT: Count=2299627, Max=34527, Min=284, Avg=1737.49, 90=2779, 99=7583, 99.9=16975, 99.99=30191] 
2023-03-13 22:10:58:526 810 sec: 187378372 operations; 228175.2 current ops/sec; est completion in 22 minutes [INSERT: Count=2281762, Max=218239, Min=278, Avg=1751.19, 90=2811, 99=7415, 99.9=17711, 99.99=124735] 
2023-03-13 22:11:08:526 820 sec: 189665423 operations; 228705.1 current ops/sec; est completion in 22 minutes [INSERT: Count=2287043, Max=142207, Min=288, Avg=1747.17, 90=2819, 99=7959, 99.9=17567, 99.99=53471] 
2023-03-13 22:11:18:526 830 sec: 191966912 operations; 230148.9 current ops/sec; est completion in 22 minutes [INSERT: Count=2301483, Max=40607, Min=283, Avg=1736.27, 90=2833, 99=7843, 99.9=17135, 99.99=33823] 
2023-03-13 22:11:28:526 840 sec: 194256334 operations; 228942.2 current ops/sec; est completion in 22 minutes [INSERT: Count=2289423, Max=47967, Min=287, Avg=1745.39, 90=2863, 99=7915, 99.9=18079, 99.99=28687] 
2023-03-13 22:11:38:526 850 sec: 196538482 operations; 228214.8 current ops/sec; est completion in 21 minutes [INSERT: Count=2282161, Max=104767, Min=287, Avg=1750.81, 90=2849, 99=7543, 99.9=17727, 99.99=28207] 
2023-03-13 22:11:48:526 860 sec: 198841438 operations; 230295.6 current ops/sec; est completion in 21 minutes [INSERT: Count=2302948, Max=35551, Min=288, Avg=1735.28, 90=2807, 99=7687, 99.9=17647, 99.99=27695] 
2023-03-13 22:11:58:526 870 sec: 201115859 operations; 227442.1 current ops/sec; est completion in 21 minutes [INSERT: Count=2274419, Max=164863, Min=268, Avg=1756.93, 90=2825, 99=7071, 99.9=16415, 99.99=99455] 
2023-03-13 22:12:08:526 880 sec: 203427278 operations; 231141.9 current ops/sec; est completion in 21 minutes [INSERT: Count=2311428, Max=32511, Min=283, Avg=1728.7, 90=2823, 99=7403, 99.9=15967, 99.99=22735] 
2023-03-13 22:12:18:526 890 sec: 205709031 operations; 228175.3 current ops/sec; est completion in 21 minutes [INSERT: Count=2281738, Max=40511, Min=286, Avg=1751.31, 90=2761, 99=7807, 99.9=20239, 99.99=29615] 
2023-03-13 22:12:28:526 900 sec: 207979158 operations; 227012.7 current ops/sec; est completion in 21 minutes [INSERT: Count=2270132, Max=212479, Min=276, Avg=1760.05, 90=2789, 99=7995, 99.9=19023, 99.99=130943] 
2023-03-13 22:12:38:526 910 sec: 210289862 operations; 231070.4 current ops/sec; est completion in 20 minutes [INSERT: Count=2310705, Max=33151, Min=284, Avg=1729.49, 90=2711, 99=7275, 99.9=17439, 99.99=26959] 
2023-03-13 22:12:48:526 920 sec: 212563634 operations; 227377.2 current ops/sec; est completion in 20 minutes [INSERT: Count=2273774, Max=43519, Min=288, Avg=1757.4, 90=2877, 99=8179, 99.9=17791, 99.99=36927] 
2023-03-13 22:12:58:526 930 sec: 214877890 operations; 231425.6 current ops/sec; est completion in 20 minutes [INSERT: Count=2314249, Max=213887, Min=263, Avg=1726.54, 90=2875, 99=8591, 99.9=20847, 99.99=116927] 
2023-03-13 22:13:08:526 940 sec: 217181866 operations; 230397.6 current ops/sec; est completion in 20 minutes [INSERT: Count=2303982, Max=121855, Min=277, Avg=1734.41, 90=2821, 99=8231, 99.9=21839, 99.99=49375] 
2023-03-13 22:13:18:526 950 sec: 219540753 operations; 235888.7 current ops/sec; est completion in 20 minutes [INSERT: Count=2358895, Max=32175, Min=286, Avg=1693.99, 90=2827, 99=8247, 99.9=16559, 99.99=22639] 
2023-03-13 22:13:28:526 960 sec: 221846911 operations; 230615.8 current ops/sec; est completion in 20 minutes [INSERT: Count=2306147, Max=145663, Min=299, Avg=1732.66, 90=2727, 99=8391, 99.9=26127, 99.99=90943] 
2023-03-13 22:13:38:526 970 sec: 224216732 operations; 236982.1 current ops/sec; est completion in 19 minutes [INSERT: Count=2369844, Max=42463, Min=290, Avg=1686.12, 90=2949, 99=8543, 99.9=17711, 99.99=35391] 
2023-03-13 22:13:48:526 980 sec: 226572489 operations; 235575.7 current ops/sec; est completion in 19 minutes [INSERT: Count=2355735, Max=40031, Min=288, Avg=1696.05, 90=2917, 99=9239, 99.9=18543, 99.99=35039] 
2023-03-13 22:13:58:526 990 sec: 228905194 operations; 233270.5 current ops/sec; est completion in 19 minutes [INSERT: Count=2332721, Max=48255, Min=270, Avg=1713.1, 90=3011, 99=9663, 99.9=19855, 99.99=29359] 
2023-03-13 22:14:08:526 1000 sec: 231246271 operations; 234107.7 current ops/sec; est completion in 19 minutes [INSERT: Count=2341058, Max=49087, Min=270, Avg=1706.86, 90=2989, 99=9639, 99.9=20319, 99.99=35487] 
2023-03-13 22:14:18:526 1010 sec: 233568222 operations; 232195.1 current ops/sec; est completion in 19 minutes [INSERT: Count=2321956, Max=94207, Min=268, Avg=1720.93, 90=2857, 99=7667, 99.9=17391, 99.99=38367] 
2023-03-13 22:14:28:526 1020 sec: 235894132 operations; 232591 current ops/sec; est completion in 19 minutes [INSERT: Count=2325908, Max=127743, Min=271, Avg=1718, 90=2977, 99=9247, 99.9=20559, 99.99=39807] 
2023-03-13 22:14:38:526 1030 sec: 238246850 operations; 235271.8 current ops/sec; est completion in 18 minutes [INSERT: Count=2352741, Max=36191, Min=280, Avg=1698.33, 90=2933, 99=9247, 99.9=18591, 99.99=29839] 
2023-03-13 22:14:48:526 1040 sec: 240642177 operations; 239532.7 current ops/sec; est completion in 18 minutes [INSERT: Count=2395292, Max=41311, Min=275, Avg=1668.14, 90=2819, 99=8327, 99.9=16911, 99.99=35039] 
2023-03-13 22:14:58:526 1050 sec: 242988795 operations; 234661.8 current ops/sec; est completion in 18 minutes [INSERT: Count=2346627, Max=126463, Min=272, Avg=1702.78, 90=2897, 99=9063, 99.9=21183, 99.99=113727] 
2023-03-13 22:15:08:526 1060 sec: 245332685 operations; 234389 current ops/sec; est completion in 18 minutes [INSERT: Count=2343880, Max=47551, Min=275, Avg=1704.75, 90=2985, 99=9007, 99.9=20239, 99.99=41311] 
2023-03-13 22:15:18:526 1070 sec: 247686294 operations; 235360.9 current ops/sec; est completion in 18 minutes [INSERT: Count=2353614, Max=48127, Min=275, Avg=1697.7, 90=3015, 99=9807, 99.9=19999, 99.99=30879] 
2023-03-13 22:15:28:526 1080 sec: 250013731 operations; 232743.7 current ops/sec; est completion in 18 minutes [INSERT: Count=2327432, Max=34399, Min=274, Avg=1716.85, 90=3043, 99=9303, 99.9=17999, 99.99=26975] 
2023-03-13 22:15:38:526 1090 sec: 252338062 operations; 232433.1 current ops/sec; est completion in 17 minutes [INSERT: Count=2324338, Max=47391, Min=277, Avg=1719.24, 90=3061, 99=9519, 99.9=21807, 99.99=37311] 
2023-03-13 22:15:48:526 1100 sec: 254656072 operations; 231801 current ops/sec; est completion in 17 minutes [INSERT: Count=2318011, Max=42399, Min=269, Avg=1723.85, 90=2925, 99=9215, 99.9=17935, 99.99=31391] 
2023-03-13 22:15:58:526 1110 sec: 256952712 operations; 229664 current ops/sec; est completion in 17 minutes [INSERT: Count=2296640, Max=45215, Min=272, Avg=1739.95, 90=2885, 99=7559, 99.9=17295, 99.99=26143] 
2023-03-13 22:16:08:526 1120 sec: 259268603 operations; 231589.1 current ops/sec; est completion in 17 minutes [INSERT: Count=2315890, Max=42783, Min=274, Avg=1725.3, 90=2983, 99=8171, 99.9=18175, 99.99=26895] 
2023-03-13 22:16:18:526 1130 sec: 261569697 operations; 230109.4 current ops/sec; est completion in 17 minutes [INSERT: Count=2301062, Max=46047, Min=274, Avg=1735.43, 90=2907, 99=8415, 99.9=19455, 99.99=32351] 
2023-03-13 22:16:28:526 1140 sec: 263851046 operations; 228134.9 current ops/sec; est completion in 17 minutes [INSERT: Count=2281379, Max=135935, Min=265, Avg=1752.73, 90=2859, 99=9231, 99.9=17039, 99.99=92095] 
2023-03-13 22:16:38:526 1150 sec: 266161580 operations; 231053.4 current ops/sec; est completion in 16 minutes [INSERT: Count=2310535, Max=44351, Min=278, Avg=1729.42, 90=2841, 99=8071, 99.9=17567, 99.99=24463] 
2023-03-13 22:16:48:526 1160 sec: 268462918 operations; 230133.8 current ops/sec; est completion in 16 minutes [INSERT: Count=2301341, Max=45343, Min=283, Avg=1736.37, 90=2809, 99=8179, 99.9=22319, 99.99=37151] 
2023-03-13 22:16:58:526 1170 sec: 270756483 operations; 229356.5 current ops/sec; est completion in 16 minutes [INSERT: Count=2293559, Max=134783, Min=284, Avg=1742.28, 90=2821, 99=7863, 99.9=17567, 99.99=58847] 
2023-03-13 22:17:08:526 1180 sec: 273083228 operations; 232674.5 current ops/sec; est completion in 16 minutes [INSERT: Count=2326752, Max=69247, Min=277, Avg=1717.38, 90=2895, 99=8855, 99.9=17583, 99.99=31487] 
2023-03-13 22:17:18:526 1190 sec: 275410486 operations; 232725.8 current ops/sec; est completion in 16 minutes [INSERT: Count=2327271, Max=42975, Min=278, Avg=1716.96, 90=2857, 99=9119, 99.9=18303, 99.99=33215] 
2023-03-13 22:17:28:526 1200 sec: 277691324 operations; 228083.8 current ops/sec; est completion in 16 minutes [INSERT: Count=2280831, Max=130559, Min=286, Avg=1751.73, 90=2881, 99=8607, 99.9=18959, 99.99=81087] 
2023-03-13 22:17:38:526 1210 sec: 279987859 operations; 229653.5 current ops/sec; est completion in 15 minutes [INSERT: Count=2296529, Max=41375, Min=283, Avg=1740.1, 90=2967, 99=9495, 99.9=19919, 99.99=28399] 
2023-03-13 22:17:48:526 1220 sec: 282312805 operations; 232494.6 current ops/sec; est completion in 15 minutes [INSERT: Count=2324929, Max=39807, Min=279, Avg=1718.69, 90=2857, 99=9455, 99.9=19375, 99.99=32111] 
2023-03-13 22:17:58:526 1230 sec: 284652077 operations; 233927.2 current ops/sec; est completion in 15 minutes [INSERT: Count=2339280, Max=42975, Min=273, Avg=1708.13, 90=2851, 99=8551, 99.9=19167, 99.99=30799] 
2023-03-13 22:18:08:526 1240 sec: 287008526 operations; 235644.9 current ops/sec; est completion in 15 minutes [INSERT: Count=2356455, Max=64607, Min=271, Avg=1695.69, 90=2919, 99=9191, 99.9=19359, 99.99=29599] 
2023-03-13 22:18:18:526 1250 sec: 289384483 operations; 237595.7 current ops/sec; est completion in 15 minutes [INSERT: Count=2375946, Max=28319, Min=281, Avg=1681.79, 90=2881, 99=8287, 99.9=16511, 99.99=21039] 
2023-03-13 22:18:28:526 1260 sec: 291702661 operations; 231817.8 current ops/sec; est completion in 15 minutes [INSERT: Count=2318191, Max=82623, Min=277, Avg=1723.7, 90=2913, 99=8983, 99.9=18111, 99.99=28511] 
2023-03-13 22:18:38:526 1270 sec: 294027219 operations; 232455.8 current ops/sec; est completion in 14 minutes [INSERT: Count=2324556, Max=57823, Min=275, Avg=1718.88, 90=2995, 99=8951, 99.9=17983, 99.99=50303] 
2023-03-13 22:18:48:526 1280 sec: 296343931 operations; 231671.2 current ops/sec; est completion in 14 minutes [INSERT: Count=2316723, Max=83327, Min=260, Avg=1724.86, 90=2943, 99=9823, 99.9=21951, 99.99=36383] 
2023-03-13 22:18:58:526 1290 sec: 298674588 operations; 233065.7 current ops/sec; est completion in 14 minutes [INSERT: Count=2330669, Max=54271, Min=272, Avg=1714.5, 90=2967, 99=8759, 99.9=16575, 99.99=22495] 
2023-03-13 22:19:08:527 1300 sec: 300955771 operations; 228095.49 current ops/sec; est completion in 14 minutes [INSERT: Count=2281178, Max=165119, Min=266, Avg=1750.45, 90=2957, 99=9447, 99.9=21743, 99.99=105471] 
2023-03-13 22:19:18:526 1310 sec: 303261570 operations; 230602.96 current ops/sec; est completion in 14 minutes [INSERT: Count=2305785, Max=39903, Min=279, Avg=1734.22, 90=2981, 99=9847, 99.9=19855, 99.99=28447] 
2023-03-13 22:19:28:526 1320 sec: 305593351 operations; 233178.1 current ops/sec; est completion in 14 minutes [INSERT: Count=2331779, Max=125951, Min=275, Avg=1713.61, 90=2921, 99=8519, 99.9=18495, 99.99=38207] 
2023-03-13 22:19:38:526 1330 sec: 307943166 operations; 234981.5 current ops/sec; est completion in 13 minutes [INSERT: Count=2349775, Max=57439, Min=265, Avg=1699.29, 90=2841, 99=8615, 99.9=17471, 99.99=25055] 
2023-03-13 22:19:48:526 1340 sec: 310328790 operations; 238562.4 current ops/sec; est completion in 13 minutes [INSERT: Count=2385664, Max=37919, Min=279, Avg=1676.2, 90=2851, 99=9015, 99.9=18543, 99.99=26559] 
2023-03-13 22:19:58:526 1350 sec: 312670076 operations; 234128.6 current ops/sec; est completion in 13 minutes [INSERT: Count=2341283, Max=42463, Min=281, Avg=1706.62, 90=2767, 99=8759, 99.9=17407, 99.99=28303] 
2023-03-13 22:20:08:526 1360 sec: 314997105 operations; 232702.9 current ops/sec; est completion in 13 minutes [INSERT: Count=2327034, Max=36703, Min=291, Avg=1717.07, 90=2871, 99=8791, 99.9=18239, 99.99=26303] 
2023-03-13 22:20:18:526 1370 sec: 317357899 operations; 236079.4 current ops/sec; est completion in 13 minutes [INSERT: Count=2360791, Max=78271, Min=291, Avg=1692.63, 90=2929, 99=9279, 99.9=17711, 99.99=72831] 
2023-03-13 22:20:28:526 1380 sec: 319703375 operations; 234547.6 current ops/sec; est completion in 12 minutes [INSERT: Count=2345461, Max=92415, Min=267, Avg=1698.09, 90=2961, 99=8903, 99.9=18399, 99.99=30207] 
2023-03-13 22:20:38:526 1390 sec: 322044008 operations; 234063.3 current ops/sec; est completion in 12 minutes [INSERT: Count=2340648, Max=119743, Min=274, Avg=1712.74, 90=2917, 99=8695, 99.9=19247, 99.99=43039] 
2023-03-13 22:20:48:526 1400 sec: 324417378 operations; 237337 current ops/sec; est completion in 12 minutes [INSERT: Count=2373375, Max=34207, Min=280, Avg=1683.71, 90=2959, 99=8591, 99.9=17711, 99.99=25951] 
2023-03-13 22:20:58:526 1410 sec: 326736526 operations; 231914.8 current ops/sec; est completion in 12 minutes [INSERT: Count=2319139, Max=110847, Min=274, Avg=1722.94, 90=3069, 99=10279, 99.9=21199, 99.99=44415] 
2023-03-13 22:21:08:526 1420 sec: 329028333 operations; 229180.7 current ops/sec; est completion in 12 minutes [INSERT: Count=2291806, Max=55647, Min=273, Avg=1743.68, 90=2945, 99=9663, 99.9=23983, 99.99=32367] 
2023-03-13 22:21:18:526 1430 sec: 331312281 operations; 228394.8 current ops/sec; est completion in 12 minutes [INSERT: Count=2283947, Max=98751, Min=266, Avg=1749.43, 90=2895, 99=9279, 99.9=21055, 99.99=39455] 
2023-03-13 22:21:28:526 1440 sec: 333632561 operations; 232028 current ops/sec; est completion in 11 minutes [INSERT: Count=2320278, Max=51615, Min=276, Avg=1722.26, 90=2991, 99=9607, 99.9=20863, 99.99=39967] 
2023-03-13 22:21:38:526 1450 sec: 335923625 operations; 229106.4 current ops/sec; est completion in 11 minutes [INSERT: Count=2291063, Max=39679, Min=282, Avg=1744.24, 90=2869, 99=9199, 99.9=19807, 99.99=29663] 
2023-03-13 22:21:48:526 1460 sec: 338228001 operations; 230437.6 current ops/sec; est completion in 11 minutes [INSERT: Count=2304371, Max=55519, Min=260, Avg=1733.26, 90=3015, 99=10247, 99.9=20479, 99.99=31327] 
2023-03-13 22:21:58:526 1470 sec: 340553516 operations; 232551.5 current ops/sec; est completion in 11 minutes [INSERT: Count=2325552, Max=87295, Min=273, Avg=1719.23, 90=3023, 99=9735, 99.9=21631, 99.99=30095] 
2023-03-13 22:22:08:526 1480 sec: 342852466 operations; 229895 current ops/sec; est completion in 11 minutes [INSERT: Count=2298949, Max=146559, Min=273, Avg=1738.2, 90=2987, 99=8799, 99.9=20559, 99.99=79679] 
2023-03-13 22:22:18:526 1490 sec: 345171049 operations; 231858.3 current ops/sec; est completion in 11 minutes [INSERT: Count=2318583, Max=47935, Min=276, Avg=1723.45, 90=2943, 99=8191, 99.9=16847, 99.99=37087] 
2023-03-13 22:22:28:526 1500 sec: 347488722 operations; 231767.3 current ops/sec; est completion in 10 minutes [INSERT: Count=2317663, Max=40159, Min=257, Avg=1724.05, 90=2939, 99=8703, 99.9=18959, 99.99=28415] 
2023-03-13 22:22:38:526 1510 sec: 349826205 operations; 233748.3 current ops/sec; est completion in 10 minutes [INSERT: Count=2337500, Max=91199, Min=275, Avg=1709.57, 90=2917, 99=8703, 99.9=18479, 99.99=31455] 
2023-03-13 22:22:48:526 1520 sec: 352121745 operations; 229554 current ops/sec; est completion in 10 minutes [INSERT: Count=2295529, Max=50175, Min=268, Avg=1740.86, 90=2867, 99=8343, 99.9=17775, 99.99=41087] 
2023-03-13 22:22:58:526 1530 sec: 354436363 operations; 231461.8 current ops/sec; est completion in 10 minutes [INSERT: Count=2314621, Max=37823, Min=276, Avg=1726.44, 90=2787, 99=7299, 99.9=17087, 99.99=27455] 
2023-03-13 22:23:08:526 1540 sec: 356752029 operations; 231566.6 current ops/sec; est completion in 10 minutes [INSERT: Count=2315663, Max=135295, Min=267, Avg=1725.66, 90=2837, 99=7959, 99.9=18287, 99.99=81087] 
2023-03-13 22:23:18:526 1550 sec: 359059754 operations; 230772.5 current ops/sec; est completion in 10 minutes [INSERT: Count=2307728, Max=35263, Min=286, Avg=1731.6, 90=2775, 99=7819, 99.9=16183, 99.99=25199] 
2023-03-13 22:23:28:526 1560 sec: 361358718 operations; 229896.4 current ops/sec; est completion in 9 minutes [INSERT: Count=2298938, Max=87039, Min=283, Avg=1738.12, 90=2809, 99=8039, 99.9=18975, 99.99=33887] 
2023-03-13 22:23:38:526 1570 sec: 363641616 operations; 228289.8 current ops/sec; est completion in 9 minutes [INSERT: Count=2282897, Max=52703, Min=286, Avg=1750.46, 90=2871, 99=8855, 99.9=19391, 99.99=26719] 
2023-03-13 22:23:48:526 1580 sec: 365956790 operations; 231517.4 current ops/sec; est completion in 9 minutes [INSERT: Count=2315178, Max=45535, Min=280, Avg=1726, 90=2865, 99=7755, 99.9=16639, 99.99=35711] 
2023-03-13 22:23:58:526 1590 sec: 368255345 operations; 229855.5 current ops/sec; est completion in 9 minutes [INSERT: Count=2298543, Max=36799, Min=283, Avg=1738.42, 90=2855, 99=7775, 99.9=17759, 99.99=28623] 
2023-03-13 22:24:08:526 1600 sec: 370540832 operations; 228548.7 current ops/sec; est completion in 9 minutes [INSERT: Count=2285489, Max=42303, Min=279, Avg=1748.48, 90=2849, 99=8527, 99.9=19663, 99.99=27823] 
2023-03-13 22:24:18:526 1610 sec: 372876071 operations; 233523.9 current ops/sec; est completion in 9 minutes [INSERT: Count=2335243, Max=35647, Min=279, Avg=1710.96, 90=2795, 99=7995, 99.9=17311, 99.99=26815] 
2023-03-13 22:24:28:526 1620 sec: 375207815 operations; 233174.4 current ops/sec; est completion in 8 minutes [INSERT: Count=2331743, Max=37663, Min=281, Avg=1713.9, 90=2797, 99=7559, 99.9=15799, 99.99=24351] 
2023-03-13 22:24:38:526 1630 sec: 377459220 operations; 225140.5 current ops/sec; est completion in 8 minutes [INSERT: Count=2251422, Max=282879, Min=275, Avg=1774.93, 90=2789, 99=7443, 99.9=17423, 99.99=201855] 
2023-03-13 22:24:48:526 1640 sec: 379710063 operations; 225084.3 current ops/sec; est completion in 8 minutes [INSERT: Count=2250821, Max=231039, Min=282, Avg=1775.42, 90=2805, 99=7083, 99.9=19375, 99.99=144767] 
2023-03-13 22:24:58:526 1650 sec: 382018480 operations; 230841.7 current ops/sec; est completion in 8 minutes [INSERT: Count=2308429, Max=32927, Min=281, Avg=1731.03, 90=2775, 99=7567, 99.9=16831, 99.99=25615] 
2023-03-13 22:25:08:526 1660 sec: 384320216 operations; 230173.6 current ops/sec; est completion in 8 minutes [INSERT: Count=2301743, Max=50943, Min=283, Avg=1736.11, 90=2771, 99=7979, 99.9=19567, 99.99=33663] 
2023-03-13 22:25:18:526 1670 sec: 386612407 operations; 229219.1 current ops/sec; est completion in 8 minutes [INSERT: Count=2292155, Max=38335, Min=288, Avg=1730.68, 90=2741, 99=7203, 99.9=15367, 99.99=27695] 
2023-03-13 22:25:28:526 1680 sec: 388875606 operations; 226319.9 current ops/sec; est completion in 8 minutes [INSERT: Count=2263228, Max=239103, Min=284, Avg=1778.49, 90=2799, 99=7759, 99.9=17471, 99.99=185215] 
2023-03-13 22:25:38:526 1690 sec: 391166287 operations; 229068.1 current ops/sec; est completion in 7 minutes [INSERT: Count=2290678, Max=135935, Min=287, Avg=1744.44, 90=2761, 99=7811, 99.9=23551, 99.99=52511] 
2023-03-13 22:25:48:526 1700 sec: 393465924 operations; 229963.7 current ops/sec; est completion in 7 minutes [INSERT: Count=2299630, Max=94719, Min=290, Avg=1737.7, 90=2761, 99=7291, 99.9=15767, 99.99=30543] 
2023-03-13 22:25:58:526 1710 sec: 395766201 operations; 230027.7 current ops/sec; est completion in 7 minutes [INSERT: Count=2300276, Max=42623, Min=286, Avg=1737.24, 90=2789, 99=7715, 99.9=18175, 99.99=27343] 
2023-03-13 22:26:08:526 1720 sec: 398084946 operations; 231874.5 current ops/sec; est completion in 7 minutes [INSERT: Count=2318750, Max=37439, Min=289, Avg=1723.3, 90=2761, 99=6903, 99.9=15223, 99.99=24415] 
2023-03-13 22:26:18:526 1730 sec: 400365407 operations; 228046.1 current ops/sec; est completion in 7 minutes [INSERT: Count=2280459, Max=139775, Min=284, Avg=1752.11, 90=2811, 99=7463, 99.9=16559, 99.99=90879] 
2023-03-13 22:26:28:526 1740 sec: 402634899 operations; 226949.2 current ops/sec; est completion in 7 minutes [INSERT: Count=2269493, Max=73215, Min=282, Avg=1760.98, 90=2777, 99=8455, 99.9=19119, 99.99=70207] 
2023-03-13 22:26:38:526 1750 sec: 404939615 operations; 230471.6 current ops/sec; est completion in 6 minutes [INSERT: Count=2304724, Max=110847, Min=281, Avg=1733.84, 90=2779, 99=7627, 99.9=17087, 99.99=32671] 
2023-03-13 22:26:48:526 1760 sec: 407229160 operations; 228954.5 current ops/sec; est completion in 6 minutes [INSERT: Count=2289537, Max=156799, Min=282, Avg=1745.39, 90=2747, 99=7471, 99.9=19071, 99.99=110783] 
2023-03-13 22:26:58:526 1770 sec: 409520211 operations; 229105.1 current ops/sec; est completion in 6 minutes [INSERT: Count=2291058, Max=40159, Min=286, Avg=1744.15, 90=2741, 99=7359, 99.9=15959, 99.99=27695] 
2023-03-13 22:27:08:526 1780 sec: 411821102 operations; 230089.1 current ops/sec; est completion in 6 minutes [INSERT: Count=2300890, Max=36511, Min=285, Avg=1736.77, 90=2771, 99=6991, 99.9=17279, 99.99=25167] 
2023-03-13 22:27:18:526 1790 sec: 414117326 operations; 229622.4 current ops/sec; est completion in 6 minutes [INSERT: Count=2296219, Max=51167, Min=285, Avg=1740.23, 90=2765, 99=7323, 99.9=17791, 99.99=29087] 
2023-03-13 22:27:28:526 1800 sec: 416399476 operations; 228215 current ops/sec; est completion in 6 minutes [INSERT: Count=2282147, Max=38143, Min=292, Avg=1750.86, 90=2773, 99=7119, 99.9=17167, 99.99=32223] 
2023-03-13 22:27:38:526 1810 sec: 418693572 operations; 229409.6 current ops/sec; est completion in 5 minutes [INSERT: Count=2294106, Max=123903, Min=275, Avg=1742.06, 90=2781, 99=7111, 99.9=16495, 99.99=72575] 
2023-03-13 22:27:48:526 1820 sec: 420973228 operations; 227965.6 current ops/sec; est completion in 5 minutes [INSERT: Count=2279653, Max=156671, Min=279, Avg=1752.93, 90=2787, 99=7511, 99.9=17263, 99.99=80575] 
2023-03-13 22:27:58:526 1830 sec: 423254663 operations; 228143.5 current ops/sec; est completion in 5 minutes [INSERT: Count=2281451, Max=40031, Min=287, Avg=1751.57, 90=2849, 99=7459, 99.9=18255, 99.99=25951] 
2023-03-13 22:28:08:526 1840 sec: 425579219 operations; 232455.6 current ops/sec; est completion in 5 minutes [INSERT: Count=2324536, Max=35903, Min=285, Avg=1718.98, 90=2795, 99=7463, 99.9=16199, 99.99=24415] 
2023-03-13 22:28:18:526 1850 sec: 427872889 operations; 229367 current ops/sec; est completion in 5 minutes [INSERT: Count=2293671, Max=247039, Min=285, Avg=1742.26, 90=2731, 99=7275, 99.9=18687, 99.99=166015] 
2023-03-13 22:28:28:526 1860 sec: 430188089 operations; 231520 current ops/sec; est completion in 5 minutes [INSERT: Count=2315209, Max=29167, Min=286, Avg=1725.98, 90=2755, 99=7779, 99.9=17951, 99.99=24415] 
2023-03-13 22:28:38:526 1870 sec: 432439934 operations; 225184.5 current ops/sec; est completion in 4 minutes [INSERT: Count=2251831, Max=207871, Min=268, Avg=1774.48, 90=2721, 99=7051, 99.9=16295, 99.99=145407] 
2023-03-13 22:28:48:526 1880 sec: 434752024 operations; 231209 current ops/sec; est completion in 4 minutes [INSERT: Count=2312091, Max=42815, Min=288, Avg=1728.36, 90=2723, 99=7751, 99.9=16231, 99.99=26111] 
2023-03-13 22:28:58:526 1890 sec: 437063246 operations; 231122.2 current ops/sec; est completion in 4 minutes [INSERT: Count=2311229, Max=36703, Min=277, Avg=1728.95, 90=2747, 99=7043, 99.9=15911, 99.99=24943] 
2023-03-13 22:29:08:526 1900 sec: 439351970 operations; 228872.4 current ops/sec; est completion in 4 minutes [INSERT: Count=2288722, Max=40319, Min=291, Avg=1745.95, 90=2753, 99=7091, 99.9=16279, 99.99=25007] 
2023-03-13 22:29:18:526 1910 sec: 441639367 operations; 228739.7 current ops/sec; est completion in 4 minutes [INSERT: Count=2287401, Max=40127, Min=289, Avg=1746.97, 90=2795, 99=7547, 99.9=21311, 99.99=35583] 
2023-03-13 22:29:28:541 1920 sec: 443937067 operations; 229448.77 current ops/sec; est completion in 4 minutes [INSERT: Count=2297711, Max=36511, Min=280, Avg=1739.61, 90=2761, 99=8359, 99.9=18479, 99.99=26799] 
2023-03-13 22:29:38:526 1930 sec: 446235368 operations; 230152.31 current ops/sec; est completion in 3 minutes [INSERT: Count=2298283, Max=93119, Min=285, Avg=1738.22, 90=2689, 99=7791, 99.9=18463, 99.99=40351] 
2023-03-13 22:29:48:526 1940 sec: 448538012 operations; 230264.4 current ops/sec; est completion in 3 minutes [INSERT: Count=2302640, Max=178431, Min=285, Avg=1735.37, 90=2789, 99=7383, 99.9=15967, 99.99=92927] 
2023-03-13 22:29:58:526 1950 sec: 450851889 operations; 231387.7 current ops/sec; est completion in 3 minutes [INSERT: Count=2313874, Max=34175, Min=282, Avg=1726.97, 90=2747, 99=7007, 99.9=16543, 99.99=24095] 
2023-03-13 22:30:08:526 1960 sec: 453091074 operations; 223918.5 current ops/sec; est completion in 3 minutes [INSERT: Count=2239192, Max=50655, Min=280, Avg=1784.58, 90=2735, 99=7503, 99.9=22815, 99.99=41663] 
2023-03-13 22:30:18:526 1970 sec: 455391639 operations; 230056.5 current ops/sec; est completion in 3 minutes [INSERT: Count=2300569, Max=193663, Min=287, Avg=1736.95, 90=2847, 99=7179, 99.9=16623, 99.99=90111] 
2023-03-13 22:30:28:526 1980 sec: 457735144 operations; 234350.5 current ops/sec; est completion in 3 minutes [INSERT: Count=2343496, Max=30991, Min=292, Avg=1705.12, 90=2849, 99=7611, 99.9=15815, 99.99=24191] 
2023-03-13 22:30:38:526 1990 sec: 460052033 operations; 231688.9 current ops/sec; est completion in 2 minutes [INSERT: Count=2316889, Max=191359, Min=263, Avg=1724.71, 90=2807, 99=8287, 99.9=19839, 99.99=139007] 
2023-03-13 22:30:48:526 2000 sec: 462376167 operations; 232413.4 current ops/sec; est completion in 2 minutes [INSERT: Count=2324144, Max=93887, Min=293, Avg=1719.33, 90=2869, 99=8135, 99.9=19615, 99.99=55775] 
2023-03-13 22:30:58:526 2010 sec: 464664841 operations; 228867.4 current ops/sec; est completion in 2 minutes [INSERT: Count=2288670, Max=91391, Min=277, Avg=1745.89, 90=2825, 99=8255, 99.9=18271, 99.99=75327] 
2023-03-13 22:31:08:526 2020 sec: 466983205 operations; 231836.4 current ops/sec; est completion in 2 minutes [INSERT: Count=2318359, Max=35743, Min=281, Avg=1723.73, 90=2821, 99=7959, 99.9=20191, 99.99=27903] 
2023-03-13 22:31:18:526 2030 sec: 469311067 operations; 232786.2 current ops/sec; est completion in 2 minutes [INSERT: Count=2327858, Max=153855, Min=270, Avg=1716.45, 90=3003, 99=9279, 99.9=22303, 99.99=79615] 
2023-03-13 22:31:28:526 2040 sec: 471692410 operations; 238134.3 current ops/sec; est completion in 2 minutes [INSERT: Count=2381345, Max=41247, Min=274, Avg=1678.1, 90=3009, 99=8591, 99.9=17007, 99.99=33087] 
2023-03-13 22:31:38:526 2050 sec: 474019080 operations; 232667 current ops/sec; est completion in 1 minute [INSERT: Count=2326675, Max=38303, Min=279, Avg=1717.51, 90=2831, 99=8051, 99.9=17119, 99.99=28575] 
2023-03-13 22:31:48:526 2060 sec: 476323961 operations; 230488.1 current ops/sec; est completion in 1 minute [INSERT: Count=2304878, Max=126847, Min=275, Avg=1733.7, 90=2891, 99=8663, 99.9=17743, 99.99=50143] 
2023-03-13 22:31:58:526 2070 sec: 478653724 operations; 232976.3 current ops/sec; est completion in 1 minute [INSERT: Count=2329778, Max=40319, Min=269, Avg=1715.16, 90=2923, 99=8335, 99.9=17167, 99.99=25471] 
2023-03-13 22:32:08:526 2080 sec: 480980308 operations; 232658.4 current ops/sec; est completion in 1 minute [INSERT: Count=2326575, Max=44031, Min=270, Avg=1717.47, 90=2975, 99=8951, 99.9=21919, 99.99=31999] 
2023-03-13 22:32:18:526 2090 sec: 483312021 operations; 233171.3 current ops/sec; est completion in 1 minute [INSERT: Count=2331712, Max=99391, Min=271, Avg=1713.79, 90=3015, 99=8839, 99.9=20335, 99.99=40767] 
2023-03-13 22:32:28:526 2100 sec: 485647556 operations; 233553.5 current ops/sec; est completion in 1 minute [INSERT: Count=2335536, Max=37375, Min=276, Avg=1710.92, 90=2977, 99=8231, 99.9=17087, 99.99=29455] 
2023-03-13 22:32:38:526 2110 sec: 487966652 operations; 231909.6 current ops/sec; est completion in 53 seconds [INSERT: Count=2319088, Max=122559, Min=281, Avg=1723.11, 90=2871, 99=9039, 99.9=21199, 99.99=70399] 
2023-03-13 22:32:48:526 2120 sec: 490329434 operations; 236278.2 current ops/sec; est completion in 42 seconds [INSERT: Count=2362784, Max=113023, Min=274, Avg=1691.1, 90=2799, 99=8943, 99.9=18143, 99.99=36639] 
2023-03-13 22:32:58:526 2130 sec: 492708433 operations; 237899.9 current ops/sec; est completion in 32 seconds [INSERT: Count=2379003, Max=37663, Min=276, Avg=1679.77, 90=2927, 99=8807, 99.9=18367, 99.99=28191] 
2023-03-13 22:33:08:526 2140 sec: 495024108 operations; 231567.5 current ops/sec; est completion in 22 seconds [INSERT: Count=2315673, Max=64095, Min=275, Avg=1725.61, 90=2959, 99=9743, 99.9=21167, 99.99=34271] 
2023-03-13 22:33:18:526 2150 sec: 497350676 operations; 232656.8 current ops/sec; est completion in 12 seconds [INSERT: Count=2326572, Max=121343, Min=284, Avg=1717.53, 90=2789, 99=8199, 99.9=19839, 99.99=74367] 
2023-03-13 22:33:28:526 2160 sec: 499662250 operations; 231157.4 current ops/sec; est completion in 2 second [CLEANUP: Count=94, Max=18, Min=1, Avg=3.33, 90=4, 99=14, 99.9=18, 99.99=18] [INSERT: Count=2311542, Max=44255, Min=279, Avg=1692.39, 90=2845, 99=8079, 99.9=17439, 99.99=30351] 
2023-03-13 22:33:34:145 2165 sec: 500000000 operations; 60108.56 current ops/sec; [CLEANUP: Count=306, Max=2215935, Min=0, Avg=7239.42, 90=3, 99=14, 99.9=2215935, 99.99=2215935] [INSERT: Count=337750, Max=32255, Min=272, Avg=1147.96, 90=1888, 99=3369, 99.9=17343, 99.99=29983] 
[OVERALL], RunTime(ms), 2165619
[OVERALL], Throughput(ops/sec), 230880.87055017526
[TOTAL_GCS_PS_Scavenge], Count, 3057
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 23073
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0654228652408388
[TOTAL_GCS_PS_MarkSweep], Count, 5
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 355
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.016392541809062446
[TOTAL_GCs], Count, 3062
[TOTAL_GC_TIME], Time(ms), 23428
[TOTAL_GC_TIME_%], Time(%), 1.0818154070499013
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5538.935
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2215935
[CLEANUP], 95thPercentileLatency(us), 5
[CLEANUP], 99thPercentileLatency(us), 14
[INSERT], Operations, 500000000
[INSERT], AverageLatency(us), 1726.261598402
[INSERT], MinLatency(us), 255
[INSERT], MaxLatency(us), 435455
[INSERT], 95thPercentileLatency(us), 4031
[INSERT], 99thPercentileLatency(us), 8743
[INSERT], Return=OK, 500000000
