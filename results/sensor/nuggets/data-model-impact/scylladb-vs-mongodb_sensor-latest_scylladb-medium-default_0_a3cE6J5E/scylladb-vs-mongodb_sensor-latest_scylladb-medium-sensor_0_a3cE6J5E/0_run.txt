bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=184.72.48.92,13.57.80.218,13.52.113.149 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zp4WRQ6vL0MbSKl -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=184.72.48.92,13.57.80.218,13.52.113.149 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zp4WRQ6vL0MbSKl -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=184.72.48.92,13.57.80.218,13.52.113.149 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=zp4WRQ6vL0MbSKl -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=500000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=latest -p insertorder=ordered -p readproportion=0.1 -p updateproportion=0.0 -p insertproportion=0.9 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p insertstart=500000000 -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
 (might take a few minutes for large data sets)
Starting test.
[Thread-50] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-50] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-02-27 11:19:45:378 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-50] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-50] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-50] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /184.72.48.92:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.52.113.149:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.151.104.194:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.57.80.218:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.177.78.13:9042 added
[Thread-50] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.57.172.12:9042 added
[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 0ca31b80-e144-40e9-9660-63c0b117bdc6

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.52.113.149; Rack: us-west-1c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.151.104.194; Rack: us-west-1a-virtual1

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.57.80.218; Rack: us-west-1a-virtual1

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /184.72.48.92; Rack: us-west-1a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.57.172.12; Rack: us-west-1c

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.177.78.13; Rack: us-west-1a

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-50] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field1,field0,field7,field6,field9,field8,field3,field2,field5,field4) VALUES (?,?,?,?,?,?,?,?,?,?,?);'
2023-02-27 11:19:55:357 10 sec: 1420511 operations; 142036.9 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=141798, Max=210943, Min=380, Avg=3129.08, 90=4735, 99=15959, 99.9=51071, 99.99=129343] [INSERT: Count=1286231, Max=301823, Min=281, Avg=2541.39, 90=3829, 99=14871, 99.9=54303, 99.99=141439] 
2023-02-27 11:20:05:357 20 sec: 3310370 operations; 188985.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=189201, Max=40383, Min=380, Avg=2642.52, 90=4207, 99=6803, 99.9=17743, 99.99=35167] [INSERT: Count=1694028, Max=39743, Min=290, Avg=2054.33, 90=3381, 99=4939, 99.9=16703, 99.99=34431] 
2023-02-27 11:20:15:357 30 sec: 5229113 operations; 191874.3 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=191692, Max=77567, Min=373, Avg=2543.4, 90=3831, 99=6523, 99.9=17535, 99.99=28479] [INSERT: Count=1727413, Max=90111, Min=275, Avg=2030.86, 90=3029, 99=5167, 99.9=17103, 99.99=28911] 
2023-02-27 11:20:25:357 40 sec: 7083099 operations; 185398.6 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=186227, Max=144127, Min=349, Avg=2609.49, 90=3737, 99=6271, 99.9=17615, 99.99=39423] [INSERT: Count=1667325, Max=155263, Min=272, Avg=2104.27, 90=2973, 99=4623, 99.9=16247, 99.99=67391] 
2023-02-27 11:20:35:357 50 sec: 9037442 operations; 195434.3 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=195484, Max=36287, Min=371, Avg=2483.94, 90=3775, 99=6375, 99.9=15063, 99.99=21231] [INSERT: Count=1758702, Max=30143, Min=285, Avg=1995.23, 90=3045, 99=5159, 99.9=14351, 99.99=20319] 
2023-02-27 11:20:45:357 60 sec: 11014691 operations; 197724.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=197417, Max=44543, Min=381, Avg=2464.26, 90=3967, 99=6695, 99.9=15815, 99.99=27023] [INSERT: Count=1780059, Max=41663, Min=246, Avg=1971.17, 90=3255, 99=5727, 99.9=15687, 99.99=26175] 
2023-02-27 11:20:55:357 70 sec: 12936754 operations; 192206.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=191716, Max=26783, Min=380, Avg=2558.26, 90=4127, 99=6699, 99.9=14599, 99.99=21775] [INSERT: Count=1729842, Max=25519, Min=274, Avg=2025.41, 90=3305, 99=5219, 99.9=13575, 99.99=20943] 
2023-02-27 11:21:05:357 80 sec: 14817425 operations; 188067.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=188226, Max=43743, Min=345, Avg=2586.53, 90=4025, 99=6455, 99.9=16175, 99.99=29631] [INSERT: Count=1692484, Max=41215, Min=289, Avg=2072.77, 90=3203, 99=4919, 99.9=15095, 99.99=29295] 
2023-02-27 11:21:15:357 90 sec: 16651816 operations; 183439.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=183200, Max=163967, Min=377, Avg=2617.05, 90=3983, 99=6487, 99.9=14719, 99.99=77439] [INSERT: Count=1651159, Max=165119, Min=283, Avg=2129.24, 90=3121, 99=4567, 99.9=13855, 99.99=79615] 
2023-02-27 11:21:25:357 100 sec: 18507916 operations; 185610 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=185684, Max=41055, Min=376, Avg=2598.92, 90=4003, 99=6611, 99.9=17519, 99.99=38271] [INSERT: Count=1670495, Max=40351, Min=292, Avg=2102.81, 90=3161, 99=4723, 99.9=15863, 99.99=37471] 
2023-02-27 11:21:35:357 110 sec: 20401640 operations; 189372.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=190284, Max=36095, Min=347, Avg=2586.99, 90=4159, 99=6859, 99.9=15695, 99.99=24735] [INSERT: Count=1703338, Max=46399, Min=289, Avg=2056.4, 90=3335, 99=5051, 99.9=14599, 99.99=21039] 
2023-02-27 11:21:45:357 120 sec: 22347020 operations; 194538 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=194839, Max=46911, Min=358, Avg=2518.74, 90=4219, 99=7179, 99.9=15967, 99.99=26319] [INSERT: Count=1750584, Max=45151, Min=281, Avg=2001.79, 90=3435, 99=5655, 99.9=15079, 99.99=21391] 
2023-02-27 11:21:55:357 130 sec: 24268710 operations; 192169 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=192143, Max=41791, Min=366, Avg=2543.44, 90=4179, 99=7067, 99.9=18879, 99.99=39071] [INSERT: Count=1729525, Max=42943, Min=287, Avg=2027.33, 90=3363, 99=5555, 99.9=17359, 99.99=38079] 
2023-02-27 11:22:05:357 140 sec: 26086428 operations; 181771.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=181942, Max=43999, Min=358, Avg=2714.98, 90=4251, 99=6779, 99.9=15311, 99.99=26559] [INSERT: Count=1635738, Max=57183, Min=268, Avg=2140.45, 90=3331, 99=4627, 99.9=14023, 99.99=24879] 
2023-02-27 11:22:15:357 150 sec: 27872619 operations; 178619.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=178565, Max=82303, Min=338, Avg=2823.22, 90=4403, 99=6975, 99.9=15335, 99.99=31423] [INSERT: Count=1607590, Max=80895, Min=292, Avg=2171.7, 90=3449, 99=4591, 99.9=13663, 99.99=28271] 
2023-02-27 11:22:25:357 160 sec: 29591902 operations; 171928.3 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=171388, Max=41471, Min=349, Avg=2947.92, 90=4567, 99=7575, 99.9=17135, 99.99=26175] [INSERT: Count=1547906, Max=36703, Min=285, Avg=2254.83, 90=3587, 99=4691, 99.9=16007, 99.99=25135] 
2023-02-27 11:22:35:357 170 sec: 31332326 operations; 174042.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=174449, Max=124927, Min=366, Avg=2876.58, 90=4539, 99=7407, 99.9=19247, 99.99=36895] [INSERT: Count=1566085, Max=123839, Min=276, Avg=2231.03, 90=3567, 99=4683, 99.9=17519, 99.99=34975] 
2023-02-27 11:22:45:357 180 sec: 33056273 operations; 172394.7 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=172026, Max=55167, Min=374, Avg=2882.53, 90=4463, 99=7215, 99.9=15359, 99.99=27647] [INSERT: Count=1552197, Max=56255, Min=287, Avg=2255.05, 90=3511, 99=4591, 99.9=13999, 99.99=26399] 
2023-02-27 11:22:55:357 190 sec: 34800959 operations; 174468.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=174206, Max=97983, Min=374, Avg=2867.85, 90=4443, 99=7027, 99.9=13711, 99.99=18991] [INSERT: Count=1570194, Max=93695, Min=290, Avg=2225.89, 90=3499, 99=4527, 99.9=12991, 99.99=21407] 
2023-02-27 11:23:05:357 200 sec: 36612533 operations; 181157.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=180888, Max=55039, Min=360, Avg=2795.97, 90=4471, 99=7263, 99.9=16431, 99.99=27599] [INSERT: Count=1630653, Max=57151, Min=287, Avg=2139.86, 90=3543, 99=4719, 99.9=15583, 99.99=22943] 
2023-02-27 11:23:15:357 210 sec: 38406921 operations; 179438.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=179389, Max=46719, Min=367, Avg=2787.73, 90=4455, 99=7219, 99.9=16359, 99.99=41439] [INSERT: Count=1615027, Max=47647, Min=277, Avg=2164.24, 90=3557, 99=4695, 99.9=14703, 99.99=40447] 
2023-02-27 11:23:25:357 220 sec: 40224497 operations; 181757.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=182574, Max=99071, Min=364, Avg=2728.91, 90=4347, 99=7151, 99.9=13791, 99.99=17919] [INSERT: Count=1635038, Max=101119, Min=279, Avg=2138.89, 90=3467, 99=4659, 99.9=13183, 99.99=24479] 
2023-02-27 11:23:35:357 230 sec: 42045464 operations; 182096.7 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=182781, Max=182271, Min=361, Avg=2754.83, 90=4343, 99=7475, 99.9=16591, 99.99=99583] [INSERT: Count=1638207, Max=182015, Min=264, Avg=2131.47, 90=3413, 99=4859, 99.9=14687, 99.99=111807] 
2023-02-27 11:23:45:357 240 sec: 43813948 operations; 176848.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=175931, Max=40703, Min=368, Avg=2818.96, 90=4331, 99=7071, 99.9=19807, 99.99=26111] [INSERT: Count=1592479, Max=38271, Min=278, Avg=2197.44, 90=3437, 99=4679, 99.9=18431, 99.99=24687] 
2023-02-27 11:23:55:357 250 sec: 45541693 operations; 172774.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=172229, Max=208895, Min=387, Avg=2914.54, 90=4455, 99=7251, 99.9=14607, 99.99=168575] [INSERT: Count=1555590, Max=205183, Min=281, Avg=2245.88, 90=3533, 99=4603, 99.9=13007, 99.99=115519] 
2023-02-27 11:24:05:357 260 sec: 47240437 operations; 169874.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=169471, Max=38623, Min=365, Avg=2937.96, 90=4467, 99=7471, 99.9=15503, 99.99=27231] [INSERT: Count=1529237, Max=36927, Min=296, Avg=2287.18, 90=3433, 99=4567, 99.9=14775, 99.99=25455] 
2023-02-27 11:24:15:357 270 sec: 48962616 operations; 172217.9 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=172205, Max=41951, Min=398, Avg=2884.88, 90=4335, 99=7371, 99.9=16223, 99.99=28991] [INSERT: Count=1549966, Max=43807, Min=296, Avg=2257.33, 90=3207, 99=4467, 99.9=14375, 99.99=27535] 
2023-02-27 11:24:25:357 280 sec: 50589437 operations; 162682.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=162607, Max=227711, Min=334, Avg=3019.09, 90=4411, 99=7463, 99.9=13087, 99.99=143615] [INSERT: Count=1464195, Max=223871, Min=270, Avg=2393.75, 90=3173, 99=4439, 99.9=12279, 99.99=135679] 
2023-02-27 11:24:35:357 290 sec: 52221473 operations; 163203.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=162677, Max=77311, Min=411, Avg=3028.55, 90=4471, 99=7343, 99.9=13831, 99.99=31807] [INSERT: Count=1469236, Max=77759, Min=323, Avg=2384.03, 90=3155, 99=4355, 99.9=12455, 99.99=28927] 
2023-02-27 11:24:45:357 300 sec: 53906420 operations; 168494.7 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=168866, Max=39871, Min=370, Avg=2954.72, 90=4403, 99=7379, 99.9=15103, 99.99=30095] [INSERT: Count=1516080, Max=46111, Min=314, Avg=2306.4, 90=3165, 99=4471, 99.9=14055, 99.99=29327] 
2023-02-27 11:24:55:357 310 sec: 55609834 operations; 170341.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=170385, Max=134143, Min=369, Avg=2922.57, 90=4371, 99=7199, 99.9=13639, 99.99=83711] [INSERT: Count=1533043, Max=132735, Min=295, Avg=2281.5, 90=3175, 99=4427, 99.9=12375, 99.99=53791] 
2023-02-27 11:25:05:357 320 sec: 57314543 operations; 170470.9 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=170455, Max=38303, Min=383, Avg=2894.2, 90=4319, 99=6951, 99.9=15271, 99.99=26159] [INSERT: Count=1534233, Max=54079, Min=312, Avg=2282.67, 90=3221, 99=4427, 99.9=13807, 99.99=22703] 
2023-02-27 11:25:15:357 330 sec: 59038753 operations; 172421 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=171752, Max=78975, Min=377, Avg=2890.94, 90=4415, 99=7079, 99.9=11607, 99.99=29647] [INSERT: Count=1552471, Max=81919, Min=287, Avg=2253.85, 90=3437, 99=4555, 99.9=10463, 99.99=26591] 
2023-02-27 11:25:25:357 340 sec: 60754438 operations; 171568.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=171021, Max=42367, Min=351, Avg=2881.2, 90=4399, 99=7199, 99.9=12679, 99.99=34687] [INSERT: Count=1544644, Max=37759, Min=297, Avg=2267.63, 90=3469, 99=4587, 99.9=11695, 99.99=34527] 
2023-02-27 11:25:35:357 350 sec: 62478576 operations; 172413.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=171785, Max=120767, Min=361, Avg=2906.79, 90=4507, 99=7583, 99.9=17151, 99.99=29775] [INSERT: Count=1552381, Max=121407, Min=286, Avg=2252.16, 90=3629, 99=4687, 99.9=15743, 99.99=37823] 
2023-02-27 11:25:45:357 360 sec: 64204590 operations; 172601.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=172754, Max=45343, Min=341, Avg=2882.62, 90=4455, 99=7263, 99.9=15447, 99.99=26767] [INSERT: Count=1553248, Max=41471, Min=274, Avg=2251.7, 90=3583, 99=4615, 99.9=14327, 99.99=22687] 
2023-02-27 11:25:55:357 370 sec: 65994725 operations; 179013.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=179025, Max=257791, Min=341, Avg=2771.97, 90=4347, 99=6999, 99.9=13887, 99.99=192767] [INSERT: Count=1611152, Max=254335, Min=272, Avg=2171.85, 90=3483, 99=4631, 99.9=11927, 99.99=166143] 
2023-02-27 11:26:05:357 380 sec: 67777649 operations; 178292.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=178306, Max=33375, Min=380, Avg=2771.62, 90=4227, 99=7071, 99.9=14839, 99.99=23663] [INSERT: Count=1604574, Max=51359, Min=288, Avg=2182, 90=3257, 99=4543, 99.9=13951, 99.99=20463] 
2023-02-27 11:26:15:357 390 sec: 69579409 operations; 180176 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=179596, Max=44031, Min=376, Avg=2748.28, 90=4179, 99=7003, 99.9=15655, 99.99=38911] [INSERT: Count=1622180, Max=44799, Min=288, Avg=2158.66, 90=3215, 99=4551, 99.9=13871, 99.99=37791] 
2023-02-27 11:26:25:357 400 sec: 71438581 operations; 185917.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=185670, Max=162431, Min=354, Avg=2677.14, 90=4211, 99=7179, 99.9=16895, 99.99=76735] [INSERT: Count=1673521, Max=159615, Min=260, Avg=2090.29, 90=3273, 99=4923, 99.9=16087, 99.99=79935] 
2023-02-27 11:26:35:357 410 sec: 73330809 operations; 189222.8 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=189463, Max=42207, Min=365, Avg=2646.85, 90=4223, 99=6999, 99.9=16511, 99.99=25055] [INSERT: Count=1702809, Max=42751, Min=287, Avg=2051.72, 90=3297, 99=4935, 99.9=15239, 99.99=20943] 
2023-02-27 11:26:45:357 420 sec: 75153244 operations; 182243.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=181980, Max=38623, Min=376, Avg=2741.64, 90=4307, 99=7271, 99.9=15639, 99.99=24543] [INSERT: Count=1640337, Max=39551, Min=278, Avg=2131.34, 90=3377, 99=4847, 99.9=14647, 99.99=22751] 
2023-02-27 11:26:55:357 430 sec: 76936335 operations; 178309.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=178629, Max=155263, Min=365, Avg=2815.26, 90=4399, 99=7171, 99.9=16831, 99.99=39551] [INSERT: Count=1604537, Max=153215, Min=288, Avg=2176.68, 90=3449, 99=4663, 99.9=14927, 99.99=54495] 
2023-02-27 11:27:05:357 440 sec: 78676224 operations; 173988.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=174291, Max=39839, Min=354, Avg=2893.18, 90=4475, 99=7475, 99.9=17087, 99.99=28767] [INSERT: Count=1565531, Max=40351, Min=277, Avg=2229.99, 90=3521, 99=4739, 99.9=16087, 99.99=22975] 
2023-02-27 11:27:15:357 450 sec: 80417868 operations; 174164.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=174241, Max=41055, Min=377, Avg=2876.97, 90=4427, 99=7071, 99.9=15047, 99.99=37503] [INSERT: Count=1567500, Max=40511, Min=305, Avg=2229.28, 90=3411, 99=4563, 99.9=13815, 99.99=36991] 
2023-02-27 11:27:25:357 460 sec: 82180861 operations; 176299.3 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=176249, Max=93503, Min=350, Avg=2837.19, 90=4387, 99=7279, 99.9=16415, 99.99=30255] [INSERT: Count=1586788, Max=97663, Min=295, Avg=2202.84, 90=3295, 99=4559, 99.9=14823, 99.99=30047] 
2023-02-27 11:27:35:357 470 sec: 83936443 operations; 175558.2 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=175258, Max=102847, Min=369, Avg=2846, 90=4331, 99=7203, 99.9=15999, 99.99=40671] [INSERT: Count=1580222, Max=103359, Min=281, Avg=2212.64, 90=3203, 99=4467, 99.9=14815, 99.99=25759] 
2023-02-27 11:27:45:357 480 sec: 85652072 operations; 171562.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=171917, Max=38463, Min=381, Avg=2896.43, 90=4319, 99=7071, 99.9=14071, 99.99=35167] [INSERT: Count=1543706, Max=37823, Min=300, Avg=2265.73, 90=3159, 99=4391, 99.9=13087, 99.99=34175] 
2023-02-27 11:27:55:357 490 sec: 87385417 operations; 173334.5 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=173178, Max=99327, Min=364, Avg=2861.16, 90=4291, 99=7079, 99.9=13983, 99.99=23343] [INSERT: Count=1560168, Max=107967, Min=295, Avg=2243.35, 90=3169, 99=4391, 99.9=12367, 99.99=35679] 
2023-02-27 11:28:05:357 500 sec: 89214171 operations; 182875.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=183008, Max=30479, Min=349, Avg=2728.63, 90=4235, 99=6907, 99.9=15671, 99.99=20719] [INSERT: Count=1645774, Max=34943, Min=285, Avg=2124.22, 90=3221, 99=4555, 99.9=14807, 99.99=21887] 
2023-02-27 11:28:15:357 510 sec: 91096088 operations; 188191.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=188596, Max=42239, Min=370, Avg=2679.57, 90=4263, 99=6943, 99.9=18687, 99.99=29407] [INSERT: Count=1693290, Max=36671, Min=247, Avg=2060.93, 90=3321, 99=4811, 99.9=17183, 99.99=28671] 
2023-02-27 11:28:25:357 520 sec: 92900402 operations; 180431.4 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=180777, Max=185471, Min=359, Avg=2801.34, 90=4399, 99=7055, 99.9=14207, 99.99=81343] [INSERT: Count=1623562, Max=186751, Min=284, Avg=2148.98, 90=3429, 99=4567, 99.9=12575, 99.99=90367] 
2023-02-27 11:28:35:357 530 sec: 94644053 operations; 174365.1 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=173955, Max=92927, Min=353, Avg=2914.06, 90=4531, 99=7371, 99.9=13943, 99.99=26079] [INSERT: Count=1569658, Max=92863, Min=283, Avg=2222.41, 90=3565, 99=4619, 99.9=12935, 99.99=29135] 
2023-02-27 11:28:45:357 540 sec: 96364517 operations; 172046.4 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=171684, Max=50783, Min=370, Avg=2975.17, 90=4607, 99=7615, 99.9=15255, 99.99=27615] [INSERT: Count=1548795, Max=44735, Min=284, Avg=2250.01, 90=3621, 99=4687, 99.9=14319, 99.99=25471] 
2023-02-27 11:28:55:357 550 sec: 98094435 operations; 172991.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=173786, Max=170367, Min=350, Avg=2935.01, 90=4559, 99=7355, 99.9=12703, 99.99=18847] [INSERT: Count=1556130, Max=169215, Min=273, Avg=2239.79, 90=3541, 99=4523, 99.9=11575, 99.99=62527] 
2023-02-27 11:29:05:357 560 sec: 99851865 operations; 175743 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=175438, Max=56767, Min=358, Avg=2889.37, 90=4547, 99=7503, 99.9=12847, 99.99=25327] [INSERT: Count=1581953, Max=55775, Min=279, Avg=2205.13, 90=3551, 99=4635, 99.9=11743, 99.99=20383] 
2023-02-27 11:29:15:357 570 sec: 101571387 operations; 171952.2 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=172350, Max=50399, Min=353, Avg=2950.34, 90=4543, 99=7195, 99.9=15519, 99.99=30127] [INSERT: Count=1547193, Max=56031, Min=284, Avg=2253.82, 90=3523, 99=4515, 99.9=14599, 99.99=26191] 
2023-02-27 11:29:25:357 580 sec: 103292658 operations; 172127.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=172196, Max=115455, Min=376, Avg=2970.54, 90=4535, 99=7591, 99.9=17407, 99.99=95551] [INSERT: Count=1549107, Max=111295, Min=285, Avg=2249.04, 90=3511, 99=4595, 99.9=15903, 99.99=47039] 
2023-02-27 11:29:35:357 590 sec: 105049521 operations; 175686.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=175635, Max=32351, Min=349, Avg=2893.15, 90=4539, 99=7319, 99.9=18079, 99.99=26943] [INSERT: Count=1581255, Max=60735, Min=274, Avg=2205.44, 90=3523, 99=4643, 99.9=16495, 99.99=26623] 
2023-02-27 11:29:45:357 600 sec: 106810296 operations; 176077.5 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=176672, Max=55263, Min=353, Avg=2892.75, 90=4527, 99=7243, 99.9=15527, 99.99=26303] [INSERT: Count=1584084, Max=49631, Min=288, Avg=2199.55, 90=3523, 99=4587, 99.9=14191, 99.99=21743] 
2023-02-27 11:29:55:357 610 sec: 108583499 operations; 177320.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=177391, Max=41151, Min=353, Avg=2900.96, 90=4539, 99=7595, 99.9=18287, 99.99=38655] [INSERT: Count=1595809, Max=41951, Min=283, Avg=2181.19, 90=3545, 99=4779, 99.9=16007, 99.99=38015] 
2023-02-27 11:30:05:357 620 sec: 110309380 operations; 172588.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=173227, Max=53439, Min=378, Avg=2953.58, 90=4547, 99=7379, 99.9=14815, 99.99=26287] [INSERT: Count=1552622, Max=57215, Min=279, Avg=2243.86, 90=3531, 99=4603, 99.9=13575, 99.99=23519] 
2023-02-27 11:30:15:357 630 sec: 112007364 operations; 169798.4 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=169595, Max=40479, Min=374, Avg=3004.16, 90=4583, 99=7455, 99.9=14167, 99.99=26239] [INSERT: Count=1528352, Max=33951, Min=290, Avg=2280.9, 90=3541, 99=4559, 99.9=13007, 99.99=25343] 
2023-02-27 11:30:25:357 640 sec: 113681342 operations; 167397.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=168205, Max=164607, Min=346, Avg=3057.1, 90=4643, 99=7551, 99.9=14975, 99.99=82239] [INSERT: Count=1505827, Max=168959, Min=281, Avg=2312.16, 90=3555, 99=4543, 99.9=14007, 99.99=90815] 
2023-02-27 11:30:35:357 650 sec: 115312467 operations; 163112.5 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=162747, Max=50527, Min=394, Avg=3143.22, 90=4771, 99=7755, 99.9=14535, 99.99=26399] [INSERT: Count=1468511, Max=55135, Min=280, Avg=2372.76, 90=3575, 99=4543, 99.9=13391, 99.99=23359] 
2023-02-27 11:30:45:357 660 sec: 116945934 operations; 163346.7 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=163804, Max=50367, Min=398, Avg=3112.74, 90=4719, 99=7659, 99.9=14871, 99.99=28799] [INSERT: Count=1469487, Max=56895, Min=297, Avg=2371.87, 90=3635, 99=4571, 99.9=13423, 99.99=24751] 
2023-02-27 11:30:55:357 670 sec: 118537812 operations; 159187.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=159391, Max=178175, Min=377, Avg=3142.02, 90=4739, 99=7675, 99.9=12895, 99.99=20911] [INSERT: Count=1432509, Max=174975, Min=290, Avg=2439.92, 90=3653, 99=4619, 99.9=12215, 99.99=83455] 
2023-02-27 11:31:05:357 680 sec: 120131759 operations; 159394.7 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=159568, Max=37567, Min=401, Avg=3129.66, 90=4699, 99=7587, 99.9=13791, 99.99=22959] [INSERT: Count=1434517, Max=37151, Min=311, Avg=2437.59, 90=3487, 99=4547, 99.9=12815, 99.99=23871] 
2023-02-27 11:31:15:357 690 sec: 121806663 operations; 167490.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=167307, Max=31855, Min=397, Avg=2997.56, 90=4519, 99=7531, 99.9=13223, 99.99=25263] [INSERT: Count=1507549, Max=32623, Min=309, Avg=2317.75, 90=3189, 99=4407, 99.9=12231, 99.99=22911] 
2023-02-27 11:31:25:357 700 sec: 123455099 operations; 164843.6 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=164541, Max=126399, Min=399, Avg=3025.55, 90=4519, 99=7319, 99.9=12743, 99.99=34079] [INSERT: Count=1483949, Max=127167, Min=309, Avg=2357.3, 90=3215, 99=4399, 99.9=11799, 99.99=40767] 
2023-02-27 11:31:35:357 710 sec: 125065860 operations; 161076.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=161164, Max=81983, Min=436, Avg=3105.48, 90=4643, 99=7611, 99.9=12351, 99.99=27311] [INSERT: Count=1449460, Max=93823, Min=304, Avg=2411.23, 90=3417, 99=4531, 99.9=11311, 99.99=27375] 
2023-02-27 11:31:45:357 720 sec: 126680159 operations; 161429.9 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=160688, Max=74495, Min=388, Avg=3130.72, 90=4651, 99=7647, 99.9=13943, 99.99=71871] [INSERT: Count=1453619, Max=73151, Min=310, Avg=2402.74, 90=3507, 99=4563, 99.9=12999, 99.99=70783] 
2023-02-27 11:31:55:357 730 sec: 128205722 operations; 152556.3 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=153009, Max=253055, Min=352, Avg=3245.09, 90=4727, 99=7847, 99.9=13647, 99.99=104575] [INSERT: Count=1372516, Max=248831, Min=299, Avg=2549.79, 90=3653, 99=4591, 99.9=12463, 99.99=165503] 
2023-02-27 11:32:05:357 740 sec: 129778513 operations; 157279.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=156626, Max=53311, Min=406, Avg=3180.99, 90=4687, 99=7691, 99.9=16719, 99.99=27439] [INSERT: Count=1416200, Max=54143, Min=308, Avg=2469.94, 90=3665, 99=4583, 99.9=15263, 99.99=25087] 
2023-02-27 11:32:15:357 750 sec: 131395555 operations; 161704.2 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=162025, Max=164863, Min=388, Avg=3088.09, 90=4563, 99=7731, 99.9=25583, 99.99=49663] [INSERT: Count=1455020, Max=162687, Min=298, Avg=2402.42, 90=3477, 99=4563, 99.9=24367, 99.99=70911] 
2023-02-27 11:32:25:357 760 sec: 133052412 operations; 165685.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=165739, Max=147327, Min=396, Avg=3000.68, 90=4471, 99=7619, 99.9=14263, 99.99=35039] [INSERT: Count=1491161, Max=143871, Min=303, Avg=2346.3, 90=3247, 99=4479, 99.9=13615, 99.99=71871] 
2023-02-27 11:32:35:357 770 sec: 134695620 operations; 164320.8 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=164293, Max=171903, Min=389, Avg=3036.86, 90=4523, 99=7699, 99.9=14271, 99.99=86719] [INSERT: Count=1478872, Max=172415, Min=294, Avg=2364.53, 90=3211, 99=4483, 99.9=12759, 99.99=76415] 
2023-02-27 11:32:45:357 780 sec: 136362945 operations; 166732.5 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=167510, Max=32207, Min=410, Avg=2981.54, 90=4443, 99=7535, 99.9=15151, 99.99=28479] [INSERT: Count=1499830, Max=37247, Min=302, Avg=2331.24, 90=3203, 99=4483, 99.9=13327, 99.99=27647] 
2023-02-27 11:32:55:357 790 sec: 138076707 operations; 171376.2 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=170799, Max=96383, Min=373, Avg=2904.61, 90=4415, 99=7247, 99.9=11519, 99.99=14535] [INSERT: Count=1543026, Max=97471, Min=302, Avg=2268.1, 90=3185, 99=4483, 99.9=10255, 99.99=14223] 
2023-02-27 11:33:05:357 800 sec: 139816303 operations; 173959.6 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=174335, Max=42431, Min=396, Avg=2849.81, 90=4379, 99=7155, 99.9=13103, 99.99=23103] [INSERT: Count=1565276, Max=40447, Min=296, Avg=2235.29, 90=3237, 99=4559, 99.9=12215, 99.99=20463] 
2023-02-27 11:33:15:357 810 sec: 141524229 operations; 170792.6 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=169796, Max=70015, Min=356, Avg=2900.09, 90=4423, 99=7403, 99.9=16415, 99.99=32751] [INSERT: Count=1538070, Max=73599, Min=289, Avg=2277.63, 90=3383, 99=4559, 99.9=14039, 99.99=32111] 
2023-02-27 11:33:25:357 820 sec: 143331024 operations; 180679.5 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=180673, Max=78847, Min=372, Avg=2740.19, 90=4191, 99=7219, 99.9=18895, 99.99=56351] [INSERT: Count=1626078, Max=87615, Min=286, Avg=2152.6, 90=3149, 99=4703, 99.9=16167, 99.99=55455] 
2023-02-27 11:33:35:357 830 sec: 145153406 operations; 182238.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=182707, Max=160767, Min=354, Avg=2727.67, 90=4291, 99=7087, 99.9=16007, 99.99=104511] [INSERT: Count=1639653, Max=160127, Min=287, Avg=2132.77, 90=3247, 99=4747, 99.9=15239, 99.99=110079] 
2023-02-27 11:33:45:357 840 sec: 146969280 operations; 181587.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=181528, Max=37695, Min=388, Avg=2712.2, 90=4211, 99=6947, 99.9=14703, 99.99=22959] [INSERT: Count=1634361, Max=37599, Min=290, Avg=2143.45, 90=3155, 99=4647, 99.9=13783, 99.99=22239] 
2023-02-27 11:33:55:357 850 sec: 148814142 operations; 184486.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=184450, Max=108479, Min=362, Avg=2695.23, 90=4123, 99=6783, 99.9=13111, 99.99=19087] [INSERT: Count=1660408, Max=108223, Min=290, Avg=2106.87, 90=3037, 99=4495, 99.9=12535, 99.99=19135] 
2023-02-27 11:34:05:357 860 sec: 150678345 operations; 186420.3 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=186137, Max=50911, Min=380, Avg=2665.31, 90=3991, 99=6863, 99.9=14063, 99.99=22991] [INSERT: Count=1678057, Max=42783, Min=288, Avg=2085.23, 90=3001, 99=4619, 99.9=12943, 99.99=21007] 
2023-02-27 11:34:15:357 870 sec: 152536096 operations; 185775.1 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=186047, Max=46783, Min=381, Avg=2641.24, 90=3867, 99=6551, 99.9=17119, 99.99=25023] [INSERT: Count=1671739, Max=50015, Min=267, Avg=2096.05, 90=3003, 99=4479, 99.9=16055, 99.99=23807] 
2023-02-27 11:34:25:368 880 sec: 154453859 operations; 191584.72 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=192052, Max=21743, Min=377, Avg=2549.69, 90=3839, 99=6403, 99.9=14831, 99.99=17759] [INSERT: Count=1725673, Max=22303, Min=291, Avg=2033.12, 90=2987, 99=4703, 99.9=13967, 99.99=17247] 
2023-02-27 11:34:35:357 890 sec: 156346650 operations; 189468.57 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=189971, Max=83071, Min=360, Avg=2574.73, 90=3877, 99=6431, 99.9=16975, 99.99=36799] [INSERT: Count=1702870, Max=84159, Min=271, Avg=2057.31, 90=3009, 99=4595, 99.9=14175, 99.99=36831] 
2023-02-27 11:34:45:357 900 sec: 158220197 operations; 187354.7 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=187683, Max=35295, Min=361, Avg=2601.6, 90=4093, 99=6639, 99.9=17567, 99.99=27903] [INSERT: Count=1685848, Max=35039, Min=275, Avg=2080.24, 90=3179, 99=4747, 99.9=16511, 99.99=27759] 
2023-02-27 11:34:55:357 910 sec: 160043874 operations; 182367.7 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=182874, Max=72063, Min=365, Avg=2726.62, 90=4379, 99=7091, 99.9=17135, 99.99=27247] [INSERT: Count=1640821, Max=70079, Min=293, Avg=2131.16, 90=3401, 99=4651, 99.9=14991, 99.99=25519] 
2023-02-27 11:35:05:357 920 sec: 161814190 operations; 177031.6 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=176528, Max=47103, Min=362, Avg=2809.68, 90=4479, 99=7087, 99.9=15519, 99.99=42783] [INSERT: Count=1593911, Max=45503, Min=260, Avg=2195.78, 90=3533, 99=4683, 99.9=14055, 99.99=41919] 
2023-02-27 11:35:15:357 930 sec: 163688776 operations; 187458.6 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=186998, Max=77695, Min=351, Avg=2698.82, 90=4431, 99=7283, 99.9=16527, 99.99=29759] [INSERT: Count=1687566, Max=79615, Min=269, Avg=2068.39, 90=3569, 99=4991, 99.9=15487, 99.99=28159] 
2023-02-27 11:35:25:357 940 sec: 165534310 operations; 184553.4 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=183576, Max=75391, Min=368, Avg=2745.07, 90=4463, 99=7095, 99.9=14511, 99.99=27231] [INSERT: Count=1661975, Max=80703, Min=276, Avg=2100.78, 90=3575, 99=4707, 99.9=13535, 99.99=26255] 
2023-02-27 11:35:35:357 950 sec: 167392103 operations; 185779.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=185508, Max=38239, Min=373, Avg=2728.36, 90=4499, 99=7343, 99.9=17615, 99.99=28991] [INSERT: Count=1672211, Max=44863, Min=281, Avg=2086.46, 90=3601, 99=4935, 99.9=16071, 99.99=26575] 
2023-02-27 11:35:45:357 960 sec: 169221846 operations; 182974.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=182488, Max=46655, Min=358, Avg=2742.45, 90=4447, 99=6995, 99.9=15423, 99.99=26671] [INSERT: Count=1647238, Max=45503, Min=275, Avg=2121.71, 90=3565, 99=4731, 99.9=13887, 99.99=22479] 
2023-02-27 11:35:55:357 970 sec: 170997228 operations; 177538.2 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=177816, Max=22047, Min=358, Avg=2819.91, 90=4451, 99=7015, 99.9=15391, 99.99=19199] [INSERT: Count=1597503, Max=20447, Min=280, Avg=2187.12, 90=3521, 99=4671, 99.9=13295, 99.99=17983] 
2023-02-27 11:36:05:357 980 sec: 172807509 operations; 181028.1 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=181281, Max=43807, Min=382, Avg=2759.13, 90=4339, 99=6955, 99.9=17007, 99.99=35167] [INSERT: Count=1628982, Max=52991, Min=288, Avg=2145.67, 90=3383, 99=4647, 99.9=15855, 99.99=34463] 
2023-02-27 11:36:15:357 990 sec: 174646081 operations; 183857.2 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=183284, Max=50399, Min=348, Avg=2737.55, 90=4395, 99=7175, 99.9=15423, 99.99=30031] [INSERT: Count=1655626, Max=55711, Min=291, Avg=2110.59, 90=3395, 99=4639, 99.9=14063, 99.99=29103] 
2023-02-27 11:36:25:357 1000 sec: 176495391 operations; 184931 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=185086, Max=100095, Min=366, Avg=2729.9, 90=4367, 99=7171, 99.9=13799, 99.99=69055] [INSERT: Count=1663932, Max=100415, Min=288, Avg=2097.14, 90=3391, 99=4611, 99.9=12655, 99.99=27423] 
2023-02-27 11:36:35:357 1010 sec: 178277462 operations; 178207.1 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=178288, Max=131711, Min=372, Avg=2829.82, 90=4403, 99=7403, 99.9=18527, 99.99=69759] [INSERT: Count=1603842, Max=132223, Min=271, Avg=2176.71, 90=3463, 99=4651, 99.9=15671, 99.99=58815] 
2023-02-27 11:36:45:357 1020 sec: 180087556 operations; 181009.4 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=181558, Max=45407, Min=382, Avg=2770.75, 90=4311, 99=7163, 99.9=15247, 99.99=30655] [INSERT: Count=1628580, Max=55199, Min=274, Avg=2144.52, 90=3309, 99=4723, 99.9=14015, 99.99=28863] 
2023-02-27 11:36:55:357 1030 sec: 181847067 operations; 175951.1 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=175856, Max=27455, Min=382, Avg=2846.25, 90=4359, 99=7243, 99.9=14375, 99.99=24095] [INSERT: Count=1583548, Max=26799, Min=286, Avg=2206.97, 90=3181, 99=4451, 99.9=12951, 99.99=23663] 
2023-02-27 11:37:05:357 1040 sec: 183553431 operations; 170636.4 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=170397, Max=42655, Min=386, Avg=2932.76, 90=4451, 99=7163, 99.9=15599, 99.99=29231] [INSERT: Count=1536026, Max=36063, Min=299, Avg=2276.09, 90=3231, 99=4467, 99.9=14575, 99.99=28255] 
2023-02-27 11:37:15:357 1050 sec: 185323950 operations; 177051.9 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=176277, Max=82431, Min=391, Avg=2837.89, 90=4383, 99=7239, 99.9=16207, 99.99=79551] [INSERT: Count=1594290, Max=82751, Min=285, Avg=2192.43, 90=3231, 99=4619, 99.9=14815, 99.99=78783] 
2023-02-27 11:37:25:357 1060 sec: 187059188 operations; 173523.8 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=174263, Max=241023, Min=366, Avg=2872.7, 90=4371, 99=7199, 99.9=16735, 99.99=150399] [INSERT: Count=1560709, Max=246911, Min=263, Avg=2237.77, 90=3171, 99=4539, 99.9=15583, 99.99=169855] 
2023-02-27 11:37:35:357 1070 sec: 188795235 operations; 173604.7 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=174079, Max=140159, Min=372, Avg=2874.32, 90=4383, 99=7027, 99.9=15951, 99.99=30191] [INSERT: Count=1562199, Max=135935, Min=293, Avg=2239.02, 90=3123, 99=4495, 99.9=15103, 99.99=44639] 
2023-02-27 11:37:45:357 1080 sec: 190587955 operations; 179272 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=179450, Max=39807, Min=392, Avg=2771.79, 90=4295, 99=6783, 99.9=14879, 99.99=26143] [INSERT: Count=1613142, Max=41343, Min=278, Avg=2168.34, 90=3179, 99=4567, 99.9=14111, 99.99=25615] 
2023-02-27 11:37:55:357 1090 sec: 192328659 operations; 174070.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=173612, Max=32767, Min=385, Avg=2840.37, 90=4343, 99=7091, 99.9=24383, 99.99=27519] [INSERT: Count=1567067, Max=32927, Min=290, Avg=2234.99, 90=3141, 99=4703, 99.9=13871, 99.99=26527] 
2023-02-27 11:38:05:357 1100 sec: 194044085 operations; 171542.6 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=171439, Max=34655, Min=380, Avg=2905.43, 90=4447, 99=7123, 99.9=15615, 99.99=27007] [INSERT: Count=1544046, Max=35135, Min=299, Avg=2265.27, 90=3267, 99=4603, 99.9=12983, 99.99=24015] 
2023-02-27 11:38:15:357 1110 sec: 195738849 operations; 169476.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=169528, Max=67519, Min=377, Avg=2929.79, 90=4487, 99=7339, 99.9=16343, 99.99=28591] [INSERT: Count=1525261, Max=74303, Min=287, Avg=2294.13, 90=3409, 99=4635, 99.9=15503, 99.99=28191] 
2023-02-27 11:38:25:357 1120 sec: 197540271 operations; 180142.2 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=180328, Max=70399, Min=358, Avg=2730.65, 90=4303, 99=6899, 99.9=16975, 99.99=28863] [INSERT: Count=1621089, Max=66431, Min=284, Avg=2160.85, 90=3419, 99=4763, 99.9=16167, 99.99=28687] 
2023-02-27 11:38:35:357 1130 sec: 199514429 operations; 197415.8 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=196938, Max=93759, Min=366, Avg=2470.61, 90=3997, 99=6723, 99.9=21903, 99.99=38175] [INSERT: Count=1777225, Max=95935, Min=285, Avg=1974.12, 90=3327, 99=5667, 99.9=19119, 99.99=47039] 
2023-02-27 11:38:45:357 1140 sec: 201561114 operations; 204668.5 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=204327, Max=45247, Min=364, Avg=2364.12, 90=4033, 99=7927, 99.9=15215, 99.99=31359] [INSERT: Count=1842358, Max=43807, Min=286, Avg=1905.92, 90=3427, 99=7099, 99.9=14279, 99.99=31055] 
2023-02-27 11:38:55:357 1150 sec: 203577739 operations; 201662.5 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=201480, Max=179455, Min=360, Avg=2410.35, 90=4013, 99=7039, 99.9=17151, 99.99=98943] [INSERT: Count=1815185, Max=179967, Min=269, Avg=1933.56, 90=3409, 99=6127, 99.9=15839, 99.99=81087] 
2023-02-27 11:39:05:357 1160 sec: 205590430 operations; 201269.1 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=201643, Max=45695, Min=361, Avg=2396.53, 90=3967, 99=7111, 99.9=17855, 99.99=29007] [INSERT: Count=1811034, Max=46175, Min=273, Avg=1939.05, 90=3385, 99=6323, 99.9=16367, 99.99=27103] 
2023-02-27 11:39:15:357 1170 sec: 207607845 operations; 201741.5 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=202355, Max=107775, Min=344, Avg=2376.14, 90=4029, 99=7071, 99.9=17727, 99.99=58879] [INSERT: Count=1815054, Max=107711, Min=259, Avg=1936.07, 90=3439, 99=6307, 99.9=17439, 99.99=60607] 
2023-02-27 11:39:25:357 1180 sec: 209582197 operations; 197435.2 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=197423, Max=25567, Min=382, Avg=2417.23, 90=3969, 99=6603, 99.9=16159, 99.99=22367] [INSERT: Count=1776887, Max=28335, Min=275, Avg=1979.78, 90=3235, 99=5527, 99.9=14719, 99.99=21887] 
2023-02-27 11:39:35:357 1190 sec: 211458460 operations; 187626.3 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=187788, Max=46463, Min=369, Avg=2558.28, 90=4103, 99=6863, 99.9=17583, 99.99=27807] [INSERT: Count=1688482, Max=50911, Min=280, Avg=2081.7, 90=3241, 99=5079, 99.9=16527, 99.99=26831] 
2023-02-27 11:39:45:357 1200 sec: 213463498 operations; 200503.8 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=200668, Max=44351, Min=358, Avg=2367.63, 90=3841, 99=6511, 99.9=16607, 99.99=24431] [INSERT: Count=1804394, Max=47743, Min=277, Avg=1950.67, 90=3225, 99=5663, 99.9=15559, 99.99=22463] 
2023-02-27 11:39:55:357 1210 sec: 215486692 operations; 202319.4 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=202319, Max=87423, Min=374, Avg=2325.91, 90=3801, 99=7107, 99.9=17871, 99.99=38623] [INSERT: Count=1820919, Max=95743, Min=275, Avg=1935.55, 90=3195, 99=6367, 99.9=16943, 99.99=38719] 
2023-02-27 11:40:05:357 1220 sec: 217516056 operations; 202936.4 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=202341, Max=50399, Min=368, Avg=2311.91, 90=3719, 99=6907, 99.9=17359, 99.99=29887] [INSERT: Count=1826995, Max=49983, Min=279, Avg=1930.52, 90=3113, 99=6135, 99.9=16463, 99.99=27567] 
2023-02-27 11:40:15:357 1230 sec: 219519130 operations; 200307.4 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=199693, Max=51839, Min=348, Avg=2348.64, 90=3859, 99=6979, 99.9=18207, 99.99=47071] [INSERT: Count=1803374, Max=52031, Min=294, Avg=1955.16, 90=3257, 99=6107, 99.9=17471, 99.99=46271] 
2023-02-27 11:40:25:357 1240 sec: 221513002 operations; 199387.2 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=199562, Max=25583, Min=372, Avg=2369.26, 90=3863, 99=6351, 99.9=16399, 99.99=20975] [INSERT: Count=1794277, Max=24431, Min=284, Avg=1963.04, 90=3211, 99=5355, 99.9=16007, 99.99=20591] 
2023-02-27 11:40:35:357 1250 sec: 223493186 operations; 198018.4 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=198404, Max=83455, Min=346, Avg=2410.43, 90=3993, 99=6947, 99.9=15991, 99.99=38175] [INSERT: Count=1781859, Max=82943, Min=290, Avg=1973.73, 90=3271, 99=5775, 99.9=14919, 99.99=29887] 
2023-02-27 11:40:45:357 1260 sec: 225457437 operations; 196425.1 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=196221, Max=39647, Min=357, Avg=2452.13, 90=4045, 99=7015, 99.9=17887, 99.99=29567] [INSERT: Count=1768149, Max=54015, Min=281, Avg=1987.53, 90=3325, 99=5899, 99.9=16495, 99.99=29487] 
2023-02-27 11:40:55:357 1270 sec: 227390950 operations; 193351.3 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=193686, Max=24367, Min=371, Avg=2555.67, 90=4251, 99=6459, 99.9=17487, 99.99=21135] [INSERT: Count=1739589, Max=24991, Min=281, Avg=2011.82, 90=3451, 99=4975, 99.9=16175, 99.99=20399] 
2023-02-27 11:41:05:357 1280 sec: 229294346 operations; 190339.6 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=190723, Max=41215, Min=370, Avg=2616.54, 90=4323, 99=6763, 99.9=16279, 99.99=27631] [INSERT: Count=1712779, Max=37759, Min=280, Avg=2041.32, 90=3455, 99=5031, 99.9=14951, 99.99=26575] 
2023-02-27 11:41:15:357 1290 sec: 231203886 operations; 190954 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=191164, Max=69503, Min=341, Avg=2588.61, 90=4279, 99=6999, 99.9=17295, 99.99=40543] [INSERT: Count=1718337, Max=78591, Min=283, Avg=2036.97, 90=3449, 99=5223, 99.9=15919, 99.99=38783] 
2023-02-27 11:41:25:357 1300 sec: 233091660 operations; 188777.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=189126, Max=35679, Min=373, Avg=2616.18, 90=4291, 99=6851, 99.9=13663, 99.99=30543] [INSERT: Count=1698660, Max=37151, Min=274, Avg=2060.8, 90=3465, 99=4763, 99.9=12799, 99.99=30095] 
2023-02-27 11:41:35:357 1310 sec: 234978260 operations; 188660 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=188808, Max=40511, Min=345, Avg=2618.53, 90=4335, 99=6983, 99.9=16271, 99.99=28863] [INSERT: Count=1697754, Max=42527, Min=283, Avg=2061.98, 90=3499, 99=5015, 99.9=15263, 99.99=28031] 
2023-02-27 11:41:45:357 1320 sec: 236858179 operations; 187991.9 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=188023, Max=35167, Min=356, Avg=2636.34, 90=4355, 99=7039, 99.9=17359, 99.99=27071] [INSERT: Count=1691883, Max=45183, Min=286, Avg=2068.48, 90=3541, 99=4955, 99.9=16263, 99.99=25151] 
2023-02-27 11:41:55:357 1330 sec: 238670920 operations; 181274.1 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=181175, Max=206847, Min=323, Avg=2772.55, 90=4415, 99=7011, 99.9=20895, 99.99=170623] [INSERT: Count=1631614, Max=207615, Min=263, Avg=2140.93, 90=3557, 99=4687, 99.9=16975, 99.99=96575] 
2023-02-27 11:42:05:357 1340 sec: 240533780 operations; 186286 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=185770, Max=56319, Min=365, Avg=2687.29, 90=4419, 99=7019, 99.9=17711, 99.99=28255] [INSERT: Count=1677048, Max=53343, Min=290, Avg=2084.62, 90=3591, 99=4815, 99.9=16359, 99.99=26783] 
2023-02-27 11:42:15:357 1350 sec: 242476473 operations; 194269.3 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=193787, Max=44127, Min=360, Avg=2576.29, 90=4423, 99=7207, 99.9=17007, 99.99=26767] [INSERT: Count=1748916, Max=44159, Min=266, Avg=1998.86, 90=3667, 99=5503, 99.9=15639, 99.99=25647] 
2023-02-27 11:42:25:357 1360 sec: 244365081 operations; 188860.8 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=188700, Max=131455, Min=370, Avg=2661.88, 90=4415, 99=7015, 99.9=18831, 99.99=78207] [INSERT: Count=1699910, Max=133375, Min=267, Avg=2054.84, 90=3611, 99=5175, 99.9=16103, 99.99=73151] 
2023-02-27 11:42:35:357 1370 sec: 246142429 operations; 177734.8 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=177907, Max=94655, Min=362, Avg=2828.43, 90=4471, 99=6895, 99.9=16215, 99.99=49375] [INSERT: Count=1599421, Max=97599, Min=291, Avg=2183.47, 90=3555, 99=4623, 99.9=15223, 99.99=46943] 
2023-02-27 11:42:45:357 1380 sec: 247901923 operations; 175949.4 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=175864, Max=36959, Min=363, Avg=2871.11, 90=4503, 99=7147, 99.9=17631, 99.99=25647] [INSERT: Count=1583633, Max=37215, Min=281, Avg=2204.22, 90=3517, 99=4635, 99.9=16031, 99.99=22687] 
2023-02-27 11:42:55:357 1390 sec: 249726277 operations; 182435.4 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=182095, Max=22735, Min=363, Avg=2805, 90=4447, 99=7063, 99.9=16879, 99.99=20351] [INSERT: Count=1642244, Max=21679, Min=282, Avg=2121.87, 90=3453, 99=4567, 99.9=15535, 99.99=18895] 
2023-02-27 11:43:05:357 1400 sec: 251484305 operations; 175802.8 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=175216, Max=71295, Min=368, Avg=2924.2, 90=4563, 99=7499, 99.9=23663, 99.99=66879] [INSERT: Count=1582858, Max=69503, Min=291, Avg=2200.61, 90=3481, 99=4703, 99.9=19455, 99.99=65855] 
2023-02-27 11:43:15:357 1410 sec: 253312148 operations; 182784.3 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=182729, Max=43487, Min=392, Avg=2821.38, 90=4467, 99=7259, 99.9=14495, 99.99=20927] [INSERT: Count=1645065, Max=44927, Min=283, Avg=2115.22, 90=3317, 99=4655, 99.9=12895, 99.99=21279] 
2023-02-27 11:43:25:357 1420 sec: 255078853 operations; 176670.5 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=176459, Max=121087, Min=365, Avg=2890.95, 90=4487, 99=7191, 99.9=13783, 99.99=74815] [INSERT: Count=1590277, Max=119679, Min=288, Avg=2191.73, 90=3377, 99=4539, 99.9=12583, 99.99=34815] 
2023-02-27 11:43:35:357 1430 sec: 256836791 operations; 175793.8 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=175611, Max=43135, Min=368, Avg=2884.88, 90=4479, 99=7239, 99.9=19823, 99.99=39359] [INSERT: Count=1582344, Max=47327, Min=293, Avg=2204.87, 90=3393, 99=4595, 99.9=16751, 99.99=38079] 
2023-02-27 11:43:45:357 1440 sec: 258677298 operations; 184050.7 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=184085, Max=32831, Min=394, Avg=2782.55, 90=4439, 99=7075, 99.9=16151, 99.99=23567] [INSERT: Count=1656348, Max=34623, Min=286, Avg=2102.81, 90=3413, 99=4643, 99.9=14959, 99.99=22399] 
2023-02-27 11:43:55:357 1450 sec: 260547790 operations; 187049.2 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=186314, Max=93375, Min=376, Avg=2732.72, 90=4399, 99=7019, 99.9=13367, 99.99=18511] [INSERT: Count=1684195, Max=93631, Min=292, Avg=2069.92, 90=3317, 99=4663, 99.9=12271, 99.99=17295] 
2023-02-27 11:44:05:357 1460 sec: 262348265 operations; 180047.5 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=180129, Max=52191, Min=350, Avg=2834.35, 90=4455, 99=7359, 99.9=17215, 99.99=31599] [INSERT: Count=1620399, Max=54879, Min=294, Avg=2150.67, 90=3325, 99=4731, 99.9=16055, 99.99=30335] 
2023-02-27 11:44:15:357 1470 sec: 264051289 operations; 170302.4 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=170668, Max=91391, Min=392, Avg=2945.67, 90=4515, 99=7139, 99.9=18591, 99.99=37919] [INSERT: Count=1532330, Max=92159, Min=303, Avg=2279.5, 90=3349, 99=4623, 99.9=16543, 99.99=30863] 
2023-02-27 11:44:25:357 1480 sec: 265763220 operations; 171193.1 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=171269, Max=35711, Min=383, Avg=2931.55, 90=4439, 99=7415, 99.9=16927, 99.99=32863] [INSERT: Count=1540652, Max=36223, Min=274, Avg=2267.56, 90=3265, 99=4587, 99.9=16143, 99.99=32863] 
2023-02-27 11:44:35:357 1490 sec: 267482464 operations; 171924.4 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=172144, Max=39551, Min=378, Avg=2950.18, 90=4547, 99=7307, 99.9=16287, 99.99=27023] [INSERT: Count=1547085, Max=47583, Min=286, Avg=2254.31, 90=3467, 99=4571, 99.9=15207, 99.99=21055] 
2023-02-27 11:44:45:357 1500 sec: 269236548 operations; 175408.4 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=175175, Max=50495, Min=378, Avg=2876.73, 90=4451, 99=7195, 99.9=13511, 99.99=26911] [INSERT: Count=1578942, Max=55647, Min=295, Avg=2211.41, 90=3459, 99=4539, 99.9=12455, 99.99=22495] 
2023-02-27 11:44:55:357 1510 sec: 271035647 operations; 179909.9 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=180622, Max=32623, Min=382, Avg=2817.41, 90=4415, 99=7155, 99.9=13951, 99.99=27279] [INSERT: Count=1618443, Max=29759, Min=291, Avg=2154.21, 90=3431, 99=4563, 99.9=12599, 99.99=26911] 
2023-02-27 11:45:05:357 1520 sec: 272843621 operations; 180797.4 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=180955, Max=38431, Min=384, Avg=2808.85, 90=4419, 99=7383, 99.9=16991, 99.99=30447] [INSERT: Count=1627027, Max=38431, Min=273, Avg=2143.26, 90=3439, 99=4751, 99.9=15231, 99.99=29743] 
2023-02-27 11:45:15:357 1530 sec: 274632430 operations; 178880.9 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=178513, Max=173951, Min=343, Avg=2852.17, 90=4463, 99=7195, 99.9=16039, 99.99=110399] [INSERT: Count=1610337, Max=174463, Min=275, Avg=2165.03, 90=3475, 99=4579, 99.9=14495, 99.99=101247] 
2023-02-27 11:45:25:357 1540 sec: 276440107 operations; 180767.7 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=180839, Max=128831, Min=369, Avg=2818.98, 90=4459, 99=7203, 99.9=17503, 99.99=51071] [INSERT: Count=1626856, Max=133503, Min=282, Avg=2142.54, 90=3517, 99=4579, 99.9=16039, 99.99=69951] 
2023-02-27 11:45:35:357 1550 sec: 278249158 operations; 180905.1 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=180251, Max=88639, Min=341, Avg=2797.43, 90=4431, 99=7339, 99.9=16359, 99.99=34271] [INSERT: Count=1628770, Max=92927, Min=293, Avg=2143.39, 90=3479, 99=4635, 99.9=15311, 99.99=36543] 
2023-02-27 11:45:45:357 1560 sec: 280002313 operations; 175315.5 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=174989, Max=37375, Min=375, Avg=2874.3, 90=4479, 99=7331, 99.9=26559, 99.99=33919] [INSERT: Count=1578235, Max=36255, Min=285, Avg=2213.09, 90=3435, 99=4619, 99.9=19887, 99.99=32751] 
2023-02-27 11:45:55:357 1570 sec: 281685239 operations; 168292.6 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=168256, Max=31247, Min=387, Avg=2948.47, 90=4471, 99=7363, 99.9=17343, 99.99=27583] [INSERT: Count=1514656, Max=30239, Min=301, Avg=2310.56, 90=3289, 99=4603, 99.9=15591, 99.99=27151] 
2023-02-27 11:46:05:357 1580 sec: 283303822 operations; 161858.3 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=161797, Max=33823, Min=391, Avg=3052.35, 90=4587, 99=7523, 99.9=15567, 99.99=27039] [INSERT: Count=1456763, Max=34751, Min=296, Avg=2403.9, 90=3381, 99=4659, 99.9=13823, 99.99=26671] 
2023-02-27 11:46:15:357 1590 sec: 285020266 operations; 171644.4 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=171640, Max=31311, Min=385, Avg=2904.95, 90=4503, 99=7427, 99.9=13479, 99.99=19615] [INSERT: Count=1544852, Max=37663, Min=287, Avg=2263.72, 90=3315, 99=4691, 99.9=12279, 99.99=19967] 
2023-02-27 11:46:25:357 1600 sec: 286812399 operations; 179213.3 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=179342, Max=73023, Min=374, Avg=2797.48, 90=4431, 99=7147, 99.9=15799, 99.99=20815] [INSERT: Count=1612802, Max=73343, Min=285, Avg=2166.26, 90=3415, 99=4651, 99.9=14527, 99.99=20351] 
2023-02-27 11:46:35:357 1610 sec: 288653118 operations; 184071.9 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=184084, Max=35199, Min=349, Avg=2722.03, 90=4343, 99=7403, 99.9=18079, 99.99=28783] [INSERT: Count=1656632, Max=37375, Min=290, Avg=2109.21, 90=3327, 99=4919, 99.9=16719, 99.99=27983] 
2023-02-27 11:46:45:357 1620 sec: 290520545 operations; 186742.7 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=187067, Max=35423, Min=342, Avg=2688.99, 90=4275, 99=6987, 99.9=16895, 99.99=24447] [INSERT: Count=1680418, Max=31663, Min=294, Avg=2078.28, 90=3237, 99=4795, 99.9=15511, 99.99=22127] 
2023-02-27 11:46:55:357 1630 sec: 292344780 operations; 182423.5 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=181935, Max=80447, Min=375, Avg=2770.53, 90=4447, 99=7023, 99.9=14999, 99.99=26127] [INSERT: Count=1642281, Max=80895, Min=279, Avg=2125.88, 90=3473, 99=4639, 99.9=13383, 99.99=25103] 
2023-02-27 11:47:05:357 1640 sec: 294177638 operations; 183285.8 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=182966, Max=39039, Min=381, Avg=2767.07, 90=4463, 99=7155, 99.9=15759, 99.99=24543] [INSERT: Count=1649808, Max=39775, Min=284, Avg=2114.73, 90=3499, 99=4731, 99.9=14615, 99.99=20687] 
2023-02-27 11:47:15:357 1650 sec: 295990200 operations; 181256.2 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=181130, Max=83711, Min=356, Avg=2813.54, 90=4443, 99=7323, 99.9=16023, 99.99=81471] [INSERT: Count=1631554, Max=83711, Min=287, Avg=2136.63, 90=3379, 99=4643, 99.9=14399, 99.99=80191] 
2023-02-27 11:47:25:357 1660 sec: 297810052 operations; 181985.2 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=182261, Max=142591, Min=382, Avg=2781.9, 90=4375, 99=7011, 99.9=15551, 99.99=35263] [INSERT: Count=1637589, Max=138239, Min=274, Avg=2130.23, 90=3241, 99=4527, 99.9=14775, 99.99=65407] 
2023-02-27 11:47:35:357 1670 sec: 299571428 operations; 176137.6 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=176378, Max=148991, Min=375, Avg=2863.03, 90=4443, 99=7403, 99.9=17871, 99.99=68927] [INSERT: Count=1584822, Max=144383, Min=290, Avg=2202.18, 90=3263, 99=4651, 99.9=16559, 99.99=58623] 
2023-02-27 11:47:45:357 1680 sec: 301271747 operations; 170031.9 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=169888, Max=37599, Min=392, Avg=2906.13, 90=4455, 99=7003, 99.9=14583, 99.99=26639] [INSERT: Count=1530483, Max=57759, Min=293, Avg=2288.28, 90=3189, 99=4559, 99.9=13087, 99.99=24127] 
2023-02-27 11:47:55:357 1690 sec: 303020799 operations; 174905.2 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=175462, Max=21023, Min=380, Avg=2830.51, 90=4331, 99=7015, 99.9=13783, 99.99=18063] [INSERT: Count=1573559, Max=19887, Min=274, Avg=2223.54, 90=3085, 99=4495, 99.9=12383, 99.99=17391] 
2023-02-27 11:48:05:357 1700 sec: 304780158 operations; 175935.9 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=176040, Max=46751, Min=390, Avg=2849.76, 90=4395, 99=7083, 99.9=14695, 99.99=22591] [INSERT: Count=1583310, Max=32927, Min=305, Avg=2206.65, 90=3195, 99=4511, 99.9=13479, 99.99=21567] 
2023-02-27 11:48:15:357 1710 sec: 306535674 operations; 175551.6 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=175929, Max=71359, Min=380, Avg=2879.57, 90=4403, 99=7227, 99.9=16135, 99.99=33407] [INSERT: Count=1579686, Max=71679, Min=304, Avg=2208.8, 90=3135, 99=4495, 99.9=14247, 99.99=32463] 
2023-02-27 11:48:25:357 1720 sec: 308298305 operations; 176263.1 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=176838, Max=100735, Min=392, Avg=2866.39, 90=4411, 99=7075, 99.9=15143, 99.99=48799] [INSERT: Count=1585771, Max=104959, Min=304, Avg=2199.9, 90=3249, 99=4515, 99.9=13727, 99.99=57151] 
2023-02-27 11:48:35:357 1730 sec: 310052783 operations; 175447.8 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=175766, Max=103615, Min=387, Avg=2897.03, 90=4479, 99=7247, 99.9=15543, 99.99=47199] [INSERT: Count=1578736, Max=100863, Min=284, Avg=2208.37, 90=3397, 99=4599, 99.9=14271, 99.99=35647] 
2023-02-27 11:48:45:357 1740 sec: 311824792 operations; 177200.9 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=177446, Max=43743, Min=369, Avg=2849.4, 90=4455, 99=6983, 99.9=13799, 99.99=23103] [INSERT: Count=1594429, Max=35359, Min=289, Avg=2188.58, 90=3331, 99=4535, 99.9=13015, 99.99=20719] 
2023-02-27 11:48:55:357 1750 sec: 313604548 operations; 177975.6 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=177864, Max=28191, Min=370, Avg=2815.96, 90=4383, 99=7151, 99.9=16399, 99.99=23935] [INSERT: Count=1601908, Max=27199, Min=293, Avg=2181.59, 90=3245, 99=4555, 99.9=15191, 99.99=23151] 
2023-02-27 11:49:05:357 1760 sec: 315438003 operations; 183345.5 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=183597, Max=48031, Min=377, Avg=2723.82, 90=4259, 99=6987, 99.9=15855, 99.99=29215] [INSERT: Count=1649864, Max=48479, Min=288, Avg=2118.53, 90=3231, 99=4715, 99.9=14591, 99.99=27727] 
2023-02-27 11:49:15:357 1770 sec: 317244755 operations; 180675.2 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=180738, Max=54079, Min=382, Avg=2783.38, 90=4303, 99=6991, 99.9=18191, 99.99=30015] [INSERT: Count=1626005, Max=56959, Min=281, Avg=2147.77, 90=3213, 99=4611, 99.9=16479, 99.99=27967] 
2023-02-27 11:49:25:357 1780 sec: 318972608 operations; 172785.3 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=172687, Max=153343, Min=387, Avg=2914.78, 90=4435, 99=7111, 99.9=11991, 99.99=17087] [INSERT: Count=1555170, Max=146559, Min=286, Avg=2245.62, 90=3175, 99=4343, 99.9=10935, 99.99=52607] 
2023-02-27 11:49:35:357 1790 sec: 320669368 operations; 169676 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=169967, Max=135935, Min=390, Avg=3011.69, 90=4599, 99=7659, 99.9=15327, 99.99=51775] [INSERT: Count=1526803, Max=133375, Min=287, Avg=2281.8, 90=3277, 99=4479, 99.9=13999, 99.99=91583] 
2023-02-27 11:49:45:357 1800 sec: 322329880 operations; 166051.2 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=166502, Max=54367, Min=379, Avg=3072.45, 90=4671, 99=7619, 99.9=14447, 99.99=27535] [INSERT: Count=1494136, Max=56671, Min=295, Avg=2332.15, 90=3427, 99=4515, 99.9=12703, 99.99=21135] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-372 to complete. Workload status: true
2023-02-27 11:49:47:624 1802 sec: 322336073 operations; 2733.01 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=628, Max=10223, Min=483, Avg=3070.68, 90=4731, 99=6611, 99.9=7847, 99.99=10223] [CLEANUP: Count=400, Max=2220031, Min=0, Avg=5548.74, 90=2, 99=7, 99.9=2220031, 99.99=2220031] [INSERT: Count=5166, Max=8015, Min=366, Avg=2381.38, 90=3467, 99=4603, 99.9=6863, 99.99=7947] 
[OVERALL], RunTime(ms), 1802265
[OVERALL], Throughput(ops/sec), 178850.54251178377
[TOTAL_GCS_PS_Scavenge], Count, 2545
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 19016
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0551167558599872
[TOTAL_GCS_PS_MarkSweep], Count, 4
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 239
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.013261090905055582
[TOTAL_GCs], Count, 2549
[TOTAL_GC_TIME], Time(ms), 19255
[TOTAL_GC_TIME_%], Time(%), 1.0683778467650429
[READ], Operations, 32233845
[READ], AverageLatency(us), 2783.576757101115
[READ], MinLatency(us), 323
[READ], MaxLatency(us), 257791
[READ], 95thPercentileLatency(us), 5127
[READ], 99thPercentileLatency(us), 7187
[READ], Return=OK, 32233845
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5548.745
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2220031
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 7
[INSERT], Operations, 290102228
[INSERT], AverageLatency(us), 2168.777404456887
[INSERT], MinLatency(us), 246
[INSERT], MaxLatency(us), 301823
[INSERT], 95thPercentileLatency(us), 3767
[INSERT], 99thPercentileLatency(us), 4767
[INSERT], Return=OK, 290102228
