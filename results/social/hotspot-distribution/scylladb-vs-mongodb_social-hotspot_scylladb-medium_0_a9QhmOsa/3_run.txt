bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 20:07:38:289 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
2023-05-04 20:07:48:274 10 sec: 1223763 operations; 122376.3 current ops/sec; est completion in 2 hours 16 minutes [READ: Count=1162793, Max=165119, Min=467, Avg=2283.54, 90=3037, 99=9951, 99.9=29375, 99.99=74047] [UPDATE: Count=61642, Max=111487, Min=513, Avg=2099.84, 90=2675, 99=9271, 99.9=31791, 99.99=74687] 
2023-05-04 20:07:58:274 20 sec: 2713864 operations; 149010.1 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1415532, Max=19999, Min=492, Avg=2019.82, 90=2805, 99=3959, 99.9=8447, 99.99=12647] [UPDATE: Count=74314, Max=19375, Min=527, Avg=1850.36, 90=2495, 99=3245, 99.9=9143, 99.99=12895] 
2023-05-04 20:08:08:274 30 sec: 4187224 operations; 147336 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1399676, Max=52127, Min=498, Avg=2043.55, 90=2811, 99=4355, 99.9=10583, 99.99=28607] [UPDATE: Count=73781, Max=25519, Min=484, Avg=1857.28, 90=2485, 99=3333, 99.9=9527, 99.99=21583] 
2023-05-04 20:08:18:274 40 sec: 5663211 operations; 147598.7 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1401908, Max=58047, Min=478, Avg=2039.82, 90=2799, 99=4179, 99.9=11807, 99.99=33119] [UPDATE: Count=73931, Max=29135, Min=476, Avg=1857.54, 90=2481, 99=3301, 99.9=9847, 99.99=25423] 
2023-05-04 20:08:28:274 50 sec: 7146205 operations; 148299.4 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1408875, Max=21551, Min=514, Avg=2029.69, 90=2803, 99=4099, 99.9=10183, 99.99=17135] [UPDATE: Count=74173, Max=17775, Min=505, Avg=1858.07, 90=2489, 99=3303, 99.9=9839, 99.99=16367] 
2023-05-04 20:08:38:274 60 sec: 8627012 operations; 148080.7 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1407004, Max=52639, Min=443, Avg=2032.98, 90=2797, 99=4123, 99.9=10839, 99.99=29247] [UPDATE: Count=73830, Max=25599, Min=506, Avg=1853.05, 90=2481, 99=3301, 99.9=9399, 99.99=22767] 
2023-05-04 20:08:48:274 70 sec: 10107940 operations; 148092.8 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1407039, Max=52543, Min=482, Avg=2032.87, 90=2813, 99=4171, 99.9=9695, 99.99=27327] [UPDATE: Count=73746, Max=26015, Min=569, Avg=1853.94, 90=2497, 99=3325, 99.9=8151, 99.99=20223] 
2023-05-04 20:08:58:274 80 sec: 11594797 operations; 148685.7 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1412499, Max=20911, Min=501, Avg=2024.49, 90=2801, 99=4053, 99.9=9679, 99.99=13575] [UPDATE: Count=74371, Max=20527, Min=507, Avg=1852.33, 90=2487, 99=3285, 99.9=9431, 99.99=13519] 
2023-05-04 20:09:08:274 90 sec: 13071531 operations; 147673.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1403218, Max=52511, Min=485, Avg=2038.7, 90=2809, 99=4267, 99.9=9343, 99.99=27983] [UPDATE: Count=73640, Max=22111, Min=509, Avg=1858.97, 90=2481, 99=3355, 99.9=8887, 99.99=17743] 
2023-05-04 20:09:18:274 100 sec: 14542428 operations; 147089.7 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1397473, Max=40191, Min=492, Avg=2046.92, 90=2819, 99=4327, 99.9=12103, 99.99=27295] [UPDATE: Count=73356, Max=27215, Min=497, Avg=1863.66, 90=2497, 99=3383, 99.9=9519, 99.99=26255] 
2023-05-04 20:09:28:274 110 sec: 16027065 operations; 148463.7 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1410861, Max=19343, Min=501, Avg=2027.42, 90=2807, 99=4095, 99.9=9079, 99.99=12199] [UPDATE: Count=73839, Max=16183, Min=536, Avg=1854.73, 90=2487, 99=3311, 99.9=8919, 99.99=11663] 
2023-05-04 20:09:38:274 120 sec: 17504026 operations; 147696.1 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1402972, Max=58079, Min=499, Avg=2038.42, 90=2807, 99=4227, 99.9=11223, 99.99=28143] [UPDATE: Count=74006, Max=24031, Min=502, Avg=1858.61, 90=2491, 99=3335, 99.9=9479, 99.99=19919] 
2023-05-04 20:09:48:274 130 sec: 18983802 operations; 147977.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1405859, Max=53759, Min=494, Avg=2034.56, 90=2809, 99=4191, 99.9=9831, 99.99=26191] [UPDATE: Count=73860, Max=25199, Min=486, Avg=1853.56, 90=2485, 99=3309, 99.9=8479, 99.99=18159] 
2023-05-04 20:09:58:274 140 sec: 20470856 operations; 148705.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1412618, Max=18079, Min=506, Avg=2023.85, 90=2801, 99=4087, 99.9=8839, 99.99=15207] [UPDATE: Count=74346, Max=16575, Min=544, Avg=1858.24, 90=2495, 99=3343, 99.9=8647, 99.99=15271] 
2023-05-04 20:10:08:274 150 sec: 21946937 operations; 147608.1 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1402244, Max=68415, Min=487, Avg=2039.8, 90=2809, 99=4155, 99.9=10055, 99.99=35391] [UPDATE: Count=73869, Max=27439, Min=474, Avg=1856.48, 90=2487, 99=3305, 99.9=9095, 99.99=21871] 
2023-05-04 20:10:18:274 160 sec: 23424907 operations; 147797 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1404197, Max=57919, Min=502, Avg=2037.3, 90=2797, 99=4199, 99.9=11319, 99.99=28383] [UPDATE: Count=73925, Max=27999, Min=484, Avg=1851.06, 90=2473, 99=3351, 99.9=9247, 99.99=26591] 
2023-05-04 20:10:28:274 170 sec: 24906482 operations; 148157.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1406935, Max=18511, Min=479, Avg=2031.89, 90=2809, 99=4155, 99.9=8831, 99.99=13775] [UPDATE: Count=74432, Max=15367, Min=527, Avg=1856.11, 90=2489, 99=3287, 99.9=8679, 99.99=10679] 
2023-05-04 20:10:38:274 180 sec: 26390490 operations; 148400.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1409799, Max=62015, Min=487, Avg=2028.43, 90=2797, 99=4073, 99.9=10143, 99.99=28527] [UPDATE: Count=74250, Max=27167, Min=518, Avg=1855.13, 90=2485, 99=3269, 99.9=9583, 99.99=19071] 
2023-05-04 20:10:48:274 190 sec: 27867665 operations; 147717.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1402912, Max=50079, Min=497, Avg=2037.98, 90=2813, 99=4183, 99.9=9055, 99.99=26639] [UPDATE: Count=74214, Max=24287, Min=557, Avg=1861.04, 90=2499, 99=3323, 99.9=8511, 99.99=20847] 
2023-05-04 20:10:58:274 200 sec: 29354984 operations; 148731.9 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1412979, Max=16703, Min=514, Avg=2023.86, 90=2807, 99=4103, 99.9=8471, 99.99=10567] [UPDATE: Count=74353, Max=11399, Min=535, Avg=1851.78, 90=2489, 99=3319, 99.9=8247, 99.99=9943] 
2023-05-04 20:11:08:274 210 sec: 30830142 operations; 147515.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1401653, Max=54175, Min=494, Avg=2040.58, 90=2805, 99=4191, 99.9=11199, 99.99=29071] [UPDATE: Count=73517, Max=29055, Min=512, Avg=1865.34, 90=2495, 99=3345, 99.9=9583, 99.99=27631] 
2023-05-04 20:11:18:274 220 sec: 32302963 operations; 147282.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1399109, Max=59679, Min=460, Avg=2044.2, 90=2811, 99=4303, 99.9=11951, 99.99=33663] [UPDATE: Count=73856, Max=25679, Min=528, Avg=1861.72, 90=2495, 99=3371, 99.9=9279, 99.99=19199] 
2023-05-04 20:11:28:274 230 sec: 33786596 operations; 148363.3 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1409832, Max=18687, Min=505, Avg=2028.75, 90=2803, 99=4115, 99.9=9295, 99.99=16383] [UPDATE: Count=73732, Max=16991, Min=520, Avg=1857.45, 90=2487, 99=3317, 99.9=8791, 99.99=16031] 
2023-05-04 20:11:38:274 240 sec: 35260236 operations; 147364 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1400167, Max=55391, Min=484, Avg=2043.23, 90=2807, 99=4319, 99.9=12367, 99.99=29775] [UPDATE: Count=73447, Max=26431, Min=474, Avg=1856.66, 90=2487, 99=3379, 99.9=9607, 99.99=20639] 
2023-05-04 20:11:48:274 250 sec: 36741872 operations; 148163.6 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1407619, Max=52063, Min=500, Avg=2031.81, 90=2805, 99=4171, 99.9=9975, 99.99=27935] [UPDATE: Count=73975, Max=26943, Min=502, Avg=1855.85, 90=2491, 99=3339, 99.9=9047, 99.99=15367] 
2023-05-04 20:11:58:274 260 sec: 38228416 operations; 148654.4 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1412069, Max=17407, Min=509, Avg=2024.95, 90=2799, 99=4075, 99.9=8983, 99.99=11431] [UPDATE: Count=74443, Max=11639, Min=518, Avg=1852.16, 90=2485, 99=3299, 99.9=8551, 99.99=10663] 
2023-05-04 20:12:08:274 270 sec: 39705193 operations; 147677.7 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1402795, Max=56159, Min=486, Avg=2038.61, 90=2807, 99=4263, 99.9=10295, 99.99=28047] [UPDATE: Count=74020, Max=24287, Min=500, Avg=1858.77, 90=2493, 99=3337, 99.9=9127, 99.99=17839] 
2023-05-04 20:12:18:274 280 sec: 41183934 operations; 147874.1 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1405116, Max=56319, Min=489, Avg=2036.22, 90=2805, 99=4159, 99.9=11839, 99.99=29551] [UPDATE: Count=73634, Max=25023, Min=516, Avg=1849.92, 90=2491, 99=3293, 99.9=8951, 99.99=16279] 
2023-05-04 20:12:28:274 290 sec: 42672477 operations; 148854.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1413970, Max=17695, Min=526, Avg=2021.91, 90=2797, 99=4059, 99.9=8407, 99.99=11047] [UPDATE: Count=74502, Max=15311, Min=511, Avg=1855.84, 90=2485, 99=3291, 99.9=8399, 99.99=10919] 
2023-05-04 20:12:38:274 300 sec: 44148655 operations; 147617.8 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1402758, Max=56703, Min=472, Avg=2039.52, 90=2809, 99=4215, 99.9=10127, 99.99=30735] [UPDATE: Count=73574, Max=25759, Min=490, Avg=1857.31, 90=2493, 99=3347, 99.9=8935, 99.99=20335] 
2023-05-04 20:12:48:274 310 sec: 45628335 operations; 147968 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1405749, Max=53151, Min=477, Avg=2034.56, 90=2811, 99=4187, 99.9=9303, 99.99=25679] [UPDATE: Count=73723, Max=51231, Min=519, Avg=1857.49, 90=2503, 99=3359, 99.9=8191, 99.99=20207] 
2023-05-04 20:12:58:274 320 sec: 47111471 operations; 148313.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1408775, Max=44543, Min=501, Avg=2029.61, 90=2805, 99=4077, 99.9=9559, 99.99=20463] [UPDATE: Count=74510, Max=36735, Min=535, Avg=1854.45, 90=2489, 99=3279, 99.9=8935, 99.99=11207] 
2023-05-04 20:13:08:274 330 sec: 48587190 operations; 147571.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1401723, Max=56479, Min=487, Avg=2040.19, 90=2809, 99=4151, 99.9=10535, 99.99=28159] [UPDATE: Count=74133, Max=25151, Min=502, Avg=1858.69, 90=2485, 99=3297, 99.9=9023, 99.99=17215] 
2023-05-04 20:13:18:274 340 sec: 50066653 operations; 147946.3 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1405207, Max=53855, Min=489, Avg=2034.72, 90=2799, 99=4139, 99.9=10007, 99.99=27119] [UPDATE: Count=74085, Max=26015, Min=491, Avg=1858.81, 90=2487, 99=3309, 99.9=9359, 99.99=18319] 
2023-05-04 20:13:28:274 350 sec: 51548984 operations; 148233.1 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1408312, Max=21695, Min=508, Avg=2030.8, 90=2803, 99=4057, 99.9=10431, 99.99=15711] [UPDATE: Count=74124, Max=18655, Min=541, Avg=1856.39, 90=2485, 99=3297, 99.9=9967, 99.99=14927] 
2023-05-04 20:13:38:274 360 sec: 53028114 operations; 147913 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1405568, Max=51967, Min=492, Avg=2035.67, 90=2807, 99=4179, 99.9=10407, 99.99=26783] [UPDATE: Count=73338, Max=24655, Min=512, Avg=1852.72, 90=2485, 99=3323, 99.9=9047, 99.99=20975] 
2023-05-04 20:13:48:274 370 sec: 54507469 operations; 147935.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1405375, Max=57823, Min=490, Avg=2035.04, 90=2801, 99=4179, 99.9=10695, 99.99=31167] [UPDATE: Count=74232, Max=26639, Min=463, Avg=1853.43, 90=2489, 99=3323, 99.9=8775, 99.99=17311] 
2023-05-04 20:13:58:274 380 sec: 55991293 operations; 148382.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1409806, Max=14623, Min=511, Avg=2028.2, 90=2805, 99=4123, 99.9=8903, 99.99=10623] [UPDATE: Count=73908, Max=12399, Min=541, Avg=1863.93, 90=2495, 99=3371, 99.9=8807, 99.99=10527] 
2023-05-04 20:14:08:274 390 sec: 57469917 operations; 147862.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1404511, Max=36831, Min=497, Avg=2036.11, 90=2803, 99=4191, 99.9=11543, 99.99=24895] [UPDATE: Count=74172, Max=25215, Min=505, Avg=1856.06, 90=2489, 99=3307, 99.9=10087, 99.99=16543] 
2023-05-04 20:14:18:274 400 sec: 58952849 operations; 148293.2 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1408557, Max=45855, Min=488, Avg=2030.31, 90=2797, 99=4147, 99.9=9999, 99.99=25487] [UPDATE: Count=74295, Max=25407, Min=487, Avg=1849.29, 90=2479, 99=3287, 99.9=9239, 99.99=18239] 
2023-05-04 20:14:28:274 410 sec: 60437875 operations; 148502.6 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1410377, Max=18575, Min=505, Avg=2027.19, 90=2801, 99=4043, 99.9=9863, 99.99=12735] [UPDATE: Count=74631, Max=14903, Min=487, Avg=1851.03, 90=2477, 99=3259, 99.9=9439, 99.99=12359] 
2023-05-04 20:14:38:274 420 sec: 61918002 operations; 148012.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1406601, Max=57183, Min=499, Avg=2033.97, 90=2803, 99=4163, 99.9=9375, 99.99=28431] [UPDATE: Count=73535, Max=25487, Min=464, Avg=1854.64, 90=2487, 99=3347, 99.9=8415, 99.99=18287] 
2023-05-04 20:14:48:274 430 sec: 63389479 operations; 147147.7 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1397847, Max=53951, Min=498, Avg=2046.35, 90=2835, 99=4243, 99.9=11287, 99.99=29103] [UPDATE: Count=73830, Max=27295, Min=512, Avg=1858.83, 90=2507, 99=3341, 99.9=9383, 99.99=23791] 
2023-05-04 20:14:58:274 440 sec: 64869765 operations; 148028.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1406393, Max=13735, Min=512, Avg=2033.56, 90=2833, 99=4155, 99.9=7955, 99.99=10159] [UPDATE: Count=73628, Max=17487, Min=525, Avg=1860.71, 90=2511, 99=3381, 99.9=8055, 99.99=10679] 
2023-05-04 20:15:08:274 450 sec: 66337061 operations; 146714.93 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1394386, Max=56383, Min=496, Avg=2051.98, 90=2821, 99=4367, 99.9=14071, 99.99=27951] [UPDATE: Count=73079, Max=26943, Min=522, Avg=1863.2, 90=2503, 99=3383, 99.9=9127, 99.99=25791] 
2023-05-04 20:15:18:274 460 sec: 67813287 operations; 147637.36 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1402423, Max=63903, Min=471, Avg=2039.52, 90=2815, 99=4159, 99.9=10119, 99.99=29855] [UPDATE: Count=73668, Max=25599, Min=485, Avg=1857.79, 90=2501, 99=3329, 99.9=9199, 99.99=21439] 
2023-05-04 20:15:28:274 470 sec: 69291292 operations; 147800.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1404116, Max=25727, Min=510, Avg=2036.4, 90=2817, 99=4131, 99.9=9671, 99.99=14551] [UPDATE: Count=73959, Max=16607, Min=529, Avg=1866.29, 90=2505, 99=3333, 99.9=9375, 99.99=12031] 
2023-05-04 20:15:38:274 480 sec: 70771788 operations; 148049.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1406476, Max=58463, Min=496, Avg=2033.56, 90=2801, 99=4123, 99.9=9879, 99.99=31855] [UPDATE: Count=73988, Max=24991, Min=531, Avg=1852.43, 90=2485, 99=3277, 99.9=9039, 99.99=16223] 
2023-05-04 20:15:48:274 490 sec: 72254190 operations; 148240.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1408358, Max=64927, Min=470, Avg=2030.89, 90=2801, 99=4127, 99.9=9783, 99.99=35487] [UPDATE: Count=73932, Max=26719, Min=511, Avg=1855.91, 90=2489, 99=3331, 99.9=9079, 99.99=21951] 
2023-05-04 20:15:58:274 500 sec: 73738872 operations; 148468.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1410537, Max=26335, Min=481, Avg=2027.36, 90=2805, 99=4049, 99.9=9399, 99.99=17023] [UPDATE: Count=74429, Max=22831, Min=528, Avg=1852.99, 90=2487, 99=3269, 99.9=8935, 99.99=10727] 
2023-05-04 20:16:08:274 510 sec: 75210813 operations; 147194.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1398538, Max=62111, Min=483, Avg=2045.25, 90=2813, 99=4355, 99.9=10279, 99.99=33983] [UPDATE: Count=73207, Max=25087, Min=488, Avg=1866.82, 90=2497, 99=3421, 99.9=9015, 99.99=19663] 
2023-05-04 20:16:18:274 520 sec: 76681191 operations; 147037.8 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1396954, Max=56095, Min=499, Avg=2048.43, 90=2809, 99=4699, 99.9=13927, 99.99=29951] [UPDATE: Count=73458, Max=23135, Min=512, Avg=1847.21, 90=2489, 99=3355, 99.9=8695, 99.99=19167] 
2023-05-04 20:16:28:274 530 sec: 78165107 operations; 148391.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1409727, Max=18783, Min=515, Avg=2028.54, 90=2805, 99=4089, 99.9=9335, 99.99=12751] [UPDATE: Count=74213, Max=16023, Min=548, Avg=1855.15, 90=2487, 99=3307, 99.9=8887, 99.99=11687] 
2023-05-04 20:16:38:274 540 sec: 79643984 operations; 147887.7 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1405035, Max=56831, Min=497, Avg=2036.09, 90=2799, 99=4211, 99.9=12239, 99.99=29519] [UPDATE: Count=73857, Max=24911, Min=538, Avg=1849.18, 90=2483, 99=3327, 99.9=8207, 99.99=18655] 
2023-05-04 20:16:48:274 550 sec: 81124588 operations; 148060.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1406474, Max=52735, Min=490, Avg=2033.29, 90=2805, 99=4111, 99.9=10079, 99.99=28207] [UPDATE: Count=74030, Max=26623, Min=508, Avg=1854.39, 90=2489, 99=3329, 99.9=9151, 99.99=15239] 
2023-05-04 20:16:58:274 560 sec: 82611497 operations; 148690.9 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1412465, Max=14871, Min=506, Avg=2024.33, 90=2797, 99=4037, 99.9=9303, 99.99=11447] [UPDATE: Count=74431, Max=11983, Min=543, Avg=1852.46, 90=2491, 99=3265, 99.9=8943, 99.99=11359] 
2023-05-04 20:17:08:274 570 sec: 84093408 operations; 148191.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1408173, Max=54175, Min=494, Avg=2031.34, 90=2795, 99=4139, 99.9=10775, 99.99=26207] [UPDATE: Count=73804, Max=26399, Min=515, Avg=1856.02, 90=2491, 99=3303, 99.9=9175, 99.99=22223] 
2023-05-04 20:17:18:274 580 sec: 85579149 operations; 148574.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1411667, Max=51679, Min=487, Avg=2025.97, 90=2793, 99=4093, 99.9=10199, 99.99=26447] [UPDATE: Count=73965, Max=29855, Min=494, Avg=1857.64, 90=2487, 99=3307, 99.9=9495, 99.99=24751] 
2023-05-04 20:17:28:274 590 sec: 87060330 operations; 148118.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1406897, Max=39071, Min=492, Avg=2032.16, 90=2809, 99=4155, 99.9=9191, 99.99=20367] [UPDATE: Count=74398, Max=30127, Min=485, Avg=1857.35, 90=2493, 99=3299, 99.9=8615, 99.99=10775] 
2023-05-04 20:17:38:274 600 sec: 88535710 operations; 147538 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1401785, Max=54079, Min=485, Avg=2040.82, 90=2813, 99=4147, 99.9=11055, 99.99=26815] [UPDATE: Count=73621, Max=30703, Min=474, Avg=1856.77, 90=2491, 99=3311, 99.9=9599, 99.99=17935] 
2023-05-04 20:17:48:274 610 sec: 90006325 operations; 147061.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1397592, Max=59359, Min=469, Avg=2047.76, 90=2819, 99=4291, 99.9=11135, 99.99=30639] [UPDATE: Count=73030, Max=26831, Min=491, Avg=1853.71, 90=2489, 99=3291, 99.9=8935, 99.99=17631] 
2023-05-04 20:17:58:274 620 sec: 91487058 operations; 148073.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1406783, Max=16023, Min=517, Avg=2032.82, 90=2815, 99=4143, 99.9=9343, 99.99=11431] [UPDATE: Count=73929, Max=12583, Min=508, Avg=1860.69, 90=2491, 99=3329, 99.9=9367, 99.99=11479] 
2023-05-04 20:18:08:274 630 sec: 92959207 operations; 147214.9 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1398810, Max=58751, Min=474, Avg=2045.53, 90=2821, 99=4223, 99.9=11927, 99.99=28223] [UPDATE: Count=73418, Max=43327, Min=499, Avg=1854.73, 90=2489, 99=3293, 99.9=9863, 99.99=18415] 
2023-05-04 20:18:18:274 640 sec: 94438260 operations; 147905.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1404962, Max=52383, Min=479, Avg=2035.92, 90=2811, 99=4207, 99.9=9903, 99.99=28399] [UPDATE: Count=74002, Max=23791, Min=523, Avg=1848.5, 90=2485, 99=3309, 99.9=8583, 99.99=15679] 
2023-05-04 20:18:28:274 650 sec: 95924033 operations; 148577.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1411443, Max=18351, Min=506, Avg=2025.92, 90=2797, 99=4091, 99.9=9999, 99.99=14327] [UPDATE: Count=74328, Max=15111, Min=488, Avg=1854.95, 90=2481, 99=3285, 99.9=9567, 99.99=13911] 
2023-05-04 20:18:38:274 660 sec: 97406791 operations; 148275.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1408715, Max=54015, Min=499, Avg=2030.62, 90=2789, 99=4107, 99.9=13671, 99.99=26671] [UPDATE: Count=74039, Max=26607, Min=523, Avg=1847.35, 90=2477, 99=3271, 99.9=10511, 99.99=18223] 
2023-05-04 20:18:48:274 670 sec: 98881302 operations; 147451.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1400228, Max=55295, Min=496, Avg=2042.18, 90=2821, 99=4323, 99.9=11279, 99.99=28879] [UPDATE: Count=74266, Max=26719, Min=537, Avg=1854.18, 90=2495, 99=3355, 99.9=8967, 99.99=12303] 
2023-05-04 20:18:58:274 680 sec: 100363687 operations; 148238.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1408349, Max=14263, Min=507, Avg=2030.62, 90=2819, 99=4195, 99.9=8159, 99.99=10039] [UPDATE: Count=74084, Max=13767, Min=551, Avg=1858.08, 90=2499, 99=3349, 99.9=7971, 99.99=9495] 
2023-05-04 20:19:08:274 690 sec: 101842222 operations; 147853.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1405332, Max=48959, Min=483, Avg=2036.04, 90=2809, 99=4179, 99.9=10623, 99.99=26127] [UPDATE: Count=73167, Max=27599, Min=515, Avg=1859.1, 90=2497, 99=3363, 99.9=9871, 99.99=19327] 
2023-05-04 20:19:18:274 700 sec: 103318722 operations; 147650 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1402374, Max=59999, Min=492, Avg=2039.15, 90=2805, 99=4171, 99.9=11567, 99.99=29151] [UPDATE: Count=74113, Max=23407, Min=508, Avg=1856.63, 90=2487, 99=3357, 99.9=9799, 99.99=18623] 
2023-05-04 20:19:28:274 710 sec: 104802143 operations; 148342.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1409191, Max=16639, Min=514, Avg=2029.18, 90=2807, 99=4119, 99.9=9167, 99.99=14647] [UPDATE: Count=74109, Max=19135, Min=540, Avg=1858.08, 90=2491, 99=3331, 99.9=9039, 99.99=14183] 
2023-05-04 20:19:38:274 720 sec: 106283997 operations; 148185.4 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1407853, Max=51999, Min=499, Avg=2031.42, 90=2799, 99=4119, 99.9=10367, 99.99=27455] [UPDATE: Count=74115, Max=25647, Min=507, Avg=1856.65, 90=2485, 99=3333, 99.9=9519, 99.99=21631] 
2023-05-04 20:19:48:274 730 sec: 107760290 operations; 147629.3 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1402627, Max=57023, Min=522, Avg=2039.43, 90=2807, 99=4251, 99.9=11311, 99.99=24735] [UPDATE: Count=73681, Max=25999, Min=526, Avg=1854.3, 90=2485, 99=3313, 99.9=9295, 99.99=20239] 
2023-05-04 20:19:58:274 740 sec: 109251288 operations; 149099.8 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1416526, Max=13583, Min=521, Avg=2018.86, 90=2795, 99=4037, 99.9=8751, 99.99=11127] [UPDATE: Count=74431, Max=12279, Min=530, Avg=1847.18, 90=2481, 99=3257, 99.9=8527, 99.99=10903] 
2023-05-04 20:20:08:274 750 sec: 110724469 operations; 147318.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1399775, Max=46367, Min=501, Avg=2043.73, 90=2821, 99=4171, 99.9=10959, 99.99=25855] [UPDATE: Count=73459, Max=24911, Min=508, Avg=1861.63, 90=2491, 99=3321, 99.9=10063, 99.99=19023] 
2023-05-04 20:20:18:274 760 sec: 112197998 operations; 147352.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1399632, Max=59967, Min=478, Avg=2043.33, 90=2815, 99=4183, 99.9=9927, 99.99=36703] [UPDATE: Count=73893, Max=37855, Min=522, Avg=1858.47, 90=2497, 99=3311, 99.9=8863, 99.99=24863] 
2023-05-04 20:20:28:274 770 sec: 113677570 operations; 147957.2 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1405997, Max=18431, Min=521, Avg=2035.01, 90=2815, 99=4195, 99.9=9599, 99.99=12799] [UPDATE: Count=73499, Max=16447, Min=507, Avg=1850.12, 90=2485, 99=3265, 99.9=9191, 99.99=11855] 
2023-05-04 20:20:38:274 780 sec: 115152433 operations; 147486.3 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1400870, Max=52351, Min=494, Avg=2041.56, 90=2815, 99=4327, 99.9=10207, 99.99=26207] [UPDATE: Count=74094, Max=25407, Min=532, Avg=1857.91, 90=2491, 99=3361, 99.9=9455, 99.99=14495] 
2023-05-04 20:20:48:274 790 sec: 116616785 operations; 146435.2 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1391603, Max=52415, Min=474, Avg=2057.27, 90=2839, 99=5255, 99.9=12543, 99.99=27279] [UPDATE: Count=72792, Max=38399, Min=511, Avg=1849.06, 90=2503, 99=3409, 99.9=9615, 99.99=20687] 
2023-05-04 20:20:58:274 800 sec: 118097890 operations; 148110.5 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1406972, Max=17631, Min=515, Avg=2032.39, 90=2827, 99=4175, 99.9=8647, 99.99=11487] [UPDATE: Count=74116, Max=17599, Min=521, Avg=1858.94, 90=2503, 99=3345, 99.9=8527, 99.99=11767] 
2023-05-04 20:21:08:274 810 sec: 119575872 operations; 147798.2 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1403906, Max=52927, Min=475, Avg=2037.12, 90=2811, 99=4167, 99.9=10983, 99.99=27167] [UPDATE: Count=74170, Max=28143, Min=496, Avg=1854.96, 90=2501, 99=3313, 99.9=9511, 99.99=14783] 
2023-05-04 20:21:18:274 820 sec: 121055281 operations; 147940.9 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1405567, Max=52927, Min=488, Avg=2035.12, 90=2809, 99=4207, 99.9=10399, 99.99=27583] [UPDATE: Count=73677, Max=26223, Min=513, Avg=1853.33, 90=2495, 99=3337, 99.9=8823, 99.99=21663] 
2023-05-04 20:21:28:274 830 sec: 122539331 operations; 148405 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1409904, Max=19567, Min=507, Avg=2028.26, 90=2807, 99=4067, 99.9=10087, 99.99=14783] [UPDATE: Count=74304, Max=16991, Min=527, Avg=1858.85, 90=2501, 99=3317, 99.9=9839, 99.99=14495] 
2023-05-04 20:21:38:274 840 sec: 124019185 operations; 147985.4 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1405372, Max=56415, Min=496, Avg=2034.66, 90=2803, 99=4119, 99.9=10255, 99.99=28271] [UPDATE: Count=74346, Max=25167, Min=516, Avg=1849.1, 90=2485, 99=3291, 99.9=9167, 99.99=15351] 
2023-05-04 20:21:48:274 850 sec: 125502404 operations; 148321.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1408760, Max=51423, Min=478, Avg=2029.8, 90=2805, 99=4131, 99.9=9103, 99.99=27087] [UPDATE: Count=74448, Max=25183, Min=484, Avg=1851.81, 90=2493, 99=3301, 99.9=8527, 99.99=22079] 
2023-05-04 20:21:58:274 860 sec: 126987662 operations; 148525.8 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1410887, Max=15223, Min=526, Avg=2026.45, 90=2809, 99=4111, 99.9=9031, 99.99=10951] [UPDATE: Count=74385, Max=13159, Min=521, Avg=1857.86, 90=2493, 99=3301, 99.9=8679, 99.99=10799] 
2023-05-04 20:22:08:274 870 sec: 128466566 operations; 147890.4 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1405362, Max=55551, Min=489, Avg=2035.61, 90=2799, 99=4155, 99.9=11599, 99.99=27471] [UPDATE: Count=73619, Max=21967, Min=497, Avg=1856.95, 90=2485, 99=3323, 99.9=10311, 99.99=17311] 
2023-05-04 20:22:18:274 880 sec: 129948805 operations; 148223.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1408403, Max=51391, Min=503, Avg=2030.93, 90=2799, 99=4103, 99.9=10255, 99.99=27487] [UPDATE: Count=73816, Max=38943, Min=497, Avg=1856.03, 90=2487, 99=3325, 99.9=9583, 99.99=21599] 
2023-05-04 20:22:28:274 890 sec: 131437818 operations; 148886.41 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1414456, Max=19663, Min=489, Avg=2021.68, 90=2797, 99=4071, 99.9=9063, 99.99=12975] [UPDATE: Count=74526, Max=12767, Min=497, Avg=1847.46, 90=2479, 99=3277, 99.9=8719, 99.99=12079] 
2023-05-04 20:22:38:274 900 sec: 132919821 operations; 148215.12 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1407816, Max=48287, Min=483, Avg=2031.51, 90=2807, 99=4155, 99.9=10119, 99.99=27103] [UPDATE: Count=74152, Max=25375, Min=520, Avg=1851.18, 90=2489, 99=3293, 99.9=9463, 99.99=16199] 
2023-05-04 20:22:48:274 910 sec: 134402970 operations; 148314.9 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1408626, Max=50591, Min=499, Avg=2029.34, 90=2803, 99=4083, 99.9=10263, 99.99=27151] [UPDATE: Count=74611, Max=25503, Min=482, Avg=1856.31, 90=2491, 99=3323, 99.9=9703, 99.99=18767] 
2023-05-04 20:22:58:274 920 sec: 135892968 operations; 148999.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1415155, Max=15463, Min=514, Avg=2020.21, 90=2801, 99=4043, 99.9=9199, 99.99=11671] [UPDATE: Count=74740, Max=13983, Min=515, Avg=1848.87, 90=2491, 99=3291, 99.9=8943, 99.99=12263] 
2023-05-04 20:23:08:274 930 sec: 137367372 operations; 147425.66 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1400837, Max=61375, Min=478, Avg=2041.65, 90=2809, 99=4231, 99.9=11015, 99.99=34143] [UPDATE: Count=73725, Max=30479, Min=489, Avg=1866.72, 90=2493, 99=3421, 99.9=9871, 99.99=21135] 
2023-05-04 20:23:18:274 940 sec: 138847897 operations; 148067.31 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1406012, Max=54015, Min=489, Avg=2033.67, 90=2807, 99=4115, 99.9=10111, 99.99=28111] [UPDATE: Count=74386, Max=27455, Min=476, Avg=1851.08, 90=2489, 99=3297, 99.9=9191, 99.99=18959] 
2023-05-04 20:23:28:274 950 sec: 140337606 operations; 148970.9 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1415091, Max=19007, Min=500, Avg=2020.49, 90=2795, 99=4029, 99.9=8855, 99.99=11951] [UPDATE: Count=74541, Max=14383, Min=540, Avg=1852.21, 90=2485, 99=3285, 99.9=8599, 99.99=11591] 
2023-05-04 20:23:38:274 960 sec: 141816835 operations; 147922.9 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1404984, Max=55295, Min=479, Avg=2035.29, 90=2799, 99=4179, 99.9=10975, 99.99=28751] [UPDATE: Count=74276, Max=29503, Min=501, Avg=1854.11, 90=2485, 99=3301, 99.9=9023, 99.99=20831] 
2023-05-04 20:23:48:274 970 sec: 143296098 operations; 147926.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1405207, Max=54015, Min=482, Avg=2035.24, 90=2805, 99=4127, 99.9=10295, 99.99=28015] [UPDATE: Count=74078, Max=25007, Min=485, Avg=1854.79, 90=2493, 99=3289, 99.9=9247, 99.99=17327] 
2023-05-04 20:23:58:274 980 sec: 144784490 operations; 148839.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1413484, Max=19295, Min=517, Avg=2022.7, 90=2799, 99=4073, 99.9=9159, 99.99=15287] [UPDATE: Count=75008, Max=16655, Min=539, Avg=1846.84, 90=2485, 99=3307, 99.9=8711, 99.99=14159] 
2023-05-04 20:24:08:274 990 sec: 146251360 operations; 146687 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1393975, Max=91071, Min=480, Avg=2052.26, 90=2809, 99=4195, 99.9=11247, 99.99=88127] [UPDATE: Count=72790, Max=89663, Min=500, Avg=1867.15, 90=2493, 99=3331, 99.9=9175, 99.99=87423] 
2023-05-04 20:24:18:274 1000 sec: 147726687 operations; 147532.7 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1401933, Max=54527, Min=503, Avg=2040.86, 90=2813, 99=4295, 99.9=10255, 99.99=30911] [UPDATE: Count=73414, Max=28335, Min=499, Avg=1857.59, 90=2495, 99=3351, 99.9=8695, 99.99=20287] 
2023-05-04 20:24:28:274 1010 sec: 149211607 operations; 148492 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1411088, Max=24895, Min=502, Avg=2027.35, 90=2799, 99=4089, 99.9=10055, 99.99=21839] [UPDATE: Count=73769, Max=24271, Min=542, Avg=1852.88, 90=2481, 99=3297, 99.9=9487, 99.99=21471] 
2023-05-04 20:24:38:274 1020 sec: 150689146 operations; 147753.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1403714, Max=58495, Min=482, Avg=2037.72, 90=2803, 99=4131, 99.9=10671, 99.99=37631] [UPDATE: Count=73841, Max=37727, Min=487, Avg=1858.09, 90=2491, 99=3331, 99.9=9695, 99.99=36383] 
2023-05-04 20:24:48:274 1030 sec: 152155174 operations; 146602.8 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1392428, Max=53215, Min=478, Avg=2054.32, 90=2843, 99=4323, 99.9=10423, 99.99=27855] [UPDATE: Count=73753, Max=28975, Min=501, Avg=1863.05, 90=2505, 99=3329, 99.9=9127, 99.99=14511] 
2023-05-04 20:24:58:274 1040 sec: 153624051 operations; 146887.7 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1395115, Max=20575, Min=505, Avg=2049.74, 90=2843, 99=4291, 99.9=9767, 99.99=16543] [UPDATE: Count=73652, Max=17567, Min=471, Avg=1868.28, 90=2503, 99=3365, 99.9=9551, 99.99=16167] 
2023-05-04 20:25:08:274 1050 sec: 155091282 operations; 146723.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1394140, Max=53183, Min=481, Avg=2052.36, 90=2823, 99=4307, 99.9=11295, 99.99=30783] [UPDATE: Count=73050, Max=25471, Min=502, Avg=1863.8, 90=2497, 99=3343, 99.9=9559, 99.99=21663] 
2023-05-04 20:25:18:274 1060 sec: 156555032 operations; 146360.36 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1390779, Max=49119, Min=489, Avg=2057.39, 90=2831, 99=4395, 99.9=11727, 99.99=30671] [UPDATE: Count=72983, Max=37919, Min=502, Avg=1861.71, 90=2497, 99=3347, 99.9=8895, 99.99=25615] 
2023-05-04 20:25:28:274 1070 sec: 158012828 operations; 145794.18 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1385032, Max=125759, Min=500, Avg=2064.93, 90=2827, 99=4195, 99.9=9335, 99.99=120895] [UPDATE: Count=72771, Max=122175, Min=563, Avg=1889.58, 90=2495, 99=3317, 99.9=9319, 99.99=120639] 
2023-05-04 20:25:38:274 1080 sec: 159480051 operations; 146722.3 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1394087, Max=50367, Min=482, Avg=2052.35, 90=2833, 99=4335, 99.9=10671, 99.99=27391] [UPDATE: Count=73147, Max=28015, Min=474, Avg=1866.12, 90=2493, 99=3323, 99.9=10023, 99.99=22463] 
2023-05-04 20:25:48:274 1090 sec: 160949272 operations; 146922.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1395719, Max=54783, Min=485, Avg=2049.52, 90=2825, 99=4307, 99.9=9767, 99.99=30303] [UPDATE: Count=73497, Max=25935, Min=525, Avg=1863.08, 90=2489, 99=3325, 99.9=8863, 99.99=20303] 
2023-05-04 20:25:58:274 1100 sec: 162420167 operations; 147089.5 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1397466, Max=23455, Min=512, Avg=2046.76, 90=2833, 99=4211, 99.9=9743, 99.99=16207] [UPDATE: Count=73363, Max=22159, Min=556, Avg=1870.77, 90=2501, 99=3371, 99.9=9799, 99.99=17743] 
2023-05-04 20:26:08:274 1110 sec: 163878383 operations; 145821.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1385225, Max=54463, Min=491, Avg=2065.48, 90=2845, 99=4483, 99.9=10799, 99.99=30303] [UPDATE: Count=73218, Max=26047, Min=520, Avg=1869.25, 90=2491, 99=3355, 99.9=9223, 99.99=23951] 
2023-05-04 20:26:18:274 1120 sec: 165341844 operations; 146346.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1390715, Max=37791, Min=513, Avg=2057.52, 90=2837, 99=4447, 99.9=10815, 99.99=23327] [UPDATE: Count=72527, Max=24335, Min=485, Avg=1869.6, 90=2493, 99=3387, 99.9=9383, 99.99=19119] 
2023-05-04 20:26:28:274 1130 sec: 166816434 operations; 147459 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1401079, Max=21615, Min=512, Avg=2041.86, 90=2819, 99=4183, 99.9=9727, 99.99=14959] [UPDATE: Count=73559, Max=16239, Min=551, Avg=1860.54, 90=2483, 99=3297, 99.9=9471, 99.99=13759] 
2023-05-04 20:26:38:274 1140 sec: 168270136 operations; 145370.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1380898, Max=58271, Min=486, Avg=2072.31, 90=2863, 99=4679, 99.9=10831, 99.99=25951] [UPDATE: Count=72788, Max=27007, Min=518, Avg=1865.77, 90=2491, 99=3365, 99.9=8655, 99.99=23983] 
2023-05-04 20:26:48:278 1150 sec: 169741409 operations; 147053.77 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1398011, Max=59871, Min=485, Avg=2046.28, 90=2821, 99=4351, 99.9=11231, 99.99=34239] [UPDATE: Count=73284, Max=26143, Min=514, Avg=1856.87, 90=2505, 99=3403, 99.9=8623, 99.99=17439] 
2023-05-04 20:26:58:274 1160 sec: 171217831 operations; 147716.06 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1402347, Max=15047, Min=505, Avg=2039.72, 90=2839, 99=4195, 99.9=9087, 99.99=11263] [UPDATE: Count=74014, Max=11631, Min=539, Avg=1862.65, 90=2513, 99=3385, 99.9=8727, 99.99=10399] 
2023-05-04 20:27:08:274 1170 sec: 172691368 operations; 147353.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1400278, Max=55519, Min=484, Avg=2043.46, 90=2823, 99=4223, 99.9=11183, 99.99=29983] [UPDATE: Count=73447, Max=23119, Min=518, Avg=1858.44, 90=2507, 99=3357, 99.9=9655, 99.99=17247] 
2023-05-04 20:27:18:274 1180 sec: 174162435 operations; 147106.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1397694, Max=58143, Min=498, Avg=2046.65, 90=2827, 99=4255, 99.9=10079, 99.99=31759] [UPDATE: Count=73244, Max=28495, Min=496, Avg=1865.34, 90=2511, 99=3357, 99.9=9135, 99.99=21183] 
2023-05-04 20:27:28:274 1190 sec: 175651393 operations; 148895.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1414765, Max=20015, Min=523, Avg=2021.83, 90=2799, 99=3999, 99.9=9207, 99.99=12535] [UPDATE: Count=74335, Max=15727, Min=506, Avg=1849.64, 90=2481, 99=3255, 99.9=8959, 99.99=11255] 
2023-05-04 20:27:38:274 1200 sec: 177131998 operations; 148060.5 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1406824, Max=54111, Min=480, Avg=2033.39, 90=2797, 99=4143, 99.9=10455, 99.99=27455] [UPDATE: Count=73634, Max=34079, Min=509, Avg=1853.73, 90=2483, 99=3275, 99.9=8727, 99.99=16975] 
2023-05-04 20:27:48:274 1210 sec: 178616416 operations; 148441.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1409966, Max=54975, Min=486, Avg=2028.13, 90=2799, 99=4083, 99.9=10239, 99.99=27535] [UPDATE: Count=74470, Max=26559, Min=514, Avg=1852.42, 90=2483, 99=3283, 99.9=9879, 99.99=22351] 
2023-05-04 20:27:58:274 1220 sec: 180098339 operations; 148192.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1408149, Max=14039, Min=519, Avg=2031.38, 90=2819, 99=4127, 99.9=9503, 99.99=11471] [UPDATE: Count=73770, Max=18735, Min=525, Avg=1859.45, 90=2497, 99=3337, 99.9=9711, 99.99=11511] 
2023-05-04 20:28:08:274 1230 sec: 181580152 operations; 148181.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1407355, Max=52415, Min=471, Avg=2031.75, 90=2801, 99=4065, 99.9=10495, 99.99=26687] [UPDATE: Count=74422, Max=25903, Min=518, Avg=1854.05, 90=2487, 99=3297, 99.9=9815, 99.99=16607] 
2023-05-04 20:28:18:274 1240 sec: 183059330 operations; 147917.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1405191, Max=56255, Min=480, Avg=2035.41, 90=2807, 99=4171, 99.9=10055, 99.99=27679] [UPDATE: Count=74168, Max=24959, Min=523, Avg=1856.27, 90=2491, 99=3341, 99.9=9319, 99.99=17743] 
2023-05-04 20:28:28:274 1250 sec: 184541077 operations; 148174.7 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1407723, Max=18687, Min=496, Avg=2031.83, 90=2811, 99=4191, 99.9=9063, 99.99=11847] [UPDATE: Count=73922, Max=15863, Min=505, Avg=1855.25, 90=2483, 99=3309, 99.9=8551, 99.99=11023] 
2023-05-04 20:28:38:282 1260 sec: 186021386 operations; 147897.79 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1406150, Max=47839, Min=475, Avg=2034.55, 90=2811, 99=4131, 99.9=9495, 99.99=26255] [UPDATE: Count=74211, Max=24239, Min=510, Avg=1850.43, 90=2487, 99=3297, 99.9=8791, 99.99=19951] 
2023-05-04 20:28:48:279 1270 sec: 187499803 operations; 147886.07 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1404101, Max=50143, Min=500, Avg=2036.24, 90=2811, 99=4227, 99.9=10487, 99.99=26527] [UPDATE: Count=74228, Max=51167, Min=517, Avg=1854.55, 90=2493, 99=3361, 99.9=8759, 99.99=14039] 
2023-05-04 20:28:58:274 1280 sec: 188984272 operations; 148536.02 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1410384, Max=15039, Min=518, Avg=2027.94, 90=2807, 99=4115, 99.9=9135, 99.99=11039] [UPDATE: Count=74050, Max=11455, Min=505, Avg=1853.92, 90=2485, 99=3299, 99.9=8919, 99.99=10511] 
2023-05-04 20:29:08:274 1290 sec: 190466489 operations; 148221.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1408254, Max=58463, Min=472, Avg=2031.16, 90=2795, 99=4119, 99.9=10631, 99.99=28703] [UPDATE: Count=73992, Max=25791, Min=509, Avg=1853.47, 90=2479, 99=3295, 99.9=8967, 99.99=22175] 
2023-05-04 20:29:18:274 1300 sec: 191947724 operations; 148123.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1407525, Max=52671, Min=482, Avg=2032.4, 90=2809, 99=4147, 99.9=10023, 99.99=27391] [UPDATE: Count=73693, Max=26703, Min=524, Avg=1856.63, 90=2493, 99=3345, 99.9=9135, 99.99=20495] 
2023-05-04 20:29:28:274 1310 sec: 193433460 operations; 148558.74 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1411767, Max=19599, Min=489, Avg=2026.24, 90=2807, 99=4111, 99.9=9055, 99.99=12943] [UPDATE: Count=74037, Max=15767, Min=520, Avg=1851.95, 90=2485, 99=3295, 99.9=8687, 99.99=11655] 
2023-05-04 20:29:38:274 1320 sec: 194915602 operations; 148229.02 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1407887, Max=53823, Min=501, Avg=2031.45, 90=2801, 99=4219, 99.9=10303, 99.99=27695] [UPDATE: Count=74320, Max=25119, Min=478, Avg=1851.6, 90=2491, 99=3337, 99.9=8911, 99.99=19183] 
2023-05-04 20:29:48:274 1330 sec: 196389888 operations; 147428.6 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1400408, Max=57183, Min=492, Avg=2042.36, 90=2803, 99=4295, 99.9=14903, 99.99=28143] [UPDATE: Count=73888, Max=45759, Min=487, Avg=1858.72, 90=2489, 99=3357, 99.9=9479, 99.99=20431] 
2023-05-04 20:29:58:274 1340 sec: 197873325 operations; 148343.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1409736, Max=16119, Min=518, Avg=2029.18, 90=2809, 99=4103, 99.9=9103, 99.99=11215] [UPDATE: Count=73637, Max=13215, Min=553, Avg=1858.26, 90=2491, 99=3331, 99.9=8919, 99.99=11039] 
2023-05-04 20:30:08:274 1350 sec: 199352839 operations; 147936.61 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1405274, Max=64319, Min=495, Avg=2034.98, 90=2803, 99=4115, 99.9=10599, 99.99=30959] [UPDATE: Count=74302, Max=24943, Min=509, Avg=1856.12, 90=2489, 99=3301, 99.9=9463, 99.99=13535] 
2023-05-04 20:30:18:274 1360 sec: 200831110 operations; 147841.88 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1404345, Max=58943, Min=478, Avg=2036.47, 90=2807, 99=4119, 99.9=10767, 99.99=27999] [UPDATE: Count=73850, Max=27519, Min=495, Avg=1861.63, 90=2495, 99=3329, 99.9=10327, 99.99=20847] 
2023-05-04 20:30:28:274 1370 sec: 202312595 operations; 148148.5 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1407156, Max=17855, Min=486, Avg=2032.07, 90=2811, 99=4139, 99.9=9423, 99.99=15615] [UPDATE: Count=74253, Max=17295, Min=518, Avg=1857.38, 90=2493, 99=3325, 99.9=8927, 99.99=15407] 
2023-05-04 20:30:38:274 1380 sec: 203790428 operations; 147783.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1403901, Max=52543, Min=482, Avg=2037.11, 90=2811, 99=4139, 99.9=10431, 99.99=28831] [UPDATE: Count=73964, Max=26191, Min=497, Avg=1860.8, 90=2495, 99=3351, 99.9=10159, 99.99=19247] 
2023-05-04 20:30:48:274 1390 sec: 205267917 operations; 147748.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1403402, Max=53855, Min=506, Avg=2038.15, 90=2813, 99=4251, 99.9=11295, 99.99=26687] [UPDATE: Count=74059, Max=33919, Min=497, Avg=1851.16, 90=2493, 99=3347, 99.9=9399, 99.99=13287] 
2023-05-04 20:30:58:274 1400 sec: 206740913 operations; 147299.6 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1398829, Max=59871, Min=500, Avg=2043.05, 90=2809, 99=4099, 99.9=10063, 99.99=55327] [UPDATE: Count=74179, Max=56095, Min=540, Avg=1874.65, 90=2489, 99=3323, 99.9=10119, 99.99=55103] 
2023-05-04 20:31:08:274 1410 sec: 208217580 operations; 147666.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1403359, Max=53983, Min=454, Avg=2038.88, 90=2805, 99=4159, 99.9=11879, 99.99=27455] [UPDATE: Count=73340, Max=25439, Min=495, Avg=1858.23, 90=2489, 99=3327, 99.9=10031, 99.99=20991] 
2023-05-04 20:31:18:274 1420 sec: 209690900 operations; 147332 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1399850, Max=59231, Min=479, Avg=2043.51, 90=2803, 99=4175, 99.9=10455, 99.99=56415] [UPDATE: Count=73446, Max=57599, Min=489, Avg=1863.83, 90=2483, 99=3293, 99.9=9655, 99.99=56607] 
2023-05-04 20:31:28:274 1430 sec: 211172399 operations; 148149.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1407483, Max=18719, Min=500, Avg=2031.82, 90=2807, 99=4155, 99.9=9087, 99.99=15903] [UPDATE: Count=73974, Max=17951, Min=523, Avg=1861.35, 90=2483, 99=3321, 99.9=8983, 99.99=15303] 
2023-05-04 20:31:38:274 1440 sec: 212654678 operations; 148227.9 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1408214, Max=51615, Min=487, Avg=2031.04, 90=2801, 99=4155, 99.9=9983, 99.99=26543] [UPDATE: Count=74150, Max=26479, Min=509, Avg=1855.53, 90=2485, 99=3315, 99.9=9423, 99.99=16895] 
2023-05-04 20:31:48:274 1450 sec: 214132128 operations; 147745 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1403397, Max=52223, Min=486, Avg=2037.89, 90=2807, 99=4183, 99.9=10967, 99.99=28191] [UPDATE: Count=74016, Max=26063, Min=524, Avg=1856.65, 90=2489, 99=3323, 99.9=9567, 99.99=20623] 
2023-05-04 20:31:58:274 1460 sec: 215620870 operations; 148874.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1414154, Max=16375, Min=515, Avg=2022.17, 90=2799, 99=4007, 99.9=9423, 99.99=12271] [UPDATE: Count=74589, Max=13807, Min=523, Avg=1849.59, 90=2483, 99=3289, 99.9=9247, 99.99=11983] 
2023-05-04 20:32:08:274 1470 sec: 217094790 operations; 147392 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1400042, Max=52543, Min=494, Avg=2042.66, 90=2813, 99=4299, 99.9=10671, 99.99=27535] [UPDATE: Count=73961, Max=26015, Min=516, Avg=1863.96, 90=2495, 99=3365, 99.9=9927, 99.99=18079] 
2023-05-04 20:32:18:274 1480 sec: 218570271 operations; 147548.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1401574, Max=54879, Min=498, Avg=2040.44, 90=2809, 99=4227, 99.9=11743, 99.99=28383] [UPDATE: Count=73954, Max=27263, Min=517, Avg=1863.36, 90=2493, 99=3387, 99.9=10199, 99.99=18191] 
2023-05-04 20:32:28:274 1490 sec: 220052843 operations; 148242.38 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1408223, Max=21423, Min=501, Avg=2030.43, 90=2805, 99=4083, 99.9=10111, 99.99=15319] [UPDATE: Count=74236, Max=16511, Min=544, Avg=1858.89, 90=2491, 99=3277, 99.9=9791, 99.99=15071] 
2023-05-04 20:32:38:276 1500 sec: 221532553 operations; 147941.41 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1405657, Max=60799, Min=495, Avg=2034.39, 90=2805, 99=4167, 99.9=9791, 99.99=31263] [UPDATE: Count=74123, Max=26271, Min=501, Avg=1849.98, 90=2483, 99=3315, 99.9=8847, 99.99=21695] 
2023-05-04 20:32:48:274 1510 sec: 223003774 operations; 147166.25 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1397937, Max=57247, Min=499, Avg=2047.37, 90=2829, 99=4343, 99.9=10599, 99.99=27503] [UPDATE: Count=73189, Max=27455, Min=485, Avg=1859.7, 90=2505, 99=3393, 99.9=8583, 99.99=19887] 
2023-05-04 20:32:58:274 1520 sec: 224486028 operations; 148225.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1408056, Max=16479, Min=515, Avg=2030.78, 90=2811, 99=4099, 99.9=9327, 99.99=14607] [UPDATE: Count=74310, Max=15607, Min=493, Avg=1861.23, 90=2501, 99=3321, 99.9=9071, 99.99=14647] 
2023-05-04 20:33:08:274 1530 sec: 225958652 operations; 147262.4 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1398864, Max=51423, Min=477, Avg=2044.69, 90=2819, 99=4299, 99.9=10559, 99.99=27279] [UPDATE: Count=73658, Max=25983, Min=509, Avg=1860.53, 90=2497, 99=3357, 99.9=9639, 99.99=18447] 
2023-05-04 20:33:18:274 1540 sec: 227437063 operations; 147841.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1404737, Max=50335, Min=491, Avg=2036.34, 90=2819, 99=4115, 99.9=10791, 99.99=27487] [UPDATE: Count=73714, Max=26815, Min=515, Avg=1860.12, 90=2505, 99=3319, 99.9=9391, 99.99=17279] 
2023-05-04 20:33:28:274 1550 sec: 228919161 operations; 148209.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1408241, Max=20111, Min=512, Avg=2030.99, 90=2815, 99=4143, 99.9=8887, 99.99=12287] [UPDATE: Count=73833, Max=15047, Min=507, Avg=1860.04, 90=2497, 99=3305, 99.9=8735, 99.99=11063] 
2023-05-04 20:33:38:274 1560 sec: 230390599 operations; 147143.8 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1397439, Max=52607, Min=464, Avg=2046.14, 90=2811, 99=4215, 99.9=10815, 99.99=28735] [UPDATE: Count=74045, Max=26527, Min=483, Avg=1867.55, 90=2493, 99=3333, 99.9=10063, 99.99=25151] 
2023-05-04 20:33:48:274 1570 sec: 231866571 operations; 147597.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1402158, Max=52831, Min=483, Avg=2039.69, 90=2811, 99=4283, 99.9=9823, 99.99=26607] [UPDATE: Count=73854, Max=47295, Min=486, Avg=1863.14, 90=2499, 99=3407, 99.9=8671, 99.99=20815] 
2023-05-04 20:33:58:274 1580 sec: 233349077 operations; 148250.6 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1408497, Max=17823, Min=509, Avg=2030.36, 90=2809, 99=4155, 99.9=8911, 99.99=14567] [UPDATE: Count=74004, Max=15367, Min=514, Avg=1860.95, 90=2491, 99=3343, 99.9=8735, 99.99=14383] 
2023-05-04 20:34:08:274 1590 sec: 234825786 operations; 147670.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1402970, Max=59935, Min=485, Avg=2038.77, 90=2805, 99=4175, 99.9=10599, 99.99=31471] [UPDATE: Count=73646, Max=25247, Min=499, Avg=1861.82, 90=2493, 99=3361, 99.9=9951, 99.99=20271] 
2023-05-04 20:34:18:279 1600 sec: 236305008 operations; 147833.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1405923, Max=54751, Min=494, Avg=2035.23, 90=2807, 99=4195, 99.9=9959, 99.99=28575] [UPDATE: Count=73401, Max=27519, Min=499, Avg=1851.61, 90=2489, 99=3313, 99.9=9095, 99.99=14503] 
2023-05-04 20:34:28:274 1610 sec: 237794343 operations; 149022.91 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1414949, Max=18031, Min=494, Avg=2021.59, 90=2799, 99=4021, 99.9=9007, 99.99=11847] [UPDATE: Count=74251, Max=14855, Min=541, Avg=1847.33, 90=2487, 99=3275, 99.9=8423, 99.99=11015] 
2023-05-04 20:34:38:274 1620 sec: 239272836 operations; 147849.3 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1404765, Max=63519, Min=487, Avg=2036.33, 90=2805, 99=4211, 99.9=9703, 99.99=35615] [UPDATE: Count=73837, Max=49279, Min=480, Avg=1858.2, 90=2493, 99=3355, 99.9=8991, 99.99=23487] 
2023-05-04 20:34:48:274 1630 sec: 240747895 operations; 147491.15 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1400932, Max=54239, Min=450, Avg=2041.6, 90=2821, 99=4243, 99.9=11047, 99.99=29519] [UPDATE: Count=74137, Max=27391, Min=479, Avg=1853, 90=2501, 99=3349, 99.9=9055, 99.99=13927] 
2023-05-04 20:34:58:274 1640 sec: 242229233 operations; 148148.61 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1407492, Max=17935, Min=497, Avg=2032.08, 90=2825, 99=4143, 99.9=9159, 99.99=11071] [UPDATE: Count=73800, Max=11263, Min=542, Avg=1860.8, 90=2501, 99=3357, 99.9=8823, 99.99=10631] 
2023-05-04 20:35:08:274 1650 sec: 243700789 operations; 147155.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1397518, Max=52223, Min=477, Avg=2046.13, 90=2811, 99=4195, 99.9=11967, 99.99=32383] [UPDATE: Count=74088, Max=33119, Min=516, Avg=1863.07, 90=2491, 99=3305, 99.9=10111, 99.99=31983] 
2023-05-04 20:35:18:274 1660 sec: 245175765 operations; 147497.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1401138, Max=55615, Min=485, Avg=2042.36, 90=2809, 99=4303, 99.9=13071, 99.99=28415] [UPDATE: Count=74012, Max=23055, Min=525, Avg=1859.63, 90=2499, 99=3357, 99.9=8983, 99.99=18351] 
2023-05-04 20:35:28:274 1670 sec: 246657131 operations; 148136.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1407566, Max=19151, Min=484, Avg=2031.1, 90=2817, 99=4061, 99.9=9487, 99.99=13959] [UPDATE: Count=73584, Max=14855, Min=543, Avg=1858.56, 90=2499, 99=3293, 99.9=9103, 99.99=13519] 
2023-05-04 20:35:38:274 1680 sec: 248131163 operations; 147403.2 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1400756, Max=57023, Min=483, Avg=2042.71, 90=2809, 99=4251, 99.9=11447, 99.99=29103] [UPDATE: Count=73298, Max=29439, Min=500, Avg=1859.23, 90=2487, 99=3337, 99.9=9751, 99.99=27535] 
2023-05-04 20:35:48:274 1690 sec: 249606006 operations; 147484.3 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1401460, Max=58911, Min=469, Avg=2041.9, 90=2807, 99=4251, 99.9=12559, 99.99=30623] [UPDATE: Count=73304, Max=24671, Min=521, Avg=1850.83, 90=2491, 99=3339, 99.9=8591, 99.99=11759] 
2023-05-04 20:35:58:274 1700 sec: 251087960 operations; 148195.4 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1407750, Max=16927, Min=521, Avg=2031.2, 90=2811, 99=4089, 99.9=9383, 99.99=14279] [UPDATE: Count=74153, Max=17839, Min=529, Avg=1862.15, 90=2493, 99=3311, 99.9=9295, 99.99=14471] 
2023-05-04 20:36:08:274 1710 sec: 252563044 operations; 147508.4 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1401116, Max=49599, Min=479, Avg=2041.09, 90=2807, 99=4159, 99.9=11127, 99.99=28159] [UPDATE: Count=74086, Max=27487, Min=494, Avg=1859.61, 90=2491, 99=3273, 99.9=10071, 99.99=21071] 
2023-05-04 20:36:18:274 1720 sec: 254041742 operations; 147869.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1404740, Max=35807, Min=489, Avg=2036.35, 90=2811, 99=4155, 99.9=11439, 99.99=23455] [UPDATE: Count=73894, Max=25359, Min=529, Avg=1851.7, 90=2487, 99=3313, 99.9=9559, 99.99=13447] 
2023-05-04 20:36:28:274 1730 sec: 255519553 operations; 147781.1 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1403488, Max=26639, Min=506, Avg=2037.11, 90=2813, 99=4147, 99.9=9231, 99.99=24639] [UPDATE: Count=74291, Max=25183, Min=510, Avg=1862.59, 90=2493, 99=3345, 99.9=9031, 99.99=24623] 
2023-05-04 20:36:38:274 1740 sec: 256998814 operations; 147926.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1405582, Max=62847, Min=481, Avg=2035.29, 90=2807, 99=4195, 99.9=10047, 99.99=31935] [UPDATE: Count=73817, Max=26255, Min=494, Avg=1855.97, 90=2493, 99=3363, 99.9=9295, 99.99=19423] 
2023-05-04 20:36:48:274 1750 sec: 258469379 operations; 147056.5 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1397101, Max=53471, Min=492, Avg=2047.98, 90=2819, 99=4367, 99.9=14207, 99.99=26687] [UPDATE: Count=73326, Max=47327, Min=551, Avg=1856.65, 90=2497, 99=3355, 99.9=9487, 99.99=19775] 
2023-05-04 20:36:58:274 1760 sec: 259951750 operations; 148237.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1408473, Max=18399, Min=488, Avg=2030.85, 90=2819, 99=4155, 99.9=9495, 99.99=12527] [UPDATE: Count=73856, Max=14255, Min=502, Avg=1853.54, 90=2499, 99=3333, 99.9=8951, 99.99=11535] 
2023-05-04 20:37:08:274 1770 sec: 261427113 operations; 147536.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1401356, Max=64191, Min=488, Avg=2040.68, 90=2827, 99=4227, 99.9=9527, 99.99=28271] [UPDATE: Count=74221, Max=26351, Min=483, Avg=1862.06, 90=2511, 99=3369, 99.9=8887, 99.99=21311] 
2023-05-04 20:37:18:274 1780 sec: 262900676 operations; 147356.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1399714, Max=50975, Min=492, Avg=2043.68, 90=2823, 99=4419, 99.9=10503, 99.99=26943] [UPDATE: Count=73711, Max=25871, Min=540, Avg=1855.29, 90=2495, 99=3353, 99.9=9223, 99.99=16895] 
2023-05-04 20:37:28:274 1790 sec: 264381704 operations; 148102.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1406839, Max=20079, Min=519, Avg=2032.64, 90=2817, 99=4139, 99.9=9711, 99.99=12567] [UPDATE: Count=74143, Max=17023, Min=538, Avg=1858.66, 90=2503, 99=3333, 99.9=9167, 99.99=11559] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 20:37:38:274 1800 sec: 265919830 operations; 153812.6 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1461143, Max=64831, Min=483, Avg=1957.52, 90=2737, 99=4115, 99.9=9847, 99.99=34751] [UPDATE: Count=76972, Max=25503, Min=477, Avg=1781.09, 90=2435, 99=3287, 99.9=9135, 99.99=21503] 
Still waiting for thread Thread-283 to complete. Workload status: true
2023-05-04 20:37:40:526 1802 sec: 265924324 operations; 1995.56 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=4247, Max=10903, Min=511, Avg=1668.03, 90=2373, 99=5779, 99.9=10527, 99.99=10903] [CLEANUP: Count=300, Max=2222079, Min=0, Avg=7404.93, 90=2, 99=12, 99.9=2222079, 99.99=2222079] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802251
[OVERALL], Throughput(ops/sec), 147551.214564453
[TOTAL_GCS_PS_Scavenge], Count, 3592
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18606
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0323756235951598
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 115
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.006380909207430042
[TOTAL_GCs], Count, 3594
[TOTAL_GC_TIME], Time(ms), 18721
[TOTAL_GC_TIME_%], Time(%), 1.0387565328025896
[READ], Operations, 252632471
[READ], AverageLatency(us), 2037.070245764251
[READ], MinLatency(us), 443
[READ], MaxLatency(us), 165119
[READ], 95thPercentileLatency(us), 3141
[READ], 99thPercentileLatency(us), 4191
[READ], Return=OK, 252632471
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7404.926666666666
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 12
[UPDATE], Operations, 13291853
[UPDATE], AverageLatency(us), 1857.9117747540542
[UPDATE], MinLatency(us), 463
[UPDATE], MaxLatency(us), 122175
[UPDATE], 95thPercentileLatency(us), 2727
[UPDATE], 99thPercentileLatency(us), 3331
[UPDATE], Return=OK, 13291853
