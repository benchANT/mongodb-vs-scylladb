bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 20:07:37:072 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
2023-05-04 20:07:47:055 10 sec: 1229772 operations; 122964.9 current ops/sec; est completion in 2 hours 15 minutes [READ: Count=1168636, Max=154367, Min=528, Avg=2264.88, 90=2977, 99=10207, 99.9=33695, 99.99=140287] [UPDATE: Count=61790, Max=148479, Min=523, Avg=2098.59, 90=2645, 99=9319, 99.9=34975, 99.99=137727] 
2023-05-04 20:07:57:055 20 sec: 2706575 operations; 147695.07 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1403144, Max=36479, Min=546, Avg=2037.96, 90=2827, 99=4009, 99.9=8567, 99.99=14999] [UPDATE: Count=73436, Max=33823, Min=546, Avg=1865.19, 90=2513, 99=3297, 99.9=8343, 99.99=13671] 
2023-05-04 20:08:07:055 30 sec: 4170672 operations; 146409.7 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1390867, Max=52767, Min=508, Avg=2056.57, 90=2831, 99=4375, 99.9=10695, 99.99=28367] [UPDATE: Count=73150, Max=24591, Min=531, Avg=1868.29, 90=2513, 99=3339, 99.9=9183, 99.99=16279] 
2023-05-04 20:08:17:055 40 sec: 5637361 operations; 146668.9 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1393405, Max=60735, Min=501, Avg=2052.82, 90=2815, 99=4207, 99.9=11823, 99.99=34943] [UPDATE: Count=73468, Max=25551, Min=546, Avg=1868.64, 90=2495, 99=3351, 99.9=10015, 99.99=21167] 
2023-05-04 20:08:27:055 50 sec: 7107800 operations; 147043.9 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=1396572, Max=27919, Min=538, Avg=2047.03, 90=2823, 99=4143, 99.9=9695, 99.99=24479] [UPDATE: Count=73514, Max=25519, Min=535, Avg=1875.09, 90=2505, 99=3351, 99.9=9703, 99.99=24335] 
2023-05-04 20:08:37:055 60 sec: 8576212 operations; 146841.2 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1395022, Max=66815, Min=506, Avg=2050.18, 90=2819, 99=4271, 99.9=10095, 99.99=34815] [UPDATE: Count=73555, Max=28847, Min=562, Avg=1866.2, 90=2503, 99=3371, 99.9=8511, 99.99=23647] 
2023-05-04 20:08:47:055 70 sec: 10040902 operations; 146469 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1391707, Max=58527, Min=516, Avg=2055.38, 90=2839, 99=4295, 99.9=9935, 99.99=27983] [UPDATE: Count=73127, Max=23967, Min=534, Avg=1873.88, 90=2521, 99=3399, 99.9=8855, 99.99=16879] 
2023-05-04 20:08:57:055 80 sec: 11516685 operations; 147578.3 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1402534, Max=16879, Min=545, Avg=2039.56, 90=2825, 99=4155, 99.9=8471, 99.99=10999] [UPDATE: Count=73092, Max=14199, Min=543, Avg=1866.52, 90=2507, 99=3365, 99.9=8051, 99.99=10975] 
2023-05-04 20:09:07:055 90 sec: 12994028 operations; 147734.3 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1403809, Max=49183, Min=524, Avg=2037.83, 90=2815, 99=4053, 99.9=10167, 99.99=24911] [UPDATE: Count=73656, Max=22815, Min=521, Avg=1856.56, 90=2491, 99=3283, 99.9=8051, 99.99=18527] 
2023-05-04 20:09:17:055 100 sec: 14470930 operations; 147690.2 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1402824, Max=41023, Min=506, Avg=2038.54, 90=2821, 99=4033, 99.9=10335, 99.99=26943] [UPDATE: Count=73953, Max=26911, Min=564, Avg=1857.72, 90=2511, 99=3287, 99.9=8063, 99.99=19311] 
2023-05-04 20:09:27:055 110 sec: 15955690 operations; 148476 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1410690, Max=20095, Min=551, Avg=2027.27, 90=2813, 99=3985, 99.9=7879, 99.99=13319] [UPDATE: Count=74038, Max=15935, Min=551, Avg=1855.48, 90=2495, 99=3257, 99.9=7463, 99.99=11271] 
2023-05-04 20:09:37:055 120 sec: 17427932 operations; 147209.48 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1398705, Max=58399, Min=538, Avg=2045.01, 90=2817, 99=4143, 99.9=11047, 99.99=26255] [UPDATE: Count=73852, Max=24047, Min=527, Avg=1861.07, 90=2497, 99=3303, 99.9=8711, 99.99=22831] 
2023-05-04 20:09:47:055 130 sec: 18894546 operations; 146676.07 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1393208, Max=51551, Min=512, Avg=2052.41, 90=2827, 99=4307, 99.9=10159, 99.99=26463] [UPDATE: Count=73174, Max=50271, Min=531, Avg=1878.45, 90=2513, 99=3431, 99.9=8695, 99.99=20015] 
2023-05-04 20:09:57:061 140 sec: 20371836 operations; 147625.66 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1403555, Max=18351, Min=540, Avg=2037.92, 90=2817, 99=4159, 99.9=8591, 99.99=10775] [UPDATE: Count=73708, Max=11479, Min=547, Avg=1867.71, 90=2505, 99=3387, 99.9=8519, 99.99=10431] 
2023-05-04 20:10:07:055 150 sec: 21835535 operations; 146472.43 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1390519, Max=61407, Min=519, Avg=2056.51, 90=2827, 99=4231, 99.9=11095, 99.99=36927] [UPDATE: Count=73131, Max=27263, Min=509, Avg=1872.7, 90=2501, 99=3381, 99.9=10215, 99.99=19279] 
2023-05-04 20:10:17:055 160 sec: 23305103 operations; 146956.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1395838, Max=55135, Min=501, Avg=2048.57, 90=2819, 99=4191, 99.9=10583, 99.99=29007] [UPDATE: Count=73669, Max=27903, Min=551, Avg=1872, 90=2505, 99=3393, 99.9=9343, 99.99=22303] 
2023-05-04 20:10:27:055 170 sec: 24772691 operations; 146758.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1394072, Max=29759, Min=524, Avg=2051.13, 90=2827, 99=4247, 99.9=9183, 99.99=20575] [UPDATE: Count=73568, Max=17279, Min=542, Avg=1871, 90=2501, 99=3341, 99.9=8567, 99.99=12751] 
2023-05-04 20:10:37:055 180 sec: 26237055 operations; 146436.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1391188, Max=65855, Min=515, Avg=2055.43, 90=2827, 99=4283, 99.9=9719, 99.99=28943] [UPDATE: Count=73201, Max=27919, Min=554, Avg=1883.49, 90=2513, 99=3399, 99.9=9495, 99.99=26143] 
2023-05-04 20:10:47:055 190 sec: 27705183 operations; 146812.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1395082, Max=52511, Min=521, Avg=2050.49, 90=2827, 99=4171, 99.9=9407, 99.99=27407] [UPDATE: Count=73103, Max=25343, Min=564, Avg=1872.71, 90=2511, 99=3333, 99.9=8647, 99.99=15687] 
2023-05-04 20:10:57:055 200 sec: 29175008 operations; 146982.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1396528, Max=18207, Min=545, Avg=2047.93, 90=2829, 99=4243, 99.9=9271, 99.99=15807] [UPDATE: Count=73136, Max=21455, Min=562, Avg=1875.61, 90=2511, 99=3445, 99.9=8927, 99.99=16927] 
2023-05-04 20:11:07:055 210 sec: 30635168 operations; 146016 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1387570, Max=53663, Min=515, Avg=2061.63, 90=2833, 99=4431, 99.9=12839, 99.99=27695] [UPDATE: Count=72722, Max=24703, Min=565, Avg=1879.82, 90=2517, 99=3455, 99.9=8919, 99.99=21583] 
2023-05-04 20:11:17:055 220 sec: 32100902 operations; 146573.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1392227, Max=60895, Min=499, Avg=2053.97, 90=2829, 99=4371, 99.9=9927, 99.99=33791] [UPDATE: Count=73551, Max=28719, Min=537, Avg=1872.91, 90=2509, 99=3411, 99.9=8679, 99.99=18831] 
2023-05-04 20:11:27:055 230 sec: 33573847 operations; 147294.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1398874, Max=19647, Min=518, Avg=2043.47, 90=2827, 99=4171, 99.9=9263, 99.99=12383] [UPDATE: Count=74004, Max=15783, Min=519, Avg=1873.07, 90=2511, 99=3405, 99.9=9031, 99.99=10903] 
2023-05-04 20:11:37:055 240 sec: 35037711 operations; 146386.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1390826, Max=56447, Min=519, Avg=2056.75, 90=2819, 99=4247, 99.9=13703, 99.99=28799] [UPDATE: Count=73036, Max=26191, Min=549, Avg=1871, 90=2505, 99=3395, 99.9=9911, 99.99=23951] 
2023-05-04 20:11:47:055 250 sec: 36506028 operations; 146831.7 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1394680, Max=51679, Min=515, Avg=2050.41, 90=2829, 99=4175, 99.9=10295, 99.99=26575] [UPDATE: Count=73637, Max=26111, Min=545, Avg=1870.1, 90=2509, 99=3323, 99.9=9575, 99.99=15143] 
2023-05-04 20:11:57:055 260 sec: 37983518 operations; 147749 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1403921, Max=14415, Min=562, Avg=2037.08, 90=2817, 99=4115, 99.9=8375, 99.99=10847] [UPDATE: Count=73673, Max=11687, Min=517, Avg=1868.27, 90=2505, 99=3345, 99.9=8087, 99.99=10807] 
2023-05-04 20:12:07:055 270 sec: 39451568 operations; 146805 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1394598, Max=56159, Min=514, Avg=2050.77, 90=2823, 99=4291, 99.9=9855, 99.99=28287] [UPDATE: Count=73355, Max=26703, Min=549, Avg=1869, 90=2505, 99=3341, 99.9=8663, 99.99=16687] 
2023-05-04 20:12:17:055 280 sec: 40919000 operations; 146743.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1393782, Max=54303, Min=532, Avg=2051.77, 90=2823, 99=4287, 99.9=10647, 99.99=28719] [UPDATE: Count=73671, Max=27199, Min=547, Avg=1868.06, 90=2511, 99=3379, 99.9=8823, 99.99=20303] 
2023-05-04 20:12:27:055 290 sec: 42390412 operations; 147141.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1397369, Max=22399, Min=544, Avg=2045.76, 90=2821, 99=4139, 99.9=9543, 99.99=16327] [UPDATE: Count=73953, Max=21567, Min=557, Avg=1871.75, 90=2499, 99=3321, 99.9=9103, 99.99=16767] 
2023-05-04 20:12:37:055 300 sec: 43861420 operations; 147100.8 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1397143, Max=66431, Min=489, Avg=2046.89, 90=2819, 99=4099, 99.9=10159, 99.99=33599] [UPDATE: Count=74070, Max=26623, Min=510, Avg=1861.92, 90=2495, 99=3289, 99.9=8775, 99.99=19199] 
2023-05-04 20:12:47:055 310 sec: 45322829 operations; 146126.29 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1387892, Max=50911, Min=524, Avg=2059.99, 90=2841, 99=4335, 99.9=10383, 99.99=25759] [UPDATE: Count=73231, Max=39935, Min=581, Avg=1882.58, 90=2525, 99=3457, 99.9=9447, 99.99=22127] 
2023-05-04 20:12:57:055 320 sec: 46795041 operations; 147235.92 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1398869, Max=31231, Min=540, Avg=2044.61, 90=2829, 99=4059, 99.9=9319, 99.99=20143] [UPDATE: Count=73429, Max=15623, Min=554, Avg=1865.8, 90=2509, 99=3293, 99.9=8655, 99.99=10583] 
2023-05-04 20:13:07:055 330 sec: 48262648 operations; 146760.7 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1394395, Max=53535, Min=516, Avg=2051.24, 90=2831, 99=4183, 99.9=9967, 99.99=27039] [UPDATE: Count=73237, Max=25551, Min=499, Avg=1871.74, 90=2511, 99=3331, 99.9=8215, 99.99=21839] 
2023-05-04 20:13:17:059 340 sec: 49736339 operations; 147295.45 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1400146, Max=61759, Min=528, Avg=2042.58, 90=2811, 99=4155, 99.9=9455, 99.99=28351] [UPDATE: Count=73615, Max=26255, Min=510, Avg=1867.03, 90=2497, 99=3335, 99.9=8711, 99.99=17951] 
2023-05-04 20:13:27:055 350 sec: 51209299 operations; 147369.68 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1399038, Max=18271, Min=513, Avg=2043.42, 90=2825, 99=4215, 99.9=8447, 99.99=13095] [UPDATE: Count=73839, Max=16287, Min=554, Avg=1873.58, 90=2505, 99=3401, 99.9=8399, 99.99=13191] 
2023-05-04 20:13:37:055 360 sec: 52678154 operations; 146885.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1395106, Max=62527, Min=530, Avg=2049.53, 90=2823, 99=4275, 99.9=9935, 99.99=26351] [UPDATE: Count=73718, Max=27279, Min=564, Avg=1871.06, 90=2507, 99=3419, 99.9=8471, 99.99=21983] 
2023-05-04 20:13:47:055 370 sec: 54149232 operations; 147107.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1397848, Max=60447, Min=515, Avg=2046.44, 90=2817, 99=4147, 99.9=10175, 99.99=31551] [UPDATE: Count=73456, Max=34495, Min=527, Avg=1866.41, 90=2501, 99=3317, 99.9=9143, 99.99=16215] 
2023-05-04 20:13:57:055 380 sec: 55622079 operations; 147284.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1399541, Max=19487, Min=535, Avg=2043.52, 90=2821, 99=4167, 99.9=9127, 99.99=17375] [UPDATE: Count=73103, Max=17903, Min=574, Avg=1873.28, 90=2505, 99=3317, 99.9=8735, 99.99=16495] 
2023-05-04 20:14:07:055 390 sec: 57087234 operations; 146515.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1391893, Max=39455, Min=529, Avg=2054.96, 90=2829, 99=4443, 99.9=10111, 99.99=25535] [UPDATE: Count=73302, Max=27183, Min=545, Avg=1870.35, 90=2507, 99=3359, 99.9=7983, 99.99=21679] 
2023-05-04 20:14:17:055 400 sec: 58561807 operations; 147442.56 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1401763, Max=49439, Min=511, Avg=2041.26, 90=2815, 99=4163, 99.9=9943, 99.99=26991] [UPDATE: Count=72974, Max=32895, Min=542, Avg=1867.96, 90=2509, 99=3385, 99.9=8711, 99.99=19327] 
2023-05-04 20:14:27:055 410 sec: 60034885 operations; 147322.53 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1399285, Max=17951, Min=519, Avg=2043.46, 90=2825, 99=4203, 99.9=8775, 99.99=11359] [UPDATE: Count=73717, Max=15935, Min=573, Avg=1868.89, 90=2505, 99=3361, 99.9=8559, 99.99=10423] 
2023-05-04 20:14:37:055 420 sec: 61500244 operations; 146535.9 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1392582, Max=53791, Min=507, Avg=2054.34, 90=2825, 99=4279, 99.9=9695, 99.99=28831] [UPDATE: Count=72758, Max=27503, Min=532, Avg=1874.91, 90=2503, 99=3385, 99.9=8999, 99.99=19391] 
2023-05-04 20:14:47:055 430 sec: 62963433 operations; 146318.9 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1390265, Max=62463, Min=514, Avg=2057.74, 90=2849, 99=4315, 99.9=10479, 99.99=29215] [UPDATE: Count=72858, Max=24671, Min=561, Avg=1871.43, 90=2529, 99=3423, 99.9=9031, 99.99=17647] 
2023-05-04 20:14:57:055 440 sec: 64427190 operations; 146375.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1390218, Max=12687, Min=531, Avg=2056.56, 90=2863, 99=4371, 99.9=8527, 99.99=10223] [UPDATE: Count=73487, Max=18031, Min=571, Avg=1880.24, 90=2539, 99=3489, 99.9=8111, 99.99=10007] 
2023-05-04 20:15:07:055 450 sec: 65888284 operations; 146109.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1388012, Max=56703, Min=501, Avg=2060.84, 90=2837, 99=4363, 99.9=11655, 99.99=29071] [UPDATE: Count=73055, Max=25247, Min=550, Avg=1874.73, 90=2517, 99=3407, 99.9=8959, 99.99=18255] 
2023-05-04 20:15:17:055 460 sec: 67352453 operations; 146402.26 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1391187, Max=57087, Min=505, Avg=2056.2, 90=2833, 99=4235, 99.9=10447, 99.99=32367] [UPDATE: Count=73037, Max=25695, Min=554, Avg=1871.98, 90=2517, 99=3363, 99.9=9095, 99.99=19583] 
2023-05-04 20:15:27:055 470 sec: 68824210 operations; 147190.42 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1398689, Max=17791, Min=540, Avg=2045.26, 90=2833, 99=4093, 99.9=9447, 99.99=12127] [UPDATE: Count=72948, Max=20463, Min=561, Avg=1871.98, 90=2515, 99=3319, 99.9=9191, 99.99=14103] 
2023-05-04 20:15:37:055 480 sec: 70288863 operations; 146465.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1391666, Max=59199, Min=512, Avg=2055.24, 90=2829, 99=4303, 99.9=9911, 99.99=31839] [UPDATE: Count=73268, Max=39135, Min=546, Avg=1874.88, 90=2505, 99=3391, 99.9=8415, 99.99=22143] 
2023-05-04 20:15:47:055 490 sec: 71757824 operations; 146896.1 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1395628, Max=63423, Min=512, Avg=2049.34, 90=2819, 99=4179, 99.9=10199, 99.99=34239] [UPDATE: Count=73309, Max=41023, Min=514, Avg=1870.6, 90=2509, 99=3329, 99.9=8687, 99.99=27375] 
2023-05-04 20:15:57:055 500 sec: 73224660 operations; 146683.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1393660, Max=22303, Min=537, Avg=2051.92, 90=2835, 99=4187, 99.9=9527, 99.99=16479] [UPDATE: Count=73045, Max=19903, Min=551, Avg=1878.93, 90=2515, 99=3379, 99.9=9495, 99.99=16063] 
2023-05-04 20:16:07:055 510 sec: 74692399 operations; 146759.22 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1394367, Max=65151, Min=501, Avg=2051.17, 90=2827, 99=4179, 99.9=10679, 99.99=31119] [UPDATE: Count=73388, Max=26415, Min=503, Avg=1871.88, 90=2513, 99=3367, 99.9=8887, 99.99=20303] 
2023-05-04 20:16:17:055 520 sec: 76147981 operations; 145572.76 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1382871, Max=57087, Min=528, Avg=2069.15, 90=2831, 99=4947, 99.9=14031, 99.99=28463] [UPDATE: Count=72595, Max=24831, Min=577, Avg=1872.58, 90=2505, 99=3505, 99.9=9839, 99.99=20207] 
2023-05-04 20:16:27:055 530 sec: 77620177 operations; 147204.88 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1398517, Max=22111, Min=530, Avg=2044.35, 90=2825, 99=4111, 99.9=9999, 99.99=15327] [UPDATE: Count=73807, Max=20655, Min=572, Avg=1873.2, 90=2511, 99=3321, 99.9=9479, 99.99=14671] 
2023-05-04 20:16:37:055 540 sec: 79092553 operations; 147252.33 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1399214, Max=60607, Min=490, Avg=2044.61, 90=2811, 99=4227, 99.9=10327, 99.99=26591] [UPDATE: Count=73198, Max=23423, Min=526, Avg=1864.77, 90=2501, 99=3355, 99.9=8155, 99.99=15423] 
2023-05-04 20:16:47:055 550 sec: 80562635 operations; 147008.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1396582, Max=53119, Min=513, Avg=2047.56, 90=2823, 99=4215, 99.9=9423, 99.99=28239] [UPDATE: Count=73571, Max=25839, Min=537, Avg=1874.21, 90=2507, 99=3395, 99.9=8615, 99.99=21567] 
2023-05-04 20:16:57:055 560 sec: 82037362 operations; 147472.7 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1400957, Max=16543, Min=551, Avg=2040.82, 90=2825, 99=4139, 99.9=8911, 99.99=11695] [UPDATE: Count=73632, Max=12063, Min=554, Avg=1872.31, 90=2511, 99=3375, 99.9=8719, 99.99=11247] 
2023-05-04 20:17:07:055 570 sec: 83509224 operations; 147186.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1398375, Max=51231, Min=526, Avg=2045.29, 90=2817, 99=4195, 99.9=10303, 99.99=25327] [UPDATE: Count=73553, Max=44447, Min=509, Avg=1868.88, 90=2507, 99=3387, 99.9=9127, 99.99=18415] 
2023-05-04 20:17:17:055 580 sec: 84974033 operations; 146480.9 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1391532, Max=52991, Min=492, Avg=2054.86, 90=2823, 99=4311, 99.9=9903, 99.99=27359] [UPDATE: Count=73352, Max=26735, Min=557, Avg=1880.5, 90=2509, 99=3413, 99.9=8911, 99.99=22031] 
2023-05-04 20:17:27:055 590 sec: 86444651 operations; 147047.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1396984, Max=19407, Min=542, Avg=2046.71, 90=2831, 99=4259, 99.9=9127, 99.99=12967] [UPDATE: Count=73578, Max=13463, Min=524, Avg=1874.91, 90=2509, 99=3365, 99.9=8823, 99.99=10943] 
2023-05-04 20:17:37:055 600 sec: 87911582 operations; 146707.77 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1393793, Max=52223, Min=525, Avg=2052.34, 90=2831, 99=4187, 99.9=10351, 99.99=27887] [UPDATE: Count=73202, Max=25343, Min=571, Avg=1868.08, 90=2509, 99=3327, 99.9=8911, 99.99=15879] 
2023-05-04 20:17:47:055 610 sec: 89369656 operations; 145807.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1385250, Max=57247, Min=526, Avg=2065.22, 90=2843, 99=4307, 99.9=13887, 99.99=30511] [UPDATE: Count=72815, Max=30255, Min=515, Avg=1872.36, 90=2511, 99=3345, 99.9=8607, 99.99=28591] 
2023-05-04 20:17:57:055 620 sec: 90838300 operations; 146864.4 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1394960, Max=14023, Min=540, Avg=2049.57, 90=2839, 99=4203, 99.9=8935, 99.99=11015] [UPDATE: Count=73581, Max=12767, Min=557, Avg=1876.15, 90=2519, 99=3361, 99.9=8647, 99.99=10511] 
2023-05-04 20:18:07:055 630 sec: 92297137 operations; 145883.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1385984, Max=53343, Min=523, Avg=2064.16, 90=2849, 99=4415, 99.9=11863, 99.99=28175] [UPDATE: Count=72902, Max=27199, Min=547, Avg=1872.93, 90=2515, 99=3399, 99.9=8727, 99.99=20799] 
2023-05-04 20:18:17:055 640 sec: 93759613 operations; 146247.6 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1389887, Max=53311, Min=522, Avg=2058.69, 90=2843, 99=4367, 99.9=11199, 99.99=28063] [UPDATE: Count=72617, Max=26303, Min=525, Avg=1873.33, 90=2519, 99=3419, 99.9=8911, 99.99=21759] 
2023-05-04 20:18:27:055 650 sec: 95234301 operations; 147468.8 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1401187, Max=18047, Min=531, Avg=2040.97, 90=2821, 99=4111, 99.9=9287, 99.99=14135] [UPDATE: Count=73430, Max=15527, Min=573, Avg=1871.3, 90=2507, 99=3333, 99.9=8879, 99.99=13607] 
2023-05-04 20:18:37:055 660 sec: 96704754 operations; 147045.3 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1396739, Max=53599, Min=517, Avg=2047.13, 90=2815, 99=4235, 99.9=11567, 99.99=27247] [UPDATE: Count=73838, Max=52127, Min=542, Avg=1870.44, 90=2503, 99=3375, 99.9=8903, 99.99=15975] 
2023-05-04 20:18:47:055 670 sec: 98164691 operations; 145993.7 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1386865, Max=58207, Min=517, Avg=2062.37, 90=2843, 99=4363, 99.9=11479, 99.99=28335] [UPDATE: Count=72784, Max=26367, Min=548, Avg=1877.35, 90=2531, 99=3413, 99.9=9607, 99.99=20719] 
2023-05-04 20:18:57:055 680 sec: 99633241 operations; 146855 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1395520, Max=33215, Min=543, Avg=2049.61, 90=2839, 99=4175, 99.9=9351, 99.99=21247] [UPDATE: Count=73161, Max=29167, Min=542, Avg=1873.54, 90=2523, 99=3387, 99.9=8519, 99.99=12567] 
2023-05-04 20:19:07:055 690 sec: 101100136 operations; 146689.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1393790, Max=54207, Min=508, Avg=2052.27, 90=2833, 99=4247, 99.9=10215, 99.99=27855] [UPDATE: Count=73119, Max=27791, Min=546, Avg=1873.44, 90=2521, 99=3385, 99.9=9271, 99.99=19439] 
2023-05-04 20:19:17:055 700 sec: 102565810 operations; 146567.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1392136, Max=58111, Min=525, Avg=2054.17, 90=2827, 99=4287, 99.9=11111, 99.99=31103] [UPDATE: Count=73518, Max=31855, Min=516, Avg=1870.28, 90=2509, 99=3399, 99.9=8615, 99.99=21823] 
2023-05-04 20:19:27:055 710 sec: 104039956 operations; 147414.6 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1400263, Max=19519, Min=561, Avg=2042.11, 90=2827, 99=4115, 99.9=9055, 99.99=13655] [UPDATE: Count=73958, Max=15375, Min=541, Avg=1865.36, 90=2507, 99=3313, 99.9=8695, 99.99=11279] 
2023-05-04 20:19:37:055 720 sec: 105508741 operations; 146878.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1395447, Max=52991, Min=515, Avg=2049.61, 90=2821, 99=4207, 99.9=10079, 99.99=27119] [UPDATE: Count=73290, Max=24815, Min=541, Avg=1869.8, 90=2509, 99=3341, 99.9=9071, 99.99=16783] 
2023-05-04 20:19:47:055 730 sec: 106973694 operations; 146495.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1391286, Max=51999, Min=509, Avg=2055.33, 90=2833, 99=4327, 99.9=10623, 99.99=25167] [UPDATE: Count=73697, Max=25519, Min=529, Avg=1869.89, 90=2509, 99=3387, 99.9=8663, 99.99=15975] 
2023-05-04 20:19:57:055 740 sec: 108450453 operations; 147675.9 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1402905, Max=18399, Min=540, Avg=2037.99, 90=2817, 99=4059, 99.9=9079, 99.99=15727] [UPDATE: Count=73844, Max=17327, Min=550, Avg=1870.82, 90=2503, 99=3307, 99.9=9111, 99.99=16415] 
2023-05-04 20:20:07:055 750 sec: 109915183 operations; 146473 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1391080, Max=52191, Min=523, Avg=2055.61, 90=2837, 99=4219, 99.9=10031, 99.99=24831] [UPDATE: Count=73662, Max=26959, Min=546, Avg=1869.99, 90=2515, 99=3347, 99.9=8943, 99.99=21519] 
2023-05-04 20:20:17:056 760 sec: 111375795 operations; 146031.99 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1387567, Max=57535, Min=526, Avg=2060.41, 90=2841, 99=4235, 99.9=10599, 99.99=34847] [UPDATE: Count=73007, Max=45343, Min=554, Avg=1879.46, 90=2515, 99=3377, 99.9=10119, 99.99=25439] 
2023-05-04 20:20:27:055 770 sec: 112845058 operations; 146955.69 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1395929, Max=19951, Min=525, Avg=2049.78, 90=2837, 99=4231, 99.9=9327, 99.99=11967] [UPDATE: Count=73260, Max=19871, Min=537, Avg=1869.99, 90=2509, 99=3327, 99.9=9095, 99.99=13047] 
2023-05-04 20:20:37:059 780 sec: 114309036 operations; 146324.64 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1390725, Max=54207, Min=516, Avg=2056.47, 90=2839, 99=4283, 99.9=10079, 99.99=27167] [UPDATE: Count=73455, Max=25423, Min=516, Avg=1871.35, 90=2509, 99=3375, 99.9=8927, 99.99=15287] 
2023-05-04 20:20:47:055 790 sec: 115758556 operations; 145024.51 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1376806, Max=56671, Min=508, Avg=2078.58, 90=2863, 99=5695, 99.9=13663, 99.99=26831] [UPDATE: Count=72734, Max=35167, Min=492, Avg=1866.53, 90=2525, 99=3505, 99.9=9263, 99.99=18191] 
2023-05-04 20:20:57:055 800 sec: 117225391 operations; 146683.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1392958, Max=15591, Min=544, Avg=2052.21, 90=2853, 99=4263, 99.9=8919, 99.99=11063] [UPDATE: Count=73683, Max=15095, Min=535, Avg=1876.22, 90=2527, 99=3373, 99.9=8687, 99.99=10991] 
2023-05-04 20:21:07:055 810 sec: 118692905 operations; 146751.4 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1394027, Max=54111, Min=483, Avg=2051.55, 90=2829, 99=4211, 99.9=10279, 99.99=26943] [UPDATE: Count=73628, Max=25279, Min=532, Avg=1870.32, 90=2517, 99=3337, 99.9=9151, 99.99=17343] 
2023-05-04 20:21:17:055 820 sec: 120152795 operations; 145989 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1386997, Max=53631, Min=519, Avg=2062.23, 90=2839, 99=4275, 99.9=11255, 99.99=27087] [UPDATE: Count=72776, Max=26207, Min=571, Avg=1878.64, 90=2513, 99=3405, 99.9=9167, 99.99=24383] 
2023-05-04 20:21:27:055 830 sec: 121611614 operations; 145881.9 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1385709, Max=93311, Min=530, Avg=2063.89, 90=2833, 99=4155, 99.9=9503, 99.99=90751] [UPDATE: Count=73064, Max=91391, Min=502, Avg=1878.13, 90=2509, 99=3393, 99.9=8919, 99.99=28351] 
2023-05-04 20:21:37:055 840 sec: 123078793 operations; 146717.9 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1393894, Max=54335, Min=520, Avg=2051.62, 90=2827, 99=4271, 99.9=9711, 99.99=26991] [UPDATE: Count=73329, Max=24415, Min=563, Avg=1875.37, 90=2509, 99=3373, 99.9=8671, 99.99=12767] 
2023-05-04 20:21:47:055 850 sec: 124549906 operations; 147111.3 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1397907, Max=51167, Min=503, Avg=2046.09, 90=2825, 99=4207, 99.9=9031, 99.99=28143] [UPDATE: Count=73199, Max=26495, Min=502, Avg=1873.02, 90=2513, 99=3343, 99.9=8335, 99.99=19119] 
2023-05-04 20:21:57:055 860 sec: 126024371 operations; 147431.76 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1400628, Max=14407, Min=536, Avg=2041.03, 90=2825, 99=4143, 99.9=8879, 99.99=10599] [UPDATE: Count=73899, Max=11847, Min=558, Avg=1874.47, 90=2515, 99=3353, 99.9=8775, 99.99=10487] 
2023-05-04 20:22:07:055 870 sec: 127496011 operations; 147178.72 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1398379, Max=53087, Min=514, Avg=2045.44, 90=2817, 99=4195, 99.9=10047, 99.99=27359] [UPDATE: Count=73214, Max=24687, Min=531, Avg=1868.83, 90=2507, 99=3381, 99.9=8935, 99.99=15623] 
2023-05-04 20:22:17:055 880 sec: 128965764 operations; 146975.3 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1396043, Max=52543, Min=519, Avg=2048.35, 90=2827, 99=4227, 99.9=9855, 99.99=27855] [UPDATE: Count=73660, Max=26159, Min=546, Avg=1869.49, 90=2505, 99=3383, 99.9=9127, 99.99=20335] 
2023-05-04 20:22:27:055 890 sec: 130440855 operations; 147509.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1401360, Max=25695, Min=531, Avg=2040.49, 90=2821, 99=4143, 99.9=9047, 99.99=18383] [UPDATE: Count=73899, Max=21119, Min=535, Avg=1867.1, 90=2509, 99=3345, 99.9=8447, 99.99=16271] 
2023-05-04 20:22:37:055 900 sec: 131907561 operations; 146670.6 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1393503, Max=49087, Min=510, Avg=2052.11, 90=2829, 99=4287, 99.9=9903, 99.99=27039] [UPDATE: Count=73180, Max=23503, Min=535, Avg=1878.66, 90=2513, 99=3439, 99.9=9495, 99.99=18383] 
2023-05-04 20:22:47:055 910 sec: 133376126 operations; 146856.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1394794, Max=52191, Min=538, Avg=2049.79, 90=2833, 99=4243, 99.9=9855, 99.99=28975] [UPDATE: Count=73684, Max=25295, Min=529, Avg=1873.72, 90=2513, 99=3377, 99.9=9399, 99.99=17247] 
2023-05-04 20:22:57:055 920 sec: 134850542 operations; 147441.6 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1400922, Max=21119, Min=518, Avg=2041.45, 90=2825, 99=4099, 99.9=9455, 99.99=16623] [UPDATE: Count=73627, Max=18879, Min=553, Avg=1868.64, 90=2511, 99=3345, 99.9=9463, 99.99=15663] 
2023-05-04 20:23:07:055 930 sec: 136317518 operations; 146697.6 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1393525, Max=58687, Min=497, Avg=2052.22, 90=2829, 99=4267, 99.9=10263, 99.99=34751] [UPDATE: Count=73316, Max=25855, Min=527, Avg=1870.07, 90=2507, 99=3379, 99.9=9247, 99.99=21695] 
2023-05-04 20:23:17:055 940 sec: 137785779 operations; 146826.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1395083, Max=54879, Min=505, Avg=2050.34, 90=2829, 99=4251, 99.9=9479, 99.99=27487] [UPDATE: Count=73291, Max=27231, Min=532, Avg=1870.74, 90=2513, 99=3391, 99.9=8535, 99.99=20831] 
2023-05-04 20:23:27:055 950 sec: 139258150 operations; 147237.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1398943, Max=17983, Min=535, Avg=2044.13, 90=2827, 99=4263, 99.9=8439, 99.99=11399] [UPDATE: Count=73385, Max=15079, Min=554, Avg=1873.2, 90=2511, 99=3413, 99.9=8107, 99.99=10031] 
2023-05-04 20:23:37:055 960 sec: 140728128 operations; 146997.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1396433, Max=58751, Min=536, Avg=2047.6, 90=2821, 99=4195, 99.9=10807, 99.99=28207] [UPDATE: Count=73524, Max=27039, Min=520, Avg=1875.74, 90=2511, 99=3413, 99.9=9351, 99.99=21839] 
2023-05-04 20:23:47:055 970 sec: 142194970 operations; 146669.53 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1393298, Max=53951, Min=488, Avg=2052.4, 90=2831, 99=4287, 99.9=9159, 99.99=27679] [UPDATE: Count=73551, Max=52799, Min=524, Avg=1873.32, 90=2517, 99=3401, 99.9=8399, 99.99=17887] 
2023-05-04 20:23:57:055 980 sec: 143671016 operations; 147619.36 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1402062, Max=26703, Min=522, Avg=2038.96, 90=2819, 99=4179, 99.9=9391, 99.99=18335] [UPDATE: Count=74028, Max=24015, Min=541, Avg=1871.4, 90=2519, 99=3385, 99.9=8991, 99.99=18047] 
2023-05-04 20:24:07:055 990 sec: 145139863 operations; 146884.7 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1395490, Max=53247, Min=514, Avg=2049.58, 90=2829, 99=4323, 99.9=9583, 99.99=27135] [UPDATE: Count=73233, Max=25727, Min=546, Avg=1866.24, 90=2505, 99=3409, 99.9=8551, 99.99=16879] 
2023-05-04 20:24:17:055 1000 sec: 146604768 operations; 146490.5 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1391180, Max=53855, Min=541, Avg=2054.97, 90=2829, 99=4283, 99.9=10567, 99.99=28959] [UPDATE: Count=73763, Max=27295, Min=543, Avg=1876.72, 90=2513, 99=3373, 99.9=8927, 99.99=22287] 
2023-05-04 20:24:27:055 1010 sec: 148079121 operations; 147435.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1400575, Max=18287, Min=534, Avg=2041.76, 90=2829, 99=4227, 99.9=9063, 99.99=12247] [UPDATE: Count=73732, Max=15887, Min=533, Avg=1865.84, 90=2505, 99=3355, 99.9=8695, 99.99=11175] 
2023-05-04 20:24:37:055 1020 sec: 149551036 operations; 147191.5 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1398216, Max=63359, Min=510, Avg=2044.93, 90=2821, 99=4195, 99.9=9719, 99.99=29359] [UPDATE: Count=73869, Max=37343, Min=518, Avg=1872.55, 90=2507, 99=3403, 99.9=9263, 99.99=21039] 
2023-05-04 20:24:47:055 1030 sec: 151009236 operations; 145820 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1384578, Max=52799, Min=523, Avg=2065.03, 90=2859, 99=4407, 99.9=10295, 99.99=28383] [UPDATE: Count=73608, Max=28383, Min=540, Avg=1876.9, 90=2529, 99=3429, 99.9=8615, 99.99=15455] 
2023-05-04 20:24:57:055 1040 sec: 152464217 operations; 145498.1 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1382428, Max=12791, Min=544, Avg=2069.36, 90=2885, 99=4431, 99.9=8471, 99.99=10407] [UPDATE: Count=72477, Max=10839, Min=539, Avg=1880.74, 90=2537, 99=3479, 99.9=8047, 99.99=9959] 
2023-05-04 20:25:07:055 1050 sec: 153920432 operations; 145621.5 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1383031, Max=56671, Min=517, Avg=2067.94, 90=2847, 99=4395, 99.9=11095, 99.99=28607] [UPDATE: Count=73216, Max=26223, Min=553, Avg=1875.57, 90=2511, 99=3423, 99.9=9407, 99.99=19087] 
2023-05-04 20:25:17:055 1060 sec: 155372976 operations; 145254.4 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1379743, Max=50495, Min=537, Avg=2072.84, 90=2857, 99=4535, 99.9=10119, 99.99=30447] [UPDATE: Count=72804, Max=26079, Min=556, Avg=1880.31, 90=2521, 99=3407, 99.9=8035, 99.99=18815] 
2023-05-04 20:25:27:055 1070 sec: 156841939 operations; 146896.3 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1395424, Max=19167, Min=532, Avg=2049.2, 90=2841, 99=4187, 99.9=8903, 99.99=11567] [UPDATE: Count=73477, Max=16927, Min=576, Avg=1873.73, 90=2513, 99=3345, 99.9=8871, 99.99=10479] 
2023-05-04 20:25:37:055 1080 sec: 158294808 operations; 145286.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1380375, Max=53183, Min=534, Avg=2072.44, 90=2861, 99=4563, 99.9=9543, 99.99=26079] [UPDATE: Count=72582, Max=26511, Min=524, Avg=1884.24, 90=2521, 99=3443, 99.9=8639, 99.99=22575] 
2023-05-04 20:25:47:055 1090 sec: 159752886 operations; 145807.8 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1385509, Max=60703, Min=506, Avg=2065.13, 90=2849, 99=4295, 99.9=10039, 99.99=30383] [UPDATE: Count=72493, Max=21935, Min=539, Avg=1874.51, 90=2507, 99=3337, 99.9=9095, 99.99=12439] 
2023-05-04 20:25:57:055 1100 sec: 161219961 operations; 146707.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1393473, Max=19135, Min=545, Avg=2051.95, 90=2841, 99=4203, 99.9=8679, 99.99=10719] [UPDATE: Count=73493, Max=18207, Min=582, Avg=1874.29, 90=2507, 99=3341, 99.9=8167, 99.99=10271] 
2023-05-04 20:26:07:055 1110 sec: 162671640 operations; 145167.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1378823, Max=54111, Min=506, Avg=2074.35, 90=2861, 99=4423, 99.9=10431, 99.99=29679] [UPDATE: Count=72879, Max=23151, Min=534, Avg=1881.91, 90=2513, 99=3365, 99.9=9287, 99.99=17359] 
2023-05-04 20:26:17:055 1120 sec: 164125650 operations; 145401 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1381703, Max=34783, Min=540, Avg=2070.69, 90=2863, 99=4527, 99.9=9895, 99.99=22591] [UPDATE: Count=72403, Max=23327, Min=568, Avg=1882.73, 90=2517, 99=3481, 99.9=8783, 99.99=15647] 
2023-05-04 20:26:27:055 1130 sec: 165590943 operations; 146529.3 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1391981, Max=21599, Min=532, Avg=2054.42, 90=2843, 99=4291, 99.9=8727, 99.99=14783] [UPDATE: Count=73311, Max=15807, Min=567, Avg=1876.4, 90=2513, 99=3379, 99.9=8967, 99.99=14639] 
2023-05-04 20:26:37:055 1140 sec: 167034174 operations; 144323.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1370640, Max=57375, Min=536, Avg=2087.23, 90=2889, 99=4807, 99.9=9943, 99.99=26335] [UPDATE: Count=72554, Max=29663, Min=527, Avg=1879.08, 90=2515, 99=3423, 99.9=8447, 99.99=14831] 
2023-05-04 20:26:47:055 1150 sec: 168494090 operations; 145991.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1387120, Max=59583, Min=526, Avg=2062.45, 90=2837, 99=4243, 99.9=11591, 99.99=34879] [UPDATE: Count=72870, Max=25743, Min=558, Avg=1872.08, 90=2517, 99=3361, 99.9=9823, 99.99=20303] 
2023-05-04 20:26:57:055 1160 sec: 169961733 operations; 146749.63 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1394300, Max=14143, Min=537, Avg=2051.07, 90=2855, 99=4203, 99.9=8903, 99.99=10687] [UPDATE: Count=73308, Max=14479, Min=560, Avg=1874.96, 90=2531, 99=3353, 99.9=8663, 99.99=10279] 
2023-05-04 20:27:07:055 1170 sec: 171419520 operations; 145793.28 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1384583, Max=59679, Min=514, Avg=2065.31, 90=2857, 99=4423, 99.9=10807, 99.99=28207] [UPDATE: Count=73231, Max=27055, Min=551, Avg=1880.59, 90=2537, 99=3417, 99.9=9071, 99.99=19887] 
2023-05-04 20:27:17:055 1180 sec: 172880522 operations; 146100.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1388302, Max=61919, Min=517, Avg=2060.62, 90=2849, 99=4323, 99.9=9479, 99.99=32831] [UPDATE: Count=72722, Max=26623, Min=551, Avg=1877.28, 90=2525, 99=3429, 99.9=8383, 99.99=20479] 
2023-05-04 20:27:27:055 1190 sec: 174352410 operations; 147188.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1397995, Max=21231, Min=498, Avg=2045.25, 90=2827, 99=4127, 99.9=9535, 99.99=17423] [UPDATE: Count=73854, Max=18271, Min=547, Avg=1868.15, 90=2505, 99=3303, 99.9=9127, 99.99=17231] 
2023-05-04 20:27:37:055 1200 sec: 175821028 operations; 146861.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1394844, Max=56351, Min=506, Avg=2049.87, 90=2821, 99=4323, 99.9=9519, 99.99=28799] [UPDATE: Count=73784, Max=45823, Min=521, Avg=1869.92, 90=2501, 99=3395, 99.9=8087, 99.99=19663] 
2023-05-04 20:27:47:055 1210 sec: 177290613 operations; 146958.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1396065, Max=49663, Min=509, Avg=2048.49, 90=2829, 99=4263, 99.9=9335, 99.99=26959] [UPDATE: Count=73516, Max=25791, Min=542, Avg=1870.24, 90=2513, 99=3371, 99.9=8527, 99.99=15959] 
2023-05-04 20:27:57:055 1220 sec: 178762724 operations; 147211.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1399010, Max=17311, Min=545, Avg=2044.75, 90=2837, 99=4231, 99.9=8287, 99.99=10407] [UPDATE: Count=73085, Max=10671, Min=564, Avg=1869.04, 90=2515, 99=3381, 99.9=7939, 99.99=9815] 
2023-05-04 20:28:07:055 1230 sec: 180231030 operations; 146830.6 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1395012, Max=48191, Min=510, Avg=2050.05, 90=2831, 99=4267, 99.9=9295, 99.99=28255] [UPDATE: Count=73236, Max=26175, Min=541, Avg=1874.26, 90=2513, 99=3433, 99.9=8471, 99.99=20863] 
2023-05-04 20:28:17:055 1240 sec: 181694855 operations; 146382.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1390614, Max=63007, Min=521, Avg=2056.28, 90=2827, 99=4175, 99.9=10287, 99.99=58943] [UPDATE: Count=73308, Max=59743, Min=509, Avg=1873.57, 90=2509, 99=3341, 99.9=8607, 99.99=58335] 
2023-05-04 20:28:27:055 1250 sec: 183166736 operations; 147188.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1398333, Max=19551, Min=533, Avg=2044.86, 90=2831, 99=4239, 99.9=8799, 99.99=11607] [UPDATE: Count=73558, Max=16295, Min=540, Avg=1874.74, 90=2513, 99=3379, 99.9=8263, 99.99=11039] 
2023-05-04 20:28:37:055 1260 sec: 184636144 operations; 146940.8 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1395791, Max=48223, Min=514, Avg=2048.62, 90=2829, 99=4183, 99.9=10015, 99.99=27039] [UPDATE: Count=73499, Max=25967, Min=520, Avg=1870.82, 90=2513, 99=3357, 99.9=9423, 99.99=19743] 
2023-05-04 20:28:47:055 1270 sec: 186101801 operations; 146565.7 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1392061, Max=54079, Min=509, Avg=2054.23, 90=2833, 99=4235, 99.9=11407, 99.99=25759] [UPDATE: Count=73614, Max=52959, Min=549, Avg=1870.9, 90=2517, 99=3375, 99.9=9711, 99.99=19423] 
2023-05-04 20:28:57:055 1280 sec: 187573143 operations; 147134.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1397679, Max=19247, Min=543, Avg=2045.79, 90=2827, 99=4235, 99.9=8911, 99.99=16943] [UPDATE: Count=73788, Max=17919, Min=535, Avg=1873.45, 90=2505, 99=3379, 99.9=8535, 99.99=16767] 
2023-05-04 20:29:07:055 1290 sec: 189043970 operations; 147082.7 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1397170, Max=54655, Min=505, Avg=2046.85, 90=2819, 99=4223, 99.9=10295, 99.99=28367] [UPDATE: Count=73515, Max=25535, Min=513, Avg=1863.66, 90=2507, 99=3363, 99.9=9127, 99.99=17407] 
2023-05-04 20:29:17:055 1300 sec: 190514032 operations; 147006.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1396606, Max=48191, Min=521, Avg=2047.73, 90=2831, 99=4259, 99.9=9095, 99.99=25743] [UPDATE: Count=73422, Max=28863, Min=563, Avg=1870.15, 90=2509, 99=3399, 99.9=8471, 99.99=24447] 
2023-05-04 20:29:27:055 1310 sec: 191977748 operations; 146371.6 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1391016, Max=30351, Min=533, Avg=2056.57, 90=2841, 99=4279, 99.9=9327, 99.99=26975] [UPDATE: Count=72734, Max=27999, Min=546, Avg=1878.39, 90=2511, 99=3361, 99.9=8911, 99.99=26527] 
2023-05-04 20:29:37:055 1320 sec: 193447829 operations; 147008.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1396847, Max=54303, Min=508, Avg=2048.08, 90=2821, 99=4271, 99.9=10399, 99.99=28831] [UPDATE: Count=73237, Max=27503, Min=518, Avg=1861.95, 90=2499, 99=3339, 99.9=9439, 99.99=23167] 
2023-05-04 20:29:47:055 1330 sec: 194913198 operations; 146536.9 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1392459, Max=62143, Min=505, Avg=2054.83, 90=2825, 99=4383, 99.9=11927, 99.99=29199] [UPDATE: Count=72919, Max=27455, Min=557, Avg=1866.13, 90=2503, 99=3373, 99.9=8247, 99.99=19743] 
2023-05-04 20:29:57:055 1340 sec: 196386040 operations; 147284.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1399300, Max=29231, Min=547, Avg=2043.55, 90=2827, 99=4187, 99.9=8567, 99.99=10711] [UPDATE: Count=73567, Max=15951, Min=545, Avg=1872.6, 90=2511, 99=3363, 99.9=8167, 99.99=10711] 
2023-05-04 20:30:07:055 1350 sec: 197853920 operations; 146788 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1394741, Max=64511, Min=493, Avg=2050.8, 90=2823, 99=4239, 99.9=9439, 99.99=30511] [UPDATE: Count=73128, Max=27007, Min=517, Avg=1871.02, 90=2505, 99=3365, 99.9=8503, 99.99=18799] 
2023-05-04 20:30:17:055 1360 sec: 199321770 operations; 146785 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1394126, Max=47551, Min=516, Avg=2050.83, 90=2831, 99=4271, 99.9=10055, 99.99=27903] [UPDATE: Count=73630, Max=25359, Min=548, Avg=1875.44, 90=2511, 99=3405, 99.9=9351, 99.99=21135] 
2023-05-04 20:30:27:055 1370 sec: 200790798 operations; 146902.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1395532, Max=19583, Min=532, Avg=2048.72, 90=2839, 99=4239, 99.9=8967, 99.99=14311] [UPDATE: Count=73717, Max=17407, Min=556, Avg=1879.05, 90=2521, 99=3407, 99.9=8687, 99.99=12895] 
2023-05-04 20:30:37:055 1380 sec: 202260936 operations; 147013.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1396946, Max=55071, Min=498, Avg=2047.42, 90=2829, 99=4215, 99.9=9831, 99.99=28063] [UPDATE: Count=73138, Max=26703, Min=518, Avg=1873.03, 90=2515, 99=3389, 99.9=9543, 99.99=23343] 
2023-05-04 20:30:47:055 1390 sec: 203721956 operations; 146102 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1387908, Max=70143, Min=524, Avg=2060.65, 90=2841, 99=4399, 99.9=12111, 99.99=27023] [UPDATE: Count=73009, Max=25887, Min=540, Avg=1877.71, 90=2521, 99=3475, 99.9=9015, 99.99=17247] 
2023-05-04 20:30:57:055 1400 sec: 205197462 operations; 147550.6 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1402001, Max=16343, Min=533, Avg=2039.92, 90=2825, 99=4107, 99.9=9047, 99.99=11127] [UPDATE: Count=73514, Max=11863, Min=558, Avg=1867.46, 90=2511, 99=3327, 99.9=8967, 99.99=10719] 
2023-05-04 20:31:07:055 1410 sec: 206665110 operations; 146764.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1394356, Max=55231, Min=519, Avg=2051.31, 90=2827, 99=4275, 99.9=10423, 99.99=28431] [UPDATE: Count=73275, Max=26015, Min=517, Avg=1868.85, 90=2515, 99=3369, 99.9=8815, 99.99=14615] 
2023-05-04 20:31:17:055 1420 sec: 208132880 operations; 146777 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1394273, Max=53663, Min=518, Avg=2051.04, 90=2827, 99=4347, 99.9=9511, 99.99=29247] [UPDATE: Count=73565, Max=26719, Min=573, Avg=1870.76, 90=2505, 99=3393, 99.9=8479, 99.99=11759] 
2023-05-04 20:31:27:055 1430 sec: 209609017 operations; 147613.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1402172, Max=18703, Min=540, Avg=2039.27, 90=2821, 99=4039, 99.9=9431, 99.99=12583] [UPDATE: Count=73985, Max=14783, Min=565, Avg=1864.58, 90=2505, 99=3317, 99.9=9055, 99.99=12207] 
2023-05-04 20:31:37:055 1440 sec: 211081546 operations; 147252.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1398554, Max=51807, Min=510, Avg=2044.25, 90=2821, 99=4259, 99.9=9079, 99.99=28063] [UPDATE: Count=73963, Max=26735, Min=523, Avg=1868.95, 90=2505, 99=3383, 99.9=8687, 99.99=23887] 
2023-05-04 20:31:47:055 1450 sec: 212541625 operations; 146007.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1387613, Max=54719, Min=508, Avg=2062.06, 90=2839, 99=4471, 99.9=10839, 99.99=27647] [UPDATE: Count=72548, Max=26799, Min=554, Avg=1875.88, 90=2519, 99=3433, 99.9=9199, 99.99=16607] 
2023-05-04 20:31:57:055 1460 sec: 214017739 operations; 147596.64 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1402589, Max=14423, Min=538, Avg=2038.97, 90=2819, 99=4103, 99.9=8911, 99.99=10679] [UPDATE: Count=73481, Max=11167, Min=525, Avg=1869.56, 90=2507, 99=3361, 99.9=8695, 99.99=10215] 
2023-05-04 20:32:07:055 1470 sec: 215485003 operations; 146741.07 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1393996, Max=52479, Min=506, Avg=2051.58, 90=2829, 99=4283, 99.9=10319, 99.99=26847] [UPDATE: Count=73313, Max=26879, Min=535, Avg=1875.03, 90=2509, 99=3381, 99.9=9583, 99.99=18479] 
2023-05-04 20:32:17:055 1480 sec: 216948685 operations; 146368.2 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1390496, Max=54495, Min=506, Avg=2056.91, 90=2829, 99=4347, 99.9=10967, 99.99=27263] [UPDATE: Count=73176, Max=26223, Min=531, Avg=1873.69, 90=2519, 99=3419, 99.9=8943, 99.99=14303] 
2023-05-04 20:32:27:055 1490 sec: 218417134 operations; 146844.9 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1395324, Max=22751, Min=525, Avg=2049.6, 90=2833, 99=4275, 99.9=9335, 99.99=14543] [UPDATE: Count=72990, Max=16815, Min=538, Avg=1877.42, 90=2515, 99=3415, 99.9=8927, 99.99=14383] 
2023-05-04 20:32:37:055 1500 sec: 219886473 operations; 146933.9 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1395694, Max=64703, Min=504, Avg=2048.98, 90=2821, 99=4151, 99.9=11535, 99.99=32671] [UPDATE: Count=73798, Max=27727, Min=510, Avg=1867.39, 90=2503, 99=3357, 99.9=8887, 99.99=19119] 
2023-05-04 20:32:47:055 1510 sec: 221350885 operations; 146441.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1391079, Max=52191, Min=535, Avg=2056, 90=2841, 99=4271, 99.9=10231, 99.99=25759] [UPDATE: Count=73224, Max=25503, Min=537, Avg=1870.22, 90=2521, 99=3383, 99.9=9143, 99.99=15247] 
2023-05-04 20:32:57:055 1520 sec: 222821139 operations; 147025.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1397143, Max=12215, Min=555, Avg=2046.98, 90=2837, 99=4219, 99.9=8255, 99.99=9847] [UPDATE: Count=73055, Max=10591, Min=551, Avg=1877.45, 90=2525, 99=3417, 99.9=8187, 99.99=9743] 
2023-05-04 20:33:07:055 1530 sec: 224290099 operations; 146896 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1395665, Max=61407, Min=526, Avg=2049.32, 90=2831, 99=4303, 99.9=10095, 99.99=27183] [UPDATE: Count=73261, Max=25407, Min=526, Avg=1869.33, 90=2517, 99=3405, 99.9=8575, 99.99=13711] 
2023-05-04 20:33:17:055 1540 sec: 225753989 operations; 146389 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1390476, Max=48127, Min=516, Avg=2056.53, 90=2847, 99=4383, 99.9=8863, 99.99=27423] [UPDATE: Count=73450, Max=27407, Min=546, Avg=1876.3, 90=2527, 99=3453, 99.9=7855, 99.99=18175] 
2023-05-04 20:33:27:055 1550 sec: 227224659 operations; 147067 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1397596, Max=18543, Min=543, Avg=2046.79, 90=2835, 99=4167, 99.9=9639, 99.99=14543] [UPDATE: Count=73046, Max=15623, Min=547, Avg=1870.04, 90=2509, 99=3343, 99.9=9679, 99.99=14535] 
2023-05-04 20:33:37:055 1560 sec: 228694584 operations; 146992.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1395740, Max=50655, Min=508, Avg=2048.04, 90=2825, 99=4215, 99.9=9623, 99.99=27615] [UPDATE: Count=74229, Max=26127, Min=510, Avg=1869.29, 90=2505, 99=3361, 99.9=9023, 99.99=19407] 
2023-05-04 20:33:47:055 1570 sec: 230162992 operations; 146840.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1395411, Max=52607, Min=505, Avg=2050.3, 90=2827, 99=4251, 99.9=9959, 99.99=26639] [UPDATE: Count=72987, Max=25903, Min=509, Avg=1866.25, 90=2507, 99=3367, 99.9=8543, 99.99=11039] 
2023-05-04 20:33:57:055 1580 sec: 231639387 operations; 147639.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1402040, Max=14479, Min=535, Avg=2038.75, 90=2825, 99=4087, 99.9=8799, 99.99=11367] [UPDATE: Count=74381, Max=11959, Min=571, Avg=1867.9, 90=2511, 99=3349, 99.9=8551, 99.99=11191] 
2023-05-04 20:34:07:055 1590 sec: 233107630 operations; 146809.62 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1394861, Max=58207, Min=507, Avg=2050.43, 90=2825, 99=4175, 99.9=10335, 99.99=31279] [UPDATE: Count=73483, Max=27391, Min=465, Avg=1870.14, 90=2501, 99=3341, 99.9=9151, 99.99=20079] 
2023-05-04 20:34:17:055 1600 sec: 234575939 operations; 146845.58 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1394639, Max=55103, Min=514, Avg=2050.39, 90=2823, 99=4203, 99.9=10631, 99.99=27007] [UPDATE: Count=73718, Max=48863, Min=547, Avg=1869.31, 90=2513, 99=3331, 99.9=9463, 99.99=15863] 
2023-05-04 20:34:27:055 1610 sec: 236050402 operations; 147446.3 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1400952, Max=17999, Min=515, Avg=2041.28, 90=2827, 99=4159, 99.9=8783, 99.99=12319] [UPDATE: Count=73302, Max=15895, Min=557, Avg=1869.64, 90=2509, 99=3359, 99.9=8423, 99.99=12279] 
2023-05-04 20:34:37:055 1620 sec: 237516569 operations; 146616.7 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1392879, Max=62111, Min=500, Avg=2053.62, 90=2823, 99=4175, 99.9=11183, 99.99=35135] [UPDATE: Count=73201, Max=26735, Min=522, Avg=1868.4, 90=2511, 99=3335, 99.9=9447, 99.99=22143] 
2023-05-04 20:34:47:055 1630 sec: 238979173 operations; 146260.4 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1389498, Max=57695, Min=511, Avg=2058.55, 90=2843, 99=4271, 99.9=11799, 99.99=27759] [UPDATE: Count=73255, Max=25823, Min=549, Avg=1869.75, 90=2523, 99=3385, 99.9=9415, 99.99=21023] 
2023-05-04 20:34:57:055 1640 sec: 240450781 operations; 147160.8 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1398284, Max=16927, Min=539, Avg=2045.41, 90=2843, 99=4179, 99.9=8439, 99.99=10815] [UPDATE: Count=73240, Max=15991, Min=572, Avg=1870.03, 90=2527, 99=3357, 99.9=8087, 99.99=10487] 
2023-05-04 20:35:07:055 1650 sec: 241914976 operations; 146419.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1391022, Max=53343, Min=511, Avg=2056.01, 90=2835, 99=4363, 99.9=10543, 99.99=26159] [UPDATE: Count=73345, Max=26239, Min=535, Avg=1876.55, 90=2517, 99=3445, 99.9=8703, 99.99=20271] 
2023-05-04 20:35:17:055 1660 sec: 243376869 operations; 146189.3 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1388774, Max=54975, Min=506, Avg=2059.53, 90=2831, 99=4379, 99.9=12967, 99.99=27711] [UPDATE: Count=73116, Max=25119, Min=559, Avg=1872.86, 90=2507, 99=3443, 99.9=9127, 99.99=18127] 
2023-05-04 20:35:27:055 1670 sec: 244845183 operations; 146831.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1394945, Max=19247, Min=495, Avg=2049.94, 90=2845, 99=4187, 99.9=8799, 99.99=11927] [UPDATE: Count=73268, Max=17151, Min=558, Avg=1876.82, 90=2527, 99=3377, 99.9=8575, 99.99=10439] 
2023-05-04 20:35:37:055 1680 sec: 246305296 operations; 146011.3 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1386681, Max=88703, Min=523, Avg=2062.25, 90=2819, 99=4147, 99.9=11783, 99.99=86079] [UPDATE: Count=73650, Max=86783, Min=564, Avg=1873.33, 90=2505, 99=3367, 99.9=8599, 99.99=85183] 
2023-05-04 20:35:47:055 1690 sec: 247765727 operations; 146043.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1386982, Max=54175, Min=514, Avg=2061.8, 90=2833, 99=4467, 99.9=12335, 99.99=26687] [UPDATE: Count=73221, Max=25951, Min=508, Avg=1875.68, 90=2513, 99=3451, 99.9=8743, 99.99=22239] 
2023-05-04 20:35:57:055 1700 sec: 249229365 operations; 146363.8 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1390195, Max=26719, Min=540, Avg=2056.68, 90=2841, 99=4275, 99.9=8903, 99.99=23199] [UPDATE: Count=73419, Max=25071, Min=556, Avg=1881.24, 90=2513, 99=3429, 99.9=8687, 99.99=23567] 
2023-05-04 20:36:07:055 1710 sec: 250696845 operations; 146748 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1393991, Max=49503, Min=515, Avg=2051.41, 90=2833, 99=4247, 99.9=9487, 99.99=28863] [UPDATE: Count=73519, Max=25983, Min=509, Avg=1874.21, 90=2515, 99=3401, 99.9=8935, 99.99=19455] 
2023-05-04 20:36:17:055 1720 sec: 252160759 operations; 146391.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1390663, Max=34975, Min=523, Avg=2056.66, 90=2833, 99=4271, 99.9=11455, 99.99=23615] [UPDATE: Count=73211, Max=24911, Min=570, Avg=1872.84, 90=2513, 99=3343, 99.9=9391, 99.99=20463] 
2023-05-04 20:36:27:055 1730 sec: 253626498 operations; 146573.9 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1392282, Max=20303, Min=510, Avg=2053.7, 90=2841, 99=4267, 99.9=8607, 99.99=15583] [UPDATE: Count=73581, Max=18447, Min=598, Avg=1878.68, 90=2519, 99=3399, 99.9=8359, 99.99=15351] 
2023-05-04 20:36:37:055 1740 sec: 255095677 operations; 146903.21 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1395654, Max=60223, Min=513, Avg=2048.97, 90=2825, 99=4199, 99.9=9423, 99.99=32863] [UPDATE: Count=73537, Max=26575, Min=535, Avg=1873.39, 90=2511, 99=3413, 99.9=8615, 99.99=16095] 
2023-05-04 20:36:47:055 1750 sec: 256555492 operations; 145996.1 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1386839, Max=53567, Min=522, Avg=2062.97, 90=2841, 99=4459, 99.9=12151, 99.99=26319] [UPDATE: Count=72894, Max=26703, Min=516, Avg=1867.8, 90=2515, 99=3425, 99.9=8887, 99.99=16847] 
2023-05-04 20:36:57:056 1760 sec: 258027499 operations; 147171.27 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1398561, Max=15055, Min=545, Avg=2044.13, 90=2841, 99=4135, 99.9=8951, 99.99=11335] [UPDATE: Count=73551, Max=12223, Min=590, Avg=1868.87, 90=2513, 99=3333, 99.9=8639, 99.99=11319] 
2023-05-04 20:37:07:055 1770 sec: 259492762 operations; 146555.61 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1391576, Max=55071, Min=494, Avg=2055.41, 90=2843, 99=4347, 99.9=9535, 99.99=28895] [UPDATE: Count=73578, Max=26111, Min=555, Avg=1872.87, 90=2519, 99=3409, 99.9=8679, 99.99=16735] 
2023-05-04 20:37:17:055 1780 sec: 260953087 operations; 146032.5 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1386674, Max=51199, Min=511, Avg=2062.05, 90=2849, 99=4547, 99.9=9703, 99.99=26687] [UPDATE: Count=73639, Max=26063, Min=568, Avg=1873.28, 90=2523, 99=3401, 99.9=8503, 99.99=21119] 
2023-05-04 20:37:27:055 1790 sec: 262418710 operations; 146562.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1392433, Max=36287, Min=538, Avg=2053.67, 90=2843, 99=4223, 99.9=9071, 99.99=33823] [UPDATE: Count=73155, Max=35135, Min=562, Avg=1882.18, 90=2529, 99=3381, 99.9=8519, 99.99=33151] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 20:37:37:055 1800 sec: 263897604 operations; 147889.4 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1405229, Max=59295, Min=516, Avg=2035.37, 90=2815, 99=4235, 99.9=9599, 99.99=36703] [UPDATE: Count=73623, Max=26527, Min=570, Avg=1861.94, 90=2509, 99=3421, 99.9=8335, 99.99=18383] 
Still waiting for thread Thread-63 to complete. Workload status: true
2023-05-04 20:37:39:313 1802 sec: 263901798 operations; 1856.57 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=3982, Max=8911, Min=625, Avg=1948.3, 90=2839, 99=5027, 99.9=7347, 99.99=8911] [CLEANUP: Count=300, Max=2226175, Min=0, Avg=7418.28, 90=2, 99=7, 99.9=2226175, 99.99=2226175] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802258
[OVERALL], Throughput(ops/sec), 146428.42367740913
[TOTAL_GCS_PS_Scavenge], Count, 3857
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18330
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0170574912137995
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 191
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.010597816738779908
[TOTAL_GCs], Count, 3860
[TOTAL_GC_TIME], Time(ms), 18521
[TOTAL_GC_TIME_%], Time(%), 1.0276553079525794
[READ], Operations, 250707904
[READ], AverageLatency(us), 2052.50281394798
[READ], MinLatency(us), 483
[READ], MaxLatency(us), 154367
[READ], 95thPercentileLatency(us), 3167
[READ], 99thPercentileLatency(us), 4259
[READ], Return=OK, 250707904
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7418.283333333334
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 2
[CLEANUP], 99thPercentileLatency(us), 7
[UPDATE], Operations, 13193894
[UPDATE], AverageLatency(us), 1873.185789881289
[UPDATE], MinLatency(us), 465
[UPDATE], MaxLatency(us), 148479
[UPDATE], 95thPercentileLatency(us), 2751
[UPDATE], 99thPercentileLatency(us), 3383
[UPDATE], Return=OK, 13193894
