bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 20:07:37:693 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
2023-05-04 20:07:47:674 10 sec: 1182553 operations; 118255.3 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1123252, Max=130623, Min=483, Avg=2354.7, 90=3089, 99=11215, 99.9=35263, 99.99=120383] [UPDATE: Count=60076, Max=133375, Min=522, Avg=2164.83, 90=2723, 99=10079, 99.9=33183, 99.99=122431] 
2023-05-04 20:07:57:674 20 sec: 2674032 operations; 149147.9 current ops/sec; est completion in 2 hours 4 minutes [READ: Count=1417232, Max=28751, Min=516, Avg=2017.89, 90=2805, 99=3933, 99.9=7147, 99.99=26591] [UPDATE: Count=73974, Max=28223, Min=505, Avg=1848.06, 90=2491, 99=3241, 99.9=7183, 99.99=26799] 
2023-05-04 20:08:07:674 30 sec: 4159669 operations; 148563.7 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1411666, Max=54015, Min=489, Avg=2026.87, 90=2803, 99=4163, 99.9=10087, 99.99=28175] [UPDATE: Count=73790, Max=26991, Min=477, Avg=1841.02, 90=2485, 99=3277, 99.9=6815, 99.99=22719] 
2023-05-04 20:08:17:674 40 sec: 5648533 operations; 148886.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1414767, Max=60607, Min=481, Avg=2022.25, 90=2789, 99=4037, 99.9=10343, 99.99=32751] [UPDATE: Count=74119, Max=26543, Min=496, Avg=1840.07, 90=2481, 99=3265, 99.9=8103, 99.99=18575] 
2023-05-04 20:08:27:674 50 sec: 7135612 operations; 148707.9 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1412966, Max=33695, Min=498, Avg=2024.31, 90=2799, 99=4065, 99.9=8895, 99.99=31023] [UPDATE: Count=74303, Max=33055, Min=515, Avg=1850.74, 90=2481, 99=3297, 99.9=8239, 99.99=30751] 
2023-05-04 20:08:37:674 60 sec: 8615580 operations; 147996.8 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1406313, Max=67839, Min=483, Avg=2034.5, 90=2799, 99=4195, 99.9=10071, 99.99=31791] [UPDATE: Count=73657, Max=25455, Min=481, Avg=1850.7, 90=2479, 99=3309, 99.9=9103, 99.99=19343] 
2023-05-04 20:08:47:674 70 sec: 10089161 operations; 147358.1 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1400198, Max=52127, Min=474, Avg=2043.18, 90=2823, 99=4335, 99.9=10159, 99.99=26911] [UPDATE: Count=73173, Max=26287, Min=512, Avg=1864.72, 90=2501, 99=3403, 99.9=9767, 99.99=19887] 
2023-05-04 20:08:57:674 80 sec: 11573435 operations; 148427.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1410215, Max=20479, Min=514, Avg=2027.86, 90=2805, 99=4143, 99.9=9207, 99.99=14711] [UPDATE: Count=74261, Max=17679, Min=521, Avg=1857.84, 90=2491, 99=3359, 99.9=8983, 99.99=10831] 
2023-05-04 20:09:07:674 90 sec: 13050699 operations; 147726.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1403483, Max=52895, Min=473, Avg=2037.88, 90=2811, 99=4291, 99.9=9783, 99.99=26271] [UPDATE: Count=73613, Max=26863, Min=525, Avg=1862.23, 90=2493, 99=3389, 99.9=9135, 99.99=22463] 
2023-05-04 20:09:17:674 100 sec: 14527459 operations; 147676 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1402817, Max=43263, Min=496, Avg=2038.79, 90=2811, 99=4271, 99.9=11919, 99.99=26143] [UPDATE: Count=73736, Max=31919, Min=525, Avg=1862.91, 90=2491, 99=3423, 99.9=9743, 99.99=23359] 
2023-05-04 20:09:27:674 110 sec: 16003125 operations; 147566.6 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1402123, Max=36735, Min=510, Avg=2039.8, 90=2815, 99=4243, 99.9=9983, 99.99=19583] [UPDATE: Count=73853, Max=17039, Min=536, Avg=1862.44, 90=2493, 99=3379, 99.9=9279, 99.99=16495] 
2023-05-04 20:09:37:674 120 sec: 17480211 operations; 147708.6 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1402916, Max=52351, Min=491, Avg=2038.64, 90=2811, 99=4375, 99.9=9799, 99.99=25455] [UPDATE: Count=74180, Max=25983, Min=508, Avg=1852.83, 90=2491, 99=3409, 99.9=8047, 99.99=19375] 
2023-05-04 20:09:47:674 130 sec: 18956977 operations; 147676.6 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1403135, Max=53183, Min=491, Avg=2038.92, 90=2809, 99=4315, 99.9=9919, 99.99=26751] [UPDATE: Count=73571, Max=27839, Min=493, Avg=1856.08, 90=2487, 99=3387, 99.9=8591, 99.99=11695] 
2023-05-04 20:09:57:674 140 sec: 20446673 operations; 148969.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1415869, Max=14047, Min=518, Avg=2020.44, 90=2799, 99=4099, 99.9=8199, 99.99=10119] [UPDATE: Count=73707, Max=11079, Min=556, Avg=1851.9, 90=2489, 99=3317, 99.9=7903, 99.99=10279] 
2023-05-04 20:10:07:674 150 sec: 21922649 operations; 147597.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1402103, Max=65407, Min=476, Avg=2040.35, 90=2813, 99=4291, 99.9=9855, 99.99=35967] [UPDATE: Count=73919, Max=26111, Min=491, Avg=1851.02, 90=2479, 99=3323, 99.9=8655, 99.99=15807] 
2023-05-04 20:10:17:674 160 sec: 23399425 operations; 147677.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1402843, Max=58111, Min=489, Avg=2038.89, 90=2801, 99=4283, 99.9=12879, 99.99=27295] [UPDATE: Count=74063, Max=24879, Min=494, Avg=1856.78, 90=2487, 99=3365, 99.9=8999, 99.99=23919] 
2023-05-04 20:10:27:674 170 sec: 24882444 operations; 148301.9 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1408811, Max=19583, Min=486, Avg=2029.75, 90=2813, 99=4187, 99.9=8575, 99.99=12719] [UPDATE: Count=74053, Max=15567, Min=536, Avg=1858.78, 90=2491, 99=3363, 99.9=8319, 99.99=10991] 
2023-05-04 20:10:37:674 180 sec: 26365391 operations; 148294.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1408934, Max=62559, Min=491, Avg=2030.14, 90=2801, 99=4159, 99.9=9391, 99.99=29279] [UPDATE: Count=74126, Max=25775, Min=508, Avg=1854.45, 90=2493, 99=3349, 99.9=8103, 99.99=13071] 
2023-05-04 20:10:47:674 190 sec: 27842283 operations; 147689.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1403388, Max=55231, Min=483, Avg=2038.33, 90=2811, 99=4195, 99.9=9639, 99.99=27343] [UPDATE: Count=73399, Max=26735, Min=536, Avg=1861.6, 90=2493, 99=3369, 99.9=8799, 99.99=19551] 
2023-05-04 20:10:57:674 200 sec: 29330298 operations; 148801.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1414020, Max=15967, Min=510, Avg=2022.93, 90=2805, 99=4151, 99.9=8239, 99.99=10527] [UPDATE: Count=74075, Max=19759, Min=565, Avg=1852.53, 90=2491, 99=3345, 99.9=7987, 99.99=11367] 
2023-05-04 20:11:07:675 210 sec: 30809066 operations; 147876.8 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1405312, Max=53727, Min=502, Avg=2035.94, 90=2805, 99=4215, 99.9=10167, 99.99=28815] [UPDATE: Count=73441, Max=25311, Min=472, Avg=1856.45, 90=2485, 99=3367, 99.9=9111, 99.99=20207] 
2023-05-04 20:11:17:674 220 sec: 32283596 operations; 147453 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1400494, Max=65471, Min=483, Avg=2042.15, 90=2811, 99=4343, 99.9=10895, 99.99=33631] [UPDATE: Count=73963, Max=26527, Min=480, Avg=1855.51, 90=2491, 99=3355, 99.9=9335, 99.99=20495] 
2023-05-04 20:11:27:674 230 sec: 33770781 operations; 148718.5 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1412969, Max=17359, Min=512, Avg=2024.06, 90=2807, 99=4159, 99.9=8391, 99.99=10863] [UPDATE: Count=74164, Max=15839, Min=524, Avg=1853.13, 90=2491, 99=3365, 99.9=8031, 99.99=10135] 
2023-05-04 20:11:37:674 240 sec: 35249764 operations; 147898.3 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1405181, Max=60159, Min=489, Avg=2036.03, 90=2801, 99=4243, 99.9=11719, 99.99=29487] [UPDATE: Count=73946, Max=35103, Min=495, Avg=1849.99, 90=2483, 99=3369, 99.9=8871, 99.99=24543] 
2023-05-04 20:11:47:674 250 sec: 36732471 operations; 148270.7 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1408189, Max=50655, Min=491, Avg=2030.45, 90=2805, 99=4187, 99.9=8855, 99.99=26799] [UPDATE: Count=74417, Max=25663, Min=521, Avg=1853.98, 90=2493, 99=3321, 99.9=8527, 99.99=17791] 
2023-05-04 20:11:57:674 260 sec: 38219383 operations; 148691.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1412254, Max=16463, Min=520, Avg=2024.26, 90=2801, 99=4083, 99.9=8879, 99.99=13151] [UPDATE: Count=74607, Max=16023, Min=539, Avg=1857.99, 90=2487, 99=3311, 99.9=9055, 99.99=13959] 
2023-05-04 20:12:07:674 270 sec: 39697250 operations; 147786.7 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1404080, Max=58719, Min=464, Avg=2037.35, 90=2801, 99=4287, 99.9=10503, 99.99=30015] [UPDATE: Count=73963, Max=26703, Min=531, Avg=1855.06, 90=2481, 99=3349, 99.9=8655, 99.99=19215] 
2023-05-04 20:12:17:675 280 sec: 41172231 operations; 147498.1 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1401457, Max=56639, Min=497, Avg=2041.35, 90=2813, 99=4383, 99.9=10295, 99.99=29279] [UPDATE: Count=73511, Max=25391, Min=515, Avg=1858.68, 90=2499, 99=3469, 99.9=8391, 99.99=16527] 
2023-05-04 20:12:27:674 290 sec: 42660355 operations; 148812.4 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1413602, Max=17759, Min=521, Avg=2023.03, 90=2799, 99=4131, 99.9=8335, 99.99=12103] [UPDATE: Count=74470, Max=15191, Min=523, Avg=1847.49, 90=2481, 99=3287, 99.9=7895, 99.99=11063] 
2023-05-04 20:12:37:674 300 sec: 44135944 operations; 147558.9 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1401440, Max=61503, Min=504, Avg=2040.46, 90=2803, 99=4219, 99.9=10847, 99.99=30911] [UPDATE: Count=74203, Max=26271, Min=532, Avg=1859.83, 90=2487, 99=3325, 99.9=9183, 99.99=20287] 
2023-05-04 20:12:47:674 310 sec: 45616917 operations; 148097.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1406682, Max=53823, Min=493, Avg=2033.02, 90=2811, 99=4167, 99.9=10007, 99.99=27647] [UPDATE: Count=74228, Max=25407, Min=511, Avg=1853.32, 90=2493, 99=3347, 99.9=8687, 99.99=15935] 
2023-05-04 20:12:57:674 320 sec: 47104580 operations; 148766.3 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1413724, Max=17455, Min=492, Avg=2023.45, 90=2799, 99=4057, 99.9=9215, 99.99=11063] [UPDATE: Count=73740, Max=23455, Min=533, Avg=1852.94, 90=2483, 99=3281, 99.9=9023, 99.99=14295] 
2023-05-04 20:13:07:674 330 sec: 48578784 operations; 147420.4 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1400268, Max=52575, Min=487, Avg=2042.41, 90=2813, 99=4371, 99.9=11039, 99.99=28847] [UPDATE: Count=74090, Max=26287, Min=484, Avg=1856.71, 90=2489, 99=3403, 99.9=7967, 99.99=21679] 
2023-05-04 20:13:17:674 340 sec: 50062993 operations; 148420.9 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1409786, Max=53759, Min=497, Avg=2028.49, 90=2795, 99=4115, 99.9=9407, 99.99=29055] [UPDATE: Count=74540, Max=26799, Min=532, Avg=1852.05, 90=2477, 99=3305, 99.9=8767, 99.99=22079] 
2023-05-04 20:13:27:674 350 sec: 51547455 operations; 148446.2 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1410219, Max=20031, Min=513, Avg=2027.9, 90=2807, 99=4155, 99.9=8639, 99.99=11887] [UPDATE: Count=74074, Max=15879, Min=499, Avg=1854.78, 90=2491, 99=3321, 99.9=8179, 99.99=10943] 
2023-05-04 20:13:37:674 360 sec: 53025190 operations; 147773.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1404481, Max=51775, Min=493, Avg=2037.16, 90=2807, 99=4243, 99.9=10551, 99.99=26687] [UPDATE: Count=73312, Max=21375, Min=516, Avg=1861.76, 90=2493, 99=3393, 99.9=9511, 99.99=15175] 
2023-05-04 20:13:47:674 370 sec: 54507307 operations; 148211.7 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1407588, Max=57471, Min=493, Avg=2031.53, 90=2801, 99=4219, 99.9=9375, 99.99=31375] [UPDATE: Count=74537, Max=21663, Min=507, Avg=1847.62, 90=2481, 99=3327, 99.9=8415, 99.99=14591] 
2023-05-04 20:13:57:674 380 sec: 55995867 operations; 148856 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1413648, Max=13463, Min=519, Avg=2022.16, 90=2799, 99=4089, 99.9=8695, 99.99=10599] [UPDATE: Count=74844, Max=10511, Min=527, Avg=1854.26, 90=2489, 99=3327, 99.9=8647, 99.99=9951] 
2023-05-04 20:14:07:674 390 sec: 57470871 operations; 147500.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1401251, Max=37215, Min=500, Avg=2041.51, 90=2809, 99=4407, 99.9=11743, 99.99=25119] [UPDATE: Count=73846, Max=26335, Min=543, Avg=1854.45, 90=2485, 99=3367, 99.9=9087, 99.99=18399] 
2023-05-04 20:14:17:674 400 sec: 58953036 operations; 148216.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1408041, Max=46783, Min=491, Avg=2031.2, 90=2797, 99=4143, 99.9=10495, 99.99=25263] [UPDATE: Count=73951, Max=32415, Min=479, Avg=1860.43, 90=2489, 99=3355, 99.9=9423, 99.99=24655] 
2023-05-04 20:14:27:674 410 sec: 60435285 operations; 148224.9 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1407786, Max=36159, Min=508, Avg=2031.09, 90=2801, 99=4103, 99.9=9855, 99.99=21263] [UPDATE: Count=74623, Max=13527, Min=531, Avg=1849.59, 90=2483, 99=3273, 99.9=9223, 99.99=11927] 
2023-05-04 20:14:37:674 420 sec: 61919868 operations; 148458.3 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1410390, Max=60895, Min=510, Avg=2028.25, 90=2801, 99=4107, 99.9=9055, 99.99=29855] [UPDATE: Count=74167, Max=26895, Min=487, Avg=1843.96, 90=2473, 99=3287, 99.9=7919, 99.99=16103] 
2023-05-04 20:14:47:674 430 sec: 63390632 operations; 147076.4 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1397223, Max=52927, Min=497, Avg=2047.33, 90=2835, 99=4367, 99.9=10607, 99.99=28847] [UPDATE: Count=73347, Max=33727, Min=499, Avg=1866.29, 90=2515, 99=3449, 99.9=8871, 99.99=23055] 
2023-05-04 20:14:57:674 440 sec: 64861442 operations; 147081 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1397147, Max=34847, Min=513, Avg=2046.71, 90=2845, 99=4291, 99.9=9583, 99.99=20607] [UPDATE: Count=73852, Max=19775, Min=544, Avg=1867.04, 90=2519, 99=3381, 99.9=8711, 99.99=16279] 
2023-05-04 20:15:07:674 450 sec: 66337492 operations; 147605 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1402270, Max=60607, Min=505, Avg=2039.94, 90=2811, 99=4211, 99.9=11335, 99.99=27151] [UPDATE: Count=73828, Max=25535, Min=506, Avg=1856.42, 90=2493, 99=3351, 99.9=9407, 99.99=17951] 
2023-05-04 20:15:17:674 460 sec: 67816414 operations; 147892.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1404888, Max=60447, Min=473, Avg=2035.78, 90=2811, 99=4155, 99.9=9607, 99.99=31183] [UPDATE: Count=74014, Max=26079, Min=509, Avg=1855.71, 90=2493, 99=3335, 99.9=8615, 99.99=15647] 
2023-05-04 20:15:27:674 470 sec: 69297289 operations; 148087.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1406371, Max=23375, Min=477, Avg=2032.67, 90=2817, 99=4147, 99.9=8703, 99.99=12415] [UPDATE: Count=74459, Max=18735, Min=544, Avg=1863.99, 90=2501, 99=3339, 99.9=8759, 99.99=13871] 
2023-05-04 20:15:37:674 480 sec: 70778030 operations; 148074.1 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1406456, Max=58847, Min=477, Avg=2033.46, 90=2803, 99=4143, 99.9=9631, 99.99=32319] [UPDATE: Count=74309, Max=45695, Min=508, Avg=1850.88, 90=2487, 99=3295, 99.9=8383, 99.99=16895] 
2023-05-04 20:15:47:674 490 sec: 72260847 operations; 148281.7 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1408921, Max=66239, Min=497, Avg=2030.23, 90=2803, 99=4163, 99.9=9623, 99.99=33951] [UPDATE: Count=73895, Max=28879, Min=505, Avg=1854.24, 90=2491, 99=3353, 99.9=9135, 99.99=21215] 
2023-05-04 20:15:57:674 500 sec: 73742573 operations; 148172.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1407692, Max=14479, Min=506, Avg=2031.59, 90=2811, 99=4191, 99.9=8927, 99.99=10863] [UPDATE: Count=73956, Max=11647, Min=549, Avg=1858.37, 90=2491, 99=3345, 99.9=8567, 99.99=10455] 
2023-05-04 20:16:07:674 510 sec: 75222278 operations; 147970.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1405592, Max=60831, Min=491, Avg=2034.61, 90=2809, 99=4215, 99.9=10095, 99.99=31071] [UPDATE: Count=74307, Max=26255, Min=502, Avg=1858.63, 90=2499, 99=3401, 99.9=8623, 99.99=17183] 
2023-05-04 20:16:17:674 520 sec: 76686564 operations; 146428.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1390770, Max=57247, Min=503, Avg=2057.04, 90=2811, 99=5087, 99.9=15079, 99.99=29279] [UPDATE: Count=73396, Max=26223, Min=521, Avg=1857.65, 90=2489, 99=3475, 99.9=9399, 99.99=16559] 
2023-05-04 20:16:27:674 530 sec: 78168756 operations; 148219.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1408132, Max=18367, Min=488, Avg=2030.88, 90=2811, 99=4251, 99.9=8631, 99.99=11479] [UPDATE: Count=74015, Max=17311, Min=530, Avg=1859.67, 90=2495, 99=3385, 99.9=8423, 99.99=11407] 
2023-05-04 20:16:37:674 540 sec: 79648800 operations; 148004.4 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1405939, Max=51743, Min=481, Avg=2034.45, 90=2797, 99=4231, 99.9=11103, 99.99=28255] [UPDATE: Count=74166, Max=27263, Min=517, Avg=1850.69, 90=2485, 99=3351, 99.9=9055, 99.99=21503] 
2023-05-04 20:16:47:674 550 sec: 81126149 operations; 147734.9 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1403148, Max=52127, Min=491, Avg=2038.09, 90=2807, 99=4251, 99.9=9495, 99.99=27807] [UPDATE: Count=74160, Max=28575, Min=505, Avg=1856.24, 90=2485, 99=3323, 99.9=8115, 99.99=25135] 
2023-05-04 20:16:57:674 560 sec: 82610267 operations; 148411.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1409943, Max=25791, Min=521, Avg=2028.1, 90=2803, 99=4091, 99.9=9167, 99.99=22607] [UPDATE: Count=74200, Max=23183, Min=516, Avg=1854.67, 90=2483, 99=3329, 99.9=8831, 99.99=21711] 
2023-05-04 20:17:07:675 570 sec: 84088427 operations; 147816 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1404034, Max=50399, Min=487, Avg=2036.97, 90=2801, 99=4299, 99.9=10943, 99.99=26303] [UPDATE: Count=74304, Max=41855, Min=519, Avg=1855.51, 90=2485, 99=3361, 99.9=8695, 99.99=16767] 
2023-05-04 20:17:17:674 580 sec: 85570080 operations; 148165.3 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1407326, Max=56159, Min=491, Avg=2032.01, 90=2799, 99=4235, 99.9=9431, 99.99=26975] [UPDATE: Count=74133, Max=26847, Min=495, Avg=1853.57, 90=2487, 99=3353, 99.9=8319, 99.99=17615] 
2023-05-04 20:17:27:674 590 sec: 87060092 operations; 149001.2 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1415960, Max=19439, Min=513, Avg=2020.27, 90=2797, 99=4033, 99.9=9319, 99.99=11895] [UPDATE: Count=74045, Max=13271, Min=527, Avg=1848.04, 90=2481, 99=3257, 99.9=9055, 99.99=11615] 
2023-05-04 20:17:37:674 600 sec: 88537479 operations; 147738.7 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1403843, Max=54943, Min=501, Avg=2038.13, 90=2815, 99=4247, 99.9=10007, 99.99=26367] [UPDATE: Count=73541, Max=26623, Min=500, Avg=1853.61, 90=2489, 99=3355, 99.9=8527, 99.99=16271] 
2023-05-04 20:17:47:674 610 sec: 90008111 operations; 147063.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1397034, Max=77183, Min=496, Avg=2047.69, 90=2823, 99=4395, 99.9=10887, 99.99=28639] [UPDATE: Count=73838, Max=28831, Min=493, Avg=1857.92, 90=2497, 99=3363, 99.9=8303, 99.99=21759] 
2023-05-04 20:17:57:674 620 sec: 91494701 operations; 148659 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1412395, Max=12967, Min=502, Avg=2024.98, 90=2809, 99=4055, 99.9=8727, 99.99=11279] [UPDATE: Count=74016, Max=11639, Min=538, Avg=1852.54, 90=2491, 99=3281, 99.9=8367, 99.99=10863] 
2023-05-04 20:18:07:674 630 sec: 92960793 operations; 146609.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1393596, Max=60511, Min=499, Avg=2054.1, 90=2825, 99=4419, 99.9=12839, 99.99=30239] [UPDATE: Count=73522, Max=30335, Min=534, Avg=1863.68, 90=2493, 99=3355, 99.9=9239, 99.99=29455] 
2023-05-04 20:18:17:674 640 sec: 94439157 operations; 147836.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1403258, Max=53407, Min=503, Avg=2036.95, 90=2811, 99=4227, 99.9=11111, 99.99=28527] [UPDATE: Count=74156, Max=23215, Min=509, Avg=1849.81, 90=2491, 99=3305, 99.9=9103, 99.99=20447] 
2023-05-04 20:18:27:674 650 sec: 95925117 operations; 148596 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1411395, Max=18287, Min=519, Avg=2025.8, 90=2801, 99=4155, 99.9=9007, 99.99=12999] [UPDATE: Count=74403, Max=16167, Min=519, Avg=1853.69, 90=2479, 99=3317, 99.9=8799, 99.99=13975] 
2023-05-04 20:18:37:674 660 sec: 97411737 operations; 148662 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1412520, Max=54175, Min=473, Avg=2025.18, 90=2787, 99=4143, 99.9=11175, 99.99=25823] [UPDATE: Count=74341, Max=26719, Min=529, Avg=1847.23, 90=2477, 99=3319, 99.9=9343, 99.99=18159] 
2023-05-04 20:18:47:675 670 sec: 98886217 operations; 147448 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1400856, Max=56575, Min=485, Avg=2042.25, 90=2821, 99=4399, 99.9=11311, 99.99=29167] [UPDATE: Count=73485, Max=26079, Min=517, Avg=1856.61, 90=2505, 99=3401, 99.9=8607, 99.99=18671] 
2023-05-04 20:18:57:674 680 sec: 100370117 operations; 148390 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1409645, Max=14647, Min=516, Avg=2028.66, 90=2817, 99=4139, 99.9=8959, 99.99=11183] [UPDATE: Count=74165, Max=11343, Min=498, Avg=1853.78, 90=2499, 99=3297, 99.9=8311, 99.99=10583] 
2023-05-04 20:19:07:674 690 sec: 101849932 operations; 147981.5 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1405371, Max=52511, Min=477, Avg=2034.51, 90=2807, 99=4227, 99.9=10039, 99.99=28895] [UPDATE: Count=74486, Max=27535, Min=508, Avg=1856.55, 90=2491, 99=3367, 99.9=8839, 99.99=16447] 
2023-05-04 20:19:17:674 700 sec: 103327580 operations; 147764.8 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1403715, Max=57695, Min=480, Avg=2037.64, 90=2805, 99=4239, 99.9=11831, 99.99=30975] [UPDATE: Count=73960, Max=28143, Min=509, Avg=1857.39, 90=2495, 99=3359, 99.9=9343, 99.99=20607] 
2023-05-04 20:19:27:674 710 sec: 104813683 operations; 148610.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1411768, Max=26143, Min=510, Avg=2025.48, 90=2805, 99=4099, 99.9=9167, 99.99=12815] [UPDATE: Count=74357, Max=14919, Min=506, Avg=1855.1, 90=2491, 99=3311, 99.9=9047, 99.99=11335] 
2023-05-04 20:19:37:674 720 sec: 106292642 operations; 147895.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1405162, Max=54175, Min=484, Avg=2035.52, 90=2803, 99=4235, 99.9=10247, 99.99=26975] [UPDATE: Count=73869, Max=27647, Min=515, Avg=1859.1, 90=2493, 99=3399, 99.9=9255, 99.99=22127] 
2023-05-04 20:19:47:674 730 sec: 107771443 operations; 147880.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1404678, Max=52287, Min=502, Avg=2036.19, 90=2807, 99=4279, 99.9=10775, 99.99=25871] [UPDATE: Count=73979, Max=25327, Min=532, Avg=1853.88, 90=2491, 99=3351, 99.9=9271, 99.99=15031] 
2023-05-04 20:19:57:674 740 sec: 109259132 operations; 148768.9 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1413092, Max=15575, Min=516, Avg=2023.44, 90=2801, 99=4139, 99.9=8583, 99.99=10687] [UPDATE: Count=74672, Max=11847, Min=513, Avg=1851.22, 90=2485, 99=3319, 99.9=8207, 99.99=10199] 
2023-05-04 20:20:07:674 750 sec: 110734294 operations; 147516.2 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1401597, Max=51711, Min=480, Avg=2041.11, 90=2819, 99=4247, 99.9=9895, 99.99=26223] [UPDATE: Count=73449, Max=25199, Min=533, Avg=1857.1, 90=2487, 99=3315, 99.9=8887, 99.99=16575] 
2023-05-04 20:20:17:674 760 sec: 112210271 operations; 147597.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1402073, Max=59103, Min=498, Avg=2039.91, 90=2815, 99=4187, 99.9=9519, 99.99=34719] [UPDATE: Count=73959, Max=26591, Min=488, Avg=1858.99, 90=2497, 99=3333, 99.9=8743, 99.99=16191] 
2023-05-04 20:20:27:674 770 sec: 113689598 operations; 147932.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1405513, Max=18511, Min=502, Avg=2035.12, 90=2817, 99=4271, 99.9=8959, 99.99=16495] [UPDATE: Count=73886, Max=17695, Min=531, Avg=1857.52, 90=2493, 99=3331, 99.9=8855, 99.99=16559] 
2023-05-04 20:20:37:674 780 sec: 115165959 operations; 147636.1 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1402703, Max=52607, Min=470, Avg=2039.57, 90=2817, 99=4259, 99.9=10215, 99.99=27599] [UPDATE: Count=73553, Max=23423, Min=503, Avg=1853.05, 90=2493, 99=3319, 99.9=9007, 99.99=14055] 
2023-05-04 20:20:47:674 790 sec: 116631141 operations; 146518.2 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1391633, Max=52287, Min=495, Avg=2056.45, 90=2837, 99=5451, 99.9=12191, 99.99=27439] [UPDATE: Count=73420, Max=45087, Min=534, Avg=1848.46, 90=2497, 99=3443, 99.9=8687, 99.99=22207] 
2023-05-04 20:20:57:675 800 sec: 118107576 operations; 147643.5 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1402493, Max=29967, Min=507, Avg=2038.99, 90=2829, 99=4207, 99.9=9615, 99.99=19599] [UPDATE: Count=74236, Max=27343, Min=522, Avg=1860.52, 90=2505, 99=3345, 99.9=9151, 99.99=11487] 
2023-05-04 20:21:07:674 810 sec: 119588160 operations; 148058.4 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1406760, Max=59711, Min=504, Avg=2033.41, 90=2807, 99=4179, 99.9=10295, 99.99=27775] [UPDATE: Count=73700, Max=24175, Min=499, Avg=1854.14, 90=2495, 99=3363, 99.9=9175, 99.99=18671] 
2023-05-04 20:21:17:674 820 sec: 121066546 operations; 147838.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1404217, Max=53215, Min=490, Avg=2036.54, 90=2809, 99=4247, 99.9=9919, 99.99=27279] [UPDATE: Count=74165, Max=26463, Min=527, Avg=1856.97, 90=2491, 99=3389, 99.9=8839, 99.99=15183] 
2023-05-04 20:21:27:674 830 sec: 122553782 operations; 148723.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1413014, Max=19583, Min=504, Avg=2024.05, 90=2809, 99=4093, 99.9=8855, 99.99=11471] [UPDATE: Count=74188, Max=17199, Min=533, Avg=1851.24, 90=2493, 99=3291, 99.9=8647, 99.99=11543] 
2023-05-04 20:21:37:674 840 sec: 124035190 operations; 148140.8 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1407857, Max=63263, Min=488, Avg=2032.09, 90=2805, 99=4167, 99.9=9367, 99.99=26911] [UPDATE: Count=73561, Max=25743, Min=503, Avg=1856.71, 90=2495, 99=3341, 99.9=8423, 99.99=18863] 
2023-05-04 20:21:47:674 850 sec: 125513313 operations; 147812.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1404172, Max=53503, Min=486, Avg=2036.8, 90=2811, 99=4283, 99.9=9031, 99.99=27855] [UPDATE: Count=73983, Max=26671, Min=515, Avg=1859.73, 90=2497, 99=3341, 99.9=8335, 99.99=18687] 
2023-05-04 20:21:57:675 860 sec: 126998488 operations; 148517.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1410779, Max=12655, Min=520, Avg=2026.74, 90=2811, 99=4155, 99.9=8703, 99.99=10391] [UPDATE: Count=74517, Max=10559, Min=509, Avg=1858.36, 90=2497, 99=3367, 99.9=8407, 99.99=9879] 
2023-05-04 20:22:07:674 870 sec: 128478109 operations; 147962.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1405778, Max=53919, Min=494, Avg=2034.83, 90=2801, 99=4183, 99.9=12719, 99.99=26959] [UPDATE: Count=73800, Max=27375, Min=520, Avg=1855.26, 90=2485, 99=3325, 99.9=9543, 99.99=18303] 
2023-05-04 20:22:17:674 880 sec: 129958198 operations; 148008.9 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1406353, Max=53375, Min=510, Avg=2033.96, 90=2805, 99=4235, 99.9=9671, 99.99=26095] [UPDATE: Count=73852, Max=26223, Min=536, Avg=1857.52, 90=2483, 99=3327, 99.9=8807, 99.99=24271] 
2023-05-04 20:22:27:674 890 sec: 131447113 operations; 148891.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1415119, Max=19935, Min=496, Avg=2021.4, 90=2795, 99=4043, 99.9=9519, 99.99=12951] [UPDATE: Count=73679, Max=13887, Min=542, Avg=1855.26, 90=2483, 99=3313, 99.9=9223, 99.99=11639] 
2023-05-04 20:22:37:674 900 sec: 132928391 operations; 148127.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1407332, Max=51583, Min=503, Avg=2032.17, 90=2809, 99=4271, 99.9=9135, 99.99=26399] [UPDATE: Count=73804, Max=26111, Min=496, Avg=1859.49, 90=2495, 99=3395, 99.9=8863, 99.99=22079] 
2023-05-04 20:22:47:674 910 sec: 134407344 operations; 147895.3 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1405465, Max=47039, Min=477, Avg=2035.59, 90=2811, 99=4207, 99.9=10687, 99.99=26719] [UPDATE: Count=73537, Max=26335, Min=494, Avg=1858.33, 90=2493, 99=3367, 99.9=9591, 99.99=18191] 
2023-05-04 20:22:57:674 920 sec: 135884614 operations; 147727 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1403612, Max=80639, Min=509, Avg=2037.52, 90=2807, 99=4115, 99.9=8223, 99.99=77951] [UPDATE: Count=73621, Max=78591, Min=531, Avg=1867.3, 90=2497, 99=3391, 99.9=8027, 99.99=77439] 
2023-05-04 20:23:07:674 930 sec: 137364934 operations; 148032 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1406642, Max=60383, Min=498, Avg=2034.01, 90=2807, 99=4195, 99.9=9815, 99.99=34719] [UPDATE: Count=73713, Max=25007, Min=497, Avg=1850.57, 90=2491, 99=3313, 99.9=8743, 99.99=16287] 
2023-05-04 20:23:17:674 940 sec: 138845614 operations; 148068 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1406927, Max=54623, Min=491, Avg=2033.18, 90=2809, 99=4223, 99.9=9159, 99.99=27487] [UPDATE: Count=73871, Max=26015, Min=543, Avg=1856.45, 90=2493, 99=3365, 99.9=8279, 99.99=20719] 
2023-05-04 20:23:27:678 950 sec: 140334196 operations; 148798.68 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1414308, Max=18863, Min=526, Avg=2021.59, 90=2803, 99=4135, 99.9=8303, 99.99=11215] [UPDATE: Count=74212, Max=15791, Min=529, Avg=1855.72, 90=2495, 99=3361, 99.9=8127, 99.99=11335] 
2023-05-04 20:23:37:674 960 sec: 141818158 operations; 148455.58 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1410068, Max=57503, Min=497, Avg=2029.17, 90=2797, 99=4183, 99.9=10199, 99.99=27871] [UPDATE: Count=73869, Max=26143, Min=501, Avg=1848.71, 90=2487, 99=3313, 99.9=8735, 99.99=13847] 
2023-05-04 20:23:47:674 970 sec: 143298276 operations; 148011.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1406503, Max=54015, Min=475, Avg=2033.92, 90=2809, 99=4243, 99.9=9183, 99.99=28287] [UPDATE: Count=73579, Max=35615, Min=528, Avg=1858.6, 90=2499, 99=3361, 99.9=8199, 99.99=25423] 
2023-05-04 20:23:57:674 980 sec: 144781787 operations; 148351.1 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1409433, Max=28879, Min=495, Avg=2029.18, 90=2807, 99=4199, 99.9=8623, 99.99=26047] [UPDATE: Count=74150, Max=26543, Min=524, Avg=1855.1, 90=2487, 99=3357, 99.9=8207, 99.99=25215] 
2023-05-04 20:24:07:674 990 sec: 146263689 operations; 148190.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1407621, Max=52319, Min=472, Avg=2031.64, 90=2801, 99=4147, 99.9=10815, 99.99=26927] [UPDATE: Count=74135, Max=26991, Min=537, Avg=1854.44, 90=2491, 99=3325, 99.9=9375, 99.99=15655] 
2023-05-04 20:24:17:674 1000 sec: 147739118 operations; 147542.9 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1401698, Max=55199, Min=492, Avg=2040.79, 90=2811, 99=4251, 99.9=10823, 99.99=30303] [UPDATE: Count=73632, Max=31023, Min=530, Avg=1859.97, 90=2491, 99=3375, 99.9=9639, 99.99=21439] 
2023-05-04 20:24:27:674 1010 sec: 149220030 operations; 148091.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1406837, Max=34015, Min=508, Avg=2032.52, 90=2807, 99=4215, 99.9=9711, 99.99=19503] [UPDATE: Count=74246, Max=23183, Min=515, Avg=1858.64, 90=2489, 99=3379, 99.9=8935, 99.99=16703] 
2023-05-04 20:24:37:674 1020 sec: 150704549 operations; 148451.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1410504, Max=58975, Min=466, Avg=2028.15, 90=2799, 99=4099, 99.9=9847, 99.99=32143] [UPDATE: Count=74038, Max=26575, Min=492, Avg=1848.25, 90=2485, 99=3293, 99.9=9127, 99.99=22271] 
2023-05-04 20:24:47:674 1030 sec: 152164700 operations; 146015.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1386808, Max=52287, Min=503, Avg=2062.16, 90=2843, 99=4475, 99.9=11799, 99.99=28527] [UPDATE: Count=73542, Max=27167, Min=539, Avg=1875.56, 90=2505, 99=3427, 99.9=9175, 99.99=26127] 
2023-05-04 20:24:57:674 1040 sec: 153637632 operations; 147293.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1399089, Max=22303, Min=523, Avg=2044.09, 90=2849, 99=4295, 99.9=8455, 99.99=10191] [UPDATE: Count=73635, Max=10783, Min=535, Avg=1863.26, 90=2513, 99=3359, 99.9=8375, 99.99=10079] 
2023-05-04 20:25:07:674 1050 sec: 155099496 operations; 146186.4 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1388536, Max=56479, Min=480, Avg=2060.24, 90=2829, 99=4471, 99.9=14167, 99.99=29775] [UPDATE: Count=73344, Max=26287, Min=505, Avg=1865.76, 90=2493, 99=3397, 99.9=9551, 99.99=24863] 
2023-05-04 20:25:17:674 1060 sec: 156569323 operations; 146982.7 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1395902, Max=51007, Min=500, Avg=2049.08, 90=2829, 99=4351, 99.9=9863, 99.99=30815] [UPDATE: Count=73864, Max=45215, Min=529, Avg=1856.74, 90=2483, 99=3341, 99.9=8167, 99.99=17151] 
2023-05-04 20:25:27:674 1070 sec: 158044145 operations; 147482.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1400874, Max=21071, Min=521, Avg=2041.22, 90=2827, 99=4223, 99.9=9087, 99.99=16055] [UPDATE: Count=74064, Max=19647, Min=517, Avg=1864.43, 90=2499, 99=3351, 99.9=8711, 99.99=15655] 
2023-05-04 20:25:37:674 1080 sec: 159511648 operations; 146750.3 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1394331, Max=55039, Min=493, Avg=2052.12, 90=2837, 99=4343, 99.9=10039, 99.99=28239] [UPDATE: Count=73120, Max=26511, Min=519, Avg=1860.78, 90=2499, 99=3335, 99.9=8751, 99.99=16863] 
2023-05-04 20:25:47:674 1090 sec: 160983510 operations; 147186.2 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1397993, Max=53503, Min=506, Avg=2045.47, 90=2821, 99=4267, 99.9=10247, 99.99=28799] [UPDATE: Count=73936, Max=42687, Min=544, Avg=1868.13, 90=2495, 99=3351, 99.9=9671, 99.99=20335] 
2023-05-04 20:25:57:674 1100 sec: 162459731 operations; 147622.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1402382, Max=15287, Min=523, Avg=2039.47, 90=2827, 99=4239, 99.9=8295, 99.99=12807] [UPDATE: Count=73722, Max=13543, Min=558, Avg=1859.99, 90=2489, 99=3353, 99.9=8111, 99.99=12231] 
2023-05-04 20:26:07:674 1110 sec: 163922429 operations; 146269.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1389662, Max=52479, Min=496, Avg=2058.87, 90=2843, 99=4463, 99.9=9831, 99.99=28863] [UPDATE: Count=73059, Max=24719, Min=502, Avg=1867.2, 90=2499, 99=3403, 99.9=8719, 99.99=16959] 
2023-05-04 20:26:17:674 1120 sec: 165381860 operations; 145943.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1386626, Max=38879, Min=505, Avg=2063.56, 90=2843, 99=4527, 99.9=11111, 99.99=25967] [UPDATE: Count=72636, Max=35967, Min=525, Avg=1872.13, 90=2501, 99=3425, 99.9=8815, 99.99=23823] 
2023-05-04 20:26:27:674 1130 sec: 166857626 operations; 147576.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1401694, Max=39263, Min=523, Avg=2040.12, 90=2817, 99=4167, 99.9=9319, 99.99=19935] [UPDATE: Count=74208, Max=29855, Min=511, Avg=1858.02, 90=2491, 99=3301, 99.9=8671, 99.99=12511] 
2023-05-04 20:26:37:674 1140 sec: 168311250 operations; 145362.4 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1381066, Max=51807, Min=513, Avg=2072.29, 90=2869, 99=4803, 99.9=9903, 99.99=27263] [UPDATE: Count=72573, Max=46975, Min=520, Avg=1868.21, 90=2493, 99=3415, 99.9=8495, 99.99=21247] 
2023-05-04 20:26:47:674 1150 sec: 169783102 operations; 147185.2 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1398224, Max=59455, Min=506, Avg=2046.2, 90=2819, 99=4363, 99.9=10959, 99.99=34303] [UPDATE: Count=73655, Max=26111, Min=506, Avg=1853.13, 90=2495, 99=3383, 99.9=8351, 99.99=17503] 
2023-05-04 20:26:57:674 1160 sec: 171260847 operations; 147774.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1403850, Max=13239, Min=530, Avg=2037.2, 90=2839, 99=4211, 99.9=8263, 99.99=10423] [UPDATE: Count=73840, Max=11271, Min=526, Avg=1861.12, 90=2519, 99=3341, 99.9=7823, 99.99=10127] 
2023-05-04 20:27:07:674 1170 sec: 172730135 operations; 146928.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1396051, Max=54911, Min=481, Avg=2049.49, 90=2831, 99=4399, 99.9=10871, 99.99=30079] [UPDATE: Count=73401, Max=27391, Min=489, Avg=1860.93, 90=2513, 99=3399, 99.9=8543, 99.99=18383] 
2023-05-04 20:27:17:674 1180 sec: 174204690 operations; 147455.5 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1400548, Max=58559, Min=483, Avg=2041.83, 90=2827, 99=4275, 99.9=8975, 99.99=34623] [UPDATE: Count=73883, Max=26895, Min=508, Avg=1861.82, 90=2507, 99=3409, 99.9=8031, 99.99=19375] 
2023-05-04 20:27:27:674 1190 sec: 175686967 operations; 148227.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1408630, Max=19871, Min=508, Avg=2030.61, 90=2811, 99=4191, 99.9=8943, 99.99=12063] [UPDATE: Count=73620, Max=14327, Min=530, Avg=1860.82, 90=2493, 99=3401, 99.9=8591, 99.99=11327] 
2023-05-04 20:27:37:674 1200 sec: 177167321 operations; 148035.4 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1406363, Max=55743, Min=466, Avg=2033.78, 90=2799, 99=4175, 99.9=10143, 99.99=28079] [UPDATE: Count=74007, Max=50655, Min=523, Avg=1855.02, 90=2487, 99=3349, 99.9=9167, 99.99=22799] 
2023-05-04 20:27:47:674 1210 sec: 178650910 operations; 148358.9 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1409316, Max=51103, Min=473, Avg=2029.08, 90=2803, 99=4135, 99.9=9111, 99.99=28383] [UPDATE: Count=74255, Max=26559, Min=524, Avg=1856.57, 90=2493, 99=3337, 99.9=8775, 99.99=18927] 
2023-05-04 20:27:57:674 1220 sec: 180130436 operations; 147952.6 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1405536, Max=23855, Min=524, Avg=2034.58, 90=2823, 99=4227, 99.9=8767, 99.99=10975] [UPDATE: Count=73979, Max=11999, Min=509, Avg=1861.88, 90=2499, 99=3459, 99.9=8607, 99.99=10631] 
2023-05-04 20:28:07:674 1230 sec: 181611539 operations; 148110.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1407034, Max=51711, Min=501, Avg=2032.45, 90=2807, 99=4183, 99.9=9503, 99.99=28271] [UPDATE: Count=74119, Max=26511, Min=524, Avg=1859.87, 90=2493, 99=3351, 99.9=8903, 99.99=17999] 
2023-05-04 20:28:17:674 1240 sec: 183089349 operations; 147781 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1404008, Max=54431, Min=500, Avg=2037.46, 90=2815, 99=4319, 99.9=9455, 99.99=28367] [UPDATE: Count=73813, Max=25999, Min=521, Avg=1855.06, 90=2493, 99=3403, 99.9=8623, 99.99=22271] 
2023-05-04 20:28:27:674 1250 sec: 184572534 operations; 148318.5 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1408748, Max=18143, Min=516, Avg=2029.78, 90=2811, 99=4227, 99.9=8551, 99.99=11519] [UPDATE: Count=74397, Max=16543, Min=544, Avg=1854.5, 90=2485, 99=3315, 99.9=8367, 99.99=10999] 
2023-05-04 20:28:37:674 1260 sec: 186041011 operations; 146847.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1395363, Max=51359, Min=487, Avg=2050.24, 90=2817, 99=4279, 99.9=10879, 99.99=48159] [UPDATE: Count=73293, Max=48415, Min=539, Avg=1868.99, 90=2495, 99=3401, 99.9=9191, 99.99=47519] 
2023-05-04 20:28:47:674 1270 sec: 187518846 operations; 147783.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1404087, Max=49727, Min=467, Avg=2037.35, 90=2815, 99=4247, 99.9=10167, 99.99=26447] [UPDATE: Count=73630, Max=28751, Min=494, Avg=1860.06, 90=2499, 99=3377, 99.9=8663, 99.99=22447] 
2023-05-04 20:28:57:674 1280 sec: 189001543 operations; 148269.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1408636, Max=34079, Min=513, Avg=2030.49, 90=2807, 99=4163, 99.9=9055, 99.99=19199] [UPDATE: Count=74062, Max=20895, Min=532, Avg=1849.05, 90=2479, 99=3303, 99.9=8519, 99.99=11071] 
2023-05-04 20:29:07:674 1290 sec: 190481694 operations; 148015.1 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1406617, Max=56511, Min=501, Avg=2033.92, 90=2799, 99=4243, 99.9=10495, 99.99=28639] [UPDATE: Count=73664, Max=26767, Min=500, Avg=1854.59, 90=2483, 99=3369, 99.9=9335, 99.99=20687] 
2023-05-04 20:29:17:674 1300 sec: 191963976 operations; 148228.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1408366, Max=54335, Min=468, Avg=2030.89, 90=2807, 99=4151, 99.9=9551, 99.99=27247] [UPDATE: Count=73864, Max=26927, Min=525, Avg=1856.25, 90=2495, 99=3335, 99.9=8951, 99.99=19807] 
2023-05-04 20:29:27:675 1310 sec: 193444698 operations; 148072.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1406928, Max=18399, Min=509, Avg=2033.02, 90=2813, 99=4275, 99.9=8903, 99.99=12031] [UPDATE: Count=73805, Max=16927, Min=544, Avg=1860.07, 90=2499, 99=3375, 99.9=8367, 99.99=10567] 
2023-05-04 20:29:37:674 1320 sec: 194923499 operations; 147880.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1405120, Max=54911, Min=468, Avg=2035.96, 90=2807, 99=4343, 99.9=9943, 99.99=28223] [UPDATE: Count=73463, Max=24783, Min=524, Avg=1858.14, 90=2489, 99=3427, 99.9=8735, 99.99=19343] 
2023-05-04 20:29:47:674 1330 sec: 196395514 operations; 147201.5 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1398166, Max=56031, Min=479, Avg=2045.59, 90=2807, 99=4379, 99.9=14663, 99.99=28255] [UPDATE: Count=74044, Max=35775, Min=523, Avg=1857.92, 90=2489, 99=3393, 99.9=9727, 99.99=21695] 
2023-05-04 20:29:57:674 1340 sec: 197878326 operations; 148281.2 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1408621, Max=20191, Min=507, Avg=2029.95, 90=2811, 99=4191, 99.9=8359, 99.99=10407] [UPDATE: Count=74146, Max=11807, Min=530, Avg=1859.58, 90=2495, 99=3383, 99.9=8191, 99.99=9703] 
2023-05-04 20:30:07:674 1350 sec: 199351143 operations; 147281.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1399767, Max=66175, Min=453, Avg=2044.05, 90=2811, 99=4239, 99.9=11535, 99.99=31279] [UPDATE: Count=73106, Max=26271, Min=497, Avg=1866.13, 90=2501, 99=3395, 99.9=9519, 99.99=16847] 
2023-05-04 20:30:17:674 1360 sec: 200831460 operations; 148031.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1407065, Max=54463, Min=509, Avg=2033.61, 90=2807, 99=4191, 99.9=10103, 99.99=27903] [UPDATE: Count=73030, Max=27231, Min=544, Avg=1858.13, 90=2495, 99=3367, 99.9=9143, 99.99=23055] 
2023-05-04 20:30:27:674 1370 sec: 202310203 operations; 147874.3 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1405005, Max=23327, Min=504, Avg=2035.63, 90=2815, 99=4179, 99.9=9687, 99.99=16447] [UPDATE: Count=73961, Max=20927, Min=521, Avg=1861.75, 90=2497, 99=3355, 99.9=9399, 99.99=12967] 
2023-05-04 20:30:37:674 1380 sec: 203790116 operations; 147991.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1406073, Max=57407, Min=482, Avg=2034.22, 90=2813, 99=4247, 99.9=9159, 99.99=27967] [UPDATE: Count=73744, Max=25903, Min=524, Avg=1858.25, 90=2497, 99=3375, 99.9=8495, 99.99=21871] 
2023-05-04 20:30:47:674 1390 sec: 205260130 operations; 147001.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1396876, Max=55359, Min=488, Avg=2048.41, 90=2823, 99=4431, 99.9=11815, 99.99=26959] [UPDATE: Count=73179, Max=52351, Min=521, Avg=1861.13, 90=2503, 99=3431, 99.9=8139, 99.99=25663] 
2023-05-04 20:30:57:674 1400 sec: 206744347 operations; 148421.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1409912, Max=12087, Min=512, Avg=2028.44, 90=2811, 99=4179, 99.9=8027, 99.99=9535] [UPDATE: Count=74145, Max=25631, Min=514, Avg=1852.63, 90=2485, 99=3331, 99.9=7847, 99.99=10807] 
2023-05-04 20:31:07:674 1410 sec: 208221508 operations; 147716.1 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1403311, Max=53247, Min=433, Avg=2038.15, 90=2805, 99=4243, 99.9=10815, 99.99=27647] [UPDATE: Count=74058, Max=25919, Min=508, Avg=1858.05, 90=2499, 99=3353, 99.9=9095, 99.99=17311] 
2023-05-04 20:31:17:674 1420 sec: 209698621 operations; 147711.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1403443, Max=53343, Min=477, Avg=2038.44, 90=2807, 99=4367, 99.9=10151, 99.99=27887] [UPDATE: Count=73549, Max=26767, Min=527, Avg=1853.31, 90=2487, 99=3343, 99.9=8903, 99.99=19791] 
2023-05-04 20:31:27:674 1430 sec: 211180667 operations; 148204.6 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1407897, Max=19247, Min=497, Avg=2031.25, 90=2807, 99=4139, 99.9=9519, 99.99=13535] [UPDATE: Count=74125, Max=16607, Min=520, Avg=1856.69, 90=2489, 99=3317, 99.9=9199, 99.99=13367] 
2023-05-04 20:31:37:674 1440 sec: 212654928 operations; 147426.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1400867, Max=50719, Min=487, Avg=2042.18, 90=2805, 99=4211, 99.9=10743, 99.99=41919] [UPDATE: Count=73505, Max=45215, Min=488, Avg=1862.23, 90=2495, 99=3353, 99.9=9775, 99.99=41407] 
2023-05-04 20:31:47:674 1450 sec: 214134537 operations; 147960.9 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1406124, Max=54111, Min=480, Avg=2035.04, 90=2809, 99=4171, 99.9=10407, 99.99=28447] [UPDATE: Count=73407, Max=26991, Min=525, Avg=1850.39, 90=2489, 99=3317, 99.9=8663, 99.99=16159] 
2023-05-04 20:31:57:674 1460 sec: 215620059 operations; 148552.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1411465, Max=13607, Min=532, Avg=2026.28, 90=2805, 99=4127, 99.9=8775, 99.99=10367] [UPDATE: Count=74022, Max=11415, Min=518, Avg=1855.65, 90=2487, 99=3379, 99.9=8863, 99.99=10279] 
2023-05-04 20:32:07:674 1470 sec: 217095552 operations; 147549.3 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1401519, Max=51199, Min=505, Avg=2040.57, 90=2813, 99=4347, 99.9=9407, 99.99=28111] [UPDATE: Count=74006, Max=26767, Min=511, Avg=1859.4, 90=2491, 99=3375, 99.9=8663, 99.99=21263] 
2023-05-04 20:32:17:674 1480 sec: 218574201 operations; 147864.9 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1404879, Max=55039, Min=477, Avg=2036.39, 90=2805, 99=4219, 99.9=12703, 99.99=27183] [UPDATE: Count=73876, Max=29023, Min=508, Avg=1851.7, 90=2493, 99=3339, 99.9=8139, 99.99=20735] 
2023-05-04 20:32:27:674 1490 sec: 220055396 operations; 148119.5 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1407141, Max=18671, Min=509, Avg=2032.39, 90=2809, 99=4231, 99.9=9287, 99.99=15343] [UPDATE: Count=73932, Max=16159, Min=526, Avg=1858.52, 90=2491, 99=3381, 99.9=8791, 99.99=15111] 
2023-05-04 20:32:37:674 1500 sec: 221534402 operations; 147900.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1405001, Max=59487, Min=469, Avg=2035.89, 90=2807, 99=4207, 99.9=9871, 99.99=33887] [UPDATE: Count=74005, Max=27279, Min=474, Avg=1851.96, 90=2489, 99=3361, 99.9=8607, 99.99=22047] 
2023-05-04 20:32:47:674 1510 sec: 223007867 operations; 147346.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1400010, Max=55423, Min=499, Avg=2043.5, 90=2827, 99=4315, 99.9=9663, 99.99=24959] [UPDATE: Count=73475, Max=25551, Min=499, Avg=1859.59, 90=2507, 99=3393, 99.9=8167, 99.99=18319] 
2023-05-04 20:32:57:674 1520 sec: 224489952 operations; 148208.5 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1407978, Max=18399, Min=512, Avg=2031.01, 90=2815, 99=4143, 99.9=8703, 99.99=11351] [UPDATE: Count=74043, Max=15855, Min=532, Avg=1859.6, 90=2493, 99=3321, 99.9=8671, 99.99=11655] 
2023-05-04 20:33:07:674 1530 sec: 225966440 operations; 147648.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1402506, Max=47359, Min=485, Avg=2039.31, 90=2819, 99=4271, 99.9=10311, 99.99=25951] [UPDATE: Count=74028, Max=27199, Min=486, Avg=1858.03, 90=2495, 99=3395, 99.9=9111, 99.99=21551] 
2023-05-04 20:33:17:674 1540 sec: 227443881 operations; 147744.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1403702, Max=50751, Min=479, Avg=2037.89, 90=2823, 99=4199, 99.9=9527, 99.99=27119] [UPDATE: Count=73730, Max=24175, Min=509, Avg=1854.21, 90=2495, 99=3315, 99.9=8999, 99.99=16399] 
2023-05-04 20:33:27:674 1550 sec: 228921884 operations; 147800.3 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1404341, Max=20879, Min=491, Avg=2036.94, 90=2813, 99=4139, 99.9=9895, 99.99=17407] [UPDATE: Count=73683, Max=17967, Min=556, Avg=1858.67, 90=2497, 99=3301, 99.9=9359, 99.99=16799] 
2023-05-04 20:33:37:674 1560 sec: 230401293 operations; 147940.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1405283, Max=49631, Min=496, Avg=2034.94, 90=2805, 99=4195, 99.9=9711, 99.99=29391] [UPDATE: Count=74058, Max=26223, Min=529, Avg=1859.63, 90=2493, 99=3363, 99.9=8967, 99.99=19759] 
2023-05-04 20:33:47:674 1570 sec: 231875333 operations; 147404 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1400044, Max=53055, Min=501, Avg=2042.45, 90=2815, 99=4303, 99.9=10279, 99.99=27231] [UPDATE: Count=74057, Max=25983, Min=511, Avg=1862.93, 90=2503, 99=3379, 99.9=8903, 99.99=18719] 
2023-05-04 20:33:57:674 1580 sec: 233357366 operations; 148203.3 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1407893, Max=18031, Min=517, Avg=2031.29, 90=2809, 99=4179, 99.9=8927, 99.99=14895] [UPDATE: Count=74120, Max=16047, Min=522, Avg=1856.81, 90=2491, 99=3327, 99.9=8487, 99.99=14495] 
2023-05-04 20:34:07:674 1590 sec: 234835158 operations; 147779.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1403954, Max=59007, Min=481, Avg=2037.4, 90=2809, 99=4239, 99.9=10103, 99.99=32415] [UPDATE: Count=73891, Max=26703, Min=489, Avg=1856.43, 90=2487, 99=3353, 99.9=8511, 99.99=22527] 
2023-05-04 20:34:17:674 1600 sec: 236312890 operations; 147773.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1404209, Max=55039, Min=503, Avg=2037.4, 90=2809, 99=4235, 99.9=10671, 99.99=27823] [UPDATE: Count=73519, Max=22959, Min=516, Avg=1857.65, 90=2501, 99=3357, 99.9=9359, 99.99=16671] 
2023-05-04 20:34:27:674 1610 sec: 237792040 operations; 147915 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1404956, Max=57215, Min=484, Avg=2034.88, 90=2805, 99=4099, 99.9=9023, 99.99=54175] [UPDATE: Count=73990, Max=55295, Min=508, Avg=1870.45, 90=2499, 99=3361, 99.9=8775, 99.99=54175] 
2023-05-04 20:34:37:674 1620 sec: 239267204 operations; 147516.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1401555, Max=61503, Min=495, Avg=2041, 90=2803, 99=4259, 99.9=10391, 99.99=34239] [UPDATE: Count=73791, Max=39615, Min=531, Avg=1854.78, 90=2483, 99=3323, 99.9=8895, 99.99=23567] 
2023-05-04 20:34:47:674 1630 sec: 240738830 operations; 147162.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1398174, Max=55039, Min=500, Avg=2046.14, 90=2827, 99=4351, 99.9=11351, 99.99=28223] [UPDATE: Count=73264, Max=34879, Min=507, Avg=1865.2, 90=2511, 99=3411, 99.9=9055, 99.99=23327] 
2023-05-04 20:34:57:674 1640 sec: 242211941 operations; 147311.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1399536, Max=37471, Min=508, Avg=2043.39, 90=2825, 99=4219, 99.9=9551, 99.99=28111] [UPDATE: Count=73739, Max=29135, Min=509, Avg=1867.53, 90=2511, 99=3389, 99.9=8831, 99.99=27711] 
2023-05-04 20:35:07:675 1650 sec: 243691386 operations; 147944.5 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1405405, Max=52191, Min=489, Avg=2035.01, 90=2807, 99=4131, 99.9=13367, 99.99=25727] [UPDATE: Count=74164, Max=26751, Min=502, Avg=1853.77, 90=2497, 99=3313, 99.9=8599, 99.99=21407] 
2023-05-04 20:35:17:674 1660 sec: 245175057 operations; 148367.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1409339, Max=56831, Min=484, Avg=2029.65, 90=2795, 99=4135, 99.9=12015, 99.99=28159] [UPDATE: Count=74402, Max=24735, Min=525, Avg=1842.43, 90=2479, 99=3289, 99.9=9543, 99.99=18415] 
2023-05-04 20:35:27:674 1670 sec: 246654398 operations; 147934.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1405295, Max=21071, Min=515, Avg=2034.97, 90=2819, 99=4175, 99.9=9311, 99.99=16687] [UPDATE: Count=73859, Max=17983, Min=505, Avg=1860.29, 90=2497, 99=3345, 99.9=8847, 99.99=16623] 
2023-05-04 20:35:37:674 1680 sec: 248131214 operations; 147681.6 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1403000, Max=60671, Min=492, Avg=2038.87, 90=2805, 99=4239, 99.9=10375, 99.99=28479] [UPDATE: Count=73840, Max=25791, Min=475, Avg=1855.37, 90=2485, 99=3391, 99.9=9135, 99.99=24991] 
2023-05-04 20:35:47:674 1690 sec: 249609229 operations; 147801.5 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1404192, Max=54495, Min=489, Avg=2037.59, 90=2805, 99=4239, 99.9=12495, 99.99=28351] [UPDATE: Count=73838, Max=25487, Min=501, Avg=1847.07, 90=2487, 99=3347, 99.9=9079, 99.99=20303] 
2023-05-04 20:35:57:674 1700 sec: 251093415 operations; 148418.6 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1410479, Max=14999, Min=487, Avg=2028.13, 90=2811, 99=4131, 99.9=8903, 99.99=11015] [UPDATE: Count=73657, Max=19103, Min=520, Avg=1856.54, 90=2491, 99=3329, 99.9=8911, 99.99=10567] 
2023-05-04 20:36:07:674 1710 sec: 252572904 operations; 147948.9 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1405439, Max=50335, Min=491, Avg=2035.11, 90=2809, 99=4203, 99.9=9359, 99.99=27775] [UPDATE: Count=74083, Max=25279, Min=504, Avg=1853.34, 90=2491, 99=3325, 99.9=8775, 99.99=16639] 
2023-05-04 20:36:17:674 1720 sec: 254050277 operations; 147737.3 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1403541, Max=37375, Min=485, Avg=2037.76, 90=2813, 99=4243, 99.9=10575, 99.99=24511] [UPDATE: Count=73948, Max=24799, Min=470, Avg=1861.7, 90=2501, 99=3367, 99.9=9191, 99.99=16895] 
2023-05-04 20:36:27:674 1730 sec: 255531726 operations; 148144.9 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1407133, Max=19935, Min=515, Avg=2031.99, 90=2817, 99=4171, 99.9=8703, 99.99=11903] [UPDATE: Count=74221, Max=15631, Min=519, Avg=1859.39, 90=2503, 99=3331, 99.9=8535, 99.99=10527] 
2023-05-04 20:36:37:674 1740 sec: 257007384 operations; 147565.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1402182, Max=58015, Min=492, Avg=2040.05, 90=2813, 99=4275, 99.9=10095, 99.99=31583] [UPDATE: Count=73484, Max=38655, Min=469, Avg=1862.63, 90=2499, 99=3407, 99.9=8935, 99.99=26959] 
2023-05-04 20:36:47:674 1750 sec: 258477002 operations; 146961.8 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1396245, Max=58815, Min=489, Avg=2049.22, 90=2821, 99=4307, 99.9=14263, 99.99=29439] [UPDATE: Count=73387, Max=30687, Min=524, Avg=1857.13, 90=2499, 99=3373, 99.9=9463, 99.99=28623] 
2023-05-04 20:36:57:674 1760 sec: 259956003 operations; 147900.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1405293, Max=31071, Min=513, Avg=2035.21, 90=2821, 99=4175, 99.9=8951, 99.99=28655] [UPDATE: Count=73628, Max=29583, Min=515, Avg=1863.82, 90=2497, 99=3367, 99.9=8783, 99.99=28559] 
2023-05-04 20:37:07:674 1770 sec: 261431896 operations; 147589.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1402256, Max=57407, Min=487, Avg=2039.83, 90=2827, 99=4291, 99.9=9687, 99.99=29583] [UPDATE: Count=73748, Max=24447, Min=549, Avg=1862.66, 90=2511, 99=3389, 99.9=8823, 99.99=19359] 
2023-05-04 20:37:17:674 1780 sec: 262901309 operations; 146941.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1395912, Max=51423, Min=504, Avg=2049.36, 90=2831, 99=4543, 99.9=9839, 99.99=27007] [UPDATE: Count=73411, Max=24127, Min=547, Avg=1860.23, 90=2509, 99=3399, 99.9=8799, 99.99=16703] 
2023-05-04 20:37:27:674 1790 sec: 264384812 operations; 148350.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1409295, Max=20159, Min=505, Avg=2029.13, 90=2819, 99=4163, 99.9=8599, 99.99=11271] [UPDATE: Count=74209, Max=15911, Min=516, Avg=1858.33, 90=2501, 99=3327, 99.9=8311, 99.99=11879] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 20:37:37:674 1800 sec: 265887861 operations; 150304.9 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1427707, Max=61695, Min=483, Avg=2003.24, 90=2777, 99=4299, 99.9=12383, 99.99=34111] [UPDATE: Count=75331, Max=24863, Min=492, Avg=1822.55, 90=2471, 99=3377, 99.9=9167, 99.99=18175] 
Still waiting for thread Thread-149 to complete. Workload status: true
2023-05-04 20:37:39:932 1802 sec: 265892632 operations; 2112.93 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=4507, Max=5491, Min=557, Avg=1701.61, 90=2461, 99=3757, 99.9=4927, 99.99=5491] [CLEANUP: Count=300, Max=2224127, Min=0, Avg=7411.67, 90=2, 99=13, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802257
[OVERALL], Throughput(ops/sec), 147533.13872549808
[TOTAL_GCS_PS_Scavenge], Count, 3941
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18369
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0192220088477948
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 146
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008100953415633843
[TOTAL_GCs], Count, 3944
[TOTAL_GC_TIME], Time(ms), 18515
[TOTAL_GC_TIME_%], Time(%), 1.0273229622634286
[READ], Operations, 252605925
[READ], AverageLatency(us), 2037.3190244448938
[READ], MinLatency(us), 433
[READ], MaxLatency(us), 130623
[READ], 95thPercentileLatency(us), 3145
[READ], 99thPercentileLatency(us), 4243
[READ], Return=OK, 252605925
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7411.67
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 13
[UPDATE], Operations, 13286707
[UPDATE], AverageLatency(us), 1858.1869016152762
[UPDATE], MinLatency(us), 469
[UPDATE], MaxLatency(us), 133375
[UPDATE], 95thPercentileLatency(us), 2731
[UPDATE], 99thPercentileLatency(us), 3361
[UPDATE], Return=OK, 13286707
