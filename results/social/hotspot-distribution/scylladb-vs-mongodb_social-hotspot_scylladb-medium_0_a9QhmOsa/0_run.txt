bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram  -p hdrhistogram.fileoutput=true  -p hdrhistogram.output.path=/home/developer/results/ 
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=35.80.102.45,52.42.225.54,52.41.60.106 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=AH9zrN0p3Eutoxv -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 300 -p recordcount=1000000000 -p operationcount=999900000 -target 150000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=hotspot -p hotspotdatafraction=0.013 -p hotspotopnfraction=0.95 -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -p measurementtype=hdrhistogram -p hdrhistogram.fileoutput=true -p hdrhistogram.output.path=/home/developer/results/ -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-9] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-9] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-05-04 20:07:36:358 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-9] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-9] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-9] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.42.225.54:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.41.60.106:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.188.164.221:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /35.80.102.45:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.13.155.228:9042 added
[Thread-9] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.229.236.137:9042 added
[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 638c151f-15f6-4914-a385-dddfb9970225

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.42.225.54; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.188.164.221; Rack: us-west-2a

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.41.60.106; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.13.155.228; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.229.236.137; Rack: us-west-2b

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /35.80.102.45; Rack: us-west-2c

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-9] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
2023-05-04 20:07:46:340 10 sec: 1139826 operations; 113982.6 current ops/sec; est completion in 2 hours 26 minutes [READ: Count=1082817, Max=207999, Min=513, Avg=2449.33, 90=3243, 99=14063, 99.9=40223, 99.99=130751] [UPDATE: Count=57569, Max=171391, Min=509, Avg=2276.89, 90=2883, 99=13439, 99.9=39455, 99.99=127167] 
2023-05-04 20:07:56:340 20 sec: 2609465 operations; 146963.9 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=1396227, Max=23599, Min=533, Avg=2047.85, 90=2835, 99=4055, 99.9=9631, 99.99=21567] [UPDATE: Count=73218, Max=22623, Min=559, Avg=1869.98, 90=2517, 99=3289, 99.9=7499, 99.99=21535] 
2023-05-04 20:08:06:340 30 sec: 4065520 operations; 145605.5 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1383434, Max=52639, Min=517, Avg=2067.91, 90=2845, 99=4471, 99.9=11823, 99.99=27599] [UPDATE: Count=72667, Max=26735, Min=517, Avg=1875.84, 90=2519, 99=3369, 99.9=10183, 99.99=19679] 
2023-05-04 20:08:16:340 40 sec: 5525758 operations; 146023.8 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1387601, Max=61055, Min=498, Avg=2061.84, 90=2827, 99=4279, 99.9=11127, 99.99=34239] [UPDATE: Count=72582, Max=27599, Min=516, Avg=1876.01, 90=2513, 99=3359, 99.9=9063, 99.99=25839] 
2023-05-04 20:08:26:340 50 sec: 7003040 operations; 147728.2 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1403641, Max=18351, Min=533, Avg=2037.44, 90=2821, 99=4043, 99.9=9503, 99.99=12727] [UPDATE: Count=73761, Max=16287, Min=544, Avg=1866.2, 90=2509, 99=3301, 99.9=8919, 99.99=12031] 
2023-05-04 20:08:36:341 60 sec: 8469816 operations; 146677.6 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1393273, Max=66111, Min=501, Avg=2052.34, 90=2821, 99=4191, 99.9=10607, 99.99=33855] [UPDATE: Count=73485, Max=26671, Min=518, Avg=1876.16, 90=2511, 99=3373, 99.9=9663, 99.99=16543] 
2023-05-04 20:08:46:340 70 sec: 9925824 operations; 145600.8 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=1383483, Max=50559, Min=511, Avg=2067.64, 90=2847, 99=4319, 99.9=11919, 99.99=26991] [UPDATE: Count=72446, Max=26559, Min=536, Avg=1884.91, 90=2527, 99=3439, 99.9=10383, 99.99=24559] 
2023-05-04 20:08:56:341 80 sec: 11396833 operations; 147100.9 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1397405, Max=20351, Min=522, Avg=2046.12, 90=2833, 99=4115, 99.9=9295, 99.99=17519] [UPDATE: Count=73775, Max=19167, Min=534, Avg=1875.97, 90=2521, 99=3383, 99.9=9159, 99.99=17439] 
2023-05-04 20:09:06:341 90 sec: 12859841 operations; 146300.8 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1389803, Max=55679, Min=517, Avg=2057.91, 90=2837, 99=4279, 99.9=9623, 99.99=26671] [UPDATE: Count=73206, Max=24111, Min=512, Avg=1874.5, 90=2509, 99=3369, 99.9=8975, 99.99=15623] 
2023-05-04 20:09:16:340 100 sec: 14324511 operations; 146467 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1391276, Max=41663, Min=519, Avg=2055.68, 90=2835, 99=4263, 99.9=11287, 99.99=26223] [UPDATE: Count=73201, Max=25919, Min=537, Avg=1871.07, 90=2519, 99=3351, 99.9=8575, 99.99=17487] 
2023-05-04 20:09:26:340 110 sec: 15789454 operations; 146494.3 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1391802, Max=20111, Min=539, Avg=2054.69, 90=2843, 99=4231, 99.9=9511, 99.99=15703] [UPDATE: Count=73138, Max=16687, Min=520, Avg=1881.05, 90=2521, 99=3399, 99.9=9415, 99.99=15735] 
2023-05-04 20:09:36:340 120 sec: 17254417 operations; 146496.3 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1391499, Max=51071, Min=508, Avg=2055.39, 90=2833, 99=4231, 99.9=10191, 99.99=26767] [UPDATE: Count=73488, Max=26287, Min=534, Avg=1868.51, 90=2511, 99=3355, 99.9=8919, 99.99=20991] 
2023-05-04 20:09:46:340 130 sec: 18718810 operations; 146439.3 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1391059, Max=51199, Min=475, Avg=2055.65, 90=2833, 99=4259, 99.9=9927, 99.99=26623] [UPDATE: Count=73305, Max=27407, Min=538, Avg=1878.41, 90=2513, 99=3411, 99.9=8871, 99.99=24207] 
2023-05-04 20:09:56:340 140 sec: 20192815 operations; 147400.5 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1399888, Max=20783, Min=530, Avg=2041.84, 90=2821, 99=4065, 99.9=9807, 99.99=17327] [UPDATE: Count=74123, Max=19039, Min=541, Avg=1874.82, 90=2511, 99=3371, 99.9=9647, 99.99=16751] 
2023-05-04 20:10:06:341 150 sec: 21653668 operations; 146085.3 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1387956, Max=66239, Min=496, Avg=2060.8, 90=2837, 99=4351, 99.9=9735, 99.99=39327] [UPDATE: Count=73178, Max=23983, Min=551, Avg=1880.92, 90=2515, 99=3439, 99.9=8999, 99.99=16191] 
2023-05-04 20:10:16:340 160 sec: 23114800 operations; 146113.2 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1387836, Max=54527, Min=507, Avg=2060.34, 90=2829, 99=4183, 99.9=14007, 99.99=29871] [UPDATE: Count=73019, Max=32959, Min=508, Avg=1879.75, 90=2519, 99=3345, 99.9=11207, 99.99=23119] 
2023-05-04 20:10:26:341 170 sec: 24586258 operations; 147145.8 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1397584, Max=18879, Min=534, Avg=2045.65, 90=2831, 99=4107, 99.9=9175, 99.99=14815] [UPDATE: Count=73875, Max=17791, Min=513, Avg=1874.2, 90=2515, 99=3335, 99.9=8959, 99.99=14623] 
2023-05-04 20:10:36:340 180 sec: 26053172 operations; 146691.4 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1394110, Max=58399, Min=513, Avg=2052.03, 90=2827, 99=4247, 99.9=9391, 99.99=28831] [UPDATE: Count=72904, Max=25279, Min=490, Avg=1876.2, 90=2515, 99=3373, 99.9=8615, 99.99=20255] 
2023-05-04 20:10:46:340 190 sec: 27517465 operations; 146429.3 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1391202, Max=51423, Min=510, Avg=2055.71, 90=2837, 99=4151, 99.9=10351, 99.99=27023] [UPDATE: Count=73096, Max=24399, Min=560, Avg=1879.64, 90=2521, 99=3337, 99.9=9919, 99.99=18735] 
2023-05-04 20:10:56:340 200 sec: 28986717 operations; 146925.2 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1396047, Max=16279, Min=528, Avg=2048.46, 90=2833, 99=4199, 99.9=9111, 99.99=11511] [UPDATE: Count=73042, Max=13911, Min=551, Avg=1878.91, 90=2519, 99=3379, 99.9=8927, 99.99=10871] 
2023-05-04 20:11:06:341 210 sec: 30452012 operations; 146529.5 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1392094, Max=51999, Min=507, Avg=2054.7, 90=2833, 99=4295, 99.9=10127, 99.99=28911] [UPDATE: Count=73312, Max=29551, Min=525, Avg=1871.87, 90=2521, 99=3441, 99.9=8663, 99.99=16607] 
2023-05-04 20:11:16:340 220 sec: 31913286 operations; 146127.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1388223, Max=64095, Min=492, Avg=2060.69, 90=2833, 99=4335, 99.9=11863, 99.99=34335] [UPDATE: Count=73075, Max=28495, Min=528, Avg=1869.79, 90=2511, 99=3345, 99.9=9839, 99.99=14879] 
2023-05-04 20:11:26:340 230 sec: 33381952 operations; 146866.6 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1394949, Max=17999, Min=526, Avg=2049.32, 90=2835, 99=4151, 99.9=9855, 99.99=12503] [UPDATE: Count=73719, Max=17583, Min=537, Avg=1881.28, 90=2519, 99=3389, 99.9=9751, 99.99=15127] 
2023-05-04 20:11:36:340 240 sec: 34849817 operations; 146786.5 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1394427, Max=54207, Min=516, Avg=2051.38, 90=2821, 99=4183, 99.9=11895, 99.99=29855] [UPDATE: Count=73358, Max=26671, Min=534, Avg=1863.42, 90=2509, 99=3333, 99.9=8951, 99.99=16399] 
2023-05-04 20:11:46:340 250 sec: 36314121 operations; 146430.4 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1391027, Max=50591, Min=514, Avg=2055.53, 90=2837, 99=4251, 99.9=9543, 99.99=27391] [UPDATE: Count=73216, Max=26895, Min=547, Avg=1883.95, 90=2519, 99=3437, 99.9=9247, 99.99=20383] 
2023-05-04 20:11:56:340 260 sec: 37786154 operations; 147203.3 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1398096, Max=23311, Min=537, Avg=2044.5, 90=2825, 99=4143, 99.9=8871, 99.99=12583] [UPDATE: Count=73885, Max=18479, Min=561, Avg=1877.63, 90=2519, 99=3395, 99.9=8607, 99.99=12087] 
2023-05-04 20:12:06:340 270 sec: 39248574 operations; 146242 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1389763, Max=60223, Min=511, Avg=2058.55, 90=2833, 99=4363, 99.9=9799, 99.99=29711] [UPDATE: Count=72726, Max=25183, Min=529, Avg=1877.47, 90=2517, 99=3403, 99.9=8719, 99.99=16703] 
2023-05-04 20:12:16:340 280 sec: 40713309 operations; 146473.5 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1391627, Max=55615, Min=507, Avg=2055.53, 90=2831, 99=4279, 99.9=10551, 99.99=28031] [UPDATE: Count=73280, Max=26255, Min=533, Avg=1871.83, 90=2515, 99=3385, 99.9=8623, 99.99=18047] 
2023-05-04 20:12:26:340 290 sec: 42183661 operations; 147035.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1396664, Max=17071, Min=516, Avg=2047.16, 90=2827, 99=4111, 99.9=9575, 99.99=12223] [UPDATE: Count=73489, Max=13727, Min=575, Avg=1873.63, 90=2513, 99=3325, 99.9=9255, 99.99=11247] 
2023-05-04 20:12:36:340 300 sec: 43647063 operations; 146340.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1390341, Max=58687, Min=510, Avg=2057.22, 90=2829, 99=4179, 99.9=11319, 99.99=29743] [UPDATE: Count=73192, Max=27199, Min=542, Avg=1875.62, 90=2511, 99=3355, 99.9=9703, 99.99=18959] 
2023-05-04 20:12:46:341 310 sec: 45109205 operations; 146214.2 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1388532, Max=54239, Min=506, Avg=2059.31, 90=2841, 99=4211, 99.9=11367, 99.99=26431] [UPDATE: Count=73767, Max=38527, Min=539, Avg=1876.42, 90=2523, 99=3395, 99.9=9879, 99.99=19135] 
2023-05-04 20:12:56:340 320 sec: 46581835 operations; 147263 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1399281, Max=15575, Min=542, Avg=2043.85, 90=2829, 99=4131, 99.9=8799, 99.99=10527] [UPDATE: Count=73040, Max=11495, Min=559, Avg=1870.97, 90=2511, 99=3359, 99.9=8431, 99.99=10199] 
2023-05-04 20:13:06:340 330 sec: 48044450 operations; 146261.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1389269, Max=55263, Min=513, Avg=2058.5, 90=2839, 99=4319, 99.9=10567, 99.99=28799] [UPDATE: Count=73449, Max=26543, Min=531, Avg=1875.19, 90=2517, 99=3415, 99.9=8887, 99.99=19359] 
2023-05-04 20:13:16:340 340 sec: 49511045 operations; 146659.5 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1393098, Max=58079, Min=519, Avg=2052.55, 90=2827, 99=4179, 99.9=10031, 99.99=27807] [UPDATE: Count=73581, Max=26943, Min=511, Avg=1877.16, 90=2509, 99=3349, 99.9=9423, 99.99=22783] 
2023-05-04 20:13:26:340 350 sec: 50982569 operations; 147152.4 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1398022, Max=18095, Min=509, Avg=2045.29, 90=2829, 99=4111, 99.9=9039, 99.99=11751] [UPDATE: Count=73330, Max=18335, Min=548, Avg=1876.59, 90=2517, 99=3329, 99.9=9015, 99.99=13799] 
2023-05-04 20:13:36:340 360 sec: 52440820 operations; 145825.1 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1385456, Max=56159, Min=496, Avg=2064.53, 90=2835, 99=4307, 99.9=12695, 99.99=25759] [UPDATE: Count=72843, Max=24799, Min=548, Avg=1882.02, 90=2523, 99=3373, 99.9=9407, 99.99=19055] 
2023-05-04 20:13:46:340 370 sec: 53905606 operations; 146478.6 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1391500, Max=56607, Min=506, Avg=2055.19, 90=2829, 99=4211, 99.9=10239, 99.99=29887] [UPDATE: Count=73502, Max=35359, Min=499, Avg=1876.29, 90=2515, 99=3429, 99.9=8903, 99.99=21487] 
2023-05-04 20:13:56:340 380 sec: 55376486 operations; 147088 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1397502, Max=24623, Min=535, Avg=2046.13, 90=2827, 99=4127, 99.9=9455, 99.99=14951] [UPDATE: Count=73136, Max=19823, Min=528, Avg=1877.52, 90=2511, 99=3365, 99.9=9655, 99.99=14855] 
2023-05-04 20:14:06:340 390 sec: 56834753 operations; 145826.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1385256, Max=39583, Min=517, Avg=2064.96, 90=2831, 99=4319, 99.9=13727, 99.99=26431] [UPDATE: Count=73020, Max=26559, Min=501, Avg=1874.14, 90=2507, 99=3373, 99.9=10119, 99.99=24767] 
2023-05-04 20:14:16:341 400 sec: 58303711 operations; 146895.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1395667, Max=49023, Min=525, Avg=2049.14, 90=2821, 99=4143, 99.9=10087, 99.99=25087] [UPDATE: Count=73083, Max=39007, Min=553, Avg=1879.3, 90=2509, 99=3397, 99.9=9623, 99.99=24415] 
2023-05-04 20:14:26:340 410 sec: 59768091 operations; 146438 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1390480, Max=39519, Min=512, Avg=2055.68, 90=2833, 99=4223, 99.9=9759, 99.99=25615] [UPDATE: Count=74255, Max=30879, Min=563, Avg=1874.49, 90=2511, 99=3373, 99.9=8935, 99.99=15735] 
2023-05-04 20:14:36:340 420 sec: 61223369 operations; 145527.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1382623, Max=64639, Min=524, Avg=2068.79, 90=2831, 99=4315, 99.9=11863, 99.99=29263] [UPDATE: Count=72629, Max=29247, Min=544, Avg=1886.67, 90=2507, 99=3387, 99.9=10471, 99.99=27599] 
2023-05-04 20:14:46:340 430 sec: 62684726 operations; 146135.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1388326, Max=55711, Min=498, Avg=2060.37, 90=2845, 99=4223, 99.9=11543, 99.99=30031] [UPDATE: Count=73067, Max=27167, Min=542, Avg=1873.45, 90=2529, 99=3415, 99.9=9727, 99.99=13167] 
2023-05-04 20:14:56:340 440 sec: 64142153 operations; 145742.7 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1383990, Max=24031, Min=535, Avg=2065.84, 90=2871, 99=4331, 99.9=9503, 99.99=21279] [UPDATE: Count=73266, Max=21599, Min=544, Avg=1882.25, 90=2543, 99=3433, 99.9=8711, 99.99=20479] 
2023-05-04 20:15:06:340 450 sec: 65601291 operations; 145913.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1386454, Max=53183, Min=507, Avg=2063.54, 90=2845, 99=4327, 99.9=11583, 99.99=28479] [UPDATE: Count=72800, Max=26623, Min=503, Avg=1875.37, 90=2523, 99=3407, 99.9=9303, 99.99=19071] 
2023-05-04 20:15:16:340 460 sec: 67064569 operations; 146327.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1389872, Max=60383, Min=505, Avg=2057.45, 90=2837, 99=4259, 99.9=10207, 99.99=32591] [UPDATE: Count=73410, Max=25663, Min=503, Avg=1876.63, 90=2523, 99=3419, 99.9=8919, 99.99=15647] 
2023-05-04 20:15:26:340 470 sec: 68528267 operations; 146369.8 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1390360, Max=19295, Min=497, Avg=2056.4, 90=2843, 99=4155, 99.9=10319, 99.99=17135] [UPDATE: Count=73244, Max=18687, Min=539, Avg=1884.18, 90=2535, 99=3357, 99.9=10151, 99.99=17199] 
2023-05-04 20:15:36:340 480 sec: 69991082 operations; 146281.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1389742, Max=60127, Min=504, Avg=2058.31, 90=2829, 99=4167, 99.9=10647, 99.99=32351] [UPDATE: Count=73097, Max=23663, Min=552, Avg=1871.88, 90=2513, 99=3303, 99.9=9495, 99.99=16071] 
2023-05-04 20:15:46:340 490 sec: 71449906 operations; 145882.4 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1385853, Max=63903, Min=511, Avg=2063.71, 90=2829, 99=4267, 99.9=12903, 99.99=33535] [UPDATE: Count=72999, Max=31183, Min=504, Avg=1882.06, 90=2509, 99=3415, 99.9=9967, 99.99=24527] 
2023-05-04 20:15:56:340 500 sec: 72920972 operations; 147106.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1397157, Max=12903, Min=519, Avg=2046.05, 90=2835, 99=4123, 99.9=8575, 99.99=10479] [UPDATE: Count=73861, Max=10839, Min=596, Avg=1875.82, 90=2519, 99=3375, 99.9=8599, 99.99=10599] 
2023-05-04 20:16:06:340 510 sec: 74379902 operations; 145893 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1386313, Max=61535, Min=505, Avg=2063.62, 90=2843, 99=4399, 99.9=11631, 99.99=33471] [UPDATE: Count=72382, Max=33535, Min=491, Avg=1882.45, 90=2517, 99=3465, 99.9=9911, 99.99=22831] 
2023-05-04 20:16:16:340 520 sec: 75833128 operations; 145322.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1380499, Max=63391, Min=501, Avg=2072.42, 90=2831, 99=4747, 99.9=14903, 99.99=32255] [UPDATE: Count=73093, Max=35007, Min=556, Avg=1871.54, 90=2511, 99=3435, 99.9=10303, 99.99=23759] 
2023-05-04 20:16:26:340 530 sec: 77295399 operations; 146227.1 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1388848, Max=43519, Min=532, Avg=2058.54, 90=2839, 99=4271, 99.9=9287, 99.99=41087] [UPDATE: Count=73324, Max=41535, Min=532, Avg=1883.75, 90=2513, 99=3397, 99.9=9183, 99.99=40895] 
2023-05-04 20:16:36:340 540 sec: 78756332 operations; 146093.3 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1387781, Max=78335, Min=521, Avg=2060.7, 90=2819, 99=4235, 99.9=15367, 99.99=27983] [UPDATE: Count=73091, Max=28767, Min=549, Avg=1878.78, 90=2511, 99=3395, 99.9=9671, 99.99=26447] 
2023-05-04 20:16:46:340 550 sec: 80222047 operations; 146571.5 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1392632, Max=53727, Min=510, Avg=2053.6, 90=2831, 99=4203, 99.9=9823, 99.99=27519] [UPDATE: Count=73110, Max=26719, Min=497, Avg=1881.2, 90=2519, 99=3447, 99.9=9079, 99.99=18543] 
2023-05-04 20:16:56:340 560 sec: 81694649 operations; 147260.2 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1398909, Max=14103, Min=536, Avg=2044.06, 90=2821, 99=4059, 99.9=9879, 99.99=11775] [UPDATE: Count=73764, Max=13063, Min=539, Avg=1872.55, 90=2505, 99=3307, 99.9=9799, 99.99=11327] 
2023-05-04 20:17:06:340 570 sec: 83156506 operations; 146185.7 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1388318, Max=55327, Min=507, Avg=2059.35, 90=2827, 99=4251, 99.9=12407, 99.99=26447] [UPDATE: Count=73476, Max=37439, Min=579, Avg=1879.54, 90=2509, 99=3397, 99.9=10031, 99.99=25039] 
2023-05-04 20:17:16:340 580 sec: 84622392 operations; 146588.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1392385, Max=55647, Min=514, Avg=2053.52, 90=2825, 99=4199, 99.9=11111, 99.99=27487] [UPDATE: Count=73498, Max=23983, Min=557, Avg=1877.96, 90=2515, 99=3339, 99.9=9687, 99.99=18959] 
2023-05-04 20:17:26:340 590 sec: 86078798 operations; 145640.6 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1383840, Max=58015, Min=551, Avg=2066.65, 90=2833, 99=4231, 99.9=9895, 99.99=54623] [UPDATE: Count=72526, Max=55167, Min=570, Avg=1894.02, 90=2517, 99=3391, 99.9=9471, 99.99=54431] 
2023-05-04 20:17:36:340 600 sec: 87542263 operations; 146346.5 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1390184, Max=54175, Min=492, Avg=2057.35, 90=2837, 99=4235, 99.9=10607, 99.99=26191] [UPDATE: Count=73284, Max=26815, Min=524, Avg=1872.31, 90=2509, 99=3339, 99.9=8599, 99.99=17439] 
2023-05-04 20:17:46:341 610 sec: 88999244 operations; 145698.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1384256, Max=58207, Min=522, Avg=2066.72, 90=2847, 99=4295, 99.9=12031, 99.99=28847] [UPDATE: Count=72869, Max=26015, Min=509, Avg=1877.37, 90=2519, 99=3377, 99.9=10167, 99.99=17855] 
2023-05-04 20:17:56:340 620 sec: 90467865 operations; 146862.1 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1395305, Max=15695, Min=546, Avg=2049.57, 90=2839, 99=4135, 99.9=9143, 99.99=12847] [UPDATE: Count=73139, Max=14111, Min=541, Avg=1875.84, 90=2521, 99=3353, 99.9=9031, 99.99=12895] 
2023-05-04 20:18:06:340 630 sec: 91921400 operations; 145353.5 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1380643, Max=55231, Min=506, Avg=2071.5, 90=2851, 99=4399, 99.9=12743, 99.99=28015] [UPDATE: Count=72948, Max=51327, Min=521, Avg=1885.06, 90=2523, 99=3409, 99.9=9639, 99.99=24063] 
2023-05-04 20:18:16:340 640 sec: 93381585 operations; 146018.5 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1387207, Max=62399, Min=511, Avg=2062.07, 90=2843, 99=4379, 99.9=11487, 99.99=26943] [UPDATE: Count=72962, Max=23423, Min=520, Avg=1875.75, 90=2519, 99=3389, 99.9=9159, 99.99=17791] 
2023-05-04 20:18:26:340 650 sec: 94849503 operations; 146791.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1394245, Max=20015, Min=506, Avg=2050.45, 90=2829, 99=4179, 99.9=9623, 99.99=16431] [UPDATE: Count=73637, Max=17791, Min=555, Avg=1878.03, 90=2509, 99=3361, 99.9=9383, 99.99=16703] 
2023-05-04 20:18:36:340 660 sec: 96311251 operations; 146174.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1388766, Max=50111, Min=512, Avg=2059.63, 90=2821, 99=4291, 99.9=13343, 99.99=30255] [UPDATE: Count=73050, Max=34207, Min=559, Avg=1878.28, 90=2511, 99=3397, 99.9=9471, 99.99=24879] 
2023-05-04 20:18:46:340 670 sec: 97769008 operations; 145775.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1384860, Max=59295, Min=506, Avg=2065.36, 90=2841, 99=4319, 99.9=13767, 99.99=28847] [UPDATE: Count=72975, Max=26591, Min=507, Avg=1879.35, 90=2523, 99=3395, 99.9=9711, 99.99=25231] 
2023-05-04 20:18:56:340 680 sec: 99239443 operations; 147043.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1397020, Max=12935, Min=530, Avg=2046.99, 90=2839, 99=4127, 99.9=8991, 99.99=10479] [UPDATE: Count=73256, Max=16863, Min=541, Avg=1875.85, 90=2529, 99=3365, 99.9=8895, 99.99=10023] 
2023-05-04 20:19:06:340 690 sec: 100701135 operations; 146169.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1388732, Max=53631, Min=524, Avg=2059.76, 90=2839, 99=4271, 99.9=12463, 99.99=29183] [UPDATE: Count=72988, Max=27215, Min=558, Avg=1875.84, 90=2523, 99=3381, 99.9=10047, 99.99=15391] 
2023-05-04 20:19:16:340 700 sec: 102166245 operations; 146511 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1392156, Max=51487, Min=525, Avg=2055.05, 90=2829, 99=4215, 99.9=11055, 99.99=29167] [UPDATE: Count=72992, Max=34783, Min=497, Avg=1870.28, 90=2513, 99=3367, 99.9=9199, 99.99=17855] 
2023-05-04 20:19:26:340 710 sec: 103632277 operations; 146603.2 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1392440, Max=20735, Min=519, Avg=2053.3, 90=2835, 99=4183, 99.9=9495, 99.99=17215] [UPDATE: Count=73449, Max=17855, Min=563, Avg=1878.59, 90=2513, 99=3411, 99.9=9175, 99.99=16207] 
2023-05-04 20:19:36:340 720 sec: 105102132 operations; 146985.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1396899, Max=54591, Min=509, Avg=2048.14, 90=2823, 99=4155, 99.9=9815, 99.99=26927] [UPDATE: Count=73183, Max=26303, Min=508, Avg=1865.49, 90=2507, 99=3327, 99.9=8487, 99.99=14511] 
2023-05-04 20:19:46:341 730 sec: 106565849 operations; 146371.7 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1391154, Max=57375, Min=519, Avg=2056.98, 90=2835, 99=4315, 99.9=10711, 99.99=25983] [UPDATE: Count=72562, Max=25823, Min=521, Avg=1872.25, 90=2517, 99=3401, 99.9=8887, 99.99=18575] 
2023-05-04 20:19:56:340 740 sec: 108037770 operations; 147192.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1397967, Max=13151, Min=528, Avg=2044.98, 90=2823, 99=4111, 99.9=9655, 99.99=11519] [UPDATE: Count=73800, Max=22191, Min=538, Avg=1871.88, 90=2507, 99=3325, 99.9=9319, 99.99=11279] 
2023-05-04 20:20:06:340 750 sec: 109503761 operations; 146599.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1392433, Max=50911, Min=513, Avg=2053.64, 90=2835, 99=4163, 99.9=10895, 99.99=27119] [UPDATE: Count=73656, Max=25007, Min=513, Avg=1872.8, 90=2517, 99=3333, 99.9=9151, 99.99=15367] 
2023-05-04 20:20:16:340 760 sec: 110962314 operations; 145855.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1385331, Max=60351, Min=532, Avg=2064.38, 90=2845, 99=4263, 99.9=10503, 99.99=35295] [UPDATE: Count=73332, Max=43711, Min=528, Avg=1878.52, 90=2519, 99=3387, 99.9=9639, 99.99=20895] 
2023-05-04 20:20:26:340 770 sec: 112429113 operations; 146679.9 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1393560, Max=20799, Min=534, Avg=2052.31, 90=2839, 99=4235, 99.9=9343, 99.99=12495] [UPDATE: Count=73190, Max=14335, Min=559, Avg=1875.08, 90=2519, 99=3337, 99.9=8999, 99.99=12239] 
2023-05-04 20:20:36:341 780 sec: 113888877 operations; 145976.4 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1386675, Max=64287, Min=501, Avg=2062.5, 90=2843, 99=4287, 99.9=10943, 99.99=27135] [UPDATE: Count=73040, Max=26591, Min=565, Avg=1879.31, 90=2525, 99=3373, 99.9=9687, 99.99=17391] 
2023-05-04 20:20:46:340 790 sec: 115327538 operations; 143866.1 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1366522, Max=52895, Min=509, Avg=2093.96, 90=2861, 99=5687, 99.9=15543, 99.99=44319] [UPDATE: Count=72195, Max=46879, Min=523, Avg=1883.67, 90=2529, 99=3491, 99.9=10103, 99.99=43807] 
2023-05-04 20:20:56:340 800 sec: 116787415 operations; 145987.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1386574, Max=19759, Min=520, Avg=2062.01, 90=2863, 99=4323, 99.9=9503, 99.99=17663] [UPDATE: Count=73044, Max=29983, Min=563, Avg=1889.39, 90=2537, 99=3473, 99.9=9799, 99.99=18159] 
2023-05-04 20:21:06:340 810 sec: 118243051 operations; 145563.6 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1382781, Max=53407, Min=513, Avg=2068.58, 90=2839, 99=4259, 99.9=14095, 99.99=50719] [UPDATE: Count=73052, Max=52127, Min=517, Avg=1874.7, 90=2519, 99=3347, 99.9=9495, 99.99=26271] 
2023-05-04 20:21:16:340 820 sec: 119705727 operations; 146267.6 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1389332, Max=55263, Min=504, Avg=2058.5, 90=2837, 99=4323, 99.9=10727, 99.99=27055] [UPDATE: Count=73314, Max=26399, Min=558, Avg=1872.84, 90=2519, 99=3361, 99.9=8679, 99.99=21807] 
2023-05-04 20:21:26:340 830 sec: 121173452 operations; 146772.5 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1393909, Max=19039, Min=492, Avg=2050.8, 90=2845, 99=4299, 99.9=9199, 99.99=11783] [UPDATE: Count=73925, Max=13439, Min=510, Avg=1878.06, 90=2533, 99=3457, 99.9=8631, 99.99=10431] 
2023-05-04 20:21:36:341 840 sec: 122638213 operations; 146476.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1391473, Max=54655, Min=498, Avg=2055.41, 90=2831, 99=4163, 99.9=10999, 99.99=28047] [UPDATE: Count=73172, Max=23231, Min=513, Avg=1873.72, 90=2515, 99=3331, 99.9=9631, 99.99=14823] 
2023-05-04 20:21:46:340 850 sec: 124104773 operations; 146656 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1393703, Max=51391, Min=480, Avg=2052.39, 90=2833, 99=4211, 99.9=9679, 99.99=28303] [UPDATE: Count=72957, Max=25855, Min=506, Avg=1878.2, 90=2515, 99=3367, 99.9=9519, 99.99=21183] 
2023-05-04 20:21:56:340 860 sec: 125574118 operations; 146934.5 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1395964, Max=20303, Min=543, Avg=2048.43, 90=2833, 99=4091, 99.9=10135, 99.99=17503] [UPDATE: Count=73257, Max=18447, Min=556, Avg=1877.65, 90=2517, 99=3337, 99.9=9967, 99.99=17471] 
2023-05-04 20:22:06:340 870 sec: 127042973 operations; 146885.5 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1395018, Max=55199, Min=491, Avg=2049.62, 90=2821, 99=4183, 99.9=10151, 99.99=27599] [UPDATE: Count=73873, Max=24191, Min=518, Avg=1870.24, 90=2515, 99=3357, 99.9=9031, 99.99=14967] 
2023-05-04 20:22:16:340 880 sec: 128507053 operations; 146408 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1390600, Max=52063, Min=483, Avg=2056.04, 90=2833, 99=4239, 99.9=10575, 99.99=26783] [UPDATE: Count=73395, Max=28479, Min=526, Avg=1882.41, 90=2523, 99=3387, 99.9=9471, 99.99=18607] 
2023-05-04 20:22:26:340 890 sec: 129973160 operations; 146610.7 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1392660, Max=20447, Min=530, Avg=2052.75, 90=2827, 99=4195, 99.9=10831, 99.99=15615] [UPDATE: Count=73419, Max=16559, Min=489, Avg=1886.03, 90=2519, 99=3411, 99.9=11087, 99.99=15415] 
2023-05-04 20:22:36:340 900 sec: 131439532 operations; 146637.2 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1392947, Max=53535, Min=504, Avg=2052.62, 90=2831, 99=4199, 99.9=10495, 99.99=27119] [UPDATE: Count=73679, Max=27247, Min=522, Avg=1879, 90=2517, 99=3359, 99.9=9975, 99.99=22687] 
2023-05-04 20:22:46:340 910 sec: 132900245 operations; 146071.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1387657, Max=58495, Min=500, Avg=2061.08, 90=2847, 99=4263, 99.9=10351, 99.99=28703] [UPDATE: Count=72736, Max=106559, Min=536, Avg=1903.12, 90=2525, 99=3401, 99.9=10375, 99.99=97471] 
2023-05-04 20:22:56:340 920 sec: 134359080 operations; 145883.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1385514, Max=108095, Min=529, Avg=2062.6, 90=2829, 99=4151, 99.9=9703, 99.99=90175] [UPDATE: Count=73674, Max=105663, Min=570, Avg=1876.38, 90=2513, 99=3369, 99.9=9279, 99.99=10975] 
2023-05-04 20:23:06:340 930 sec: 135822501 operations; 146342.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1389757, Max=58175, Min=506, Avg=2057.45, 90=2837, 99=4271, 99.9=10911, 99.99=33055] [UPDATE: Count=73552, Max=26431, Min=534, Avg=1872.76, 90=2519, 99=3383, 99.9=9439, 99.99=21023] 
2023-05-04 20:23:16:340 940 sec: 137283411 operations; 146091 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1388259, Max=54175, Min=527, Avg=2060.7, 90=2837, 99=4323, 99.9=10503, 99.99=28511] [UPDATE: Count=72747, Max=34047, Min=534, Avg=1880.31, 90=2515, 99=3405, 99.9=9487, 99.99=17967] 
2023-05-04 20:23:26:340 950 sec: 138750744 operations; 146733.3 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1394248, Max=17711, Min=513, Avg=2051.23, 90=2829, 99=4227, 99.9=9671, 99.99=14599] [UPDATE: Count=72983, Max=16991, Min=552, Avg=1880.74, 90=2519, 99=3445, 99.9=9471, 99.99=14143] 
2023-05-04 20:23:36:340 960 sec: 140218655 operations; 146791.1 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1395100, Max=53919, Min=504, Avg=2050.67, 90=2823, 99=4155, 99.9=11535, 99.99=27791] [UPDATE: Count=72926, Max=27375, Min=510, Avg=1874.66, 90=2517, 99=3345, 99.9=9735, 99.99=19743] 
2023-05-04 20:23:46:340 970 sec: 141681103 operations; 146244.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1389518, Max=53183, Min=510, Avg=2058.59, 90=2835, 99=4267, 99.9=10671, 99.99=27775] [UPDATE: Count=72750, Max=45247, Min=535, Avg=1876.89, 90=2515, 99=3367, 99.9=9543, 99.99=17999] 
2023-05-04 20:23:56:340 980 sec: 143155642 operations; 147453.9 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1400835, Max=20895, Min=521, Avg=2041.42, 90=2821, 99=4103, 99.9=9407, 99.99=15591] [UPDATE: Count=73691, Max=16847, Min=543, Avg=1868.63, 90=2513, 99=3311, 99.9=8895, 99.99=14847] 
2023-05-04 20:24:06:340 990 sec: 144621686 operations; 146604.4 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1392254, Max=53247, Min=499, Avg=2053.52, 90=2829, 99=4187, 99.9=10783, 99.99=27503] [UPDATE: Count=73714, Max=26463, Min=550, Avg=1876.41, 90=2511, 99=3379, 99.9=10087, 99.99=19535] 
2023-05-04 20:24:16:340 1000 sec: 146080755 operations; 145906.9 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1386169, Max=53599, Min=535, Avg=2063.34, 90=2833, 99=4295, 99.9=12535, 99.99=28991] [UPDATE: Count=73008, Max=24719, Min=501, Avg=1880.05, 90=2519, 99=3377, 99.9=9527, 99.99=24239] 
2023-05-04 20:24:26:341 1010 sec: 147551053 operations; 147029.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1396716, Max=19663, Min=510, Avg=2047.24, 90=2833, 99=4235, 99.9=9111, 99.99=12711] [UPDATE: Count=73628, Max=15783, Min=550, Avg=1877.35, 90=2527, 99=3383, 99.9=8855, 99.99=12247] 
2023-05-04 20:24:36:340 1020 sec: 149013531 operations; 146247.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1389593, Max=60319, Min=504, Avg=2058.37, 90=2829, 99=4243, 99.9=12183, 99.99=31727] [UPDATE: Count=72825, Max=25503, Min=544, Avg=1880.82, 90=2519, 99=3375, 99.9=10247, 99.99=22559] 
2023-05-04 20:24:46:340 1030 sec: 150463696 operations; 145016.5 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1377755, Max=51039, Min=526, Avg=2076.3, 90=2863, 99=4363, 99.9=11455, 99.99=28831] [UPDATE: Count=72508, Max=29311, Min=558, Avg=1888.33, 90=2527, 99=3439, 99.9=9743, 99.99=27135] 
2023-05-04 20:24:56:340 1040 sec: 151920274 operations; 145657.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1383205, Max=16751, Min=552, Avg=2067.2, 90=2877, 99=4303, 99.9=9151, 99.99=14487] [UPDATE: Count=73234, Max=15559, Min=561, Avg=1881.28, 90=2529, 99=3379, 99.9=8567, 99.99=13991] 
2023-05-04 20:25:06:340 1050 sec: 153374736 operations; 145446.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1381793, Max=57535, Min=501, Avg=2070.37, 90=2853, 99=4415, 99.9=10887, 99.99=28511] [UPDATE: Count=72850, Max=41375, Min=536, Avg=1878.41, 90=2513, 99=3399, 99.9=8647, 99.99=17855] 
2023-05-04 20:25:16:340 1060 sec: 154829394 operations; 145465.8 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1381907, Max=50495, Min=533, Avg=2070.03, 90=2847, 99=4355, 99.9=12023, 99.99=30895] [UPDATE: Count=72614, Max=48575, Min=564, Avg=1881.61, 90=2519, 99=3401, 99.9=9319, 99.99=14311] 
2023-05-04 20:25:26:340 1070 sec: 156288566 operations; 145917.2 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1386030, Max=27471, Min=533, Avg=2062.98, 90=2847, 99=4175, 99.9=10879, 99.99=25119] [UPDATE: Count=73259, Max=27119, Min=523, Avg=1887.82, 90=2519, 99=3379, 99.9=10615, 99.99=24479] 
2023-05-04 20:25:36:340 1080 sec: 157737389 operations; 144882.3 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1376663, Max=49119, Min=535, Avg=2078.18, 90=2863, 99=4471, 99.9=10239, 99.99=34015] [UPDATE: Count=71904, Max=34399, Min=488, Avg=1894.16, 90=2519, 99=3449, 99.9=9559, 99.99=33791] 
2023-05-04 20:25:46:340 1090 sec: 159187954 operations; 145056.5 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1378023, Max=57119, Min=528, Avg=2075.58, 90=2859, 99=4459, 99.9=9911, 99.99=31903] [UPDATE: Count=72699, Max=35423, Min=485, Avg=1886.51, 90=2521, 99=3409, 99.9=8871, 99.99=22623] 
2023-05-04 20:25:56:340 1100 sec: 160653927 operations; 146597.3 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1392146, Max=18207, Min=512, Avg=2053.34, 90=2841, 99=4171, 99.9=8807, 99.99=11343] [UPDATE: Count=73940, Max=16447, Min=536, Avg=1881.32, 90=2519, 99=3353, 99.9=8895, 99.99=11039] 
2023-05-04 20:26:06:340 1110 sec: 162102589 operations; 144866.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1376276, Max=69119, Min=499, Avg=2078.84, 90=2867, 99=4431, 99.9=10495, 99.99=28479] [UPDATE: Count=72255, Max=25407, Min=566, Avg=1883.5, 90=2521, 99=3371, 99.9=9383, 99.99=16495] 
2023-05-04 20:26:16:340 1120 sec: 163554176 operations; 145158.7 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1378669, Max=39167, Min=513, Avg=2074.33, 90=2863, 99=4507, 99.9=10591, 99.99=24895] [UPDATE: Count=72937, Max=24111, Min=539, Avg=1886.64, 90=2525, 99=3431, 99.9=9607, 99.99=17903] 
2023-05-04 20:26:26:340 1130 sec: 165019168 operations; 146499.2 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1391569, Max=17743, Min=502, Avg=2054.94, 90=2843, 99=4183, 99.9=9375, 99.99=12215] [UPDATE: Count=73363, Max=14063, Min=548, Avg=1876.29, 90=2513, 99=3339, 99.9=9039, 99.99=11783] 
2023-05-04 20:26:36:340 1140 sec: 166463004 operations; 144383.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1371597, Max=51807, Min=523, Avg=2086.13, 90=2887, 99=4603, 99.9=10863, 99.99=26815] [UPDATE: Count=72268, Max=39359, Min=506, Avg=1883.88, 90=2523, 99=3397, 99.9=8879, 99.99=20191] 
2023-05-04 20:26:46:340 1150 sec: 167919229 operations; 145622.5 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1383770, Max=60863, Min=508, Avg=2068.05, 90=2845, 99=4319, 99.9=11255, 99.99=34431] [UPDATE: Count=72471, Max=27151, Min=538, Avg=1872.69, 90=2519, 99=3371, 99.9=9191, 99.99=21407] 
2023-05-04 20:26:56:340 1160 sec: 169381648 operations; 146241.9 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1389080, Max=19487, Min=521, Avg=2058.33, 90=2863, 99=4211, 99.9=9623, 99.99=11471] [UPDATE: Count=73281, Max=18015, Min=542, Avg=1885.62, 90=2547, 99=3405, 99.9=9503, 99.99=11071] 
2023-05-04 20:27:06:340 1170 sec: 170841116 operations; 145946.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1386569, Max=60767, Min=503, Avg=2063.06, 90=2855, 99=4203, 99.9=14199, 99.99=29647] [UPDATE: Count=73109, Max=27039, Min=488, Avg=1875.81, 90=2541, 99=3359, 99.9=10199, 99.99=17199] 
2023-05-04 20:27:16:340 1180 sec: 172312917 operations; 147180.1 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1398178, Max=62335, Min=516, Avg=2045.67, 90=2837, 99=4067, 99.9=8679, 99.99=34751] [UPDATE: Count=73429, Max=25871, Min=516, Avg=1863.89, 90=2525, 99=3305, 99.9=7063, 99.99=17711] 
2023-05-04 20:27:26:340 1190 sec: 173785043 operations; 147212.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1398318, Max=20799, Min=511, Avg=2044.58, 90=2831, 99=4081, 99.9=8831, 99.99=17391] [UPDATE: Count=73959, Max=18095, Min=550, Avg=1873.87, 90=2523, 99=3327, 99.9=8607, 99.99=17343] 
2023-05-04 20:27:36:340 1200 sec: 175249661 operations; 146461.8 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1391534, Max=53311, Min=513, Avg=2055.55, 90=2825, 99=4215, 99.9=10815, 99.99=27983] [UPDATE: Count=72964, Max=25071, Min=540, Avg=1874.45, 90=2507, 99=3375, 99.9=9527, 99.99=21535] 
2023-05-04 20:27:46:340 1210 sec: 176710245 operations; 146058.4 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1387680, Max=48223, Min=522, Avg=2060.92, 90=2833, 99=4231, 99.9=11023, 99.99=30047] [UPDATE: Count=72855, Max=30175, Min=546, Avg=1885.74, 90=2519, 99=3397, 99.9=9607, 99.99=29343] 
2023-05-04 20:27:56:340 1220 sec: 178174386 operations; 146414.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1391066, Max=18847, Min=508, Avg=2055.86, 90=2845, 99=4231, 99.9=9463, 99.99=13103] [UPDATE: Count=73106, Max=15751, Min=559, Avg=1881.06, 90=2525, 99=3395, 99.9=9239, 99.99=11399] 
2023-05-04 20:28:06:340 1230 sec: 179635664 operations; 146127.8 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1388353, Max=50111, Min=530, Avg=2059.89, 90=2837, 99=4255, 99.9=10615, 99.99=27215] [UPDATE: Count=72882, Max=26399, Min=489, Avg=1886.06, 90=2521, 99=3423, 99.9=9791, 99.99=20975] 
2023-05-04 20:28:16:340 1240 sec: 181104431 operations; 146876.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1395088, Max=57439, Min=518, Avg=2049.71, 90=2827, 99=4171, 99.9=10071, 99.99=28959] [UPDATE: Count=73837, Max=26943, Min=517, Avg=1871.48, 90=2517, 99=3333, 99.9=9343, 99.99=18223] 
2023-05-04 20:28:26:340 1250 sec: 182573292 operations; 146886.1 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1395085, Max=21903, Min=516, Avg=2049.12, 90=2831, 99=4143, 99.9=9175, 99.99=13559] [UPDATE: Count=73654, Max=13695, Min=558, Avg=1880.49, 90=2521, 99=3379, 99.9=8879, 99.99=10135] 
2023-05-04 20:28:36:340 1260 sec: 184039219 operations; 146592.7 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1392165, Max=49567, Min=486, Avg=2053.76, 90=2831, 99=4171, 99.9=11183, 99.99=27439] [UPDATE: Count=73902, Max=24527, Min=529, Avg=1873.03, 90=2511, 99=3341, 99.9=10783, 99.99=21807] 
2023-05-04 20:28:46:340 1270 sec: 185494505 operations; 145528.6 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1382651, Max=57247, Min=515, Avg=2068.9, 90=2847, 99=4235, 99.9=11143, 99.99=53535] [UPDATE: Count=72510, Max=56223, Min=499, Avg=1884.54, 90=2525, 99=3397, 99.9=9623, 99.99=53055] 
2023-05-04 20:28:56:341 1280 sec: 186962927 operations; 146842.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1395220, Max=20639, Min=537, Avg=2049.83, 90=2829, 99=4159, 99.9=9575, 99.99=17503] [UPDATE: Count=73299, Max=18831, Min=573, Avg=1878.06, 90=2513, 99=3355, 99.9=9375, 99.99=16895] 
2023-05-04 20:29:06:340 1290 sec: 188427071 operations; 146414.4 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1391070, Max=59423, Min=505, Avg=2056.31, 90=2827, 99=4295, 99.9=11183, 99.99=29583] [UPDATE: Count=73178, Max=26063, Min=519, Avg=1872.43, 90=2513, 99=3385, 99.9=8991, 99.99=16175] 
2023-05-04 20:29:16:340 1300 sec: 189888098 operations; 146102.7 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1388395, Max=50207, Min=502, Avg=2060.3, 90=2833, 99=4167, 99.9=12167, 99.99=29727] [UPDATE: Count=72595, Max=29391, Min=522, Avg=1884.06, 90=2523, 99=3373, 99.9=10551, 99.99=28575] 
2023-05-04 20:29:26:340 1310 sec: 191353395 operations; 146529.7 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1392248, Max=28623, Min=537, Avg=2054.27, 90=2833, 99=4199, 99.9=9775, 99.99=25311] [UPDATE: Count=72863, Max=25999, Min=549, Avg=1880.37, 90=2519, 99=3371, 99.9=9559, 99.99=25311] 
2023-05-04 20:29:36:340 1320 sec: 192817776 operations; 146438.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1391296, Max=53663, Min=513, Avg=2056.06, 90=2827, 99=4227, 99.9=11679, 99.99=29135] [UPDATE: Count=73118, Max=24831, Min=573, Avg=1871.36, 90=2511, 99=3369, 99.9=9919, 99.99=16335] 
2023-05-04 20:29:46:340 1330 sec: 194279480 operations; 146170.4 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1388534, Max=57791, Min=518, Avg=2059.79, 90=2829, 99=4383, 99.9=12223, 99.99=28751] [UPDATE: Count=73161, Max=36223, Min=545, Avg=1876.89, 90=2523, 99=3427, 99.9=9127, 99.99=21551] 
2023-05-04 20:29:56:340 1340 sec: 195748507 operations; 146902.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1395889, Max=19375, Min=535, Avg=2048.83, 90=2827, 99=4095, 99.9=9903, 99.99=13407] [UPDATE: Count=73147, Max=14207, Min=530, Avg=1878.84, 90=2511, 99=3363, 99.9=9719, 99.99=13111] 
2023-05-04 20:30:06:340 1350 sec: 197218062 operations; 146955.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1396078, Max=66623, Min=524, Avg=2048.78, 90=2825, 99=4147, 99.9=9855, 99.99=31983] [UPDATE: Count=73642, Max=24927, Min=513, Avg=1866.52, 90=2513, 99=3331, 99.9=9207, 99.99=15999] 
2023-05-04 20:30:16:340 1360 sec: 198682559 operations; 146449.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1391168, Max=51775, Min=497, Avg=2055.72, 90=2833, 99=4215, 99.9=10351, 99.99=26815] [UPDATE: Count=73155, Max=27311, Min=510, Avg=1875.68, 90=2521, 99=3381, 99.9=9519, 99.99=18015] 
2023-05-04 20:30:26:340 1370 sec: 200153576 operations; 147101.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1397761, Max=17055, Min=528, Avg=2046.26, 90=2831, 99=4111, 99.9=9759, 99.99=12583] [UPDATE: Count=73210, Max=15311, Min=536, Avg=1873.08, 90=2521, 99=3341, 99.9=9479, 99.99=12319] 
2023-05-04 20:30:36:340 1380 sec: 201618031 operations; 146445.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1391675, Max=51551, Min=498, Avg=2055.37, 90=2835, 99=4235, 99.9=9991, 99.99=28479] [UPDATE: Count=72815, Max=26927, Min=504, Avg=1882.37, 90=2521, 99=3441, 99.9=9471, 99.99=20047] 
2023-05-04 20:30:46:340 1390 sec: 203069899 operations; 145186.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1379763, Max=54943, Min=501, Avg=2073.73, 90=2849, 99=4411, 99.9=11951, 99.99=50719] [UPDATE: Count=72111, Max=51615, Min=539, Avg=1887.7, 90=2521, 99=3461, 99.9=9455, 99.99=50815] 
2023-05-04 20:30:56:340 1400 sec: 204538304 operations; 146840.5 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1395035, Max=22799, Min=527, Avg=2050.08, 90=2835, 99=4131, 99.9=9783, 99.99=12183] [UPDATE: Count=73375, Max=14927, Min=546, Avg=1873.55, 90=2517, 99=3315, 99.9=9063, 99.99=12023] 
2023-05-04 20:31:06:340 1410 sec: 206002348 operations; 146404.4 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1391038, Max=54143, Min=509, Avg=2056.48, 90=2833, 99=4263, 99.9=10287, 99.99=27487] [UPDATE: Count=73004, Max=26815, Min=564, Avg=1873.77, 90=2519, 99=3377, 99.9=9055, 99.99=19215] 
2023-05-04 20:31:16:340 1420 sec: 207466875 operations; 146452.7 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1391339, Max=54175, Min=495, Avg=2055.8, 90=2827, 99=4275, 99.9=10615, 99.99=28655] [UPDATE: Count=73248, Max=26415, Min=514, Avg=1872.25, 90=2507, 99=3347, 99.9=9607, 99.99=17023] 
2023-05-04 20:31:26:340 1430 sec: 208935626 operations; 146875.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1395572, Max=18399, Min=517, Avg=2049.45, 90=2831, 99=4155, 99.9=9487, 99.99=12503] [UPDATE: Count=73097, Max=17263, Min=574, Avg=1875.37, 90=2513, 99=3335, 99.9=9327, 99.99=12159] 
2023-05-04 20:31:36:340 1440 sec: 210404064 operations; 146843.8 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1395158, Max=51839, Min=521, Avg=2050.12, 90=2825, 99=4291, 99.9=9679, 99.99=27823] [UPDATE: Count=73420, Max=23199, Min=550, Avg=1871.56, 90=2513, 99=3413, 99.9=8591, 99.99=15759] 
2023-05-04 20:31:46:340 1450 sec: 211862867 operations; 145880.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1385788, Max=53183, Min=509, Avg=2063.82, 90=2839, 99=4311, 99.9=11415, 99.99=27887] [UPDATE: Count=72967, Max=33407, Min=538, Avg=1882.06, 90=2525, 99=3417, 99.9=9287, 99.99=24671] 
2023-05-04 20:31:56:340 1460 sec: 213334117 operations; 147125 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1397888, Max=14999, Min=534, Avg=2045.86, 90=2827, 99=4147, 99.9=9247, 99.99=11607] [UPDATE: Count=73265, Max=23055, Min=537, Avg=1873.72, 90=2509, 99=3375, 99.9=9111, 99.99=11039] 
2023-05-04 20:32:06:340 1470 sec: 214796994 operations; 146287.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1390215, Max=51455, Min=514, Avg=2057.98, 90=2835, 99=4299, 99.9=9959, 99.99=27215] [UPDATE: Count=72711, Max=27135, Min=525, Avg=1877.02, 90=2513, 99=3399, 99.9=9399, 99.99=16991] 
2023-05-04 20:32:16:340 1480 sec: 216259830 operations; 146283.6 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1389734, Max=53023, Min=484, Avg=2058.33, 90=2835, 99=4319, 99.9=10727, 99.99=27695] [UPDATE: Count=73096, Max=27039, Min=534, Avg=1872.23, 90=2517, 99=3379, 99.9=8663, 99.99=22015] 
2023-05-04 20:32:26:340 1490 sec: 217726188 operations; 146635.8 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1393347, Max=28543, Min=541, Avg=2052.71, 90=2831, 99=4171, 99.9=9895, 99.99=26847] [UPDATE: Count=72959, Max=28735, Min=556, Avg=1879.5, 90=2517, 99=3377, 99.9=9615, 99.99=26415] 
2023-05-04 20:32:36:340 1500 sec: 219186629 operations; 146044.1 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1387496, Max=60767, Min=488, Avg=2061.67, 90=2833, 99=4263, 99.9=11783, 99.99=34943] [UPDATE: Count=73022, Max=47807, Min=537, Avg=1876.31, 90=2511, 99=3365, 99.9=9735, 99.99=20703] 
2023-05-04 20:32:46:340 1510 sec: 220646173 operations; 145954.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1386784, Max=52991, Min=531, Avg=2062.8, 90=2845, 99=4303, 99.9=10639, 99.99=26191] [UPDATE: Count=72717, Max=23039, Min=535, Avg=1879.03, 90=2523, 99=3423, 99.9=8991, 99.99=17855] 
2023-05-04 20:32:56:340 1520 sec: 222112084 operations; 146591.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1392416, Max=18287, Min=532, Avg=2053.34, 90=2843, 99=4207, 99.9=9023, 99.99=11359] [UPDATE: Count=73492, Max=13111, Min=562, Avg=1881.51, 90=2529, 99=3407, 99.9=8663, 99.99=10567] 
2023-05-04 20:33:06:340 1530 sec: 223568920 operations; 145683.6 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1383849, Max=64479, Min=505, Avg=2066.45, 90=2841, 99=4387, 99.9=12207, 99.99=27967] [UPDATE: Count=73015, Max=23599, Min=508, Avg=1887.04, 90=2525, 99=3433, 99.9=9711, 99.99=17519] 
2023-05-04 20:33:16:340 1540 sec: 225029992 operations; 146107.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1387911, Max=65343, Min=506, Avg=2060.32, 90=2849, 99=4267, 99.9=10055, 99.99=27247] [UPDATE: Count=73224, Max=24079, Min=529, Avg=1884.83, 90=2537, 99=3417, 99.9=9567, 99.99=18063] 
2023-05-04 20:33:26:340 1550 sec: 226494546 operations; 146455.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1391234, Max=17967, Min=519, Avg=2055.08, 90=2843, 99=4179, 99.9=9975, 99.99=13879] [UPDATE: Count=73194, Max=14567, Min=569, Avg=1885.61, 90=2527, 99=3421, 99.9=9655, 99.99=13359] 
2023-05-04 20:33:36:340 1560 sec: 227961199 operations; 146665.3 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1393244, Max=51519, Min=505, Avg=2052.63, 90=2835, 99=4235, 99.9=9055, 99.99=27967] [UPDATE: Count=73536, Max=25663, Min=530, Avg=1874.34, 90=2509, 99=3373, 99.9=8591, 99.99=17599] 
2023-05-04 20:33:46:340 1570 sec: 229425306 operations; 146410.7 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1390824, Max=52735, Min=519, Avg=2055.94, 90=2835, 99=4243, 99.9=10375, 99.99=27551] [UPDATE: Count=73346, Max=47231, Min=510, Avg=1881.55, 90=2529, 99=3425, 99.9=9575, 99.99=21631] 
2023-05-04 20:33:56:340 1580 sec: 230893147 operations; 146784.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1394039, Max=25551, Min=536, Avg=2050.67, 90=2829, 99=4135, 99.9=10367, 99.99=22767] [UPDATE: Count=73641, Max=24095, Min=567, Avg=1879.25, 90=2511, 99=3373, 99.9=10239, 99.99=22223] 
2023-05-04 20:34:06:340 1590 sec: 232358988 operations; 146584.1 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1392585, Max=61567, Min=490, Avg=2054.08, 90=2827, 99=4179, 99.9=10511, 99.99=32127] [UPDATE: Count=73273, Max=28463, Min=481, Avg=1869.26, 90=2509, 99=3327, 99.9=9639, 99.99=16447] 
2023-05-04 20:34:16:340 1600 sec: 233813526 operations; 145453.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1381985, Max=67135, Min=519, Avg=2069.9, 90=2837, 99=4419, 99.9=12583, 99.99=33855] [UPDATE: Count=72559, Max=34079, Min=535, Avg=1885.9, 90=2517, 99=3395, 99.9=9735, 99.99=32927] 
2023-05-04 20:34:26:340 1610 sec: 235284928 operations; 147140.2 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1397949, Max=18559, Min=534, Avg=2045.77, 90=2833, 99=4143, 99.9=9663, 99.99=12471] [UPDATE: Count=73520, Max=17215, Min=536, Avg=1872.51, 90=2519, 99=3357, 99.9=9167, 99.99=14279] 
2023-05-04 20:34:36:340 1620 sec: 236748478 operations; 146355 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1390311, Max=60575, Min=516, Avg=2057.32, 90=2827, 99=4183, 99.9=11391, 99.99=36255] [UPDATE: Count=73011, Max=49023, Min=515, Avg=1876.66, 90=2507, 99=3359, 99.9=10647, 99.99=27231] 
2023-05-04 20:34:46:340 1630 sec: 238201394 operations; 145291.6 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1380584, Max=53439, Min=505, Avg=2072.27, 90=2855, 99=4479, 99.9=13247, 99.99=31423] [UPDATE: Count=72489, Max=31471, Min=551, Avg=1880.23, 90=2531, 99=3465, 99.9=9023, 99.99=20399] 
2023-05-04 20:34:56:340 1640 sec: 239666873 operations; 146547.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1392696, Max=13711, Min=544, Avg=2054.31, 90=2853, 99=4231, 99.9=8879, 99.99=11295] [UPDATE: Count=72822, Max=12071, Min=517, Avg=1874, 90=2525, 99=3415, 99.9=8271, 99.99=10855] 
2023-05-04 20:35:06:340 1650 sec: 241128250 operations; 146137.7 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1388210, Max=53279, Min=506, Avg=2060.22, 90=2843, 99=4287, 99.9=10647, 99.99=26239] [UPDATE: Count=73090, Max=40799, Min=567, Avg=1877.52, 90=2521, 99=3417, 99.9=9383, 99.99=19551] 
2023-05-04 20:35:16:340 1660 sec: 242590221 operations; 146197.1 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1388619, Max=55103, Min=499, Avg=2059.94, 90=2829, 99=4307, 99.9=11823, 99.99=27775] [UPDATE: Count=73584, Max=25615, Min=482, Avg=1866.63, 90=2509, 99=3357, 99.9=8575, 99.99=17375] 
2023-05-04 20:35:26:340 1670 sec: 244045408 operations; 145518.7 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1382532, Max=67135, Min=522, Avg=2068.63, 90=2855, 99=4291, 99.9=9367, 99.99=61279] [UPDATE: Count=72531, Max=65983, Min=549, Avg=1891.46, 90=2529, 99=3459, 99.9=9239, 99.99=61087] 
2023-05-04 20:35:36:340 1680 sec: 245507237 operations; 146182.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1388684, Max=58047, Min=510, Avg=2059.45, 90=2833, 99=4343, 99.9=10431, 99.99=29583] [UPDATE: Count=73052, Max=28607, Min=518, Avg=1878.99, 90=2517, 99=3413, 99.9=9255, 99.99=18191] 
2023-05-04 20:35:46:340 1690 sec: 246964444 operations; 145720.7 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1384553, Max=57343, Min=513, Avg=2066.54, 90=2835, 99=4363, 99.9=13567, 99.99=28783] [UPDATE: Count=72751, Max=25055, Min=529, Avg=1874.63, 90=2519, 99=3393, 99.9=9543, 99.99=15903] 
2023-05-04 20:35:56:340 1700 sec: 248438616 operations; 147417.2 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1400491, Max=15991, Min=532, Avg=2041.87, 90=2829, 99=4033, 99.9=8911, 99.99=12999] [UPDATE: Count=73720, Max=14103, Min=528, Avg=1869.23, 90=2505, 99=3329, 99.9=8935, 99.99=13063] 
2023-05-04 20:36:06:340 1710 sec: 249897577 operations; 145896.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1386021, Max=51775, Min=495, Avg=2063.81, 90=2839, 99=4335, 99.9=10343, 99.99=28687] [UPDATE: Count=72824, Max=25903, Min=527, Avg=1877.99, 90=2515, 99=3371, 99.9=9391, 99.99=18799] 
2023-05-04 20:36:16:340 1720 sec: 251362830 operations; 146525.3 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1392789, Max=41887, Min=526, Avg=2054.65, 90=2833, 99=4251, 99.9=10887, 99.99=24703] [UPDATE: Count=72436, Max=24815, Min=532, Avg=1874.58, 90=2515, 99=3413, 99.9=9239, 99.99=17967] 
2023-05-04 20:36:26:340 1730 sec: 252825180 operations; 146235 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1389772, Max=19951, Min=542, Avg=2058.5, 90=2849, 99=4299, 99.9=9159, 99.99=13535] [UPDATE: Count=72536, Max=16415, Min=563, Avg=1881.9, 90=2521, 99=3433, 99.9=9127, 99.99=11543] 
2023-05-04 20:36:36:340 1740 sec: 254288499 operations; 146331.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1390152, Max=62559, Min=515, Avg=2057.66, 90=2833, 99=4239, 99.9=10415, 99.99=32271] [UPDATE: Count=73252, Max=22975, Min=549, Avg=1872, 90=2513, 99=3385, 99.9=9287, 99.99=15847] 
2023-05-04 20:36:46:340 1750 sec: 255747230 operations; 145873.1 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1385833, Max=53631, Min=537, Avg=2064.09, 90=2843, 99=4331, 99.9=12479, 99.99=26943] [UPDATE: Count=72887, Max=25535, Min=546, Avg=1878.15, 90=2521, 99=3403, 99.9=10015, 99.99=16431] 
2023-05-04 20:36:56:340 1760 sec: 257211932 operations; 146470.2 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1391486, Max=19951, Min=519, Avg=2055.17, 90=2851, 99=4223, 99.9=9647, 99.99=17343] [UPDATE: Count=73300, Max=18815, Min=536, Avg=1880.16, 90=2529, 99=3385, 99.9=9207, 99.99=17519] 
2023-05-04 20:37:06:340 1770 sec: 258662677 operations; 145074.5 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1377861, Max=64671, Min=507, Avg=2075.13, 90=2855, 99=4415, 99.9=10127, 99.99=58495] [UPDATE: Count=72630, Max=59455, Min=569, Avg=1899.99, 90=2535, 99=3541, 99.9=9207, 99.99=58463] 
2023-05-04 20:37:16:340 1780 sec: 260113695 operations; 145101.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1378372, Max=51263, Min=508, Avg=2075.15, 90=2853, 99=4595, 99.9=12327, 99.99=29791] [UPDATE: Count=72983, Max=34751, Min=513, Avg=1884.3, 90=2531, 99=3427, 99.9=10391, 99.99=20911] 
2023-05-04 20:37:26:340 1790 sec: 261580433 operations; 146673.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1392999, Max=20527, Min=517, Avg=2052.38, 90=2843, 99=4219, 99.9=9159, 99.99=12247] [UPDATE: Count=73545, Max=16399, Min=548, Avg=1876.35, 90=2525, 99=3401, 99.9=8887, 99.99=11167] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
2023-05-04 20:37:36:340 1800 sec: 263037360 operations; 145692.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1384493, Max=56767, Min=514, Avg=2066.85, 90=2851, 99=4307, 99.9=10663, 99.99=37439] [UPDATE: Count=72336, Max=26623, Min=530, Avg=1877.15, 90=2523, 99=3409, 99.9=9535, 99.99=22559] 
Still waiting for thread Thread-79 to complete. Workload status: true
2023-05-04 20:37:38:601 1802 sec: 263041479 operations; 1822.57 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=3924, Max=9831, Min=739, Avg=2160.96, 90=3023, 99=7391, 99.9=9423, 99.99=9831] [CLEANUP: Count=300, Max=2224127, Min=0, Avg=7411.22, 90=2, 99=6, 99.9=2224127, 99.99=2224127] [UPDATE: Count=0, Max=0, Min=9223372036854775807, Avg=?, 90=0, 99=0, 99.9=0, 99.99=0] 
[OVERALL], RunTime(ms), 1802260
[OVERALL], Throughput(ops/sec), 145950.9055297238
[TOTAL_GCS_PS_Scavenge], Count, 3615
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18531
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0282090264445751
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 158
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.008766770610233818
[TOTAL_GCs], Count, 3618
[TOTAL_GC_TIME], Time(ms), 18689
[TOTAL_GC_TIME_%], Time(%), 1.036975797054809
[READ], Operations, 249890134
[READ], AverageLatency(us), 2059.2944979492468
[READ], MinLatency(us), 475
[READ], MaxLatency(us), 207999
[READ], 95thPercentileLatency(us), 3175
[READ], 99thPercentileLatency(us), 4263
[READ], Return=OK, 249890134
[CLEANUP], Operations, 300
[CLEANUP], AverageLatency(us), 7411.216666666666
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2224127
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 6
[UPDATE], Operations, 13151345
[UPDATE], AverageLatency(us), 1879.594150484228
[UPDATE], MinLatency(us), 481
[UPDATE], MaxLatency(us), 171391
[UPDATE], 95thPercentileLatency(us), 2761
[UPDATE], 99thPercentileLatency(us), 3395
[UPDATE], Return=OK, 13151345
