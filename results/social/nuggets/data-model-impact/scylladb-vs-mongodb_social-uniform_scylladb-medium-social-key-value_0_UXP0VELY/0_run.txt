bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-03-13 22:00:35:348 0 sec: 0 operations; est completion in 0 second 
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.203.71.187:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.191.187.24:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.242.61.55:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.10.157.233:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.159.190:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.88.225.241:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 35353fa3-186a-4709-9b2d-ca9b493452e4

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.10.157.233; Rack: us-west-2c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.191.187.24; Rack: us-west-2b

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.203.71.187; Rack: us-west-2a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.88.225.241; Rack: us-west-2a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.242.61.55; Rack: us-west-2b

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.159.190; Rack: us-west-2c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-03-13 22:00:45:333 10 sec: 1349944 operations; 134994.4 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=1282706, Max=178303, Min=601, Avg=2780.06, 90=3491, 99=16543, 99.9=57599, 99.99=117759] [UPDATE: Count=67575, Max=126143, Min=622, Avg=2162.67, 90=2729, 99=14247, 99.9=50847, 99.99=112127] 
2023-03-13 22:00:55:334 20 sec: 3151396 operations; 180145.2 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1710690, Max=37791, Min=598, Avg=2249, 90=3017, 99=4367, 99.9=11559, 99.99=18191] [UPDATE: Count=90551, Max=35711, Min=636, Avg=1643.54, 90=2235, 99=3413, 99.9=10743, 99.99=17983] 
2023-03-13 22:01:05:333 30 sec: 4909309 operations; 175791.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1670030, Max=48735, Min=610, Avg=2305.89, 90=3081, 99=4795, 99.9=14823, 99.99=29711] [UPDATE: Count=87871, Max=37375, Min=607, Avg=1660.05, 90=2245, 99=3531, 99.9=12583, 99.99=27551] 
2023-03-13 22:01:15:333 40 sec: 6676325 operations; 176701.6 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1678612, Max=49887, Min=626, Avg=2293.81, 90=3093, 99=4735, 99.9=13775, 99.99=25967] [UPDATE: Count=88396, Max=25679, Min=607, Avg=1657.65, 90=2257, 99=3457, 99.9=11879, 99.99=23951] 
2023-03-13 22:01:25:333 50 sec: 8456306 operations; 177998.1 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1691115, Max=17343, Min=615, Avg=2277.11, 90=3085, 99=4655, 99.9=11463, 99.99=14879] [UPDATE: Count=88855, Max=16199, Min=639, Avg=1644.21, 90=2261, 99=3315, 99.9=9039, 99.99=13919] 
2023-03-13 22:01:35:338 60 sec: 10241806 operations; 178460.77 current ops/sec; est completion in 1 hour 36 minutes [READ: Count=1696051, Max=52799, Min=626, Avg=2269.26, 90=3025, 99=4435, 99.9=13439, 99.99=27663] [UPDATE: Count=89491, Max=25311, Min=597, Avg=1656.76, 90=2245, 99=3445, 99.9=12823, 99.99=16527] 
2023-03-13 22:01:45:333 70 sec: 12028400 operations; 178748.77 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1696989, Max=50591, Min=631, Avg=2268.54, 90=3037, 99=4563, 99.9=11223, 99.99=27103] [UPDATE: Count=89549, Max=31823, Min=615, Avg=1644.56, 90=2241, 99=3411, 99.9=10031, 99.99=14127] 
2023-03-13 22:01:55:333 80 sec: 13790909 operations; 176250.9 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1674021, Max=17615, Min=619, Avg=2299.89, 90=3111, 99=4859, 99.9=11791, 99.99=15039] [UPDATE: Count=88504, Max=15951, Min=621, Avg=1660.78, 90=2279, 99=3469, 99.9=10959, 99.99=13991] 
2023-03-13 22:02:05:333 90 sec: 15519450 operations; 172854.1 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1641869, Max=52831, Min=601, Avg=2346.67, 90=3235, 99=5239, 99.9=14567, 99.99=27055] [UPDATE: Count=86670, Max=26383, Min=616, Avg=1664.41, 90=2295, 99=3421, 99.9=10903, 99.99=25151] 
2023-03-13 22:02:15:333 100 sec: 17260706 operations; 174125.6 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1654220, Max=54271, Min=607, Avg=2328.75, 90=3187, 99=5407, 99.9=11983, 99.99=30239] [UPDATE: Count=87034, Max=31231, Min=620, Avg=1663.26, 90=2299, 99=3515, 99.9=10959, 99.99=17359] 
2023-03-13 22:02:25:334 110 sec: 18994906 operations; 173420 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1647419, Max=211327, Min=595, Avg=2338.7, 90=3213, 99=5079, 99.9=10351, 99.99=115007] [UPDATE: Count=86861, Max=195839, Min=607, Avg=1664.53, 90=2289, 99=3557, 99.9=8887, 99.99=55711] 
2023-03-13 22:02:35:333 120 sec: 20744850 operations; 174994.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1661745, Max=52735, Min=606, Avg=2317.17, 90=3139, 99=5047, 99.9=13047, 99.99=33887] [UPDATE: Count=88112, Max=33855, Min=615, Avg=1660.83, 90=2275, 99=3503, 99.9=11303, 99.99=32831] 
2023-03-13 22:02:45:333 130 sec: 22487129 operations; 174227.9 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1655175, Max=46463, Min=605, Avg=2327.15, 90=3149, 99=5499, 99.9=14847, 99.99=30463] [UPDATE: Count=87098, Max=30607, Min=633, Avg=1666.99, 90=2281, 99=3537, 99.9=11823, 99.99=29711] 
2023-03-13 22:02:55:333 140 sec: 24203153 operations; 171602.4 current ops/sec; est completion in 1 hour 34 minutes [READ: Count=1630478, Max=211967, Min=600, Avg=2362.63, 90=3289, 99=5119, 99.9=11687, 99.99=118271] [UPDATE: Count=85559, Max=204671, Min=610, Avg=1693.56, 90=2327, 99=3459, 99.9=10367, 99.99=119615] 
2023-03-13 22:03:05:333 150 sec: 25918463 operations; 171531 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1629179, Max=48671, Min=595, Avg=2364.99, 90=3355, 99=5247, 99.9=13063, 99.99=25583] [UPDATE: Count=86174, Max=23919, Min=632, Avg=1674.81, 90=2351, 99=3411, 99.9=10535, 99.99=17855] 
2023-03-13 22:03:15:338 160 sec: 27629784 operations; 171046.58 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1625993, Max=47167, Min=617, Avg=2370.46, 90=3335, 99=5403, 99.9=14255, 99.99=25823] [UPDATE: Count=85304, Max=40927, Min=640, Avg=1672.21, 90=2331, 99=3491, 99.9=11439, 99.99=16303] 
2023-03-13 22:03:25:333 170 sec: 29347517 operations; 171859.23 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1631787, Max=20671, Min=598, Avg=2362.49, 90=3321, 99=5343, 99.9=11487, 99.99=17039] [UPDATE: Count=85893, Max=17839, Min=627, Avg=1654, 90=2297, 99=3357, 99.9=10103, 99.99=16463] 
2023-03-13 22:03:35:333 180 sec: 31075790 operations; 172827.3 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1642090, Max=48191, Min=584, Avg=2346.85, 90=3229, 99=5219, 99.9=13087, 99.99=28191] [UPDATE: Count=86193, Max=27791, Min=632, Avg=1663.57, 90=2295, 99=3355, 99.9=11031, 99.99=26399] 
2023-03-13 22:03:45:333 190 sec: 32843126 operations; 176733.6 current ops/sec; est completion in 1 hour 33 minutes [READ: Count=1679684, Max=50495, Min=595, Avg=2293.28, 90=3063, 99=4807, 99.9=11351, 99.99=45855] [UPDATE: Count=87650, Max=46623, Min=622, Avg=1654.74, 90=2253, 99=3403, 99.9=10151, 99.99=45023] 
2023-03-13 22:03:55:333 200 sec: 34617017 operations; 177389.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1684435, Max=221311, Min=615, Avg=2284.62, 90=3021, 99=4451, 99.9=11503, 99.99=134655] [UPDATE: Count=89450, Max=196479, Min=607, Avg=1663.44, 90=2255, 99=3427, 99.9=10127, 99.99=97279] 
2023-03-13 22:04:05:333 210 sec: 36377688 operations; 176067.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1672936, Max=50559, Min=607, Avg=2302.46, 90=3099, 99=4739, 99.9=13991, 99.99=24175] [UPDATE: Count=87746, Max=39775, Min=613, Avg=1654.33, 90=2261, 99=3401, 99.9=12375, 99.99=22031] 
2023-03-13 22:04:15:333 220 sec: 38124020 operations; 174633.2 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1658758, Max=50911, Min=605, Avg=2322.19, 90=3131, 99=5183, 99.9=11791, 99.99=31743] [UPDATE: Count=87573, Max=31711, Min=626, Avg=1657.25, 90=2293, 99=3415, 99.9=10471, 99.99=29951] 
2023-03-13 22:04:25:333 230 sec: 39863211 operations; 173919.1 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1652596, Max=18959, Min=621, Avg=2331.68, 90=3163, 99=5407, 99.9=10863, 99.99=15943] [UPDATE: Count=86584, Max=15783, Min=621, Avg=1659.42, 90=2305, 99=3459, 99.9=9831, 99.99=14911] 
2023-03-13 22:04:35:333 240 sec: 41601534 operations; 173832.3 current ops/sec; est completion in 1 hour 32 minutes [READ: Count=1651448, Max=51615, Min=613, Avg=2333.1, 90=3167, 99=5031, 99.9=12575, 99.99=31183] [UPDATE: Count=86874, Max=25935, Min=610, Avg=1658.84, 90=2289, 99=3395, 99.9=11591, 99.99=24383] 
2023-03-13 22:04:45:333 250 sec: 43352084 operations; 175055 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1663241, Max=48383, Min=625, Avg=2316.84, 90=3147, 99=4979, 99.9=10415, 99.99=24575] [UPDATE: Count=87326, Max=24399, Min=631, Avg=1645.88, 90=2271, 99=3333, 99.9=9231, 99.99=18175] 
2023-03-13 22:04:55:333 260 sec: 45084079 operations; 173199.5 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1645090, Max=25647, Min=613, Avg=2341.58, 90=3159, 99=5163, 99.9=16783, 99.99=23231] [UPDATE: Count=86895, Max=24191, Min=627, Avg=1668.36, 90=2277, 99=3403, 99.9=14943, 99.99=22831] 
2023-03-13 22:05:05:333 270 sec: 46810539 operations; 172646 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1640376, Max=57727, Min=605, Avg=2349.64, 90=3197, 99=5155, 99.9=12367, 99.99=34271] [UPDATE: Count=86086, Max=39007, Min=627, Avg=1659.85, 90=2277, 99=3347, 99.9=11039, 99.99=33151] 
2023-03-13 22:05:15:333 280 sec: 48553286 operations; 174274.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1655250, Max=48671, Min=614, Avg=2327.52, 90=3151, 99=5099, 99.9=11623, 99.99=25919] [UPDATE: Count=87506, Max=25343, Min=625, Avg=1651.76, 90=2261, 99=3357, 99.9=10423, 99.99=19327] 
2023-03-13 22:05:25:333 290 sec: 50295008 operations; 174172.2 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1654513, Max=20799, Min=608, Avg=2329.19, 90=3167, 99=5087, 99.9=11447, 99.99=17327] [UPDATE: Count=87205, Max=18127, Min=628, Avg=1645.6, 90=2259, 99=3299, 99.9=10591, 99.99=16271] 
2023-03-13 22:05:35:333 300 sec: 52017485 operations; 172247.7 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1636896, Max=51135, Min=612, Avg=2355.41, 90=3235, 99=5123, 99.9=11751, 99.99=25023] [UPDATE: Count=85595, Max=23615, Min=623, Avg=1655.23, 90=2285, 99=3331, 99.9=10735, 99.99=18159] 
2023-03-13 22:05:45:334 310 sec: 53722201 operations; 170471.6 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1619759, Max=55743, Min=624, Avg=2380.33, 90=3341, 99=5095, 99.9=13551, 99.99=27711] [UPDATE: Count=84938, Max=36543, Min=624, Avg=1666.87, 90=2323, 99=3361, 99.9=11055, 99.99=23151] 
2023-03-13 22:05:55:333 320 sec: 55429561 operations; 170736 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1621769, Max=32223, Min=633, Avg=2376.83, 90=3353, 99=5203, 99.9=11727, 99.99=28511] [UPDATE: Count=85617, Max=30159, Min=638, Avg=1664.31, 90=2313, 99=3405, 99.9=10367, 99.99=27535] 
2023-03-13 22:06:05:333 330 sec: 57158936 operations; 172937.5 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1642963, Max=43711, Min=605, Avg=2345.94, 90=3251, 99=5075, 99.9=11927, 99.99=23231] [UPDATE: Count=86412, Max=25151, Min=620, Avg=1652.48, 90=2275, 99=3413, 99.9=10847, 99.99=21375] 
2023-03-13 22:06:15:333 340 sec: 58892615 operations; 173367.9 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1647354, Max=46943, Min=592, Avg=2338.84, 90=3163, 99=5007, 99.9=16431, 99.99=27199] [UPDATE: Count=86332, Max=26575, Min=639, Avg=1670.55, 90=2277, 99=3513, 99.9=12887, 99.99=25407] 
2023-03-13 22:06:25:333 350 sec: 60656887 operations; 176427.2 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1675984, Max=20639, Min=642, Avg=2298.43, 90=3095, 99=4763, 99.9=11743, 99.99=17775] [UPDATE: Count=88260, Max=17999, Min=616, Avg=1641.26, 90=2241, 99=3345, 99.9=10807, 99.99=16815] 
2023-03-13 22:06:35:333 360 sec: 62421468 operations; 176458.1 current ops/sec; est completion in 1 hour 30 minutes [READ: Count=1676178, Max=51871, Min=624, Avg=2298, 90=3089, 99=4787, 99.9=11143, 99.99=30287] [UPDATE: Count=88376, Max=37087, Min=623, Avg=1642.29, 90=2241, 99=3419, 99.9=9679, 99.99=15543] 
2023-03-13 22:06:45:333 370 sec: 64186150 operations; 176468.2 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1676302, Max=47839, Min=616, Avg=2297.57, 90=3071, 99=4651, 99.9=11687, 99.99=23071] [UPDATE: Count=88418, Max=25359, Min=638, Avg=1648.41, 90=2251, 99=3445, 99.9=10847, 99.99=19039] 
2023-03-13 22:06:55:333 380 sec: 65914913 operations; 172876.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1642177, Max=17471, Min=619, Avg=2346.64, 90=3237, 99=5127, 99.9=10359, 99.99=13535] [UPDATE: Count=86557, Max=14327, Min=627, Avg=1658.59, 90=2307, 99=3345, 99.9=9455, 99.99=12111] 
2023-03-13 22:07:05:333 390 sec: 67638373 operations; 172346 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1637828, Max=55999, Min=624, Avg=2353.5, 90=3165, 99=5199, 99.9=14447, 99.99=43903] [UPDATE: Count=85632, Max=44127, Min=625, Avg=1663.31, 90=2281, 99=3371, 99.9=11111, 99.99=42783] 
2023-03-13 22:07:15:333 400 sec: 69375239 operations; 173686.6 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1650150, Max=52799, Min=628, Avg=2335.66, 90=3155, 99=5115, 99.9=12079, 99.99=26175] [UPDATE: Count=86723, Max=22863, Min=631, Avg=1649.38, 90=2263, 99=3339, 99.9=10439, 99.99=17711] 
2023-03-13 22:07:25:333 410 sec: 71111547 operations; 173630.8 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1649332, Max=24783, Min=612, Avg=2336.65, 90=3167, 99=5083, 99.9=12287, 99.99=21135] [UPDATE: Count=86958, Max=21791, Min=636, Avg=1646.7, 90=2257, 99=3299, 99.9=11135, 99.99=20799] 
2023-03-13 22:07:35:333 420 sec: 72833624 operations; 172207.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1635686, Max=212863, Min=606, Avg=2355.76, 90=3169, 99=5175, 99.9=12007, 99.99=120703] [UPDATE: Count=86395, Max=209151, Min=621, Avg=1664.17, 90=2265, 99=3379, 99.9=11175, 99.99=33983] 
2023-03-13 22:07:45:333 430 sec: 74593181 operations; 175955.7 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1671674, Max=47007, Min=613, Avg=2304.13, 90=3099, 99=4895, 99.9=10487, 99.99=22367] [UPDATE: Count=87920, Max=22799, Min=634, Avg=1654.79, 90=2269, 99=3499, 99.9=9471, 99.99=14511] 
2023-03-13 22:07:55:333 440 sec: 76362381 operations; 176920 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1680621, Max=22623, Min=611, Avg=2291.49, 90=3093, 99=4811, 99.9=12159, 99.99=14607] [UPDATE: Count=88542, Max=21167, Min=612, Avg=1647.19, 90=2257, 99=3383, 99.9=10775, 99.99=14071] 
2023-03-13 22:08:05:333 450 sec: 78123295 operations; 176091.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1672863, Max=53887, Min=600, Avg=2302.48, 90=3093, 99=4867, 99.9=12351, 99.99=27871] [UPDATE: Count=88062, Max=35391, Min=625, Avg=1650.91, 90=2251, 99=3359, 99.9=11295, 99.99=22607] 
2023-03-13 22:08:15:333 460 sec: 79864799 operations; 174150.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1654367, Max=44799, Min=619, Avg=2328.83, 90=3169, 99=5103, 99.9=11151, 99.99=23087] [UPDATE: Count=87130, Max=26175, Min=618, Avg=1657.27, 90=2283, 99=3441, 99.9=9679, 99.99=17663] 
2023-03-13 22:08:25:333 470 sec: 81023277 operations; 115847.8 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1100862, Max=138111, Min=596, Avg=3540.91, 90=5491, 99=11647, 99.9=43487, 99.99=94975] [UPDATE: Count=57617, Max=52895, Min=586, Avg=1733.31, 90=2583, 99=3591, 99.9=14847, 99.99=35327] 
2023-03-13 22:08:35:333 480 sec: 82316072 operations; 129279.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1228114, Max=55103, Min=605, Avg=3163.99, 90=5119, 99=9215, 99.9=17535, 99.99=30431] [UPDATE: Count=64658, Max=21983, Min=600, Avg=1730.23, 90=2621, 99=3341, 99.9=9495, 99.99=19599] 
2023-03-13 22:08:45:333 490 sec: 83662927 operations; 134685.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1279570, Max=63039, Min=605, Avg=3043.95, 90=5695, 99=9479, 99.9=15559, 99.99=36127] [UPDATE: Count=67270, Max=42911, Min=585, Avg=1502.63, 90=2087, 99=2879, 99.9=9175, 99.99=14183] 
2023-03-13 22:08:55:333 500 sec: 85106292 operations; 144336.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1371397, Max=27151, Min=606, Avg=2837.56, 90=4691, 99=7687, 99.9=11799, 99.99=16911] [UPDATE: Count=71985, Max=20527, Min=617, Avg=1500.15, 90=2028, 99=2859, 99.9=9199, 99.99=15175] 
2023-03-13 22:09:05:334 510 sec: 86576488 operations; 147019.6 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1396620, Max=83775, Min=590, Avg=2782.65, 90=4563, 99=7743, 99.9=25087, 99.99=45215] [UPDATE: Count=73624, Max=41695, Min=608, Avg=1514.38, 90=2061, 99=2935, 99.9=9983, 99.99=21871] 
2023-03-13 22:09:15:334 520 sec: 88115972 operations; 153948.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1462281, Max=58879, Min=605, Avg=2652.17, 90=4307, 99=7699, 99.9=15327, 99.99=31903] [UPDATE: Count=77208, Max=21999, Min=610, Avg=1522.31, 90=2053, 99=2923, 99.9=9727, 99.99=17551] 
2023-03-13 22:09:25:333 530 sec: 89662582 operations; 154661 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1469094, Max=32287, Min=605, Avg=2641, 90=4359, 99=7627, 99.9=12455, 99.99=27247] [UPDATE: Count=77468, Max=27759, Min=592, Avg=1513.84, 90=2035, 99=2839, 99.9=10487, 99.99=26271] 
2023-03-13 22:09:35:333 540 sec: 91209254 operations; 154667.2 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1469513, Max=60831, Min=616, Avg=2640.79, 90=4335, 99=7555, 99.9=12303, 99.99=35871] [UPDATE: Count=77193, Max=33407, Min=624, Avg=1513.28, 90=2037, 99=2847, 99.9=9799, 99.99=32063] 
2023-03-13 22:09:45:334 550 sec: 92762003 operations; 155274.9 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1474686, Max=19807, Min=604, Avg=2631.12, 90=4363, 99=7627, 99.9=11399, 99.99=14983] [UPDATE: Count=78073, Max=17327, Min=610, Avg=1503.95, 90=2039, 99=2839, 99.9=9335, 99.99=11639] 
2023-03-13 22:09:55:333 560 sec: 94315738 operations; 155373.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1476088, Max=50975, Min=581, Avg=2628.74, 90=4359, 99=7615, 99.9=12623, 99.99=25455] [UPDATE: Count=77635, Max=24687, Min=610, Avg=1507.14, 90=2020, 99=2845, 99.9=9559, 99.99=23167] 
2023-03-13 22:10:05:334 570 sec: 95865083 operations; 154934.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1471935, Max=59807, Min=595, Avg=2636.65, 90=4379, 99=7735, 99.9=11615, 99.99=31471] [UPDATE: Count=77434, Max=46623, Min=611, Avg=1504.8, 90=2024, 99=2839, 99.9=9559, 99.99=16431] 
2023-03-13 22:10:15:333 580 sec: 97418925 operations; 155384.2 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1475560, Max=31999, Min=583, Avg=2629.25, 90=4367, 99=7595, 99.9=11487, 99.99=26335] [UPDATE: Count=78251, Max=26767, Min=567, Avg=1503.22, 90=2027, 99=2851, 99.9=8975, 99.99=25087] 
2023-03-13 22:10:25:333 590 sec: 98956736 operations; 153781.1 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1460707, Max=48639, Min=597, Avg=2657.05, 90=4423, 99=7883, 99.9=13279, 99.99=23119] [UPDATE: Count=77097, Max=23887, Min=613, Avg=1508.08, 90=2027, 99=2849, 99.9=9631, 99.99=18063] 
2023-03-13 22:10:35:333 600 sec: 100494581 operations; 153784.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1460667, Max=63423, Min=599, Avg=2656.58, 90=4423, 99=7771, 99.9=13599, 99.99=29999] [UPDATE: Count=77171, Max=28495, Min=608, Avg=1515.67, 90=2022, 99=2855, 99.9=10839, 99.99=24559] 
2023-03-13 22:10:45:333 610 sec: 102051496 operations; 155691.5 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1479159, Max=25439, Min=608, Avg=2623.4, 90=4315, 99=7679, 99.9=11439, 99.99=17151] [UPDATE: Count=77752, Max=17007, Min=610, Avg=1504.13, 90=2029, 99=2781, 99.9=9231, 99.99=12599] 
2023-03-13 22:10:55:333 620 sec: 103612546 operations; 156105 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1482842, Max=55263, Min=594, Avg=2615.96, 90=4295, 99=7731, 99.9=11199, 99.99=23967] [UPDATE: Count=78198, Max=23439, Min=620, Avg=1512.28, 90=2028, 99=2839, 99.9=9271, 99.99=18127] 
2023-03-13 22:11:05:333 630 sec: 105166859 operations; 155431.3 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1476717, Max=52671, Min=604, Avg=2627.65, 90=4319, 99=7823, 99.9=11927, 99.99=26783] [UPDATE: Count=77600, Max=24399, Min=624, Avg=1507.93, 90=2019, 99=2809, 99.9=9583, 99.99=12439] 
2023-03-13 22:11:15:334 640 sec: 106717196 operations; 155033.7 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1472961, Max=43967, Min=590, Avg=2633.85, 90=4323, 99=7647, 99.9=11903, 99.99=38047] [UPDATE: Count=77416, Max=39231, Min=590, Avg=1522.81, 90=2051, 99=2865, 99.9=9815, 99.99=19983] 
2023-03-13 22:11:25:333 650 sec: 108264304 operations; 154710.8 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1469800, Max=57055, Min=584, Avg=2640.57, 90=4383, 99=7871, 99.9=11279, 99.99=30623] [UPDATE: Count=77298, Max=24143, Min=617, Avg=1503.27, 90=2013, 99=2823, 99.9=8863, 99.99=18079] 
2023-03-13 22:11:35:333 660 sec: 109816038 operations; 155173.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1473980, Max=50271, Min=602, Avg=2632.45, 90=4367, 99=7751, 99.9=11215, 99.99=26703] [UPDATE: Count=77730, Max=26063, Min=610, Avg=1505.94, 90=2016, 99=2821, 99.9=9287, 99.99=17839] 
2023-03-13 22:11:45:333 670 sec: 111364658 operations; 154862 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1471508, Max=31039, Min=611, Avg=2637.65, 90=4359, 99=7843, 99.9=12607, 99.99=25695] [UPDATE: Count=77104, Max=26255, Min=623, Avg=1504.53, 90=2008, 99=2775, 99.9=10423, 99.99=24607] 
2023-03-13 22:11:55:333 680 sec: 112914162 operations; 154950.4 current ops/sec; est completion in 1 hour 29 minutes [READ: Count=1472618, Max=43327, Min=603, Avg=2635.88, 90=4355, 99=7727, 99.9=11295, 99.99=27231] [UPDATE: Count=76914, Max=23471, Min=612, Avg=1505.78, 90=2016, 99=2861, 99.9=9383, 99.99=17855] 
2023-03-13 22:12:05:333 690 sec: 114460094 operations; 154593.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1468837, Max=47583, Min=593, Avg=2642.09, 90=4319, 99=7839, 99.9=12447, 99.99=24927] [UPDATE: Count=77078, Max=21775, Min=614, Avg=1511.81, 90=2031, 99=2807, 99.9=9823, 99.99=17471] 
2023-03-13 22:12:15:333 700 sec: 115981260 operations; 152116.6 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1445188, Max=215423, Min=595, Avg=2683.86, 90=4303, 99=7651, 99.9=15351, 99.99=190207] [UPDATE: Count=75988, Max=210815, Min=611, Avg=1560.23, 90=2008, 99=2831, 99.9=10823, 99.99=181247] 
2023-03-13 22:12:25:333 710 sec: 117538557 operations; 155729.7 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1479794, Max=59647, Min=596, Avg=2622.77, 90=4299, 99=7755, 99.9=11607, 99.99=30175] [UPDATE: Count=77488, Max=25327, Min=598, Avg=1501.12, 90=2007, 99=2767, 99.9=9431, 99.99=17119] 
2023-03-13 22:12:35:333 720 sec: 119094649 operations; 155609.2 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1477915, Max=56863, Min=613, Avg=2624.85, 90=4323, 99=7675, 99.9=10559, 99.99=26015] [UPDATE: Count=78177, Max=24591, Min=597, Avg=1509.41, 90=2018, 99=2841, 99.9=8671, 99.99=17487] 
2023-03-13 22:12:45:333 730 sec: 120648164 operations; 155351.5 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1475768, Max=20351, Min=606, Avg=2629.65, 90=4331, 99=7711, 99.9=11687, 99.99=15463] [UPDATE: Count=77747, Max=14991, Min=612, Avg=1500, 90=2013, 99=2779, 99.9=9007, 99.99=13039] 
2023-03-13 22:12:55:333 740 sec: 122196259 operations; 154809.5 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1470394, Max=56159, Min=593, Avg=2638.66, 90=4323, 99=7767, 99.9=12407, 99.99=26079] [UPDATE: Count=77706, Max=25887, Min=615, Avg=1509.77, 90=2018, 99=2789, 99.9=10247, 99.99=14007] 
2023-03-13 22:13:05:333 750 sec: 123753806 operations; 155754.7 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1479645, Max=54175, Min=595, Avg=2622.35, 90=4263, 99=7723, 99.9=11367, 99.99=30639] [UPDATE: Count=77896, Max=22415, Min=603, Avg=1505.42, 90=2021, 99=2793, 99.9=9023, 99.99=13847] 
2023-03-13 22:13:15:333 760 sec: 125313021 operations; 155921.5 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1481265, Max=17439, Min=599, Avg=2619.32, 90=4307, 99=7575, 99.9=10719, 99.99=13815] [UPDATE: Count=77944, Max=14951, Min=613, Avg=1507.21, 90=2025, 99=2817, 99.9=8431, 99.99=11815] 
2023-03-13 22:13:25:333 770 sec: 126863072 operations; 155005.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1472416, Max=56991, Min=603, Avg=2635.61, 90=4331, 99=7747, 99.9=12991, 99.99=31391] [UPDATE: Count=77641, Max=23103, Min=614, Avg=1501.42, 90=2006, 99=2779, 99.9=10527, 99.99=17263] 
2023-03-13 22:13:35:333 780 sec: 128402573 operations; 153950.1 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1462285, Max=58143, Min=597, Avg=2653.6, 90=4347, 99=7899, 99.9=15791, 99.99=30447] [UPDATE: Count=77211, Max=28655, Min=613, Avg=1515.55, 90=2019, 99=2843, 99.9=10751, 99.99=27343] 
2023-03-13 22:13:45:333 790 sec: 129946677 operations; 154410.4 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1467039, Max=28671, Min=590, Avg=2645.19, 90=4351, 99=7823, 99.9=12911, 99.99=24175] [UPDATE: Count=77074, Max=24383, Min=630, Avg=1513.97, 90=2021, 99=2797, 99.9=10159, 99.99=22911] 
2023-03-13 22:13:55:337 800 sec: 131498305 operations; 155116.27 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1473977, Max=51935, Min=587, Avg=2631.85, 90=4327, 99=7795, 99.9=12039, 99.99=24479] [UPDATE: Count=77674, Max=23583, Min=581, Avg=1505.93, 90=2015, 99=2781, 99.9=10175, 99.99=17903] 
2023-03-13 22:14:05:333 810 sec: 133053124 operations; 155528.56 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1477089, Max=39199, Min=611, Avg=2627.79, 90=4287, 99=7755, 99.9=11959, 99.99=33983] [UPDATE: Count=77699, Max=35519, Min=610, Avg=1506.56, 90=2009, 99=2757, 99.9=9983, 99.99=30543] 
2023-03-13 22:14:15:333 820 sec: 134612196 operations; 155907.2 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1480879, Max=60607, Min=607, Avg=2620.14, 90=4303, 99=7607, 99.9=11615, 99.99=27791] [UPDATE: Count=78202, Max=22639, Min=589, Avg=1499.51, 90=2000, 99=2763, 99.9=9887, 99.99=17871] 
2023-03-13 22:14:25:333 830 sec: 136144744 operations; 153254.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1455704, Max=216575, Min=608, Avg=2665.5, 90=4379, 99=7851, 99.9=12279, 99.99=124287] [UPDATE: Count=76843, Max=209279, Min=623, Avg=1523.09, 90=2014, 99=2811, 99.9=9759, 99.99=60863] 
2023-03-13 22:14:35:333 840 sec: 137689976 operations; 154523.2 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1467947, Max=32559, Min=603, Avg=2643.09, 90=4359, 99=7755, 99.9=11239, 99.99=27199] [UPDATE: Count=77288, Max=27631, Min=618, Avg=1520.84, 90=2037, 99=2867, 99.9=9199, 99.99=26991] 
2023-03-13 22:14:45:333 850 sec: 139220702 operations; 153072.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1454240, Max=216319, Min=594, Avg=2668.28, 90=4371, 99=7991, 99.9=13079, 99.99=139263] [UPDATE: Count=76482, Max=207615, Min=599, Avg=1531.28, 90=2014, 99=2857, 99.9=10407, 99.99=139903] 
2023-03-13 22:14:55:333 860 sec: 140774450 operations; 155374.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1476342, Max=55007, Min=595, Avg=2628.69, 90=4323, 99=7727, 99.9=11495, 99.99=25167] [UPDATE: Count=77399, Max=23023, Min=603, Avg=1504.2, 90=2008, 99=2785, 99.9=9759, 99.99=19087] 
2023-03-13 22:15:05:333 870 sec: 142331418 operations; 155696.8 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1479084, Max=20319, Min=602, Avg=2623.55, 90=4319, 99=7799, 99.9=11487, 99.99=14375] [UPDATE: Count=77901, Max=13447, Min=596, Avg=1500.9, 90=2008, 99=2777, 99.9=9559, 99.99=11767] 
2023-03-13 22:15:15:333 880 sec: 143884945 operations; 155352.7 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1475775, Max=56991, Min=609, Avg=2629.1, 90=4327, 99=7615, 99.9=11215, 99.99=27055] [UPDATE: Count=77741, Max=22607, Min=606, Avg=1509.84, 90=2022, 99=2823, 99.9=9079, 99.99=16815] 
2023-03-13 22:15:25:333 890 sec: 145425048 operations; 154010.3 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1463100, Max=52575, Min=605, Avg=2652.01, 90=4351, 99=7859, 99.9=12391, 99.99=32623] [UPDATE: Count=77052, Max=31343, Min=590, Avg=1520.93, 90=2025, 99=2847, 99.9=10151, 99.99=30495] 
2023-03-13 22:15:35:334 900 sec: 146973774 operations; 154872.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1471557, Max=25151, Min=604, Avg=2637.55, 90=4379, 99=7679, 99.9=11375, 99.99=18287] [UPDATE: Count=77142, Max=19007, Min=598, Avg=1505.47, 90=2019, 99=2783, 99.9=8831, 99.99=17311] 
2023-03-13 22:15:45:333 910 sec: 148519366 operations; 154559.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1468176, Max=63391, Min=600, Avg=2643.31, 90=4363, 99=7863, 99.9=11903, 99.99=33247] [UPDATE: Count=77434, Max=24559, Min=590, Avg=1503.83, 90=2012, 99=2833, 99.9=9991, 99.99=17951] 
2023-03-13 22:15:55:333 920 sec: 150075048 operations; 155568.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1478079, Max=61535, Min=580, Avg=2625.63, 90=4311, 99=7743, 99.9=11287, 99.99=33439] [UPDATE: Count=77559, Max=28735, Min=617, Avg=1499.36, 90=2005, 99=2763, 99.9=9479, 99.99=15063] 
2023-03-13 22:16:05:333 930 sec: 151623191 operations; 154814.3 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1470425, Max=20639, Min=598, Avg=2639.39, 90=4379, 99=7795, 99.9=11871, 99.99=15399] [UPDATE: Count=77724, Max=14391, Min=620, Avg=1498.01, 90=2009, 99=2779, 99.9=9839, 99.99=12967] 
2023-03-13 22:16:15:334 940 sec: 153172060 operations; 154886.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1471341, Max=56479, Min=596, Avg=2637.26, 90=4319, 99=7723, 99.9=11223, 99.99=32959] [UPDATE: Count=77566, Max=28303, Min=616, Avg=1512.15, 90=2022, 99=2829, 99.9=9055, 99.99=22207] 
2023-03-13 22:16:25:333 950 sec: 154718690 operations; 154663 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1469470, Max=49503, Min=613, Avg=2641.09, 90=4339, 99=7891, 99.9=13247, 99.99=27455] [UPDATE: Count=77115, Max=23791, Min=607, Avg=1506.24, 90=2004, 99=2771, 99.9=11207, 99.99=16975] 
2023-03-13 22:16:35:333 960 sec: 156267102 operations; 154841.2 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1471561, Max=43039, Min=586, Avg=2637.56, 90=4315, 99=7827, 99.9=12031, 99.99=37631] [UPDATE: Count=76892, Max=37855, Min=600, Avg=1510.17, 90=2018, 99=2791, 99.9=9703, 99.99=35775] 
2023-03-13 22:16:45:333 970 sec: 157812322 operations; 154522 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1467914, Max=59487, Min=616, Avg=2643.49, 90=4331, 99=7927, 99.9=15119, 99.99=33375] [UPDATE: Count=77268, Max=23935, Min=599, Avg=1511.84, 90=2011, 99=2815, 99.9=10479, 99.99=18367] 
2023-03-13 22:16:55:333 980 sec: 159361051 operations; 154872.9 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1471226, Max=55039, Min=606, Avg=2637.27, 90=4303, 99=7727, 99.9=13647, 99.99=34687] [UPDATE: Count=77499, Max=34303, Min=597, Avg=1512.71, 90=2019, 99=2777, 99.9=11095, 99.99=32927] 
2023-03-13 22:17:05:333 990 sec: 160904596 operations; 154354.5 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1466032, Max=22959, Min=588, Avg=2646.71, 90=4347, 99=7903, 99.9=12495, 99.99=18319] [UPDATE: Count=77533, Max=17071, Min=614, Avg=1512.58, 90=2018, 99=2817, 99.9=10183, 99.99=16079] 
2023-03-13 22:17:15:333 1000 sec: 162450670 operations; 154607.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1468671, Max=213247, Min=596, Avg=2641.29, 90=4255, 99=7751, 99.9=12079, 99.99=116927] [UPDATE: Count=77425, Max=207743, Min=611, Avg=1526.85, 90=2014, 99=2823, 99.9=10295, 99.99=106879] 
2023-03-13 22:17:25:333 1010 sec: 163989364 operations; 153869.4 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1461336, Max=55967, Min=609, Avg=2655.94, 90=4335, 99=7927, 99.9=12887, 99.99=28127] [UPDATE: Count=77311, Max=23583, Min=611, Avg=1500.26, 90=2003, 99=2775, 99.9=9687, 99.99=18863] 
2023-03-13 22:17:35:333 1020 sec: 165535553 operations; 154618.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1468737, Max=215551, Min=616, Avg=2641.64, 90=4239, 99=7599, 99.9=11863, 99.99=130815] [UPDATE: Count=77457, Max=214271, Min=587, Avg=1516.05, 90=2001, 99=2749, 99.9=9535, 99.99=133247] 
2023-03-13 22:17:45:333 1030 sec: 167075502 operations; 153994.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1463168, Max=212607, Min=614, Avg=2652.68, 90=4283, 99=7699, 99.9=11927, 99.99=116159] [UPDATE: Count=76807, Max=204159, Min=611, Avg=1512.27, 90=1989, 99=2759, 99.9=9503, 99.99=54495] 
2023-03-13 22:17:55:333 1040 sec: 168625181 operations; 154967.9 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1472334, Max=50239, Min=615, Avg=2635.62, 90=4283, 99=7555, 99.9=11647, 99.99=29471] [UPDATE: Count=77313, Max=25551, Min=607, Avg=1510.27, 90=2018, 99=2801, 99.9=9815, 99.99=24431] 
2023-03-13 22:18:05:333 1050 sec: 170175281 operations; 155010 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1472878, Max=17359, Min=602, Avg=2635.08, 90=4323, 99=7739, 99.9=11263, 99.99=13671] [UPDATE: Count=77224, Max=12863, Min=626, Avg=1503.23, 90=2000, 99=2755, 99.9=9215, 99.99=11311] 
2023-03-13 22:18:15:333 1060 sec: 171724662 operations; 154938.1 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1472210, Max=50815, Min=596, Avg=2636.21, 90=4331, 99=7715, 99.9=12487, 99.99=25967] [UPDATE: Count=77165, Max=24815, Min=621, Avg=1507.32, 90=2012, 99=2797, 99.9=10015, 99.99=17135] 
2023-03-13 22:18:25:333 1070 sec: 173276618 operations; 155195.6 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1474022, Max=55935, Min=596, Avg=2633.02, 90=4331, 99=7739, 99.9=11455, 99.99=31503] [UPDATE: Count=77951, Max=32895, Min=623, Avg=1492.82, 90=1987, 99=2743, 99.9=8991, 99.99=12543] 
2023-03-13 22:18:35:333 1080 sec: 174831146 operations; 155452.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1476652, Max=24111, Min=573, Avg=2627.83, 90=4295, 99=7559, 99.9=11551, 99.99=18335] [UPDATE: Count=77859, Max=18143, Min=622, Avg=1500.48, 90=2005, 99=2735, 99.9=9527, 99.99=17103] 
2023-03-13 22:18:45:333 1090 sec: 176367474 operations; 153632.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1459062, Max=67007, Min=610, Avg=2659.5, 90=4311, 99=7723, 99.9=13359, 99.99=32271] [UPDATE: Count=77292, Max=23983, Min=613, Avg=1514.26, 90=2013, 99=2827, 99.9=10559, 99.99=22511] 
2023-03-13 22:18:55:333 1100 sec: 177924022 operations; 155654.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1478722, Max=19951, Min=614, Avg=2624.22, 90=4259, 99=7435, 99.9=11287, 99.99=14335] [UPDATE: Count=77817, Max=13567, Min=624, Avg=1502.76, 90=2011, 99=2755, 99.9=9135, 99.99=12191] 
2023-03-13 22:19:05:333 1110 sec: 179462911 operations; 153888.9 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1462573, Max=59071, Min=604, Avg=2653.98, 90=4347, 99=7871, 99.9=16207, 99.99=31439] [UPDATE: Count=76314, Max=29615, Min=609, Avg=1515.34, 90=2016, 99=2825, 99.9=10335, 99.99=28543] 
2023-03-13 22:19:15:333 1120 sec: 181011676 operations; 154876.5 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1471528, Max=53823, Min=594, Avg=2637.15, 90=4291, 99=7699, 99.9=13143, 99.99=33663] [UPDATE: Count=77245, Max=24687, Min=618, Avg=1511.13, 90=2007, 99=2787, 99.9=10767, 99.99=21439] 
2023-03-13 22:19:25:333 1130 sec: 182568626 operations; 155695 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1479380, Max=21807, Min=609, Avg=2623.78, 90=4287, 99=7679, 99.9=11975, 99.99=17455] [UPDATE: Count=77553, Max=18287, Min=620, Avg=1492.15, 90=1990, 99=2725, 99.9=9783, 99.99=14287] 
2023-03-13 22:19:35:333 1140 sec: 184115211 operations; 154658.5 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1469532, Max=57855, Min=598, Avg=2640.92, 90=4375, 99=7683, 99.9=12351, 99.99=28303] [UPDATE: Count=77057, Max=25599, Min=600, Avg=1510.96, 90=2012, 99=2859, 99.9=10191, 99.99=20351] 
2023-03-13 22:19:45:333 1150 sec: 185659238 operations; 154402.7 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1466935, Max=53183, Min=587, Avg=2645.67, 90=4355, 99=7755, 99.9=13463, 99.99=28511] [UPDATE: Count=77085, Max=25759, Min=595, Avg=1509.2, 90=2004, 99=2787, 99.9=10607, 99.99=25103] 
2023-03-13 22:19:55:333 1160 sec: 187209609 operations; 155037.1 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1472700, Max=40575, Min=608, Avg=2634.57, 90=4303, 99=7627, 99.9=13391, 99.99=36223] [UPDATE: Count=77680, Max=36159, Min=608, Avg=1511.51, 90=2016, 99=2781, 99.9=9823, 99.99=14511] 
2023-03-13 22:20:05:333 1170 sec: 188757302 operations; 154769.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1470579, Max=51039, Min=601, Avg=2639.7, 90=4339, 99=7803, 99.9=11927, 99.99=27167] [UPDATE: Count=77112, Max=26335, Min=607, Avg=1497.25, 90=1994, 99=2747, 99.9=10047, 99.99=13311] 
2023-03-13 22:20:15:333 1180 sec: 190306452 operations; 154915 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1471899, Max=58143, Min=607, Avg=2636.42, 90=4303, 99=7735, 99.9=13087, 99.99=34687] [UPDATE: Count=77251, Max=28895, Min=608, Avg=1511.3, 90=2014, 99=2761, 99.9=10287, 99.99=26719] 
2023-03-13 22:20:25:333 1190 sec: 191859758 operations; 155330.6 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1475515, Max=22015, Min=616, Avg=2629.63, 90=4327, 99=7691, 99.9=11023, 99.99=16799] [UPDATE: Count=77801, Max=16927, Min=615, Avg=1507.94, 90=2019, 99=2793, 99.9=8703, 99.99=15535] 
2023-03-13 22:20:35:333 1200 sec: 193404358 operations; 154460 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1467685, Max=48223, Min=616, Avg=2644.04, 90=4315, 99=7631, 99.9=12055, 99.99=38847] [UPDATE: Count=76928, Max=37919, Min=605, Avg=1517.45, 90=2030, 99=2809, 99.9=9951, 99.99=36671] 
2023-03-13 22:20:45:333 1210 sec: 194942761 operations; 153840.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1461664, Max=122047, Min=601, Avg=2655.92, 90=4387, 99=7735, 99.9=10815, 99.99=92799] [UPDATE: Count=76725, Max=71743, Min=624, Avg=1501.7, 90=1995, 99=2743, 99.9=9247, 99.99=22015] 
2023-03-13 22:20:55:333 1220 sec: 196509666 operations; 156690.5 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1488401, Max=21327, Min=599, Avg=2606.97, 90=4271, 99=7443, 99.9=11335, 99.99=17375] [UPDATE: Count=78483, Max=16975, Min=618, Avg=1492.94, 90=1994, 99=2727, 99.9=9543, 99.99=15983] 
2023-03-13 22:21:05:333 1230 sec: 198062053 operations; 155238.7 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1475461, Max=52575, Min=613, Avg=2630.87, 90=4319, 99=7767, 99.9=11639, 99.99=26863] [UPDATE: Count=76943, Max=25615, Min=586, Avg=1505.55, 90=2005, 99=2775, 99.9=9943, 99.99=19487] 
2023-03-13 22:21:15:333 1240 sec: 199613134 operations; 155108.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1473212, Max=22783, Min=606, Avg=2633.8, 90=4343, 99=7587, 99.9=11615, 99.99=14623] [UPDATE: Count=77875, Max=12743, Min=617, Avg=1505.63, 90=2018, 99=2757, 99.9=9623, 99.99=11887] 
2023-03-13 22:21:25:333 1250 sec: 201166255 operations; 155312.1 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1475323, Max=56255, Min=600, Avg=2630.12, 90=4307, 99=7675, 99.9=12151, 99.99=34879] [UPDATE: Count=77815, Max=24431, Min=613, Avg=1507.25, 90=2008, 99=2789, 99.9=9487, 99.99=17663] 
2023-03-13 22:21:35:333 1260 sec: 202714232 operations; 154797.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1470392, Max=49375, Min=586, Avg=2639.07, 90=4347, 99=7691, 99.9=11663, 99.99=25599] [UPDATE: Count=77555, Max=22975, Min=618, Avg=1508.65, 90=2011, 99=2791, 99.9=9583, 99.99=15575] 
2023-03-13 22:21:45:333 1270 sec: 204259420 operations; 154518.8 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1468072, Max=59615, Min=592, Avg=2643.85, 90=4343, 99=7695, 99.9=12767, 99.99=35103] [UPDATE: Count=77112, Max=36223, Min=602, Avg=1505.35, 90=1998, 99=2777, 99.9=9495, 99.99=28639] 
2023-03-13 22:21:55:333 1280 sec: 205814767 operations; 155534.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1477198, Max=17487, Min=597, Avg=2627, 90=4343, 99=7707, 99.9=11183, 99.99=14591] [UPDATE: Count=78161, Max=13479, Min=614, Avg=1494.58, 90=1995, 99=2743, 99.9=9311, 99.99=12335] 
2023-03-13 22:22:05:333 1290 sec: 207358194 operations; 154342.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1466492, Max=56127, Min=601, Avg=2646.05, 90=4331, 99=7771, 99.9=12639, 99.99=33695] [UPDATE: Count=76932, Max=33983, Min=623, Avg=1521.03, 90=2021, 99=2861, 99.9=9951, 99.99=28031] 
2023-03-13 22:22:15:333 1300 sec: 208908688 operations; 155049.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1473143, Max=30159, Min=598, Avg=2634.33, 90=4335, 99=7615, 99.9=12047, 99.99=24143] [UPDATE: Count=77349, Max=24367, Min=626, Avg=1507.47, 90=2015, 99=2781, 99.9=10111, 99.99=13399] 
2023-03-13 22:22:25:333 1310 sec: 210456266 operations; 154757.8 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1470728, Max=56511, Min=602, Avg=2639.6, 90=4359, 99=7835, 99.9=11535, 99.99=34079] [UPDATE: Count=76840, Max=33439, Min=613, Avg=1500.9, 90=1995, 99=2819, 99.9=9543, 99.99=14551] 
2023-03-13 22:22:35:333 1320 sec: 212009110 operations; 155284.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1475677, Max=56959, Min=588, Avg=2630.33, 90=4323, 99=7663, 99.9=11479, 99.99=30863] [UPDATE: Count=77167, Max=21583, Min=616, Avg=1503.07, 90=2006, 99=2777, 99.9=9647, 99.99=14791] 
2023-03-13 22:22:45:333 1330 sec: 213563217 operations; 155410.7 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1476892, Max=27087, Min=604, Avg=2628.33, 90=4319, 99=7731, 99.9=11127, 99.99=16607] [UPDATE: Count=77215, Max=21103, Min=614, Avg=1499.89, 90=2009, 99=2767, 99.9=9239, 99.99=15031] 
2023-03-13 22:22:55:333 1340 sec: 215099296 operations; 153607.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1459176, Max=213119, Min=568, Avg=2658.86, 90=4355, 99=7659, 99.9=12887, 99.99=135551] [UPDATE: Count=76909, Max=209151, Min=610, Avg=1530.49, 90=2003, 99=2799, 99.9=9743, 99.99=156671] 
2023-03-13 22:23:05:333 1350 sec: 216641427 operations; 154213.1 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1464910, Max=56639, Min=588, Avg=2649.1, 90=4379, 99=7839, 99.9=13231, 99.99=27103] [UPDATE: Count=77215, Max=23519, Min=606, Avg=1512.23, 90=2013, 99=2851, 99.9=10447, 99.99=16215] 
2023-03-13 22:23:15:333 1360 sec: 218197300 operations; 155587.3 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1477930, Max=34527, Min=602, Avg=2625.32, 90=4315, 99=7551, 99.9=11599, 99.99=28111] [UPDATE: Count=77942, Max=27999, Min=609, Avg=1505.64, 90=2009, 99=2771, 99.9=9815, 99.99=26543] 
2023-03-13 22:23:25:333 1370 sec: 219752609 operations; 155530.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1477993, Max=54943, Min=591, Avg=2626.54, 90=4343, 99=7631, 99.9=10679, 99.99=25311] [UPDATE: Count=77335, Max=24431, Min=622, Avg=1494.76, 90=1989, 99=2755, 99.9=8239, 99.99=14975] 
2023-03-13 22:23:35:333 1380 sec: 221302059 operations; 154945 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1471709, Max=54751, Min=595, Avg=2636.36, 90=4319, 99=7703, 99.9=14071, 99.99=32623] [UPDATE: Count=77729, Max=31151, Min=622, Avg=1510.66, 90=2009, 99=2793, 99.9=11471, 99.99=28575] 
2023-03-13 22:23:45:333 1390 sec: 222849715 operations; 154765.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1470374, Max=34751, Min=608, Avg=2639.51, 90=4359, 99=7775, 99.9=10807, 99.99=29711] [UPDATE: Count=77269, Max=29871, Min=595, Avg=1507.6, 90=2012, 99=2831, 99.9=8831, 99.99=28111] 
2023-03-13 22:23:55:333 1400 sec: 224396524 operations; 154680.9 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1469598, Max=59071, Min=612, Avg=2640.58, 90=4339, 99=7691, 99.9=12687, 99.99=29055] [UPDATE: Count=77226, Max=23823, Min=602, Avg=1513.74, 90=2021, 99=2811, 99.9=10319, 99.99=18975] 
2023-03-13 22:24:05:333 1410 sec: 225952838 operations; 155631.4 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1478637, Max=58431, Min=591, Avg=2624.69, 90=4279, 99=7759, 99.9=11727, 99.99=28383] [UPDATE: Count=77674, Max=24095, Min=621, Avg=1498.36, 90=1994, 99=2769, 99.9=9535, 99.99=13103] 
2023-03-13 22:24:15:333 1420 sec: 227512068 operations; 155923 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1481476, Max=19135, Min=601, Avg=2619.63, 90=4287, 99=7595, 99.9=11447, 99.99=14631] [UPDATE: Count=77752, Max=17455, Min=616, Avg=1500.24, 90=2005, 99=2751, 99.9=9855, 99.99=12103] 
2023-03-13 22:24:25:333 1430 sec: 229061546 operations; 154947.8 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1471770, Max=52255, Min=603, Avg=2636.81, 90=4319, 99=7691, 99.9=12423, 99.99=32607] [UPDATE: Count=77711, Max=33951, Min=588, Avg=1502.52, 90=1999, 99=2773, 99.9=10287, 99.99=30015] 
2023-03-13 22:24:35:333 1440 sec: 230612535 operations; 155098.9 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1473698, Max=20543, Min=601, Avg=2633.6, 90=4331, 99=7639, 99.9=11207, 99.99=14839] [UPDATE: Count=77276, Max=14319, Min=614, Avg=1504.34, 90=2013, 99=2783, 99.9=8911, 99.99=13615] 
2023-03-13 22:24:45:333 1450 sec: 232159725 operations; 154719 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1469719, Max=50367, Min=615, Avg=2640.66, 90=4359, 99=7671, 99.9=10919, 99.99=28943] [UPDATE: Count=77483, Max=24015, Min=627, Avg=1502.84, 90=2013, 99=2793, 99.9=8735, 99.99=13519] 
2023-03-13 22:24:55:333 1460 sec: 233708862 operations; 154913.7 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1471010, Max=52127, Min=596, Avg=2637.39, 90=4327, 99=7699, 99.9=12735, 99.99=26511] [UPDATE: Count=78125, Max=25231, Min=611, Avg=1507.3, 90=2004, 99=2817, 99.9=9543, 99.99=19183] 
2023-03-13 22:25:05:333 1470 sec: 235257430 operations; 154856.8 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1471492, Max=34463, Min=611, Avg=2638.28, 90=4327, 99=7743, 99.9=12895, 99.99=27967] [UPDATE: Count=77086, Max=28127, Min=599, Avg=1497.07, 90=1992, 99=2721, 99.9=10847, 99.99=27023] 
2023-03-13 22:25:15:333 1480 sec: 236812503 operations; 155507.3 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1477138, Max=59199, Min=609, Avg=2627.21, 90=4299, 99=7615, 99.9=11111, 99.99=26463] [UPDATE: Count=77927, Max=24783, Min=601, Avg=1498.19, 90=1995, 99=2747, 99.9=8911, 99.99=15919] 
2023-03-13 22:25:25:333 1490 sec: 238351824 operations; 153932.1 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1462227, Max=54111, Min=612, Avg=2654.15, 90=4363, 99=7863, 99.9=12775, 99.99=29151] [UPDATE: Count=77094, Max=25455, Min=616, Avg=1509.98, 90=2016, 99=2827, 99.9=10511, 99.99=14895] 
2023-03-13 22:25:35:333 1500 sec: 239911817 operations; 155999.3 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1481839, Max=18527, Min=605, Avg=2618.54, 90=4275, 99=7531, 99.9=10495, 99.99=13551] [UPDATE: Count=78159, Max=12175, Min=603, Avg=1500.57, 90=2017, 99=2739, 99.9=8839, 99.99=10959] 
2023-03-13 22:25:45:333 1510 sec: 241489664 operations; 157784.7 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1499201, Max=55999, Min=606, Avg=2586.61, 90=4043, 99=7335, 99.9=15215, 99.99=31071] [UPDATE: Count=78642, Max=27695, Min=609, Avg=1520.29, 90=2035, 99=2817, 99.9=10383, 99.99=25375] 
2023-03-13 22:25:55:333 1520 sec: 243143927 operations; 165426.3 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1572128, Max=57183, Min=618, Avg=2461.31, 90=3545, 99=6303, 99.9=11487, 99.99=26319] [UPDATE: Count=82132, Max=23935, Min=628, Avg=1559.58, 90=2109, 99=2997, 99.9=9903, 99.99=12407] 
2023-03-13 22:26:05:333 1530 sec: 244832157 operations; 168823 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1603183, Max=16447, Min=612, Avg=2409.35, 90=3377, 99=5695, 99.9=11039, 99.99=13335] [UPDATE: Count=85042, Max=12967, Min=619, Avg=1584.48, 90=2161, 99=3033, 99.9=9479, 99.99=11991] 
2023-03-13 22:26:15:333 1540 sec: 246522022 operations; 168986.5 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1605642, Max=49567, Min=618, Avg=2404.28, 90=3467, 99=5351, 99.9=11103, 99.99=22959] [UPDATE: Count=84232, Max=20367, Min=610, Avg=1624.86, 90=2261, 99=3229, 99.9=9887, 99.99=12015] 
2023-03-13 22:26:25:333 1550 sec: 248218282 operations; 169626 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1611168, Max=57023, Min=615, Avg=2393.97, 90=3537, 99=5143, 99.9=12295, 99.99=29743] [UPDATE: Count=85111, Max=42047, Min=623, Avg=1648.88, 90=2343, 99=3327, 99.9=10647, 99.99=17919] 
2023-03-13 22:26:35:333 1560 sec: 249956211 operations; 173792.9 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1651079, Max=46815, Min=611, Avg=2334.05, 90=3183, 99=4907, 99.9=12423, 99.99=43135] [UPDATE: Count=86858, Max=43967, Min=634, Avg=1652.32, 90=2273, 99=3371, 99.9=11591, 99.99=42911] 
2023-03-13 22:26:45:333 1570 sec: 251730693 operations; 177448.2 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1685789, Max=55007, Min=605, Avg=2285.54, 90=3009, 99=4487, 99.9=12815, 99.99=31471] [UPDATE: Count=88665, Max=23487, Min=631, Avg=1626.75, 90=2193, 99=3279, 99.9=10071, 99.99=21487] 
2023-03-13 22:26:55:333 1580 sec: 253497361 operations; 176666.8 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1678317, Max=50687, Min=590, Avg=2295.41, 90=3019, 99=4451, 99.9=15431, 99.99=37887] [UPDATE: Count=88347, Max=42623, Min=614, Avg=1638.83, 90=2209, 99=3389, 99.9=12343, 99.99=37215] 
2023-03-13 22:27:05:333 1590 sec: 255273206 operations; 177584.5 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1687431, Max=17423, Min=614, Avg=2283.08, 90=3027, 99=4431, 99.9=10967, 99.99=14431] [UPDATE: Count=88422, Max=14815, Min=632, Avg=1636.16, 90=2217, 99=3373, 99.9=10151, 99.99=13583] 
2023-03-13 22:27:15:333 1600 sec: 257040988 operations; 176778.2 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1679619, Max=48831, Min=616, Avg=2293.47, 90=3031, 99=4435, 99.9=11895, 99.99=26879] [UPDATE: Count=88161, Max=26591, Min=628, Avg=1644.97, 90=2217, 99=3403, 99.9=10935, 99.99=25183] 
2023-03-13 22:27:25:333 1610 sec: 258808830 operations; 176784.2 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1679473, Max=57375, Min=621, Avg=2293.97, 90=3029, 99=4419, 99.9=12919, 99.99=26767] [UPDATE: Count=88392, Max=48191, Min=619, Avg=1636.34, 90=2209, 99=3349, 99.9=11591, 99.99=21471] 
2023-03-13 22:27:35:333 1620 sec: 260579149 operations; 177031.9 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1681362, Max=48447, Min=622, Avg=2290.87, 90=3017, 99=4455, 99.9=12863, 99.99=38143] [UPDATE: Count=88964, Max=38719, Min=610, Avg=1635.62, 90=2199, 99=3317, 99.9=10903, 99.99=37535] 
2023-03-13 22:27:45:333 1630 sec: 262356355 operations; 177720.6 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1688114, Max=49055, Min=621, Avg=2281.86, 90=3011, 99=4347, 99.9=13959, 99.99=30751] [UPDATE: Count=89079, Max=31391, Min=621, Avg=1628.8, 90=2187, 99=3301, 99.9=11511, 99.99=29823] 
2023-03-13 22:27:55:333 1640 sec: 264126939 operations; 177058.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1682414, Max=50495, Min=625, Avg=2290.09, 90=3029, 99=4515, 99.9=11951, 99.99=26031] [UPDATE: Count=88166, Max=24223, Min=627, Avg=1636.88, 90=2219, 99=3377, 99.9=10623, 99.99=18255] 
2023-03-13 22:28:05:333 1650 sec: 265898879 operations; 177194 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1683135, Max=17871, Min=621, Avg=2288.37, 90=3037, 99=4443, 99.9=11711, 99.99=14967] [UPDATE: Count=88789, Max=15135, Min=633, Avg=1638.43, 90=2221, 99=3411, 99.9=10839, 99.99=13903] 
2023-03-13 22:28:15:333 1660 sec: 267667434 operations; 176855.5 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1679912, Max=50559, Min=619, Avg=2292.9, 90=3023, 99=4471, 99.9=13303, 99.99=26431] [UPDATE: Count=88645, Max=26751, Min=632, Avg=1639.48, 90=2209, 99=3363, 99.9=11695, 99.99=23631] 
2023-03-13 22:28:25:333 1670 sec: 269433267 operations; 176583.3 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1677219, Max=51423, Min=634, Avg=2296.74, 90=3015, 99=4471, 99.9=13799, 99.99=29743] [UPDATE: Count=88611, Max=25695, Min=620, Avg=1638.07, 90=2197, 99=3349, 99.9=11623, 99.99=24415] 
2023-03-13 22:28:35:333 1680 sec: 271219693 operations; 178642.6 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1697360, Max=16359, Min=620, Avg=2269.83, 90=3009, 99=4403, 99.9=9799, 99.99=12391] [UPDATE: Count=89075, Max=12031, Min=617, Avg=1622.71, 90=2201, 99=3293, 99.9=8559, 99.99=10927] 
2023-03-13 22:28:45:333 1690 sec: 272988768 operations; 176907.5 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1680413, Max=46591, Min=621, Avg=2292.2, 90=3025, 99=4463, 99.9=12687, 99.99=25551] [UPDATE: Count=88663, Max=25423, Min=592, Avg=1639.21, 90=2217, 99=3387, 99.9=11743, 99.99=23887] 
2023-03-13 22:28:55:333 1700 sec: 274764336 operations; 177556.8 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1686718, Max=54783, Min=601, Avg=2283.68, 90=3023, 99=4387, 99.9=11431, 99.99=30031] [UPDATE: Count=88837, Max=25951, Min=621, Avg=1635.13, 90=2213, 99=3315, 99.9=10103, 99.99=18879] 
2023-03-13 22:29:05:333 1710 sec: 276544731 operations; 178039.5 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1691761, Max=19151, Min=617, Avg=2277.46, 90=3015, 99=4423, 99.9=11159, 99.99=15143] [UPDATE: Count=88638, Max=16591, Min=625, Avg=1627.87, 90=2205, 99=3285, 99.9=10479, 99.99=14711] 
2023-03-13 22:29:15:333 1720 sec: 278322999 operations; 177826.8 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1688659, Max=46783, Min=627, Avg=2280.67, 90=3015, 99=4435, 99.9=10991, 99.99=24399] [UPDATE: Count=89623, Max=24303, Min=626, Avg=1629.04, 90=2201, 99=3353, 99.9=9967, 99.99=16783] 
2023-03-13 22:29:25:333 1730 sec: 280104548 operations; 178154.9 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1692562, Max=20639, Min=628, Avg=2276.39, 90=3007, 99=4355, 99.9=12687, 99.99=17887] [UPDATE: Count=88975, Max=18255, Min=602, Avg=1621.81, 90=2191, 99=3257, 99.9=11183, 99.99=17247] 
2023-03-13 22:29:35:333 1740 sec: 281877636 operations; 177308.8 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1684514, Max=47103, Min=618, Avg=2286.67, 90=3025, 99=4523, 99.9=11871, 99.99=23567] [UPDATE: Count=88615, Max=24351, Min=634, Avg=1640.41, 90=2213, 99=3417, 99.9=10623, 99.99=17855] 
2023-03-13 22:29:45:333 1750 sec: 283656617 operations; 177898.1 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1690420, Max=47903, Min=619, Avg=2278.76, 90=3027, 99=4387, 99.9=12831, 99.99=24255] [UPDATE: Count=88601, Max=45663, Min=607, Avg=1638.86, 90=2223, 99=3381, 99.9=11871, 99.99=15799] 
2023-03-13 22:29:55:333 1760 sec: 285414770 operations; 175815.3 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1670438, Max=56799, Min=627, Avg=2306.25, 90=3023, 99=4635, 99.9=15047, 99.99=31839] [UPDATE: Count=87680, Max=32559, Min=621, Avg=1650.32, 90=2217, 99=3423, 99.9=11967, 99.99=30319] 
2023-03-13 22:30:05:333 1770 sec: 287192263 operations; 177749.3 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1688279, Max=21375, Min=610, Avg=2281.43, 90=3019, 99=4471, 99.9=11055, 99.99=16031] [UPDATE: Count=89208, Max=16655, Min=615, Avg=1631.03, 90=2207, 99=3329, 99.9=10007, 99.99=15447] 
2023-03-13 22:30:15:333 1780 sec: 288975368 operations; 178310.5 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1694089, Max=44671, Min=609, Avg=2273.98, 90=3013, 99=4355, 99.9=11703, 99.99=22975] [UPDATE: Count=89042, Max=23695, Min=617, Avg=1628.49, 90=2199, 99=3309, 99.9=10671, 99.99=18223] 
2023-03-13 22:30:25:334 1790 sec: 290761012 operations; 178564.4 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1696136, Max=19775, Min=624, Avg=2270.73, 90=3019, 99=4355, 99.9=11063, 99.99=17231] [UPDATE: Count=89476, Max=18863, Min=610, Avg=1629.88, 90=2211, 99=3333, 99.9=10199, 99.99=16175] 
2023-03-13 22:30:35:333 1800 sec: 292535652 operations; 177464 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1685391, Max=58303, Min=606, Avg=2284.48, 90=3017, 99=4435, 99.9=12215, 99.99=32799] [UPDATE: Count=89222, Max=37087, Min=621, Avg=1645.28, 90=2223, 99=3427, 99.9=11367, 99.99=17327] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-115 to complete. Workload status: true
2023-03-13 22:30:37:603 1802 sec: 292542046 operations; 2816.74 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=6080, Max=6851, Min=663, Avg=2288.54, 90=3091, 99=4831, 99.9=6599, 99.99=6763] [CLEANUP: Count=400, Max=2226175, Min=0, Avg=5564.09, 90=2, 99=8, 99.9=2226175, 99.99=2226175] [UPDATE: Count=274, Max=4679, Min=665, Avg=1608.1, 90=2207, 99=3651, 99.9=4679, 99.99=4679] 
[OVERALL], RunTime(ms), 1802268
[OVERALL], Throughput(ops/sec), 162318.83715407475
[TOTAL_GCS_PS_Scavenge], Count, 3235
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18885
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.04784638022758
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 92
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0051046792152998335
[TOTAL_GCs], Count, 3237
[TOTAL_GC_TIME], Time(ms), 18977
[TOTAL_GC_TIME_%], Time(%), 1.0529510594428797
[READ], Operations, 277915017
[READ], AverageLatency(us), 2505.1037088974576
[READ], MinLatency(us), 568
[READ], MaxLatency(us), 221311
[READ], 95thPercentileLatency(us), 4739
[READ], 99thPercentileLatency(us), 7291
[READ], Return=OK, 277915017
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5564.09
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 8
[UPDATE], Operations, 14627029
[UPDATE], AverageLatency(us), 1574.778275752376
[UPDATE], MinLatency(us), 567
[UPDATE], MaxLatency(us), 214271
[UPDATE], 95thPercentileLatency(us), 2391
[UPDATE], 99thPercentileLatency(us), 3151
[UPDATE], Return=OK, 14627029
