bin/ycsb load scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -load
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.11.159.190,54.191.187.24,52.88.225.241 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=39tbuDCyG8TfMIo -p scylla.writeconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=1 -p fieldlength=1000 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -load
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-13 20:40:56:275 0 sec: 0 operations; est completion in 0 second 
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_2' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.203.71.187:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.191.187.24:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /44.242.61.55:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.10.157.233:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.11.159.190:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.88.225.241:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: 35353fa3-186a-4709-9b2d-ca9b493452e4

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.10.157.233; Rack: us-west-2c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.191.187.24; Rack: us-west-2b

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /54.203.71.187; Rack: us-west-2a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.88.225.241; Rack: us-west-2a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /44.242.61.55; Rack: us-west-2b

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_2; Host: /52.11.159.190; Rack: us-west-2c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: ONE

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='INSERT INTO usertable (y_id,field0) VALUES (?,?);'
2023-03-13 20:41:06:258 10 sec: 1109396 operations; 110939.6 current ops/sec; est completion in 2 hours 30 minutes [INSERT: Count=1109534, Max=706559, Min=310, Avg=3316.04, 90=4403, 99=38431, 99.9=177535, 99.99=511743] 
2023-03-13 20:41:16:258 20 sec: 3317264 operations; 220786.8 current ops/sec; est completion in 1 hour 40 minutes [INSERT: Count=2207828, Max=51455, Min=302, Avg=1809.78, 90=3157, 99=12199, 99.9=25583, 99.99=35103] 
2023-03-13 20:41:26:258 30 sec: 5621476 operations; 230421.2 current ops/sec; est completion in 1 hour 28 minutes [INSERT: Count=2304196, Max=34367, Min=289, Avg=1734.12, 90=3049, 99=9431, 99.9=18383, 99.99=25407] 
2023-03-13 20:41:36:257 40 sec: 7907909 operations; 228643.3 current ops/sec; est completion in 1 hour 23 minutes [INSERT: Count=2286444, Max=45215, Min=293, Avg=1747.52, 90=3083, 99=9767, 99.9=19775, 99.99=32479] 
2023-03-13 20:41:46:257 50 sec: 10165870 operations; 225796.1 current ops/sec; est completion in 1 hour 21 minutes [INSERT: Count=2257941, Max=43807, Min=290, Avg=1769.64, 90=3095, 99=10167, 99.9=22095, 99.99=31135] 
2023-03-13 20:41:56:258 60 sec: 12426410 operations; 226054 current ops/sec; est completion in 1 hour 19 minutes [INSERT: Count=2260581, Max=51295, Min=298, Avg=1767.72, 90=3125, 99=10143, 99.9=19711, 99.99=28911] 
2023-03-13 20:42:06:257 70 sec: 14716305 operations; 228989.5 current ops/sec; est completion in 1 hour 18 minutes [INSERT: Count=2289880, Max=44319, Min=309, Avg=1744.96, 90=3047, 99=9479, 99.9=19903, 99.99=35615] 
2023-03-13 20:42:16:257 80 sec: 16976483 operations; 226017.8 current ops/sec; est completion in 1 hour 17 minutes [INSERT: Count=2260158, Max=94335, Min=302, Avg=1767.63, 90=3045, 99=9967, 99.9=22511, 99.99=72639] 
2023-03-13 20:42:26:257 90 sec: 19259506 operations; 228302.3 current ops/sec; est completion in 1 hour 16 minutes [INSERT: Count=2283024, Max=37279, Min=300, Avg=1750.44, 90=3073, 99=9055, 99.9=18271, 99.99=26767] 
2023-03-13 20:42:36:258 100 sec: 21490180 operations; 223067.4 current ops/sec; est completion in 1 hour 15 minutes [INSERT: Count=2230670, Max=33663, Min=308, Avg=1791.52, 90=2861, 99=7595, 99.9=16527, 99.99=25327] 
2023-03-13 20:42:46:258 110 sec: 23700198 operations; 221001.8 current ops/sec; est completion in 1 hour 15 minutes [INSERT: Count=2210087, Max=40863, Min=297, Avg=1807.95, 90=3013, 99=8671, 99.9=22047, 99.99=29247] 
2023-03-13 20:42:56:258 120 sec: 25963307 operations; 226310.9 current ops/sec; est completion in 1 hour 15 minutes [INSERT: Count=2263102, Max=41407, Min=297, Avg=1765.57, 90=3083, 99=10407, 99.9=20927, 99.99=30799] 
2023-03-13 20:43:06:258 130 sec: 28224314 operations; 226100.7 current ops/sec; est completion in 1 hour 14 minutes [INSERT: Count=2260986, Max=211583, Min=298, Avg=1767.23, 90=3017, 99=9975, 99.9=22031, 99.99=136831] 
2023-03-13 20:43:16:258 140 sec: 30512147 operations; 228783.3 current ops/sec; est completion in 1 hour 14 minutes [INSERT: Count=2287801, Max=37951, Min=298, Avg=1746.45, 90=3087, 99=9543, 99.9=17711, 99.99=24319] 
2023-03-13 20:43:26:257 150 sec: 32779491 operations; 226734.4 current ops/sec; est completion in 1 hour 13 minutes [INSERT: Count=2267340, Max=39711, Min=305, Avg=1762.34, 90=3101, 99=9919, 99.9=20271, 99.99=28335] 
2023-03-13 20:43:36:258 160 sec: 35077024 operations; 229753.3 current ops/sec; est completion in 1 hour 13 minutes [INSERT: Count=2297561, Max=46271, Min=296, Avg=1738.84, 90=2989, 99=10031, 99.9=20127, 99.99=33823] 
2023-03-13 20:43:46:258 170 sec: 37367258 operations; 229023.4 current ops/sec; est completion in 1 hour 13 minutes [INSERT: Count=2290243, Max=37663, Min=301, Avg=1744.55, 90=3045, 99=9839, 99.9=19103, 99.99=32671] 
2023-03-13 20:43:56:258 180 sec: 39663530 operations; 229627.2 current ops/sec; est completion in 1 hour 12 minutes [INSERT: Count=2296275, Max=47711, Min=301, Avg=1740.55, 90=2949, 99=8199, 99.9=16687, 99.99=26335] 
2023-03-13 20:44:06:257 190 sec: 41863376 operations; 219984.6 current ops/sec; est completion in 1 hour 12 minutes [INSERT: Count=2199824, Max=45087, Min=317, Avg=1816.46, 90=2845, 99=8147, 99.9=18639, 99.99=28159] 
2023-03-13 20:44:16:258 200 sec: 44038644 operations; 217526.8 current ops/sec; est completion in 1 hour 12 minutes [INSERT: Count=2175266, Max=35871, Min=301, Avg=1836.96, 90=2853, 99=7327, 99.9=17023, 99.99=26527] 
2023-03-13 20:44:26:257 210 sec: 46284376 operations; 224573.2 current ops/sec; est completion in 1 hour 12 minutes [INSERT: Count=2245707, Max=103551, Min=301, Avg=1779.18, 90=2923, 99=7883, 99.9=17231, 99.99=32431] 
2023-03-13 20:44:36:257 220 sec: 48534081 operations; 224970.5 current ops/sec; est completion in 1 hour 11 minutes [INSERT: Count=2249734, Max=44383, Min=302, Avg=1776.16, 90=3027, 99=9111, 99.9=25103, 99.99=30511] 
2023-03-13 20:44:46:258 230 sec: 50834724 operations; 230064.3 current ops/sec; est completion in 1 hour 11 minutes [INSERT: Count=2300625, Max=46303, Min=304, Avg=1736.81, 90=3009, 99=9431, 99.9=18399, 99.99=36319] 
2023-03-13 20:44:56:257 240 sec: 53131759 operations; 229703.5 current ops/sec; est completion in 1 hour 11 minutes [INSERT: Count=2297042, Max=108287, Min=301, Avg=1739.51, 90=3007, 99=9263, 99.9=18959, 99.99=34367] 
2023-03-13 20:45:06:258 250 sec: 55389074 operations; 225731.5 current ops/sec; est completion in 1 hour 11 minutes [INSERT: Count=2257316, Max=117951, Min=302, Avg=1770.18, 90=3103, 99=9735, 99.9=19967, 99.99=77759] 
2023-03-13 20:45:16:258 260 sec: 57658199 operations; 226912.5 current ops/sec; est completion in 1 hour 10 minutes [INSERT: Count=2269133, Max=103487, Min=302, Avg=1760.93, 90=3033, 99=8551, 99.9=18287, 99.99=28703] 
2023-03-13 20:45:26:257 270 sec: 59878909 operations; 222071 current ops/sec; est completion in 1 hour 10 minutes [INSERT: Count=2220702, Max=108543, Min=310, Avg=1799.43, 90=3005, 99=9399, 99.9=19023, 99.99=33663] 
2023-03-13 20:45:36:257 280 sec: 62119442 operations; 224053.3 current ops/sec; est completion in 1 hour 10 minutes [INSERT: Count=2240526, Max=39583, Min=310, Avg=1783.47, 90=2927, 99=8019, 99.9=16087, 99.99=27359] 
2023-03-13 20:45:46:257 290 sec: 64339836 operations; 222039.4 current ops/sec; est completion in 1 hour 10 minutes [INSERT: Count=2220397, Max=32559, Min=301, Avg=1799.61, 90=3017, 99=8431, 99.9=16031, 99.99=22495] 
2023-03-13 20:45:56:258 300 sec: 66553303 operations; 221346.7 current ops/sec; est completion in 1 hour 10 minutes [INSERT: Count=2213456, Max=38399, Min=309, Avg=1805.25, 90=3143, 99=10247, 99.9=20559, 99.99=29887] 
2023-03-13 20:46:06:258 310 sec: 68806399 operations; 225309.6 current ops/sec; est completion in 1 hour 9 minutes [INSERT: Count=2253129, Max=46271, Min=303, Avg=1773.5, 90=3083, 99=10631, 99.9=24607, 99.99=35199] 
2023-03-13 20:46:16:257 320 sec: 71116469 operations; 231007 current ops/sec; est completion in 1 hour 9 minutes [INSERT: Count=2310048, Max=38783, Min=298, Avg=1729.68, 90=2969, 99=9607, 99.9=18511, 99.99=25711] 
2023-03-13 20:46:26:258 330 sec: 73408204 operations; 229173.5 current ops/sec; est completion in 1 hour 9 minutes [INSERT: Count=2291729, Max=44479, Min=295, Avg=1743.53, 90=3023, 99=9463, 99.9=20191, 99.99=30175] 
2023-03-13 20:46:36:258 340 sec: 75713225 operations; 230502.1 current ops/sec; est completion in 1 hour 9 minutes [INSERT: Count=2304997, Max=66175, Min=297, Avg=1733.45, 90=2999, 99=9319, 99.9=19503, 99.99=44415] 
2023-03-13 20:46:46:258 350 sec: 77961090 operations; 224786.5 current ops/sec; est completion in 1 hour 9 minutes [INSERT: Count=2247877, Max=45439, Min=301, Avg=1777.75, 90=2975, 99=9191, 99.9=18815, 99.99=36127] 
2023-03-13 20:46:56:258 360 sec: 80226265 operations; 226517.5 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2265168, Max=43903, Min=306, Avg=1764.04, 90=2963, 99=8519, 99.9=19279, 99.99=26383] 
2023-03-13 20:47:06:257 370 sec: 82433731 operations; 220746.6 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2207482, Max=37887, Min=318, Avg=1810.15, 90=2869, 99=9119, 99.9=18367, 99.99=26351] 
2023-03-13 20:47:16:257 380 sec: 84629079 operations; 219534.8 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2195311, Max=52383, Min=302, Avg=1820.19, 90=2807, 99=7263, 99.9=18863, 99.99=30927] 
2023-03-13 20:47:26:257 390 sec: 86783769 operations; 215469 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2154710, Max=308223, Min=302, Avg=1854.52, 90=2869, 99=8111, 99.9=20927, 99.99=222463] 
2023-03-13 20:47:36:257 400 sec: 88967117 operations; 218334.8 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2183334, Max=114623, Min=309, Avg=1830.12, 90=2911, 99=8287, 99.9=18575, 99.99=73919] 
2023-03-13 20:47:46:257 410 sec: 91146503 operations; 217938.6 current ops/sec; est completion in 1 hour 8 minutes [INSERT: Count=2179391, Max=62751, Min=313, Avg=1833.61, 90=2929, 99=8711, 99.9=23775, 99.99=41535] 
2023-03-13 20:47:56:258 420 sec: 93373852 operations; 222734.9 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2227355, Max=44831, Min=309, Avg=1792.94, 90=2911, 99=8159, 99.9=20911, 99.99=33343] 
2023-03-13 20:48:06:258 430 sec: 95616358 operations; 224250.6 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2242557, Max=125695, Min=306, Avg=1783.01, 90=2921, 99=8319, 99.9=18831, 99.99=53855] 
2023-03-13 20:48:16:258 440 sec: 97862139 operations; 224578.1 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2245761, Max=36607, Min=303, Avg=1779.16, 90=2893, 99=8123, 99.9=16559, 99.99=21247] 
2023-03-13 20:48:26:257 450 sec: 100120440 operations; 225830.1 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2258279, Max=47679, Min=290, Avg=1769.43, 90=3075, 99=9591, 99.9=19007, 99.99=26735] 
2023-03-13 20:48:36:257 460 sec: 102393638 operations; 227319.8 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2273185, Max=114879, Min=308, Avg=1757.67, 90=2931, 99=8551, 99.9=18671, 99.99=37151] 
2023-03-13 20:48:46:257 470 sec: 104629687 operations; 223604.9 current ops/sec; est completion in 1 hour 7 minutes [INSERT: Count=2236054, Max=81215, Min=297, Avg=1787.15, 90=2949, 99=9607, 99.9=22847, 99.99=32175] 
2023-03-13 20:48:56:257 480 sec: 106887283 operations; 225759.6 current ops/sec; est completion in 1 hour 6 minutes [INSERT: Count=2257595, Max=37855, Min=301, Avg=1769.98, 90=2959, 99=8551, 99.9=17871, 99.99=30367] 
2023-03-13 20:49:06:257 490 sec: 109117802 operations; 223051.9 current ops/sec; est completion in 1 hour 6 minutes [INSERT: Count=2230525, Max=77887, Min=303, Avg=1791.42, 90=3101, 99=10167, 99.9=22495, 99.99=37151] 
2023-03-13 20:49:16:257 500 sec: 111343080 operations; 222527.8 current ops/sec; est completion in 1 hour 6 minutes [INSERT: Count=2225278, Max=75199, Min=304, Avg=1795.71, 90=3083, 99=10375, 99.9=25823, 99.99=39135] 
2023-03-13 20:49:26:257 510 sec: 113644339 operations; 230125.9 current ops/sec; est completion in 1 hour 6 minutes [INSERT: Count=2301239, Max=45087, Min=293, Avg=1736.14, 90=2985, 99=9431, 99.9=18255, 99.99=28655] 
2023-03-13 20:49:36:257 520 sec: 115930637 operations; 228629.8 current ops/sec; est completion in 1 hour 6 minutes [INSERT: Count=2286313, Max=43519, Min=289, Avg=1747.9, 90=3015, 99=9871, 99.9=21295, 99.99=28927] 
2023-03-13 20:49:46:257 530 sec: 118212512 operations; 228187.5 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2281872, Max=51967, Min=304, Avg=1751.09, 90=2949, 99=9487, 99.9=20063, 99.99=28911] 
2023-03-13 20:49:56:257 540 sec: 120449131 operations; 223661.9 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2236618, Max=55487, Min=295, Avg=1786.52, 90=2939, 99=9375, 99.9=25183, 99.99=34239] 
2023-03-13 20:50:06:257 550 sec: 122697591 operations; 224846 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2248461, Max=42847, Min=305, Avg=1777.21, 90=2987, 99=9007, 99.9=17951, 99.99=34687] 
2023-03-13 20:50:16:257 560 sec: 124952301 operations; 225471 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2254701, Max=47871, Min=317, Avg=1772.14, 90=2867, 99=8103, 99.9=18143, 99.99=35999] 
2023-03-13 20:50:26:257 570 sec: 127201594 operations; 224929.3 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2249300, Max=38847, Min=319, Avg=1776.53, 90=2901, 99=8287, 99.9=17743, 99.99=29455] 
2023-03-13 20:50:36:257 580 sec: 129437833 operations; 223623.9 current ops/sec; est completion in 1 hour 5 minutes [INSERT: Count=2236222, Max=41439, Min=308, Avg=1786.92, 90=2865, 99=7531, 99.9=16895, 99.99=27983] 
2023-03-13 20:50:46:257 590 sec: 131653314 operations; 221548.1 current ops/sec; est completion in 1 hour 4 minutes [INSERT: Count=2215487, Max=65183, Min=305, Avg=1803.69, 90=2941, 99=8623, 99.9=17535, 99.99=27823] 
2023-03-13 20:50:56:257 600 sec: 133892389 operations; 223907.5 current ops/sec; est completion in 1 hour 4 minutes [INSERT: Count=2239079, Max=43647, Min=306, Avg=1784.63, 90=3017, 99=8911, 99.9=18671, 99.99=33567] 
2023-03-13 20:51:06:257 610 sec: 136143436 operations; 225104.7 current ops/sec; est completion in 1 hour 4 minutes [INSERT: Count=2251047, Max=113023, Min=288, Avg=1775.15, 90=2973, 99=10423, 99.9=21039, 99.99=39039] 
2023-03-13 20:51:16:257 620 sec: 138429759 operations; 228632.3 current ops/sec; est completion in 1 hour 4 minutes [INSERT: Count=2286327, Max=60127, Min=304, Avg=1747.6, 90=3067, 99=9055, 99.9=19407, 99.99=31087] 
2023-03-13 20:51:26:257 630 sec: 140710377 operations; 228061.8 current ops/sec; est completion in 1 hour 4 minutes [INSERT: Count=2280609, Max=34623, Min=296, Avg=1752.02, 90=2933, 99=8503, 99.9=18799, 99.99=25935] 
2023-03-13 20:51:36:258 640 sec: 142983782 operations; 227340.5 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2273427, Max=99455, Min=295, Avg=1757.76, 90=3067, 99=9487, 99.9=18447, 99.99=88639] 
2023-03-13 20:51:46:257 650 sec: 145246340 operations; 226255.8 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2262544, Max=44703, Min=312, Avg=1765.97, 90=3011, 99=9103, 99.9=18303, 99.99=27167] 
2023-03-13 20:51:56:257 660 sec: 147529441 operations; 228310.1 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2283092, Max=34943, Min=301, Avg=1750.09, 90=2965, 99=8751, 99.9=17023, 99.99=25983] 
2023-03-13 20:52:06:257 670 sec: 149840397 operations; 231095.6 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2310969, Max=30463, Min=305, Avg=1729.15, 90=2907, 99=8343, 99.9=16159, 99.99=22143] 
2023-03-13 20:52:16:257 680 sec: 152112328 operations; 227193.1 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2271915, Max=34527, Min=306, Avg=1758.76, 90=2919, 99=8079, 99.9=16591, 99.99=24111] 
2023-03-13 20:52:26:257 690 sec: 154352626 operations; 224029.8 current ops/sec; est completion in 1 hour 3 minutes [INSERT: Count=2240305, Max=41919, Min=299, Avg=1783.54, 90=3033, 99=9687, 99.9=18319, 99.99=26767] 
2023-03-13 20:52:36:257 700 sec: 156602113 operations; 224948.7 current ops/sec; est completion in 1 hour 2 minutes [INSERT: Count=2249480, Max=51135, Min=306, Avg=1776.14, 90=3073, 99=10303, 99.9=18959, 99.99=30335] 
2023-03-13 20:52:46:257 710 sec: 158868354 operations; 226624.1 current ops/sec; est completion in 1 hour 2 minutes [INSERT: Count=2266251, Max=46207, Min=307, Avg=1763.46, 90=3007, 99=10487, 99.9=22687, 99.99=33599] 
2023-03-13 20:52:56:257 720 sec: 161167360 operations; 229900.6 current ops/sec; est completion in 1 hour 2 minutes [INSERT: Count=2298994, Max=54047, Min=298, Avg=1737.98, 90=2941, 99=8399, 99.9=17407, 99.99=24559] 
2023-03-13 20:53:06:257 730 sec: 163427737 operations; 226037.7 current ops/sec; est completion in 1 hour 2 minutes [INSERT: Count=2260395, Max=141311, Min=293, Avg=1767.86, 90=2949, 99=9447, 99.9=17951, 99.99=58943] 
2023-03-13 20:53:16:258 740 sec: 165706892 operations; 227915.5 current ops/sec; est completion in 1 hour 2 minutes [INSERT: Count=2279149, Max=60063, Min=305, Avg=1753.19, 90=3017, 99=8775, 99.9=18495, 99.99=29439] 
2023-03-13 20:53:26:257 750 sec: 167949638 operations; 224274.6 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2242749, Max=75967, Min=317, Avg=1781.43, 90=2925, 99=8775, 99.9=18255, 99.99=34303] 
2023-03-13 20:53:36:257 760 sec: 170192109 operations; 224247.1 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2242468, Max=43615, Min=316, Avg=1782.08, 90=2833, 99=8967, 99.9=22239, 99.99=31871] 
2023-03-13 20:53:46:257 770 sec: 172453922 operations; 226181.3 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2261796, Max=50591, Min=314, Avg=1766.69, 90=2817, 99=7963, 99.9=18303, 99.99=27535] 
2023-03-13 20:53:56:257 780 sec: 174698561 operations; 224463.9 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2244648, Max=32431, Min=315, Avg=1780.16, 90=2799, 99=6959, 99.9=16511, 99.99=23215] 
2023-03-13 20:54:06:257 790 sec: 176945353 operations; 224679.2 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2246797, Max=35199, Min=313, Avg=1778.55, 90=2781, 99=6871, 99.9=14879, 99.99=23167] 
2023-03-13 20:54:16:258 800 sec: 179163892 operations; 221853.9 current ops/sec; est completion in 1 hour 1 minute [INSERT: Count=2218543, Max=32127, Min=313, Avg=1801.14, 90=2875, 99=7095, 99.9=15511, 99.99=27455] 
2023-03-13 20:54:26:257 810 sec: 181393527 operations; 222963.5 current ops/sec; est completion in 1 hour [INSERT: Count=2229632, Max=89343, Min=316, Avg=1792.09, 90=2867, 99=7583, 99.9=16559, 99.99=28623] 
2023-03-13 20:54:36:257 820 sec: 183624727 operations; 223120 current ops/sec; est completion in 1 hour [INSERT: Count=2231200, Max=41791, Min=313, Avg=1791.03, 90=2831, 99=7423, 99.9=17775, 99.99=31359] 
2023-03-13 20:54:46:257 830 sec: 185888652 operations; 226392.5 current ops/sec; est completion in 1 hour [INSERT: Count=2263910, Max=28399, Min=316, Avg=1765.03, 90=2815, 99=6935, 99.9=16415, 99.99=21839] 
2023-03-13 20:54:56:257 840 sec: 188107449 operations; 221879.7 current ops/sec; est completion in 1 hour [INSERT: Count=2218812, Max=55519, Min=313, Avg=1800.87, 90=2865, 99=7871, 99.9=17183, 99.99=36671] 
2023-03-13 20:55:06:258 850 sec: 190313577 operations; 220612.8 current ops/sec; est completion in 1 hour [INSERT: Count=2206150, Max=224895, Min=322, Avg=1811.34, 90=2831, 99=7495, 99.9=17823, 99.99=150143] 
2023-03-13 20:55:16:257 860 sec: 192511960 operations; 219838.3 current ops/sec; est completion in 1 hour [INSERT: Count=2198350, Max=66431, Min=313, Avg=1817.66, 90=2847, 99=8255, 99.9=18495, 99.99=32047] 
2023-03-13 20:55:26:257 870 sec: 194737732 operations; 222577.2 current ops/sec; est completion in 59 minutes [INSERT: Count=2225781, Max=35039, Min=314, Avg=1795.06, 90=2807, 99=6999, 99.9=16263, 99.99=23807] 
2023-03-13 20:55:36:258 880 sec: 196975466 operations; 223773.4 current ops/sec; est completion in 59 minutes [INSERT: Count=2237776, Max=29647, Min=314, Avg=1785.99, 90=2865, 99=7131, 99.9=15647, 99.99=20047] 
2023-03-13 20:55:46:257 890 sec: 199209678 operations; 223421.2 current ops/sec; est completion in 59 minutes [INSERT: Count=2234174, Max=35551, Min=305, Avg=1788.38, 90=2881, 99=7687, 99.9=18303, 99.99=28175] 
2023-03-13 20:55:56:257 900 sec: 201455503 operations; 224582.5 current ops/sec; est completion in 59 minutes [INSERT: Count=2245823, Max=31359, Min=312, Avg=1779.29, 90=2841, 99=7067, 99.9=14255, 99.99=26639] 
2023-03-13 20:56:06:257 910 sec: 203639779 operations; 218427.6 current ops/sec; est completion in 59 minutes [INSERT: Count=2184230, Max=36639, Min=317, Avg=1827.21, 90=2821, 99=7687, 99.9=18783, 99.99=33183] 
2023-03-13 20:56:16:257 920 sec: 205832816 operations; 219303.7 current ops/sec; est completion in 59 minutes [INSERT: Count=2193087, Max=161151, Min=290, Avg=1824.32, 90=2731, 99=6827, 99.9=19695, 99.99=122943] 
2023-03-13 20:56:26:257 930 sec: 208068589 operations; 223577.3 current ops/sec; est completion in 59 minutes [INSERT: Count=2235765, Max=155135, Min=304, Avg=1787.25, 90=2863, 99=7731, 99.9=16623, 99.99=84991] 
2023-03-13 20:56:36:257 940 sec: 210296174 operations; 222758.5 current ops/sec; est completion in 58 minutes [INSERT: Count=2227585, Max=35999, Min=309, Avg=1793.86, 90=2841, 99=8199, 99.9=18687, 99.99=26895] 
2023-03-13 20:56:46:268 950 sec: 212540165 operations; 224152.53 current ops/sec; est completion in 58 minutes [INSERT: Count=2244013, Max=38335, Min=328, Avg=1780.7, 90=2885, 99=7815, 99.9=16255, 99.99=21039] 
2023-03-13 20:56:56:257 960 sec: 214789658 operations; 225197.02 current ops/sec; est completion in 58 minutes [INSERT: Count=2249478, Max=166911, Min=316, Avg=1776.3, 90=2929, 99=8399, 99.9=18143, 99.99=98431] 
2023-03-13 20:57:06:257 970 sec: 217039509 operations; 224985.1 current ops/sec; est completion in 58 minutes [INSERT: Count=2249855, Max=167679, Min=294, Avg=1776.04, 90=2881, 99=8279, 99.9=21007, 99.99=79039] 
2023-03-13 20:57:16:257 980 sec: 219310027 operations; 227051.8 current ops/sec; est completion in 58 minutes [INSERT: Count=2270504, Max=154239, Min=312, Avg=1759.84, 90=2941, 99=8527, 99.9=17887, 99.99=54783] 
2023-03-13 20:57:26:258 990 sec: 221538339 operations; 222831.2 current ops/sec; est completion in 57 minutes [INSERT: Count=2228324, Max=42879, Min=305, Avg=1793.16, 90=2871, 99=8151, 99.9=19903, 99.99=31983] 
2023-03-13 20:57:36:257 1000 sec: 223793876 operations; 225553.7 current ops/sec; est completion in 57 minutes [INSERT: Count=2255542, Max=52287, Min=299, Avg=1771.66, 90=2923, 99=8095, 99.9=17039, 99.99=35999] 
2023-03-13 20:57:46:257 1010 sec: 226032888 operations; 223901.2 current ops/sec; est completion in 57 minutes [INSERT: Count=2238998, Max=36031, Min=298, Avg=1784.72, 90=2911, 99=7423, 99.9=16159, 99.99=26767] 
2023-03-13 20:57:56:257 1020 sec: 228282858 operations; 224997 current ops/sec; est completion in 57 minutes [INSERT: Count=2249972, Max=125055, Min=301, Avg=1775.84, 90=3053, 99=9255, 99.9=20223, 99.99=44287] 
2023-03-13 20:58:06:257 1030 sec: 230545855 operations; 226299.7 current ops/sec; est completion in 57 minutes [INSERT: Count=2263020, Max=115263, Min=297, Avg=1765.6, 90=3039, 99=9655, 99.9=19983, 99.99=72511] 
2023-03-13 20:58:16:257 1040 sec: 232828967 operations; 228311.2 current ops/sec; est completion in 57 minutes [INSERT: Count=2283083, Max=121535, Min=309, Avg=1750.13, 90=2989, 99=9103, 99.9=17471, 99.99=70015] 
2023-03-13 20:58:26:257 1050 sec: 235104051 operations; 227508.4 current ops/sec; est completion in 56 minutes [INSERT: Count=2275084, Max=34975, Min=309, Avg=1756.42, 90=2987, 99=9175, 99.9=17439, 99.99=27583] 
2023-03-13 20:58:36:257 1060 sec: 237359404 operations; 225535.3 current ops/sec; est completion in 56 minutes [INSERT: Count=2255346, Max=36735, Min=299, Avg=1771.55, 90=3085, 99=9471, 99.9=18799, 99.99=27935] 
2023-03-13 20:58:46:257 1070 sec: 239643916 operations; 228451.2 current ops/sec; est completion in 56 minutes [INSERT: Count=2284516, Max=45023, Min=309, Avg=1749.08, 90=2889, 99=9279, 99.9=19039, 99.99=28143] 
2023-03-13 20:58:56:257 1080 sec: 241896257 operations; 225234.1 current ops/sec; est completion in 56 minutes [INSERT: Count=2252337, Max=45791, Min=301, Avg=1774.2, 90=3051, 99=9991, 99.9=21343, 99.99=31199] 
2023-03-13 20:59:06:257 1090 sec: 244110317 operations; 221406 current ops/sec; est completion in 56 minutes [INSERT: Count=2214061, Max=108223, Min=301, Avg=1804.64, 90=2931, 99=8527, 99.9=23967, 99.99=79423] 
2023-03-13 20:59:16:257 1100 sec: 246371135 operations; 226081.8 current ops/sec; est completion in 56 minutes [INSERT: Count=2260821, Max=35327, Min=285, Avg=1767.54, 90=2919, 99=8647, 99.9=17887, 99.99=29263] 
2023-03-13 20:59:26:257 1110 sec: 248580203 operations; 220906.8 current ops/sec; est completion in 55 minutes [INSERT: Count=2209067, Max=213631, Min=296, Avg=1808.95, 90=2973, 99=9023, 99.9=20239, 99.99=127935] 
2023-03-13 20:59:36:257 1120 sec: 250874170 operations; 229396.7 current ops/sec; est completion in 55 minutes [INSERT: Count=2293964, Max=35391, Min=291, Avg=1741.5, 90=2957, 99=9287, 99.9=18383, 99.99=25327] 
2023-03-13 20:59:46:257 1130 sec: 253135818 operations; 226164.8 current ops/sec; est completion in 55 minutes [INSERT: Count=2261649, Max=38719, Min=298, Avg=1767.12, 90=2947, 99=10071, 99.9=20831, 99.99=29455] 
2023-03-13 20:59:56:257 1140 sec: 255393745 operations; 225792.7 current ops/sec; est completion in 55 minutes [INSERT: Count=2257934, Max=44447, Min=306, Avg=1769.67, 90=2945, 99=8727, 99.9=18191, 99.99=37407] 
2023-03-13 21:00:06:257 1150 sec: 257670050 operations; 227630.5 current ops/sec; est completion in 55 minutes [INSERT: Count=2276301, Max=41919, Min=320, Avg=1755.35, 90=2865, 99=7919, 99.9=17311, 99.99=30607] 
2023-03-13 21:00:16:258 1160 sec: 259924585 operations; 225453.5 current ops/sec; est completion in 55 minutes [INSERT: Count=2254568, Max=38559, Min=321, Avg=1772.41, 90=2913, 99=8239, 99.9=18063, 99.99=30367] 
2023-03-13 21:00:26:257 1170 sec: 262189735 operations; 226515 current ops/sec; est completion in 54 minutes [INSERT: Count=2265112, Max=36415, Min=308, Avg=1764.06, 90=2815, 99=8091, 99.9=17295, 99.99=30863] 
2023-03-13 21:00:36:257 1180 sec: 264449795 operations; 226006 current ops/sec; est completion in 54 minutes [INSERT: Count=2260062, Max=42751, Min=316, Avg=1768.04, 90=2941, 99=8719, 99.9=20447, 99.99=29647] 
2023-03-13 21:00:46:257 1190 sec: 266678899 operations; 222910.4 current ops/sec; est completion in 54 minutes [INSERT: Count=2229107, Max=33023, Min=315, Avg=1792.65, 90=2781, 99=7075, 99.9=15511, 99.99=28511] 
2023-03-13 21:00:56:257 1200 sec: 268897376 operations; 221847.7 current ops/sec; est completion in 54 minutes [INSERT: Count=2218472, Max=118463, Min=315, Avg=1800.71, 90=2739, 99=7855, 99.9=17967, 99.99=33503] 
2023-03-13 21:01:06:257 1210 sec: 271130701 operations; 223332.5 current ops/sec; est completion in 54 minutes [INSERT: Count=2233329, Max=35135, Min=314, Avg=1789.7, 90=2909, 99=7523, 99.9=15927, 99.99=23279] 
2023-03-13 21:01:16:257 1220 sec: 273396339 operations; 226563.8 current ops/sec; est completion in 54 minutes [INSERT: Count=2265645, Max=83519, Min=296, Avg=1763.68, 90=2919, 99=7315, 99.9=15607, 99.99=22223] 
2023-03-13 21:01:26:257 1230 sec: 275636855 operations; 224051.6 current ops/sec; est completion in 53 minutes [INSERT: Count=2240518, Max=51359, Min=310, Avg=1783.47, 90=2953, 99=8159, 99.9=16655, 99.99=33535] 
2023-03-13 21:01:36:257 1240 sec: 277832083 operations; 219522.8 current ops/sec; est completion in 53 minutes [INSERT: Count=2195209, Max=75199, Min=311, Avg=1820.1, 90=2907, 99=8575, 99.9=21503, 99.99=37375] 
2023-03-13 21:01:46:257 1250 sec: 280052774 operations; 222069.1 current ops/sec; est completion in 53 minutes [INSERT: Count=2220709, Max=40607, Min=311, Avg=1799.59, 90=3011, 99=8967, 99.9=18879, 99.99=28303] 
2023-03-13 21:01:56:257 1260 sec: 282267496 operations; 221472.2 current ops/sec; est completion in 53 minutes [INSERT: Count=2214715, Max=140159, Min=296, Avg=1804.25, 90=3037, 99=9151, 99.9=19007, 99.99=72895] 
2023-03-13 21:02:06:257 1270 sec: 284517581 operations; 225008.5 current ops/sec; est completion in 53 minutes [INSERT: Count=2250088, Max=208383, Min=298, Avg=1775.92, 90=2947, 99=8823, 99.9=18527, 99.99=104063] 
2023-03-13 21:02:16:257 1280 sec: 286799337 operations; 228175.6 current ops/sec; est completion in 53 minutes [INSERT: Count=2281767, Max=104383, Min=303, Avg=1751.15, 90=3007, 99=9007, 99.9=18751, 99.99=37567] 
2023-03-13 21:02:26:257 1290 sec: 289042497 operations; 224316 current ops/sec; est completion in 52 minutes [INSERT: Count=2243157, Max=36671, Min=296, Avg=1781.37, 90=2883, 99=7695, 99.9=16247, 99.99=27503] 
2023-03-13 21:02:36:257 1300 sec: 291292522 operations; 225002.5 current ops/sec; est completion in 52 minutes [INSERT: Count=2249980, Max=33567, Min=305, Avg=1774.66, 90=2875, 99=8295, 99.9=16559, 99.99=24783] 
2023-03-13 21:02:46:262 1310 sec: 293541255 operations; 224760.92 current ops/sec; est completion in 52 minutes [INSERT: Count=2248790, Max=41535, Min=305, Avg=1777.72, 90=3019, 99=9071, 99.9=21263, 99.99=29807] 
2023-03-13 21:02:56:257 1320 sec: 295816857 operations; 227674.04 current ops/sec; est completion in 52 minutes [INSERT: Count=2275583, Max=50847, Min=307, Avg=1756.31, 90=3035, 99=8447, 99.9=17791, 99.99=32223] 
2023-03-13 21:03:06:257 1330 sec: 298098683 operations; 228182.6 current ops/sec; est completion in 52 minutes [INSERT: Count=2281825, Max=39999, Min=306, Avg=1751.24, 90=2987, 99=9207, 99.9=20175, 99.99=31135] 
2023-03-13 21:03:16:257 1340 sec: 300350774 operations; 225209.1 current ops/sec; est completion in 52 minutes [INSERT: Count=2252094, Max=44095, Min=307, Avg=1774.26, 90=2975, 99=8983, 99.9=20031, 99.99=28863] 
2023-03-13 21:03:26:257 1350 sec: 302604538 operations; 225376.4 current ops/sec; est completion in 51 minutes [INSERT: Count=2253760, Max=116991, Min=306, Avg=1772.9, 90=3013, 99=9319, 99.9=18239, 99.99=41375] 
2023-03-13 21:03:36:257 1360 sec: 304862926 operations; 225838.8 current ops/sec; est completion in 51 minutes [INSERT: Count=2258377, Max=86207, Min=307, Avg=1769.37, 90=2981, 99=9215, 99.9=19439, 99.99=36255] 
2023-03-13 21:03:46:257 1370 sec: 307110715 operations; 224778.9 current ops/sec; est completion in 51 minutes [INSERT: Count=2247796, Max=117247, Min=307, Avg=1777.67, 90=2919, 99=9215, 99.9=19071, 99.99=43167] 
2023-03-13 21:03:56:258 1380 sec: 309386490 operations; 227577.5 current ops/sec; est completion in 51 minutes [INSERT: Count=2275804, Max=58559, Min=291, Avg=1755.82, 90=2935, 99=8303, 99.9=17327, 99.99=29391] 
2023-03-13 21:04:06:257 1390 sec: 311649037 operations; 226254.7 current ops/sec; est completion in 51 minutes [INSERT: Count=2262522, Max=35455, Min=306, Avg=1765.98, 90=2871, 99=7747, 99.9=16103, 99.99=27327] 
2023-03-13 21:04:16:262 1400 sec: 313891480 operations; 224132.23 current ops/sec; est completion in 51 minutes [INSERT: Count=2242429, Max=41343, Min=307, Avg=1781.23, 90=2929, 99=8423, 99.9=16607, 99.99=26703] 
2023-03-13 21:04:26:257 1410 sec: 316104077 operations; 221370.39 current ops/sec; est completion in 50 minutes [INSERT: Count=2212613, Max=58239, Min=310, Avg=1806.74, 90=3017, 99=10351, 99.9=20111, 99.99=31135] 
2023-03-13 21:04:36:258 1420 sec: 318354885 operations; 225080.8 current ops/sec; est completion in 50 minutes [INSERT: Count=2250801, Max=79743, Min=310, Avg=1775.3, 90=3021, 99=8431, 99.9=16863, 99.99=32895] 
2023-03-13 21:04:46:257 1430 sec: 320605875 operations; 225099 current ops/sec; est completion in 50 minutes [INSERT: Count=2250990, Max=44287, Min=294, Avg=1775.1, 90=3037, 99=9295, 99.9=18767, 99.99=36927] 
2023-03-13 21:04:56:258 1440 sec: 322886234 operations; 228035.9 current ops/sec; est completion in 50 minutes [INSERT: Count=2280350, Max=31583, Min=317, Avg=1752.32, 90=2919, 99=8399, 99.9=16799, 99.99=25295] 
2023-03-13 21:05:06:257 1450 sec: 325158999 operations; 227276.5 current ops/sec; est completion in 50 minutes [INSERT: Count=2272770, Max=112511, Min=303, Avg=1757.92, 90=3013, 99=9631, 99.9=20911, 99.99=54719] 
2023-03-13 21:05:16:257 1460 sec: 327422441 operations; 226344.2 current ops/sec; est completion in 50 minutes [INSERT: Count=2263466, Max=128895, Min=304, Avg=1765.56, 90=2979, 99=9407, 99.9=20191, 99.99=73279] 
2023-03-13 21:05:26:257 1470 sec: 329694938 operations; 227249.7 current ops/sec; est completion in 49 minutes [INSERT: Count=2272474, Max=51391, Min=304, Avg=1758.19, 90=2923, 99=8607, 99.9=18735, 99.99=27535] 
2023-03-13 21:05:36:258 1480 sec: 331964676 operations; 226973.8 current ops/sec; est completion in 49 minutes [INSERT: Count=2269785, Max=46911, Min=303, Avg=1760.45, 90=2917, 99=8399, 99.9=18335, 99.99=26015] 
2023-03-13 21:05:46:258 1490 sec: 334216879 operations; 225220.3 current ops/sec; est completion in 49 minutes [INSERT: Count=2252187, Max=45375, Min=310, Avg=1774.42, 90=2911, 99=8839, 99.9=18463, 99.99=25807] 
2023-03-13 21:05:56:258 1500 sec: 336457984 operations; 224110.5 current ops/sec; est completion in 49 minutes [INSERT: Count=2241109, Max=46335, Min=308, Avg=1783.01, 90=2897, 99=8407, 99.9=16847, 99.99=29375] 
2023-03-13 21:06:06:258 1510 sec: 338712360 operations; 225437.6 current ops/sec; est completion in 49 minutes [INSERT: Count=2254367, Max=56191, Min=308, Avg=1772.4, 90=2983, 99=9383, 99.9=18607, 99.99=29551] 
2023-03-13 21:06:16:258 1520 sec: 340973603 operations; 226124.3 current ops/sec; est completion in 48 minutes [INSERT: Count=2261243, Max=42783, Min=311, Avg=1766.8, 90=2977, 99=8711, 99.9=18815, 99.99=28463] 
2023-03-13 21:06:26:258 1530 sec: 343231166 operations; 225756.3 current ops/sec; est completion in 48 minutes [INSERT: Count=2257549, Max=30943, Min=304, Avg=1770.29, 90=2981, 99=8583, 99.9=17167, 99.99=23535] 
2023-03-13 21:06:36:257 1540 sec: 345479067 operations; 224790.1 current ops/sec; est completion in 48 minutes [INSERT: Count=2247907, Max=75391, Min=312, Avg=1777.57, 90=2875, 99=8343, 99.9=21855, 99.99=31135] 
2023-03-13 21:06:46:257 1550 sec: 347748706 operations; 226963.9 current ops/sec; est completion in 48 minutes [INSERT: Count=2269637, Max=36575, Min=316, Avg=1760.62, 90=2943, 99=8327, 99.9=18079, 99.99=31647] 
2023-03-13 21:06:56:258 1560 sec: 349971633 operations; 222292.7 current ops/sec; est completion in 48 minutes [INSERT: Count=2222927, Max=107007, Min=321, Avg=1797.54, 90=2923, 99=8983, 99.9=18879, 99.99=92415] 
2023-03-13 21:07:06:257 1570 sec: 352224956 operations; 225332.3 current ops/sec; est completion in 48 minutes [INSERT: Count=2253342, Max=99199, Min=317, Avg=1773.27, 90=2817, 99=8255, 99.9=19215, 99.99=34239] 
2023-03-13 21:07:16:257 1580 sec: 354500527 operations; 227557.1 current ops/sec; est completion in 47 minutes [INSERT: Count=2275507, Max=34303, Min=311, Avg=1755.05, 90=2873, 99=8687, 99.9=16463, 99.99=24383] 
2023-03-13 21:07:26:258 1590 sec: 356761230 operations; 226070.3 current ops/sec; est completion in 47 minutes [INSERT: Count=2260757, Max=31743, Min=310, Avg=1768.37, 90=2851, 99=8035, 99.9=17775, 99.99=27535] 
2023-03-13 21:07:36:257 1600 sec: 358991033 operations; 222980.3 current ops/sec; est completion in 47 minutes [INSERT: Count=2229797, Max=34463, Min=319, Avg=1791.91, 90=2793, 99=6851, 99.9=16079, 99.99=23359] 
2023-03-13 21:07:46:258 1610 sec: 361234374 operations; 224334.1 current ops/sec; est completion in 47 minutes [INSERT: Count=2243349, Max=36927, Min=308, Avg=1781.26, 90=2803, 99=7195, 99.9=17311, 99.99=26671] 
2023-03-13 21:07:56:257 1620 sec: 363467740 operations; 223336.6 current ops/sec; est completion in 47 minutes [INSERT: Count=2233351, Max=43071, Min=315, Avg=1789.06, 90=2809, 99=6907, 99.9=16575, 99.99=37151] 
2023-03-13 21:08:06:257 1630 sec: 365687237 operations; 221949.7 current ops/sec; est completion in 47 minutes [INSERT: Count=2219486, Max=135039, Min=309, Avg=1800.35, 90=2813, 99=6839, 99.9=16463, 99.99=75455] 
2023-03-13 21:08:16:257 1640 sec: 367917777 operations; 223054 current ops/sec; est completion in 46 minutes [INSERT: Count=2230567, Max=36575, Min=299, Avg=1791.4, 90=2807, 99=8071, 99.9=16975, 99.99=25583] 
2023-03-13 21:08:26:258 1650 sec: 370162104 operations; 224432.7 current ops/sec; est completion in 46 minutes [INSERT: Count=2244326, Max=33119, Min=317, Avg=1780.46, 90=2795, 99=7367, 99.9=17551, 99.99=29311] 
2023-03-13 21:08:36:257 1660 sec: 372391920 operations; 222981.6 current ops/sec; est completion in 46 minutes [INSERT: Count=2229819, Max=32607, Min=317, Avg=1791.94, 90=2837, 99=7159, 99.9=17199, 99.99=25775] 
2023-03-13 21:08:46:257 1670 sec: 374616802 operations; 222488.2 current ops/sec; est completion in 46 minutes [INSERT: Count=2224864, Max=213119, Min=309, Avg=1796.02, 90=2787, 99=7227, 99.9=17903, 99.99=148735] 
2023-03-13 21:08:56:257 1680 sec: 376821149 operations; 220434.7 current ops/sec; est completion in 46 minutes [INSERT: Count=2204335, Max=38687, Min=320, Avg=1812.7, 90=2817, 99=7639, 99.9=18495, 99.99=27695] 
2023-03-13 21:09:06:257 1690 sec: 379074263 operations; 225311.4 current ops/sec; est completion in 46 minutes [INSERT: Count=2253114, Max=34815, Min=325, Avg=1773.48, 90=2767, 99=6899, 99.9=14759, 99.99=25199] 
2023-03-13 21:09:16:257 1700 sec: 381300404 operations; 222614.1 current ops/sec; est completion in 45 minutes [INSERT: Count=2226146, Max=45439, Min=319, Avg=1794.93, 90=2811, 99=7695, 99.9=17631, 99.99=29359] 
2023-03-13 21:09:26:257 1710 sec: 383501284 operations; 220088 current ops/sec; est completion in 45 minutes [INSERT: Count=2200878, Max=270335, Min=305, Avg=1815.52, 90=2771, 99=7059, 99.9=17167, 99.99=206207] 
2023-03-13 21:09:36:257 1720 sec: 385734084 operations; 223280 current ops/sec; est completion in 45 minutes [INSERT: Count=2232800, Max=33663, Min=315, Avg=1789.62, 90=2739, 99=6715, 99.9=15111, 99.99=22479] 
2023-03-13 21:09:46:257 1730 sec: 387943481 operations; 220939.7 current ops/sec; est completion in 45 minutes [INSERT: Count=2209401, Max=213375, Min=307, Avg=1808.55, 90=2793, 99=7751, 99.9=17359, 99.99=153599] 
2023-03-13 21:09:56:257 1740 sec: 390184590 operations; 224110.9 current ops/sec; est completion in 45 minutes [INSERT: Count=2241100, Max=182143, Min=317, Avg=1783.03, 90=2779, 99=7247, 99.9=15215, 99.99=89599] 
2023-03-13 21:10:06:257 1750 sec: 392390251 operations; 220566.1 current ops/sec; est completion in 45 minutes [INSERT: Count=2205668, Max=206335, Min=311, Avg=1811.64, 90=2795, 99=6823, 99.9=17247, 99.99=121535] 
2023-03-13 21:10:16:257 1760 sec: 394597949 operations; 220769.8 current ops/sec; est completion in 45 minutes [INSERT: Count=2207696, Max=40415, Min=309, Avg=1809.89, 90=2785, 99=7491, 99.9=21087, 99.99=28495] 
2023-03-13 21:10:26:266 1770 sec: 396820168 operations; 222044.26 current ops/sec; est completion in 44 minutes [INSERT: Count=2222221, Max=35391, Min=305, Avg=1797.53, 90=2823, 99=7703, 99.9=16359, 99.99=29039] 
2023-03-13 21:10:36:257 1780 sec: 399035626 operations; 221723.18 current ops/sec; est completion in 44 minutes [INSERT: Count=2215480, Max=35807, Min=318, Avg=1804.27, 90=2791, 99=6755, 99.9=17951, 99.99=25743] 
2023-03-13 21:10:46:257 1790 sec: 401229246 operations; 219362 current ops/sec; est completion in 44 minutes [INSERT: Count=2193593, Max=268031, Min=306, Avg=1821.59, 90=2777, 99=7495, 99.9=18447, 99.99=181759] 
2023-03-13 21:10:56:257 1800 sec: 403459340 operations; 223009.4 current ops/sec; est completion in 44 minutes [INSERT: Count=2230095, Max=30655, Min=314, Avg=1791.71, 90=2843, 99=7127, 99.9=15671, 99.99=25215] 
2023-03-13 21:11:06:257 1810 sec: 405665230 operations; 220589 current ops/sec; est completion in 44 minutes [INSERT: Count=2205899, Max=72127, Min=317, Avg=1811.51, 90=2793, 99=6843, 99.9=17375, 99.99=29375] 
2023-03-13 21:11:16:257 1820 sec: 407870194 operations; 220496.4 current ops/sec; est completion in 44 minutes [INSERT: Count=2204958, Max=36351, Min=323, Avg=1812.18, 90=2791, 99=7391, 99.9=16927, 99.99=26463] 
2023-03-13 21:11:26:257 1830 sec: 410077108 operations; 220691.4 current ops/sec; est completion in 43 minutes [INSERT: Count=2206926, Max=142463, Min=316, Avg=1810.62, 90=2863, 99=7631, 99.9=16975, 99.99=53983] 
2023-03-13 21:11:36:257 1840 sec: 412314431 operations; 223732.3 current ops/sec; est completion in 43 minutes [INSERT: Count=2237302, Max=32655, Min=314, Avg=1785.95, 90=2829, 99=7243, 99.9=15959, 99.99=22735] 
2023-03-13 21:11:46:257 1850 sec: 414531070 operations; 221663.9 current ops/sec; est completion in 43 minutes [INSERT: Count=2216646, Max=94527, Min=313, Avg=1802.66, 90=2785, 99=7451, 99.9=17215, 99.99=55455] 
2023-03-13 21:11:56:257 1860 sec: 416752502 operations; 222143.2 current ops/sec; est completion in 43 minutes [INSERT: Count=2221436, Max=32095, Min=320, Avg=1798.68, 90=2775, 99=6611, 99.9=15223, 99.99=27887] 
2023-03-13 21:12:06:257 1870 sec: 418942970 operations; 219046.8 current ops/sec; est completion in 43 minutes [INSERT: Count=2190463, Max=184063, Min=311, Avg=1824.12, 90=2819, 99=7603, 99.9=19311, 99.99=108351] 
2023-03-13 21:12:16:257 1880 sec: 421157481 operations; 221451.1 current ops/sec; est completion in 43 minutes [INSERT: Count=2214529, Max=64895, Min=321, Avg=1804.48, 90=2719, 99=6811, 99.9=16767, 99.99=61439] 
2023-03-13 21:12:26:257 1890 sec: 423363762 operations; 220628.1 current ops/sec; est completion in 42 minutes [INSERT: Count=2206258, Max=43487, Min=318, Avg=1811.15, 90=2805, 99=7351, 99.9=19487, 99.99=34431] 
2023-03-13 21:12:36:257 1900 sec: 425615195 operations; 225143.3 current ops/sec; est completion in 42 minutes [INSERT: Count=2251439, Max=32351, Min=313, Avg=1774.74, 90=2799, 99=7011, 99.9=16607, 99.99=25615] 
2023-03-13 21:12:46:257 1910 sec: 427826841 operations; 221164.6 current ops/sec; est completion in 42 minutes [INSERT: Count=2211648, Max=198911, Min=323, Avg=1806.71, 90=2815, 99=7391, 99.9=17135, 99.99=144511] 
2023-03-13 21:12:56:257 1920 sec: 430053710 operations; 222686.9 current ops/sec; est completion in 42 minutes [INSERT: Count=2226866, Max=34847, Min=320, Avg=1794.32, 90=2783, 99=6819, 99.9=15295, 99.99=20879] 
2023-03-13 21:13:06:257 1930 sec: 432268872 operations; 221516.2 current ops/sec; est completion in 42 minutes [INSERT: Count=2215154, Max=112383, Min=314, Avg=1803.77, 90=2825, 99=7499, 99.9=18719, 99.99=32831] 
2023-03-13 21:13:16:258 1940 sec: 434475379 operations; 220650.7 current ops/sec; est completion in 42 minutes [INSERT: Count=2206552, Max=44735, Min=324, Avg=1810.97, 90=2801, 99=7279, 99.9=21775, 99.99=34719] 
2023-03-13 21:13:26:257 1950 sec: 436699419 operations; 222404 current ops/sec; est completion in 41 minutes [INSERT: Count=2223992, Max=187391, Min=314, Avg=1796.73, 90=2763, 99=6639, 99.9=15223, 99.99=108095] 
2023-03-13 21:13:36:260 1960 sec: 438921492 operations; 222140.66 current ops/sec; est completion in 41 minutes [INSERT: Count=2222081, Max=35487, Min=313, Avg=1797.44, 90=2765, 99=6927, 99.9=17359, 99.99=25199] 
2023-03-13 21:13:46:257 1970 sec: 441125916 operations; 220508.55 current ops/sec; est completion in 41 minutes [INSERT: Count=2204428, Max=205823, Min=322, Avg=1813.38, 90=2843, 99=7455, 99.9=18559, 99.99=120383] 
2023-03-13 21:13:56:257 1980 sec: 443363665 operations; 223774.9 current ops/sec; est completion in 41 minutes [INSERT: Count=2237742, Max=36095, Min=315, Avg=1785.64, 90=2831, 99=7435, 99.9=17471, 99.99=26831] 
2023-03-13 21:14:06:257 1990 sec: 445585889 operations; 222222.4 current ops/sec; est completion in 41 minutes [INSERT: Count=2222230, Max=146559, Min=309, Avg=1798.13, 90=2895, 99=8079, 99.9=18063, 99.99=69503] 
2023-03-13 21:14:16:257 2000 sec: 447847685 operations; 226179.6 current ops/sec; est completion in 41 minutes [INSERT: Count=2261792, Max=35807, Min=315, Avg=1766.62, 90=2903, 99=7799, 99.9=16335, 99.99=29183] 
2023-03-13 21:14:26:257 2010 sec: 450063886 operations; 221620.1 current ops/sec; est completion in 40 minutes [INSERT: Count=2216208, Max=166783, Min=304, Avg=1803.01, 90=2907, 99=7667, 99.9=19135, 99.99=80639] 
2023-03-13 21:14:36:257 2020 sec: 452274129 operations; 221024.3 current ops/sec; est completion in 40 minutes [INSERT: Count=2210260, Max=60351, Min=308, Avg=1807.78, 90=2891, 99=7971, 99.9=18815, 99.99=54751] 
2023-03-13 21:14:46:257 2030 sec: 454521560 operations; 224743.1 current ops/sec; est completion in 40 minutes [INSERT: Count=2247411, Max=154751, Min=304, Avg=1778.03, 90=2825, 99=7883, 99.9=17919, 99.99=81279] 
2023-03-13 21:14:56:258 2040 sec: 456763965 operations; 224240.5 current ops/sec; est completion in 40 minutes [INSERT: Count=2242402, Max=31519, Min=312, Avg=1781.9, 90=2887, 99=7971, 99.9=16831, 99.99=26687] 
2023-03-13 21:15:06:257 2050 sec: 459004260 operations; 224029.5 current ops/sec; est completion in 40 minutes [INSERT: Count=2240297, Max=79615, Min=298, Avg=1783.64, 90=2837, 99=7315, 99.9=17791, 99.99=25999] 
2023-03-13 21:15:16:257 2060 sec: 461228810 operations; 222455 current ops/sec; est completion in 40 minutes [INSERT: Count=2224554, Max=45567, Min=286, Avg=1796.26, 90=2919, 99=7971, 99.9=18399, 99.99=41279] 
2023-03-13 21:15:26:257 2070 sec: 463457221 operations; 222841.1 current ops/sec; est completion in 39 minutes [INSERT: Count=2228403, Max=118591, Min=300, Avg=1793.1, 90=2843, 99=7691, 99.9=16655, 99.99=32703] 
2023-03-13 21:15:36:258 2080 sec: 465723959 operations; 226673.8 current ops/sec; est completion in 39 minutes [INSERT: Count=2266755, Max=39071, Min=303, Avg=1762.82, 90=2899, 99=8759, 99.9=19951, 99.99=29103] 
2023-03-13 21:15:46:257 2090 sec: 467991882 operations; 226792.3 current ops/sec; est completion in 39 minutes [INSERT: Count=2267914, Max=195327, Min=303, Avg=1761.82, 90=2967, 99=8919, 99.9=20303, 99.99=120767] 
2023-03-13 21:15:56:258 2100 sec: 470300286 operations; 230840.4 current ops/sec; est completion in 39 minutes [INSERT: Count=2308433, Max=90623, Min=303, Avg=1730.99, 90=3003, 99=8295, 99.9=17967, 99.99=26447] 
2023-03-13 21:16:06:257 2110 sec: 472555700 operations; 225541.4 current ops/sec; est completion in 39 minutes [INSERT: Count=2255364, Max=41247, Min=299, Avg=1771.57, 90=3003, 99=8151, 99.9=18575, 99.99=26943] 
2023-03-13 21:16:16:257 2120 sec: 474800359 operations; 224465.9 current ops/sec; est completion in 39 minutes [INSERT: Count=2244671, Max=44703, Min=308, Avg=1779.93, 90=2935, 99=8999, 99.9=19359, 99.99=26511] 
2023-03-13 21:16:26:257 2130 sec: 477024035 operations; 222367.6 current ops/sec; est completion in 38 minutes [INSERT: Count=2223681, Max=227839, Min=316, Avg=1797.17, 90=2883, 99=9191, 99.9=23087, 99.99=139903] 
2023-03-13 21:16:36:257 2140 sec: 479278659 operations; 225462.4 current ops/sec; est completion in 38 minutes [INSERT: Count=2254644, Max=37151, Min=312, Avg=1772.26, 90=2883, 99=9239, 99.9=19199, 99.99=30703] 
2023-03-13 21:16:46:257 2150 sec: 481568002 operations; 228934.3 current ops/sec; est completion in 38 minutes [INSERT: Count=2289314, Max=43583, Min=306, Avg=1745.3, 90=2865, 99=7787, 99.9=16023, 99.99=25103] 
2023-03-13 21:16:56:257 2160 sec: 483860125 operations; 229212.3 current ops/sec; est completion in 38 minutes [INSERT: Count=2292125, Max=49279, Min=307, Avg=1743.25, 90=3041, 99=8791, 99.9=18079, 99.99=26095] 
2023-03-13 21:17:06:257 2170 sec: 486126254 operations; 226612.9 current ops/sec; est completion in 38 minutes [INSERT: Count=2266139, Max=118847, Min=299, Avg=1763.17, 90=2927, 99=8303, 99.9=19007, 99.99=79615] 
2023-03-13 21:17:16:257 2180 sec: 488413073 operations; 228681.9 current ops/sec; est completion in 38 minutes [INSERT: Count=2286825, Max=36319, Min=313, Avg=1747.22, 90=2933, 99=9223, 99.9=18511, 99.99=25935] 
2023-03-13 21:17:26:257 2190 sec: 490702913 operations; 228984 current ops/sec; est completion in 37 minutes [INSERT: Count=2289825, Max=47999, Min=296, Avg=1744.9, 90=2987, 99=8567, 99.9=18799, 99.99=30687] 
2023-03-13 21:17:36:257 2200 sec: 493021515 operations; 231860.2 current ops/sec; est completion in 37 minutes [INSERT: Count=2318613, Max=48351, Min=301, Avg=1723.32, 90=3003, 99=8479, 99.9=17327, 99.99=26351] 
2023-03-13 21:17:46:257 2210 sec: 495262788 operations; 224127.3 current ops/sec; est completion in 37 minutes [INSERT: Count=2241268, Max=118975, Min=310, Avg=1782.92, 90=2969, 99=9623, 99.9=22047, 99.99=39583] 
2023-03-13 21:17:56:257 2220 sec: 497491141 operations; 222835.3 current ops/sec; est completion in 37 minutes [INSERT: Count=2228377, Max=39039, Min=316, Avg=1793.12, 90=2941, 99=8527, 99.9=17439, 99.99=25935] 
2023-03-13 21:18:06:257 2230 sec: 499717024 operations; 222588.3 current ops/sec; est completion in 37 minutes [INSERT: Count=2225862, Max=49471, Min=312, Avg=1795.17, 90=2891, 99=8167, 99.9=18767, 99.99=38815] 
2023-03-13 21:18:16:258 2240 sec: 501959128 operations; 224210.4 current ops/sec; est completion in 37 minutes [INSERT: Count=2242143, Max=51487, Min=306, Avg=1782.11, 90=2909, 99=8687, 99.9=19055, 99.99=30063] 
2023-03-13 21:18:26:257 2250 sec: 504245492 operations; 228636.4 current ops/sec; est completion in 36 minutes [INSERT: Count=2286333, Max=122623, Min=303, Avg=1747.61, 90=2899, 99=7807, 99.9=17631, 99.99=39327] 
2023-03-13 21:18:36:258 2260 sec: 506488117 operations; 224240.08 current ops/sec; est completion in 36 minutes [INSERT: Count=2242623, Max=41791, Min=293, Avg=1780.6, 90=2985, 99=8367, 99.9=19007, 99.99=30783] 
2023-03-13 21:18:46:257 2270 sec: 508746626 operations; 225873.49 current ops/sec; est completion in 36 minutes [INSERT: Count=2258498, Max=131199, Min=307, Avg=1770.31, 90=2857, 99=7939, 99.9=18799, 99.99=58015] 
2023-03-13 21:18:56:257 2280 sec: 511036015 operations; 228938.9 current ops/sec; est completion in 36 minutes [INSERT: Count=2289392, Max=34367, Min=310, Avg=1745.35, 90=2949, 99=8399, 99.9=16191, 99.99=22591] 
2023-03-13 21:19:06:257 2290 sec: 513329773 operations; 229375.8 current ops/sec; est completion in 36 minutes [INSERT: Count=2293752, Max=39999, Min=292, Avg=1742.02, 90=2927, 99=9591, 99.9=18543, 99.99=27775] 
2023-03-13 21:19:16:257 2300 sec: 515632175 operations; 230240.2 current ops/sec; est completion in 36 minutes [INSERT: Count=2302411, Max=48671, Min=310, Avg=1735.42, 90=2919, 99=8351, 99.9=18159, 99.99=30911] 
2023-03-13 21:19:26:257 2310 sec: 517886495 operations; 225432 current ops/sec; est completion in 35 minutes [INSERT: Count=2254327, Max=64383, Min=302, Avg=1772.51, 90=2921, 99=8091, 99.9=21055, 99.99=37151] 
2023-03-13 21:19:36:257 2320 sec: 520112934 operations; 222643.9 current ops/sec; est completion in 35 minutes [INSERT: Count=2226441, Max=36479, Min=303, Avg=1794.71, 90=2863, 99=8607, 99.9=17855, 99.99=28335] 
2023-03-13 21:19:46:257 2330 sec: 522337138 operations; 222420.4 current ops/sec; est completion in 35 minutes [INSERT: Count=2224188, Max=162943, Min=308, Avg=1796.19, 90=2861, 99=8263, 99.9=23007, 99.99=74559] 
2023-03-13 21:19:56:257 2340 sec: 524657744 operations; 232060.6 current ops/sec; est completion in 35 minutes [INSERT: Count=2320610, Max=25407, Min=312, Avg=1722.02, 90=2885, 99=7643, 99.9=15295, 99.99=19775] 
2023-03-13 21:20:06:257 2350 sec: 526920391 operations; 226264.7 current ops/sec; est completion in 35 minutes [INSERT: Count=2262634, Max=42847, Min=319, Avg=1765.94, 90=2925, 99=8831, 99.9=18783, 99.99=25119] 
2023-03-13 21:20:16:257 2360 sec: 529172818 operations; 225242.7 current ops/sec; est completion in 35 minutes [INSERT: Count=2252436, Max=36511, Min=301, Avg=1774.01, 90=2901, 99=8375, 99.9=17359, 99.99=25903] 
2023-03-13 21:20:26:257 2370 sec: 531417505 operations; 224468.7 current ops/sec; est completion in 34 minutes [INSERT: Count=2244681, Max=32575, Min=323, Avg=1780.1, 90=2849, 99=7971, 99.9=17263, 99.99=25135] 
2023-03-13 21:20:36:257 2380 sec: 533670791 operations; 225328.6 current ops/sec; est completion in 34 minutes [INSERT: Count=2253290, Max=52287, Min=319, Avg=1773.15, 90=2813, 99=7895, 99.9=17711, 99.99=44991] 
2023-03-13 21:20:46:257 2390 sec: 535931900 operations; 226110.9 current ops/sec; est completion in 34 minutes [INSERT: Count=2261106, Max=103167, Min=323, Avg=1767.34, 90=2831, 99=8623, 99.9=21519, 99.99=32863] 
2023-03-13 21:20:56:257 2400 sec: 538185219 operations; 225331.9 current ops/sec; est completion in 34 minutes [INSERT: Count=2253338, Max=42367, Min=310, Avg=1773.22, 90=2925, 99=8239, 99.9=19327, 99.99=30383] 
2023-03-13 21:21:06:257 2410 sec: 540430201 operations; 224498.2 current ops/sec; est completion in 34 minutes [INSERT: Count=2244970, Max=81983, Min=321, Avg=1779.84, 90=2903, 99=7803, 99.9=16847, 99.99=73471] 
2023-03-13 21:21:16:257 2420 sec: 542675436 operations; 224523.5 current ops/sec; est completion in 34 minutes [INSERT: Count=2245234, Max=39967, Min=306, Avg=1779.65, 90=2811, 99=7091, 99.9=16511, 99.99=27951] 
2023-03-13 21:21:26:257 2430 sec: 544891501 operations; 221606.5 current ops/sec; est completion in 33 minutes [INSERT: Count=2216057, Max=37887, Min=317, Avg=1803.15, 90=2749, 99=7195, 99.9=16231, 99.99=23135] 
2023-03-13 21:21:36:257 2440 sec: 547154129 operations; 226262.8 current ops/sec; est completion in 33 minutes [INSERT: Count=2262636, Max=33759, Min=320, Avg=1766.03, 90=2771, 99=7031, 99.9=16847, 99.99=26671] 
2023-03-13 21:21:46:257 2450 sec: 549377527 operations; 222339.8 current ops/sec; est completion in 33 minutes [INSERT: Count=2223392, Max=175487, Min=323, Avg=1797.15, 90=2805, 99=8055, 99.9=23007, 99.99=107839] 
2023-03-13 21:21:56:257 2460 sec: 551613216 operations; 223568.9 current ops/sec; est completion in 33 minutes [INSERT: Count=2235697, Max=42207, Min=316, Avg=1787.22, 90=2891, 99=7619, 99.9=15887, 99.99=25759] 
2023-03-13 21:22:06:257 2470 sec: 553821953 operations; 220873.7 current ops/sec; est completion in 33 minutes [INSERT: Count=2208741, Max=41919, Min=318, Avg=1809.24, 90=2849, 99=8247, 99.9=18239, 99.99=36479] 
2023-03-13 21:22:16:257 2480 sec: 556068540 operations; 224658.7 current ops/sec; est completion in 33 minutes [INSERT: Count=2246657, Max=32495, Min=314, Avg=1778.61, 90=2877, 99=7567, 99.9=16687, 99.99=24543] 
2023-03-13 21:22:26:257 2490 sec: 558282933 operations; 221439.3 current ops/sec; est completion in 32 minutes [INSERT: Count=2214316, Max=156799, Min=309, Avg=1804.53, 90=2899, 99=7991, 99.9=21487, 99.99=90559] 
2023-03-13 21:22:36:257 2500 sec: 560543407 operations; 226047.4 current ops/sec; est completion in 32 minutes [INSERT: Count=2260475, Max=36223, Min=301, Avg=1767.54, 90=2903, 99=7883, 99.9=16191, 99.99=27327] 
2023-03-13 21:22:46:257 2510 sec: 562796706 operations; 225329.9 current ops/sec; est completion in 32 minutes [INSERT: Count=2253295, Max=106815, Min=312, Avg=1773.33, 90=2835, 99=7727, 99.9=17263, 99.99=52799] 
2023-03-13 21:22:56:257 2520 sec: 565008744 operations; 221203.8 current ops/sec; est completion in 32 minutes [INSERT: Count=2212067, Max=27887, Min=308, Avg=1806.45, 90=2771, 99=6367, 99.9=16031, 99.99=20463] 
2023-03-13 21:23:06:257 2530 sec: 567243740 operations; 223499.6 current ops/sec; est completion in 32 minutes [INSERT: Count=2234962, Max=115455, Min=310, Avg=1787.76, 90=2801, 99=7203, 99.9=16303, 99.99=28751] 
2023-03-13 21:23:16:258 2540 sec: 569501706 operations; 225796.6 current ops/sec; est completion in 32 minutes [INSERT: Count=2257972, Max=36095, Min=298, Avg=1769.81, 90=2843, 99=7563, 99.9=17599, 99.99=30399] 
2023-03-13 21:23:26:257 2550 sec: 571753248 operations; 225154.2 current ops/sec; est completion in 31 minutes [INSERT: Count=2251536, Max=198271, Min=295, Avg=1774.65, 90=2917, 99=8119, 99.9=16399, 99.99=150271] 
2023-03-13 21:23:36:257 2560 sec: 574015471 operations; 226222.3 current ops/sec; est completion in 31 minutes [INSERT: Count=2262240, Max=33919, Min=303, Avg=1766.33, 90=2987, 99=7659, 99.9=16735, 99.99=23167] 
2023-03-13 21:23:46:257 2570 sec: 576237637 operations; 222216.6 current ops/sec; est completion in 31 minutes [INSERT: Count=2222167, Max=121663, Min=302, Avg=1798.16, 90=2849, 99=7635, 99.9=18159, 99.99=31615] 
2023-03-13 21:23:56:257 2580 sec: 578470775 operations; 223313.8 current ops/sec; est completion in 31 minutes [INSERT: Count=2233119, Max=30255, Min=309, Avg=1789.2, 90=2901, 99=7859, 99.9=17471, 99.99=23103] 
2023-03-13 21:24:06:257 2590 sec: 580712642 operations; 224186.7 current ops/sec; est completion in 31 minutes [INSERT: Count=2241875, Max=109823, Min=301, Avg=1782.37, 90=2919, 99=8591, 99.9=21455, 99.99=36319] 
2023-03-13 21:24:16:257 2600 sec: 582994568 operations; 228192.6 current ops/sec; est completion in 31 minutes [INSERT: Count=2281924, Max=48639, Min=301, Avg=1751, 90=2937, 99=8607, 99.9=18623, 99.99=28271] 
2023-03-13 21:24:26:257 2610 sec: 585258647 operations; 226407.9 current ops/sec; est completion in 30 minutes [INSERT: Count=2264077, Max=94655, Min=300, Avg=1764.83, 90=2943, 99=8103, 99.9=18319, 99.99=46207] 
2023-03-13 21:24:36:257 2620 sec: 587474915 operations; 221626.8 current ops/sec; est completion in 30 minutes [INSERT: Count=2216284, Max=46303, Min=308, Avg=1802.77, 90=2833, 99=6927, 99.9=16111, 99.99=21855] 
2023-03-13 21:24:46:257 2630 sec: 589690876 operations; 221596.1 current ops/sec; est completion in 30 minutes [INSERT: Count=2215953, Max=119231, Min=302, Avg=1803.48, 90=2865, 99=7775, 99.9=16687, 99.99=41631] 
2023-03-13 21:24:56:257 2640 sec: 591960730 operations; 226985.4 current ops/sec; est completion in 30 minutes [INSERT: Count=2269885, Max=43263, Min=297, Avg=1760.06, 90=2907, 99=8187, 99.9=18015, 99.99=24975] 
2023-03-13 21:25:06:257 2650 sec: 594253332 operations; 229260.2 current ops/sec; est completion in 30 minutes [INSERT: Count=2292563, Max=32015, Min=305, Avg=1743.05, 90=2903, 99=8383, 99.9=17407, 99.99=23999] 
2023-03-13 21:25:16:257 2660 sec: 596511564 operations; 225823.2 current ops/sec; est completion in 30 minutes [INSERT: Count=2258233, Max=45247, Min=294, Avg=1769.34, 90=2939, 99=9415, 99.9=20591, 99.99=32399] 
2023-03-13 21:25:26:257 2670 sec: 598755978 operations; 224441.4 current ops/sec; est completion in 29 minutes [INSERT: Count=2244420, Max=118463, Min=300, Avg=1780.41, 90=2931, 99=7867, 99.9=17279, 99.99=31711] 
2023-03-13 21:25:36:257 2680 sec: 601019400 operations; 226342.2 current ops/sec; est completion in 29 minutes [INSERT: Count=2263430, Max=66431, Min=307, Avg=1765.37, 90=2941, 99=8239, 99.9=20255, 99.99=62591] 
2023-03-13 21:25:46:257 2690 sec: 603305597 operations; 228619.7 current ops/sec; est completion in 29 minutes [INSERT: Count=2286180, Max=40703, Min=307, Avg=1747.63, 90=3005, 99=9039, 99.9=18463, 99.99=26895] 
2023-03-13 21:25:56:257 2700 sec: 605588002 operations; 228240.5 current ops/sec; est completion in 29 minutes [INSERT: Count=2282409, Max=42143, Min=312, Avg=1750.76, 90=3015, 99=8871, 99.9=18143, 99.99=27263] 
2023-03-13 21:26:06:257 2710 sec: 607853802 operations; 226580 current ops/sec; est completion in 29 minutes [INSERT: Count=2265803, Max=38303, Min=302, Avg=1763.52, 90=2901, 99=7955, 99.9=18223, 99.99=32591] 
2023-03-13 21:26:16:257 2720 sec: 610096359 operations; 224255.7 current ops/sec; est completion in 28 minutes [INSERT: Count=2242575, Max=38367, Min=326, Avg=1781.73, 90=2885, 99=7983, 99.9=17695, 99.99=24175] 
2023-03-13 21:26:26:257 2730 sec: 612319381 operations; 222302.2 current ops/sec; est completion in 28 minutes [INSERT: Count=2223005, Max=115647, Min=329, Avg=1797.49, 90=2965, 99=8839, 99.9=19983, 99.99=41727] 
2023-03-13 21:26:36:257 2740 sec: 614618936 operations; 229955.5 current ops/sec; est completion in 28 minutes [INSERT: Count=2299586, Max=39071, Min=314, Avg=1737.61, 90=2883, 99=8247, 99.9=18383, 99.99=28799] 
2023-03-13 21:26:46:257 2750 sec: 616926102 operations; 230716.6 current ops/sec; est completion in 28 minutes [INSERT: Count=2307126, Max=52351, Min=322, Avg=1731.71, 90=2911, 99=8583, 99.9=18463, 99.99=36127] 
2023-03-13 21:26:56:257 2760 sec: 619196250 operations; 227014.8 current ops/sec; est completion in 28 minutes [INSERT: Count=2270170, Max=61087, Min=318, Avg=1760.14, 90=2965, 99=9079, 99.9=20191, 99.99=34143] 
2023-03-13 21:27:06:257 2770 sec: 621441769 operations; 224551.9 current ops/sec; est completion in 28 minutes [INSERT: Count=2245505, Max=131327, Min=305, Avg=1779.46, 90=2905, 99=8103, 99.9=17023, 99.99=48159] 
2023-03-13 21:27:16:257 2780 sec: 623718573 operations; 227680.4 current ops/sec; est completion in 27 minutes [INSERT: Count=2276813, Max=32687, Min=310, Avg=1754.84, 90=2925, 99=7819, 99.9=16271, 99.99=22767] 
2023-03-13 21:27:26:257 2790 sec: 626021272 operations; 230269.9 current ops/sec; est completion in 27 minutes [INSERT: Count=2302684, Max=40927, Min=303, Avg=1735.33, 90=2901, 99=8351, 99.9=16847, 99.99=23119] 
2023-03-13 21:27:36:257 2800 sec: 628276137 operations; 225486.5 current ops/sec; est completion in 27 minutes [INSERT: Count=2254878, Max=33631, Min=306, Avg=1771.91, 90=2949, 99=8735, 99.9=19103, 99.99=25071] 
2023-03-13 21:27:46:257 2810 sec: 630540706 operations; 226456.9 current ops/sec; est completion in 27 minutes [INSERT: Count=2264549, Max=128063, Min=304, Avg=1756.3, 90=2803, 99=7619, 99.9=16495, 99.99=21519] 
2023-03-13 21:27:56:257 2820 sec: 632775043 operations; 223433.7 current ops/sec; est completion in 27 minutes [INSERT: Count=2234343, Max=125311, Min=306, Avg=1796.72, 90=2879, 99=7547, 99.9=19055, 99.99=40895] 
2023-03-13 21:28:06:257 2830 sec: 635031087 operations; 225604.4 current ops/sec; est completion in 27 minutes [INSERT: Count=2256054, Max=96575, Min=304, Avg=1771.07, 90=2881, 99=7559, 99.9=17183, 99.99=32063] 
2023-03-13 21:28:16:257 2840 sec: 637314473 operations; 228338.6 current ops/sec; est completion in 26 minutes [INSERT: Count=2283380, Max=39903, Min=302, Avg=1749.92, 90=2867, 99=7695, 99.9=16447, 99.99=24191] 
2023-03-13 21:28:26:257 2850 sec: 639602371 operations; 228789.8 current ops/sec; est completion in 26 minutes [INSERT: Count=2287900, Max=36799, Min=301, Avg=1746.29, 90=2971, 99=8367, 99.9=17567, 99.99=29199] 
2023-03-13 21:28:36:257 2860 sec: 641861569 operations; 225919.8 current ops/sec; est completion in 26 minutes [INSERT: Count=2259220, Max=52991, Min=305, Avg=1768.87, 90=2933, 99=8791, 99.9=18735, 99.99=28463] 
2023-03-13 21:28:46:257 2870 sec: 644096945 operations; 223537.6 current ops/sec; est completion in 26 minutes [INSERT: Count=2235352, Max=126463, Min=303, Avg=1787.52, 90=2869, 99=7947, 99.9=18783, 99.99=84543] 
2023-03-13 21:28:56:257 2880 sec: 646362267 operations; 226532.2 current ops/sec; est completion in 26 minutes [INSERT: Count=2265321, Max=46719, Min=311, Avg=1763.88, 90=2931, 99=7743, 99.9=16911, 99.99=31231] 
2023-03-13 21:29:06:257 2890 sec: 648604920 operations; 224265.3 current ops/sec; est completion in 26 minutes [INSERT: Count=2242655, Max=47487, Min=306, Avg=1781.57, 90=2943, 99=8311, 99.9=18991, 99.99=29487] 
2023-03-13 21:29:16:257 2900 sec: 650859070 operations; 225415 current ops/sec; est completion in 25 minutes [INSERT: Count=2254156, Max=39711, Min=309, Avg=1772.71, 90=2899, 99=7987, 99.9=17647, 99.99=26111] 
2023-03-13 21:29:26:257 2910 sec: 653110531 operations; 225146.1 current ops/sec; est completion in 25 minutes [INSERT: Count=2251459, Max=218879, Min=303, Avg=1774.64, 90=2937, 99=8263, 99.9=17151, 99.99=121599] 
2023-03-13 21:29:36:257 2920 sec: 655357901 operations; 224737 current ops/sec; est completion in 25 minutes [INSERT: Count=2247365, Max=58719, Min=318, Avg=1778.01, 90=2949, 99=7547, 99.9=17471, 99.99=26367] 
2023-03-13 21:29:46:257 2930 sec: 657596177 operations; 223827.6 current ops/sec; est completion in 25 minutes [INSERT: Count=2238273, Max=91519, Min=305, Avg=1785.29, 90=2961, 99=8255, 99.9=21183, 99.99=29727] 
2023-03-13 21:29:56:257 2940 sec: 659859260 operations; 226308.3 current ops/sec; est completion in 25 minutes [INSERT: Count=2263089, Max=35263, Min=302, Avg=1765.61, 90=2987, 99=8911, 99.9=17343, 99.99=24959] 
2023-03-13 21:30:06:257 2950 sec: 662147197 operations; 228793.7 current ops/sec; est completion in 25 minutes [INSERT: Count=2287936, Max=116799, Min=309, Avg=1746.44, 90=3013, 99=9239, 99.9=18447, 99.99=51871] 
2023-03-13 21:30:16:257 2960 sec: 664422685 operations; 227548.8 current ops/sec; est completion in 24 minutes [INSERT: Count=2275487, Max=46783, Min=295, Avg=1755.96, 90=3015, 99=8743, 99.9=21471, 99.99=35327] 
2023-03-13 21:30:26:257 2970 sec: 666675380 operations; 225269.5 current ops/sec; est completion in 24 minutes [INSERT: Count=2252696, Max=126271, Min=297, Avg=1773.73, 90=2971, 99=8191, 99.9=18527, 99.99=69247] 
2023-03-13 21:30:36:257 2980 sec: 668934523 operations; 225914.3 current ops/sec; est completion in 24 minutes [INSERT: Count=2259134, Max=40991, Min=309, Avg=1768.6, 90=2977, 99=8231, 99.9=17295, 99.99=26783] 
2023-03-13 21:30:46:257 2990 sec: 671213743 operations; 227922 current ops/sec; est completion in 24 minutes [INSERT: Count=2279224, Max=91007, Min=307, Avg=1753.16, 90=2881, 99=8007, 99.9=17423, 99.99=28383] 
2023-03-13 21:30:56:257 3000 sec: 673458102 operations; 224435.9 current ops/sec; est completion in 24 minutes [INSERT: Count=2244402, Max=40895, Min=303, Avg=1780.43, 90=2913, 99=9431, 99.9=18559, 99.99=27711] 
2023-03-13 21:31:06:257 3010 sec: 675728177 operations; 227007.5 current ops/sec; est completion in 24 minutes [INSERT: Count=2270032, Max=36607, Min=307, Avg=1760.12, 90=2909, 99=8887, 99.9=17679, 99.99=27375] 
2023-03-13 21:31:16:257 3020 sec: 677989161 operations; 226098.4 current ops/sec; est completion in 23 minutes [INSERT: Count=2260996, Max=43615, Min=307, Avg=1767.25, 90=2973, 99=8375, 99.9=16719, 99.99=24063] 
2023-03-13 21:31:26:257 3030 sec: 680212546 operations; 222338.5 current ops/sec; est completion in 23 minutes [INSERT: Count=2223375, Max=76223, Min=310, Avg=1797.18, 90=2909, 99=8623, 99.9=24607, 99.99=68543] 
2023-03-13 21:31:36:257 3040 sec: 682444853 operations; 223230.7 current ops/sec; est completion in 23 minutes [INSERT: Count=2232365, Max=75007, Min=298, Avg=1789.76, 90=2871, 99=8359, 99.9=18223, 99.99=60927] 
2023-03-13 21:31:46:258 3050 sec: 684703007 operations; 225815.4 current ops/sec; est completion in 23 minutes [INSERT: Count=2258110, Max=102015, Min=302, Avg=1769.46, 90=2903, 99=8615, 99.9=17439, 99.99=70143] 
2023-03-13 21:31:56:257 3060 sec: 686970354 operations; 226734.7 current ops/sec; est completion in 23 minutes [INSERT: Count=2267345, Max=35519, Min=303, Avg=1762.35, 90=2899, 99=8471, 99.9=17871, 99.99=26591] 
2023-03-13 21:32:06:257 3070 sec: 689245174 operations; 227482 current ops/sec; est completion in 23 minutes [INSERT: Count=2274829, Max=36831, Min=303, Avg=1756.45, 90=2899, 99=8279, 99.9=17967, 99.99=29423] 
2023-03-13 21:32:16:257 3080 sec: 691514267 operations; 226909.3 current ops/sec; est completion in 22 minutes [INSERT: Count=2269085, Max=37247, Min=305, Avg=1760.97, 90=2945, 99=7863, 99.9=19599, 99.99=28335] 
2023-03-13 21:32:26:257 3090 sec: 693774732 operations; 226046.5 current ops/sec; est completion in 22 minutes [INSERT: Count=2260468, Max=42175, Min=312, Avg=1767.48, 90=2997, 99=8303, 99.9=16527, 99.99=29599] 
2023-03-13 21:32:36:258 3100 sec: 696014534 operations; 223980.2 current ops/sec; est completion in 22 minutes [INSERT: Count=2239795, Max=44799, Min=312, Avg=1784.11, 90=2983, 99=8511, 99.9=18687, 99.99=28607] 
2023-03-13 21:32:46:257 3110 sec: 698255411 operations; 224087.7 current ops/sec; est completion in 22 minutes [INSERT: Count=2240881, Max=182271, Min=314, Avg=1783.03, 90=2875, 99=8207, 99.9=19151, 99.99=111615] 
2023-03-13 21:32:56:258 3120 sec: 700505412 operations; 225000.1 current ops/sec; est completion in 22 minutes [INSERT: Count=2250027, Max=215423, Min=320, Avg=1775.91, 90=2853, 99=8047, 99.9=18815, 99.99=126463] 
2023-03-13 21:33:06:257 3130 sec: 702751532 operations; 224612 current ops/sec; est completion in 22 minutes [INSERT: Count=2246100, Max=56895, Min=313, Avg=1778.9, 90=2883, 99=8183, 99.9=16959, 99.99=24895] 
2023-03-13 21:33:16:257 3140 sec: 705002486 operations; 225095.4 current ops/sec; est completion in 21 minutes [INSERT: Count=2250953, Max=43039, Min=307, Avg=1775.14, 90=2829, 99=7631, 99.9=16495, 99.99=32047] 
2023-03-13 21:33:26:257 3150 sec: 707284913 operations; 228242.7 current ops/sec; est completion in 21 minutes [INSERT: Count=2282425, Max=113087, Min=308, Avg=1750.62, 90=2897, 99=8131, 99.9=17007, 99.99=32047] 
2023-03-13 21:33:36:258 3160 sec: 709561372 operations; 227645.9 current ops/sec; est completion in 21 minutes [INSERT: Count=2276486, Max=39743, Min=320, Avg=1755.23, 90=2893, 99=7951, 99.9=17071, 99.99=25183] 
2023-03-13 21:33:46:257 3170 sec: 711802601 operations; 224122.9 current ops/sec; est completion in 21 minutes [INSERT: Count=2241204, Max=34687, Min=316, Avg=1782.76, 90=2873, 99=8163, 99.9=18191, 99.99=23935] 
2023-03-13 21:33:56:257 3180 sec: 714061695 operations; 225909.4 current ops/sec; est completion in 21 minutes [INSERT: Count=2259093, Max=38015, Min=307, Avg=1768.83, 90=2825, 99=7535, 99.9=21295, 99.99=28671] 
2023-03-13 21:34:06:257 3190 sec: 716322494 operations; 226079.9 current ops/sec; est completion in 21 minutes [INSERT: Count=2260790, Max=194431, Min=310, Avg=1767.44, 90=2873, 99=7315, 99.9=15999, 99.99=99583] 
2023-03-13 21:34:16:257 3200 sec: 718571471 operations; 224897.7 current ops/sec; est completion in 20 minutes [INSERT: Count=2248980, Max=45695, Min=321, Avg=1776.73, 90=2897, 99=8527, 99.9=18063, 99.99=29775] 
2023-03-13 21:34:26:257 3210 sec: 720874004 operations; 230253.3 current ops/sec; est completion in 20 minutes [INSERT: Count=2302527, Max=39999, Min=323, Avg=1735.33, 90=2861, 99=7195, 99.9=15463, 99.99=23823] 
2023-03-13 21:34:36:257 3220 sec: 723109351 operations; 223534.7 current ops/sec; est completion in 20 minutes [INSERT: Count=2235338, Max=35231, Min=317, Avg=1787.55, 90=2887, 99=8083, 99.9=18607, 99.99=25759] 
2023-03-13 21:34:46:257 3230 sec: 725326899 operations; 221754.8 current ops/sec; est completion in 20 minutes [INSERT: Count=2217550, Max=189439, Min=315, Avg=1801.96, 90=2757, 99=7403, 99.9=16943, 99.99=141311] 
2023-03-13 21:34:56:257 3240 sec: 727555683 operations; 222878.4 current ops/sec; est completion in 20 minutes [INSERT: Count=2228786, Max=35231, Min=320, Avg=1792.67, 90=2821, 99=7315, 99.9=16495, 99.99=21007] 
2023-03-13 21:35:06:257 3250 sec: 729786510 operations; 223082.7 current ops/sec; est completion in 20 minutes [INSERT: Count=2230825, Max=31519, Min=323, Avg=1791.25, 90=2777, 99=7487, 99.9=17103, 99.99=27823] 
2023-03-13 21:35:16:257 3260 sec: 732017331 operations; 223082.1 current ops/sec; est completion in 19 minutes [INSERT: Count=2230823, Max=33663, Min=321, Avg=1791.07, 90=2837, 99=7515, 99.9=16431, 99.99=22655] 
2023-03-13 21:35:26:257 3270 sec: 734268653 operations; 225132.2 current ops/sec; est completion in 19 minutes [INSERT: Count=2251315, Max=39423, Min=313, Avg=1774.96, 90=2805, 99=7539, 99.9=16167, 99.99=34591] 
2023-03-13 21:35:36:257 3280 sec: 736518430 operations; 224977.7 current ops/sec; est completion in 19 minutes [INSERT: Count=2249800, Max=36319, Min=313, Avg=1775.97, 90=2815, 99=7299, 99.9=16815, 99.99=24111] 
2023-03-13 21:35:46:257 3290 sec: 738716278 operations; 219784.8 current ops/sec; est completion in 19 minutes [INSERT: Count=2197849, Max=197119, Min=320, Avg=1818.31, 90=2799, 99=6991, 99.9=18623, 99.99=148863] 
2023-03-13 21:35:56:257 3300 sec: 740959956 operations; 224367.8 current ops/sec; est completion in 19 minutes [INSERT: Count=2243704, Max=32351, Min=316, Avg=1780.85, 90=2827, 99=6815, 99.9=15063, 99.99=23279] 
2023-03-13 21:36:06:257 3310 sec: 743179200 operations; 221924.4 current ops/sec; est completion in 19 minutes [INSERT: Count=2219225, Max=180863, Min=316, Avg=1800.6, 90=2799, 99=7123, 99.9=17199, 99.99=52479] 
2023-03-13 21:36:16:257 3320 sec: 745386884 operations; 220768.4 current ops/sec; est completion in 18 minutes [INSERT: Count=2207679, Max=41247, Min=316, Avg=1809.85, 90=2787, 99=7123, 99.9=17615, 99.99=28319] 
2023-03-13 21:36:26:257 3330 sec: 747591020 operations; 220413.6 current ops/sec; est completion in 18 minutes [INSERT: Count=2204109, Max=188159, Min=317, Avg=1813, 90=2781, 99=7143, 99.9=16799, 99.99=123903] 
2023-03-13 21:36:36:257 3340 sec: 749834177 operations; 224315.7 current ops/sec; est completion in 18 minutes [INSERT: Count=2243162, Max=37023, Min=312, Avg=1781.22, 90=2819, 99=7047, 99.9=15807, 99.99=27599] 
2023-03-13 21:36:46:257 3350 sec: 752051167 operations; 221699 current ops/sec; est completion in 18 minutes [INSERT: Count=2216994, Max=222079, Min=312, Avg=1802.43, 90=2765, 99=6779, 99.9=16655, 99.99=116799] 
2023-03-13 21:36:56:257 3360 sec: 754279449 operations; 222828.2 current ops/sec; est completion in 18 minutes [INSERT: Count=2228296, Max=30655, Min=321, Avg=1791.84, 90=2787, 99=6947, 99.9=17247, 99.99=25663] 
2023-03-13 21:37:06:257 3370 sec: 756477432 operations; 219798.3 current ops/sec; est completion in 18 minutes [INSERT: Count=2197975, Max=110911, Min=314, Avg=1819.34, 90=2851, 99=7159, 99.9=18367, 99.99=68287] 
2023-03-13 21:37:16:257 3380 sec: 758695470 operations; 221803.8 current ops/sec; est completion in 17 minutes [INSERT: Count=2218027, Max=35007, Min=313, Avg=1801.5, 90=2831, 99=6751, 99.9=15935, 99.99=30319] 
2023-03-13 21:37:26:257 3390 sec: 760889999 operations; 219452.9 current ops/sec; est completion in 17 minutes [INSERT: Count=2194530, Max=156671, Min=306, Avg=1820.84, 90=2819, 99=7395, 99.9=22095, 99.99=68671] 
2023-03-13 21:37:36:257 3400 sec: 763128030 operations; 223803.1 current ops/sec; est completion in 17 minutes [INSERT: Count=2238030, Max=36671, Min=315, Avg=1785.46, 90=2781, 99=6647, 99.9=15679, 99.99=29727] 
2023-03-13 21:37:46:257 3410 sec: 765342264 operations; 221423.4 current ops/sec; est completion in 17 minutes [INSERT: Count=2214238, Max=128383, Min=311, Avg=1804.66, 90=2783, 99=6991, 99.9=17119, 99.99=91455] 
2023-03-13 21:37:56:257 3420 sec: 767555913 operations; 221364.9 current ops/sec; est completion in 17 minutes [INSERT: Count=2213679, Max=48095, Min=304, Avg=1805.09, 90=2749, 99=6887, 99.9=17343, 99.99=38847] 
2023-03-13 21:38:06:257 3430 sec: 769757390 operations; 220147.7 current ops/sec; est completion in 17 minutes [INSERT: Count=2201446, Max=200703, Min=322, Avg=1815.03, 90=2843, 99=7323, 99.9=15855, 99.99=115519] 
2023-03-13 21:38:16:257 3440 sec: 771960227 operations; 220283.7 current ops/sec; est completion in 16 minutes [INSERT: Count=2202836, Max=36159, Min=310, Avg=1813.97, 90=2867, 99=7051, 99.9=16943, 99.99=29327] 
2023-03-13 21:38:26:257 3450 sec: 774158005 operations; 219777.8 current ops/sec; est completion in 16 minutes [INSERT: Count=2197776, Max=186367, Min=307, Avg=1818.18, 90=2777, 99=6663, 99.9=18863, 99.99=120511] 
2023-03-13 21:38:36:257 3460 sec: 776376161 operations; 221815.6 current ops/sec; est completion in 16 minutes [INSERT: Count=2218164, Max=48735, Min=312, Avg=1801.37, 90=2805, 99=7071, 99.9=17647, 99.99=31279] 
2023-03-13 21:38:46:257 3470 sec: 778585840 operations; 220967.9 current ops/sec; est completion in 16 minutes [INSERT: Count=2209670, Max=181759, Min=308, Avg=1808.33, 90=2799, 99=7303, 99.9=19807, 99.99=119679] 
2023-03-13 21:38:56:257 3480 sec: 780806753 operations; 222091.3 current ops/sec; est completion in 16 minutes [INSERT: Count=2220924, Max=36447, Min=318, Avg=1799.16, 90=2813, 99=6975, 99.9=15719, 99.99=20111] 
2023-03-13 21:39:06:257 3490 sec: 783022199 operations; 221544.6 current ops/sec; est completion in 16 minutes [INSERT: Count=2215442, Max=37407, Min=316, Avg=1803.65, 90=2825, 99=7151, 99.9=17903, 99.99=25631] 
2023-03-13 21:39:16:257 3500 sec: 785232257 operations; 221005.8 current ops/sec; est completion in 15 minutes [INSERT: Count=2210055, Max=33471, Min=310, Avg=1807.92, 90=2835, 99=6927, 99.9=16799, 99.99=25711] 
2023-03-13 21:39:26:257 3510 sec: 787462989 operations; 223073.2 current ops/sec; est completion in 15 minutes [INSERT: Count=2230734, Max=34463, Min=320, Avg=1791.27, 90=2811, 99=6779, 99.9=15855, 99.99=22559] 
2023-03-13 21:39:36:257 3520 sec: 789678813 operations; 221582.4 current ops/sec; est completion in 15 minutes [INSERT: Count=2215824, Max=35583, Min=308, Avg=1803.31, 90=2761, 99=6651, 99.9=17087, 99.99=24127] 
2023-03-13 21:39:46:257 3530 sec: 791913990 operations; 223517.7 current ops/sec; est completion in 15 minutes [INSERT: Count=2235176, Max=131071, Min=317, Avg=1787.69, 90=2801, 99=7267, 99.9=16927, 99.99=43871] 
2023-03-13 21:39:56:257 3540 sec: 794135255 operations; 222126.5 current ops/sec; est completion in 15 minutes [INSERT: Count=2221262, Max=37599, Min=312, Avg=1798.93, 90=2861, 99=7163, 99.9=16719, 99.99=25039] 
2023-03-13 21:40:06:257 3550 sec: 796340192 operations; 220493.7 current ops/sec; est completion in 15 minutes [INSERT: Count=2204941, Max=41503, Min=309, Avg=1812.17, 90=2821, 99=7159, 99.9=17567, 99.99=26399] 
2023-03-13 21:40:16:257 3560 sec: 798555347 operations; 221515.5 current ops/sec; est completion in 14 minutes [INSERT: Count=2215150, Max=39743, Min=311, Avg=1803.96, 90=2807, 99=7443, 99.9=18799, 99.99=29567] 
2023-03-13 21:40:26:257 3570 sec: 800783830 operations; 222848.3 current ops/sec; est completion in 14 minutes [INSERT: Count=2228487, Max=158975, Min=313, Avg=1792.98, 90=2833, 99=7083, 99.9=15895, 99.99=76671] 
2023-03-13 21:40:36:257 3580 sec: 803006949 operations; 222311.9 current ops/sec; est completion in 14 minutes [INSERT: Count=2223129, Max=78271, Min=316, Avg=1797.44, 90=2811, 99=6759, 99.9=17295, 99.99=73279] 
2023-03-13 21:40:46:257 3590 sec: 805202370 operations; 219542.1 current ops/sec; est completion in 14 minutes [INSERT: Count=2195418, Max=172671, Min=321, Avg=1820.15, 90=2783, 99=7203, 99.9=20767, 99.99=123519] 
2023-03-13 21:40:56:257 3600 sec: 807437204 operations; 223483.4 current ops/sec; est completion in 14 minutes [INSERT: Count=2234834, Max=32591, Min=321, Avg=1787.95, 90=2813, 99=6483, 99.9=13967, 99.99=25631] 
2023-03-13 21:41:06:257 3610 sec: 809653632 operations; 221642.8 current ops/sec; est completion in 14 minutes [INSERT: Count=2216424, Max=141311, Min=313, Avg=1802.86, 90=2757, 99=6927, 99.9=18447, 99.99=55327] 
2023-03-13 21:41:16:258 3620 sec: 811853911 operations; 220027.9 current ops/sec; est completion in 13 minutes [INSERT: Count=2200270, Max=37471, Min=316, Avg=1816.1, 90=2785, 99=7011, 99.9=22063, 99.99=33791] 
2023-03-13 21:41:26:257 3630 sec: 814077318 operations; 222340.7 current ops/sec; est completion in 13 minutes [INSERT: Count=2223420, Max=207103, Min=313, Avg=1797.11, 90=2755, 99=6795, 99.9=17727, 99.99=141311] 
2023-03-13 21:41:36:257 3640 sec: 816297709 operations; 222039.1 current ops/sec; est completion in 13 minutes [INSERT: Count=2220379, Max=35967, Min=319, Avg=1799.57, 90=2821, 99=7607, 99.9=18031, 99.99=27215] 
2023-03-13 21:41:46:257 3650 sec: 818501184 operations; 220347.5 current ops/sec; est completion in 13 minutes [INSERT: Count=2203478, Max=174207, Min=320, Avg=1813.5, 90=2843, 99=7015, 99.9=15583, 99.99=85631] 
2023-03-13 21:41:56:257 3660 sec: 820720405 operations; 221922.1 current ops/sec; est completion in 13 minutes [INSERT: Count=2219232, Max=46559, Min=317, Avg=1800.49, 90=2815, 99=6667, 99.9=14735, 99.99=40767] 
2023-03-13 21:42:06:257 3670 sec: 822943642 operations; 222323.7 current ops/sec; est completion in 13 minutes [INSERT: Count=2223234, Max=44511, Min=318, Avg=1797.37, 90=2843, 99=7187, 99.9=16703, 99.99=33439] 
2023-03-13 21:42:16:257 3680 sec: 825176388 operations; 223274.6 current ops/sec; est completion in 13 minutes [INSERT: Count=2232745, Max=35711, Min=327, Avg=1789.64, 90=2833, 99=7099, 99.9=15927, 99.99=23295] 
2023-03-13 21:42:26:257 3690 sec: 827404424 operations; 222803.6 current ops/sec; est completion in 12 minutes [INSERT: Count=2228052, Max=119231, Min=321, Avg=1793.32, 90=2813, 99=6655, 99.9=14335, 99.99=30207] 
2023-03-13 21:42:36:257 3700 sec: 829602749 operations; 219832.5 current ops/sec; est completion in 12 minutes [INSERT: Count=2198299, Max=32383, Min=318, Avg=1817.85, 90=2829, 99=7307, 99.9=18127, 99.99=27615] 
2023-03-13 21:42:46:257 3710 sec: 831829029 operations; 222628 current ops/sec; est completion in 12 minutes [INSERT: Count=2226306, Max=74623, Min=312, Avg=1794.86, 90=2739, 99=6739, 99.9=16055, 99.99=26831] 
2023-03-13 21:42:56:257 3720 sec: 834058073 operations; 222904.4 current ops/sec; est completion in 12 minutes [INSERT: Count=2229038, Max=33599, Min=325, Avg=1792.63, 90=2823, 99=6955, 99.9=15535, 99.99=28207] 
2023-03-13 21:43:06:257 3730 sec: 836279760 operations; 222168.7 current ops/sec; est completion in 12 minutes [INSERT: Count=2221695, Max=33535, Min=318, Avg=1798.44, 90=2793, 99=7515, 99.9=18175, 99.99=24287] 
2023-03-13 21:43:16:257 3740 sec: 838501268 operations; 222150.8 current ops/sec; est completion in 12 minutes [INSERT: Count=2221500, Max=43423, Min=313, Avg=1798.78, 90=2809, 99=7607, 99.9=18031, 99.99=27391] 
2023-03-13 21:43:26:257 3750 sec: 840704955 operations; 220368.7 current ops/sec; est completion in 11 minutes [INSERT: Count=2203684, Max=57151, Min=312, Avg=1813.25, 90=2837, 99=7267, 99.9=17583, 99.99=29711] 
2023-03-13 21:43:36:257 3760 sec: 842935048 operations; 223009.3 current ops/sec; est completion in 11 minutes [INSERT: Count=2230098, Max=38463, Min=322, Avg=1791.75, 90=2811, 99=6859, 99.9=16111, 99.99=30287] 
2023-03-13 21:43:46:257 3770 sec: 845139160 operations; 220411.2 current ops/sec; est completion in 11 minutes [INSERT: Count=2204116, Max=120895, Min=307, Avg=1812.98, 90=2815, 99=7439, 99.9=21231, 99.99=45247] 
2023-03-13 21:43:56:257 3780 sec: 847349981 operations; 221082.1 current ops/sec; est completion in 11 minutes [INSERT: Count=2210815, Max=44735, Min=317, Avg=1807.4, 90=2817, 99=7163, 99.9=19519, 99.99=36799] 
2023-03-13 21:44:06:257 3790 sec: 849572028 operations; 222204.7 current ops/sec; est completion in 11 minutes [INSERT: Count=2222045, Max=150399, Min=312, Avg=1798.29, 90=2755, 99=7075, 99.9=17855, 99.99=68223] 
2023-03-13 21:44:16:257 3800 sec: 851774935 operations; 220290.7 current ops/sec; est completion in 11 minutes [INSERT: Count=2202872, Max=38783, Min=308, Avg=1813.83, 90=2811, 99=7095, 99.9=17935, 99.99=25295] 
2023-03-13 21:44:26:257 3810 sec: 854006451 operations; 223151.6 current ops/sec; est completion in 10 minutes [INSERT: Count=2231542, Max=158719, Min=316, Avg=1790.64, 90=2757, 99=6587, 99.9=16543, 99.99=64799] 
2023-03-13 21:44:36:257 3820 sec: 856235053 operations; 222860.2 current ops/sec; est completion in 10 minutes [INSERT: Count=2228605, Max=38111, Min=314, Avg=1792.93, 90=2755, 99=7091, 99.9=15911, 99.99=29775] 
2023-03-13 21:44:46:257 3830 sec: 858452979 operations; 221792.6 current ops/sec; est completion in 10 minutes [INSERT: Count=2217918, Max=136447, Min=316, Avg=1801.62, 90=2799, 99=7335, 99.9=16543, 99.99=62463] 
2023-03-13 21:44:56:258 3840 sec: 860680898 operations; 222791.9 current ops/sec; est completion in 10 minutes [INSERT: Count=2227932, Max=39647, Min=322, Avg=1793.53, 90=2829, 99=7143, 99.9=17119, 99.99=33919] 
2023-03-13 21:45:06:258 3850 sec: 862911018 operations; 223012 current ops/sec; est completion in 10 minutes [INSERT: Count=2230134, Max=41503, Min=312, Avg=1791.79, 90=2803, 99=7063, 99.9=16911, 99.99=28831] 
2023-03-13 21:45:16:257 3860 sec: 865133920 operations; 222290.2 current ops/sec; est completion in 10 minutes [INSERT: Count=2222895, Max=37727, Min=326, Avg=1797.36, 90=2809, 99=7163, 99.9=17487, 99.99=32703] 
2023-03-13 21:45:26:257 3870 sec: 867310330 operations; 217641 current ops/sec; est completion in 9 minutes [INSERT: Count=2176405, Max=175103, Min=312, Avg=1836.12, 90=2869, 99=7079, 99.9=19455, 99.99=129087] 
2023-03-13 21:45:36:257 3880 sec: 869521929 operations; 221159.9 current ops/sec; est completion in 9 minutes [INSERT: Count=2211581, Max=208255, Min=308, Avg=1806.85, 90=2811, 99=7447, 99.9=17199, 99.99=118015] 
2023-03-13 21:45:46:257 3890 sec: 871743782 operations; 222185.3 current ops/sec; est completion in 9 minutes [INSERT: Count=2221872, Max=126079, Min=317, Avg=1798.43, 90=2793, 99=6875, 99.9=15623, 99.99=75775] 
2023-03-13 21:45:56:257 3900 sec: 873977882 operations; 223410 current ops/sec; est completion in 9 minutes [INSERT: Count=2234108, Max=28975, Min=307, Avg=1788.49, 90=2797, 99=7011, 99.9=14983, 99.99=25583] 
2023-03-13 21:46:06:257 3910 sec: 876218531 operations; 224064.9 current ops/sec; est completion in 9 minutes [INSERT: Count=2240645, Max=79231, Min=317, Avg=1783.34, 90=2743, 99=6611, 99.9=15703, 99.99=28367] 
2023-03-13 21:46:16:257 3920 sec: 878445292 operations; 222676.1 current ops/sec; est completion in 9 minutes [INSERT: Count=2226750, Max=213375, Min=301, Avg=1794.47, 90=2727, 99=6491, 99.9=18399, 99.99=137983] 
2023-03-13 21:46:26:257 3930 sec: 880668722 operations; 222343 current ops/sec; est completion in 8 minutes [INSERT: Count=2223438, Max=142079, Min=318, Avg=1797.15, 90=2787, 99=7071, 99.9=17823, 99.99=43391] 
2023-03-13 21:46:36:257 3940 sec: 882892665 operations; 222394.3 current ops/sec; est completion in 8 minutes [INSERT: Count=2223934, Max=32527, Min=318, Avg=1796.7, 90=2817, 99=7291, 99.9=17119, 99.99=29199] 
2023-03-13 21:46:46:257 3950 sec: 885094797 operations; 220213.2 current ops/sec; est completion in 8 minutes [INSERT: Count=2202126, Max=161791, Min=313, Avg=1814.59, 90=2819, 99=7467, 99.9=16735, 99.99=84799] 
2023-03-13 21:46:56:257 3960 sec: 887323166 operations; 222836.9 current ops/sec; est completion in 8 minutes [INSERT: Count=2228381, Max=31423, Min=304, Avg=1793.15, 90=2861, 99=7115, 99.9=15039, 99.99=21375] 
2023-03-13 21:47:06:258 3970 sec: 889544168 operations; 222100.2 current ops/sec; est completion in 8 minutes [INSERT: Count=2221043, Max=47999, Min=311, Avg=1799.12, 90=2795, 99=7415, 99.9=16543, 99.99=25439] 
2023-03-13 21:47:16:257 3980 sec: 891751577 operations; 220740.9 current ops/sec; est completion in 8 minutes [INSERT: Count=2207364, Max=44543, Min=316, Avg=1810.25, 90=2827, 99=7435, 99.9=17775, 99.99=27791] 
2023-03-13 21:47:26:257 3990 sec: 893950705 operations; 219912.8 current ops/sec; est completion in 7 minutes [INSERT: Count=2199130, Max=163327, Min=311, Avg=1816.97, 90=2813, 99=7211, 99.9=20575, 99.99=86399] 
2023-03-13 21:47:36:257 4000 sec: 896139904 operations; 218919.9 current ops/sec; est completion in 7 minutes [INSERT: Count=2189220, Max=45343, Min=307, Avg=1825.23, 90=2823, 99=7323, 99.9=17087, 99.99=31647] 
2023-03-13 21:47:46:257 4010 sec: 898385637 operations; 224573.3 current ops/sec; est completion in 7 minutes [INSERT: Count=2245700, Max=151295, Min=309, Avg=1779.37, 90=2769, 99=6679, 99.9=16623, 99.99=70911] 
2023-03-13 21:47:56:257 4020 sec: 900616575 operations; 223093.8 current ops/sec; est completion in 7 minutes [INSERT: Count=2230948, Max=27439, Min=326, Avg=1791.12, 90=2789, 99=6915, 99.9=14063, 99.99=19551] 
2023-03-13 21:48:06:257 4030 sec: 902834476 operations; 221790.1 current ops/sec; est completion in 7 minutes [INSERT: Count=2217898, Max=40607, Min=300, Avg=1801.56, 90=2811, 99=7511, 99.9=17151, 99.99=34335] 
2023-03-13 21:48:16:257 4040 sec: 905067422 operations; 223294.6 current ops/sec; est completion in 7 minutes [INSERT: Count=2232938, Max=31951, Min=310, Avg=1789.4, 90=2797, 99=7559, 99.9=17727, 99.99=25487] 
2023-03-13 21:48:26:257 4050 sec: 907278483 operations; 221106.1 current ops/sec; est completion in 6 minutes [INSERT: Count=2211069, Max=155135, Min=324, Avg=1807.41, 90=2857, 99=7251, 99.9=17087, 99.99=92543] 
2023-03-13 21:48:36:257 4060 sec: 909484987 operations; 220650.4 current ops/sec; est completion in 6 minutes [INSERT: Count=2206491, Max=43583, Min=314, Avg=1809.95, 90=2849, 99=7815, 99.9=19663, 99.99=29599] 
2023-03-13 21:48:46:257 4070 sec: 911689159 operations; 220417.2 current ops/sec; est completion in 6 minutes [INSERT: Count=2204181, Max=161151, Min=318, Avg=1811.92, 90=2775, 99=7615, 99.9=17311, 99.99=103295] 
2023-03-13 21:48:56:257 4080 sec: 913894661 operations; 220550.2 current ops/sec; est completion in 6 minutes [INSERT: Count=2205519, Max=154239, Min=317, Avg=1813.69, 90=2787, 99=6847, 99.9=17183, 99.99=56319] 
2023-03-13 21:49:06:257 4090 sec: 916114021 operations; 221936 current ops/sec; est completion in 6 minutes [INSERT: Count=2219350, Max=42975, Min=317, Avg=1800.49, 90=2779, 99=6967, 99.9=17887, 99.99=34111] 
2023-03-13 21:49:16:257 4100 sec: 918341315 operations; 222729.4 current ops/sec; est completion in 6 minutes [INSERT: Count=2227320, Max=38719, Min=309, Avg=1793.94, 90=2817, 99=6955, 99.9=15599, 99.99=29007] 
2023-03-13 21:49:26:257 4110 sec: 920577555 operations; 223624 current ops/sec; est completion in 5 minutes [INSERT: Count=2236212, Max=61599, Min=307, Avg=1786.87, 90=2873, 99=7359, 99.9=16767, 99.99=33663] 
2023-03-13 21:49:36:257 4120 sec: 922812422 operations; 223486.7 current ops/sec; est completion in 5 minutes [INSERT: Count=2234870, Max=40255, Min=319, Avg=1788.02, 90=2793, 99=7667, 99.9=17199, 99.99=24943] 
2023-03-13 21:49:46:257 4130 sec: 925030883 operations; 221846.1 current ops/sec; est completion in 5 minutes [INSERT: Count=2218429, Max=136831, Min=321, Avg=1800.2, 90=2805, 99=7383, 99.9=18783, 99.99=57375] 
2023-03-13 21:49:56:257 4140 sec: 927254441 operations; 222355.8 current ops/sec; est completion in 5 minutes [INSERT: Count=2223592, Max=123071, Min=318, Avg=1798.07, 90=2765, 99=6503, 99.9=17055, 99.99=79615] 
2023-03-13 21:50:06:257 4150 sec: 929452258 operations; 219781.7 current ops/sec; est completion in 5 minutes [INSERT: Count=2197799, Max=146943, Min=319, Avg=1817.91, 90=2773, 99=7051, 99.9=16415, 99.99=61151] 
2023-03-13 21:50:16:257 4160 sec: 931661548 operations; 220929 current ops/sec; est completion in 5 minutes [INSERT: Count=2209320, Max=27839, Min=318, Avg=1808.85, 90=2837, 99=7275, 99.9=16495, 99.99=21903] 
2023-03-13 21:50:26:257 4170 sec: 933898221 operations; 223667.3 current ops/sec; est completion in 4 minutes [INSERT: Count=2236647, Max=137215, Min=308, Avg=1786.48, 90=2795, 99=7207, 99.9=17455, 99.99=79999] 
2023-03-13 21:50:36:257 4180 sec: 936112065 operations; 221384.4 current ops/sec; est completion in 4 minutes [INSERT: Count=2213848, Max=42463, Min=319, Avg=1804.9, 90=2829, 99=7159, 99.9=17743, 99.99=31215] 
2023-03-13 21:50:46:257 4190 sec: 938301890 operations; 218982.5 current ops/sec; est completion in 4 minutes [INSERT: Count=2189841, Max=181759, Min=314, Avg=1824.76, 90=2805, 99=6875, 99.9=20543, 99.99=138495] 
2023-03-13 21:50:56:257 4200 sec: 940506922 operations; 220503.2 current ops/sec; est completion in 4 minutes [INSERT: Count=2205021, Max=70143, Min=315, Avg=1812.13, 90=2821, 99=7315, 99.9=17247, 99.99=66687] 
2023-03-13 21:51:06:257 4210 sec: 942742499 operations; 223557.7 current ops/sec; est completion in 4 minutes [INSERT: Count=2235621, Max=34719, Min=316, Avg=1787.39, 90=2863, 99=7291, 99.9=17023, 99.99=23679] 
2023-03-13 21:51:16:257 4220 sec: 944953394 operations; 221089.5 current ops/sec; est completion in 4 minutes [INSERT: Count=2210843, Max=51935, Min=304, Avg=1807.32, 90=2815, 99=7375, 99.9=17391, 99.99=27023] 
2023-03-13 21:51:26:257 4230 sec: 947146717 operations; 219332.3 current ops/sec; est completion in 3 minutes [INSERT: Count=2193343, Max=206463, Min=296, Avg=1821.78, 90=2767, 99=6871, 99.9=18319, 99.99=123519] 
2023-03-13 21:51:36:257 4240 sec: 949375129 operations; 222841.2 current ops/sec; est completion in 3 minutes [INSERT: Count=2228388, Max=35167, Min=308, Avg=1793.21, 90=2835, 99=7799, 99.9=17471, 99.99=25263] 
2023-03-13 21:51:46:257 4250 sec: 951625206 operations; 225007.7 current ops/sec; est completion in 3 minutes [INSERT: Count=2250090, Max=186111, Min=296, Avg=1775.65, 90=2901, 99=7767, 99.9=19679, 99.99=94335] 
2023-03-13 21:51:56:257 4260 sec: 953870062 operations; 224485.6 current ops/sec; est completion in 3 minutes [INSERT: Count=2244848, Max=41983, Min=302, Avg=1780.02, 90=2943, 99=8279, 99.9=20959, 99.99=28943] 
2023-03-13 21:52:06:257 4270 sec: 956114560 operations; 224449.8 current ops/sec; est completion in 3 minutes [INSERT: Count=2244522, Max=108351, Min=301, Avg=1780.26, 90=2911, 99=7851, 99.9=19615, 99.99=33279] 
2023-03-13 21:52:16:257 4280 sec: 958361285 operations; 224672.5 current ops/sec; est completion in 3 minutes [INSERT: Count=2246712, Max=36927, Min=305, Avg=1778.44, 90=2935, 99=7735, 99.9=16559, 99.99=23903] 
2023-03-13 21:52:26:257 4290 sec: 960614088 operations; 225280.3 current ops/sec; est completion in 2 minutes [INSERT: Count=2252804, Max=94655, Min=306, Avg=1773.68, 90=2827, 99=6959, 99.9=16303, 99.99=40127] 
2023-03-13 21:52:36:257 4300 sec: 962835936 operations; 222184.8 current ops/sec; est completion in 2 minutes [INSERT: Count=2221859, Max=35487, Min=323, Avg=1798.42, 90=2801, 99=7183, 99.9=17263, 99.99=25103] 
2023-03-13 21:52:46:257 4310 sec: 965027227 operations; 219129.1 current ops/sec; est completion in 2 minutes [INSERT: Count=2191318, Max=166143, Min=324, Avg=1823.38, 90=2851, 99=7899, 99.9=26031, 99.99=100479] 
2023-03-13 21:52:56:257 4320 sec: 967274912 operations; 224768.5 current ops/sec; est completion in 2 minutes [INSERT: Count=2247641, Max=47391, Min=307, Avg=1777.88, 90=2887, 99=7471, 99.9=16735, 99.99=26703] 
2023-03-13 21:53:06:257 4330 sec: 969508905 operations; 223399.3 current ops/sec; est completion in 2 minutes [INSERT: Count=2233999, Max=118271, Min=312, Avg=1788.4, 90=2781, 99=7459, 99.9=19391, 99.99=71615] 
2023-03-13 21:53:16:257 4340 sec: 971766234 operations; 225732.9 current ops/sec; est completion in 2 minutes [INSERT: Count=2257319, Max=52159, Min=315, Avg=1770.22, 90=2815, 99=7491, 99.9=17455, 99.99=37215] 
2023-03-13 21:53:26:257 4350 sec: 974025055 operations; 225882.1 current ops/sec; est completion in 1 minute [INSERT: Count=2258823, Max=80639, Min=319, Avg=1768.84, 90=2889, 99=7815, 99.9=17631, 99.99=34783] 
2023-03-13 21:53:36:257 4360 sec: 976276137 operations; 225108.2 current ops/sec; est completion in 1 minute [INSERT: Count=2251089, Max=42751, Min=306, Avg=1775.24, 90=2985, 99=8131, 99.9=18543, 99.99=38207] 
2023-03-13 21:53:46:257 4370 sec: 978538515 operations; 226237.8 current ops/sec; est completion in 1 minute [INSERT: Count=2262381, Max=127871, Min=311, Avg=1766.12, 90=2917, 99=7727, 99.9=18415, 99.99=85823] 
2023-03-13 21:53:56:257 4380 sec: 980798738 operations; 226022.3 current ops/sec; est completion in 1 minute [INSERT: Count=2260242, Max=36255, Min=303, Avg=1767.83, 90=2921, 99=8111, 99.9=17087, 99.99=24847] 
2023-03-13 21:54:06:257 4390 sec: 983051645 operations; 225290.7 current ops/sec; est completion in 1 minute [INSERT: Count=2252885, Max=83199, Min=308, Avg=1773.63, 90=2905, 99=7935, 99.9=18911, 99.99=27599] 
2023-03-13 21:54:16:257 4400 sec: 985307249 operations; 225560.4 current ops/sec; est completion in 1 minute [INSERT: Count=2255606, Max=38687, Min=313, Avg=1771.48, 90=2957, 99=8903, 99.9=19295, 99.99=32063] 
2023-03-13 21:54:26:257 4410 sec: 987561754 operations; 225450.5 current ops/sec; est completion in 56 seconds [INSERT: Count=2254503, Max=207743, Min=290, Avg=1772.26, 90=2915, 99=8895, 99.9=19503, 99.99=114303] 
2023-03-13 21:54:36:257 4420 sec: 989808666 operations; 224691.2 current ops/sec; est completion in 46 seconds [INSERT: Count=2246905, Max=56959, Min=299, Avg=1778.31, 90=2963, 99=9679, 99.9=20143, 99.99=33631] 
2023-03-13 21:54:46:257 4430 sec: 992061199 operations; 225253.3 current ops/sec; est completion in 36 seconds [INSERT: Count=2252530, Max=144639, Min=300, Avg=1773.82, 90=2943, 99=8767, 99.9=19231, 99.99=57695] 
2023-03-13 21:54:56:257 4440 sec: 994363192 operations; 230199.3 current ops/sec; est completion in 26 seconds [INSERT: Count=2301991, Max=32303, Min=309, Avg=1735.73, 90=2945, 99=8255, 99.9=18831, 99.99=26111] 
2023-03-13 21:55:06:258 4450 sec: 996653725 operations; 229053.3 current ops/sec; est completion in 15 seconds [INSERT: Count=2290572, Max=34047, Min=313, Avg=1744.34, 90=2975, 99=8375, 99.9=17471, 99.99=24623] 
2023-03-13 21:55:16:257 4460 sec: 998909097 operations; 225537.2 current ops/sec; est completion in 5 second [CLEANUP: Count=7, Max=21, Min=3, Avg=7.29, 90=13, 99=21, 99.9=21, 99.99=21] [INSERT: Count=2255327, Max=51391, Min=306, Avg=1768.44, 90=3013, 99=8831, 99.9=19663, 99.99=37471] 
2023-03-13 21:55:25:655 4469 sec: 1000000000 operations; 116078.21 current ops/sec; [CLEANUP: Count=393, Max=2228223, Min=0, Avg=5669.16, 90=4, 99=14, 99.9=2228223, 99.99=2228223] [INSERT: Count=1090888, Max=47039, Min=285, Avg=1462.71, 90=2365, 99=6463, 99.9=16639, 99.99=38463] 
[OVERALL], RunTime(ms), 4469396
[OVERALL], Throughput(ops/sec), 223743.87948617665
[TOTAL_GCS_PS_Scavenge], Count, 6393
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 47656
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0662738320793235
[TOTAL_GCS_PS_MarkSweep], Count, 12
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 701
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.015684445951980985
[TOTAL_GCs], Count, 6405
[TOTAL_GC_TIME], Time(ms), 48357
[TOTAL_GC_TIME_%], Time(%), 1.0819582780313044
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5570.075
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2228223
[CLEANUP], 95thPercentileLatency(us), 4
[CLEANUP], 99thPercentileLatency(us), 15
[INSERT], Operations, 1000000000
[INSERT], AverageLatency(us), 1783.399870406
[INSERT], MinLatency(us), 285
[INSERT], MaxLatency(us), 706559
[INSERT], 95thPercentileLatency(us), 3921
[INSERT], 99thPercentileLatency(us), 8111
[INSERT], Return=OK, 1000000000
