bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.53.147.244,50.18.117.16,50.18.110.84 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=weYxGdSg63M8FmD -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.53.147.244,50.18.117.16,50.18.110.84 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=weYxGdSg63M8FmD -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.53.147.244,50.18.117.16,50.18.110.84 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=weYxGdSg63M8FmD -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=QUORUM -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
2023-03-01 10:23:30:126 0 sec: 0 operations; est completion in 0 second 
Maximum execution time specified as: 1800 secs
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /50.18.110.84:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.53.147.244:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /50.18.217.131:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /50.18.117.16:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.56.98.110:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.52.55.27:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: d4263d62-c728-4950-bc83-6457525bc8b6

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /50.18.117.16; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.53.147.244; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /50.18.110.84; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /50.18.217.131; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.56.98.110; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.52.55.27; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: QUORUM, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field8=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field7=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field2=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field5=? WHERE y_id=?;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field9=? WHERE y_id=?;'
2023-03-01 10:23:40:105 10 sec: 950364 operations; 95036.4 current ops/sec; est completion in 2 hours 55 minutes [READ: Count=902890, Max=285695, Min=342, Avg=4019.83, 90=6643, 99=14631, 99.9=55039, 99.99=199295] [UPDATE: Count=47663, Max=239871, Min=305, Avg=1775.01, 90=2433, 99=10071, 99.9=41855, 99.99=196991] 
2023-03-01 10:23:50:105 20 sec: 2107162 operations; 115679.8 current ops/sec; est completion in 2 hours 37 minutes [READ: Count=1099349, Max=33535, Min=335, Avg=3566.45, 90=6175, 99=9935, 99.9=14255, 99.99=20623] [UPDATE: Count=57427, Max=19663, Min=320, Avg=1346.08, 90=2181, 99=2891, 99.9=5679, 99.99=9407] 
2023-03-01 10:24:00:105 30 sec: 3257584 operations; 115042.2 current ops/sec; est completion in 2 hours 32 minutes [READ: Count=1092967, Max=59135, Min=336, Avg=3588.13, 90=6211, 99=9991, 99.9=13903, 99.99=35711] [UPDATE: Count=57490, Max=23663, Min=299, Avg=1332.28, 90=2171, 99=2775, 99.9=6047, 99.99=15879] 
2023-03-01 10:24:10:105 40 sec: 4396961 operations; 113937.7 current ops/sec; est completion in 2 hours 30 minutes [READ: Count=1082335, Max=66495, Min=344, Avg=3622.87, 90=6279, 99=10239, 99.9=15239, 99.99=41535] [UPDATE: Count=56906, Max=29679, Min=300, Avg=1348.72, 90=2173, 99=2801, 99.9=6851, 99.99=19279] 
2023-03-01 10:24:20:105 50 sec: 5538903 operations; 114194.2 current ops/sec; est completion in 2 hours 29 minutes [READ: Count=1084989, Max=27055, Min=342, Avg=3613.64, 90=6295, 99=10039, 99.9=13567, 99.99=17551] [UPDATE: Count=56947, Max=16079, Min=306, Avg=1362.85, 90=2177, 99=2807, 99.9=8239, 99.99=13831] 
2023-03-01 10:24:30:105 60 sec: 6686253 operations; 114735 current ops/sec; est completion in 2 hours 28 minutes [READ: Count=1089745, Max=62655, Min=350, Avg=3597.98, 90=6235, 99=10135, 99.9=14879, 99.99=37855] [UPDATE: Count=57609, Max=36127, Min=307, Avg=1342.93, 90=2171, 99=2815, 99.9=7755, 99.99=20495] 
2023-03-01 10:24:40:105 70 sec: 7833908 operations; 114765.5 current ops/sec; est completion in 2 hours 27 minutes [READ: Count=1090543, Max=67455, Min=336, Avg=3595.8, 90=6235, 99=10151, 99.9=15295, 99.99=36607] [UPDATE: Count=57168, Max=25199, Min=323, Avg=1349.13, 90=2173, 99=2787, 99.9=8543, 99.99=20991] 
2023-03-01 10:24:50:105 80 sec: 8973932 operations; 114002.4 current ops/sec; est completion in 2 hours 27 minutes [READ: Count=1082635, Max=34495, Min=348, Avg=3620.9, 90=6271, 99=10111, 99.9=14215, 99.99=22175] [UPDATE: Count=57322, Max=11039, Min=297, Avg=1360.23, 90=2183, 99=2943, 99.9=7583, 99.99=9863] 
2023-03-01 10:25:00:105 90 sec: 10114533 operations; 114060.1 current ops/sec; est completion in 2 hours 26 minutes [READ: Count=1083618, Max=60223, Min=334, Avg=3617.7, 90=6243, 99=9935, 99.9=13663, 99.99=33759] [UPDATE: Count=56991, Max=22927, Min=303, Avg=1370.5, 90=2195, 99=3053, 99.9=8623, 99.99=16703] 
2023-03-01 10:25:10:105 100 sec: 11264280 operations; 114974.7 current ops/sec; est completion in 2 hours 26 minutes [READ: Count=1092693, Max=76223, Min=318, Avg=3588.15, 90=6219, 99=10151, 99.9=14975, 99.99=43615] [UPDATE: Count=57054, Max=24991, Min=327, Avg=1358.87, 90=2181, 99=2805, 99.9=7975, 99.99=18175] 
2023-03-01 10:25:20:105 110 sec: 12419836 operations; 115555.6 current ops/sec; est completion in 2 hours 25 minutes [READ: Count=1097535, Max=25711, Min=334, Avg=3571.45, 90=6207, 99=10143, 99.9=13863, 99.99=19519] [UPDATE: Count=58038, Max=11263, Min=318, Avg=1354.74, 90=2181, 99=2825, 99.9=7971, 99.99=9655] 
2023-03-01 10:25:30:105 120 sec: 13573226 operations; 115339 current ops/sec; est completion in 2 hours 25 minutes [READ: Count=1095372, Max=57599, Min=324, Avg=3578.36, 90=6219, 99=9959, 99.9=13807, 99.99=34335] [UPDATE: Count=58012, Max=33791, Min=306, Avg=1357.79, 90=2175, 99=2813, 99.9=8487, 99.99=17535] 
2023-03-01 10:25:40:105 130 sec: 14726787 operations; 115356.1 current ops/sec; est completion in 2 hours 24 minutes [READ: Count=1096088, Max=61663, Min=329, Avg=3576.92, 90=6203, 99=9919, 99.9=15431, 99.99=36639] [UPDATE: Count=57472, Max=23343, Min=314, Avg=1351.68, 90=2175, 99=2805, 99.9=7603, 99.99=10103] 
2023-03-01 10:25:50:105 140 sec: 15875744 operations; 114895.7 current ops/sec; est completion in 2 hours 24 minutes [READ: Count=1091559, Max=30399, Min=328, Avg=3591.81, 90=6247, 99=10135, 99.9=14495, 99.99=21695] [UPDATE: Count=57399, Max=12199, Min=309, Avg=1350.5, 90=2173, 99=2817, 99.9=8007, 99.99=9863] 
2023-03-01 10:26:00:105 150 sec: 17024486 operations; 114874.2 current ops/sec; est completion in 2 hours 24 minutes [READ: Count=1091212, Max=58207, Min=331, Avg=3592.02, 90=6263, 99=9887, 99.9=13567, 99.99=35391] [UPDATE: Count=57507, Max=28015, Min=311, Avg=1367.22, 90=2185, 99=2829, 99.9=7959, 99.99=18527] 
2023-03-01 10:26:10:105 160 sec: 18178827 operations; 115434.1 current ops/sec; est completion in 2 hours 24 minutes [READ: Count=1096716, Max=72447, Min=343, Avg=3574.92, 90=6179, 99=10191, 99.9=16431, 99.99=39039] [UPDATE: Count=57658, Max=28383, Min=316, Avg=1348.84, 90=2173, 99=2825, 99.9=7879, 99.99=18431] 
2023-03-01 10:26:20:105 170 sec: 19334613 operations; 115578.6 current ops/sec; est completion in 2 hours 23 minutes [READ: Count=1098252, Max=34335, Min=349, Avg=3569.56, 90=6147, 99=9687, 99.9=12911, 99.99=17679] [UPDATE: Count=57490, Max=10183, Min=300, Avg=1352.67, 90=2191, 99=3167, 99.9=7695, 99.99=9287] 
2023-03-01 10:26:30:105 180 sec: 20484179 operations; 114956.6 current ops/sec; est completion in 2 hours 23 minutes [READ: Count=1091989, Max=50559, Min=336, Avg=3590.6, 90=6219, 99=10359, 99.9=17375, 99.99=32831] [UPDATE: Count=57585, Max=23407, Min=321, Avg=1345.46, 90=2173, 99=2873, 99.9=7479, 99.99=17039] 
2023-03-01 10:26:40:105 190 sec: 21639418 operations; 115523.9 current ops/sec; est completion in 2 hours 23 minutes [READ: Count=1097373, Max=64063, Min=335, Avg=3573.12, 90=6155, 99=10007, 99.9=23647, 99.99=45919] [UPDATE: Count=57882, Max=29183, Min=317, Avg=1337.93, 90=2171, 99=2799, 99.9=7547, 99.99=12543] 
2023-03-01 10:26:50:105 200 sec: 22794880 operations; 115546.2 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1097965, Max=45791, Min=328, Avg=3571.23, 90=6175, 99=9855, 99.9=16023, 99.99=36671] [UPDATE: Count=57485, Max=10767, Min=304, Avg=1339.57, 90=2171, 99=2821, 99.9=7831, 99.99=9447] 
2023-03-01 10:27:00:105 210 sec: 23959346 operations; 116446.6 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1106518, Max=64575, Min=309, Avg=3543.32, 90=6127, 99=9687, 99.9=13935, 99.99=37727] [UPDATE: Count=57944, Max=26463, Min=312, Avg=1333.89, 90=2169, 99=2827, 99.9=7951, 99.99=15095] 
2023-03-01 10:27:10:105 220 sec: 25073324 operations; 111386.66 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1058283, Max=77119, Min=333, Avg=3707.29, 90=6407, 99=12599, 99.9=18943, 99.99=43903] [UPDATE: Count=55716, Max=32047, Min=314, Avg=1353, 90=2173, 99=2793, 99.9=7887, 99.99=10495] 
2023-03-01 10:27:20:105 230 sec: 26203373 operations; 113004.9 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1073307, Max=29007, Min=332, Avg=3655.02, 90=6315, 99=12743, 99.9=17631, 99.99=22239] [UPDATE: Count=56719, Max=13143, Min=307, Avg=1330.68, 90=2161, 99=2785, 99.9=7243, 99.99=9767] 
2023-03-01 10:27:30:105 240 sec: 27360442 operations; 115718.47 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1098854, Max=58911, Min=333, Avg=3567.53, 90=6175, 99=9935, 99.9=14735, 99.99=36671] [UPDATE: Count=58236, Max=24879, Min=305, Avg=1341.25, 90=2167, 99=2817, 99.9=8099, 99.99=17071] 
2023-03-01 10:27:40:105 250 sec: 28515434 operations; 115499.2 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1097201, Max=33663, Min=327, Avg=3573.05, 90=6191, 99=9823, 99.9=13751, 99.99=27855] [UPDATE: Count=57787, Max=26735, Min=321, Avg=1348.3, 90=2173, 99=2819, 99.9=8271, 99.99=25631] 
2023-03-01 10:27:50:105 260 sec: 29633852 operations; 111841.8 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1062705, Max=70143, Min=323, Avg=3690.98, 90=6331, 99=12055, 99.9=24911, 99.99=43359] [UPDATE: Count=55701, Max=25743, Min=305, Avg=1358.72, 90=2173, 99=2799, 99.9=8019, 99.99=18687] 
2023-03-01 10:28:00:106 270 sec: 30714840 operations; 108087.99 current ops/sec; est completion in 2 hours 22 minutes [READ: Count=1027206, Max=57855, Min=317, Avg=3821.5, 90=6383, 99=18927, 99.9=25551, 99.99=35359] [UPDATE: Count=53848, Max=29375, Min=316, Avg=1334.87, 90=2161, 99=2789, 99.9=8047, 99.99=14471] 
2023-03-01 10:28:10:105 280 sec: 31848218 operations; 113349.13 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1076801, Max=37535, Min=335, Avg=3644.55, 90=6239, 99=12063, 99.9=22063, 99.99=28399] [UPDATE: Count=56517, Max=14367, Min=309, Avg=1332.85, 90=2165, 99=2809, 99.9=7643, 99.99=12223] 
2023-03-01 10:28:20:105 290 sec: 33011461 operations; 116324.3 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1104907, Max=50623, Min=318, Avg=3547.56, 90=6159, 99=9799, 99.9=14111, 99.99=31791] [UPDATE: Count=58336, Max=22063, Min=322, Avg=1347.06, 90=2171, 99=2815, 99.9=8027, 99.99=19279] 
2023-03-01 10:28:30:105 300 sec: 34182574 operations; 117111.3 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1111825, Max=23439, Min=333, Avg=3524.03, 90=6107, 99=9799, 99.9=12783, 99.99=15975] [UPDATE: Count=59290, Max=11151, Min=293, Avg=1351.75, 90=2173, 99=2795, 99.9=8303, 99.99=10111] 
2023-03-01 10:28:40:105 310 sec: 35353533 operations; 117095.9 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1112311, Max=55519, Min=335, Avg=3523.21, 90=6107, 99=9623, 99.9=13567, 99.99=34335] [UPDATE: Count=58648, Max=26287, Min=311, Avg=1354.86, 90=2173, 99=2807, 99.9=8019, 99.99=15415] 
2023-03-01 10:28:50:105 320 sec: 36524992 operations; 117145.9 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1112901, Max=58591, Min=349, Avg=3522.56, 90=6111, 99=9879, 99.9=14527, 99.99=32959] [UPDATE: Count=58562, Max=30367, Min=304, Avg=1330.35, 90=2165, 99=2767, 99.9=7791, 99.99=18831] 
2023-03-01 10:29:00:105 330 sec: 37695510 operations; 117051.8 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1111599, Max=24975, Min=346, Avg=3525.5, 90=6143, 99=9687, 99.9=12407, 99.99=16543] [UPDATE: Count=58916, Max=10175, Min=299, Avg=1345.46, 90=2175, 99=2799, 99.9=7679, 99.99=9431] 
2023-03-01 10:29:10:105 340 sec: 38859063 operations; 116355.3 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1105519, Max=72639, Min=333, Avg=3545.8, 90=6147, 99=9927, 99.9=15519, 99.99=37759] [UPDATE: Count=58030, Max=22783, Min=304, Avg=1350.1, 90=2175, 99=2839, 99.9=8011, 99.99=15495] 
2023-03-01 10:29:20:105 350 sec: 40029513 operations; 117045 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1111560, Max=69375, Min=342, Avg=3525.02, 90=6127, 99=9791, 99.9=13263, 99.99=31103] [UPDATE: Count=58906, Max=34751, Min=309, Avg=1358.81, 90=2175, 99=2811, 99.9=8215, 99.99=16847] 
2023-03-01 10:29:30:105 360 sec: 41209813 operations; 118030 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1121295, Max=25279, Min=337, Avg=3495.13, 90=6071, 99=9719, 99.9=12895, 99.99=16943] [UPDATE: Count=58987, Max=12783, Min=317, Avg=1344.44, 90=2171, 99=2793, 99.9=8059, 99.99=11223] 
2023-03-01 10:29:40:105 370 sec: 42385609 operations; 117579.6 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1116725, Max=63455, Min=329, Avg=3508.2, 90=6091, 99=9695, 99.9=13463, 99.99=36959] [UPDATE: Count=59076, Max=33055, Min=314, Avg=1359.89, 90=2177, 99=2795, 99.9=7999, 99.99=21727] 
2023-03-01 10:29:50:105 380 sec: 43325462 operations; 93985.3 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=892753, Max=246911, Min=326, Avg=4392.59, 90=7047, 99=15471, 99.9=50015, 99.99=180479] [UPDATE: Count=47065, Max=55039, Min=322, Avg=1620.46, 90=2607, 99=4025, 99.9=10199, 99.99=30175] 
2023-03-01 10:30:00:105 390 sec: 43846587 operations; 52112.5 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=494764, Max=645119, Min=301, Avg=7986.86, 90=11639, 99=118207, 99.9=417535, 99.99=479743] [UPDATE: Count=26395, Max=11119, Min=297, Avg=1846.91, 90=2707, 99=4227, 99.9=7231, 99.99=10415] 
2023-03-01 10:30:10:105 400 sec: 45008415 operations; 116182.8 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1103689, Max=66559, Min=342, Avg=3551.8, 90=6119, 99=10023, 99.9=21871, 99.99=37503] [UPDATE: Count=58135, Max=29295, Min=315, Avg=1342.95, 90=2171, 99=2791, 99.9=8023, 99.99=20239] 
2023-03-01 10:30:20:105 410 sec: 46139030 operations; 113061.5 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1073883, Max=53503, Min=319, Avg=3650.98, 90=6331, 99=10239, 99.9=15135, 99.99=32831] [UPDATE: Count=56718, Max=23119, Min=314, Avg=1366.12, 90=2181, 99=2819, 99.9=8439, 99.99=16383] 
2023-03-01 10:30:30:105 420 sec: 47294978 operations; 115594.8 current ops/sec; est completion in 2 hours 21 minutes [READ: Count=1097969, Max=33631, Min=328, Avg=3570.6, 90=6175, 99=9783, 99.9=14295, 99.99=21215] [UPDATE: Count=57968, Max=10447, Min=301, Avg=1347.62, 90=2173, 99=2781, 99.9=7595, 99.99=9559] 
2023-03-01 10:30:40:105 430 sec: 48448362 operations; 115338.4 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1095689, Max=65247, Min=340, Avg=3577.41, 90=6207, 99=9911, 99.9=14055, 99.99=34079] [UPDATE: Count=57708, Max=26383, Min=317, Avg=1360.21, 90=2177, 99=2831, 99.9=8163, 99.99=22351] 
2023-03-01 10:30:50:105 440 sec: 49604348 operations; 115598.6 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1098260, Max=54623, Min=335, Avg=3569.35, 90=6195, 99=9815, 99.9=14143, 99.99=34431] [UPDATE: Count=57727, Max=29711, Min=319, Avg=1360.12, 90=2181, 99=2841, 99.9=7647, 99.99=19663] 
2023-03-01 10:31:00:105 450 sec: 50780370 operations; 117602.2 current ops/sec; est completion in 2 hours 20 minutes [READ: Count=1117438, Max=24335, Min=315, Avg=3506.54, 90=6087, 99=9599, 99.9=12375, 99.99=15647] [UPDATE: Count=58584, Max=11039, Min=315, Avg=1360.95, 90=2187, 99=2817, 99.9=8407, 99.99=10039] 
2023-03-01 10:31:10:105 460 sec: 51943366 operations; 116299.6 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1104559, Max=59967, Min=333, Avg=3546.75, 90=6143, 99=9871, 99.9=15079, 99.99=33823] [UPDATE: Count=58444, Max=38239, Min=320, Avg=1381.19, 90=2193, 99=2837, 99.9=8967, 99.99=19551] 
2023-03-01 10:31:20:105 470 sec: 53113274 operations; 116990.8 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1111133, Max=55039, Min=317, Avg=3526.52, 90=6091, 99=9687, 99.9=13407, 99.99=35327] [UPDATE: Count=58782, Max=21599, Min=279, Avg=1361.88, 90=2189, 99=2795, 99.9=7311, 99.99=13191] 
2023-03-01 10:31:30:105 480 sec: 54282407 operations; 116913.3 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1110654, Max=22095, Min=342, Avg=3527.69, 90=6123, 99=9727, 99.9=12895, 99.99=16847] [UPDATE: Count=58456, Max=9895, Min=307, Avg=1368.55, 90=2191, 99=2825, 99.9=7575, 99.99=9295] 
2023-03-01 10:31:40:105 490 sec: 55451465 operations; 116905.8 current ops/sec; est completion in 2 hours 19 minutes [READ: Count=1110229, Max=64831, Min=333, Avg=3528.32, 90=6103, 99=9575, 99.9=12935, 99.99=33439] [UPDATE: Count=58832, Max=26303, Min=316, Avg=1378.28, 90=2195, 99=2847, 99.9=8287, 99.99=18303] 
2023-03-01 10:31:50:105 500 sec: 56599165 operations; 114770 current ops/sec; est completion in 2 hours 18 minutes [READ: Count=1090411, Max=51231, Min=340, Avg=3594.37, 90=6215, 99=10015, 99.9=14039, 99.99=31887] [UPDATE: Count=57291, Max=24431, Min=310, Avg=1378.78, 90=2193, 99=2855, 99.9=7943, 99.99=14415] 
2023-03-01 10:32:00:105 510 sec: 57751504 operations; 115233.9 current ops/sec; est completion in 2 hours 18 minutes [READ: Count=1094930, Max=21759, Min=328, Avg=3579.46, 90=6195, 99=9679, 99.9=12447, 99.99=15599] [UPDATE: Count=57410, Max=11111, Min=315, Avg=1377.2, 90=2191, 99=2837, 99.9=7871, 99.99=9527] 
2023-03-01 10:32:10:105 520 sec: 58902263 operations; 115075.9 current ops/sec; est completion in 2 hours 18 minutes [READ: Count=1093287, Max=50431, Min=328, Avg=3584.61, 90=6199, 99=9767, 99.9=13215, 99.99=32623] [UPDATE: Count=57464, Max=27231, Min=330, Avg=1383.05, 90=2195, 99=2827, 99.9=7311, 99.99=16559] 
2023-03-01 10:32:20:105 530 sec: 60072613 operations; 117035 current ops/sec; est completion in 2 hours 18 minutes [READ: Count=1112019, Max=53343, Min=331, Avg=3519.98, 90=5947, 99=9623, 99.9=12951, 99.99=31567] [UPDATE: Count=58378, Max=24303, Min=315, Avg=1441.76, 90=2241, 99=2885, 99.9=7975, 99.99=19839] 
2023-03-01 10:32:30:105 540 sec: 61245770 operations; 117315.7 current ops/sec; est completion in 2 hours 17 minutes [READ: Count=1114412, Max=18719, Min=338, Avg=3510.97, 90=5895, 99=9591, 99.9=12463, 99.99=14999] [UPDATE: Count=58702, Max=10719, Min=303, Avg=1454.88, 90=2251, 99=2907, 99.9=7999, 99.99=9575] 
2023-03-01 10:32:40:105 550 sec: 62416891 operations; 117112.1 current ops/sec; est completion in 2 hours 17 minutes [READ: Count=1112613, Max=60671, Min=335, Avg=3517.77, 90=5919, 99=9551, 99.9=12823, 99.99=35071] [UPDATE: Count=58520, Max=30911, Min=320, Avg=1440.98, 90=2235, 99=2867, 99.9=8011, 99.99=17631] 
2023-03-01 10:32:50:105 560 sec: 63578120 operations; 116122.9 current ops/sec; est completion in 2 hours 17 minutes [READ: Count=1103153, Max=57215, Min=332, Avg=3550.92, 90=6095, 99=9735, 99.9=13007, 99.99=35359] [UPDATE: Count=58063, Max=29647, Min=317, Avg=1397.31, 90=2209, 99=2835, 99.9=7919, 99.99=21727] 
2023-03-01 10:33:00:105 570 sec: 64754430 operations; 117631 current ops/sec; est completion in 2 hours 17 minutes [READ: Count=1117549, Max=19487, Min=338, Avg=3502.09, 90=5915, 99=9559, 99.9=12287, 99.99=14591] [UPDATE: Count=58786, Max=10983, Min=310, Avg=1438.9, 90=2241, 99=2901, 99.9=7799, 99.99=9583] 
2023-03-01 10:33:10:105 580 sec: 65931466 operations; 117703.6 current ops/sec; est completion in 2 hours 16 minutes [READ: Count=1118428, Max=51775, Min=345, Avg=3499.68, 90=5899, 99=9775, 99.9=13223, 99.99=32223] [UPDATE: Count=58605, Max=41759, Min=319, Avg=1434.91, 90=2237, 99=2883, 99.9=7999, 99.99=19343] 
2023-03-01 10:33:20:105 590 sec: 67109060 operations; 117759.4 current ops/sec; est completion in 2 hours 16 minutes [READ: Count=1118402, Max=45439, Min=341, Avg=3498.69, 90=5891, 99=9775, 99.9=13255, 99.99=29087] [UPDATE: Count=59170, Max=27455, Min=303, Avg=1442.24, 90=2241, 99=2875, 99.9=8855, 99.99=18719] 
2023-03-01 10:33:30:105 600 sec: 68283065 operations; 117400.5 current ops/sec; est completion in 2 hours 16 minutes [READ: Count=1115262, Max=22415, Min=324, Avg=3509.67, 90=5955, 99=9687, 99.9=12519, 99.99=15279] [UPDATE: Count=58754, Max=11735, Min=311, Avg=1432.2, 90=2237, 99=2849, 99.9=7851, 99.99=10351] 
2023-03-01 10:33:40:105 610 sec: 69458450 operations; 117538.5 current ops/sec; est completion in 2 hours 16 minutes [READ: Count=1116655, Max=71679, Min=343, Avg=3504.93, 90=5943, 99=9783, 99.9=12975, 99.99=33791] [UPDATE: Count=58709, Max=25279, Min=303, Avg=1435.94, 90=2237, 99=2887, 99.9=7507, 99.99=17487] 
2023-03-01 10:33:50:105 620 sec: 70641752 operations; 118330.2 current ops/sec; est completion in 2 hours 15 minutes [READ: Count=1124103, Max=53503, Min=338, Avg=3481.26, 90=5867, 99=9751, 99.9=13231, 99.99=29743] [UPDATE: Count=59216, Max=24863, Min=313, Avg=1437.73, 90=2237, 99=2851, 99.9=8783, 99.99=17615] 
2023-03-01 10:34:00:105 630 sec: 71818159 operations; 117640.7 current ops/sec; est completion in 2 hours 15 minutes [READ: Count=1117474, Max=19631, Min=339, Avg=3502.95, 90=5935, 99=9607, 99.9=12367, 99.99=14623] [UPDATE: Count=58931, Max=12655, Min=317, Avg=1423.91, 90=2229, 99=2843, 99.9=7235, 99.99=10231] 
2023-03-01 10:34:10:105 640 sec: 72999731 operations; 118157.2 current ops/sec; est completion in 2 hours 15 minutes [READ: Count=1122343, Max=52703, Min=327, Avg=3487.7, 90=5955, 99=9815, 99.9=13175, 99.99=30559] [UPDATE: Count=59236, Max=28959, Min=308, Avg=1417.41, 90=2223, 99=2839, 99.9=8063, 99.99=17119] 
2023-03-01 10:34:20:105 650 sec: 74198139 operations; 119840.8 current ops/sec; est completion in 2 hours 15 minutes [READ: Count=1138592, Max=59391, Min=333, Avg=3437.58, 90=5871, 99=9703, 99.9=12871, 99.99=30927] [UPDATE: Count=59806, Max=25951, Min=318, Avg=1406.45, 90=2213, 99=2849, 99.9=8187, 99.99=19471] 
2023-03-01 10:34:30:105 660 sec: 75404303 operations; 120616.4 current ops/sec; est completion in 2 hours 14 minutes [READ: Count=1145566, Max=24479, Min=340, Avg=3416.9, 90=5903, 99=9727, 99.9=12639, 99.99=16023] [UPDATE: Count=60600, Max=11095, Min=299, Avg=1385.88, 90=2205, 99=2817, 99.9=7975, 99.99=9679] 
2023-03-01 10:34:40:105 670 sec: 76616406 operations; 121210.3 current ops/sec; est completion in 2 hours 14 minutes [READ: Count=1151803, Max=58527, Min=343, Avg=3398.6, 90=5871, 99=9823, 99.9=13159, 99.99=30047] [UPDATE: Count=60308, Max=25343, Min=310, Avg=1387.16, 90=2207, 99=2863, 99.9=8231, 99.99=22559] 
2023-03-01 10:34:50:105 680 sec: 77836859 operations; 122045.3 current ops/sec; est completion in 2 hours 14 minutes [READ: Count=1159724, Max=20495, Min=342, Avg=3376.41, 90=5875, 99=9631, 99.9=12479, 99.99=15631] [UPDATE: Count=60730, Max=11327, Min=306, Avg=1360.4, 90=2195, 99=2819, 99.9=7523, 99.99=9327] 
2023-03-01 10:35:00:105 690 sec: 79055017 operations; 121815.8 current ops/sec; est completion in 2 hours 13 minutes [READ: Count=1157033, Max=54943, Min=336, Avg=3383.56, 90=5871, 99=9743, 99.9=13255, 99.99=31375] [UPDATE: Count=61119, Max=26191, Min=314, Avg=1363.96, 90=2197, 99=2809, 99.9=8951, 99.99=15143] 
2023-03-01 10:35:10:105 700 sec: 80262641 operations; 120762.4 current ops/sec; est completion in 2 hours 13 minutes [READ: Count=1147208, Max=55359, Min=323, Avg=3412.99, 90=5943, 99=9823, 99.9=12943, 99.99=29343] [UPDATE: Count=60442, Max=24335, Min=319, Avg=1370.15, 90=2201, 99=2837, 99.9=7767, 99.99=20175] 
2023-03-01 10:35:20:105 710 sec: 81482399 operations; 121975.8 current ops/sec; est completion in 2 hours 13 minutes [READ: Count=1158682, Max=21119, Min=337, Avg=3378.67, 90=5883, 99=9591, 99.9=12359, 99.99=15071] [UPDATE: Count=61058, Max=11047, Min=323, Avg=1365.7, 90=2197, 99=2801, 99.9=8055, 99.99=10023] 
2023-03-01 10:35:30:105 720 sec: 82697212 operations; 121481.3 current ops/sec; est completion in 2 hours 13 minutes [READ: Count=1154346, Max=49343, Min=333, Avg=3391.93, 90=5903, 99=9783, 99.9=13223, 99.99=29055] [UPDATE: Count=60445, Max=25951, Min=319, Avg=1365.55, 90=2195, 99=2817, 99.9=8711, 99.99=17423] 
2023-03-01 10:35:40:105 730 sec: 83907533 operations; 121032.1 current ops/sec; est completion in 2 hours 12 minutes [READ: Count=1149811, Max=57023, Min=340, Avg=3405.42, 90=5923, 99=9839, 99.9=13415, 99.99=35007] [UPDATE: Count=60517, Max=26591, Min=318, Avg=1367.75, 90=2199, 99=2831, 99.9=7927, 99.99=12919] 
2023-03-01 10:35:50:105 740 sec: 85115559 operations; 120802.6 current ops/sec; est completion in 2 hours 12 minutes [READ: Count=1147845, Max=19967, Min=335, Avg=3410.97, 90=5963, 99=9775, 99.9=12439, 99.99=15119] [UPDATE: Count=60165, Max=10015, Min=314, Avg=1374.19, 90=2203, 99=2829, 99.9=7487, 99.99=9159] 
2023-03-01 10:36:00:105 750 sec: 86326872 operations; 121131.3 current ops/sec; est completion in 2 hours 12 minutes [READ: Count=1150879, Max=65215, Min=346, Avg=3400.82, 90=5915, 99=9743, 99.9=13127, 99.99=31583] [UPDATE: Count=60482, Max=28303, Min=311, Avg=1372.06, 90=2201, 99=2847, 99.9=7643, 99.99=17903] 
2023-03-01 10:36:10:105 760 sec: 87539405 operations; 121253.3 current ops/sec; est completion in 2 hours 12 minutes [READ: Count=1151931, Max=73599, Min=346, Avg=3399.94, 90=5895, 99=9863, 99.9=13343, 99.99=35999] [UPDATE: Count=60584, Max=29535, Min=324, Avg=1371.34, 90=2199, 99=2831, 99.9=8171, 99.99=14831] 
2023-03-01 10:36:20:105 770 sec: 88758339 operations; 121893.4 current ops/sec; est completion in 2 hours 11 minutes [READ: Count=1157731, Max=23727, Min=329, Avg=3381.56, 90=5887, 99=9551, 99.9=12183, 99.99=15183] [UPDATE: Count=61186, Max=12631, Min=311, Avg=1363.76, 90=2193, 99=2833, 99.9=7755, 99.99=9311] 
2023-03-01 10:36:30:105 780 sec: 89978997 operations; 122065.8 current ops/sec; est completion in 2 hours 11 minutes [READ: Count=1159823, Max=50431, Min=337, Avg=3375.77, 90=5859, 99=9695, 99.9=13015, 99.99=29855] [UPDATE: Count=60843, Max=31055, Min=323, Avg=1360.52, 90=2193, 99=2801, 99.9=8471, 99.99=21039] 
2023-03-01 10:36:40:105 790 sec: 91197570 operations; 121857.3 current ops/sec; est completion in 2 hours 11 minutes [READ: Count=1157529, Max=53567, Min=335, Avg=3382.16, 90=5867, 99=9671, 99.9=13039, 99.99=32799] [UPDATE: Count=61043, Max=25439, Min=314, Avg=1363.79, 90=2195, 99=2817, 99.9=8095, 99.99=14863] 
2023-03-01 10:36:50:105 800 sec: 92407479 operations; 120990.9 current ops/sec; est completion in 2 hours 10 minutes [READ: Count=1149406, Max=71231, Min=340, Avg=3405.93, 90=5923, 99=9783, 99.9=12887, 99.99=35551] [UPDATE: Count=60483, Max=28959, Min=324, Avg=1365.29, 90=2197, 99=2807, 99.9=7907, 99.99=15831] 
2023-03-01 10:37:00:105 810 sec: 93635223 operations; 122774.4 current ops/sec; est completion in 2 hours 10 minutes [READ: Count=1166170, Max=36127, Min=339, Avg=3357.86, 90=5803, 99=9591, 99.9=12431, 99.99=16215] [UPDATE: Count=61595, Max=11471, Min=313, Avg=1351.85, 90=2185, 99=2807, 99.9=8087, 99.99=10007] 
2023-03-01 10:37:10:105 820 sec: 94853620 operations; 121839.7 current ops/sec; est completion in 2 hours 10 minutes [READ: Count=1157690, Max=55615, Min=336, Avg=3382.2, 90=5867, 99=9695, 99.9=13119, 99.99=33055] [UPDATE: Count=60706, Max=23551, Min=295, Avg=1359.64, 90=2193, 99=2841, 99.9=7987, 99.99=19855] 
2023-03-01 10:37:20:105 830 sec: 96077875 operations; 122425.5 current ops/sec; est completion in 2 hours 10 minutes [READ: Count=1162839, Max=19615, Min=337, Avg=3366.34, 90=5835, 99=9543, 99.9=12311, 99.99=15103] [UPDATE: Count=61420, Max=15503, Min=315, Avg=1365.82, 90=2197, 99=2847, 99.9=7871, 99.99=10503] 
2023-03-01 10:37:30:105 840 sec: 97302820 operations; 122494.5 current ops/sec; est completion in 2 hours 9 minutes [READ: Count=1163822, Max=61503, Min=331, Avg=3363.81, 90=5803, 99=9759, 99.9=13263, 99.99=30511] [UPDATE: Count=61126, Max=27151, Min=307, Avg=1359.75, 90=2193, 99=2801, 99.9=8407, 99.99=19743] 
2023-03-01 10:37:40:105 850 sec: 98531998 operations; 122917.8 current ops/sec; est completion in 2 hours 9 minutes [READ: Count=1167771, Max=48223, Min=342, Avg=3353.08, 90=5879, 99=9615, 99.9=12791, 99.99=29071] [UPDATE: Count=61407, Max=24367, Min=311, Avg=1343.68, 90=2183, 99=2805, 99.9=8215, 99.99=18959] 
2023-03-01 10:37:50:105 860 sec: 99774699 operations; 124270.1 current ops/sec; est completion in 2 hours 9 minutes [READ: Count=1180562, Max=19519, Min=324, Avg=3316.63, 90=5787, 99=9519, 99.9=12567, 99.99=15471] [UPDATE: Count=62134, Max=12351, Min=317, Avg=1329.08, 90=2181, 99=2775, 99.9=8123, 99.99=10255] 
2023-03-01 10:38:00:105 870 sec: 101010743 operations; 123604.4 current ops/sec; est completion in 2 hours 9 minutes [READ: Count=1173984, Max=51071, Min=343, Avg=3334.87, 90=5823, 99=9615, 99.9=13047, 99.99=32575] [UPDATE: Count=62051, Max=28239, Min=309, Avg=1338.77, 90=2181, 99=2789, 99.9=8719, 99.99=14359] 
2023-03-01 10:38:10:105 880 sec: 102242685 operations; 123194.2 current ops/sec; est completion in 2 hours 8 minutes [READ: Count=1170609, Max=76223, Min=317, Avg=3345.91, 90=5843, 99=9671, 99.9=12991, 99.99=39263] [UPDATE: Count=61352, Max=35775, Min=324, Avg=1330.49, 90=2179, 99=2799, 99.9=7979, 99.99=20207] 
2023-03-01 10:38:20:105 890 sec: 103478616 operations; 123593.1 current ops/sec; est completion in 2 hours 8 minutes [READ: Count=1174168, Max=21103, Min=350, Avg=3334.99, 90=5883, 99=9591, 99.9=12431, 99.99=15735] [UPDATE: Count=61768, Max=12143, Min=307, Avg=1332.59, 90=2183, 99=2835, 99.9=7531, 99.99=10375] 
2023-03-01 10:38:30:105 900 sec: 104716495 operations; 123787.9 current ops/sec; est completion in 2 hours 8 minutes [READ: Count=1175455, Max=51711, Min=340, Avg=3331.41, 90=5911, 99=9791, 99.9=12999, 99.99=29087] [UPDATE: Count=62410, Max=21695, Min=301, Avg=1314.93, 90=2171, 99=2781, 99.9=8143, 99.99=12135] 
2023-03-01 10:38:40:111 910 sec: 105957914 operations; 124067.46 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=1179147, Max=60159, Min=335, Avg=3321.37, 90=5887, 99=9727, 99.9=13135, 99.99=34271] [UPDATE: Count=62297, Max=25407, Min=326, Avg=1311.52, 90=2173, 99=2775, 99.9=8263, 99.99=11319] 
2023-03-01 10:38:50:105 920 sec: 107217151 operations; 125999.3 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=1196113, Max=22143, Min=326, Avg=3274.37, 90=5855, 99=9687, 99.9=12663, 99.99=16119] [UPDATE: Count=63088, Max=11263, Min=332, Avg=1295.21, 90=2169, 99=2771, 99.9=7791, 99.99=10623] 
2023-03-01 10:39:00:105 930 sec: 108477864 operations; 126071.3 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=1197538, Max=54623, Min=325, Avg=3270.22, 90=5827, 99=9687, 99.9=13023, 99.99=33247] [UPDATE: Count=63173, Max=24463, Min=311, Avg=1294.52, 90=2167, 99=2775, 99.9=8287, 99.99=16895] 
2023-03-01 10:39:10:105 940 sec: 109732455 operations; 125459.1 current ops/sec; est completion in 2 hours 7 minutes [READ: Count=1191671, Max=48735, Min=325, Avg=3286.89, 90=5895, 99=9695, 99.9=12775, 99.99=28495] [UPDATE: Count=62925, Max=26495, Min=318, Avg=1290.96, 90=2163, 99=2777, 99.9=7995, 99.99=12119] 
2023-03-01 10:39:20:105 950 sec: 110998026 operations; 126557.1 current ops/sec; est completion in 2 hours 6 minutes [READ: Count=1201984, Max=19631, Min=340, Avg=3258.42, 90=5811, 99=9607, 99.9=12399, 99.99=15583] [UPDATE: Count=63581, Max=11879, Min=313, Avg=1284.7, 90=2161, 99=2739, 99.9=7683, 99.99=10247] 
2023-03-01 10:39:30:105 960 sec: 112255946 operations; 125792 current ops/sec; est completion in 2 hours 6 minutes [READ: Count=1195770, Max=52223, Min=340, Avg=3276.08, 90=5839, 99=9615, 99.9=13783, 99.99=31647] [UPDATE: Count=62161, Max=33151, Min=301, Avg=1297.82, 90=2165, 99=2791, 99.9=7799, 99.99=12599] 
2023-03-01 10:39:40:105 970 sec: 113517187 operations; 126124.1 current ops/sec; est completion in 2 hours 6 minutes [READ: Count=1197748, Max=55615, Min=345, Avg=3269.69, 90=5843, 99=9887, 99.9=14431, 99.99=28735] [UPDATE: Count=63478, Max=23503, Min=305, Avg=1287.9, 90=2161, 99=2771, 99.9=8503, 99.99=17359] 
2023-03-01 10:39:50:105 980 sec: 114793446 operations; 127625.9 current ops/sec; est completion in 2 hours 5 minutes [READ: Count=1212561, Max=31375, Min=338, Avg=3230.29, 90=5811, 99=9575, 99.9=12455, 99.99=15919] [UPDATE: Count=63705, Max=13255, Min=315, Avg=1274.84, 90=2161, 99=2749, 99.9=8311, 99.99=10567] 
2023-03-01 10:40:00:105 990 sec: 116064531 operations; 127108.5 current ops/sec; est completion in 2 hours 5 minutes [READ: Count=1207516, Max=55135, Min=332, Avg=3243.74, 90=5807, 99=9823, 99.9=14303, 99.99=38975] [UPDATE: Count=63580, Max=25087, Min=316, Avg=1278.01, 90=2157, 99=2745, 99.9=9423, 99.99=19663] 
2023-03-01 10:40:10:105 1000 sec: 117328639 operations; 126410.8 current ops/sec; est completion in 2 hours 5 minutes [READ: Count=1201139, Max=58623, Min=306, Avg=3261.47, 90=5875, 99=9783, 99.9=12991, 99.99=34783] [UPDATE: Count=62979, Max=28447, Min=294, Avg=1277.78, 90=2157, 99=2767, 99.9=8743, 99.99=21871] 
2023-03-01 10:40:20:105 1010 sec: 118597194 operations; 126855.5 current ops/sec; est completion in 2 hours 5 minutes [READ: Count=1205796, Max=26527, Min=339, Avg=3249.7, 90=5863, 99=9799, 99.9=12599, 99.99=16119] [UPDATE: Count=62761, Max=12567, Min=309, Avg=1271.02, 90=2159, 99=2725, 99.9=8407, 99.99=10559] 
2023-03-01 10:40:30:105 1020 sec: 119874122 operations; 127692.8 current ops/sec; est completion in 2 hours 4 minutes [READ: Count=1213726, Max=50623, Min=337, Avg=3228.5, 90=5883, 99=9743, 99.9=13007, 99.99=30959] [UPDATE: Count=63189, Max=28607, Min=302, Avg=1257.68, 90=2153, 99=2743, 99.9=7731, 99.99=19151] 
2023-03-01 10:40:40:105 1030 sec: 121150577 operations; 127645.5 current ops/sec; est completion in 2 hours 4 minutes [READ: Count=1213151, Max=22543, Min=325, Avg=3230.23, 90=5895, 99=9647, 99.9=12351, 99.99=17583] [UPDATE: Count=63323, Max=16263, Min=325, Avg=1255.14, 90=2149, 99=2717, 99.9=7759, 99.99=14839] 
2023-03-01 10:40:50:105 1040 sec: 122417761 operations; 126718.4 current ops/sec; est completion in 2 hours 4 minutes [READ: Count=1203654, Max=86143, Min=331, Avg=3254.88, 90=5875, 99=9823, 99.9=15071, 99.99=80063] [UPDATE: Count=63517, Max=78975, Min=312, Avg=1262.41, 90=2149, 99=2723, 99.9=8719, 99.99=76991] 
2023-03-01 10:41:00:105 1050 sec: 123703736 operations; 128597.5 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=1221768, Max=55007, Min=334, Avg=3206.94, 90=5831, 99=9767, 99.9=13191, 99.99=30095] [UPDATE: Count=64201, Max=24463, Min=307, Avg=1247.23, 90=2149, 99=2723, 99.9=7947, 99.99=18415] 
2023-03-01 10:41:10:105 1060 sec: 124984433 operations; 128069.7 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=1216207, Max=21151, Min=340, Avg=3220.41, 90=5851, 99=9695, 99.9=12359, 99.99=15695] [UPDATE: Count=64474, Max=12103, Min=311, Avg=1259.21, 90=2153, 99=2753, 99.9=8207, 99.99=10111] 
2023-03-01 10:41:20:105 1070 sec: 126272397 operations; 128796.4 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=1223643, Max=53919, Min=346, Avg=3202.04, 90=5815, 99=9647, 99.9=12511, 99.99=28335] [UPDATE: Count=64340, Max=22383, Min=317, Avg=1247.09, 90=2151, 99=2733, 99.9=8031, 99.99=16495] 
2023-03-01 10:41:30:105 1080 sec: 127557781 operations; 128538.4 current ops/sec; est completion in 2 hours 3 minutes [READ: Count=1221136, Max=48863, Min=344, Avg=3207.63, 90=5815, 99=9727, 99.9=13831, 99.99=30495] [UPDATE: Count=64251, Max=45759, Min=307, Avg=1260.36, 90=2153, 99=2713, 99.9=8807, 99.99=15455] 
2023-03-01 10:41:40:105 1090 sec: 128841845 operations; 128406.4 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1219788, Max=19199, Min=329, Avg=3211.84, 90=5867, 99=9615, 99.9=11999, 99.99=14639] [UPDATE: Count=64270, Max=11479, Min=310, Avg=1251.09, 90=2149, 99=2699, 99.9=7683, 99.99=9527] 
2023-03-01 10:41:50:105 1100 sec: 130123426 operations; 128158.1 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1217029, Max=45183, Min=332, Avg=3218.11, 90=5839, 99=9695, 99.9=12799, 99.99=29151] [UPDATE: Count=64554, Max=26527, Min=326, Avg=1263.73, 90=2153, 99=2733, 99.9=8287, 99.99=18559] 
2023-03-01 10:42:00:105 1110 sec: 131402855 operations; 127942.9 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1215174, Max=56191, Min=341, Avg=3223.42, 90=5867, 99=9671, 99.9=12519, 99.99=32079] [UPDATE: Count=64232, Max=24719, Min=315, Avg=1261.65, 90=2155, 99=2761, 99.9=7923, 99.99=20751] 
2023-03-01 10:42:10:110 1120 sec: 132689141 operations; 128564.32 current ops/sec; est completion in 2 hours 2 minutes [READ: Count=1221681, Max=23951, Min=335, Avg=3206.11, 90=5839, 99=9503, 99.9=12031, 99.99=15687] [UPDATE: Count=64637, Max=11935, Min=317, Avg=1253.65, 90=2155, 99=2707, 99.9=8239, 99.99=10367] 
2023-03-01 10:42:20:105 1130 sec: 133975806 operations; 128730.87 current ops/sec; est completion in 2 hours 1 minute [READ: Count=1222229, Max=51167, Min=343, Avg=3205.17, 90=5795, 99=9647, 99.9=12687, 99.99=36191] [UPDATE: Count=64428, Max=25823, Min=324, Avg=1257.09, 90=2155, 99=2739, 99.9=8175, 99.99=16911] 
2023-03-01 10:42:30:105 1140 sec: 135260967 operations; 128516.1 current ops/sec; est completion in 2 hours 1 minute [READ: Count=1220782, Max=51167, Min=343, Avg=3208.27, 90=5827, 99=9599, 99.9=12871, 99.99=27503] [UPDATE: Count=64355, Max=24239, Min=318, Avg=1263.87, 90=2155, 99=2761, 99.9=8239, 99.99=16447] 
2023-03-01 10:42:40:105 1150 sec: 136546058 operations; 128509.1 current ops/sec; est completion in 2 hours 1 minute [READ: Count=1221164, Max=20127, Min=317, Avg=3208.33, 90=5839, 99=9511, 99.9=11903, 99.99=14703] [UPDATE: Count=63938, Max=10463, Min=319, Avg=1255.88, 90=2151, 99=2685, 99.9=7671, 99.99=9319] 
2023-03-01 10:42:50:105 1160 sec: 137825644 operations; 127958.6 current ops/sec; est completion in 2 hours [READ: Count=1215792, Max=76351, Min=326, Avg=3222.16, 90=5835, 99=9671, 99.9=13975, 99.99=40543] [UPDATE: Count=63793, Max=22127, Min=306, Avg=1263.08, 90=2157, 99=2729, 99.9=7959, 99.99=15831] 
2023-03-01 10:43:00:105 1170 sec: 139110143 operations; 128449.9 current ops/sec; est completion in 2 hours [READ: Count=1220263, Max=45215, Min=351, Avg=3209.64, 90=5835, 99=9655, 99.9=12943, 99.99=29135] [UPDATE: Count=64227, Max=23407, Min=307, Avg=1269.66, 90=2157, 99=2747, 99.9=8551, 99.99=20367] 
2023-03-01 10:43:10:105 1180 sec: 140401409 operations; 129126.6 current ops/sec; est completion in 2 hours [READ: Count=1226615, Max=21215, Min=351, Avg=3193.32, 90=5795, 99=9447, 99.9=12087, 99.99=15207] [UPDATE: Count=64681, Max=10839, Min=306, Avg=1254.71, 90=2157, 99=2733, 99.9=8087, 99.99=9927] 
2023-03-01 10:43:20:105 1190 sec: 141687838 operations; 128642.9 current ops/sec; est completion in 2 hours [READ: Count=1222185, Max=50623, Min=344, Avg=3205.12, 90=5811, 99=9559, 99.9=12687, 99.99=30495] [UPDATE: Count=64227, Max=23855, Min=310, Avg=1258.23, 90=2153, 99=2739, 99.9=8223, 99.99=10975] 
2023-03-01 10:43:30:105 1200 sec: 142991042 operations; 130320.4 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1238216, Max=51487, Min=340, Avg=3162.92, 90=5703, 99=9447, 99.9=12583, 99.99=27647] [UPDATE: Count=64990, Max=27215, Min=312, Avg=1254.93, 90=2153, 99=2705, 99.9=7843, 99.99=19727] 
2023-03-01 10:43:40:105 1210 sec: 144278750 operations; 128770.8 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1223361, Max=23407, Min=350, Avg=3201.52, 90=5827, 99=9439, 99.9=11991, 99.99=15087] [UPDATE: Count=64345, Max=10831, Min=320, Avg=1267.28, 90=2157, 99=2745, 99.9=8007, 99.99=9703] 
2023-03-01 10:43:50:105 1220 sec: 145571884 operations; 129313.4 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1228658, Max=70207, Min=335, Avg=3187.71, 90=5783, 99=9487, 99.9=12519, 99.99=30943] [UPDATE: Count=64469, Max=25023, Min=305, Avg=1263.28, 90=2153, 99=2757, 99.9=7831, 99.99=16799] 
2023-03-01 10:44:00:105 1230 sec: 146864263 operations; 129237.9 current ops/sec; est completion in 1 hour 59 minutes [READ: Count=1227743, Max=63679, Min=336, Avg=3190.07, 90=5767, 99=9487, 99.9=12863, 99.99=34271] [UPDATE: Count=64645, Max=22543, Min=318, Avg=1260.55, 90=2155, 99=2733, 99.9=8247, 99.99=17791] 
2023-03-01 10:44:10:105 1240 sec: 148162815 operations; 129855.2 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1233239, Max=19935, Min=348, Avg=3175.53, 90=5751, 99=9343, 99.9=11967, 99.99=14759] [UPDATE: Count=65326, Max=10759, Min=324, Avg=1254.13, 90=2153, 99=2733, 99.9=7807, 99.99=9975] 
2023-03-01 10:44:20:105 1250 sec: 149455062 operations; 129224.7 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1228003, Max=52863, Min=334, Avg=3189.96, 90=5779, 99=9535, 99.9=12791, 99.99=30815] [UPDATE: Count=64237, Max=30479, Min=326, Avg=1256.25, 90=2155, 99=2723, 99.9=7987, 99.99=16943] 
2023-03-01 10:44:30:105 1260 sec: 150751977 operations; 129691.5 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1231872, Max=21279, Min=347, Avg=3178.75, 90=5771, 99=9471, 99.9=12159, 99.99=15447] [UPDATE: Count=65023, Max=11127, Min=309, Avg=1263.62, 90=2157, 99=2731, 99.9=7831, 99.99=9503] 
2023-03-01 10:44:40:105 1270 sec: 152055060 operations; 130308.3 current ops/sec; est completion in 1 hour 58 minutes [READ: Count=1237955, Max=49983, Min=349, Avg=3162.47, 90=5691, 99=9567, 99.9=13895, 99.99=28175] [UPDATE: Count=65158, Max=25167, Min=329, Avg=1278.86, 90=2165, 99=2719, 99.9=8711, 99.99=18255] 
2023-03-01 10:44:50:105 1280 sec: 153360086 operations; 130502.6 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1239736, Max=51391, Min=353, Avg=3157.75, 90=5711, 99=9551, 99.9=12775, 99.99=30111] [UPDATE: Count=65266, Max=23743, Min=309, Avg=1275.76, 90=2161, 99=2757, 99.9=8439, 99.99=16959] 
2023-03-01 10:45:00:105 1290 sec: 154666680 operations; 130659.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1241333, Max=24719, Min=336, Avg=3153.49, 90=5715, 99=9407, 99.9=11999, 99.99=14927] [UPDATE: Count=65288, Max=11071, Min=309, Avg=1276.6, 90=2163, 99=2727, 99.9=7839, 99.99=9719] 
2023-03-01 10:45:10:105 1300 sec: 155988764 operations; 132208.4 current ops/sec; est completion in 1 hour 57 minutes [READ: Count=1256214, Max=51071, Min=343, Avg=3115.62, 90=5631, 99=9287, 99.9=14079, 99.99=30111] [UPDATE: Count=65852, Max=25247, Min=292, Avg=1277.54, 90=2165, 99=2743, 99.9=8191, 99.99=14559] 
2023-03-01 10:45:20:105 1310 sec: 157346485 operations; 135772.1 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=1289473, Max=43167, Min=329, Avg=3030.89, 90=5347, 99=8831, 99.9=12095, 99.99=26319] [UPDATE: Count=68238, Max=26511, Min=304, Avg=1318.46, 90=2187, 99=2807, 99.9=8247, 99.99=16063] 
2023-03-01 10:45:30:105 1320 sec: 158714400 operations; 136791.5 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=1299771, Max=24927, Min=345, Avg=3007.22, 90=5359, 99=8703, 99.9=12375, 99.99=18383] [UPDATE: Count=68144, Max=18463, Min=314, Avg=1307.98, 90=2183, 99=2757, 99.9=9103, 99.99=16991] 
2023-03-01 10:45:40:105 1330 sec: 160092867 operations; 137846.7 current ops/sec; est completion in 1 hour 56 minutes [READ: Count=1309451, Max=47071, Min=334, Avg=2980.41, 90=5047, 99=8663, 99.9=12911, 99.99=28703] [UPDATE: Count=69024, Max=25631, Min=302, Avg=1378.88, 90=2213, 99=2839, 99.9=8799, 99.99=16735] 
2023-03-01 10:45:50:105 1340 sec: 161473086 operations; 138008.1 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1311256, Max=47615, Min=345, Avg=2976.91, 90=5087, 99=8399, 99.9=11479, 99.99=27727] [UPDATE: Count=68976, Max=29567, Min=302, Avg=1371.21, 90=2209, 99=2831, 99.9=8503, 99.99=18175] 
2023-03-01 10:46:00:105 1350 sec: 162856782 operations; 138383.44 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1314217, Max=67391, Min=331, Avg=2970.53, 90=5067, 99=8463, 99.9=11847, 99.99=61183] [UPDATE: Count=69476, Max=61119, Min=323, Avg=1353.37, 90=2205, 99=2805, 99.9=9119, 99.99=11911] 
2023-03-01 10:46:10:107 1360 sec: 164256690 operations; 139948.82 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1329777, Max=51487, Min=342, Avg=2933.03, 90=4995, 99=8343, 99.9=11807, 99.99=28799] [UPDATE: Count=70137, Max=27327, Min=326, Avg=1371.71, 90=2223, 99=2871, 99.9=8567, 99.99=14687] 
2023-03-01 10:46:20:105 1370 sec: 165660633 operations; 140436.43 current ops/sec; est completion in 1 hour 55 minutes [READ: Count=1333671, Max=56383, Min=343, Avg=2926.74, 90=4991, 99=8607, 99.9=13871, 99.99=29439] [UPDATE: Count=70262, Max=24975, Min=314, Avg=1366.45, 90=2217, 99=2859, 99.9=9479, 99.99=18847] 
2023-03-01 10:46:30:105 1380 sec: 167082254 operations; 142162.1 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1350741, Max=19055, Min=347, Avg=2888.86, 90=4955, 99=8215, 99.9=10831, 99.99=13575] [UPDATE: Count=70874, Max=10999, Min=325, Avg=1350.13, 90=2215, 99=2839, 99.9=8263, 99.99=10415] 
2023-03-01 10:46:40:105 1390 sec: 168495616 operations; 141336.2 current ops/sec; est completion in 1 hour 54 minutes [READ: Count=1342781, Max=48127, Min=333, Avg=2906.11, 90=4983, 99=8559, 99.9=11823, 99.99=26911] [UPDATE: Count=70587, Max=27391, Min=319, Avg=1355.3, 90=2215, 99=2849, 99.9=8783, 99.99=14359] 
2023-03-01 10:46:50:105 1400 sec: 169908910 operations; 141329.4 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1342790, Max=51935, Min=350, Avg=2905.8, 90=4971, 99=8359, 99.9=11335, 99.99=30079] [UPDATE: Count=70515, Max=22367, Min=328, Avg=1361.42, 90=2221, 99=2867, 99.9=8391, 99.99=17055] 
2023-03-01 10:47:00:105 1410 sec: 171324497 operations; 141558.7 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1345228, Max=22607, Min=332, Avg=2901.03, 90=4959, 99=8383, 99.9=11383, 99.99=14383] [UPDATE: Count=70356, Max=12119, Min=316, Avg=1353.64, 90=2217, 99=2827, 99.9=8287, 99.99=11415] 
2023-03-01 10:47:10:105 1420 sec: 172739197 operations; 141470 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1344248, Max=54847, Min=352, Avg=2902.94, 90=4991, 99=8439, 99.9=11543, 99.99=28143] [UPDATE: Count=70431, Max=22975, Min=330, Avg=1357.07, 90=2217, 99=2897, 99.9=9015, 99.99=14271] 
2023-03-01 10:47:20:105 1430 sec: 174179369 operations; 144017.2 current ops/sec; est completion in 1 hour 53 minutes [READ: Count=1368107, Max=51551, Min=330, Avg=2852.14, 90=4931, 99=8431, 99.9=12087, 99.99=30671] [UPDATE: Count=72079, Max=40031, Min=317, Avg=1329.45, 90=2219, 99=2897, 99.9=8183, 99.99=17855] 
2023-03-01 10:47:30:105 1440 sec: 175629212 operations; 144984.3 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1377299, Max=19071, Min=338, Avg=2832.83, 90=4919, 99=8215, 99.9=10671, 99.99=13079] [UPDATE: Count=72525, Max=11359, Min=327, Avg=1323.89, 90=2215, 99=2857, 99.9=7815, 99.99=9863] 
2023-03-01 10:47:40:105 1450 sec: 177087242 operations; 145803 current ops/sec; est completion in 1 hour 52 minutes [READ: Count=1385566, Max=52447, Min=343, Avg=2816.75, 90=4883, 99=8431, 99.9=12215, 99.99=28047] [UPDATE: Count=72471, Max=26335, Min=320, Avg=1312.4, 90=2211, 99=2879, 99.9=9055, 99.99=17007] 
2023-03-01 10:47:50:105 1460 sec: 178559500 operations; 147225.8 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1398531, Max=48895, Min=353, Avg=2790.13, 90=4875, 99=8375, 99.9=11687, 99.99=26479] [UPDATE: Count=73760, Max=25263, Min=320, Avg=1299.78, 90=2211, 99=2871, 99.9=8823, 99.99=20831] 
2023-03-01 10:48:00:105 1470 sec: 180042134 operations; 148263.4 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1408692, Max=23503, Min=344, Avg=2769.94, 90=4851, 99=8303, 99.9=11223, 99.99=15663] [UPDATE: Count=73916, Max=15599, Min=311, Avg=1291.98, 90=2209, 99=2849, 99.9=8455, 99.99=10935] 
2023-03-01 10:48:10:105 1480 sec: 181522619 operations; 148048.5 current ops/sec; est completion in 1 hour 51 minutes [READ: Count=1406290, Max=56863, Min=336, Avg=2774.69, 90=4847, 99=8287, 99.9=11407, 99.99=28639] [UPDATE: Count=74187, Max=24495, Min=322, Avg=1290.52, 90=2211, 99=2875, 99.9=8559, 99.99=17551] 
2023-03-01 10:48:20:105 1490 sec: 183011106 operations; 148848.7 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1414019, Max=62431, Min=341, Avg=2759.46, 90=4835, 99=8383, 99.9=11735, 99.99=33407] [UPDATE: Count=74470, Max=24383, Min=330, Avg=1288.06, 90=2209, 99=2887, 99.9=8495, 99.99=19119] 
2023-03-01 10:48:30:105 1500 sec: 184522692 operations; 151158.6 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1436047, Max=18703, Min=342, Avg=2716.93, 90=4763, 99=8155, 99.9=11151, 99.99=14391] [UPDATE: Count=75539, Max=12847, Min=322, Avg=1270.99, 90=2207, 99=2859, 99.9=8647, 99.99=11631] 
2023-03-01 10:48:40:105 1510 sec: 186019984 operations; 149729.2 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1422812, Max=54047, Min=353, Avg=2742.58, 90=4787, 99=8431, 99.9=11943, 99.99=31983] [UPDATE: Count=74488, Max=25839, Min=334, Avg=1281.26, 90=2211, 99=2897, 99.9=8807, 99.99=17135] 
2023-03-01 10:48:50:105 1520 sec: 187525805 operations; 150582.1 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1430311, Max=39295, Min=346, Avg=2728.05, 90=4819, 99=8303, 99.9=11071, 99.99=24367] [UPDATE: Count=75509, Max=24431, Min=308, Avg=1268.77, 90=2209, 99=2875, 99.9=8087, 99.99=11503] 
2023-03-01 10:49:00:105 1530 sec: 189038150 operations; 151234.5 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1436974, Max=37791, Min=351, Avg=2716.1, 90=4815, 99=8335, 99.9=11279, 99.99=31679] [UPDATE: Count=75376, Max=31183, Min=333, Avg=1257.54, 90=2203, 99=2839, 99.9=7743, 99.99=12247] 
2023-03-01 10:49:10:105 1540 sec: 190560689 operations; 152253.9 current ops/sec; est completion in 1 hour 49 minutes [READ: Count=1446374, Max=58143, Min=346, Avg=2697.53, 90=4715, 99=8207, 99.9=11055, 99.99=28975] [UPDATE: Count=76156, Max=23039, Min=331, Avg=1260.68, 90=2209, 99=2841, 99.9=8055, 99.99=13511] 
2023-03-01 10:49:20:105 1550 sec: 192071809 operations; 151112 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1435743, Max=57791, Min=350, Avg=2718.68, 90=4807, 99=8431, 99.9=11847, 99.99=28687] [UPDATE: Count=75376, Max=22399, Min=310, Avg=1252.11, 90=2199, 99=2795, 99.9=8495, 99.99=15903] 
2023-03-01 10:49:30:105 1560 sec: 193581192 operations; 150938.3 current ops/sec; est completion in 1 hour 48 minutes [READ: Count=1433715, Max=20335, Min=335, Avg=2721.81, 90=4803, 99=8231, 99.9=11143, 99.99=14631] [UPDATE: Count=75672, Max=12367, Min=328, Avg=1261.83, 90=2199, 99=2815, 99.9=8751, 99.99=11647] 
2023-03-01 10:49:40:105 1570 sec: 195092100 operations; 151090.8 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1435486, Max=49759, Min=340, Avg=2719.03, 90=4811, 99=8471, 99.9=11511, 99.99=26767] [UPDATE: Count=75414, Max=23743, Min=319, Avg=1252.23, 90=2199, 99=2815, 99.9=8511, 99.99=20767] 
2023-03-01 10:49:50:105 1580 sec: 196633835 operations; 154173.5 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1464552, Max=20879, Min=348, Avg=2662.56, 90=4603, 99=8059, 99.9=11047, 99.99=14423] [UPDATE: Count=77180, Max=12655, Min=312, Avg=1273.01, 90=2217, 99=2851, 99.9=8407, 99.99=11167] 
2023-03-01 10:50:00:105 1590 sec: 198175911 operations; 154207.6 current ops/sec; est completion in 1 hour 47 minutes [READ: Count=1464513, Max=53119, Min=342, Avg=2661.88, 90=4543, 99=8423, 99.9=13439, 99.99=30735] [UPDATE: Count=77579, Max=27199, Min=335, Avg=1280.52, 90=2221, 99=2875, 99.9=9663, 99.99=18863] 
2023-03-01 10:50:10:105 1600 sec: 199722621 operations; 154671 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1469517, Max=51103, Min=349, Avg=2652.87, 90=4531, 99=8071, 99.9=11975, 99.99=29007] [UPDATE: Count=77182, Max=27023, Min=329, Avg=1284.51, 90=2225, 99=2905, 99.9=9703, 99.99=17119] 
2023-03-01 10:50:20:105 1610 sec: 201285826 operations; 156320.5 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1484868, Max=32111, Min=329, Avg=2623.79, 90=4383, 99=7975, 99.9=13199, 99.99=28063] [UPDATE: Count=78339, Max=27967, Min=323, Avg=1297.36, 90=2225, 99=2915, 99.9=10255, 99.99=26335] 
2023-03-01 10:50:30:105 1620 sec: 202883506 operations; 159768 current ops/sec; est completion in 1 hour 46 minutes [READ: Count=1517596, Max=62239, Min=334, Avg=2564.42, 90=4135, 99=7611, 99.9=11959, 99.99=32047] [UPDATE: Count=80078, Max=21551, Min=304, Avg=1322.19, 90=2245, 99=2907, 99.9=9543, 99.99=17135] 
2023-03-01 10:50:40:105 1630 sec: 204544830 operations; 166132.4 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1578119, Max=58623, Min=346, Avg=2458.84, 90=3715, 99=6147, 99.9=11455, 99.99=30639] [UPDATE: Count=83206, Max=28143, Min=324, Avg=1408.47, 90=2309, 99=3089, 99.9=9111, 99.99=22287] 
2023-03-01 10:50:50:105 1640 sec: 206264996 operations; 172016.6 current ops/sec; est completion in 1 hour 45 minutes [READ: Count=1635005, Max=31167, Min=337, Avg=2370.79, 90=3515, 99=5523, 99.9=12439, 99.99=27967] [UPDATE: Count=85166, Max=28335, Min=330, Avg=1423.17, 90=2343, 99=3223, 99.9=9615, 99.99=26959] 
2023-03-01 10:51:00:105 1650 sec: 208007076 operations; 174208 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1654981, Max=50751, Min=353, Avg=2341.08, 90=3473, 99=5311, 99.9=11599, 99.99=25375] [UPDATE: Count=87106, Max=23615, Min=327, Avg=1412.2, 90=2347, 99=3233, 99.9=9871, 99.99=19279] 
2023-03-01 10:51:10:105 1660 sec: 209755617 operations; 174854.1 current ops/sec; est completion in 1 hour 44 minutes [READ: Count=1660982, Max=49535, Min=349, Avg=2332.1, 90=3459, 99=5403, 99.9=10175, 99.99=26527] [UPDATE: Count=87558, Max=27615, Min=326, Avg=1413.95, 90=2347, 99=3245, 99.9=8687, 99.99=17391] 
2023-03-01 10:51:20:105 1670 sec: 211510065 operations; 175444.8 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1666570, Max=17311, Min=342, Avg=2324.29, 90=3445, 99=5323, 99.9=10831, 99.99=13815] [UPDATE: Count=87870, Max=15255, Min=320, Avg=1408.69, 90=2345, 99=3233, 99.9=9111, 99.99=12767] 
2023-03-01 10:51:30:105 1680 sec: 213261972 operations; 175190.7 current ops/sec; est completion in 1 hour 43 minutes [READ: Count=1664000, Max=53855, Min=349, Avg=2327.58, 90=3433, 99=5383, 99.9=11815, 99.99=28559] [UPDATE: Count=87917, Max=25951, Min=325, Avg=1413.48, 90=2347, 99=3263, 99.9=9823, 99.99=19647] 
2023-03-01 10:51:40:105 1690 sec: 215018546 operations; 175657.4 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1669007, Max=52959, Min=354, Avg=2320.82, 90=3423, 99=5367, 99.9=10975, 99.99=29247] [UPDATE: Count=87571, Max=27679, Min=319, Avg=1415.1, 90=2347, 99=3301, 99.9=8975, 99.99=23183] 
2023-03-01 10:51:50:105 1700 sec: 216786271 operations; 176772.5 current ops/sec; est completion in 1 hour 42 minutes [READ: Count=1679259, Max=30223, Min=361, Avg=2305.95, 90=3387, 99=5195, 99.9=12719, 99.99=25759] [UPDATE: Count=88476, Max=26319, Min=326, Avg=1415.09, 90=2347, 99=3305, 99.9=9991, 99.99=24831] 
2023-03-01 10:52:00:105 1710 sec: 218542075 operations; 175580.4 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1668044, Max=59455, Min=337, Avg=2322.12, 90=3427, 99=5343, 99.9=11343, 99.99=27823] [UPDATE: Count=87758, Max=25231, Min=321, Avg=1411.77, 90=2355, 99=3261, 99.9=9919, 99.99=14039] 
2023-03-01 10:52:10:105 1720 sec: 220315228 operations; 177315.3 current ops/sec; est completion in 1 hour 41 minutes [READ: Count=1684089, Max=49247, Min=346, Avg=2299.38, 90=3383, 99=5195, 99.9=12359, 99.99=27311] [UPDATE: Count=89072, Max=26415, Min=322, Avg=1403.78, 90=2353, 99=3275, 99.9=10279, 99.99=17711] 
2023-03-01 10:52:20:105 1730 sec: 222092805 operations; 177757.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1688661, Max=26943, Min=335, Avg=2293.14, 90=3379, 99=5159, 99.9=10791, 99.99=24175] [UPDATE: Count=88899, Max=24959, Min=329, Avg=1405.84, 90=2351, 99=3297, 99.9=9295, 99.99=23071] 
2023-03-01 10:52:30:105 1740 sec: 223847992 operations; 175518.7 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1667964, Max=50719, Min=352, Avg=2322.41, 90=3397, 99=5339, 99.9=13975, 99.99=31631] [UPDATE: Count=87217, Max=32991, Min=315, Avg=1417.83, 90=2353, 99=3305, 99.9=11007, 99.99=30351] 
2023-03-01 10:52:40:105 1750 sec: 225613773 operations; 176578.1 current ops/sec; est completion in 1 hour 40 minutes [READ: Count=1677684, Max=46911, Min=345, Avg=2308.5, 90=3385, 99=5159, 99.9=17263, 99.99=28479] [UPDATE: Count=88122, Max=27967, Min=322, Avg=1413.32, 90=2351, 99=3285, 99.9=12215, 99.99=26063] 
2023-03-01 10:52:50:105 1760 sec: 227383907 operations; 177013.4 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1681546, Max=31535, Min=356, Avg=2302.81, 90=3385, 99=5175, 99.9=11231, 99.99=28223] [UPDATE: Count=88578, Max=28687, Min=341, Avg=1412.37, 90=2357, 99=3279, 99.9=9583, 99.99=26607] 
2023-03-01 10:53:00:105 1770 sec: 229148315 operations; 176440.8 current ops/sec; est completion in 1 hour 39 minutes [READ: Count=1676928, Max=53279, Min=334, Avg=2310.51, 90=3391, 99=5155, 99.9=12143, 99.99=29423] [UPDATE: Count=87463, Max=33599, Min=308, Avg=1403.28, 90=2345, 99=3213, 99.9=10191, 99.99=16511] 
2023-03-01 10:53:10:105 1780 sec: 230914710 operations; 176639.5 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1677762, Max=51295, Min=353, Avg=2308.06, 90=3375, 99=5175, 99.9=12567, 99.99=28239] [UPDATE: Count=88646, Max=26975, Min=318, Avg=1410.6, 90=2349, 99=3275, 99.9=10599, 99.99=24287] 
2023-03-01 10:53:20:105 1790 sec: 232685657 operations; 177094.7 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=1682714, Max=20527, Min=356, Avg=2301.87, 90=3395, 99=5207, 99.9=10119, 99.99=17551] [UPDATE: Count=88230, Max=18127, Min=329, Avg=1404.5, 90=2349, 99=3251, 99.9=8575, 99.99=16735] 
2023-03-01 10:53:30:105 1800 sec: 234449305 operations; 176364.8 current ops/sec; est completion in 1 hour 37 minutes [READ: Count=1675211, Max=48927, Min=353, Avg=2311.97, 90=3397, 99=5319, 99.9=11743, 99.99=26847] [UPDATE: Count=88446, Max=25711, Min=334, Avg=1406.61, 90=2347, 99=3299, 99.9=9663, 99.99=24815] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-137 to complete. Workload status: true
2023-03-01 10:53:32:370 1802 sec: 234455469 operations; 2720.21 current ops/sec; est completion in 1 hour 38 minutes [READ: Count=5798, Max=7639, Min=430, Avg=2341.59, 90=3511, 99=5011, 99.9=6287, 99.99=6867] [CLEANUP: Count=400, Max=2222079, Min=0, Avg=5553.88, 90=2, 99=9, 99.9=2222079, 99.99=2222079] [UPDATE: Count=313, Max=5139, Min=412, Avg=1504.12, 90=2441, 99=3987, 99.9=5139, 99.99=5139] 
[OVERALL], RunTime(ms), 1802264
[OVERALL], Throughput(ops/sec), 130089.4147583262
[TOTAL_GCS_PS_Scavenge], Count, 3752
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18426
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0223807388928592
[TOTAL_GCS_PS_MarkSweep], Count, 2
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 110
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.006103434347021303
[TOTAL_GCs], Count, 3754
[TOTAL_GC_TIME], Time(ms), 18536
[TOTAL_GC_TIME_%], Time(%), 1.0284841732398804
[READ], Operations, 222732422
[READ], AverageLatency(us), 3159.0914320726956
[READ], MinLatency(us), 301
[READ], MaxLatency(us), 645119
[READ], 95thPercentileLatency(us), 6715
[READ], 99thPercentileLatency(us), 9471
[READ], Return=OK, 222732422
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5553.8775
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2222079
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 9
[UPDATE], Operations, 11723047
[UPDATE], AverageLatency(us), 1343.422571964439
[UPDATE], MinLatency(us), 279
[UPDATE], MaxLatency(us), 239871
[UPDATE], 95thPercentileLatency(us), 2385
[UPDATE], 99thPercentileLatency(us), 2911
[UPDATE], Return=OK, 11723047
