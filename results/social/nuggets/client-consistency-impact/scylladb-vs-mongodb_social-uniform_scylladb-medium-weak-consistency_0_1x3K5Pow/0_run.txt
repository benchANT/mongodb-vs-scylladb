bin/ycsb run scylla -s -jvm-args=-XX:MaxRAMPercentage=85.0  -p scylla.hosts=52.9.198.65,184.169.172.112,54.215.180.221 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=vwyDOxj4VcK09rk -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform
/usr/java/bin/java -XX:MaxRAMPercentage=85.0 -cp /binary/ycsb/scylla-binding/conf:/binary/ycsb/conf:/binary/ycsb/lib/core-0.18.0-SNAPSHOT.jar:/binary/ycsb/lib/jackson-mapper-asl-1.9.4.jar:/binary/ycsb/lib/htrace-core4-4.1.0-incubating.jar:/binary/ycsb/lib/jackson-core-asl-1.9.4.jar:/binary/ycsb/lib/HdrHistogram-2.1.4.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16-native.jar:/binary/ycsb/scylla-binding/lib/jnr-constants-0.9.9.jar:/binary/ycsb/scylla-binding/lib/netty-transport-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-analysis-5.0.3.jar:/binary/ycsb/scylla-binding/lib/scylla-binding-0.18.0-SNAPSHOT.jar:/binary/ycsb/scylla-binding/lib/asm-commons-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-util-5.0.3.jar:/binary/ycsb/scylla-binding/lib/asm-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jnr-x86asm-1.0.2.jar:/binary/ycsb/scylla-binding/lib/scylla-driver-core-3.10.2-scylla-1.jar:/binary/ycsb/scylla-binding/lib/metrics-core-3.2.2.jar:/binary/ycsb/scylla-binding/lib/netty-buffer-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/jnr-posix-3.0.44.jar:/binary/ycsb/scylla-binding/lib/jackson-databind-2.7.9.3.jar:/binary/ycsb/scylla-binding/lib/jackson-core-2.7.9.jar:/binary/ycsb/scylla-binding/lib/netty-common-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/asm-tree-5.0.3.jar:/binary/ycsb/scylla-binding/lib/jffi-1.2.16.jar:/binary/ycsb/scylla-binding/lib/slf4j-simple-1.7.25.jar:/binary/ycsb/scylla-binding/lib/jnr-ffi-2.1.7.jar:/binary/ycsb/scylla-binding/lib/jackson-annotations-2.7.0.jar:/binary/ycsb/scylla-binding/lib/netty-handler-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/guava-19.0.jar:/binary/ycsb/scylla-binding/lib/netty-codec-4.0.56.Final.jar:/binary/ycsb/scylla-binding/lib/slf4j-api-1.7.25.jar site.ycsb.Client -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.9.198.65,184.169.172.112,54.215.180.221 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=vwyDOxj4VcK09rk -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
Command line: -db site.ycsb.db.scylla.ScyllaCQLClient -s -p scylla.hosts=52.9.198.65,184.169.172.112,54.215.180.221 -p scylla.keyspace=ycsb -p scylla.username=scylla -p scylla.password=vwyDOxj4VcK09rk -p scylla.writeconsistencylevel=QUORUM -p scylla.readconsistencylevel=ONE -p workload=site.ycsb.workloads.CoreWorkload -p maxexecutiontime=1800 -threads 400 -p recordcount=1000000000 -p operationcount=999900000 -p fieldcount=10 -p fieldlength=100 -p requestdistribution=uniform -p insertorder=ordered -p readproportion=0.95 -p updateproportion=0.05 -p insertproportion=0.0 -p scanproportion=0.0 -p maxscanlength=1000 -p scanlengthdistribution=uniform -t
YCSB Client 0.18.0-SNAPSHOT

Loading workload...
Starting test.
[Thread-51] INFO com.datastax.driver.core - DataStax Java driver 3.10.2-scylla-1 for Apache Cassandra
2023-03-07 15:06:29:307 0 sec: 0 operations; est completion in 0 second 
[Thread-51] INFO com.datastax.driver.core.GuavaCompatibility - Detected Guava >= 19 in the classpath, using modern compatibility layer
Maximum execution time specified as: 1800 secs
[Thread-51] INFO com.datastax.driver.core.ClockFactory - Using native clock to generate timestamps.
===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.Cluster - ===== Using optimized driver!!! =====
[Thread-51] INFO com.datastax.driver.core.NettyUtil - Did not find Netty's native epoll transport in the classpath, defaulting to NIO.
[Thread-51] INFO com.datastax.driver.core.policies.DCAwareRoundRobinPolicy - Using data-center name 'AWS_US_WEST_1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.241.215.79:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.215.180.221:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /13.52.49.235:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /52.9.198.65:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /184.169.172.112:9042 added
[Thread-51] INFO com.datastax.driver.core.Cluster - New Cassandra host /54.241.4.23:9042 added
[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Connected to cluster: b8571bed-ae3b-4850-a0a3-6fa68a701036

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.241.215.79; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.215.180.221; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /54.241.4.23; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /13.52.49.235; Rack: us-west-1c

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /52.9.198.65; Rack: us-west-1a-virtual1

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Datacenter: AWS_US_WEST_1; Host: /184.169.172.112; Rack: us-west-1a

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Not using LWT

[Thread-51] INFO site.ycsb.db.scylla.ScyllaCQLClient - Read consistency: ONE, Write consistency: QUORUM

DBWrapper: report latency for each error is false and specific error codes to track for latency are: []
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field0=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field3=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field6=? WHERE y_id=?;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field4=? WHERE y_id=?;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='UPDATE usertable SET field1=? WHERE y_id=?;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-7] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-14] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-0] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-4] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-1] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-9] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-5] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-2] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-8] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-15] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-3] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-6] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-12] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-10] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-11] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
[cluster1-worker-13] WARN com.datastax.driver.core.Cluster - Re-preparing already prepared query is generally an anti-pattern and will likely affect performance. Consider preparing the statement only once. Query='SELECT * FROM usertable WHERE y_id=? LIMIT 1;'
2023-03-07 15:06:39:291 10 sec: 1511690 operations; 151169 current ops/sec; est completion in 1 hour 50 minutes [READ: Count=1436646, Max=183039, Min=206, Avg=2469.24, 90=4411, 99=13647, 99.9=53407, 99.99=167039] [UPDATE: Count=75288, Max=177279, Min=298, Avg=1902.05, 90=2837, 99=11695, 99.9=50911, 99.99=163583] 
2023-03-07 15:06:49:291 20 sec: 3477956 operations; 196626.6 current ops/sec; est completion in 1 hour 35 minutes [READ: Count=1867822, Max=55999, Min=211, Avg=2056.96, 90=3895, 99=7283, 99.9=16415, 99.99=34175] [UPDATE: Count=98593, Max=48063, Min=314, Avg=1498.43, 90=2515, 99=4283, 99.9=14231, 99.99=29871] 
2023-03-07 15:06:59:291 30 sec: 5459589 operations; 198163.3 current ops/sec; est completion in 1 hour 31 minutes [READ: Count=1882299, Max=53087, Min=215, Avg=2044.43, 90=3867, 99=7211, 99.9=13015, 99.99=41567] [UPDATE: Count=99049, Max=42303, Min=305, Avg=1495.44, 90=2507, 99=4171, 99.9=11543, 99.99=40575] 
2023-03-07 15:07:09:291 40 sec: 7446079 operations; 198649 current ops/sec; est completion in 1 hour 28 minutes [READ: Count=1887058, Max=25663, Min=220, Avg=2039.68, 90=3889, 99=7095, 99.9=11223, 99.99=21535] [UPDATE: Count=99453, Max=23311, Min=323, Avg=1488.54, 90=2517, 99=4103, 99.9=10063, 99.99=21519] 
2023-03-07 15:07:19:291 50 sec: 9434785 operations; 198870.6 current ops/sec; est completion in 1 hour 27 minutes [READ: Count=1889107, Max=64319, Min=218, Avg=2037.33, 90=3861, 99=7167, 99.9=14031, 99.99=26639] [UPDATE: Count=99566, Max=26959, Min=319, Avg=1486.9, 90=2515, 99=4049, 99.9=11487, 99.99=21167] 
2023-03-07 15:07:29:291 60 sec: 11420956 operations; 198617.1 current ops/sec; est completion in 1 hour 26 minutes [READ: Count=1887326, Max=48287, Min=213, Avg=2040.32, 90=3903, 99=7223, 99.9=11207, 99.99=23423] [UPDATE: Count=98868, Max=25967, Min=315, Avg=1479.24, 90=2511, 99=4175, 99.9=10343, 99.99=18431] 
2023-03-07 15:07:39:291 70 sec: 13406664 operations; 198570.8 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1886723, Max=42463, Min=215, Avg=2039.75, 90=3853, 99=7171, 99.9=12279, 99.99=36351] [UPDATE: Count=99019, Max=37311, Min=321, Avg=1500.25, 90=2527, 99=4135, 99.9=10807, 99.99=35071] 
2023-03-07 15:07:49:291 80 sec: 15379732 operations; 197306.8 current ops/sec; est completion in 1 hour 25 minutes [READ: Count=1874763, Max=51519, Min=208, Avg=2052.92, 90=3867, 99=7307, 99.9=14983, 99.99=34751] [UPDATE: Count=98258, Max=35839, Min=301, Avg=1508.22, 90=2529, 99=4307, 99.9=11735, 99.99=33311] 
2023-03-07 15:07:59:291 90 sec: 17363422 operations; 198369 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1884379, Max=56159, Min=218, Avg=2042.72, 90=3863, 99=7351, 99.9=12967, 99.99=25695] [UPDATE: Count=99306, Max=25919, Min=321, Avg=1486.67, 90=2501, 99=4159, 99.9=11215, 99.99=15951] 
2023-03-07 15:08:09:291 100 sec: 19349380 operations; 198595.8 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1886480, Max=30911, Min=219, Avg=2040.05, 90=3843, 99=7199, 99.9=14647, 99.99=26751] [UPDATE: Count=99466, Max=29103, Min=299, Avg=1493.32, 90=2503, 99=4087, 99.9=12967, 99.99=26159] 
2023-03-07 15:08:19:291 110 sec: 21332396 operations; 198301.6 current ops/sec; est completion in 1 hour 24 minutes [READ: Count=1883682, Max=52063, Min=219, Avg=2043.58, 90=3871, 99=7295, 99.9=13055, 99.99=25631] [UPDATE: Count=99352, Max=36703, Min=324, Avg=1484.6, 90=2491, 99=4057, 99.9=10647, 99.99=19295] 
2023-03-07 15:08:29:291 120 sec: 23327752 operations; 199535.6 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1895810, Max=50911, Min=226, Avg=2030.32, 90=3837, 99=7095, 99.9=12639, 99.99=25503] [UPDATE: Count=99525, Max=23135, Min=314, Avg=1484.38, 90=2507, 99=4067, 99.9=11055, 99.99=17071] 
2023-03-07 15:08:39:291 130 sec: 25313066 operations; 198531.4 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1886405, Max=45567, Min=220, Avg=2040.47, 90=3833, 99=7179, 99.9=12927, 99.99=34751] [UPDATE: Count=98904, Max=39263, Min=309, Avg=1494.58, 90=2517, 99=4143, 99.9=10687, 99.99=33151] 
2023-03-07 15:08:49:295 140 sec: 27311408 operations; 199754.3 current ops/sec; est completion in 1 hour 23 minutes [READ: Count=1898600, Max=53599, Min=220, Avg=2027.22, 90=3825, 99=7103, 99.9=12367, 99.99=24015] [UPDATE: Count=99803, Max=23935, Min=323, Avg=1488.02, 90=2517, 99=4107, 99.9=10559, 99.99=18079] 
2023-03-07 15:08:59:291 150 sec: 29306027 operations; 199541.72 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1895130, Max=53823, Min=196, Avg=2030.93, 90=3813, 99=7131, 99.9=13343, 99.99=25359] [UPDATE: Count=99445, Max=26063, Min=317, Avg=1484.65, 90=2497, 99=4061, 99.9=11495, 99.99=22719] 
2023-03-07 15:09:09:291 160 sec: 31288493 operations; 198246.6 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1883000, Max=45631, Min=221, Avg=2043.78, 90=3855, 99=7167, 99.9=13095, 99.99=41055] [UPDATE: Count=99468, Max=42591, Min=320, Avg=1492.89, 90=2499, 99=4053, 99.9=11255, 99.99=40255] 
2023-03-07 15:09:19:291 170 sec: 33279867 operations; 199137.4 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1891805, Max=67263, Min=210, Avg=2034.31, 90=3829, 99=7199, 99.9=12447, 99.99=24927] [UPDATE: Count=99574, Max=44895, Min=303, Avg=1490.75, 90=2507, 99=3973, 99.9=10431, 99.99=18015] 
2023-03-07 15:09:29:291 180 sec: 35256624 operations; 197675.7 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1877540, Max=75391, Min=215, Avg=2050.46, 90=3883, 99=7351, 99.9=13983, 99.99=27727] [UPDATE: Count=99189, Max=35647, Min=311, Avg=1483.4, 90=2491, 99=4057, 99.9=11447, 99.99=17711] 
2023-03-07 15:09:39:291 190 sec: 37238147 operations; 198152.3 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1882489, Max=33023, Min=217, Avg=2045.23, 90=3881, 99=7079, 99.9=13351, 99.99=26575] [UPDATE: Count=99053, Max=28159, Min=318, Avg=1481.86, 90=2491, 99=3931, 99.9=11087, 99.99=23519] 
2023-03-07 15:09:49:291 200 sec: 39198667 operations; 196052 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1862966, Max=57919, Min=221, Avg=2068.23, 90=3911, 99=8375, 99.9=14551, 99.99=24767] [UPDATE: Count=97534, Max=26415, Min=324, Avg=1475.09, 90=2473, 99=3917, 99.9=11535, 99.99=19247] 
2023-03-07 15:09:59:291 210 sec: 41146649 operations; 194798.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1850637, Max=212863, Min=217, Avg=2081.54, 90=3893, 99=7875, 99.9=14351, 99.99=136831] [UPDATE: Count=97353, Max=204415, Min=308, Avg=1488.1, 90=2475, 99=4053, 99.9=11159, 99.99=75647] 
2023-03-07 15:10:09:291 220 sec: 43139943 operations; 199329.4 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1894013, Max=34111, Min=217, Avg=2033.2, 90=3855, 99=7007, 99.9=12039, 99.99=27039] [UPDATE: Count=99308, Max=28159, Min=304, Avg=1470.83, 90=2491, 99=3881, 99.9=10535, 99.99=26191] 
2023-03-07 15:10:19:291 230 sec: 45109812 operations; 196986.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1871282, Max=61631, Min=219, Avg=2058.26, 90=3885, 99=7263, 99.9=14591, 99.99=54975] [UPDATE: Count=98550, Max=56959, Min=311, Avg=1474.12, 90=2473, 99=3899, 99.9=12399, 99.99=53791] 
2023-03-07 15:10:29:291 240 sec: 47093972 operations; 198416 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1885070, Max=77311, Min=221, Avg=2042.62, 90=3863, 99=7207, 99.9=12087, 99.99=31087] [UPDATE: Count=99091, Max=33631, Min=320, Avg=1477.4, 90=2487, 99=3969, 99.9=10935, 99.99=24495] 
2023-03-07 15:10:39:291 250 sec: 48622569 operations; 152859.7 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1452496, Max=316159, Min=226, Avg=2658.41, 90=4643, 99=10903, 99.9=29471, 99.99=217215] [UPDATE: Count=76067, Max=53023, Min=313, Avg=1738.19, 90=2889, 99=4327, 99.9=16703, 99.99=35039] 
2023-03-07 15:10:49:291 260 sec: 50007134 operations; 138456.5 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1315329, Max=714239, Min=209, Avg=2953.65, 90=4013, 99=10719, 99.9=237567, 99.99=625663] [UPDATE: Count=69280, Max=26207, Min=269, Avg=1690.08, 90=2665, 99=3987, 99.9=7991, 99.99=18607] 
2023-03-07 15:10:59:291 270 sec: 51947077 operations; 193994.3 current ops/sec; est completion in 1 hour 22 minutes [READ: Count=1842812, Max=20271, Min=216, Avg=2089.4, 90=3779, 99=6875, 99.9=11423, 99.99=15295] [UPDATE: Count=97116, Max=14431, Min=336, Avg=1509.64, 90=2465, 99=3603, 99.9=10111, 99.99=13343] 
2023-03-07 15:11:09:291 280 sec: 53873327 operations; 192625 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1829642, Max=80511, Min=210, Avg=2104.85, 90=3793, 99=7091, 99.9=13367, 99.99=31599] [UPDATE: Count=96599, Max=29455, Min=323, Avg=1510.67, 90=2461, 99=3633, 99.9=12071, 99.99=16623] 
2023-03-07 15:11:19:291 290 sec: 55803423 operations; 193009.6 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1833871, Max=42975, Min=222, Avg=2100.74, 90=3805, 99=7051, 99.9=12599, 99.99=24703] [UPDATE: Count=96219, Max=25775, Min=314, Avg=1502.47, 90=2453, 99=3555, 99.9=10511, 99.99=22799] 
2023-03-07 15:11:29:291 300 sec: 57737518 operations; 193409.5 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1836772, Max=22623, Min=216, Avg=2096.22, 90=3807, 99=6955, 99.9=10903, 99.99=17983] [UPDATE: Count=97320, Max=18799, Min=310, Avg=1507.02, 90=2459, 99=3595, 99.9=9599, 99.99=17471] 
2023-03-07 15:11:39:291 310 sec: 59663861 operations; 192634.3 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1829602, Max=59967, Min=213, Avg=2105.01, 90=3811, 99=7039, 99.9=11807, 99.99=24575] [UPDATE: Count=96740, Max=40991, Min=328, Avg=1506.49, 90=2459, 99=3595, 99.9=10143, 99.99=17535] 
2023-03-07 15:11:49:291 320 sec: 61594163 operations; 193030.2 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1833912, Max=54623, Min=218, Avg=2100.47, 90=3815, 99=7047, 99.9=10703, 99.99=23407] [UPDATE: Count=96414, Max=23247, Min=327, Avg=1503.72, 90=2449, 99=3567, 99.9=9495, 99.99=15967] 
2023-03-07 15:11:59:291 330 sec: 63533102 operations; 193893.9 current ops/sec; est completion in 1 hour 21 minutes [READ: Count=1841949, Max=20111, Min=224, Avg=2091.14, 90=3793, 99=6943, 99.9=10927, 99.99=13647] [UPDATE: Count=96970, Max=13599, Min=330, Avg=1497.49, 90=2453, 99=3481, 99.9=9727, 99.99=11855] 
2023-03-07 15:12:09:291 340 sec: 65464870 operations; 193176.8 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1835015, Max=47615, Min=211, Avg=2098.8, 90=3793, 99=6919, 99.9=13263, 99.99=22735] [UPDATE: Count=96751, Max=23311, Min=331, Avg=1506.66, 90=2455, 99=3543, 99.9=11471, 99.99=15847] 
2023-03-07 15:12:19:291 350 sec: 67386770 operations; 192190 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1825526, Max=66623, Min=209, Avg=2109.7, 90=3811, 99=7155, 99.9=13839, 99.99=26351] [UPDATE: Count=96379, Max=20591, Min=326, Avg=1512.19, 90=2451, 99=3613, 99.9=11383, 99.99=17183] 
2023-03-07 15:12:29:291 360 sec: 69316696 operations; 192992.6 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1833809, Max=24079, Min=211, Avg=2100.86, 90=3813, 99=6907, 99.9=11935, 99.99=17663] [UPDATE: Count=96109, Max=19199, Min=311, Avg=1502.37, 90=2457, 99=3521, 99.9=10487, 99.99=16671] 
2023-03-07 15:12:39:291 370 sec: 71241083 operations; 192438.7 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1828470, Max=70719, Min=225, Avg=2106.79, 90=3819, 99=7091, 99.9=11527, 99.99=27487] [UPDATE: Count=95949, Max=27055, Min=304, Avg=1510.28, 90=2455, 99=3633, 99.9=9559, 99.99=25375] 
2023-03-07 15:12:49:291 380 sec: 73166275 operations; 192519.2 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1829239, Max=55903, Min=215, Avg=2106.17, 90=3823, 99=7075, 99.9=12007, 99.99=23631] [UPDATE: Count=95932, Max=24335, Min=311, Avg=1504.22, 90=2447, 99=3555, 99.9=10047, 99.99=19263] 
2023-03-07 15:12:59:291 390 sec: 75087822 operations; 192154.7 current ops/sec; est completion in 1 hour 20 minutes [READ: Count=1825297, Max=30495, Min=216, Avg=2110.44, 90=3823, 99=7127, 99.9=12839, 99.99=23983] [UPDATE: Count=96282, Max=25839, Min=308, Avg=1506.88, 90=2453, 99=3571, 99.9=10279, 99.99=22639] 
2023-03-07 15:13:09:291 400 sec: 77015321 operations; 192749.9 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1830600, Max=48223, Min=217, Avg=2103.71, 90=3817, 99=7023, 99.9=12455, 99.99=24975] [UPDATE: Count=96917, Max=22799, Min=311, Avg=1506.46, 90=2465, 99=3557, 99.9=10535, 99.99=17215] 
2023-03-07 15:13:19:291 410 sec: 78925851 operations; 191053 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1814877, Max=62943, Min=208, Avg=2122.06, 90=3817, 99=7211, 99.9=17567, 99.99=45279] [UPDATE: Count=95633, Max=46847, Min=290, Avg=1524.16, 90=2455, 99=3615, 99.9=15919, 99.99=44159] 
2023-03-07 15:13:29:291 420 sec: 80856718 operations; 193086.7 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1834574, Max=28895, Min=218, Avg=2099.28, 90=3803, 99=7019, 99.9=12695, 99.99=23695] [UPDATE: Count=96297, Max=27567, Min=316, Avg=1512.21, 90=2457, 99=3605, 99.9=11327, 99.99=23695] 
2023-03-07 15:13:39:291 430 sec: 82783836 operations; 192711.8 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1830901, Max=52511, Min=214, Avg=2103.96, 90=3813, 99=7071, 99.9=13591, 99.99=22175] [UPDATE: Count=96259, Max=22751, Min=316, Avg=1506.95, 90=2447, 99=3563, 99.9=12247, 99.99=19023] 
2023-03-07 15:13:49:291 440 sec: 84703705 operations; 191986.9 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1823526, Max=58207, Min=211, Avg=2111.91, 90=3823, 99=7195, 99.9=13679, 99.99=24303] [UPDATE: Count=96280, Max=24911, Min=330, Avg=1514.7, 90=2461, 99=3641, 99.9=11567, 99.99=19023] 
2023-03-07 15:13:59:291 450 sec: 86633569 operations; 192986.4 current ops/sec; est completion in 1 hour 19 minutes [READ: Count=1833277, Max=28415, Min=215, Avg=2101.3, 90=3815, 99=7079, 99.9=11207, 99.99=22783] [UPDATE: Count=96563, Max=23551, Min=319, Avg=1497.36, 90=2449, 99=3593, 99.9=9463, 99.99=15535] 
2023-03-07 15:14:09:291 460 sec: 88561809 operations; 192824 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1832075, Max=57311, Min=220, Avg=2102.59, 90=3795, 99=6995, 99.9=11767, 99.99=52191] [UPDATE: Count=96177, Max=53375, Min=307, Avg=1507.87, 90=2455, 99=3565, 99.9=10463, 99.99=51135] 
2023-03-07 15:14:19:291 470 sec: 90488944 operations; 192713.5 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1831184, Max=54751, Min=223, Avg=2103.73, 90=3797, 99=6991, 99.9=12471, 99.99=29583] [UPDATE: Count=95952, Max=29647, Min=314, Avg=1507.31, 90=2447, 99=3557, 99.9=10671, 99.99=28463] 
2023-03-07 15:14:29:291 480 sec: 92413673 operations; 192472.9 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1828902, Max=33087, Min=214, Avg=2106.61, 90=3819, 99=7059, 99.9=12991, 99.99=27359] [UPDATE: Count=95817, Max=27775, Min=318, Avg=1505.32, 90=2451, 99=3503, 99.9=11647, 99.99=26383] 
2023-03-07 15:14:39:291 490 sec: 94328118 operations; 191444.5 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1818372, Max=63615, Min=221, Avg=2118.43, 90=3843, 99=7143, 99.9=13479, 99.99=30943] [UPDATE: Count=96060, Max=34143, Min=325, Avg=1509.06, 90=2455, 99=3563, 99.9=11599, 99.99=25567] 
2023-03-07 15:14:49:291 500 sec: 96249209 operations; 192109.1 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1825079, Max=47679, Min=210, Avg=2111.19, 90=3823, 99=7107, 99.9=12495, 99.99=24783] [UPDATE: Count=96025, Max=24271, Min=314, Avg=1500.45, 90=2443, 99=3555, 99.9=10983, 99.99=21951] 
2023-03-07 15:14:59:291 510 sec: 98181623 operations; 193241.4 current ops/sec; est completion in 1 hour 18 minutes [READ: Count=1835833, Max=30623, Min=207, Avg=2097.89, 90=3803, 99=6979, 99.9=12183, 99.99=25791] [UPDATE: Count=96586, Max=25951, Min=310, Avg=1507.16, 90=2453, 99=3591, 99.9=11079, 99.99=15127] 
2023-03-07 15:15:09:291 520 sec: 100114017 operations; 193239.4 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1835748, Max=51455, Min=216, Avg=2097.76, 90=3779, 99=6975, 99.9=12751, 99.99=24127] [UPDATE: Count=96644, Max=24639, Min=329, Avg=1510.96, 90=2459, 99=3577, 99.9=11735, 99.99=16511] 
2023-03-07 15:15:19:291 530 sec: 102034597 operations; 192058 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1823995, Max=51199, Min=218, Avg=2111.43, 90=3821, 99=7119, 99.9=12767, 99.99=28591] [UPDATE: Count=96585, Max=28399, Min=307, Avg=1510.56, 90=2447, 99=3531, 99.9=11263, 99.99=26767] 
2023-03-07 15:15:29:291 540 sec: 103963367 operations; 192877 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1832997, Max=37727, Min=222, Avg=2101.09, 90=3787, 99=6971, 99.9=12271, 99.99=31791] [UPDATE: Count=95786, Max=32383, Min=318, Avg=1521.05, 90=2467, 99=3613, 99.9=10799, 99.99=30767] 
2023-03-07 15:15:39:291 550 sec: 105869133 operations; 190576.6 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1810581, Max=57439, Min=221, Avg=2128.3, 90=3847, 99=7143, 99.9=13519, 99.99=51199] [UPDATE: Count=95172, Max=51551, Min=311, Avg=1508.44, 90=2445, 99=3589, 99.9=10559, 99.99=49951] 
2023-03-07 15:15:49:291 560 sec: 107793579 operations; 192444.6 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1828281, Max=43071, Min=222, Avg=2106.57, 90=3809, 99=7055, 99.9=14135, 99.99=21711] [UPDATE: Count=96174, Max=34239, Min=322, Avg=1514.4, 90=2465, 99=3643, 99.9=11391, 99.99=18191] 
2023-03-07 15:15:59:291 570 sec: 109731937 operations; 193835.8 current ops/sec; est completion in 1 hour 17 minutes [READ: Count=1841114, Max=24175, Min=223, Avg=2092.11, 90=3809, 99=6899, 99.9=11071, 99.99=15543] [UPDATE: Count=97262, Max=16103, Min=293, Avg=1494.04, 90=2443, 99=3507, 99.9=9343, 99.99=14391] 
2023-03-07 15:16:09:291 580 sec: 111652721 operations; 192078.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1824287, Max=60447, Min=208, Avg=2111.36, 90=3821, 99=7031, 99.9=13679, 99.99=27119] [UPDATE: Count=96471, Max=24991, Min=315, Avg=1505.61, 90=2455, 99=3593, 99.9=10927, 99.99=23759] 
2023-03-07 15:16:19:291 590 sec: 113582135 operations; 192941.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1832095, Max=65151, Min=219, Avg=2101.26, 90=3805, 99=7031, 99.9=12791, 99.99=26175] [UPDATE: Count=97262, Max=22943, Min=318, Avg=1507.23, 90=2453, 99=3567, 99.9=11159, 99.99=18975] 
2023-03-07 15:16:29:291 600 sec: 115491395 operations; 190926 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1813774, Max=41119, Min=217, Avg=2124.03, 90=3837, 99=7167, 99.9=14175, 99.99=36703] [UPDATE: Count=95544, Max=37343, Min=307, Avg=1520.65, 90=2465, 99=3635, 99.9=11135, 99.99=36063] 
2023-03-07 15:16:39:291 610 sec: 117411539 operations; 192014.4 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1823855, Max=54687, Min=220, Avg=2111.53, 90=3815, 99=7083, 99.9=14823, 99.99=26511] [UPDATE: Count=96291, Max=26735, Min=327, Avg=1515.02, 90=2455, 99=3629, 99.9=12951, 99.99=23327] 
2023-03-07 15:16:49:291 620 sec: 119334360 operations; 192282.1 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1826259, Max=58911, Min=226, Avg=2109.15, 90=3815, 99=7043, 99.9=13519, 99.99=28031] [UPDATE: Count=96560, Max=23439, Min=303, Avg=1504.33, 90=2447, 99=3579, 99.9=10607, 99.99=15999] 
2023-03-07 15:16:59:291 630 sec: 121269118 operations; 193475.8 current ops/sec; est completion in 1 hour 16 minutes [READ: Count=1838097, Max=19663, Min=223, Avg=2095.66, 90=3807, 99=6975, 99.9=11447, 99.99=14871] [UPDATE: Count=96657, Max=15895, Min=322, Avg=1498.72, 90=2451, 99=3591, 99.9=10343, 99.99=13375] 
2023-03-07 15:17:09:292 640 sec: 123180235 operations; 191111.7 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1815898, Max=55359, Min=212, Avg=2121.96, 90=3847, 99=7143, 99.9=14431, 99.99=25887] [UPDATE: Count=95377, Max=26415, Min=311, Avg=1511.5, 90=2455, 99=3615, 99.9=11495, 99.99=18383] 
2023-03-07 15:17:19:291 650 sec: 125108063 operations; 192782.8 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1831218, Max=60639, Min=221, Avg=2103.22, 90=3811, 99=7011, 99.9=11911, 99.99=27135] [UPDATE: Count=96467, Max=26639, Min=319, Avg=1505.45, 90=2451, 99=3625, 99.9=9887, 99.99=24159] 
2023-03-07 15:17:29:291 660 sec: 127033535 operations; 192547.2 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1829290, Max=22543, Min=221, Avg=2105.41, 90=3825, 99=7003, 99.9=11727, 99.99=18271] [UPDATE: Count=96196, Max=18655, Min=315, Avg=1513.45, 90=2455, 99=3617, 99.9=10319, 99.99=17375] 
2023-03-07 15:17:39:291 670 sec: 128948898 operations; 191536.3 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1820421, Max=47007, Min=218, Avg=2117.24, 90=3845, 99=7059, 99.9=11567, 99.99=29743] [UPDATE: Count=94923, Max=31615, Min=323, Avg=1504.67, 90=2449, 99=3511, 99.9=10479, 99.99=28047] 
2023-03-07 15:17:49:291 680 sec: 130871614 operations; 192271.6 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1826813, Max=52511, Min=215, Avg=2109.04, 90=3835, 99=7139, 99.9=12159, 99.99=23087] [UPDATE: Count=95951, Max=23807, Min=322, Avg=1505, 90=2455, 99=3533, 99.9=10767, 99.99=19359] 
2023-03-07 15:17:59:291 690 sec: 132811442 operations; 193982.8 current ops/sec; est completion in 1 hour 15 minutes [READ: Count=1842242, Max=18255, Min=218, Avg=2090.21, 90=3791, 99=6979, 99.9=10927, 99.99=14711] [UPDATE: Count=97527, Max=15055, Min=326, Avg=1498.58, 90=2447, 99=3531, 99.9=9767, 99.99=13439] 
2023-03-07 15:18:09:291 700 sec: 134736061 operations; 192461.9 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1828401, Max=51519, Min=221, Avg=2106.42, 90=3825, 99=7019, 99.9=12391, 99.99=24063] [UPDATE: Count=96227, Max=24991, Min=325, Avg=1512.19, 90=2455, 99=3617, 99.9=10847, 99.99=16247] 
2023-03-07 15:18:19:291 710 sec: 136641514 operations; 190545.3 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1810109, Max=53823, Min=218, Avg=2128.54, 90=3847, 99=7179, 99.9=14295, 99.99=49535] [UPDATE: Count=95332, Max=51263, Min=324, Avg=1513.48, 90=2443, 99=3573, 99.9=11855, 99.99=49247] 
2023-03-07 15:18:29:291 720 sec: 138559429 operations; 191791.5 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1822055, Max=31583, Min=218, Avg=2113.77, 90=3821, 99=7051, 99.9=15031, 99.99=25695] [UPDATE: Count=95863, Max=27007, Min=316, Avg=1519.92, 90=2459, 99=3645, 99.9=12551, 99.99=25647] 
2023-03-07 15:18:39:291 730 sec: 140479936 operations; 192050.7 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1824292, Max=64447, Min=214, Avg=2111.49, 90=3827, 99=7115, 99.9=12727, 99.99=24975] [UPDATE: Count=96231, Max=25695, Min=326, Avg=1506.76, 90=2457, 99=3553, 99.9=10567, 99.99=17423] 
2023-03-07 15:18:49:291 740 sec: 142404225 operations; 192428.9 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1828413, Max=28495, Min=211, Avg=2107.3, 90=3819, 99=7011, 99.9=12959, 99.99=21599] [UPDATE: Count=95869, Max=21599, Min=307, Avg=1503.77, 90=2453, 99=3575, 99.9=11423, 99.99=20031] 
2023-03-07 15:18:59:291 750 sec: 144318843 operations; 191461.8 current ops/sec; est completion in 1 hour 14 minutes [READ: Count=1818935, Max=49663, Min=220, Avg=2117.96, 90=3823, 99=7139, 99.9=13855, 99.99=32287] [UPDATE: Count=95672, Max=32367, Min=323, Avg=1510.22, 90=2457, 99=3697, 99.9=10575, 99.99=31167] 
2023-03-07 15:19:09:291 760 sec: 146227489 operations; 190864.6 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1813078, Max=48383, Min=220, Avg=2124.88, 90=3849, 99=7223, 99.9=15839, 99.99=25327] [UPDATE: Count=95594, Max=24655, Min=327, Avg=1511.29, 90=2449, 99=3595, 99.9=13831, 99.99=22127] 
2023-03-07 15:19:19:291 770 sec: 148146005 operations; 191851.6 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1822499, Max=34527, Min=215, Avg=2113.63, 90=3827, 99=7131, 99.9=13079, 99.99=25455] [UPDATE: Count=96002, Max=27375, Min=310, Avg=1510.12, 90=2463, 99=3599, 99.9=11039, 99.99=24495] 
2023-03-07 15:19:29:291 780 sec: 150077386 operations; 193138.1 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1834738, Max=48319, Min=209, Avg=2099.46, 90=3793, 99=6943, 99.9=12071, 99.99=24703] [UPDATE: Count=96658, Max=25791, Min=321, Avg=1501.64, 90=2445, 99=3515, 99.9=10495, 99.99=22271] 
2023-03-07 15:19:39:294 790 sec: 152005505 operations; 192754.07 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1832131, Max=64959, Min=209, Avg=2102.99, 90=3815, 99=7015, 99.9=11847, 99.99=23919] [UPDATE: Count=95988, Max=45247, Min=314, Avg=1493.4, 90=2431, 99=3527, 99.9=10047, 99.99=21055] 
2023-03-07 15:19:49:291 800 sec: 153923797 operations; 191886.77 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1822593, Max=51295, Min=211, Avg=2114.23, 90=3827, 99=7087, 99.9=13039, 99.99=27647] [UPDATE: Count=95707, Max=25791, Min=321, Avg=1508.92, 90=2445, 99=3593, 99.9=11127, 99.99=24047] 
2023-03-07 15:19:59:291 810 sec: 155840653 operations; 191685.6 current ops/sec; est completion in 1 hour 13 minutes [READ: Count=1821216, Max=30239, Min=211, Avg=2115.7, 90=3841, 99=7099, 99.9=13287, 99.99=23551] [UPDATE: Count=95633, Max=24191, Min=330, Avg=1504.44, 90=2447, 99=3565, 99.9=10551, 99.99=17455] 
2023-03-07 15:20:09:291 820 sec: 157764253 operations; 192360 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1827438, Max=52127, Min=220, Avg=2108.14, 90=3797, 99=7063, 99.9=14351, 99.99=26159] [UPDATE: Count=96182, Max=34015, Min=310, Avg=1503.63, 90=2447, 99=3589, 99.9=13007, 99.99=21327] 
2023-03-07 15:20:19:291 830 sec: 159685276 operations; 192102.3 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1824934, Max=62751, Min=220, Avg=2110.23, 90=3785, 99=7107, 99.9=16991, 99.99=30975] [UPDATE: Count=96046, Max=31631, Min=312, Avg=1518.58, 90=2457, 99=3587, 99.9=13271, 99.99=29439] 
2023-03-07 15:20:29:291 840 sec: 161604029 operations; 191875.3 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1822220, Max=41503, Min=220, Avg=2113.56, 90=3827, 99=7003, 99.9=12823, 99.99=33439] [UPDATE: Count=96540, Max=33695, Min=320, Avg=1508.94, 90=2453, 99=3521, 99.9=11183, 99.99=32671] 
2023-03-07 15:20:39:291 850 sec: 163541292 operations; 193726.3 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1840663, Max=68095, Min=217, Avg=2092.05, 90=3773, 99=6899, 99.9=11175, 99.99=22895] [UPDATE: Count=96629, Max=32223, Min=321, Avg=1514.76, 90=2469, 99=3621, 99.9=9751, 99.99=15575] 
2023-03-07 15:20:49:291 860 sec: 165472593 operations; 193130.1 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1834778, Max=43071, Min=222, Avg=2098.68, 90=3765, 99=7051, 99.9=13111, 99.99=26015] [UPDATE: Count=96493, Max=34623, Min=314, Avg=1516.85, 90=2461, 99=3643, 99.9=11119, 99.99=24879] 
2023-03-07 15:20:59:296 870 sec: 167403583 operations; 193002.5 current ops/sec; est completion in 1 hour 12 minutes [READ: Count=1834825, Max=24367, Min=219, Avg=2098.54, 90=3761, 99=7059, 99.9=12751, 99.99=19423] [UPDATE: Count=96179, Max=21327, Min=327, Avg=1526, 90=2471, 99=3735, 99.9=11175, 99.99=18671] 
2023-03-07 15:21:09:291 880 sec: 169337177 operations; 193456.13 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1836855, Max=50687, Min=218, Avg=2096.17, 90=3753, 99=6931, 99.9=11847, 99.99=24879] [UPDATE: Count=96753, Max=25023, Min=320, Avg=1515.46, 90=2461, 99=3705, 99.9=10583, 99.99=22591] 
2023-03-07 15:21:19:291 890 sec: 171277109 operations; 193993.2 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1842621, Max=22463, Min=213, Avg=2089.2, 90=3761, 99=6823, 99.9=12215, 99.99=15615] [UPDATE: Count=97289, Max=16447, Min=304, Avg=1513.9, 90=2475, 99=3593, 99.9=10975, 99.99=13751] 
2023-03-07 15:21:29:291 900 sec: 173204831 operations; 192772.2 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1831312, Max=53183, Min=220, Avg=2102.56, 90=3765, 99=6955, 99.9=14503, 99.99=48543] [UPDATE: Count=96379, Max=49343, Min=295, Avg=1519.87, 90=2465, 99=3597, 99.9=12199, 99.99=47775] 
2023-03-07 15:21:39:291 910 sec: 175140767 operations; 193593.6 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1839458, Max=65791, Min=215, Avg=2093.49, 90=3761, 99=6975, 99.9=12183, 99.99=25823] [UPDATE: Count=96497, Max=36543, Min=328, Avg=1515.51, 90=2457, 99=3591, 99.9=10743, 99.99=21775] 
2023-03-07 15:21:49:291 920 sec: 177073121 operations; 193235.4 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1835825, Max=67135, Min=219, Avg=2097.41, 90=3775, 99=6971, 99.9=13159, 99.99=24239] [UPDATE: Count=96519, Max=23231, Min=324, Avg=1515.13, 90=2463, 99=3611, 99.9=11511, 99.99=16751] 
2023-03-07 15:21:59:291 930 sec: 179015818 operations; 194269.7 current ops/sec; est completion in 1 hour 11 minutes [READ: Count=1845798, Max=34047, Min=218, Avg=2086.82, 90=3767, 99=6819, 99.9=10439, 99.99=14071] [UPDATE: Count=96897, Max=13863, Min=315, Avg=1501.35, 90=2461, 99=3541, 99.9=9135, 99.99=11847] 
2023-03-07 15:22:09:291 940 sec: 180957465 operations; 194164.7 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1845001, Max=57791, Min=221, Avg=2087.02, 90=3757, 99=6811, 99.9=12119, 99.99=25071] [UPDATE: Count=96645, Max=23215, Min=316, Avg=1514.77, 90=2465, 99=3627, 99.9=10319, 99.99=16079] 
2023-03-07 15:22:19:291 950 sec: 182904154 operations; 194668.9 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1849742, Max=45599, Min=229, Avg=2081.03, 90=3717, 99=6819, 99.9=12903, 99.99=29743] [UPDATE: Count=96974, Max=31471, Min=314, Avg=1520.86, 90=2467, 99=3659, 99.9=11431, 99.99=29167] 
2023-03-07 15:22:29:291 960 sec: 184851518 operations; 194736.4 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1849784, Max=30095, Min=222, Avg=2080.42, 90=3699, 99=6763, 99.9=13967, 99.99=25967] [UPDATE: Count=97575, Max=27439, Min=317, Avg=1524.99, 90=2475, 99=3627, 99.9=11615, 99.99=23647] 
2023-03-07 15:22:39:291 970 sec: 186771208 operations; 191969 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1824645, Max=76799, Min=226, Avg=2110.14, 90=3719, 99=7127, 99.9=16511, 99.99=47807] [UPDATE: Count=95035, Max=49151, Min=324, Avg=1544.77, 90=2479, 99=3801, 99.9=14159, 99.99=46591] 
2023-03-07 15:22:49:291 980 sec: 188729736 operations; 195852.8 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1860060, Max=27679, Min=216, Avg=2068.01, 90=3677, 99=6643, 99.9=12711, 99.99=21583] [UPDATE: Count=98481, Max=22783, Min=312, Avg=1527.09, 90=2475, 99=3685, 99.9=11543, 99.99=21647] 
2023-03-07 15:22:59:291 990 sec: 190680531 operations; 195079.5 current ops/sec; est completion in 1 hour 10 minutes [READ: Count=1854042, Max=46879, Min=224, Avg=2076.28, 90=3703, 99=6743, 99.9=13391, 99.99=23455] [UPDATE: Count=96735, Max=23103, Min=297, Avg=1524.44, 90=2479, 99=3639, 99.9=10687, 99.99=20831] 
2023-03-07 15:23:09:291 1000 sec: 192642168 operations; 196163.7 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1863534, Max=53311, Min=225, Avg=2064.06, 90=3657, 99=6687, 99.9=12951, 99.99=22815] [UPDATE: Count=98105, Max=24207, Min=324, Avg=1534.62, 90=2489, 99=3785, 99.9=11607, 99.99=17647] 
2023-03-07 15:23:19:291 1010 sec: 194606057 operations; 196388.9 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1865568, Max=37631, Min=224, Avg=2061.66, 90=3671, 99=6607, 99.9=11279, 99.99=21407] [UPDATE: Count=98312, Max=22623, Min=328, Avg=1530.9, 90=2493, 99=3733, 99.9=10023, 99.99=14799] 
2023-03-07 15:23:29:291 1020 sec: 196588777 operations; 198272 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1883244, Max=51839, Min=213, Avg=2041.11, 90=3603, 99=6607, 99.9=11039, 99.99=16223] [UPDATE: Count=99499, Max=17359, Min=330, Avg=1541.03, 90=2513, 99=3745, 99.9=9527, 99.99=15383] 
2023-03-07 15:23:39:291 1030 sec: 198566753 operations; 197797.6 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1879078, Max=58623, Min=215, Avg=2043.95, 90=3625, 99=6735, 99.9=12791, 99.99=21887] [UPDATE: Count=98910, Max=24287, Min=316, Avg=1579.75, 90=2561, 99=3987, 99.9=11575, 99.99=19423] 
2023-03-07 15:23:49:291 1040 sec: 200541118 operations; 197436.5 current ops/sec; est completion in 1 hour 9 minutes [READ: Count=1875889, Max=47039, Min=217, Avg=2047.46, 90=3599, 99=6747, 99.9=14231, 99.99=30511] [UPDATE: Count=98432, Max=31215, Min=313, Avg=1584.47, 90=2559, 99=3901, 99.9=11935, 99.99=29407] 
2023-03-07 15:23:59:291 1050 sec: 202558505 operations; 201738.7 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=1916653, Max=51839, Min=219, Avg=1999.88, 90=3487, 99=6311, 99.9=14775, 99.99=46687] [UPDATE: Count=100749, Max=48127, Min=314, Avg=1627.79, 90=2607, 99=4179, 99.9=12407, 99.99=45919] 
2023-03-07 15:24:09:291 1060 sec: 204615402 operations; 205689.7 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=1954266, Max=99647, Min=223, Avg=1961.43, 90=3423, 99=6811, 99.9=15071, 99.99=93759] [UPDATE: Count=102633, Max=95295, Min=329, Avg=1595.08, 90=2601, 99=4455, 99.9=13479, 99.99=92863] 
2023-03-07 15:24:19:291 1070 sec: 206721471 operations; 210606.9 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=2000932, Max=30815, Min=224, Avg=1912.77, 90=3385, 99=6667, 99.9=12575, 99.99=23951] [UPDATE: Count=105104, Max=25167, Min=311, Avg=1573.54, 90=2623, 99=4731, 99.9=11063, 99.99=22511] 
2023-03-07 15:24:29:291 1080 sec: 208814774 operations; 209330.3 current ops/sec; est completion in 1 hour 8 minutes [READ: Count=1988987, Max=44703, Min=221, Avg=1928.28, 90=3413, 99=6931, 99.9=14543, 99.99=39455] [UPDATE: Count=104352, Max=40895, Min=319, Avg=1583.04, 90=2615, 99=4839, 99.9=13239, 99.99=33151] 
2023-03-07 15:24:39:291 1090 sec: 210920592 operations; 210581.8 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=2000249, Max=49279, Min=210, Avg=1914.94, 90=3389, 99=6895, 99.9=13487, 99.99=22719] [UPDATE: Count=105560, Max=37439, Min=324, Avg=1577.92, 90=2615, 99=4819, 99.9=12119, 99.99=17519] 
2023-03-07 15:24:49:291 1100 sec: 213015828 operations; 209523.6 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=1990617, Max=52255, Min=208, Avg=1924.81, 90=3387, 99=7019, 99.9=16703, 99.99=26943] [UPDATE: Count=104623, Max=26095, Min=282, Avg=1580.86, 90=2615, 99=4879, 99.9=15327, 99.99=24815] 
2023-03-07 15:24:59:291 1110 sec: 215124549 operations; 210872.1 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=2003071, Max=32175, Min=221, Avg=1912.21, 90=3389, 99=6543, 99.9=14631, 99.99=28111] [UPDATE: Count=105653, Max=29519, Min=315, Avg=1574.97, 90=2619, 99=4615, 99.9=14159, 99.99=27615] 
2023-03-07 15:25:09:291 1120 sec: 217223457 operations; 209890.8 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=1993873, Max=44191, Min=221, Avg=1921.16, 90=3377, 99=6967, 99.9=13759, 99.99=26671] [UPDATE: Count=105023, Max=29775, Min=312, Avg=1583.14, 90=2619, 99=4939, 99.9=12663, 99.99=24863] 
2023-03-07 15:25:19:291 1130 sec: 219321971 operations; 209851.4 current ops/sec; est completion in 1 hour 7 minutes [READ: Count=1993711, Max=53887, Min=217, Avg=1921.51, 90=3379, 99=6923, 99.9=13543, 99.99=49439] [UPDATE: Count=104811, Max=50495, Min=308, Avg=1582.5, 90=2631, 99=4959, 99.9=11623, 99.99=23279] 
2023-03-07 15:25:29:291 1140 sec: 221424187 operations; 210221.6 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1996744, Max=36799, Min=212, Avg=1918.2, 90=3393, 99=6879, 99.9=11831, 99.99=30623] [UPDATE: Count=105525, Max=31855, Min=306, Avg=1580.41, 90=2619, 99=4775, 99.9=10999, 99.99=30479] 
2023-03-07 15:25:39:291 1150 sec: 223507348 operations; 208316.1 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1978791, Max=65855, Min=217, Avg=1935.57, 90=3405, 99=6939, 99.9=16511, 99.99=51007] [UPDATE: Count=104338, Max=58271, Min=316, Avg=1597.86, 90=2613, 99=5007, 99.9=15399, 99.99=50399] 
2023-03-07 15:25:49:291 1160 sec: 225615239 operations; 210789.1 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=2002353, Max=37695, Min=206, Avg=1912.78, 90=3359, 99=6867, 99.9=13599, 99.99=25055] [UPDATE: Count=105538, Max=28559, Min=324, Avg=1580.11, 90=2633, 99=4807, 99.9=12687, 99.99=23647] 
2023-03-07 15:25:59:291 1170 sec: 227706570 operations; 209133.1 current ops/sec; est completion in 1 hour 6 minutes [READ: Count=1987048, Max=42111, Min=215, Avg=1927.72, 90=3363, 99=6951, 99.9=15239, 99.99=36959] [UPDATE: Count=104280, Max=37887, Min=323, Avg=1594.37, 90=2635, 99=4959, 99.9=13351, 99.99=31087] 
2023-03-07 15:26:09:291 1180 sec: 229807512 operations; 210094.2 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=1995543, Max=41439, Min=219, Avg=1918.9, 90=3381, 99=6827, 99.9=15055, 99.99=24207] [UPDATE: Count=105418, Max=29503, Min=328, Avg=1589.99, 90=2627, 99=4919, 99.9=14383, 99.99=23391] 
2023-03-07 15:26:19:291 1190 sec: 231918575 operations; 211106.3 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=2005405, Max=49759, Min=215, Avg=1909.49, 90=3363, 99=6779, 99.9=12559, 99.99=41823] [UPDATE: Count=105618, Max=47647, Min=303, Avg=1579.02, 90=2623, 99=4771, 99.9=11959, 99.99=41375] 
2023-03-07 15:26:29:291 1200 sec: 234034525 operations; 211595 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=2009877, Max=35679, Min=212, Avg=1905.96, 90=3395, 99=6951, 99.9=14359, 99.99=24511] [UPDATE: Count=106075, Max=26031, Min=317, Avg=1570.63, 90=2631, 99=4995, 99.9=13407, 99.99=23983] 
2023-03-07 15:26:39:291 1210 sec: 236167947 operations; 213342.2 current ops/sec; est completion in 1 hour 5 minutes [READ: Count=2026544, Max=58367, Min=216, Avg=1889.54, 90=3395, 99=7275, 99.9=15215, 99.99=23247] [UPDATE: Count=106866, Max=47775, Min=315, Avg=1567.68, 90=2661, 99=5427, 99.9=14575, 99.99=20351] 
2023-03-07 15:26:49:291 1220 sec: 238309762 operations; 214181.5 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=2034984, Max=48607, Min=221, Avg=1882.49, 90=3427, 99=7235, 99.9=16703, 99.99=40479] [UPDATE: Count=106843, Max=43391, Min=300, Avg=1552.34, 90=2685, 99=5287, 99.9=13807, 99.99=36447] 
2023-03-07 15:26:59:291 1230 sec: 240461628 operations; 215186.6 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=2044335, Max=33887, Min=205, Avg=1873.53, 90=3445, 99=7323, 99.9=14439, 99.99=25183] [UPDATE: Count=107526, Max=26463, Min=310, Avg=1548.72, 90=2673, 99=5647, 99.9=13407, 99.99=24991] 
2023-03-07 15:27:09:291 1240 sec: 242601077 operations; 213944.9 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=2032741, Max=55679, Min=207, Avg=1884.33, 90=3469, 99=7347, 99.9=15431, 99.99=29919] [UPDATE: Count=106717, Max=33791, Min=293, Avg=1559.11, 90=2681, 99=5559, 99.9=14287, 99.99=25471] 
2023-03-07 15:27:19:291 1250 sec: 244736023 operations; 213494.6 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=2027770, Max=35711, Min=203, Avg=1887.99, 90=3471, 99=7375, 99.9=15543, 99.99=31263] [UPDATE: Count=107170, Max=32863, Min=309, Avg=1570.05, 90=2703, 99=5735, 99.9=14703, 99.99=30975] 
2023-03-07 15:27:29:291 1260 sec: 246871418 operations; 213539.5 current ops/sec; est completion in 1 hour 4 minutes [READ: Count=2029010, Max=54271, Min=220, Avg=1887.95, 90=3449, 99=7419, 99.9=15671, 99.99=46943] [UPDATE: Count=106398, Max=49247, Min=307, Avg=1561.98, 90=2687, 99=5503, 99.9=14215, 99.99=45535] 
2023-03-07 15:27:39:291 1270 sec: 249009387 operations; 213796.9 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=2030795, Max=41343, Min=217, Avg=1885.52, 90=3453, 99=7455, 99.9=15647, 99.99=26719] [UPDATE: Count=107159, Max=28063, Min=315, Avg=1562.18, 90=2693, 99=5671, 99.9=14135, 99.99=25631] 
2023-03-07 15:27:49:291 1280 sec: 251148129 operations; 213874.2 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=2031652, Max=29087, Min=211, Avg=1884.46, 90=3453, 99=7503, 99.9=15767, 99.99=19887] [UPDATE: Count=107086, Max=28623, Min=295, Avg=1571.78, 90=2703, 99=5791, 99.9=15575, 99.99=19471] 
2023-03-07 15:27:59:291 1290 sec: 253295655 operations; 214752.6 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=2040189, Max=45695, Min=222, Avg=1876.69, 90=3455, 99=7371, 99.9=13983, 99.99=22527] [UPDATE: Count=107351, Max=42751, Min=308, Avg=1563.44, 90=2707, 99=5683, 99.9=13063, 99.99=21855] 
2023-03-07 15:28:09:291 1300 sec: 255422037 operations; 212638.2 current ops/sec; est completion in 1 hour 3 minutes [READ: Count=2019557, Max=56383, Min=209, Avg=1895.67, 90=3451, 99=7511, 99.9=16127, 99.99=48031] [UPDATE: Count=106817, Max=53567, Min=324, Avg=1576.46, 90=2699, 99=5971, 99.9=15639, 99.99=47423] 
2023-03-07 15:28:19:291 1310 sec: 257577150 operations; 215511.3 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=2047116, Max=41791, Min=217, Avg=1870.37, 90=3427, 99=7283, 99.9=13351, 99.99=32863] [UPDATE: Count=107988, Max=35871, Min=311, Avg=1554.57, 90=2685, 99=5515, 99.9=12439, 99.99=31807] 
2023-03-07 15:28:29:291 1320 sec: 259715197 operations; 213804.7 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=2030927, Max=54815, Min=221, Avg=1885.64, 90=3431, 99=7531, 99.9=15583, 99.99=41503] [UPDATE: Count=107115, Max=43679, Min=316, Avg=1559.23, 90=2675, 99=5787, 99.9=14471, 99.99=39775] 
2023-03-07 15:28:39:291 1330 sec: 261861471 operations; 214627.4 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=2038603, Max=43455, Min=215, Avg=1878.46, 90=3445, 99=7243, 99.9=15215, 99.99=22799] [UPDATE: Count=107678, Max=26143, Min=319, Avg=1553.35, 90=2679, 99=5439, 99.9=14343, 99.99=20719] 
2023-03-07 15:28:49:291 1340 sec: 264018549 operations; 215707.8 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=2049159, Max=42655, Min=207, Avg=1867.77, 90=3399, 99=7387, 99.9=14735, 99.99=21567] [UPDATE: Count=107919, Max=36383, Min=294, Avg=1568.81, 90=2709, 99=5835, 99.9=13991, 99.99=20831] 
2023-03-07 15:28:59:291 1350 sec: 266182913 operations; 216436.4 current ops/sec; est completion in 1 hour 2 minutes [READ: Count=2056595, Max=42815, Min=208, Avg=1861.05, 90=3381, 99=7291, 99.9=13863, 99.99=24207] [UPDATE: Count=107786, Max=24527, Min=266, Avg=1572.45, 90=2721, 99=5711, 99.9=13231, 99.99=22351] 
2023-03-07 15:29:09:291 1360 sec: 268338626 operations; 215571.3 current ops/sec; est completion in 1 hour 1 minute [READ: Count=2048026, Max=41471, Min=213, Avg=1868.41, 90=3387, 99=7443, 99.9=14359, 99.99=30495] [UPDATE: Count=107676, Max=33791, Min=308, Avg=1579.73, 90=2717, 99=5839, 99.9=14087, 99.99=30383] 
2023-03-07 15:29:19:291 1370 sec: 270480671 operations; 214204.5 current ops/sec; est completion in 1 hour 1 minute [READ: Count=2034832, Max=38751, Min=219, Avg=1880.77, 90=3423, 99=7527, 99.9=14807, 99.99=32703] [UPDATE: Count=107231, Max=35647, Min=299, Avg=1581.63, 90=2715, 99=6015, 99.9=13351, 99.99=32799] 
2023-03-07 15:29:29:291 1380 sec: 272632729 operations; 215205.8 current ops/sec; est completion in 1 hour 1 minute [READ: Count=2044952, Max=44831, Min=215, Avg=1871.93, 90=3411, 99=7427, 99.9=14791, 99.99=22783] [UPDATE: Count=107093, Max=24367, Min=306, Avg=1574.54, 90=2719, 99=5799, 99.9=14015, 99.99=19663] 
2023-03-07 15:29:39:291 1390 sec: 274781718 operations; 214898.9 current ops/sec; est completion in 1 hour 1 minute [READ: Count=2042219, Max=45759, Min=220, Avg=1874.94, 90=3389, 99=7451, 99.9=16079, 99.99=36927] [UPDATE: Count=106768, Max=38783, Min=315, Avg=1570.91, 90=2713, 99=5871, 99.9=13575, 99.99=36095] 
2023-03-07 15:29:49:291 1400 sec: 276917061 operations; 213534.3 current ops/sec; est completion in 1 hour [READ: Count=2028779, Max=40063, Min=210, Avg=1886.85, 90=3423, 99=7639, 99.9=16799, 99.99=21871] [UPDATE: Count=106554, Max=23135, Min=314, Avg=1582.18, 90=2713, 99=5915, 99.9=15711, 99.99=21551] 
2023-03-07 15:29:59:291 1410 sec: 279048688 operations; 213162.7 current ops/sec; est completion in 1 hour [READ: Count=2024635, Max=59583, Min=209, Avg=1890.17, 90=3419, 99=7407, 99.9=16591, 99.99=53311] [UPDATE: Count=107004, Max=56351, Min=316, Avg=1588.14, 90=2721, 99=5943, 99.9=15375, 99.99=52895] 
2023-03-07 15:30:09:291 1420 sec: 281188820 operations; 214013.2 current ops/sec; est completion in 1 hour [READ: Count=2033344, Max=46015, Min=218, Avg=1881.43, 90=3377, 99=7535, 99.9=15591, 99.99=37311] [UPDATE: Count=106796, Max=38623, Min=310, Avg=1602.69, 90=2757, 99=6003, 99.9=14423, 99.99=36479] 
2023-03-07 15:30:19:291 1430 sec: 283381988 operations; 219316.8 current ops/sec; est completion in 1 hour [READ: Count=2083247, Max=55167, Min=219, Avg=1831.55, 90=3213, 99=7043, 99.9=15695, 99.99=45695] [UPDATE: Count=109903, Max=46623, Min=303, Avg=1645.06, 90=2831, 99=6263, 99.9=15071, 99.99=45375] 
2023-03-07 15:30:29:291 1440 sec: 285613719 operations; 223173.1 current ops/sec; est completion in 1 hour [READ: Count=2119620, Max=44223, Min=217, Avg=1795.97, 90=3191, 99=7387, 99.9=15575, 99.99=25855] [UPDATE: Count=112120, Max=32095, Min=296, Avg=1694.54, 90=2891, 99=6911, 99.9=14599, 99.99=24591] 
2023-03-07 15:30:39:291 1450 sec: 287854165 operations; 224044.6 current ops/sec; est completion in 59 minutes [READ: Count=2128597, Max=48959, Min=215, Avg=1787.92, 90=3105, 99=8155, 99.9=16783, 99.99=36127] [UPDATE: Count=111839, Max=42495, Min=314, Avg=1705.65, 90=2915, 99=7655, 99.9=16111, 99.99=36095] 
2023-03-07 15:30:49:291 1460 sec: 290103718 operations; 224955.3 current ops/sec; est completion in 59 minutes [READ: Count=2137101, Max=35199, Min=220, Avg=1780.76, 90=3081, 99=8415, 99.9=16263, 99.99=25759] [UPDATE: Count=112453, Max=28943, Min=308, Avg=1696.23, 90=2961, 99=7879, 99.9=15383, 99.99=25119] 
2023-03-07 15:30:59:291 1470 sec: 292349763 operations; 224604.5 current ops/sec; est completion in 59 minutes [READ: Count=2133407, Max=57951, Min=217, Avg=1783.48, 90=3087, 99=8231, 99.9=17679, 99.99=48991] [UPDATE: Count=112600, Max=51007, Min=311, Avg=1699.69, 90=2971, 99=7707, 99.9=16039, 99.99=35807] 
2023-03-07 15:31:09:291 1480 sec: 294578743 operations; 222898 current ops/sec; est completion in 59 minutes [READ: Count=2116850, Max=93695, Min=224, Avg=1797.7, 90=3029, 99=8799, 99.9=21375, 99.99=85247] [UPDATE: Count=112185, Max=93823, Min=297, Avg=1706.62, 90=2969, 99=8031, 99.9=17551, 99.99=84607] 
2023-03-07 15:31:19:291 1490 sec: 296820525 operations; 224178.2 current ops/sec; est completion in 58 minutes [READ: Count=2129502, Max=59519, Min=219, Avg=1786.47, 90=3025, 99=8999, 99.9=16895, 99.99=52991] [UPDATE: Count=112270, Max=55007, Min=309, Avg=1706.74, 90=2997, 99=8559, 99.9=16071, 99.99=48767] 
2023-03-07 15:31:29:291 1500 sec: 299085769 operations; 226524.4 current ops/sec; est completion in 58 minutes [READ: Count=2151892, Max=51487, Min=219, Avg=1768.05, 90=2975, 99=8519, 99.9=17359, 99.99=35615] [UPDATE: Count=113367, Max=43007, Min=320, Avg=1696.84, 90=2977, 99=8083, 99.9=16087, 99.99=34783] 
2023-03-07 15:31:39:291 1510 sec: 301342380 operations; 225661.1 current ops/sec; est completion in 58 minutes [READ: Count=2143691, Max=46527, Min=217, Avg=1774.54, 90=3015, 99=8551, 99.9=17679, 99.99=30143] [UPDATE: Count=112907, Max=32927, Min=295, Avg=1703.66, 90=2995, 99=8083, 99.9=17023, 99.99=30431] 
2023-03-07 15:31:49:291 1520 sec: 303600481 operations; 225810.1 current ops/sec; est completion in 58 minutes [READ: Count=2145216, Max=30303, Min=211, Avg=1773.56, 90=3033, 99=8663, 99.9=16207, 99.99=21999] [UPDATE: Count=112886, Max=26351, Min=320, Avg=1699.39, 90=2999, 99=8099, 99.9=15479, 99.99=20895] 
2023-03-07 15:31:59:291 1530 sec: 305871011 operations; 227053 current ops/sec; est completion in 57 minutes [READ: Count=2156656, Max=44991, Min=213, Avg=1763.3, 90=2991, 99=8399, 99.9=16671, 99.99=23167] [UPDATE: Count=113826, Max=25007, Min=312, Avg=1685.51, 90=2951, 99=7859, 99.9=16039, 99.99=21807] 
2023-03-07 15:32:09:291 1540 sec: 308112901 operations; 224189 current ops/sec; est completion in 57 minutes [READ: Count=2129844, Max=58495, Min=220, Avg=1787.41, 90=3035, 99=8431, 99.9=19439, 99.99=45119] [UPDATE: Count=112092, Max=54175, Min=320, Avg=1707.97, 90=2993, 99=7879, 99.9=17695, 99.99=44863] 
2023-03-07 15:32:19:291 1550 sec: 310400159 operations; 228725.8 current ops/sec; est completion in 57 minutes [READ: Count=2172839, Max=31135, Min=220, Avg=1751.16, 90=3013, 99=7691, 99.9=14759, 99.99=21215] [UPDATE: Count=114405, Max=27839, Min=306, Avg=1672.32, 90=2979, 99=7163, 99.9=13863, 99.99=19471] 
2023-03-07 15:32:29:291 1560 sec: 312660410 operations; 226025.1 current ops/sec; est completion in 57 minutes [READ: Count=2147748, Max=44831, Min=212, Avg=1772.08, 90=3017, 99=8607, 99.9=16943, 99.99=26079] [UPDATE: Count=112526, Max=30735, Min=314, Avg=1694.86, 90=2985, 99=7863, 99.9=16111, 99.99=22719] 
2023-03-07 15:32:39:291 1570 sec: 314927475 operations; 226706.5 current ops/sec; est completion in 56 minutes [READ: Count=2153929, Max=34527, Min=220, Avg=1766.62, 90=3021, 99=8255, 99.9=16751, 99.99=24063] [UPDATE: Count=113137, Max=31183, Min=299, Avg=1691.19, 90=2995, 99=7643, 99.9=16039, 99.99=21071] 
2023-03-07 15:32:49:291 1580 sec: 317150247 operations; 222277.2 current ops/sec; est completion in 56 minutes [READ: Count=2111787, Max=35775, Min=215, Avg=1801.78, 90=3059, 99=9615, 99.9=18335, 99.99=24815] [UPDATE: Count=110970, Max=31711, Min=314, Avg=1726.21, 90=3009, 99=9039, 99.9=17679, 99.99=25055] 
2023-03-07 15:32:59:291 1590 sec: 319402387 operations; 225214 current ops/sec; est completion in 56 minutes [READ: Count=2139954, Max=49599, Min=214, Avg=1778.45, 90=3011, 99=9111, 99.9=17567, 99.99=27119] [UPDATE: Count=112201, Max=34623, Min=313, Avg=1700.83, 90=2971, 99=8527, 99.9=17007, 99.99=22783] 
2023-03-07 15:33:09:291 1600 sec: 321636435 operations; 223404.8 current ops/sec; est completion in 56 minutes [READ: Count=2122049, Max=55199, Min=213, Avg=1793.38, 90=3039, 99=8487, 99.9=20319, 99.99=47583] [UPDATE: Count=112003, Max=50367, Min=307, Avg=1704.16, 90=2995, 99=7791, 99.9=17135, 99.99=46911] 
2023-03-07 15:33:19:291 1610 sec: 323899914 operations; 226347.9 current ops/sec; est completion in 56 minutes [READ: Count=2150476, Max=40927, Min=217, Avg=1769.51, 90=3027, 99=8367, 99.9=15719, 99.99=21839] [UPDATE: Count=112986, Max=28719, Min=309, Avg=1692.23, 90=2985, 99=7919, 99.9=15415, 99.99=20959] 
2023-03-07 15:33:29:291 1620 sec: 326152712 operations; 225279.8 current ops/sec; est completion in 55 minutes [READ: Count=2139974, Max=47199, Min=221, Avg=1777.53, 90=2993, 99=8943, 99.9=17631, 99.99=24559] [UPDATE: Count=112822, Max=26655, Min=320, Avg=1705.47, 90=2987, 99=8351, 99.9=16943, 99.99=22639] 
2023-03-07 15:33:39:291 1630 sec: 328399927 operations; 224721.5 current ops/sec; est completion in 55 minutes [READ: Count=2135300, Max=43999, Min=217, Avg=1782.65, 90=2999, 99=9023, 99.9=19103, 99.99=30943] [UPDATE: Count=111916, Max=34335, Min=307, Avg=1697.94, 90=2981, 99=8239, 99.9=18111, 99.99=27711] 
2023-03-07 15:33:49:291 1640 sec: 330642147 operations; 224222 current ops/sec; est completion in 55 minutes [READ: Count=2130541, Max=39519, Min=207, Avg=1786.22, 90=3033, 99=9311, 99.9=18319, 99.99=26943] [UPDATE: Count=111680, Max=29551, Min=314, Avg=1707.91, 90=2987, 99=8599, 99.9=17167, 99.99=24591] 
2023-03-07 15:33:59:291 1650 sec: 332902013 operations; 225986.6 current ops/sec; est completion in 55 minutes [READ: Count=2146957, Max=51199, Min=216, Avg=1773.07, 90=3019, 99=8391, 99.9=17215, 99.99=34975] [UPDATE: Count=112901, Max=36959, Min=291, Avg=1684.39, 90=2961, 99=7663, 99.9=16071, 99.99=26399] 
2023-03-07 15:34:09:291 1660 sec: 335157730 operations; 225571.7 current ops/sec; est completion in 54 minutes [READ: Count=2142611, Max=46559, Min=206, Avg=1775.68, 90=3037, 99=8407, 99.9=16847, 99.99=25711] [UPDATE: Count=113190, Max=34847, Min=315, Avg=1697.46, 90=2997, 99=7787, 99.9=16167, 99.99=22639] 
2023-03-07 15:34:19:291 1670 sec: 337401866 operations; 224413.6 current ops/sec; est completion in 54 minutes [READ: Count=2131446, Max=46399, Min=208, Avg=1784.59, 90=3033, 99=8535, 99.9=17695, 99.99=40063] [UPDATE: Count=112631, Max=41599, Min=299, Avg=1711.14, 90=3009, 99=8035, 99.9=17471, 99.99=39711] 
2023-03-07 15:34:29:291 1680 sec: 339634807 operations; 223294.1 current ops/sec; est completion in 54 minutes [READ: Count=2121495, Max=53407, Min=213, Avg=1793.86, 90=3043, 99=9167, 99.9=18591, 99.99=34335] [UPDATE: Count=111449, Max=48383, Min=294, Avg=1711.47, 90=2989, 99=8551, 99.9=17087, 99.99=34207] 
2023-03-07 15:34:39:291 1690 sec: 341873915 operations; 223910.8 current ops/sec; est completion in 54 minutes [READ: Count=2127387, Max=46783, Min=221, Avg=1788.86, 90=3045, 99=8967, 99.9=17599, 99.99=29903] [UPDATE: Count=111712, Max=30687, Min=300, Avg=1705.87, 90=3001, 99=8271, 99.9=15999, 99.99=22671] 
2023-03-07 15:34:49:291 1700 sec: 344152380 operations; 227846.5 current ops/sec; est completion in 54 minutes [READ: Count=2164207, Max=44831, Min=216, Avg=1757.84, 90=3027, 99=7579, 99.9=14887, 99.99=26319] [UPDATE: Count=114267, Max=35199, Min=307, Avg=1684.28, 90=3003, 99=7095, 99.9=14311, 99.99=26319] 
2023-03-07 15:34:59:291 1710 sec: 346411965 operations; 225958.5 current ops/sec; est completion in 53 minutes [READ: Count=2146642, Max=39455, Min=215, Avg=1772.45, 90=3021, 99=8623, 99.9=17551, 99.99=24559] [UPDATE: Count=112929, Max=26591, Min=307, Avg=1697.95, 90=2995, 99=8055, 99.9=17039, 99.99=23487] 
2023-03-07 15:35:09:291 1720 sec: 348671609 operations; 225964.4 current ops/sec; est completion in 53 minutes [READ: Count=2146762, Max=47583, Min=222, Avg=1772.53, 90=3027, 99=8711, 99.9=16215, 99.99=25711] [UPDATE: Count=112907, Max=29647, Min=322, Avg=1695.37, 90=3007, 99=8143, 99.9=15295, 99.99=21087] 
2023-03-07 15:35:19:291 1730 sec: 350925367 operations; 225375.8 current ops/sec; est completion in 53 minutes [READ: Count=2141101, Max=35295, Min=213, Avg=1777.11, 90=3029, 99=8815, 99.9=16751, 99.99=21679] [UPDATE: Count=112691, Max=27151, Min=299, Avg=1700, 90=3005, 99=8247, 99.9=16095, 99.99=20847] 
2023-03-07 15:35:29:291 1740 sec: 353187173 operations; 226180.6 current ops/sec; est completion in 53 minutes [READ: Count=2148456, Max=45311, Min=216, Avg=1771.3, 90=3029, 99=8163, 99.9=16863, 99.99=24063] [UPDATE: Count=113308, Max=25967, Min=327, Avg=1685.04, 90=2975, 99=7595, 99.9=16287, 99.99=21279] 
2023-03-07 15:35:39:291 1750 sec: 355428951 operations; 224177.8 current ops/sec; est completion in 52 minutes [READ: Count=2129938, Max=46591, Min=217, Avg=1786.74, 90=3021, 99=8767, 99.9=18383, 99.99=38367] [UPDATE: Count=111830, Max=45759, Min=307, Avg=1707.42, 90=2987, 99=8199, 99.9=17103, 99.99=38655] 
2023-03-07 15:35:49:291 1760 sec: 357687353 operations; 225840.2 current ops/sec; est completion in 52 minutes [READ: Count=2145386, Max=41503, Min=211, Avg=1773.72, 90=3031, 99=8263, 99.9=16863, 99.99=37567] [UPDATE: Count=113005, Max=40863, Min=305, Avg=1691.15, 90=2989, 99=7719, 99.9=15815, 99.99=37503] 
2023-03-07 15:35:59:291 1770 sec: 359945306 operations; 225795.3 current ops/sec; est completion in 52 minutes [READ: Count=2144729, Max=49151, Min=218, Avg=1773.77, 90=3035, 99=8303, 99.9=16815, 99.99=25775] [UPDATE: Count=113224, Max=30751, Min=306, Avg=1698.36, 90=3001, 99=7799, 99.9=16447, 99.99=23903] 
2023-03-07 15:36:09:291 1780 sec: 362195867 operations; 225056.1 current ops/sec; est completion in 52 minutes [READ: Count=2138030, Max=44863, Min=215, Avg=1779.57, 90=3047, 99=8647, 99.9=17535, 99.99=26911] [UPDATE: Count=112533, Max=30975, Min=310, Avg=1703.87, 90=3015, 99=8215, 99.9=16511, 99.99=23247] 
2023-03-07 15:36:19:291 1790 sec: 364459946 operations; 226407.9 current ops/sec; est completion in 52 minutes [READ: Count=2150891, Max=30943, Min=212, Avg=1768.72, 90=3015, 99=8503, 99.9=16023, 99.99=25455] [UPDATE: Count=113204, Max=28399, Min=310, Avg=1692.3, 90=2971, 99=7863, 99.9=15047, 99.99=25391] 
2023-03-07 15:36:29:291 1800 sec: 366689234 operations; 222928.8 current ops/sec; est completion in 51 minutes [READ: Count=2117775, Max=127551, Min=217, Avg=1797, 90=3005, 99=8575, 99.9=18591, 99.99=115199] [UPDATE: Count=111516, Max=119615, Min=306, Avg=1718.07, 90=2961, 99=8055, 99.9=17887, 99.99=115199] 
Maximum time elapsed. Requesting stop for the workload.
Stop requested for workload. Now Joining!
Still waiting for thread Thread-85 to complete. Workload status: true
2023-03-07 15:36:31:559 1802 sec: 366694999 operations; 2541.89 current ops/sec; est completion in 51 minutes [READ: Count=5457, Max=17647, Min=271, Avg=2411.2, 90=4247, 99=12567, 99.9=17007, 99.99=17471] [CLEANUP: Count=400, Max=2226175, Min=0, Avg=5564.65, 90=1, 99=15, 99.9=2226175, 99.99=2226175] [UPDATE: Count=242, Max=16959, Min=370, Avg=2190.26, 90=3221, 99=14255, 99.9=16959, 99.99=16959] 
[OVERALL], RunTime(ms), 1802266
[OVERALL], Throughput(ops/sec), 203463.30619342538
[TOTAL_GCS_PS_Scavenge], Count, 3134
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 18641
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 1.0343090309643528
[TOTAL_GCS_PS_MarkSweep], Count, 3
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 221
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.012262340853126009
[TOTAL_GCs], Count, 3137
[TOTAL_GC_TIME], Time(ms), 18862
[TOTAL_GC_TIME_%], Time(%), 1.0465713718174787
[READ], Operations, 348361086
[READ], AverageLatency(us), 1981.7039341156492
[READ], MinLatency(us), 196
[READ], MaxLatency(us), 714239
[READ], 95thPercentileLatency(us), 4567
[READ], 99thPercentileLatency(us), 7339
[READ], Return=OK, 348361086
[CLEANUP], Operations, 400
[CLEANUP], AverageLatency(us), 5564.6525
[CLEANUP], MinLatency(us), 0
[CLEANUP], MaxLatency(us), 2226175
[CLEANUP], 95thPercentileLatency(us), 3
[CLEANUP], 99thPercentileLatency(us), 15
[UPDATE], Operations, 18333913
[UPDATE], AverageLatency(us), 1570.0914786712472
[UPDATE], MinLatency(us), 266
[UPDATE], MaxLatency(us), 204415
[UPDATE], 95thPercentileLatency(us), 3053
[UPDATE], 99thPercentileLatency(us), 5387
[UPDATE], Return=OK, 18333913
